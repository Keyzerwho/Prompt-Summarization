 Chef likes to solve difficult tasks. This time, he tried to solve the Big Famous Unsolvable $A+B=C$. One of his friends played a prank on Chef and randomly shuffled the bits in $A$ and $B$ (independently in each number). However, the funny thing is that the sum of the resulting numbers remained $C$ even after shuffling. Chef is now wondering: in how many ways is it possible to shuffle the bits of $A$ and the bits of $B$ such that their sum after shuffling is equal to $C$  Let's denote the integers obtained by shuffling the
-----Input----- - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. - The first and only line of each test case contains three space-separated integers $A$, $B$ and $C$.  -----Output----- For each test case, print a single line containing one integer â€” the number of ways to shuffle the bits. -----Constraints----- - $1 \le T \le 1,000$ - $1 \le A, B, C \le 10^9$ - $A+B = C$ -----Subtasks----- Subtask #1 (50 points): $1 \le A, B, C \le 10^5$ Subtask #2 (50 points): original constraints -----Example Input----- 2 1 2 3 369 428 797 -----Example Output----- 2 56 -----Explanation----- Example case 1: We can consider $A=01$ and $B=10$ in binary. Then, there are two possible ways: swapping the two bits of $A$ and the two bits of $B$ ($A_s=10$, $B_s=01$ in binary, $2$ and $1$ in decimal representation) or not shuffling any bits.