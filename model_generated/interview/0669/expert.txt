 You are given a number of magnitude 1. You need to divide this number into as many positive parts as possible such that at any moment given a part A,  you can divide into only two parts B and C, such that B does not exceed C times some constant. 
-----Input----- - The first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows. - The first line of each test case contains three space-separated integers N$N$, M$M$ and K$K$. - Each of the next M$M$ lines contains two space-separated integers u$u$ and v$v$ denoting a road between cities u$u$ and v$v$. - The next line contains a single integer Q$Q$. - Q$Q$ lines follow. For each i$i$ (1≤i≤Q$1 \le i \le Q$), the i$i$-th of these lines contains two space-separated integers ai$a_i$ and bi$b_i$. -----Output----- For each test case, print a single line containing one integer — the number of trips Ryan can make, modulo 109+7$10^9+7$. -----Constraints----- - 1≤T≤50$1 \le T \le 50$ - 1≤N,M,K,Q≤9,000$1 \le N, M, K, Q \le 9,000$ - 1≤ui,vi≤N$1 \le u_i, v_i \le N$ for each valid i$i$ - ui≠vi$u_i \neq v_i$ for each valid i$i$ - there is at most one road between each pair of cities - each city is reachable from every other city - 1≤ai≤N$1 \le a_i \le N$ for each valid i$i$ - 0≤bi≤K$0 \le b_i \le K$ for each valid i$i$ - the sum of N$N$ over all test cases does not exceed 9,000$9,000$ - the sum of K$K$ over all test cases does not exceed 9,000$9,000$ - the sum of M$M$ over all test cases does not exceed 9,000$9,000$ - the sum of Q$Q$ over all test cases does not exceed 9,000$9,000$ -----Subtasks----- Subtask #1 (20 points): - the sum of N$N$ over all test cases does not exceed 400$400$ - the sum of K$K$ over all test cases does not exceed 400$400$ - the sum of M$M$ over all test cases does not exceed 400$400$ - the sum of Q$Q$ over all test cases does not exceed 400$400$ Subtask #2 (80 points): original constraints -----Example Input----- 3 4 3 3 1 2 1 3 1 4 0 4 3 3 1 2 1 3 1 4 1 2 2 4 3 3 1 2 1 3 1 4 1 2 1 -----Example Output----- 28 4 6