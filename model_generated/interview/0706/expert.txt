 You are given a number of magnitude 1. You need to divide this number into as many positive parts as possible such that at any moment given a part A,  you can divide into only two parts B and C, such that B does not exceed C times some constant. 
-----Input----- - The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows. - The first line of each test case contains two space-separated integers $N$ and $K$. - The second line contains $N$ space-separated integers $W_1, W_2, \ldots, W_N$. -----Output----- For each test case, print a single line containing one integer â€• the smallest number of round trips or $-1$ if it is impossible for Chef to bring all boxes home. -----Constraints----- - $1 \le T \le 100$ - $1 \le N, K \le 10^3$ - $1 \le W_i \le 10^3$ for each valid $i$ -----Example Input----- 4 1 1  2 2 4 1 1 3 6 3 4 2 3 6 3 4 3 -----Example Output----- -1 1 2 3 -----Explanation----- Example case 1: Since the weight of the box higher than $K$, Chef can not carry that box home in any number of the round trip. Example case 2: Since the sum of weights of both boxes is less than $K$, Chef can carry them home in one round trip. Example case 3: In the first round trip, Chef can only pick up the box at position $1$. In the second round trip, he can pick up both remaining boxes at positions $2$ and $3$. Example case 4: Chef can only carry one box at a time, so three round trips are required.