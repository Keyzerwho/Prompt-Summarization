 You are Chef Tobby. You are trying to run the code given by Bhuvan for an experiment they want to include in the manuscript to be submitted to a conference. The deadline to submit the manuscript is within a couple of hours and Chef Tobby needs to finish the experiments before then. The code given by Bhuvan is the following which runs given an array of N integers and another integer K : void recurse ( array a, int n ) {  // n = size of array  define array b currently empty  consider all 2^n subsets of a[]  {   x = bitwise OR of elements in the subsets  
-----Input section----- The first line contains T, the number of test cases. Each test case consists of 2 lines. The first line contains 2 integers N and K, denoting the number of elements in the array and parameter mentioned in problem statement. Next line contains N space separated integers, denoting the elements of the array. -----Output section----- Output the minimum number of elements that need to be inserted so that inifinite loop can be avoided. -----Input constraints----- 1 ≤ T ≤ 10 1 ≤ Sum of N over all test cases ≤ 105 1 ≤ K ≤ 20 0 ≤ A[i] ≤ 2K-1, where A[i] denotes the ith element of the array. -----Sample Input - 1----- 1 2 2 3 1 -----Sample Output - 1----- 1 -----Explanation - 1----- You can win the game by inserting the element 2 into the array. -----Sample Input - 2----- 1 7 3 3 7 5 4 6 2 1 -----Sample Output - 2----- 0 -----Explanation - 2----- The initial array will result will terminate in the first step of algorithm only. Thus there is no need to insert any new element.