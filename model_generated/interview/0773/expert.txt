 You are given an unsorted array (n + 1). Your task is to find a permutation of size n, such that each element of the permutation appears exactly once. 
-----Input----- First line of the input contains an integer T denoting number of test cases. For each test case, the only line contains an integer n. -----Output----- For each test case, output the lexicographically smallest good permutation of length n. It's guaranteed that this permutation exists. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ n ≤ 105 -----Subtasks----- - Subtask #1 (17 points): 2 ≤ n ≤ 9 - Subtask #2 (83 points): Original Constraints -----Example----- Input: 4 2 3 5 6 Output: 2 1 2 3 1 2 1 4 5 3 2 1 4 3 6 5 -----Explanation----- Example case 1. The only good permutation of length 2 is (2, 1). Example case 2. Consider all permutations of length 3, they are(in lexicographically order): - p = (1, 2, 3), it's not good since p[1] = 1, p[2] = 2 and p[3] = 3; - p = (1, 3, 2), it's not good since p[1] = 1; - p = (2, 1, 3), it's not good since p[3] = 3; - p = (2, 3, 1), it's good since p[1] ≠ 1, p[2] ≠ 2 and p[3] ≠ 3; - p = (3, 1, 2), it's good since p[1] ≠ 1, p[2] ≠ 2 and p[3] ≠ 3; - p = (3, 2, 1), it's not good since p[2] = 2. Thus the minimum good one is (2, 3, 1). Example case 3. Consider two good permutations for third test case: p=(2, 1, 4, 5, 3) and q=(2, 4, 1, 5, 3), then p < q. You can check lexicographically condition as follows. Find the first index where the entries of two permutations are different, and compare those entries. For example, in this case, the first position where the entries differ is index 2. You can see that p[2] < q[2], as 1 < 4, so p is lexicographically smaller than q.