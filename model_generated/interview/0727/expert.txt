 You are given two integer arrays of length N, array $x$ and array $y$. For each array, you want to make all its values equivalent such that $x_1$ = $x_2$ = $x_3$ = ... = $x_n$ and $y_1$ = $y_2$ = $y_3$ = ... = $y_n$ in the least number of moves possible. In one move, you can decrement the value of an element by 1 at $x_i$ or $y_i$, or at both $x
-----Input----- First line contains an integer T (number of test cases, 1 ≤ T ≤ 10 ). Each of the next T lines contains two integers N M, as explained in the problem statement (1 ≤ N ≤ 30 , 1 ≤ M ≤ 1000). -----Output----- For each test case, output the minimum length of the unused wire, or -1 if the the wire is not sufficient. -----Example----- Input: 4 3 8 3 9 2 4 5 25 Output: 0 0 -1 5 Explanation: In the 1st case, for example, the permutation P = {2, 1, 3} will use the exact 8 miles wires in total. In the 2nd case, for example, the permutation P = {1, 3, 2} will use the exact 9 miles wires in total. To understand the first two cases, you can see the following figures: In the 3rd case, the minimum length of wire required is 5, for any of the permutations {1,2} or {2,1}, so length 4 is not sufficient. In the 4th case, for the permutation {1, 2, 3, 4, 5} we need the maximum length of the wire = 20. So minimum possible unused wire length = 25 - 20 = 5.