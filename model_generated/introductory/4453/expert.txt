 You are given a number, `num`. In one step, you can either double the value of `num`, or decrement `num` by 1. Return the minimum number of steps required before the value of `num` equals `1`. 
Examples: `num == 3` would return `2` steps: ``` 1 -- +1 --> 2:        1 step 2 -- +1 --> 3:        2 steps 2 steps ``` `num == 12` would return `4` steps: ``` 1 -- +1 --> 2:        1 step 2 -- +1 --> 3:        2 steps 3 -- x2 --> 6:        3 steps 6 -- x2 --> 12:       4 steps 4 steps ``` `num == 16` would return `4` steps: ``` 1 -- +1 --> 2:        1 step 2 -- x2 --> 4:        2 steps 4 -- x2 --> 8:        3 steps 8 -- x2 --> 16:       4 steps 4 steps ```