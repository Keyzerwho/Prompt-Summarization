 
Given an input string (5 fields separated by spaces), return a dictionary. Each key is the cron field and the value is the valid values. For example, if the input is ``` * * * * * ``` then the output should be: ``` {'hour': ['0', '2', '4', '6', '8'], 'minute': ['0', '1', '2', '3', '4'], 'day of
Note: In the case of multiple values in a single field, the resulting values should be sorted. Note: Steps and ranges can also be combined `1-10/2` would be every second value in the `1-10` range `1 3 5 7 9`. For an added challenge day of week and month will both support shortened iso formats: ``` SUN MON TUE ... JAN FEB MAR ... ``` Examples ======== `*` should output every valid value `0 1 2 3 4 5 6 ...` `1` should output the value `1`. `1,20,31` should output the values `1 20 31`. `1-10` should output the values `1 2 3 4 5 6 7 8 9 10`. `*/2` should output every second value `0 2 4 6 8 10 ...`. `*/2` should output `1 3 5 7 9 ...` in the cases, day of month and month. `1-10/2` should output `1 3 5 7 9`. `*/15,3-5` should output the values `0 3 4 5 15 30 45` when applied to the minute field. Output ====== The purpose of this kata is to take in a crontab command, and render it in a nice human readable format. The output format should be in the format `field_name      values`. The field name should be left justified and padded to 15 characters. The values should be a space separated string of the returned values. For example the crontab `*/15 0 1,15 * 1-5` would have the following output: ``` minute          0 15 30 45 hour            0 day of month    1 15 month           1 2 3 4 5 6 7 8 9 10 11 12 day of week     1 2 3 4 5 ``` All test cases will receive a valid crontab, there is no need to handle an incorrect number of values. Super handy resource for playing with different values to find their outputs: https://crontab.guru/