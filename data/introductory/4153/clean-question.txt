## Task Find the sum of the first `n` elements in the Recam√°n Sequence. Input range: ```python 1000 tests 0 <= n <= 2,500,000 ``` ___ ## Sequence The sequence is formed using the next formula: __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh We start with `0` __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh At each step `i`, we subtract `i` from the previous number __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh Otherwise the `i`th element of the sequence will be previous number plus `i` The beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because: 0) `0` <- we start with `0` 1) `1` <- `0 - 1` is negative, hence we choose `0 + 1` 2) `3` <- `1 - 2` is negative, hence we choose `1 + 2` 3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3` 4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it ___ ## Examples ``` rec(0) == 0 rec(1) == 0 rec(2) == 1 rec(3) == 4 rec(4) == 10 rec(5) == 12 ```
