# Task Your task is to write a function for calculating the score of a 10 pin bowling game. The input for the function is a list of pins knocked down per roll for one player. Output is the player's total score. # Rules ## General rules Rules of bowling in a nutshell: __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls. __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh The total score is the sum of your scores for the 10 frames __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls ## Rules for 10th frame As the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that: __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh if the last frame is a spare, player rolls 1 bonus ball. __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh if the last frame is a strike, player rolls 2 bonus balls. These bonus balls on 10th frame are only counted as a bonus to the respective spare or strike. # More information http://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring # Input You may assume that the input is always valid. This means: __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh input list length is correct __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh number of pins knocked out per roll is valid
