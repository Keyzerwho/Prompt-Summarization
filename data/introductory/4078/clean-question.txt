Your task is to write a function that does just what the title suggests (so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number `n` of smallest elements to return. Also: __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh the number of elements to be returned cannot be higher than the array/list/vector length; __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh elements can be duplicated; __pycache__ aggregate_results.csv check_split.py competition config.yaml download.sh filter_generated.sh format.sh get_results.sh gpt.py interview introductory logging.yaml logs model_results.sh prepare.sh prompt.yaml prompt_generation.py remove_bad.sh results.sh solution.py split.txt studio21_api.py test.sh view_solution.sh in case of duplicates, just return them according to the original order (see third example for more clarity). Same examples and more in the test cases: ```python first_n_smallest([1,2,3,4,5],3) == [1,2,3] first_n_smallest([5,4,3,2,1],3) == [3,2,1] first_n_smallest([1,2,3,4,1],3) == [1,2,1] first_n_smallest([1,2,3,-4,0],3) == [1,-4,0] first_n_smallest([1,2,3,4,5],0) == [] ``` [Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077) also available.
