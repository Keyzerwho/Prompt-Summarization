{
    "0": "\n    n, m, a, b = map(int, input().split())\n    graph = [[] for i in range(n + 1)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    ans = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        visited = [False for i in range(n + 1)]\n        visited[i] = True\n        q = [i]\n        cost = 0\n        while q:\n            curr = q.pop(0)\n            for node, c in graph[curr]:\n                if not visited[node]:\n                    visited[node] = True\n                    q.append(node)\n                    cost += c\n        ans[i] = cost\n    print(*ans[1:])\n\nif __name__ == \"__main__\":\n    code()",
    "1": "\n    n, m, a, b = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        graph[u-1].append((v-1, c))\n        graph[v-1].append((u-1, c))\n\n    dist = [float('inf')] * n\n    dist[0] = 0\n    for i in range(n-1):\n        for u in range(n):\n            for v, c in graph[u]:\n                if dist[v] > dist[u] + c:\n                    dist[v] = dist[u] + c\n    print(*[min(dist[i] + a if dist[i] != float('inf') else float('inf')) for i in range(n)])\n\ncode()",
    "2": "\n    n = int(input())\n    s = input()\n    d = {\"(\":1, \")\":-1}\n    stack = []\n    for i in s:\n        stack.append(d[i])\n    stack = stack[::-1]\n    ans = 0\n    for i in range(len(stack)):\n        ans += stack[i]*(2**i)\n    print(ans)\ncode()",
    "3": "\n    n = int(input())\n    s = input()\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            temp = ''\n            while stack[-1] != '(':\n                temp += stack.pop()\n            stack.pop()\n            stack.append(str(eval(temp)))\n        else:\n            stack.append(i)\n    print(eval(stack[0]) % 1000000007)\n\ncode()",
    "4": "\n    s = input()\n    k = int(input())\n    print(s[k:] + s[:k])\n\ncode()",
    "5": "\n    s = input()\n    n = len(s)\n    res = 0\n    for i in range(n):\n        if s[i] == s[(i + 1) % n]:\n            res += 1\n    print(res / n)\n\ncode()"
}