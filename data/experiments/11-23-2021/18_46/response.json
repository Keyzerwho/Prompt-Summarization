{
    "id": "cmpl-47be5p1FWqHdH8cIZLYo9vAFoC0J8",
    "object": "text_completion",
    "created": 1637718353,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    ",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, a, b = map(int, input().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, c = map(int, input().split())\n        graph[u-1].append((v-1, c))\n        graph[v-1].append((u-1, c))\n    #print(graph)\n    dist = [float('inf') for _ in range(n)]\n    dist[0] = 0\n    for _ in range(n-1):\n        for u in range(n):\n            for v, c in graph[u]:\n                if dist[u] + c < dist[v]:\n                    dist[v] = dist[u] + c\n    #print(dist)\n    ans = [0]*n\n    for u in range(n):\n        for v, c in graph[u]:\n            if dist[u] + c == dist[v]:\n                ans[v] = max(ans[v], dist[v])\n    for i in range(n):\n        if dist[i] <= a:\n            ans[i] = 0\n        elif dist[i] <= b:\n            ans[i] = min(ans[i], dist[i] - a)\n        else:\n            ans[i] = dist[i] - b\n    print(*ans)\n\n",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\ndef code():\n    n, m, a, b = [int(i) for i in input().split()]\n    roads = [[int(i) for i in input().split()] for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    d = [[float('inf')]*n for _ in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n    for u, v, c in roads:\n        d[u-1][v-1] = c if c < b else b\n        d[v-1][u-1] = c if c < b else b\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    ans = [0]*n\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == a:\n                ans[j] += 1\n    print(*ans)\n\n",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\ns = input()\nk = int(input())\n\nif k == 0:\n    print(1)\n    exit()\n\nif len(s) == 1:\n    print(0)\n    exit()\n\nif s[0] == s[1]:\n    print(0)\n    exit()\n\nif k > len(s)//2:\n    k = len(s) - k\n\nif s[k] == s[0]:\n    print(0)\n    exit()\n\nif s[0] == s[-1]:\n    print(0)\n    exit()\n\nif s[k] == s[-1]:\n    print(0)\n    exit()\n\nprint(1)",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    n = len(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 1\n        else:\n            dp[i][i+1] = 2\n    for i in range(n-2):\n        if s[i] == s[i+2]:\n            dp[i][i+2] = 1\n        else:\n            dp[i][i+2] = 2\n    for i in range(n-3):\n        if s[i] == s[i+3]:\n            dp[i][i+3] = 1\n        else:\n            dp[i][i+3] = 2\n    for i in range(n-4):\n        if s[i] == s[i+4]:\n            dp[i][i+4] = 1\n        else:\n            dp[i][i+4] = 2\n    for i in range(n-5):\n        if s[i] == s[i+5]:\n            dp[i][i+5] = 1\n        else:\n            dp[i][i+5] = 2\n    for i in range(n-6):\n        if s[i] == s[i+6]:\n            dp[i][i+6] = 1\n        else:\n            dp[i][i+6] = 2\n    for i in range(n-7):\n        if s[i] == s[i+7]:\n            dp[i][i+7] = 1\n        else:\n            dp[i][i+7] = 2\n    for i in range(n-8):\n        if s[i] == s[i+8]:\n            dp[i][i+8] = 1\n        else:\n            dp[i][i+8] = 2\n    for i in",
            "index": 5,
            "logprobs": null,
            "finish_reason": "length"
        }
    ]
}