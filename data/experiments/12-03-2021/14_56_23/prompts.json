{
    "0": "Python 3\n\"\"\"\n# Task\n\nGiven the start and end numbers, write a method to return the frequency of all digits from start number to end number.\n\n# Example\n\nInput: start = 125, end = 132\nOutput: [1,9,6,3,0,1,1,1,1,1]\nExplanation: The digit frequencies are 1 x 0, 9 x 1, 6 x 2 etc... and so the method would return [1,9,6,3,0,1,1,1,1,1]\n\n\"\"\"\ndef paint_letterboxes(start, finish):",
    "1": "Python 3\n\"\"\"\n# Story\n\nYou and a group of friends are earning some extra money in the school holidays by re-painting the numbers on people's letterboxes for a small fee.\n\nSince there are 10 of you in the group each person just concentrates on painting one digit! For example, somebody will paint only the ```1```'s, somebody else will paint only the ```2```'s and so on...\n\nBut at the end of the day you realise not everybody did the same amount of work.\n\nTo avoid any fights you need to distribute the money fairly. That's where this Kata comes in.\n\n# Kata Task\n\nGiven the ```start``` and ```end``` letterbox numbers, write a method to return the frequency of all 10 digits painted.\n\n# Example\n\nFor ```start``` = 125, and ```end``` = 132\n\nThe letterboxes are\n* 125 = ```1```, ```2```, ```5```\n* 126 = ```1```, ```2```, ```6```\n* 127 = ```1```, ```2```, ```7```\n* 128 = ```1```, ```2```, ```8```\n* 129 = ```1```, ```2```, ```9```\n* 130 = ```1```, ```3```, ```0```\n* 131 = ```1```, ```3```, ```1```\n* 132 = ```1```, ```3```, ```2```\n\nThe digit frequencies are 1 x ```0```, 9 x ```1```, 6 x ```2``` etc...\n\nand so the method would return ```[1,9,6,3,0,1,1,1,1,1]```\n\n# Notes\n\n* 0 < ```start``` <= ```end```\n* In C, the returned value will be free'd.\n\"\"\"\ndef paint_letterboxes(start, finish):",
    "2": "Python 3\n\"\"\"\nWrite a function that gets a sequence and value and returns `true` if the variable exists in a multidimentional sequence.\n\nExample:\n```\nlocate(['a','b',['c','d',['e']]],'e'); // should return true\nlocate(['a','b',['c','d',['e']]],'a'); // should return true\nlocate(['a','b',['c','d',['e']]],'f'); // should return false\n```\n\"\"\"\ndef locate(seq, value):",
    "3": "Python 3\n\"\"\"\nWrite a function that gets a sequence and value and returns `true/false` depending on whether the variable exists in a multidimentional sequence.\n\nExample:\n```\nlocate(['a','b',['c','d',['e']]],'e'); // should return true\nlocate(['a','b',['c','d',['e']]],'a'); // should return true\nlocate(['a','b',['c','d',['e']]],'f'); // should return false\n```\n\"\"\"\ndef locate(seq, value):",
    "4": "Python 3\n\"\"\"\nAlex and Lee play a game with a list of numbers. There are an even number of\u00a0elements in the list and each value has a positive integer number.\nThe objective of the game is to end with largest value. The total sum of values is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first. Each turn, a player\u00a0takes value from either the beginning or the end of the list.\u00a0This continues until there are no more values left, at which point the person with the largest value wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\n\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\n\"\"\"\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:",
    "5": "Python 3\n\"\"\"\nAlex and Lee play a game with piles of stones.\u00a0 There are an even number of\u00a0piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most\u00a0stones.\u00a0 The total number of stones is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first.\u00a0 Each turn, a player\u00a0takes the entire pile of stones from either the beginning or the end of the row.\u00a0 This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\u00a0\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\"\"\"\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:",
    "6": "Python 3\n\"\"\"\nYou are given a line of n gemstones, the i-th of which has color c_{i}. The goal is to destroy all the gemstones in the line.\n\nIn one second, exactly one continuous substring of colored gemstones is chosen that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. \n\nWhat is the minimum number of seconds needed to destroy the entire line?\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is c_{i} (1 \u2264 c_{i} \u2264 n)\u00a0\u2014 the color of the i-th gemstone in a line.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds needed to destroy the entire line.\n\n\n-----Examples-----\nInput\n3\n1 2 1\n\nOutput\n1\n\nInput\n3\n1 2 3\n\nOutput\n3\n\nInput\n7\n1 4 4 2 3 2 1\n\nOutput\n2\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nGenos recently installed the game Zuma on his phone. In Zuma there exists a line of n gemstones, the i-th of which has color c_{i}. The goal of the game is to destroy all the gemstones in the line as quickly as possible.\n\nIn one second, Genos is able to choose exactly one continuous substring of colored gemstones that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line?\n\nLet us remind, that the string (or substring) is called palindrome, if it reads same backwards or forward. In our case this means the color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is c_{i} (1 \u2264 c_{i} \u2264 n)\u00a0\u2014 the color of the i-th gemstone in a line.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds needed to destroy the entire line.\n\n\n-----Examples-----\nInput\n3\n1 2 1\n\nOutput\n1\n\nInput\n3\n1 2 3\n\nOutput\n3\n\nInput\n7\n1 4 4 2 3 2 1\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample, Genos can destroy the entire line in one second.\n\nIn the second sample, Genos can only destroy one gemstone at a time, so destroying three gemstones takes three seconds.\n\nIn the third sample, to achieve the optimal time of two seconds, destroy palindrome 4 4 first and then destroy palindrome 1 2 3 2 1.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven are integer sequence of length N, A = (A_1, A_2, \\cdots, A_N), and an integer K.\nFor each X such that 1 \\le X \\le K, find the following value:\n\\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X\\right) \\bmod 998244353\n\n-----Constraints-----\n - All values in input are integers.\n -  2 \\le N \\le 2 \\times 10^5\n -  1 \\le K \\le 300 \n -  1 \\le A_i \\le 10^8 \n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint K lines.\nThe X-th line should contain the value \\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X \\right) \\bmod 998244353.\n\n-----Sample Input-----\n3 3\n1 2 3\n\n-----Sample Output-----\n12\n50\n216\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nGiven are integer sequence of length N, A = (A_1, A_2, \\cdots, A_N), and an integer K.\nFor each X such that 1 \\le X \\le K, find the following value:\n\\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X\\right) \\bmod 998244353\n\n-----Constraints-----\n - All values in input are integers.\n -  2 \\le N \\le 2 \\times 10^5\n -  1 \\le K \\le 300 \n -  1 \\le A_i \\le 10^8 \n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint K lines.\nThe X-th line should contain the value \\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X \\right) \\bmod 998244353.\n\n-----Sample Input-----\n3 3\n1 2 3\n\n-----Sample Output-----\n12\n50\n216\n\nIn the 1-st line, we should print (1+2)^1 + (1+3)^1 + (2+3)^1 = 3 + 4 + 5 = 12.\nIn the 2-nd line, we should print (1+2)^2 + (1+3)^2 + (2+3)^2 = 9 + 16 + 25 = 50.\nIn the 3-rd line, we should print (1+2)^3 + (1+3)^3 + (2+3)^3 = 27 + 64 + 125 = 216.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given an array arr.\nCalculate and return the sum of all possible odd-length subarrays.\n\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "11": "Python 3\n\"\"\"\nGiven an array of positive integers\u00a0arr, calculate the sum of all possible odd-length subarrays.\nA subarray is a contiguous\u00a0subsequence of the array.\nReturn\u00a0the sum of all odd-length subarrays of\u00a0arr.\n\u00a0\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "12": "Python 3\n\"\"\"\nWrite a function that solves an algebraic expression given as a string and returns a string with the calculated value given in scientific notation with 5 decimal digits. The expression can include only sums and products. The numbers in the expression are in standard notation.\n\nExamples:\nInput:\nstrexpression = \"5 * 4 + 6\"\nOutput:\nsum_prod(strexpression) = \"2.60000e+01\"\n\"\"\"\ndef sum_prod(strexpression):",
    "13": "Python 3\n\"\"\"\nWrite a function that solves an algebraic expression given as a string. \n\n* The expression can include only sums and products. \n\n* The numbers in the expression are in standard notation (NOT scientific).\n\n* In contrast, the function should return a string with the calculated value given in scientific notation with 5 decimal digits. \n\n# Example:\n```python\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression) = \"2.60000e+01\"\n```\n\"\"\"\ndef sum_prod(strexpression):",
    "14": "Python 3\n\"\"\"\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are different)\u00a0\u2014 the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\u00a0\u2014 the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nFor example, let $p = [4, 5, 1, 3, 2, 6]$. In this case, the numbers $1, 3, 5, 6$ are beautiful and $2, 4$ are not. It is because:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 5$ we will have a permutation $[1, 3, 2]$ for $m = 3$;  if $l = 1$ and $r = 5$ we will have a permutation $[4, 5, 1, 3, 2]$ for $m = 5$;  if $l = 1$ and $r = 6$ we will have a permutation $[4, 5, 1, 3, 2, 6]$ for $m = 6$;  it is impossible to take some $l$ and $r$, such that $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$ for $m = 2$ and for $m = 4$. \n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are different)\u00a0\u2014 the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\u00a0\u2014 the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\n\n\n-----Note-----\n\nThe first test case is described in the problem statement.\n\nIn the second test case all numbers from $1$ to $5$ are beautiful:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 4$ we will have a permutation $[1, 2]$ for $m = 2$;  if $l = 2$ and $r = 4$ we will have a permutation $[3, 1, 2]$ for $m = 3$;  if $l = 2$ and $r = 5$ we will have a permutation $[3, 1, 2, 4]$ for $m = 4$;  if $l = 1$ and $r = 5$ we will have a permutation $[5, 3, 1, 2, 4]$ for $m = 5$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven two unordered lists of Size N and N+1 find and return the additional element in the second list.\nInput : \nFirst line contains the value of N. Second line contains list of size N. Third line contains list of size N+1.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Elements \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef and his friends are playing the game AMONG US. They all have chosen their names as numbers. There are N people in Chef\u2019s group including him, and each swears that he is not the imposter. However, it turns out there were N+1 people in the game. Now all that Chef needs to know is the name of the imposter, which is a number. Also remember that numbers can be duplicate. Can you help out Chef in finding the imposter?\nInput : \nFirst line contains the value of N. Second line contains the N numbers that Chef\u2019s friends used as their names. Third line contains the N+1 numbers that people in the game have used as their names.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Numbers used as names \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven an array of numbers, return the difference between the largest and smallest values. The array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow.\n\nExamples:\nInput:\n[23, 3, 19, 21, 16] should return `20` (i.e., `23 - 3`).\nOutput:\n20\n\nInput:\n[1, 434, 555, 34, 112]\nOutput:\n554\n\"\"\"\ndef between_extremes(numbers):",
    "19": "Python 3\n\"\"\"\nGiven an array of numbers, return the difference between the largest and smallest values. \n\nFor example:\n\n`[23, 3, 19, 21, 16]` should return `20` (i.e., `23 - 3`).\n\n`[1, 434, 555, 34, 112]` should return `554` (i.e., `555 - 1`).\n\nThe array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow.\n\"\"\"\ndef between_extremes(numbers):"
}