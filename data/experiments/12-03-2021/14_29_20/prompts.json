{
    "0": "Python 3\n\"\"\"\nCharacters of a string is decoded using mapping as 'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nDetermine the total number of ways to decode it.  There should be no leading \"0\"s, but can contain trailing \"0\"s.Print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nDhruvil has always been a studious person and will be completing his Engineering soon. He is always kneen about solving problems and is preparing hard for his next interview at Hackerrank. He has practiced lots of problems and now he came across this problem.\nGiven a message containing English letters(A-Z), it is being encoded to numbers using the following mapping:\n'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nNow, given a non-empty string containing only digits, help Dhruvil determine the total number of ways to decode it.\nWhile decoding you need to choose a substring of charachters and not a subsequence. Also a chosen substring should not contain any leading \"0\"s, but can contain trailing \"0\"s. Since the output can be very large print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n-----EXPLANATION:-----\nThere are 2 possible ways. It could be decoded as \"AB\" {1,2} or \"L\" {12}.\nThere are 3 possible ways. It could be decoded as \"BZ\" {2,26}, \"VF\" {22,6}, or \"BBF\" {2,2,6}.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given an array A that consists of N positive integers.\n\nFind the minimal number x > 1 such that x is a divisor of all integers from array A. \nIf such number does not exist, output -1.\n\n-----Input-----\n\nThe first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the size of the array A for the corresponding test case. The second line contains N space separated integers A[1], A[2], ..., A[N].\n\n-----Output-----\n\nFor each test case output a single line containing the answer for the corresponding test case.\n\n-----Constraints-----\n1 \u2264 T \u2264 100000\n\n1 \u2264 N \u2264 100000\n\nThe sum of values of N in each test file does not exceed 100000\n\n1 \u2264 A[i] \u2264 100000\n\ni>0\n\n-----Example-----\nInput:\n2\n3\n2 4 8\n3\n4 7 5\n\nOutput:\n2\n-1\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe Little Elephant from the Zoo of Lviv has an array A that consists of N positive integers. Let A[i] be the i-th number in this array (i = 1, 2, ..., N).\n\nFind the minimal number x > 1 such that x is a divisor of all integers from array A. More formally, this x should satisfy the following relations:\n\nA[1] mod x = 0, A[2] mod x = 0, ..., A[N] mod x = 0,\n\nwhere mod stands for the modulo operation. For example,  8 mod 3 = 2,  2 mod 2 = 0, 100 mod 5 = 0 and so on. If such number does not exist, output -1.\n\n-----Input-----\n\nThe first line of the input contains a single integer T, the number of test cases. T test cases follow. The first line of each test case contains a single integer N, the size of the array A for the corresponding test case. The second line contains N space separated integers A[1], A[2], ..., A[N].\n\n-----Output-----\n\nFor each test case output a single line containing the answer for the corresponding test case.\n\n-----Constraints-----\n1 \u2264 T \u2264 100000\n\n1 \u2264 N \u2264 100000\n\nThe sum of values of N in each test file does not exceed 100000\n\n1 \u2264 A[i] \u2264 100000\n\n-----Example-----\nInput:\n2\n3\n2 4 8\n3\n4 7 5\n\nOutput:\n2\n-1\n\n-----Explanation-----\nCase 1. Clearly 2 is a divisor of each of the numbers 2, 4 and 8. Since 2 is the least number greater than 1 then it is the answer.\n\nCase 2. Let's perform check for several first values of x.\n\nx4 mod x7 mod x5 mod x20113112403154206415740584759475\n\nAs we see each number up to 9 does not divide all of the numbers in the array. Clearly all larger numbers also will fail to do this. So there is no such number x > 1 and the answer is -1.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nFind sum the sum of all the prime numbers which are less than the given number N.\n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the test cases follow. \n- Each test case contains of a single line of input $N$ till which sum of all prime numbers between 1 to n has to be calculated.\n\n-----Output:-----\nFor each test case, output in a single line answer to the sum of prime number.\n\n-----Constraints-----\n- $1 <= T <= 1000$\n- $1 <= N <= 10^6$\n\n-----Sample Input:-----\n3\n22\n13\n10\n\n-----Sample Output:-----\n77\n41\n17\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nChef Vivek is good in mathematics and likes solving problems on prime numbers. One day his friend Jatin told him about Victory numbers. Victory number can be defined as a number formed after summing up all the prime numbers till given number n. Now, chef Vivek who is very fond of solving questions on prime numbers got busy in some other tasks. Your task is to help him finding victory number.\n\n-----Input:-----\n- First line will contain $T$, number of test cases. Then the test cases follow. \n- Each test case contains of a single line of input $N$ till which sum of all prime numbers between 1 to n has to be calculated.\n\n-----Output:-----\nFor each test case, output in a single line answer to the victory number.\n\n-----Constraints-----\n- $1 <= T <= 1000$\n- $1 <= N <= 10^6$\n\n-----Sample Input:-----\n3\n22\n13\n10\n\n-----Sample Output:-----\n77\n41\n17\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n\nYou are given N teams which can play with each exactly one time.Each team is assigned a strength as a positive integer.Find the sum of all the absolute difference between the strengths of all the possible two matches.\n\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, total of absolute difference between the strengths of all the possible two matches.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nZonal Computing Olympiad 2013, 10 Nov 2012\nN teams participate in a league cricket tournament on Mars, where each pair of distinct teams plays each other exactly once. Thus, there are a total of (N \u00d7 (N-1))/2 matches. An expert has assigned a strength to each team, a positive integer. Strangely, the Martian crowds love one-sided matches and the advertising revenue earned from a match is the absolute value of the difference between the strengths of the two matches. Given the strengths of the N teams, find the total advertising revenue earned from all the matches.\n\nFor example, suppose N is 4 and the team strengths for teams 1, 2, 3, and 4 are 3, 10, 3, and 5 respectively. Then the advertising revenues from the 6 matches are as follows:\n\nMatch Team A Team B Ad revenue 1 1 2 7  2 1 3 0  3 1 4 2  4 2 3 7  5 2 4 5  6 3 4 2 \n\nThus the total advertising revenue is 23.\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, the total advertising revenue from the tournament.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n-----Test data-----\nIn all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.\n- Subtask 1 (30 marks) : 2 \u2264 N \u2264 1,000.\n- Subtask 2 (70 marks) : 2 \u2264 N \u2264 200,000.\n\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1,2.\n- Subtask 2: Testcases 3,4,5.\n\n-----Note-----\nThe answer might not fit in a variable of type int. We recommend that type long long be used for computing all advertising revenues. If you use printf and scanf, you can use %lld for long long.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given 2 integer arrays of length $n$, array $x$ and array $y$. For each array, you want to make all its values equivalent\nsuch that $x_1$ = $x_2$ = $x_3$ = ... = $x_n$ and $y_1$ = $y_2$ = $y_3$ = ... = $y_n$ in the least number of moves possible.\n\nIn one move, you can decrement the value of an element by 1 at $x_i$ or $y_i$, or at both $x_i$ and $y_i$\nThe value of an element can not go below 0.\n\nYou have to answer $t$ independent test cases.\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\n\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the length of the arrays.\nThe second line of the test case contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$).\nThe third line of the test case contains $n$ integers $y_1, y_2, \\dots, y_n$ ($1 \\le y_i \\le 10^9$).\n\n\n-----Output-----\n\nFor each test case, print one integer: the minimum number of moves required to equalize all the given values in each array.\n\n\n-----Example-----\nInput\n5\n3\n3 5 6\n3 2 3\n5\n1 2 3 4 5\n5 4 3 2 1\n3\n1 1 1\n2 2 2\n6\n1 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1\n3\n10 12 8\n7 5 4\n\nOutput\n6\n16\n0\n4999999995\n7\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou have $n$ gifts and you want to give all of them to children. Of course, you don't want to offend anyone, so all gifts should be equal between each other. The $i$-th gift consists of $a_i$ candies and $b_i$ oranges.\n\nDuring one move, you can choose some gift $1 \\le i \\le n$ and do one of the following operations:\n\n  eat exactly one candy from this gift (decrease $a_i$ by one);  eat exactly one orange from this gift (decrease $b_i$ by one);  eat exactly one candy and exactly one orange from this gift (decrease both $a_i$ and $b_i$ by one). \n\nOf course, you can not eat a candy or orange if it's not present in the gift (so neither $a_i$ nor $b_i$ can become less than zero).\n\nAs said above, all gifts should be equal. This means that after some sequence of moves the following two conditions should be satisfied: $a_1 = a_2 = \\dots = a_n$ and $b_1 = b_2 = \\dots = b_n$ (and $a_i$ equals $b_i$ is not necessary).\n\nYour task is to find the minimum number of moves required to equalize all the given gifts.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 50$) \u2014 the number of gifts. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the number of candies in the $i$-th gift. The third line of the test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($1 \\le b_i \\le 10^9$), where $b_i$ is the number of oranges in the $i$-th gift.\n\n\n-----Output-----\n\nFor each test case, print one integer: the minimum number of moves required to equalize all the given gifts.\n\n\n-----Example-----\nInput\n5\n3\n3 5 6\n3 2 3\n5\n1 2 3 4 5\n5 4 3 2 1\n3\n1 1 1\n2 2 2\n6\n1 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1\n3\n10 12 8\n7 5 4\n\nOutput\n6\n16\n0\n4999999995\n7\n\n\n\n-----Note-----\n\nIn the first test case of the example, we can perform the following sequence of moves:\n\n  choose the first gift and eat one orange from it, so $a = [3, 5, 6]$ and $b = [2, 2, 3]$;  choose the second gift and eat one candy from it, so $a = [3, 4, 6]$ and $b = [2, 2, 3]$;  choose the second gift and eat one candy from it, so $a = [3, 3, 6]$ and $b = [2, 2, 3]$;  choose the third gift and eat one candy and one orange from it, so $a = [3, 3, 5]$ and $b = [2, 2, 2]$;  choose the third gift and eat one candy from it, so $a = [3, 3, 4]$ and $b = [2, 2, 2]$;  choose the third gift and eat one candy from it, so $a = [3, 3, 3]$ and $b = [2, 2, 2]$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n\nYou are given $n$ cells numbered from $1$ to $n$ and an integer $m$ and $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\le l_i \\le n$)\n\nYou will perform $m$ operations.\n\nIn $i$-th operation, You will choose a number $p_i$ from range $[1, n-l_i+1]$ and will paint all cells from $p_i$ to $p_i+l_i-1$ inclusive in $i$-th color. Cells may be colored more than once if they have the color from the latest operation.\n\nYou hope that after these $m$ operations, all colors will appear at least once and all cells will be colored. Choose $p_i$ in each operation to satisfy all constraints.\n\n\n-----Input-----\n\nThe first line contains two integers $n,m$ ($1 \\leq m \\leq n \\leq 100\\,000$).\n\nThe second line contains $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\leq l_i \\leq n$).\n\n\n-----Output-----\n\nIf it's impossible to perform $m$ operations to satisfy all constraints, print -1.\n\nOtherwise, print $m$ integers $p_1, p_2, \\ldots, p_m$ ($1 \\leq p_i \\leq n - l_i + 1$), after these $m$ operations, all colors should appear at least once and all cells should be colored.\n\nIf there are several possible solutions, you can print any.\n\n\n-----Examples-----\nInput\n5 3\n3 2 2\n\nOutput\n2 4 1\n\nInput\n10 1\n1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nDreamoon likes coloring cells very much.\n\nThere is a row of $n$ cells. Initially, all cells are empty (don't contain any color). Cells are numbered from $1$ to $n$.\n\nYou are given an integer $m$ and $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\le l_i \\le n$)\n\nDreamoon will perform $m$ operations.\n\nIn $i$-th operation, Dreamoon will choose a number $p_i$ from range $[1, n-l_i+1]$ (inclusive) and will paint all cells from $p_i$ to $p_i+l_i-1$ (inclusive) in $i$-th color. Note that cells may be colored more one than once, in this case, cell will have the color from the latest operation.\n\nDreamoon hopes that after these $m$ operations, all colors will appear at least once and all cells will be colored. Please help Dreamoon to choose $p_i$ in each operation to satisfy all constraints.\n\n\n-----Input-----\n\nThe first line contains two integers $n,m$ ($1 \\leq m \\leq n \\leq 100\\,000$).\n\nThe second line contains $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\leq l_i \\leq n$).\n\n\n-----Output-----\n\nIf it's impossible to perform $m$ operations to satisfy all constraints, print \"'-1\" (without quotes).\n\nOtherwise, print $m$ integers $p_1, p_2, \\ldots, p_m$ ($1 \\leq p_i \\leq n - l_i + 1$), after these $m$ operations, all colors should appear at least once and all cells should be colored.\n\nIf there are several possible solutions, you can print any.\n\n\n-----Examples-----\nInput\n5 3\n3 2 2\n\nOutput\n2 4 1\n\nInput\n10 1\n1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYour work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped. The bits are numbered from the least significant bit. The index number can be out of number's range.\n\nExample:\nInput:\nflip_bit(15, 4)\nOutput:\n7\nExplanation:\n15 in binary is 1111, after flipping 4th bit, it becomes 0111, i.e. 7\n\nInput:\nflip_bit(15, 5)\nOutput:\n31\nExplanation:\n15 in binary is 1111, 5th bit is 0, after flipping, it becomes 11111, i.e., 31\n\n\"\"\"\ndef flip_bit(value, bit_index):",
    "13": "Python 3\n\"\"\"\nYour work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped.\n\nThe bits are numbered from the least significant bit (index 1).\n\nExample:\n```python\nflip_bit(15, 4) == 7 # 15 in binary is 1111, after flipping 4th bit, it becomes 0111, i.e. 7\nflip_bit(15, 5) == 31 # 15 in binary is 1111, 5th bit is 0, after flipping, it becomes 11111, i.e., 31\n```\nNote : index number can be out of number's range : e.g number is 3 (it has 2 bits) and index number is 8(for C# this number is up to 31) -> result will be 131 \n\nSee more examples in test classes\n\nGood luck!\n\"\"\"\ndef flip_bit(value, bit_index):",
    "14": "Python 3\n\"\"\"\nYou are given a string S containing only lowercase characters. Rearrange the string and print minimum number of characters needed to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a string S containing only lowercase characters. \nYou can rearrange the string and you have to print minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven an 2 dimentional array count number of structures in it.\nStructures are represented by 'X's and empty slots are represented with \".\"s.\n\n\nStructures can only be horizontal or vertical.\nThere are no adjacent structures.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above 2 dimentional array there are 2 structures.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid 2 dimentional array that you will not receive.\n\n\"\"\"\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:",
    "17": "Python 3\n\"\"\"\nGiven an 2D board, count how many battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n\n\nYou receive a valid board, made of only battleships or empty slots.\nBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\nAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above board there are 2 battleships.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n\nFollow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n\"\"\"\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:",
    "18": "Python 3\n\"\"\"\nYou are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N.\nThere are N^2 ways to choose two integers i and j such that 1 \\leq i, j \\leq N. For each of these N^2 pairs, Compute a_i + b_j.\nCompute the XOR of these N^2 integers.\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 200,000\n - 0 \\leq a_i, b_i < 2^{28}\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\nb_1 b_2 ... b_N\n\n-----Output-----\nPrint the result of the computation.\n\n-----Sample Input-----\n2\n1 2\n3 4\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N.\nThere are N^2 ways to choose two integers i and j such that 1 \\leq i, j \\leq N. For each of these N^2 pairs, we will compute a_i + b_j and write it on a sheet of paper.\nThat is, we will write N^2 integers in total.\nCompute the XOR of these N^2 integers.\nDefinition of XOR\nThe XOR of integers c_1, c_2, ..., c_m is defined as follows:\n - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \\leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even.\nFor example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6.\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 200,000\n - 0 \\leq a_i, b_i < 2^{28}\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\nb_1 b_2 ... b_N\n\n-----Output-----\nPrint the result of the computation.\n\n-----Sample Input-----\n2\n1 2\n3 4\n\n-----Sample Output-----\n2\n\nOn the sheet, the following four integers will be written: 4(1+3), 5(1+4), 5(2+3) and 6(2+4).\n\"\"\"\ndef code():"
}