{
    "0": "Python 3\n\"\"\"\nYou have an array $a$ with $n$ integers. You need to count the number of funny pairs $(l, r)$ $(l \\leq r)$. To check if a pair $(l, r)$ is a funny pair, take $mid = \\frac{l + r - 1}{2}$, then if $r - l + 1$ is an even number and $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_{mid} = a_{mid + 1} \\oplus a_{mid + 2} \\oplus \\ldots \\oplus a_r$, then the pair is funny. $\\oplus$ denotes the bitwise XOR operation.\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the size of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{20}$)\u00a0\u2014 array itself.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of funny pairs. You should consider only pairs where $r - l + 1$ is even number.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n3 2 2 3 7 6\n\nOutput\n3\n\nInput\n3\n42 4 2\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSasha likes programming. Once, during a very long contest, Sasha decided that he was a bit tired and needed to relax. So he did. But since Sasha isn't an ordinary guy, he prefers to relax unusually. During leisure time Sasha likes to upsolve unsolved problems because upsolving is very useful.\n\nTherefore, Sasha decided to upsolve the following problem:\n\nYou have an array $a$ with $n$ integers. You need to count the number of funny pairs $(l, r)$ $(l \\leq r)$. To check if a pair $(l, r)$ is a funny pair, take $mid = \\frac{l + r - 1}{2}$, then if $r - l + 1$ is an even number and $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_{mid} = a_{mid + 1} \\oplus a_{mid + 2} \\oplus \\ldots \\oplus a_r$, then the pair is funny. In other words, $\\oplus$ of elements of the left half of the subarray from $l$ to $r$ should be equal to $\\oplus$ of elements of the right half. Note that $\\oplus$ denotes the bitwise XOR operation.\n\nIt is time to continue solving the contest, so Sasha asked you to solve this task.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the size of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{20}$)\u00a0\u2014 array itself.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of funny pairs. You should consider only pairs where $r - l + 1$ is even number.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n3 2 2 3 7 6\n\nOutput\n3\n\nInput\n3\n42 4 2\n\nOutput\n0\n\n\n\n-----Note-----\n\nBe as cool as Sasha, upsolve problems!\n\nIn the first example, the only funny pair is $(2, 5)$, as $2 \\oplus 3 = 4 \\oplus 5 = 1$.\n\nIn the second example, funny pairs are $(2, 3)$, $(1, 4)$, and $(3, 6)$.\n\nIn the third example, there are no funny pairs.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven lengths $A,B and C$ return YES if they can form a right angled triangle, NO otherwise.\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nChef loves triangles. But the chef is poor at maths. Given three random lengths Chef wants to find if the three sides form a right-angled triangle or not. Can you help Chef in this endeavour?\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n=====Problem Statement=====\nGiven a string, capitalize each word by making the first letter of each word uppercase. \n\nFor example:\nalison heck => Alison Heck\n\nGiven a string, your task is to capitalize the words appropriately.\n\n=====Input Format=====\nA single line of input containing a string, S.\n\n=====Constraints=====\n0<len(S)<1000\nThe string consists of alphanumeric characters and spaces.\n\n=====Output Format=====\nPrint the capitalized string, S.\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(s):\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = solve(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()",
    "5": "Python 3\n\"\"\"\n=====Problem Statement=====\nYou are asked to ensure that the first and last names of people begin with a capital letter in their passports. For example, alison heck should be capitalised correctly as Alison Heck. \n\nalison heck => Alison Heck\n\nGiven a full name, your task is to capitalize the name appropriately.\n\n=====Input Format=====\nA single line of input containing the full name, S.\n\n=====Constraints=====\n0<len(S)<1000\nThe string consists of alphanumeric characters and spaces.\n\nNote: in a word only the first character is capitalized. Example 12abc when capitalized remains 12abc.\n\n=====Output Format=====\nPrint the capitalized string, S.\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(s):\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = solve(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()",
    "6": "Python 3\n\"\"\"\n\n\nYou are given three angles of a triangle.Check whether these angles form a valid triangle or not. A triangle is valid if the sum of all the three angles is equal to 180 degrees.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nWrite a program to check whether a triangle is valid or not, when the three angles of the triangle are the inputs. A triangle is valid if the sum of all the three angles is equal to 180 degrees.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nLet's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of independent test cases.\n\nEach test case consists of a single line containing two integers $a_{1}$ and $K$ ($1 \\le a_{1} \\le 10^{18}$, $1 \\le K \\le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\nInput\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n519\n528\n544\n564\n588\n628\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nLet's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of independent test cases.\n\nEach test case consists of a single line containing two integers $a_{1}$ and $K$ ($1 \\le a_{1} \\le 10^{18}$, $1 \\le K \\le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\nInput\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n519\n528\n544\n564\n588\n628\n\n\n\n-----Note-----\n\n$a_{1} = 487$ \n\n $a_{2} = a_{1} + minDigit(a_{1}) \\cdot maxDigit(a_{1}) = 487 + \\min (4, 8, 7) \\cdot \\max (4, 8, 7) = 487 + 4 \\cdot 8 = 519$ \n\n $a_{3} = a_{2} + minDigit(a_{2}) \\cdot maxDigit(a_{2}) = 519 + \\min (5, 1, 9) \\cdot \\max (5, 1, 9) = 519 + 1 \\cdot 9 = 528$ \n\n $a_{4} = a_{3} + minDigit(a_{3}) \\cdot maxDigit(a_{3}) = 528 + \\min (5, 2, 8) \\cdot \\max (5, 2, 8) = 528 + 2 \\cdot 8 = 544$ \n\n $a_{5} = a_{4} + minDigit(a_{4}) \\cdot maxDigit(a_{4}) = 544 + \\min (5, 4, 4) \\cdot \\max (5, 4, 4) = 544 + 4 \\cdot 5 = 564$ \n\n $a_{6} = a_{5} + minDigit(a_{5}) \\cdot maxDigit(a_{5}) = 564 + \\min (5, 6, 4) \\cdot \\max (5, 6, 4) = 564 + 4 \\cdot 6 = 588$ \n\n $a_{7} = a_{6} + minDigit(a_{6}) \\cdot maxDigit(a_{6}) = 588 + \\min (5, 8, 8) \\cdot \\max (5, 8, 8) = 588 + 5 \\cdot 8 = 628$\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given a permutation of 1,2,...,N: p_1,p_2,...,p_N. Determine if the state where p_i=i for every i can be reached by performing the following operation any number of times:\n - Choose three elements p_{i-1},p_{i},p_{i+1} (2\\leq i\\leq N-1) such that p_{i-1}>p_{i}>p_{i+1} and reverse the order of these three.\n\n-----Constraints-----\n - 3 \\leq N \\leq 3 \u00d7 10^5\n - p_1,p_2,...,p_N is a permutation of 1,2,...,N.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\np_1\n:\np_N\n\n-----Output-----\nIf the state where p_i=i for every i can be reached by performing the operation, print Yes; otherwise, print No.\n\n-----Sample Input-----\n5\n5\n2\n1\n4\n3\n\n-----Sample Output-----\nYes\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a permutation of 1,2,...,N: p_1,p_2,...,p_N. Determine if the state where p_i=i for every i can be reached by performing the following operation any number of times:\n - Choose three elements p_{i-1},p_{i},p_{i+1} (2\\leq i\\leq N-1) such that p_{i-1}>p_{i}>p_{i+1} and reverse the order of these three.\n\n-----Constraints-----\n - 3 \\leq N \\leq 3 \u00d7 10^5\n - p_1,p_2,...,p_N is a permutation of 1,2,...,N.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\np_1\n:\np_N\n\n-----Output-----\nIf the state where p_i=i for every i can be reached by performing the operation, print Yes; otherwise, print No.\n\n-----Sample Input-----\n5\n5\n2\n1\n4\n3\n\n-----Sample Output-----\nYes\n\nThe state where p_i=i for every i can be reached as follows:\n - Reverse the order of p_1,p_2,p_3. The sequence p becomes 1,2,5,4,3.\n - Reverse the order of p_3,p_4,p_5. The sequence p becomes 1,2,3,4,5.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a string s.Your task is to determine whether you can make a palindrome of a given string by deleting only one character from it.\n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nGiven a string s. Can you make it a palindrome by deleting exactly one character? Note that size of the string after deletion would be one less than it was before. \n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\nSubtask 2, 65 points \n- 2 \u2264  size of string s \u2264 10^5\n-  Sum of size of string s over all the input test cases won't exceed 10^6\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n-----Explanation-----\nExample case 1. Delete any one 'a', resulting string is \"aa\" which is a palindrome.\nExample case 2. It is not possible to delete exactly one character and having a palindrome.\nExample case 3. Delete 'c', resulting string is \"abdba\" which is a palindrome. \nExample case 4. Delete 'b', resulting string is \"aba\" which is a palindrome.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven a complete binary tree, count the number of nodes.\n\nExample:\n\n\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:",
    "15": "Python 3\n\"\"\"\nGiven a complete binary tree, count the number of nodes.\n\nNote: \n\nDefinition of a complete binary tree from Wikipedia:\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\nExample:\n\n\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:",
    "16": "Python 3\n\"\"\"\nWrite a function to split a string and convert it into an array of words. \n\nExamples:\nInput\n\"Robin Singh\"\nOutput:\n[\"Robin\", \"Singh\"]\n\nInput:\n\"I love arrays they are my favorite\"\nOutput:\n[\"I\", \"love\", \"arrays\", \"they\", \"are\", \"my\", \"favorite\"]\n\"\"\"\ndef string_to_array(s):",
    "17": "Python 3\n\"\"\"\nWrite a function to split a string and convert it into an array of words. For example:\n\n```python\n\"Robin Singh\" ==> [\"Robin\", \"Singh\"]\n\n\"I love arrays they are my favorite\" ==> [\"I\", \"love\", \"arrays\", \"they\", \"are\", \"my\", \"favorite\"]\n```\n\"\"\"\ndef string_to_array(s):",
    "18": "Python 3\n\"\"\"\nGiven that you know the page you are on, how many products are in the category in total, and how many products are on any given page, output a simple string showing which products you are viewing.\n\nExamples:\n\nIn a category of 30 products with 10 products per page, on page 1 you would see \n\n'Showing 1 to 10 of 30 Products.'\n\nIn a category of 26 products with 10 products per page, on page 3 you would see\n\n'Showing 21 to 26 of 26 Products.'\n\nIn a category of 8 products with 10 products per page, on page 1 you would see\n\n'Showing 1 to 8 of 8 Products.'\n\"\"\"\ndef pagination_text(page_number, page_size, total_products):",
    "19": "Python 3\n\"\"\"\nA category page displays a set number of products per page, with pagination at the bottom allowing the user to move from page to page.\n\nGiven that you know the page you are on, how many products are in the category in total, and how many products are on any given page, how would you output a simple string showing which products you are viewing..\n\nexamples\n\nIn a category of 30 products with 10 products per page, on page 1 you would see \n\n'Showing 1 to 10 of 30 Products.'\n\nIn a category of 26 products with 10 products per page, on page 3 you would see\n\n'Showing 21 to 26 of 26 Products.'\n\nIn a category of 8 products with 10 products per page, on page 1 you would see\n\n'Showing 1 to 8 of 8 Products.'\n\"\"\"\ndef pagination_text(page_number, page_size, total_products):"
}