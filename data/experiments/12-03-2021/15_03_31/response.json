{
    "id": "cmpl-4BAvpPeB8SJKO9Ohv0RLEWF4I1GVk",
    "object": "text_completion",
    "created": 1638568977,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    numbers = numbers.split()\n    even = []\n    odd = []\n    for i in range(len(numbers)):\n        if int(numbers[i]) % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == 1:\n        return even[0] + 1\n    else:\n        return odd[0] + 1",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    numbers = numbers.split()\n    even = []\n    odd = []\n    for i in range(len(numbers)):\n        if int(numbers[i]) % 2 == 0:\n            even.append(i+1)\n        else:\n            odd.append(i+1)\n    if len(even) == 1:\n        return even[0]\n    else:\n        return odd[0]",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        x, r, a, b = map(int, input().split())\n        if (a-b)%(2*r) == 0:\n            print(int((a-b)/(2*r)))\n        else:\n            print(int((a-b)/(2*r))+1)\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        X, R, A, B = map(int, input().split())\n        if A > B:\n            A, B = B, A\n        if A == B:\n            print(0)\n        else:\n            print((X - (X % (2 * R))) // (A - B))\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr, n):\n    return sorted(set(arr))[:n]\n\n\ndef first_n_smallest(arr,",
            "index": 5,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    if n == 2:\n        print(1, 2)\n        print(1, 3)\n        print(2, 3)\n    elif n == 3:\n        print(1, 2)\n        print(1, 3)\n        print(2, 3)\n    elif n == 4:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 4)\n    elif n == 5:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 5)\n    elif n == 6:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 6)\n    elif n == 7:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 7)\n    elif n == 8:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 8)\n    elif n == 9:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 9)\n        print(8, 9)\n    elif n == 10:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 9)\n        print(8, 10)\n        print(9, 10)\n    elif n == 11:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 9)\n        print(8, 10)\n        print(9, 11)\n        print(10, 11)\n    elif n == 12:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 9)\n        print(8, 10)\n        print(9, 11)\n        print(10, 12)\n        print(11, 12)\n    elif n == 13:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 9)\n        print(8, 10)\n        print(9, 11)\n        print(10, 12)\n        print(11, 13)\n        print(12, 13)\n    elif n == 14:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n        print(5, 7)\n        print(6, 8)\n        print(7, 9)\n        print(8, 10)\n        print(9, 11)\n        print(10, 12)\n        print(11, 13)\n        print(12, 14)\n        print(13, 14)\n    elif n == 15:\n        print(1, 2)\n        print(1, 3)\n        print(2, 4)\n        print(3, 5)\n        print(4, 6)\n       ",
            "index": 6,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    if n == 2:\n        print(1, 2)\n        print(2, 1)\n    else:\n        for i in range(n-1):\n            print(i+1, i+2)\n            print(i+2, i+1)\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = 0\n    b = 0\n    c = 0\n    for i in range(number):\n        if i % 3 == 0:\n            a += 1\n        if i % 5 == 0:\n            b += 1\n        if i % 3 == 0 and i % 5 == 0:\n            c += 1\n    return [a, b, c]",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = 0\n    b = 0\n    c = 0\n    for i in range(number):\n        if i % 3 == 0 and i % 5 != 0:\n            a += 1\n        elif i % 5 == 0 and i % 3 != 0:\n            b += 1\n        elif i % 3 == 0 and i % 5 == 0:\n            c += 1\n    return [a, b, c]",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    def dfs(v, p, visited, graph):\n        visited[v] = True\n        for u in graph[v]:\n            if u == p:\n                continue\n            if visited[u]:\n                return True\n            if dfs(u, v, visited, graph):\n                return True\n        return False\n\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        graph = [[] for i in range(n)]\n        visited = [False] * n\n        for j in range(m):\n            t, x, y = map(int, input().split())\n            if t == 0:\n                graph[x].append(y)\n                graph[y].append(x)\n            else:\n                graph[x].append(y)\n        for j in range(n):\n            if not visited[j]:\n                if dfs(j, -1, visited, graph):\n                    print(\"NO\")\n                    break\n        else:\n            print(\"YES\")\n            for j in range(n):\n                for k in graph[j]:\n                    print(j, k)\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if len(ransomNote) > len(magazine):\n            return False\n        else:\n            for i in set(ransomNote):\n                if ransomNote.count(i) > magazine.count(i):\n                    return False\n            return True",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        for i in set(ransomNote):\n            if ransomNote.count(i) > magazine.count(i):\n                return False\n        return True",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        p = []\n        for i in range(n):\n            if a[i] == b[i]:\n                p.append(a[i])\n            elif a[i] == c[i]:\n                p.append(a[i])\n            elif b[i] == c[i]:\n                p.append(b[i])\n        for i in range(n):\n            print(p[i], end=\" \")\n        print()\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        p = []\n        for i in range(n):\n            if a[i] == b[i]:\n                p.append(c[i])\n            elif a[i] == c[i]:\n                p.append(b[i])\n            else:\n                p.append(a[i])\n        print(*p)\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    for i in range(n):\n        l, r = map(int, input().split())\n        print(popcount(r) - popcount(l-1))\n\ndef popcount(x):\n    return bin(x).count('1')\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    for i in range(n):\n        l, r = map(int, input().split())\n        print(max(bin(l)[2:].count('1'), bin(r)[2:].count('1')))\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        for i in range(int((num+2)**0.5),0,-1):\n            if (num+1)%i==0:\n                return [i,(num+1)//i]\n            if (num+2)%i==0:\n                return [i,(num+2)//i]",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        def get_closest(num):\n            for i in range(int((num+2)**0.5),0,-1):\n                if (num+1)%i==0:\n                    return [i,(num+1)//i]\n                if (num+2)%i==0:\n                    return [i,(num+2)//i]\n        return get_closest(num)",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}