{
    "0": "Python 3\n\"\"\"\nWrite a function that among the given numbers finds one that is different in evenness, and return a position of this number.\n\nExamples:\nInput:\niq_test(\"2 4 7 8 10\")\nOutput:\n3\nExplanation:\nThird number is odd, while the rest of the numbers are even.\n\nInput:\niq_test(\"1 2 1 1\")\nOutput:\n2\nExplanation:\nSecond number is even, while the rest of the numbers are odd.\n\"\"\"\ndef iq_test(numbers):",
    "1": "Python 3\n\"\"\"\nBob is preparing to pass IQ test. The most frequent task in this test is `to find out which one of the given numbers differs from the others`. Bob observed that one number usually differs from the others in **evenness**. Help Bob \u2014 to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.\n\n`!` Keep in mind that your task is to help Bob solve a `real IQ test`, which means indexes of the elements start from `1 (not 0)`\n\n##Examples :\n\n \n```python\niq_test(\"2 4 7 8 10\") => 3 // Third number is odd, while the rest of the numbers are even\n\niq_test(\"1 2 1 1\") => 2 // Second number is even, while the rest of the numbers are odd\n```\n\"\"\"\ndef iq_test(numbers):",
    "2": "Python 3\n\"\"\"\nFind out how many times A and B will meet after the race starts and before completing the $X rounds if they start running from same spot on a circular track of radius $R. Their speed are given.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, four integers $X, R, A, B$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the number of times whey will meet before any of them completes $X$ rounds.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq R \\leq 10^9$\n- $1 \\leq X \\leq 10^9$\n- $1 \\leq A \\leq 10^9$\n- $1 \\leq B \\leq 10^9$\n- Speed of both are different\n\n-----Sample Input:-----\n2\n3 10 2 5\n2 20 5 10\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nMotu and Patlu are racing against each other on a circular track of radius $R$. Initially they are at the same point on the track and will run in same direction .The coach ordered them to run $X$ rounds of the circular field. Patlu wants to know how many times they will meet after the race starts and  before any of them finishes $X$ rounds. But he is busy in warm up so he wants you to calculate this. You are given speed of both Motu and Patlu ($A$ and $B$). \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, four integers $X, R, A, B$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the number of times whey will meet before any of them completes $X$ rounds.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq R \\leq 10^9$\n- $1 \\leq X \\leq 10^9$\n- $1 \\leq A \\leq 10^9$\n- $1 \\leq B \\leq 10^9$\n- Speed of both are different\n\n-----Sample Input:-----\n2\n3 10 2 5\n2 20 5 10\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYour task is to write a function that does just what the title suggests with an array/list/vector of integers and the expected number n of smallest elements to return.\n\nExamples:\nInput:\nfirst_n_smallest([1,2,3,4,5],3)\nOutput:\n[1,2,3]\n\nInput:\nfirst_n_smallest([5,4,3,2,1],3)\nOutput:\n[3,2,1]\n\nInput:\nfirst_n_smallest([1,2,3,4,1],3)\nOutput:\n[1,2,1]\n\nInput:\nfirst_n_smallest([1,2,3,-4,0],3)\nOutput:\n[1,-4,0]\n\nInput:\nfirst_n_smallest([1,2,3,4,5],0)\nOutput:\n[]\n\n\"\"\"\ndef first_n_smallest(arr, n):",
    "5": "Python 3\n\"\"\"\nYour task is to write a function that does just what the title suggests (so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number `n` of smallest elements to return.\n\nAlso:\n\n* the number of elements to be returned cannot be higher than the array/list/vector length;\n* elements can be duplicated;\n* in case of duplicates, just return them according to the original order (see third example for more clarity).\n\nSame examples and more in the test cases:\n\n```python\nfirst_n_smallest([1,2,3,4,5],3) == [1,2,3]\nfirst_n_smallest([5,4,3,2,1],3) == [3,2,1]\nfirst_n_smallest([1,2,3,4,1],3) == [1,2,1]\nfirst_n_smallest([1,2,3,-4,0],3) == [1,-4,0]\nfirst_n_smallest([1,2,3,4,5],0) == []\n```\n\n[Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077) also available.\n\"\"\"\ndef first_n_smallest(arr, n):",
    "6": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\nThe tree shown below satisfies the conditions.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nWrite a function that takes an integer and returns an array [A, B, C], where A is the number of multiples of 3 below the given integer, B is the number of multiples of 5 below the given integer and C is the number of multiples of 3 and 5 below the given integer. \n\nExamples:\nInput:\nsolution(20)\nOutput:\n[5, 2, 1]\n\"\"\"\ndef solution(number):",
    "9": "Python 3\n\"\"\"\nWrite a function that takes an integer and returns an array `[A, B, C]`, where `A` is the number of multiples of 3 (but not 5) below the given integer, `B` is the number of multiples of 5 (but not 3) below the given integer and `C` is the number of multiples of 3 and 5 below the given integer. \n\nFor example, `solution(20)` should return `[5, 2, 1]`\n\n~~~if:r\n```r\n# in R, returns a numeric vector\nsolution(20)\n[1] 5 2 1\n\nclass(solution(20))\n[1] \"numeric\"\n```\n~~~\n\"\"\"\ndef solution(number):",
    "10": "Python 3\n\"\"\"\nYou are given a graph which might have undirected edges.\n\nYou need to direct undirected edges in such a way that the resulting graph is directed and acyclic.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and the number of edges in the graph, respectively.\n\nThe next $m$ lines describe edges of the graph. The $i$-th edge is described with three integers $t_i$, $x_i$ and $y_i$ ($t_i \\in [0; 1]$, $1 \\le x_i, y_i \\le n$) \u2014 the type of the edge ($t_i = 0$ if the edge is undirected and $t_i = 1$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $x_i$ and $y_i$ and directed edge is going from the vertex $x_i$ to the vertex $y_i$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($x_i, y_i$) there are no other pairs ($x_i, y_i$) or ($y_i, x_i$)).\n\nIt is guaranteed that both sum $n$ and sum $m$ do not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$; $\\sum m \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case print the answer \u2014 \"NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"YES\" on the first line and $m$ lines describing edges of the resulted directed acyclic graph (in any order). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.\n\n\n-----Example-----\nInput\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n\nOutput\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a graph consisting of $n$ vertices and $m$ edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can't change their direction. Other edges are undirected and you have to choose some direction for all these edges.\n\nYou have to direct undirected edges in such a way that the resulting graph is directed and acyclic (i.e. the graph with all edges directed and having no directed cycles). Note that you have to direct all undirected edges.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and the number of edges in the graph, respectively.\n\nThe next $m$ lines describe edges of the graph. The $i$-th edge is described with three integers $t_i$, $x_i$ and $y_i$ ($t_i \\in [0; 1]$, $1 \\le x_i, y_i \\le n$) \u2014 the type of the edge ($t_i = 0$ if the edge is undirected and $t_i = 1$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $x_i$ and $y_i$ and directed edge is going from the vertex $x_i$ to the vertex $y_i$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($x_i, y_i$) there are no other pairs ($x_i, y_i$) or ($y_i, x_i$)).\n\nIt is guaranteed that both sum $n$ and sum $m$ do not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$; $\\sum m \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case print the answer \u2014 \"NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"YES\" on the first line and $m$ lines describing edges of the resulted directed acyclic graph (in any order). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.\n\n\n-----Example-----\nInput\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n\nOutput\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n\n\n\n-----Note-----\n\nExplanation of the second test case of the example:\n\n[Image]\n\nExplanation of the third test case of the example:\n\n[Image]\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven two strings a and b return true if a can be constructed from string charecters in b else false\n\nEach letter in the b string can only be used once in your a string.\n\n\nNote:\nYou may assume that both strings contain only lowercase letters.\n\n\n\ncanConstruct(\"a\", \"b\") -> false\ncanConstruct(\"aa\", \"ab\") -> false\ncanConstruct(\"aa\", \"aab\") -> true\n\n\"\"\"\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:",
    "13": "Python 3\n\"\"\"\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \nnote can be constructed from the magazines ; otherwise, it will return false. \n\n\nEach letter in the magazine string can only be used once in your ransom note.\n\n\nNote:\nYou may assume that both strings contain only lowercase letters.\n\n\n\ncanConstruct(\"a\", \"b\") -> false\ncanConstruct(\"aa\", \"ab\") -> false\ncanConstruct(\"aa\", \"aab\") -> true\n\"\"\"\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:",
    "14": "Python 3\n\"\"\"\nYou are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $i,i+1$ adjacent for $i<n$ and also elements $1$ and $n$) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\n\n\n-----Note-----\n\nIn the first test case $p = [1, 2, 3]$.\n\nIt is a correct answer, because:\n\n  $p_1 = 1 = a_1$, $p_2 = 2 = b_2$, $p_3 = 3 = c_3$  $p_1 \\neq p_2 $, $p_2 \\neq p_3 $, $p_3 \\neq p_1$ \n\nAll possible correct answers to this test case are: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$.\n\nIn the second test case $p = [1, 2, 1, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = a_3$, $p_4 = a_4$. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case $p = [1, 3, 4, 3, 2, 4, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = b_3$, $p_4 = b_4$, $p_5 = b_5$, $p_6 = c_6$, $p_7 = c_7$. Also we can see, that no two adjacent elements of the sequence are equal.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nLet's denote $\\text{popcount}(x)$ as the number of bits set in the binary representation of the non-negative integer x.\n\nYou are given multiple queries consisting of pairs of integers l and r. For each query, find the x, such that l \u2264 x \u2264 r, and $\\text{popcount}(x)$ is maximum possible. If there are multiple such numbers find the smallest of them.\n\n\n-----Input-----\n\nThe first line contains integer n\u00a0\u2014 the number of queries (1 \u2264 n \u2264 10000).\n\nEach of the following n lines contain two integers l_{i}, r_{i}\u00a0\u2014 the arguments for the corresponding query (0 \u2264 l_{i} \u2264 r_{i} \u2264 10^18).\n\n\n-----Output-----\n\nFor each query print the answer in a separate line.\n\n\n-----Examples-----\nInput\n3\n1 2\n2 4\n1 10\n\nOutput\n1\n3\n7\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nLet's denote as $\\text{popcount}(x)$ the number of bits set ('1' bits) in the binary representation of the non-negative integer x.\n\nYou are given multiple queries consisting of pairs of integers l and r. For each query, find the x, such that l \u2264 x \u2264 r, and $\\text{popcount}(x)$ is maximum possible. If there are multiple such numbers find the smallest of them.\n\n\n-----Input-----\n\nThe first line contains integer n\u00a0\u2014 the number of queries (1 \u2264 n \u2264 10000).\n\nEach of the following n lines contain two integers l_{i}, r_{i}\u00a0\u2014 the arguments for the corresponding query (0 \u2264 l_{i} \u2264 r_{i} \u2264 10^18).\n\n\n-----Output-----\n\nFor each query print the answer in a separate line.\n\n\n-----Examples-----\nInput\n3\n1 2\n2 4\n1 10\n\nOutput\n1\n3\n7\n\n\n\n-----Note-----\n\nThe binary representations of numbers from 1 to 10 are listed below:\n\n1_10 = 1_2\n\n2_10 = 10_2\n\n3_10 = 11_2\n\n4_10 = 100_2\n\n5_10 = 101_2\n\n6_10 = 110_2\n\n7_10 = 111_2\n\n8_10 = 1000_2\n\n9_10 = 1001_2\n\n10_10 = 1010_2\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given an integer num, find the closest two integers in absolute difference whose product equals\u00a0num + 1\u00a0or num + 2.\n\n\u00a0\nExample 1:\nInput: num = 8\nOutput: [3,3]\n\n\nExample 2:\nInput: num = 123\nOutput: [5,25]\n\nExample 3:\nInput: num = 999\nOutput: [40,25]\n\n\"\"\"\nclass Solution:\n    def closestDivisors(self, num: int) -> List[int]:",
    "19": "Python 3\n\"\"\"\nGiven an integer num, find the closest two integers in absolute difference whose product equals\u00a0num + 1\u00a0or num + 2.\nReturn the two integers in any order.\n\u00a0\nExample 1:\nInput: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.\n\nExample 2:\nInput: num = 123\nOutput: [5,25]\n\nExample 3:\nInput: num = 999\nOutput: [40,25]\n\n\u00a0\nConstraints:\n\n1 <= num <= 10^9\n\"\"\"\nclass Solution:\n    def closestDivisors(self, num: int) -> List[int]:"
}