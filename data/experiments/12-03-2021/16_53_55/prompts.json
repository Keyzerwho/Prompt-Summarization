{
    "0": "Python 3\n\"\"\"\nYou've got array A, consisting of n integers and a positive integer k. Array A is indexed by integers from 1 to n.\n\nYou need to permute the array elements so that value $\\sum_{i = 1}^{n - k}|A [ i ] - A [ i + k ]|$ became as minimal as possible. In particular, it is not allowed to change order of elements at all.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 k \u2264 min(5000, n - 1)). \n\nThe second line contains n integers A[1], A[2], ..., A[n] ( - 10^9 \u2264 A[i] \u2264 10^9), separate by spaces \u2014 elements of the array A.\n\n\n-----Output-----\n\nPrint the minimum possible value of the sum described in the statement.\n\n\n-----Examples-----\nInput\n3 2\n1 2 4\n\nOutput\n1\n\nInput\n5 2\n3 -5 3 -5 3\n\nOutput\n0\n\nInput\n6 3\n4 3 4 3 2 5\n\nOutput\n3\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou've got array A, consisting of n integers and a positive integer k. Array A is indexed by integers from 1 to n.\n\nYou need to permute the array elements so that value $\\sum_{i = 1}^{n - k}|A [ i ] - A [ i + k ]|$ became minimal possible. In particular, it is allowed not to change order of elements at all.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 k \u2264 min(5000, n - 1)). \n\nThe second line contains n integers A[1], A[2], ..., A[n] ( - 10^9 \u2264 A[i] \u2264 10^9), separate by spaces \u2014 elements of the array A.\n\n\n-----Output-----\n\nPrint the minimum possible value of the sum described in the statement.\n\n\n-----Examples-----\nInput\n3 2\n1 2 4\n\nOutput\n1\n\nInput\n5 2\n3 -5 3 -5 3\n\nOutput\n0\n\nInput\n6 3\n4 3 4 3 2 5\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first test one of the optimal permutations is 1\u00a04\u00a02. \n\nIn the second test the initial order is optimal. \n\nIn the third test one of the optimal permutations is 2\u00a03\u00a04\u00a04\u00a03\u00a05.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven a message containing English letters(A-Z), it is being encoded to numbers using the following mapping:\n'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nDetermine the total number of ways to decode it. While decoding you need to choose a substring of characters and not a subsequence. Also a chosen substring should not contain any leading \"0\"s, but can contain trailing \"0\"s.Print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nDhruvil has always been a studious person and will be completing his Engineering soon. He is always kneen about solving problems and is preparing hard for his next interview at Hackerrank. He has practiced lots of problems and now he came across this problem.\nGiven a message containing English letters(A-Z), it is being encoded to numbers using the following mapping:\n'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nNow, given a non-empty string containing only digits, help Dhruvil determine the total number of ways to decode it.\nWhile decoding you need to choose a substring of charachters and not a subsequence. Also a chosen substring should not contain any leading \"0\"s, but can contain trailing \"0\"s. Since the output can be very large print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n-----EXPLANATION:-----\nThere are 2 possible ways. It could be decoded as \"AB\" {1,2} or \"L\" {12}.\nThere are 3 possible ways. It could be decoded as \"BZ\" {2,26}, \"VF\" {22,6}, or \"BBF\" {2,2,6}.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nFor an array $b$ of length $m$ we define the function $f$ as  $ f(b) = \\begin{cases} b[1] & \\quad \\text{if } m = 1 \\\\ f(b[1] \\oplus b[2],b[2] \\oplus b[3],\\dots,b[m-1] \\oplus b[m]) & \\quad \\text{otherwise,} \\end{cases} $ \n\nwhere $\\oplus$ is bitwise exclusive OR.\n\nYou are given an array $a$ and a few queries. Each query is represented as two integers $l$ and $r$. The answer is the maximum value of $f$ on all continuous subsegments of the array $a_l, a_{l+1}, \\ldots, a_r$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2^{30}-1$)\u00a0\u2014 the elements of the array.\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 100\\,000$)\u00a0\u2014 the number of queries.\n\nEach of the next $q$ lines contains a query represented as two integers $l$, $r$ ($1 \\le l \\le r \\le n$).\n\n\n-----Output-----\n\nPrint $q$ lines\u00a0\u2014 the answers for the queries.\n\n\n-----Examples-----\nInput\n3\n8 4 1\n2\n2 3\n1 2\n\nOutput\n5\n12\n\nInput\n6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 4\n1 2\n\nOutput\n60\n30\n12\n3\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nFor an array $b$ of length $m$ we define the function $f$ as  $ f(b) = \\begin{cases} b[1] & \\quad \\text{if } m = 1 \\\\ f(b[1] \\oplus b[2],b[2] \\oplus b[3],\\dots,b[m-1] \\oplus b[m]) & \\quad \\text{otherwise,} \\end{cases} $ \n\nwhere $\\oplus$ is bitwise exclusive OR.\n\nFor example, $f(1,2,4,8)=f(1\\oplus2,2\\oplus4,4\\oplus8)=f(3,6,12)=f(3\\oplus6,6\\oplus12)=f(5,10)=f(5\\oplus10)=f(15)=15$\n\nYou are given an array $a$ and a few queries. Each query is represented as two integers $l$ and $r$. The answer is the maximum value of $f$ on all continuous subsegments of the array $a_l, a_{l+1}, \\ldots, a_r$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2^{30}-1$)\u00a0\u2014 the elements of the array.\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 100\\,000$)\u00a0\u2014 the number of queries.\n\nEach of the next $q$ lines contains a query represented as two integers $l$, $r$ ($1 \\le l \\le r \\le n$).\n\n\n-----Output-----\n\nPrint $q$ lines\u00a0\u2014 the answers for the queries.\n\n\n-----Examples-----\nInput\n3\n8 4 1\n2\n2 3\n1 2\n\nOutput\n5\n12\n\nInput\n6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 4\n1 2\n\nOutput\n60\n30\n12\n3\n\n\n\n-----Note-----\n\nIn first sample in both queries the maximum value of the function is reached on the subsegment that is equal to the whole segment.\n\nIn second sample, optimal segment for first query are $[3,6]$, for second query \u2014 $[2,5]$, for third \u2014 $[3,4]$, for fourth \u2014 $[1,2]$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given N different numbers you want to make a list of L different numbers. You create these list so that:\n\nevery number is used atleast once\na number can only be repeated only if K other different numbers have been used\n\nReturn the number of possible combinations of lists. As the answer can be very large, return it modulo 10^9 + 7.\n\n\n\n\nExample 1:\nInput: N = 3, L = 3, K = 1\nOutput: 6\nExplanation: There are 6 possible combinations. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n\n\nExample 2:\nInput: N = 2, L = 3, K = 0\nOutput: 6\nExplanation: There are 6 possible combinations. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n\n\nExample 3:\nInput: N = 2, L = 3, K = 1\nOutput: 2\nExplanation: There are 2 possible combinations. [1, 2, 1], [2, 1, 2]\n\n\n\n\u00a0\nNote:\n\n0 <= K < N <= L <= 100\n\n\"\"\"\nclass Solution:\n    def numMusicPlaylists(self, N: int, L: int, K: int) -> int:",
    "7": "Python 3\n\"\"\"\nYour music player contains N\u00a0different songs and she wants to listen to L (not necessarily different) songs during your trip. \u00a0You\u00a0create\u00a0a playlist so\u00a0that:\n\nEvery song is played at least once\nA song can only be played again only if\u00a0K\u00a0other songs have been played\n\nReturn the number of possible playlists.\u00a0 As the answer can be very large, return it modulo 10^9 + 7.\n\u00a0\n\n\n\nExample 1:\nInput: N = 3, L = 3, K = 1\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n\n\nExample 2:\nInput: N = 2, L = 3, K = 0\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n\n\nExample 3:\nInput: N = 2, L = 3, K = 1\nOutput: 2\nExplanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]\n\n\n\n\u00a0\nNote:\n\n0 <= K < N <= L <= 100\n\"\"\"\nclass Solution:\n    def numMusicPlaylists(self, N: int, L: int, K: int) -> int:",
    "8": "Python 3\n\"\"\"\ngiven a number $n$ and $m$. Find sum of last digits of all the numbers from $1$ to $n$ which are divisible by $m$\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of queries.\n\nThe following $q$ lines contain queries, one per line. Each query is given as two integers $n$ and $m$ ($1 \\le n, m \\le 10^{16}$) \u2014 the number of pages in the book and required divisor, respectively.\n\n\n-----Output-----\n\nFor each query print the answer for it \u2014 the sum of digits.\n\n\n-----Example-----\nInput\n7\n1 1\n10 1\n100 3\n1024 14\n998244353 1337\n123 144\n1234312817382646 13\n\nOutput\n1\n45\n153\n294\n3359835\n0\n427262129093995\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nPolycarp is reading a book consisting of $n$ pages numbered from $1$ to $n$. Every time he finishes the page with the number divisible by $m$, he writes down the last digit of this page number. For example, if $n=15$ and $m=5$, pages divisible by $m$ are $5, 10, 15$. Their last digits are $5, 0, 5$ correspondingly, their sum is $10$.\n\nYour task is to calculate the sum of all digits Polycarp has written down.\n\nYou have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of queries.\n\nThe following $q$ lines contain queries, one per line. Each query is given as two integers $n$ and $m$ ($1 \\le n, m \\le 10^{16}$) \u2014 the number of pages in the book and required divisor, respectively.\n\n\n-----Output-----\n\nFor each query print the answer for it \u2014 the sum of digits written down by Polycarp.\n\n\n-----Example-----\nInput\n7\n1 1\n10 1\n100 3\n1024 14\n998244353 1337\n123 144\n1234312817382646 13\n\nOutput\n1\n45\n153\n294\n3359835\n0\n427262129093995\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nWe have two patterns in characters. The first one can be represented by one bit 0. The second one can be represented by two bits either 10 or 11. \n\nYou are given an array with several bits. Return whether the last character must be a one-bit character or not. the given array will always ends with a zero\n\nExample 1:\n\nInput: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n\n\n\nExample 2:\n\nInput: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\n\n\nNote:\n1 .\nbits[i] is always 0 or 1.\n\n\"\"\"\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:",
    "11": "Python 3\n\"\"\"\nWe have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).  \n\nNow given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n\nExample 1:\n\nInput: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n\n\n\nExample 2:\n\nInput: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\n\n\nNote:\n1 .\nbits[i] is always 0 or 1.\n\"\"\"\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:",
    "12": "Python 3\n\"\"\"\nYou are given an array $a$ of length $n$ consisting of zeros. \nYou perform $n$ actions with this array: during the $i$-th action:\n\nChoose the maximum length subarray consisting only of zeros, among all such segments choose the leftmost one;  \nLet this segment be $[l; r]$.\nIf $r-l+1$ is odd then assign $a[\\frac{l+r}{2}] := i$ otherwise assign $a[\\frac{l+r-1}{2}] := i$. \n\nConsider the array $a$ of length $5$. \nFirstly, we choose the segment $[1; 5]$ and assign $a[3] := 1$, \nso $a$ becomes $[0, 0, 1, 0, 0]$;  then we choose the segment $[1; 2]$ and assign $a[1] := 2$, \nso $a$ becomes $[2, 0, 1, 0, 0]$;  then we choose the segment $[4; 5]$ and assign $a[4] := 3$, \nso $a$ becomes $[2, 0, 1, 3, 0]$;  then we choose the segment $[2; 2]$ and assign $a[2] := 4$, \nso $a$ becomes $[2, 4, 1, 3, 0]$;  and at last we choose the segment $[5; 5]$ and assign $a[5] := 5$, \nso $a$ becomes $[2, 4, 1, 3, 5]$. \n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 the array $a$ of length $n$ after performing $n$ actions described in the problem statement. Note that the answer exists and unique.\n\n\n-----Example-----\nInput\n6\n1\n2\n3\n4\n5\n6\n\nOutput\n1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given an array $a$ of length $n$ consisting of zeros. You perform $n$ actions with this array: during the $i$-th action, the following sequence of operations appears:  Choose the maximum by length subarray (continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one;  Let this segment be $[l; r]$. If $r-l+1$ is odd (not divisible by $2$) then assign (set) $a[\\frac{l+r}{2}] := i$ (where $i$ is the number of the current action), otherwise (if $r-l+1$ is even) assign (set) $a[\\frac{l+r-1}{2}] := i$. \n\nConsider the array $a$ of length $5$ (initially $a=[0, 0, 0, 0, 0]$). Then it changes as follows:  Firstly, we choose the segment $[1; 5]$ and assign $a[3] := 1$, so $a$ becomes $[0, 0, 1, 0, 0]$;  then we choose the segment $[1; 2]$ and assign $a[1] := 2$, so $a$ becomes $[2, 0, 1, 0, 0]$;  then we choose the segment $[4; 5]$ and assign $a[4] := 3$, so $a$ becomes $[2, 0, 1, 3, 0]$;  then we choose the segment $[2; 2]$ and assign $a[2] := 4$, so $a$ becomes $[2, 4, 1, 3, 0]$;  and at last we choose the segment $[5; 5]$ and assign $a[5] := 5$, so $a$ becomes $[2, 4, 1, 3, 5]$. \n\nYour task is to find the array $a$ of length $n$ after performing all $n$ actions. Note that the answer exists and unique.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 the array $a$ of length $n$ after performing $n$ actions described in the problem statement. Note that the answer exists and unique.\n\n\n-----Example-----\nInput\n6\n1\n2\n3\n4\n5\n6\n\nOutput\n1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nWrite a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it's invalid. 0 <= input.length <= 100.\n\nExamples:\nInput:\n\"()\"\nOutput:\ntrue\n\nInput:\n\")(()))\"\nOutput:\nfalse\n\nInput:\n\"(\"\nOutput:\nfalse\n\nInput:\n\"(())((()())())\"\nOutput:\ntrue\n\"\"\"\ndef valid_parentheses(string):",
    "15": "Python 3\n\"\"\"\nWrite a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return `true` if the string is valid, and `false` if it's invalid.\n\n## Examples\n\n```\n\"()\"              =>  true\n\")(()))\"          =>  false\n\"(\"               =>  false\n\"(())((()())())\"  =>  true\n```\n\n## Constraints\n\n`0 <= input.length <= 100`\n\n~~~if-not:javascript,go\nAlong with opening (`(`) and closing (`)`) parenthesis, input may contain any valid ASCII characters.  Furthermore, the input string may be empty and/or not contain any parentheses at all.  Do **not** treat other forms of brackets as parentheses (e.g. `[]`, `{}`, `<>`).\n~~~\n\"\"\"\ndef valid_parentheses(string):",
    "16": "Python 3\n\"\"\"\nYou are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\nSwap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$, that is, the absolute difference between $i$ and $j$.  Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\nSwap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$, that is, the absolute difference between $i$ and $j$.  Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip (change $0$ to $1$ or $1$ to $0$) the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, one of the optimal solutions is to flip index $1$ and index $3$, the string $a$ changes in the following way: \"100\" $\\to$ \"000\" $\\to$ \"001\". The cost is $1 + 1 = 2$.\n\nThe other optimal solution is to swap bits and indices $1$ and $3$, the string $a$ changes then \"100\" $\\to$ \"001\", the cost is also $|1 - 3| = 2$.\n\nIn the second example, the optimal solution is to swap bits at indices $2$ and $3$, the string $a$ changes as \"0101\" $\\to$ \"0011\". The cost is $|2 - 3| = 1$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n# Task\n\nGiven two positive values: divisor and bound. Write a function maxMultiple(divisor, bound) to find the largest integer that is divisible by divisor and less than or equal to bound but greater than 0. It's guaranteed that a divisor is found.\n\n# Examples:\n\nInput: maxMultiple(2,7)\nOutput: 6\nExplanation: 6 is divisible 2, 6 is less than or equal to bound 7, and 6 is > 0.\n\nInput: maxMultiple(10,50)\nOutput: 50\nExplanation: 50is divisible by 10, 50 is less than or equal to bound 50, and 50 is > 0.\n\nInput: maxMultiple(37,200)\nOutput: 185\nExplanation: 185 is divisible by 37, 185 is less than or equal to bound 200, and 185 is > 0.\n\"\"\"\ndef max_multiple(divisor, bound):",
    "19": "Python 3\n\"\"\"\n# Task\n\n**_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That , \n\n# Conditions :\n\n* **_N_**  is *divisible by divisor*\n\n* **_N_**  is *less than or equal to bound* \n\n* **_N_**  is *greater than 0*.\n___\n\n# Notes \n\n* The **_parameters (divisor, bound)_** passed to the function are *only positive values* .\n* *It's guaranteed that* a **divisor is Found** .\n___\n# Input >> Output Examples \n\n```\nmaxMultiple (2,7) ==> return (6)\n```\n## Explanation: \n\n**_(6)_** is divisible by **_(2)_** , **_(6)_** is less than or equal to bound **_(7)_** , and **_(6)_** is > 0 .\n___\n```\nmaxMultiple (10,50)  ==> return (50)\n```\n## Explanation:\n\n**_(50)_** *is divisible by* **_(10)_** , **_(50)_** is less than or equal to bound **_(50)_** , and **_(50)_** is > 0 .*\n___\n```\nmaxMultiple (37,200) ==> return (185)\n```\n## Explanation:\n\n**_(185)_** is divisible by **_(37)_** , **_(185)_** is less than or equal to bound **_(200)_** , and **_(185)_** is > 0 .\n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n~~~if:nasm\n## NASM-specific notes\n\nThe function declaration is `int max_multiple(int divisor, int bound)` where the first argument is the divisor and the second one is the bound.\n~~~\n\"\"\"\ndef max_multiple(divisor, bound):"
}