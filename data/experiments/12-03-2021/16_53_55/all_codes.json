{
    "0": "\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    min_sum = sum(abs(A[i] - A[i + k]) for i in range(n - k))\n    print(min_sum)\n",
    "1": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n - k):\n        ans += abs(a[i] - a[i + k])\n    print(ans)\n",
    "2": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        n = len(s)\n        dp = [0]*(n+1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2,n+1):\n            if s[i-1] > '0':\n                dp[i] = dp[i-1]\n            if s[i-2] == '1' or (s[i-2] == '2' and s[i-1] < '7'):\n                dp[i] += dp[i-2]\n        print(dp[n]%1000000007)",
    "3": "\n    T = int(input())\n    for i in range(T):\n        S = input()\n        if len(S) == 1:\n            if int(S) == 0:\n                print(0)\n            else:\n                print(1)\n        elif len(S) == 2:\n            if int(S) <= 26:\n                print(2)\n            else:\n                print(1)\n        else:\n            if int(S[0]) == 0:\n                print(0)\n            elif int(S[0:2]) <= 26:\n                print(code() + code())\n            else:\n                print(code())",
    "4": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        l, r = map(int, input().split())\n        if l == r:\n            print(a[l-1])\n        else:\n            print(max(a[l-1:r]))\n",
    "5": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    for i in range(q):\n        l, r = map(int, input().split())\n        if l == r:\n            print(a[l-1])\n        else:\n            print(max(a[l-1:r]))\n",
    "6": "\n        \n        pass\n\n\nif __name__ == '__main__':\n    assert Solution().numMusicPlaylists(0) == 0",
    "7": "\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] = dp[i-1][j-1] * (N-1) + dp[i-1][j] * (N-1)\n        # dp[i][j] =",
    "8": "\n    q = int(input())\n    for i in range(q):\n        n, m = map(int, input().split())\n        sum = 0\n        for j in range(1, n+1):\n            if j % m == 0:\n                sum += j % 10\n        print(sum)\n",
    "9": "\n    q = int(input())\n    for i in range(q):\n        n, m = map(int, input().split())\n        s = 0\n        for i in range(1, n+1):\n            if i % m == 0:\n                s += i % 10\n        print(s)\n",
    "10": "\n        i = 0\n        while i < len(bits):\n            if i == len(bits)-1:\n                return True\n            if bits[i] == 1:\n                i += 2\n            else:\n                i += 1\n        return False",
    "11": "\n        i = 0\n        while i < len(bits):\n            if i == len(bits) - 1:\n                return True\n            if bits[i] == 1:\n                i += 2\n            else:\n                i += 1\n        return False",
    "12": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [0]*n\n        for j in range(n):\n            l, r = map(int, input().split())\n            if (r-l+1)%2 == 0:\n                a[(l+r)//2-1] = j+1\n            else:\n                a[(l+r)//2] = j+1\n        print(*a)\n",
    "13": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = [0] * n\n        for j in range(n):\n            l, r = map(int, input().split())\n            if (r - l + 1) % 2 == 0:\n                a[(l + r - 1) // 2] = j + 1\n            else:\n                a[(l + r) // 2] = j + 1\n        print(*a)\n",
    "14": "\n    count = 0\n    for i in string:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
    "15": "\n    if string.count('(') != string.count(')'):\n        return False\n    else:\n        while '()' in string:\n            string = string.replace('()', '')\n        return not string",
    "16": "\n    n = int(input())\n    a = input()\n    b = input()\n    cost = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            cost += 1\n    print(cost)\n",
    "17": "\n    n = int(input())\n    a = input()\n    b = input()\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if a[i] == b[j]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\n    print(dp[n-1][n-1])\n\nif __name__ == \"__main__\":\n    code()",
    "18": "\n    return bound - (bound % divisor)\n\nprint(max_multiple(2,7))\nprint(max_multiple(10,50))\nprint(max_multiple(37,200))",
    "19": "\n    return bound - (bound % divisor)"
}