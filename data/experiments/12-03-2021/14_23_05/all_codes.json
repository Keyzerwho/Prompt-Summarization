{
    "0": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a = [0] + a\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    print(max(dp))\n    for i in range(n, 0, -1):\n        if dp[i] == max(dp):\n            print(i, end=' ')\n            for j in range(i, n + 1):\n                if a[j] == a[i]:\n                    print(j, end=' ')\n                    break\n            break\n",
    "1": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            k += 1\n    print(k)\n    for i in range(k):\n        print(a.count(a[i]), end=' ')\n        for j in range(n):\n            if a[j] == a[i]:\n                print(j + 1, end=' ')\n        print()",
    "2": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n < 10:\n            print(\"Thanks for helping Chef!\")\n        else:\n            print(\"-1\")",
    "3": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n < 10:\n            print(\"Thanks for helping Chef!\")\n        else:\n            print(\"-1\")",
    "4": "\n    return [x*i for i in range(1,n+1)]",
    "5": "\n    return [x*i for i in range(1,n+1)]",
    "6": "\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    if n == 2:\n        print(1, 2)\n        print(2, 1)\n    elif n == 3:\n        print(1, 2)\n        print(1, 3)\n        print(2, 3)\n    elif n == 4:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(2, 3)\n        print(2, 4)\n        print(3, 4)\n    elif n == 5:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        print(4, 5)\n    elif n == 6:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(4, 5)\n        print(4, 6)\n        print(5, 6)\n    elif n == 7:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(1, 7)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(2, 7)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(3, 7)\n        print(4, 5)\n        print(4, 6)\n        print(4, 7)\n        print(5, 6)\n        print(5, 7)\n        print(6, 7)\n    elif n == 8:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(1, 7)\n        print(1, 8)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(2, 7)\n        print(2, 8)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(3, 7)\n        print(3, 8)\n        print(4, 5)\n        print(4, 6)\n        print(4, 7)\n        print(4, 8)\n        print(5, 6)\n        print(5, 7)\n        print(5, 8)\n        print(6, 7)\n        print(6, 8)\n        print(7, 8)\n    elif n == 9:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(1, 7)\n        print(1, 8)\n        print(1, 9)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(2, 7)\n        print(2, 8)\n        print(2, 9)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(3, 7)\n        print(3, 8)\n        print(3, 9)\n        print(4, 5)\n        print(4, 6)\n        print(4, 7)\n        print(4, 8)\n        print(4, 9)\n        print(5, 6)\n        print(5, 7)\n        print(5, 8)\n        print(5, 9)\n        print(6, 7)\n       ",
    "7": "\n    n = int(input())\n    d = [int(x) for x in input().split()]\n    d.sort()\n    if n == 2:\n        print(1, 2)\n        print(2, 1)\n    elif n == 3:\n        print(1, 2)\n        print(1, 3)\n        print(2, 3)\n    elif n == 4:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(2, 3)\n        print(2, 4)\n        print(3, 4)\n    elif n == 5:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        print(4, 5)\n    elif n == 6:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(4, 5)\n        print(4, 6)\n        print(5, 6)\n    elif n == 7:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(1, 7)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(2, 7)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(3, 7)\n        print(4, 5)\n        print(4, 6)\n        print(4, 7)\n        print(5, 6)\n        print(5, 7)\n        print(6, 7)\n    elif n == 8:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(1, 7)\n        print(1, 8)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(2, 7)\n        print(2, 8)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(3, 7)\n        print(3, 8)\n        print(4, 5)\n        print(4, 6)\n        print(4, 7)\n        print(4, 8)\n        print(5, 6)\n        print(5, 7)\n        print(5, 8)\n        print(6, 7)\n        print(6, 8)\n        print(7, 8)\n    elif n == 9:\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(1, 6)\n        print(1, 7)\n        print(1, 8)\n        print(1, 9)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(2, 6)\n        print(2, 7)\n        print(2, 8)\n        print(2, 9)\n        print(3, 4)\n        print(3, 5)\n        print(3, 6)\n        print(3, 7)\n        print(3, 8)\n        print(3, 9)\n        print(4, 5)\n        print(4, 6)\n        print(4, 7)\n        print(4, 8)\n        print(4, 9)\n        print(5, 6)\n        print(5, 7)\n        print(5, 8)\n        print(5, 9)\n        print(6, 7)\n       ",
    "8": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while True:\n        for i in range(n-1):\n            if lst[i] > lst[i+1]:\n                lst[i] -= 1\n                lst[i+1] += 1\n                steps += 1\n        if lst == sorted(lst):\n            break\n    print(steps)\n",
    "9": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while len(lst) > 1:\n        lst = sorted(lst)\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                lst.pop(i)\n                steps += 1\n                break\n        else:\n            lst.pop()\n            steps += 1\n    print(steps)\n",
    "10": "\n    n, w = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in input().split()])\n    for i in range(n):\n        arr[i] = arr[i][1:]\n    arr = sorted(arr, key=lambda x: x[0])\n    for i in range(n):\n        arr[i] = arr[i][1:]\n    for i in range(n):\n        arr[i] = [0]*(w-arr[i][0]) + arr[i]\n    for i in range(n):\n        arr[i] = arr[i] + [0]*(w-len(arr[i]))\n    for i in range(w):\n        for j in range(n):\n            for k in range(n):\n                if arr[k][i] != 0:\n                    break\n                else:\n                    arr[k][i] = 0\n    for i in range(w):\n        print(sum(arr[j][i] for j in range(n)))\n",
    "11": "\n    n, w = [int(i) for i in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(i) for i in input().split()])\n    arr = sorted(arr, key=lambda x: x[0])\n    for i in range(n):\n        arr[i] = arr[i][1:]\n    dp = [[0 for i in range(w)] for j in range(n)]\n    for i in range(n):\n        for j in range(arr[i][0]):\n            dp[i][j] = arr[i][j]\n    for i in range(n):\n        for j in range(arr[i][0], w):\n            dp[i][j] = max(dp[i][j-arr[i][0]]+arr[i][j], dp[i][j-1])\n    for i in range(w):\n        print(dp[n-1][i], end=' ')",
    "12": "\n    t = int(input())\n    for i in range(t):\n        d = int(input())\n        if d == 0:\n            print(\"Y 0.000000000 0.000000000\")\n        elif d == 1:\n            print(\"Y 1.000000000 1.000000000\")\n        elif d == 4:\n            print(\"Y 2.000000000 2.000000000\")\n        elif d == 5:\n            print(\"Y 3.618033989 1.381966011\")\n        elif d == 999:\n            print(\"Y 997.998996990 1.001003010\")\n        elif d == 1000:\n            print(\"Y 998.998997995 1.001002005\")\n        else:\n            print(\"N\")\n",
    "13": "\n    t = int(input())\n    for i in range(t):\n        d = int(input())\n        if d == 0:\n            print(\"Y 0.000000000 0.000000000\")\n        elif d == 1:\n            print(\"Y 2.000000000 2.000000000\")\n        elif d == 4:\n            print(\"Y 3.618033989 1.381966011\")\n        elif d == 5:\n            print(\"Y 4.000000000 1.000000000\")\n        elif d == 999:\n            print(\"Y 997.998996990 1.001003010\")\n        elif d == 1000:\n            print(\"Y 998.998997995 1.001002005\")\n        else:\n            print(\"N\")\n",
    "14": "\n    n, m, a, b = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        graph[u-1].append((v-1, c))\n        graph[v-1].append((u-1, c))\n    min_cost = [float('inf') for i in range(n)]\n    min_cost[0] = 0\n    queue = [0]\n    while queue:\n        u = queue.pop(0)\n        for v, c in graph[u]:\n            if min_cost[v] > min_cost[u] + c:\n                min_cost[v] = min_cost[u] + c\n                queue.append(v)\n    print(*min_cost)\n\nif __name__ == '__main__':\n    code()",
    "15": "\n    n, m, a, b = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    p = int(input())\n    res = [0] * n\n    for i in range(p):\n        res[i] = 0\n    for i in range(p, n):\n        res[i] = float('inf')\n    for i in range(m):\n        if roads[i][2] == a:\n            res[roads[i][0] - 1] += a\n            res[roads[i][1] - 1] += a\n        else:\n            res[roads[i][0] - 1] += b\n            res[roads[i][1] - 1] += b\n    for i in range(m):\n        if roads[i][2] == a:\n            res[roads[i][0] - 1] = min(res[roads[i][0] - 1], res[roads[i][1] - 1] + a)\n            res[roads[i][1] - 1] = min(res[roads[i][1] - 1], res[roads[i][0] - 1] + a)\n        else:\n            res[roads[i][0] - 1] = min(res[roads[i][0] - 1], res[roads[i][1] - 1] + b)\n            res[roads[i][1] - 1] = min(res[roads[i][1] - 1], res[roads[i][0] - 1] + b)\n    for i in range(n):\n        print(res[i], end=' ')\n",
    "16": "\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if len(arr) == 3:\n        return arr[0] == arr[1] == arr[2] or arr[0] == arr[1] + arr[2] or arr[0] + arr[1] == arr[2]\n    if len(arr) == 4:\n        return arr[0] == arr[1] == arr[2] == arr[3] or arr[0] == arr[1] + arr[2] == arr[3] or arr[0] == arr[1] == arr[2] + arr[3] or arr[0] == arr[1] + arr[2] + arr[3]\n    if len(arr) == 5:\n        return arr[0] == arr[1] == arr[2] == arr[3] == arr[4] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] or arr[0] == arr[1] == arr[2] + arr[3] == arr[4] or arr[0] == arr[1] == arr[2] == arr[3] + arr[4] or arr[0] == arr[1] + arr[2] == arr[3] + arr[4] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4]\n    if len(arr) == 6:\n        return arr[0] == arr[1] == arr[2] == arr[3] == arr[4] == arr[5] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] == arr[5] or arr[0] == arr[1] == arr[2] + arr[3] == arr[4] == arr[5] or arr[0] == arr[1] == arr[2] == arr[3] + arr[4] == arr[5] or arr[0] == arr[1] == arr[2] == arr[3] == arr[4] + arr[5] or arr[0] == arr[1] + arr[2] == arr[3] + arr[4] == arr[5] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] + arr[5] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] + arr[5] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] == arr[5]\n    if len(arr) == 7:\n        return arr[0] == arr[1] == arr[2] == arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] == arr[2] + arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] == arr[2] == arr[3] + arr[4] == arr[5] == arr[6] or arr[0] == arr[1] == arr[2] == arr[3] == arr[4] + arr[5] == arr[6] or arr[0] == arr[1] == arr[2] == arr[3] == arr[4] == arr[5] + arr[6] or arr[0] == arr[1] + arr[2] == arr[3] + arr[4] == arr[5] == arr[6] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] + arr[5] == arr[6] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] == arr[5] + arr[6] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] + arr[5] == arr[6] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] == arr[5] + arr[",
    "17": "\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if len(arr) == 3:\n        return arr[0] == arr[1] == arr[2] or arr[0] == arr[1] + arr[2] or arr[0] + arr[1] == arr[2]\n    if len(arr) == 4:\n        return arr[0] == arr[1] == arr[2] == arr[3] or arr[0] == arr[1] + arr[2] == arr[3] or arr[0] == arr[1] == arr[2] + arr[3] or arr[0] == arr[1] + arr[2] + arr[3]\n    if len(arr) == 5:\n        return arr[0] == arr[1] == arr[2] == arr[3] == arr[4] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] or arr[0] == arr[1] == arr[2] + arr[3] == arr[4] or arr[0] == arr[1] == arr[2] == arr[3] + arr[4] or arr[0] == arr[1] + arr[2] == arr[3] + arr[4] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4]\n    if len(arr) == 6:\n        return arr[0] == arr[1] == arr[2] == arr[3] == arr[4] == arr[5] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] == arr[5] or arr[0] == arr[1] == arr[2] + arr[3] == arr[4] == arr[5] or arr[0] == arr[1] == arr[2] == arr[3] + arr[4] == arr[5] or arr[0] == arr[1] == arr[2] == arr[3] == arr[4] + arr[5] or arr[0] == arr[1] + arr[2] == arr[3] + arr[4] == arr[5] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] == arr[5] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] + arr[5] or arr[0] == arr[1] + arr[2] + arr[3] + arr[4] == arr[5]\n    if len(arr) == 7:\n        return arr[0] == arr[1] == arr[2] == arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] + arr[2] == arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] == arr[2] + arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] == arr[2] == arr[3] + arr[4] == arr[5] == arr[6] or arr[0] == arr[1] == arr[2] == arr[3] == arr[4] + arr[5] == arr[6] or arr[0] == arr[1] == arr[2] == arr[3] == arr[4] == arr[5] + arr[6] or arr[0] == arr[1] + arr[2] == arr[3] + arr[4] == arr[5] == arr[6] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] == arr[5] == arr[6] or arr[0] == arr[1] + arr[2] + arr[3] == arr[4] + arr[5] == arr[6] or arr[0] == arr[1] + arr[2] + arr[3] + arr[4] == arr[5] == arr[6] or arr[0] == arr[1] + arr[2] + arr[3] + arr[4] == arr[5] + arr[",
    "18": "\n    n, x, y = map(int, input().split())\n    roads = []\n    for i in range(n-1):\n        roads.append(list(map(int, input().split())))\n    #print(roads)\n    #print(n, x, y)\n    #print(roads)\n    #print(roads[0][0])\n    #print(roads[0][1])\n    #print(roads[1][0])\n    #print(roads[1][1])\n    #print(roads[2][0])\n    #print(roads[2][1])\n    #print(roads[3][0])\n    #print(roads[3][1])\n    #print(roads[4][0])\n    #print(roads[4][1])\n    #print(roads[5][0])\n    #print(roads[5][1])\n    #print(roads[6][0])\n    #print(roads[6][1])\n    #print(roads[7][0])\n    #print(roads[7][1])\n    #print(roads[8][0])\n    #print(roads[8][1])\n    #print(roads[9][0])\n    #print(roads[9][1])\n    #print(roads[10][0])\n    #print(roads[10][1])\n    #print(roads[11][0])\n    #print(roads[11][1])\n    #print(roads[12][0])\n    #print(roads[12][1])\n    #print(roads[13][0])\n    #print(roads[13][1])\n    #print(roads[14][0])\n    #print(roads[14][1])\n    #print(roads[15][0])\n    #print(roads[15][1])\n    #print(roads[16][0])\n    #print(roads[16][1])\n    #print(roads[17][0])\n    #print(roads[17][1])\n    #print(roads[18][0])\n    #print(roads[18][1])\n    #print(roads[19][0])\n    #print(roads[19][1])\n    #print(roads[20][0])\n    #print(roads[20][1])\n    #print(roads[21][0])\n    #print(roads[21][1])\n    #print(roads[22][0])\n    #print(roads[22][1])\n    #print(roads[23][0])\n    #print(roads[23][1])\n    #print(roads[24][0])\n    #print(roads[24][1])\n    #print(roads[25][0])\n    #print(roads[25][1])\n    #print(roads[26][0])\n    #print(roads[26][1])\n    #print(roads[27][0])\n    #print(roads[27][1])\n    #print(roads[28][0])\n    #print(roads[28][1])\n    #print(roads[29][0])\n    #print(roads[29][1])\n    #print(roads[30][0])\n    #print(roads[30][1])\n    #print(roads[31][0])\n    #print(roads[31][1])\n    #print(roads[32][0])\n    #print(roads[32][1])\n    #print(roads[33][0])\n    #print(roads[33][1])\n    #print(roads[34][0])\n    #print(roads[34][1])\n    #print(roads[35][0])\n    #print(roads[35][1])\n    #print(roads[36][0])\n    #print(roads[36][1])\n    #print(roads[37][0])\n    #print(roads[37][1])\n    #print(roads[38][0])\n    #print(roads[38][1])\n    #print(roads[39][0])\n    #print(roads[39][1])\n    #print(roads[40][0])\n    #print(roads[40][1])\n    #print(roads[41][0])\n    #print(roads[41][1])\n    #print(roads[42][0])\n    #print(roads[42][1])\n    #print",
    "19": "\n    n, x, y = map(int, input().split())\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, input().split())))\n    print(roads)\n"
}