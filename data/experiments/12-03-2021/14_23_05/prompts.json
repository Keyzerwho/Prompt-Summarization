{
    "0": "Python 3\n\"\"\"\nYou are given a sequence a_1, a_2, ..., a_{n} consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order.\n\nThe numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places.\n\nEvery element of the sequence must appear in exactly one subsequence.\n\n\n-----Input-----\n\nThe first line of input data contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the sequence.\n\nThe second line of input data contains n different integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.\n\n\n-----Output-----\n\nIn the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements.\n\nIn the next k lines print the description of subsequences in the following format: the number of elements in subsequence c_{i} (0 < c_{i} \u2264 n), then c_{i} integers l_1, l_2, ..., l_{c}_{i} (1 \u2264 l_{j} \u2264 n)\u00a0\u2014 indices of these elements in the original sequence. \n\nIndices could be printed in any order. Every index from 1 to n must appear in output exactly once.\n\nIf there are several possible answers, print any of them.\n\n\n-----Examples-----\nInput\n6\n3 2 1 6 5 4\n\nOutput\n4\n2 1 3\n1 2\n2 4 6\n1 5\n\nInput\n6\n83 -75 -49 11 37 62\n\nOutput\n1\n6 1 2 3 4 5 6\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a sequence a_1, a_2, ..., a_{n} consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order.\n\nSorting integers in a subsequence is a process such that the numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places.\n\nEvery element of the sequence must appear in exactly one subsequence.\n\n\n-----Input-----\n\nThe first line of input data contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the sequence.\n\nThe second line of input data contains n different integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.\n\n\n-----Output-----\n\nIn the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements.\n\nIn the next k lines print the description of subsequences in the following format: the number of elements in subsequence c_{i} (0 < c_{i} \u2264 n), then c_{i} integers l_1, l_2, ..., l_{c}_{i} (1 \u2264 l_{j} \u2264 n)\u00a0\u2014 indices of these elements in the original sequence. \n\nIndices could be printed in any order. Every index from 1 to n must appear in output exactly once.\n\nIf there are several possible answers, print any of them.\n\n\n-----Examples-----\nInput\n6\n3 2 1 6 5 4\n\nOutput\n4\n2 1 3\n1 2\n2 4 6\n1 5\n\nInput\n6\n83 -75 -49 11 37 62\n\nOutput\n1\n6 1 2 3 4 5 6\n\n\n\n-----Note-----\n\nIn the first sample output:\n\nAfter sorting the first subsequence we will get sequence 1\u00a02\u00a03\u00a06\u00a05\u00a04.\n\nSorting the second subsequence changes nothing.\n\nAfter sorting the third subsequence we will get sequence 1\u00a02\u00a03\u00a04\u00a05\u00a06.\n\nSorting the last subsequence changes nothing.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nDisplay \"Thanks for helping Chef!\" if given number N is less than 10, otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWrite a program, which takes an integer N and if the number is less than 10 then display \"Thanks for helping Chef!\" otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nCreate a function with two arguments that will return an array of the first n multiples of x. Assume both the given number and the number of times to count will be positive numbers greater than 0. \n\nExamples:\nInput:\ncount_by(1,10)\nOutput:\n[1,2,3,4,5,6,7,8,9,10]\n\nInput:\ncount_by(2,5)\nOutput:\n[2,4,6,8,10]\n\n\"\"\"\ndef count_by(x, n):",
    "5": "Python 3\n\"\"\"\nCreate a function with two arguments that will return an array of the first (n) multiples of (x). \n\nAssume both the given number and the number of times to count will be positive numbers greater than 0. \n\nReturn the results as an array (or list in Python, Haskell or Elixir).\n\nExamples:\n\n```python\ncount_by(1,10) #should return [1,2,3,4,5,6,7,8,9,10]\ncount_by(2,5) #should return [2,4,6,8,10]\n```\n\"\"\"\ndef count_by(x, n):",
    "6": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\nThe tree shown below satisfies the conditions.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nThere are n psycho standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. A psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThere are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]  \u2192  [10 8 4]  \u2192  [10]. So, there are two steps.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given $n$ arrays that can have different sizes. You also have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally in the $i$-th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table.\n\nYou need to find the maximum sum of the integers in the $j$-th column for each $j$ from $1$ to $w$ independently.\n\nYou can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$)\u00a0\u2014 the number of arrays and the width of the table.\n\nEach of the next $n$ lines consists of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array, followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\le a_{ij} \\le 10^{9}$)\u00a0\u2014 the elements of the array.\n\nThe total length of the arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\nInput\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\nOutput\n7 8 \n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given $n$ arrays that can have different sizes. You also have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally in the $i$-th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table.\n\nYou need to find the maximum sum of the integers in the $j$-th column for each $j$ from $1$ to $w$ independently.\n\n [Image] Optimal placements for columns $1$, $2$ and $3$ are shown on the pictures from left to right. \n\nNote that you can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$)\u00a0\u2014 the number of arrays and the width of the table.\n\nEach of the next $n$ lines consists of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array, followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\le a_{ij} \\le 10^{9}$)\u00a0\u2014 the elements of the array.\n\nThe total length of the arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\nInput\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\nOutput\n7 8 \n\n\n\n-----Note-----\n\nIllustration for the first example is in the statement.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nTry guessing the statement from this picture:  $3$ \n\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a connected graph of $n$ nodes and $m$ bidirectional edges.\nFor each node $p = 1, 2, \\dots, n$, you need to find a minimum spanning tree. Then output the minimum cost required to travel between node $1$ and node $p$.\n\n-----Input-----\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($2 \\leq n \\leq 70$, $n - 1 \\leq m \\leq 200$, $1 \\leq a < b \\leq 10^7$) \u2014 the number of nodes and edges in the graph, and two possible travel times. Each of the following lines contains three integers $u, v, c$ ($1 \\leq u, v \\leq n$, $u \\neq v$, $c \\in \\{a, b\\}$) denoting an edge between the nodes $u$ and $v$, which has cost $c$.\n\nYou can assume that the graph is connected and has no loops or multiedges.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers. The $p$-th of them should denote the minimum possible post required to travel from $1$ to $p$ after the selected edges are abandoned. Note that for each $p$ you can abandon a different set of edges.\n\n\n-----Examples-----\nInput\n5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n\nOutput\n0 25 60 40 20\n\nInput\n6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n\nOutput\n0 13 26 39 26 13\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nCodefortia is a small island country located somewhere in the West Pacific. It consists of $n$ settlements connected by $m$ bidirectional gravel roads. Curiously enough, the beliefs of the inhabitants require the time needed to pass each road to be equal either to $a$ or $b$ seconds. It's guaranteed that one can go between any pair of settlements by following a sequence of roads.\n\nCodefortia was recently struck by the financial crisis. Therefore, the king decided to abandon some of the roads so that:\n\n  it will be possible to travel between each pair of cities using the remaining roads only,  the sum of times required to pass each remaining road will be minimum possible (in other words, remaining roads must form minimum spanning tree, using the time to pass the road as its weight),  among all the plans minimizing the sum of times above, the time required to travel between the king's residence (in settlement $1$) and the parliament house (in settlement $p$) using the remaining roads only will be minimum possible. \n\nThe king, however, forgot where the parliament house was. For each settlement $p = 1, 2, \\dots, n$, can you tell what is the minimum time required to travel between the king's residence and the parliament house (located in settlement $p$) after some roads are abandoned?\n\n\n-----Input-----\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($2 \\leq n \\leq 70$, $n - 1 \\leq m \\leq 200$, $1 \\leq a < b \\leq 10^7$) \u2014 the number of settlements and gravel roads in Codefortia, and two possible travel times. Each of the following lines contains three integers $u, v, c$ ($1 \\leq u, v \\leq n$, $u \\neq v$, $c \\in \\{a, b\\}$) denoting a single gravel road between the settlements $u$ and $v$, which requires $c$ minutes to travel.\n\nYou can assume that the road network is connected and has no loops or multiedges.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers. The $p$-th of them should denote the minimum possible time required to travel from $1$ to $p$ after the selected roads are abandoned. Note that for each $p$ you can abandon a different set of roads.\n\n\n-----Examples-----\nInput\n5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n\nOutput\n0 25 60 40 20\n\nInput\n6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n\nOutput\n0 13 26 39 26 13\n\n\n\n-----Note-----\n\nThe minimum possible sum of times required to pass each road in the first example is $85$ \u2014 exactly one of the roads with passing time $25$ must be abandoned. Note that after one of these roads is abandoned, it's now impossible to travel between settlements $1$ and $3$ in time $50$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n# Task\n Some people start with the same positive amount of money  and the money will be redistributed. \n\n Find out if the given end-state of amounts is possible.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "17": "Python 3\n\"\"\"\n# Task\n You have some people who are betting money, and they all start with the same amount of money (this number>0). \n\n Find out if the given end-state of amounts is possible after the betting is over and money is redistributed.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "18": "Python 3\n\"\"\"\nA group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\\frac{n \\cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road.\n\nSome spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. It is not guaranteed that x is smaller than y.\n\nGiven n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264 10^9).\n\nEach of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds one needs to spend in order to visit all the cities exactly once.\n\n\n-----Examples-----\nInput\n5 2 3\n1 2\n1 3\n3 4\n5 3\n\nOutput\n9\n\nInput\n5 3 2\n1 2\n1 3\n3 4\n5 3\n\nOutput\n8\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nA group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\\frac{n \\cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road.\n\nA spanning tree is a set of roads containing exactly n - 1 roads such that it's possible to travel between any two cities using only these roads.\n\nSome spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. Note that it's not guaranteed that x is smaller than y.\n\nYou would like to travel through all the cities using the shortest path possible. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264 10^9).\n\nEach of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds one needs to spend in order to visit all the cities exactly once.\n\n\n-----Examples-----\nInput\n5 2 3\n1 2\n1 3\n3 4\n5 3\n\nOutput\n9\n\nInput\n5 3 2\n1 2\n1 3\n3 4\n5 3\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first sample, roads of the spanning tree have cost 2, while other roads have cost 3. One example of an optimal path is $5 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1 \\rightarrow 2$.\n\nIn the second sample, we have the same spanning tree, but roads in the spanning tree cost 3, while other roads cost 2. One example of an optimal path is $1 \\rightarrow 4 \\rightarrow 5 \\rightarrow 2 \\rightarrow 3$.\n\"\"\"\ndef code():"
}