{
    "0": "Python 3\n\"\"\"\nGiven an integer $n$. You have to arrange numbers from $1$ to $2n$, using each of them exactly once, on the circle, such that sum of every $n$ consecutive numbers on the circle must not differ more than by $1$.\n\n\n-----Input-----\n\nThe first and the only line contain one integer $n$ ($1 \\le n \\le 10^5$).\n\n\n-----Output-----\n\nIf there is no solution, output \"NO\" in the first line. \n\nIf there is a solution, output \"YES\" in the first line. In the second line output $2n$ numbers\u00a0\u2014 numbers from $1$ to $2n$ in the order they will stay in the circle. Each number should appear only once. If there are several solutions, you can output any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\nYES\n1 4 5 2 3 6 \nInput\n4\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given integer $n$. You have to arrange numbers from $1$ to $2n$, using each of them exactly once, on the circle, so that the following condition would be satisfied:\n\nFor every $n$ consecutive numbers on the circle write their sum on the blackboard. Then any two of written on the blackboard $2n$ numbers differ not more than by $1$.\n\nFor example, choose $n = 3$. On the left you can see an example of a valid arrangement: $1 + 4 + 5 = 10$, $4 + 5 + 2 = 11$, $5 + 2 + 3 = 10$, $2 + 3 + 6 = 11$, $3 + 6 + 1 = 10$, $6 + 1 + 4 = 11$, any two numbers differ by at most $1$. On the right you can see an invalid arrangement: for example, $5 + 1 + 6 = 12$, and $3 + 2 + 4 = 9$, $9$ and $12$ differ more than by $1$.\n\n [Image] \n\n\n-----Input-----\n\nThe first and the only line contain one integer $n$ ($1 \\le n \\le 10^5$).\n\n\n-----Output-----\n\nIf there is no solution, output \"NO\" in the first line. \n\nIf there is a solution, output \"YES\" in the first line. In the second line output $2n$ numbers\u00a0\u2014 numbers from $1$ to $2n$ in the order they will stay in the circle. Each number should appear only once. If there are several solutions, you can output any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\nYES\n1 4 5 2 3 6 \nInput\n4\n\nOutput\nNO\n\n\n-----Note-----\n\nExample from the statement is shown for the first example. \n\nIt can be proved that there is no solution in the second example.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nIn FEIS, all integer sequences of lengths between 1 and N (inclusive) consisting of integers between 1 and K (inclusive) are listed.\n\nLet the total number of sequences listed in FEIS be X. \n\nFind the (X/2)-th lexicographically smallest one.\n\n-----Constraints-----\n - 1 \\leq N,K \\leq 3 \u00d7 10^5\n\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\n\n-----Output-----\nPrint the (X/2)-th lexicographically smallest sequence listed in FEIS, with spaces in between.\n\n-----Sample Input-----\n3 2\n\n-----Sample Output-----\n2 1 \n\nThere are 12 sequences listed in FEIS: (1),(1,1),(1,2),(1,3),(2),(2,1),(2,2),(2,3),(3),(3,1),(3,2),(3,3).\nThe (12/2 = 6)-th lexicographically smallest one among them is (2,1).\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIn Finite Encyclopedia of Integer Sequences (FEIS), all integer sequences of lengths between 1 and N (inclusive) consisting of integers between 1 and K (inclusive) are listed.\nLet the total number of sequences listed in FEIS be X. Among those sequences, find the (X/2)-th (rounded up to the nearest integer) lexicographically smallest one.\n\n-----Constraints-----\n - 1 \\leq N,K \\leq 3 \u00d7 10^5\n - N and K are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\n\n-----Output-----\nPrint the (X/2)-th (rounded up to the nearest integer) lexicographically smallest sequence listed in FEIS, with spaces in between, where X is the total number of sequences listed in FEIS.\n\n-----Sample Input-----\n3 2\n\n-----Sample Output-----\n2 1 \n\nThere are 12 sequences listed in FEIS: (1),(1,1),(1,2),(1,3),(2),(2,1),(2,2),(2,3),(3),(3,1),(3,2),(3,3).\nThe (12/2 = 6)-th lexicographically smallest one among them is (2,1).\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven the angle of the hour-hand, return the time in HH:MM format and round down to the nearest minute. 0 <= angle <= 360\n\n# Examples\n\n* ```12:00``` = 0 degrees\n\n\n* ```03:00``` = 90 degrees\n\n\n* ```06:00``` = 180 degrees\n\n\n* ```09:00``` = 270 degrees\n\n\n* ```12:00``` = 360 degrees\n\"\"\"\ndef what_time_is_it(angle):",
    "5": "Python 3\n\"\"\"\n# Story\n\nDue to lack of maintenance the minute-hand has fallen off Town Hall clock face.\n\nAnd because the local council has lost most of our tax money to a Nigerian email scam there are no funds to fix the clock properly. \n\nInstead, they are asking for volunteer programmers to write some code that tell the time by only looking at the remaining hour-hand!\n\nWhat a bunch of cheapskates!\n\nCan you do it?\n\n# Kata\n\nGiven the ```angle``` (in degrees) of the hour-hand, return the time in HH:MM format. Round _down_ to the nearest minute.\n\n# Examples\n\n* ```12:00``` = 0 degrees\n\n\n* ```03:00``` = 90 degrees\n\n\n* ```06:00``` = 180 degrees\n\n\n* ```09:00``` = 270 degrees\n\n\n* ```12:00``` = 360 degrees\n\n# Notes\n\n* 0 <= ```angle``` <= 360\n\"\"\"\ndef what_time_is_it(angle):",
    "6": "Python 3\n\"\"\"\nReducing Problems - Bug Fixing #8\n\nTimmy's goal is to calculate the two teams scores and return the winner and sometimes teams don't enter their scores, total the scores out of 3!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"\ndef calculate_total(t1, t2):",
    "7": "Python 3\n\"\"\"\nReducing Problems - Bug Fixing #8\n\nOh no! Timmy's reduce is causing problems, Timmy's goal is to calculate the two teams scores and return the winner but timmy has gotten confused and sometimes teams don't enter their scores, total the scores out of 3! Help timmy fix his program!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"\ndef calculate_total(t1, t2):",
    "8": "Python 3\n\"\"\"\nYou have a sequence A of N non-negative integers.\nCompute the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} over all sequences B of N non-negative integers whose sum is at most M, and print it modulo (10^9 + 7).\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2000\n - 1 \\leq M \\leq 10^9\n - 0 \\leq A_i \\leq 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i}, modulo (10^9 + 7).\n\n-----Sample Input-----\n3 5\n1 2 1\n\n-----Sample Output-----\n8\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nWe have a sequence A of N non-negative integers.\nCompute the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} over all sequences B of N non-negative integers whose sum is at most M, and print it modulo (10^9 + 7).\nHere, \\dbinom{B_i}{A_i}, the binomial coefficient, denotes the number of ways to choose A_i objects from B_i objects, and is 0 when B_i < A_i.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2000\n - 1 \\leq M \\leq 10^9\n - 0 \\leq A_i \\leq 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i}, modulo (10^9 + 7).\n\n-----Sample Input-----\n3 5\n1 2 1\n\n-----Sample Output-----\n8\n\nThere are four sequences B such that \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} is at least 1:\n - B = \\{1, 2, 1\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{1}{1} \\times \\dbinom{2}{2} \\times \\dbinom{1}{1} = 1;\n - B = \\{2, 2, 1\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{2}{1} \\times \\dbinom{2}{2} \\times \\dbinom{1}{1} = 2;\n - B = \\{1, 3, 1\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{1}{1} \\times \\dbinom{3}{2} \\times \\dbinom{1}{1} = 3;\n - B = \\{1, 2, 2\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{1}{1} \\times \\dbinom{2}{2} \\times \\dbinom{2}{1} = 2.\nThe sum of these is 1 + 2 + 3 + 2 = 8.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nThere are n psycho standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. A psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]  \u2192  [10 8 4]  \u2192  [10]. So, there are two steps.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven lengths $A,B and C$ return YES if they can form a right angled triangle, NO otherwise.\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nChef loves triangles. But the chef is poor at maths. Given three random lengths Chef wants to find if the three sides form a right-angled triangle or not. Can you help Chef in this endeavour?\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven an integer n, generate all structurally unique binary search trees that store values 1 ...\u00a0n.\n\nExample:\n\n\nInput: 3\nOutput:\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:",
    "15": "Python 3\n\"\"\"\nGiven an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ...\u00a0n.\n\nExample:\n\n\nInput: 3\nOutput:\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\nExplanation:\nThe above output corresponds to the 5 unique BST's shown below:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:",
    "16": "Python 3\n\"\"\"\nYou have n bunnies. You have bought a carrot to be shared between these bunnies. You want to treat all the bunnies equally, and thus want to cut the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. You want to make n - 1 cuts parallel to the base to cut the carrot into n pieces. Make sure that all n pieces have the same area.\n\n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers, n and h (2 \u2264 n \u2264 1000, 1 \u2264 h \u2264 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ... < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n70710.678118654752\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nIgor the analyst has adopted n little bunnies. As we all know, bunnies love carrots. Thus, Igor has bought a carrot to be shared between his bunnies. Igor wants to treat all the bunnies equally, and thus he wants to cut the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. Igor wants to make n - 1 cuts parallel to the base to cut the carrot into n pieces. He wants to make sure that all n pieces have the same area. Can you help Igor determine where to cut the carrot so that each piece have equal area?\n\n [Image] Illustration to the first example. \n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers, n and h (2 \u2264 n \u2264 1000, 1 \u2264 h \u2264 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ... < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n70710.678118654752\n\n\n\n-----Note-----\n\nDefinition of isosceles triangle: https://en.wikipedia.org/wiki/Isosceles_triangle.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nWrite a function search_substr(fullText, searchText) that it returns the number of times the search_text is found within the full_text. If the searchText is empty, return 0.\n\nExamples:\nInput:\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb')\nOutput:\n2\nExplanation:\nshould return 2 since bb shows up twice\n\nInput:\nsearch_substr('aaabbbcccc', 'bbb')\nOutput:\n1\n\nInput:\nsearch_substr( 'aaa', 'aa' )\nOutput:\n2\n\nInput:\nsearch_substr( 'aaa', '' )\nOutput:\n0\n\nInput:\nsearch_substr( 'aaa', 'aa', false )\nOutput:\n1\n\"\"\"\ndef search_substr(full_text, search_text, allow_overlap=True):",
    "19": "Python 3\n\"\"\"\nComplete the solution so that it returns the number of times the search_text is found within the full_text.\n\n```python\nsearch_substr( fullText, searchText, allowOverlap = true )\n```\n\nso that overlapping solutions are (not) counted. If the searchText is empty, it should return `0`. Usage examples:\n\n```python\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb') # should return 2 since bb shows up twice\nsearch_substr('aaabbbcccc', 'bbb') # should return 1\nsearch_substr( 'aaa', 'aa' ) # should return 2\nsearch_substr( 'aaa', '' ) # should return 0\nsearch_substr( 'aaa', 'aa', false ) # should return 1\n```\n\"\"\"\ndef search_substr(full_text, search_text, allow_overlap=True):"
}