{
    "0": "Python 3\n\"\"\"\nImplement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\nExamples:\n\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n\"\"\"\ndef string_hash(s):",
    "1": "Python 3\n\"\"\"\nImplement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\n**Note**: OR, AND, NOT, XOR are bitwise operations.\n\n___\n\n### Examples\n\n```\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n```\n\n___\n\nGive an example why this hashing algorithm is bad?\n\"\"\"\ndef string_hash(s):",
    "2": "Python 3\n\"\"\"\nGiven a string s, write a method that will return true if it is a valid single integer or floating number or false if it is not.\n\"\"\"\ndef isDigit(string):",
    "3": "Python 3\n\"\"\"\nGiven a string s, write a method (function) that will return true if its a valid single integer or floating number or false if its not.\n\nValid examples, should return true:\n\nshould return false:\n\"\"\"\ndef isDigit(string):",
    "4": "Python 3\n\"\"\"\nYou are given a array of numbers. we know distance between all pairs of neighboring indexes where distance[i] is sum of numbers between the index i and (i + 1) % n. you can count distance in both direction of indexes\nReturn the shortest distance between the given indexes. Also, you can traverse the array in both directions\n\nExample 1:\n\nInput: distance = [1,2,3,4], start = 0, destination = 1\nOutput: 1\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.\n\u00a0\nExample 2:\n\nInput: distance = [1,2,3,4], start = 0, destination = 2\nOutput: 3\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.\n\n\u00a0\nExample 3:\n\nInput: distance = [1,2,3,4], start = 0, destination = 3\nOutput: 4\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.\n\n\u00a0\nConstraints:\n\n1 <= n\u00a0<= 10^4\ndistance.length == n\n0 <= start, destination < n\n0 <= distance[i] <= 10^4\n\n\"\"\"\nclass Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:",
    "5": "Python 3\n\"\"\"\nA bus\u00a0has n stops numbered from 0 to n - 1 that form\u00a0a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number\u00a0i and (i + 1) % n.\nThe bus goes along both directions\u00a0i.e. clockwise and counterclockwise.\nReturn the shortest distance between the given\u00a0start\u00a0and destination\u00a0stops.\n\u00a0\nExample 1:\n\nInput: distance = [1,2,3,4], start = 0, destination = 1\nOutput: 1\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.\n\u00a0\nExample 2:\n\nInput: distance = [1,2,3,4], start = 0, destination = 2\nOutput: 3\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.\n\n\u00a0\nExample 3:\n\nInput: distance = [1,2,3,4], start = 0, destination = 3\nOutput: 4\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.\n\n\u00a0\nConstraints:\n\n1 <= n\u00a0<= 10^4\ndistance.length == n\n0 <= start, destination < n\n0 <= distance[i] <= 10^4\n\"\"\"\nclass Solution:\n    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:",
    "6": "Python 3\n\"\"\"\nKontti language is a finish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "7": "Python 3\n\"\"\"\nKontti language is a finnish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "8": "Python 3\n\"\"\"\nYou are given an undirected graph with n vertexes. Each its edge has unit length. Calculate the number of shortest paths between vertex 1 and vertex 2.\n\n\n-----Input-----\n\nThe first line contains a single integer k (1 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nYou should output a graph G with n vertexes (2 \u2264 n \u2264 1000). There must be exactly k shortest paths between vertex 1 and vertex 2 of the graph.\n\nThe first line must contain an integer n. Then adjacency matrix G with n rows and n columns must follow. Each element of the matrix must be 'N' or 'Y'. If G_{ij} is 'Y', then graph G has a edge connecting vertex i and vertex j. Consider the graph vertexes are numbered from 1 to n.\n\nThe graph must be undirected and simple: G_{ii} = 'N' and G_{ij} = G_{ji} must hold. And there must be at least one path between vertex 1 and vertex 2. It's guaranteed that the answer exists. If there multiple correct answers, you can output any of them. \n\n\n-----Examples-----\nInput\n2\nOutput\n4\nNNYY\nNNYY\nYYNN\nYYNN\nInput\n9\nOutput\n8\nNNYYYNNN\nNNNNNYYY\nYNNNNYYY\nYNNNNYYY\nYNNNNYYY\nNYYYYNNN\nNYYYYNNN\nNYYYYNNN\nInput\n1\nOutput\n2\nNY\nYN\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nFox Ciel wants to write a task for a programming contest. The task is: \"You are given a simple undirected graph with n vertexes. Each its edge has unit length. You should calculate the number of shortest paths between vertex 1 and vertex 2.\"\n\nSame with some writers, she wants to make an example with some certain output: for example, her birthday or the number of her boyfriend. Can you help her to make a test case with answer equal exactly to k?\n\n\n-----Input-----\n\nThe first line contains a single integer k (1 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nYou should output a graph G with n vertexes (2 \u2264 n \u2264 1000). There must be exactly k shortest paths between vertex 1 and vertex 2 of the graph.\n\nThe first line must contain an integer n. Then adjacency matrix G with n rows and n columns must follow. Each element of the matrix must be 'N' or 'Y'. If G_{ij} is 'Y', then graph G has a edge connecting vertex i and vertex j. Consider the graph vertexes are numbered from 1 to n.\n\nThe graph must be undirected and simple: G_{ii} = 'N' and G_{ij} = G_{ji} must hold. And there must be at least one path between vertex 1 and vertex 2. It's guaranteed that the answer exists. If there multiple correct answers, you can output any of them. \n\n\n-----Examples-----\nInput\n2\nOutput\n4\nNNYY\nNNYY\nYYNN\nYYNN\nInput\n9\nOutput\n8\nNNYYYNNN\nNNNNNYYY\nYNNNNYYY\nYNNNNYYY\nYNNNNYYY\nNYYYYNNN\nNYYYYNNN\nNYYYYNNN\nInput\n1\nOutput\n2\nNY\nYN\n\n\n-----Note-----\n\nIn first example, there are 2 shortest paths: 1-3-2 and 1-4-2.\n\nIn second example, there are 9 shortest paths: 1-3-6-2, 1-3-7-2, 1-3-8-2, 1-4-6-2, 1-4-7-2, 1-4-8-2, 1-5-6-2, 1-5-7-2, 1-5-8-2.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given n students with their name, parent's phonenumber and marks of a class.Find all the students who scored lower than average marks for the class. \n\n-----Input:-----\n- First line contains $T$ no. of test cases\n- for every test case, first line contains an integer $N$, no. of students of his class \n- Next $N$ lines contain $X$, $P$ , and $M$ separated by space\n\n-----Output:-----\nFor every test case, find details of the students who scored below average, then print $X, P, M$  separated by space on a new line as per the increasing order of their marks. In case there are multiple students with the same marks, print them as per the order of their occurrence in the input\n\n\n\n-----Sample Input:-----\n2  \n3\nRahul 1345964789 47\nRupendra 1457856987 58\nPriya 1478569820 45\n2\nTanuja 4310779415 97\nAkash 3689781245 43\n\n-----Sample Output:-----\nPriya 1478569820 45\nRahul 1345964789 47\nAkash 3689781245 43\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nMr. Das is a teacher teaching for several years in a school. He is not computer savvy. Due to lockdown, now he has to take classes online. Recently he took an online exam for students of different classes. Now, he will call parents of all the students who scored lower than average marks for the class. He has requested you to give the name $X$, parent's phone number $P$, and marks obtained $M$ to him.\n\n-----Input:-----\n- First line contains $T$ no. of test cases\n- for every test case, first line contains an integer $N$, no. of students of his class \n- Next $N$ lines contain $X$, $P$ , and $M$ separated by space\n\n-----Output:-----\nFor every test case, find details of the students who scored below average, then print $X, P, M$  separated by space on a new line as per the increasing order of their marks. In case there are multiple students with the same marks, print them as per the order of their occurrence in the input\n\n-----Constraints-----\n- $1 \\leq T \\leq 20$\n- X contains characters between a-z and A-Z  with a maximum length of 20\n- $1 \\leq N \\leq 100$\n- P is 10 digits\n- $0 \\leq M \\leq 100$\n\n-----Sample Input:-----\n2  \n3\nRahul 1345964789 47\nRupendra 1457856987 58\nPriya 1478569820 45\n2\nTanuja 4310779415 97\nAkash 3689781245 43\n\n-----Sample Output:-----\nPriya 1478569820 45\nRahul 1345964789 47\nAkash 3689781245 43\n\n-----EXPLANATION:-----\nIn #1, Priya and Rahul's number was lower than average.\nIn #2, Akash's number was lower than average\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given two numbers X and Y.\n\nIn one step, you can either double the value of X, or decrement X by 1.\n\nReturn the minimum number of steps required before the value of X equals Y.\n\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "13": "Python 3\n\"\"\"\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "14": "Python 3\n\"\"\"\nYou are given a point P(0,0). You have to find the distance between P and other two point A and B. Print that point which is closer to the point P.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer representing the number of collections of data that follow. Each collection contains 4 integers: the x-coordinate and then the \ny-coordinate of point A followed by the x-coordinate and then the  y-coordinate of point B.\n\n-----Output:-----\nAll letters are upper case.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nThe x-coordinate is in the range \u201320 .. 20. The y-coordinate is in the range \u201320 .. 20.\n\n\n-----Sample Input:-----\n4\n3 -2 -5 -3\n0 6 1 2\n-7 8 4 -1\n3 3 -2 2\n\n-----Sample Output:-----\nA IS CLOSER\nB IS CLOSER\nB IS CLOSER\nB IS CLOSER\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe Jones Trucking Company tracks the location of each of its trucks on a grid similar to an (x, y) plane. The home office is at the location (0, 0). Read the coordinates of truck A and the coordinates of truck B and determine which is closer to the office.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer representing the number of collections of data that follow. Each collection contains 4 integers: the x-coordinate and then the \ny-coordinate of truck A followed by the x-coordinate and then the  y-coordinate of truck B.\n\n-----Output:-----\nAll letters are upper case.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nThe x-coordinate is in the range \u201320 .. 20. The y-coordinate is in the range \u201320 .. 20.\n\n-----Discussion:-----\nThe distance between point #1 with coordinates (x1, y1) and point #2 with coordinates (x2, y2) is:\n\n-----Sample Input:-----\n4\n3 -2 -5 -3\n0 6 1 2\n-7 8 4 -1\n3 3 -2 2\n\n-----Sample Output:-----\nA IS CLOSER\nB IS CLOSER\nB IS CLOSER\nB IS CLOSER\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nThere are n towers in a row. The i-th tower is made of h_{i} identical blocks. \n\nBlock is called internal if it has all four neighbors adjacent to other block or to the floor. Otherwise, block is boundary. In one operation you can destroy all boundary blocks.\n\nYou will repeat the following operation till everything is destroyed.\n\nCount how many operations you will take to destroy all towers.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n space-separated integers h_1, h_2, ..., h_{n} (1 \u2264 h_{i} \u2264 10^9) \u2014 sizes of towers.\n\n\n-----Output-----\n\nPrint the number of operations needed to destroy all towers.\n\n\n-----Examples-----\nInput\n6\n2 1 4 6 2 2\n\nOutput\n3\n\nInput\n7\n3 3 3 1 3 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color.  [Image]  After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nLimak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of h_{i} identical blocks. For clarification see picture for the first sample.\n\nLimak will repeat the following operation till everything is destroyed.\n\nBlock is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.\n\nLimak is ready to start. You task is to count how many operations will it take him to destroy all towers.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n space-separated integers h_1, h_2, ..., h_{n} (1 \u2264 h_{i} \u2264 10^9) \u2014 sizes of towers.\n\n\n-----Output-----\n\nPrint the number of operations needed to destroy all towers.\n\n\n-----Examples-----\nInput\n6\n2 1 4 6 2 2\n\nOutput\n3\n\nInput\n7\n3 3 3 1 3 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color.  [Image]  After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given $n$ arrays that can have different sizes. You also have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally in the $i$-th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table.\n\nYou need to find the maximum sum of the integers in the $j$-th column for each $j$ from $1$ to $w$ independently.\n\nYou can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$)\u00a0\u2014 the number of arrays and the width of the table.\n\nEach of the next $n$ lines consists of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array, followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\le a_{ij} \\le 10^{9}$)\u00a0\u2014 the elements of the array.\n\nThe total length of the arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\nInput\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\nOutput\n7 8 \n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given $n$ arrays that can have different sizes. You also have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally in the $i$-th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table.\n\nYou need to find the maximum sum of the integers in the $j$-th column for each $j$ from $1$ to $w$ independently.\n\n [Image] Optimal placements for columns $1$, $2$ and $3$ are shown on the pictures from left to right. \n\nNote that you can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$)\u00a0\u2014 the number of arrays and the width of the table.\n\nEach of the next $n$ lines consists of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array, followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\le a_{ij} \\le 10^{9}$)\u00a0\u2014 the elements of the array.\n\nThe total length of the arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\nInput\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\nOutput\n7 8 \n\n\n\n-----Note-----\n\nIllustration for the first example is in the statement.\n\"\"\"\ndef code():"
}