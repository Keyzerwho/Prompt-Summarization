{
    "id": "cmpl-4BD5KUHjGQKX9SKZfE4L2M8mC5dX0",
    "object": "text_completion",
    "created": 1638577254,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    a = sum(ord(c) for c in s)\n    b = sum(ord(c) - ord(s[i-1]) for i, c in enumerate(s) if i > 0)\n    c = (a | b) & ((1 << 2) - 1)\n    d = c ^ (32 * (s.count(' ') + 1))\n    return d\n\nif __name__ == '__main__':\n    print(string_hash('a'))\n    print(string_hash('ca'))",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = sum(ord(c) for c in s)\n    b = sum(ord(s[i]) - ord(s[i-1]) for i in range(1, len(s)))\n    c = (a | b) & ((~a) << 2)\n    d = c ^ (32 * (s.count(' ') + 1))\n    return d\n\nif __name__ == '__main__':\n    print(string_hash('a'))\n    print(string_hash('ca'))",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\nprint(isDigit(\"-1.1\"))\nprint(isDigit(\"-1\"))\nprint(isDigit(\"abc\"))\nprint(isDigit(\"1.0.1\"))\nprint(isDigit(\"1e1\"))",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\nprint(isDigit(\"1234\"))\nprint(isDigit(\"-1234\"))\nprint(isDigit(\"+1234\"))\nprint(isDigit(\"12.34\"))\nprint(isDigit(\"-12.34\"))\nprint(isDigit(\"+12.34\"))\nprint(isDigit(\"0.0\"))\nprint(isDigit(\"-0.0\"))\nprint(isDigit(\"+0.0\"))\nprint(isDigit(\"0\"))\nprint(isDigit(\"-0\"))\nprint(isDigit(\"+0\"))\nprint(isDigit(\"123.45e+6\"))\nprint(isDigit(\"-123.45e+6\"))\nprint(isDigit(\"+123.45e+6\"))\nprint(isDigit(\"123.45E-6\"))\nprint(isDigit(\"-123.45E-6\"))\nprint(isDigit(\"+123.45E-6\"))\nprint(isDigit(\"123.45E+6\"))\nprint(isDigit(\"-123.45E+6\"))\nprint(isDigit(\"+123.45E+6\"))\nprint(isDigit(\"123.45E6\"))\nprint(isDigit(\"-123.45E6\"))\nprint(isDigit(\"+123.45E6\"))\nprint(isDigit(\"123.45e-6\"))\nprint(isDigit(\"-123.45e-6\"))\nprint(isDigit(\"+123.45e-6\"))\nprint(isDigit(\"123.45e6\"))\nprint(isDigit(\"-123.45e6\"))\nprint(isDigit(\"+123.45e6\"))\nprint(isDigit(\"123.45\"))\nprint(isDigit(\"-123.45\"))\nprint(isDigit(\"+123.45\"))\nprint(isDigit(\"12345e-2\"))\nprint(isDigit(\"-12345e-2\"))\nprint(isDigit(\"+12345e-2\"))\nprint(isDigit(\"12345E+2\"))\nprint(isDigit(\"-12345E+2\"))\nprint(isDigit(\"+12345E+2\"))\nprint(isDigit(\"12345E2\"))\nprint(isDigit(\"-12345E2\"))\nprint(isDigit(\"+12345E2\"))\nprint(isDigit(\"12345e+2\"))\nprint(isDigit(\"-12345e+2\"))\nprint(isDigit(\"+12345e+2\"))\nprint(isDigit(\"12345e2\"))\nprint(isDigit(\"-12345e2\"))\nprint(isDigit(\"+12345e2\"))\nprint(isDigit(\"12345\"))\nprint(isDigit(\"-12345\"))\nprint(isDigit(\"+12345\"))\nprint(isDigit(\"0.01\"))\nprint(isDigit(\"-0.01\"))\nprint(isDigit(\"+0.01\"))\nprint(isDigit(\"0.1\"))\nprint(isDigit(\"-0.1\"))\nprint(isDigit(\"+0.1\"))\nprint(isDigit(\"0.10\"))\nprint(isDigit(\"-0.10\"))\nprint(isDigit(\"+0.10\"))\nprint(isDigit(\"0.10e10\"))\nprint(isDigit(\"-0.10e10\"))\nprint(isDigit(\"+0.10e10\"))\nprint(isDigit(\"0.10e+10\"))\nprint(isDigit(\"-0.10e+10\"))\nprint(isDigit(\"+0.10e+10\"))\nprint(isDigit(\"0.10e-10\"))\nprint(isDigit(\"-0.10e-10\"))\nprint(isDigit(\"+0.10e-10\"))\nprint(isDigit(\"0.10E10\"))\nprint(isDigit(\"-0.10E10\"))\nprint(isDigit(\"+0.10E10\"))\nprint(isDigit(\"0.10E+10\"))\nprint(isDigit(\"-0.10E+10\"))\nprint(isDigit(\"+0.10E+10\"))\nprint(isDigit(\"0.10E-10\"))\nprint(isDigit(\"-0.10",
            "index": 3,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n        if start>destination:\n            start,destination=destination,start\n        return min(sum(distance[start:destination]),sum(distance[:start])+sum(distance[destination:]))",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if start>destination:\n            start,destination=destination,start\n        clockwise=sum(distance[start:destination])\n        counterclockwise=sum(distance)-clockwise\n        return min(clockwise,counterclockwise)",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return ' '.join(map(kontti_word, s.split()))\n\ndef kontti_word(w):\n    if 'aeiouy' in w:\n        return w[-1] + w[:-1] + 'kontti'\n    else:\n        return w",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return ' '.join(map(kontti_word, s.split()))\n\ndef kontti_word(w):\n    if not w:\n        return w\n    if w[0] in 'aeiouy':\n        return w + '-kontti'\n    return w",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    k = int(input())\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    print(matrix)\n    print(k)\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    k = int(input())\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                matrix[j][i] = 'Y'\n    for i in range(n):\n        matrix[i][i] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                matrix[j][i] = 'Y'\n    for i in range(n):\n        matrix[i][i] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n",
            "index": 9,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        marks = []\n        for i in range(N):\n            X, P, M = input().split()\n            marks.append(int(M))\n        avg = sum(marks)/N\n        for i in range(N):\n            if int(marks[i]) < avg:\n                print(X, P, marks[i])\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        data = {}\n        for _ in range(N):\n            X, P, M = input().split()\n            M = int(M)\n            if M in data:\n                data[M].append((X, P, M))\n            else:\n                data[M] = [(X, P, M)]\n        avg = sum(data.keys()) / N\n        for key in sorted(data.keys()):\n            if key < avg:\n                for X, P, M in data[key]:\n                    print(X, P, M)\n\nif __name__ == '__main__':\n    code()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        res = 0\n        while Y > X:\n            res += 1\n            if Y%2:\n                Y += 1\n            else:\n                Y //= 2\n        return res + X-Y",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if X>=Y:\n            return X-Y\n        else:\n            if Y%2==0:\n                return 1+self.brokenCalc(X,Y//2)\n            else:\n                return 1+self.brokenCalc(X,Y+1)",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    num_of_points = int(input())\n    for i in range(num_of_points):\n        point_A = input()\n        point_B = input()\n        x_A, y_A, x_B, y_B = point_A.split() + point_B.split()\n        x_A, y_A, x_B, y_B = int(x_A), int(y_A), int(x_B), int(y_B)\n        distance_A = ((x_A - 0)**2 + (y_A - 0)**2)**0.5\n        distance_B = ((x_B - 0)**2 + (y_B - 0)**2)**0.5\n        if distance_A < distance_B:\n            print(\"A IS CLOSER\")\n        elif distance_A > distance_B:\n            print(\"B IS CLOSER\")\n        else:\n            print(\"EQUIDISTANT\")\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    num_of_tests = int(input())\n    for i in range(num_of_tests):\n        test = input().split()\n        x1 = int(test[0])\n        y1 = int(test[1])\n        x2 = int(test[2])\n        y2 = int(test[3])\n        if abs(x1) + abs(y1) < abs(x2) + abs(y2):\n            print(\"A IS CLOSER\")\n        elif abs(x1) + abs(y1) > abs(x2) + abs(y2):\n            print(\"B IS CLOSER\")\n        else:\n            print(\"EQUAL\")\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    h = list(map(int, input().split()))\n    count = 0\n    while len(h) > 1:\n        h = [i for i in h if i != 1]\n        if len(h) == 0:\n            break\n        if len(h) == 1:\n            count += 1\n            break\n        if h[0] == h[1]:\n            h.pop(0)\n            h.pop(0)\n            count += 1\n        else:\n            h.pop(0)\n            count += 1\n    print(count)\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    h = list(map(int, input().split()))\n    count = 0\n    while len(h) > 1:\n        h = [x for x in h if x != min(h)]\n        count += 1\n    print(count)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, w = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in input().split()])\n    for i in range(n):\n        arr[i] = arr[i][1:]\n    arr = sorted(arr, key=lambda x: x[0])\n    for i in range(n):\n        arr[i] = arr[i][1:]\n    for i in range(n):\n        arr[i] = [0]*(w-arr[i][0]) + arr[i]\n    for i in range(n):\n        arr[i] = arr[i] + [0]*(w-len(arr[i]))\n    for i in range(w):\n        for j in range(n):\n            for k in range(j+1, n):\n                if arr[j][i] == 0 or arr[k][i] == 0:\n                    continue\n                if arr[j][i] > arr[k][i]:\n                    arr[k][i] = 0\n                else:\n                    arr[j][i] = 0\n    for i in range(w):\n        print(sum(arr[j][i] for j in range(n)))\n\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, w = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    a.sort(key=lambda x: x[0])\n    for i in range(n):\n        a[i] = a[i][1:]\n    dp = [[0 for i in range(w)] for j in range(n)]\n    for i in range(n):\n        for j in range(a[i][0]):\n            dp[i][j] = a[i][j]\n    for i in range(n):\n        for j in range(a[i][0], w):\n            dp[i][j] = max(dp[i][j-a[i][0]]+a[i][j], dp[i][j-1])\n    for i in range(w):\n        print(dp[n-1][i], end=\" \")\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}