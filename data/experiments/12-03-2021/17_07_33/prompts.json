{
    "0": "Python 3\n\"\"\"\nYou are given a natural number N. check whether the given number is divisible by the sum of its digits or not. If the given number is divisible then print \"Yes\" else \"No\".\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n16\n27\n\n-----Sample Output:-----\nNo\nYes\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nChef has a natural number N. Cheffina challenges chef to check whether the given number is divisible by the sum of its digits or not. If the given number is divisible then print \"Yes\" else \"No\".\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n16\n27\n\n-----Sample Output:-----\nNo\nYes\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given two strings representing two complex numbers. Write program to return a string representing their multiplication. \n\n\nExample 1:\n\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\n\n\nExample 2:\n\nInput: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\n\n\"\"\"\nclass Solution:\n    def complexNumberMultiply(self, a: str, b: str) -> str:",
    "3": "Python 3\n\"\"\"\nGiven two strings representing two complex numbers.\n\n\nYou need to return a string representing their multiplication. Note i2 = -1 according to the definition.\n\n\nExample 1:\n\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n\n\n\nExample 2:\n\nInput: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n\n\n\nNote:\n\nThe input strings will not have extra blank.\nThe input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.\n\"\"\"\nclass Solution:\n    def complexNumberMultiply(self, a: str, b: str) -> str:",
    "4": "Python 3\n\"\"\"\nSkier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to $1$ meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is $5$ seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes $1$ second.\n\nFind the skier's time to roll all the path.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed $10^5$ characters.\n\nThe sum of the lengths of $t$ given lines over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the desired path time in seconds.\n\n\n-----Example-----\nInput\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput\n15\n6\n16\n12\n25\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nSkier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to $1$ meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is $5$ seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes $1$ second.\n\nFind the skier's time to roll all the path.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed $10^5$ characters.\n\nThe sum of the lengths of $t$ given lines over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the desired path time in seconds.\n\n\n-----Example-----\nInput\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput\n15\n6\n16\n12\n25\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven an array, check whether every value in the array is an array. This should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\nInput:\n[[1],[2]]\nOutput:\ntrue\n\nInput:\n['1','2']\nOutput:\nfalse\n\nInput:\n[{1:1},{2:2}]\nOutput:\nfalse\n\"\"\"\ndef arr_check(arr):",
    "7": "Python 3\n\"\"\"\nIs every value in the array an array?\n\nThis should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\n\n```python\n[[1],[2]] => true\n['1','2'] => false\n[{1:1},{2:2}] => false\n```\n\"\"\"\ndef arr_check(arr):",
    "8": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers.\n\nYou want to make all elements of $a$ equal to zero by doing the following operation exactly three times:  Select a segment, for each number in this segment we can add a multiple of $len$ to it, where $len$ is the length of this segment. \n\nIt is always possible to make all elements of $a$ equal to zero.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 100\\,000$): the number of elements of the array.\n\nThe second line contains $n$ elements of an array $a$ separated by spaces: $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nThe output should contain six lines representing three operations.\n\nFor each operation, print two lines:\n\n  The first line contains two integers $l$, $r$ ($1 \\le l \\le r \\le n$): the bounds of the selected segment.\n\n  The second line contains $r-l+1$ integers $b_l, b_{l+1}, \\dots, b_r$ ($-10^{18} \\le b_i \\le 10^{18}$): the numbers to add to $a_l, a_{l+1}, \\ldots, a_r$, respectively; $b_i$ should be divisible by $r - l + 1$. \n\n\n-----Example-----\nInput\n4\n1 3 2 4\n\nOutput\n1 1 \n-1\n3 4\n4 2\n2 4\n-3 -6 -6\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers.\n\nYou want to make all elements of $a$ equal to zero by doing the following operation exactly three times:  Select a segment, for each number in this segment we can add a multiple of $len$ to it, where $len$ is the length of this segment (added integers can be different). \n\nIt can be proven that it is always possible to make all elements of $a$ equal to zero.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 100\\,000$): the number of elements of the array.\n\nThe second line contains $n$ elements of an array $a$ separated by spaces: $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nThe output should contain six lines representing three operations.\n\nFor each operation, print two lines:\n\n  The first line contains two integers $l$, $r$ ($1 \\le l \\le r \\le n$): the bounds of the selected segment.\n\n  The second line contains $r-l+1$ integers $b_l, b_{l+1}, \\dots, b_r$ ($-10^{18} \\le b_i \\le 10^{18}$): the numbers to add to $a_l, a_{l+1}, \\ldots, a_r$, respectively; $b_i$ should be divisible by $r - l + 1$. \n\n\n-----Example-----\nInput\n4\n1 3 2 4\n\nOutput\n1 1 \n-1\n3 4\n4 2\n2 4\n-3 -6 -6\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given an integer num, find the closest two integers in absolute difference whose product equals\u00a0num + 1\u00a0or num + 2.\n\n\u00a0\nExample 1:\nInput: num = 8\nOutput: [3,3]\n\n\nExample 2:\nInput: num = 123\nOutput: [5,25]\n\nExample 3:\nInput: num = 999\nOutput: [40,25]\n\n\"\"\"\nclass Solution:\n    def closestDivisors(self, num: int) -> List[int]:",
    "11": "Python 3\n\"\"\"\nGiven an integer num, find the closest two integers in absolute difference whose product equals\u00a0num + 1\u00a0or num + 2.\nReturn the two integers in any order.\n\u00a0\nExample 1:\nInput: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.\n\nExample 2:\nInput: num = 123\nOutput: [5,25]\n\nExample 3:\nInput: num = 999\nOutput: [40,25]\n\n\u00a0\nConstraints:\n\n1 <= num <= 10^9\n\"\"\"\nclass Solution:\n    def closestDivisors(self, num: int) -> List[int]:",
    "12": "Python 3\n\"\"\"\nThe magic sum of 3s is calculated on an array by summing up odd numbers which include the digit 3. Write a function magic_sum which accepts an array of integers and returns the sum. If the sum cannot be calculated, 0 should be returned.\n\nExamples:\nInput:\n[3, 12, 5, 8, 30, 13]\nOutput:\n16\n\"\"\"\ndef magic_sum(arr):",
    "13": "Python 3\n\"\"\"\nThe magic sum of 3s is calculated on an array by summing up odd numbers which include the digit `3`. Write a function `magic_sum` which accepts an array of integers and returns the sum.\n\n*Example:* `[3, 12, 5, 8, 30, 13]` results in `16` (`3` + `13`)\n\nIf the sum cannot be calculated, `0` should be returned.\n\"\"\"\ndef magic_sum(arr):",
    "14": "Python 3\n\"\"\"\nGiven a board of `NxN`, distributed with tiles labeled `0` to `N\u00b2 - 1`(inclusive):\n\nA solved grid will have the tiles in order of label, left to right, top to bottom.\n\nReturn `true` if the board state is currently solved, and `false` otherwise.\n\nInput will always be a square 2d array.\n\n\nFor example, a 2x2 solved grid:\n```\n[ [0, 1],\n  [2, 3] ]\n```\n\nA 2x2 unsolved grid:\n```\n[ [2, 1],\n  [0, 3] ]\n```\n\"\"\"\ndef is_solved(board):",
    "15": "Python 3\n\"\"\"\nGiven a board of `NxN`, distributed with tiles labeled `0` to `N\u00b2 - 1`(inclusive):\n\nA solved grid will have the tiles in order of label, left to right, top to bottom.\n\nReturn `true` if the board state is currently solved, and `false` if the board state is unsolved.\n\nInput will always be a square 2d array.\n\n\nFor example, a 2x2 solved grid:\n```\n[ [0, 1],\n  [2, 3] ]\n```\n\nA 2x2 unsolved grid:\n```\n[ [2, 1],\n  [0, 3] ]\n```\n\"\"\"\ndef is_solved(board):",
    "16": "Python 3\n\"\"\"\nYou are given $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Determine how many submissions received their verdicts after a delay of more than $5$ minutes.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of submissions for which the judging was delayed by more than 5 minutes.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $1 \\le S_i \\le J_i \\le 300$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n\n-----Example Output-----\n2\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou have been recently hired as a developer in CodeChef. Your first mission is to implement a feature that will determine the number of submissions that were judged late in a contest.\nThere are $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Please determine how many submissions received their verdicts after a delay of more than $5$ minutes.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of submissions for which the judging was delayed by more than 5 minutes.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $1 \\le S_i \\le J_i \\le 300$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: The delays of the respective submissions are $2$ minutes, $0$ minutes, $6$ minutes, $10$ minutes and $5$ minutes. Only submissions $3$ and $4$ are delayed by more than $5$ minutes, hence the answer is $2$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nLet x, y, and z, be non-negative integers. d_1 reprsents the absolute difference between x and y, and d_2 represents\nthe absolute difference between y and z. Your goal is to figure out if d_1 and d_2 can become equivlanet after all moves have been expended.\n\n\nIn each move, you can increment x, y, or z by 1.\n\nYou will be given n, the total number of moves you're allowed, and k, the number of moves that had already\nbeen used. The number of moves you can use will be n - k\n\nYour goal is to find out if the d_1 and d_2 can become equal after all moves have been expended. Meaning d_1\nand d_2 are equal after n - k moves. If it is possible to do so, then return yes, otherwise return no.\n\n-----Input-----\n\nThe first line of the input contains a single integer corresponding to number of test cases t (1 \u2264 t \u2264 10^5).\n\nEach of the next t lines will contain four space-separated integers \nn, k, d_1, d_2 (1 \u2264 n \u2264 10^12;\u00a00 \u2264 k \u2264 n;\u00a00 \u2264 d_1, d_2 \u2264 k) \u2014 data for the current test case.\n\n\n-----Output-----\n\nFor each test case, output a single line containing either \"yes\" if it is possible for d_1 and d_2 to be equal after n - k moves,\nor \"no\" otherwise without quotes.\n\n\n-----Examples-----\nInput\n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n\nOutput\nyes\nyes\nyes\nno\nno\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThere are n games in a football tournament. Three teams are participating in it. Currently k games had already been played. \n\nYou are an avid football fan, but recently you missed the whole k games. Fortunately, you remember a guess of your friend for these k games. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be d_1 and that of between second and third team will be d_2.\n\nYou don't want any of team win the tournament, that is each team should have the same number of wins after n games. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament?\n\nNote that outcome of a match can not be a draw, it has to be either win or loss.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer corresponding to number of test cases t (1 \u2264 t \u2264 10^5).\n\nEach of the next t lines will contain four space-separated integers n, k, d_1, d_2 (1 \u2264 n \u2264 10^12;\u00a00 \u2264 k \u2264 n;\u00a00 \u2264 d_1, d_2 \u2264 k) \u2014 data for the current test case.\n\n\n-----Output-----\n\nFor each test case, output a single line containing either \"yes\" if it is possible to have no winner of tournament, or \"no\" otherwise (without quotes).\n\n\n-----Examples-----\nInput\n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n\nOutput\nyes\nyes\nyes\nno\nno\n\n\n\n-----Note-----\n\nSample 1. There has not been any match up to now (k = 0, d_1 = 0, d_2 = 0). If there will be three matches (1-2, 2-3, 3-1) and each team wins once, then at the end each team will have 1 win.\n\nSample 2. You missed all the games (k = 3). As d_1 = 0 and d_2 = 0, and there is a way to play three games with no winner of tournament (described in the previous sample), the answer is \"yes\".\n\nSample 3. You missed 4 matches, and d_1 = 1, d_2 = 0. These four matches can be: 1-2 (win 2), 1-3 (win 3), 1-2 (win 1), 1-3 (win 1). Currently the first team has 2 wins, the second team has 1 win, the third team has 1 win. Two remaining matches can be: 1-2 (win 2), 1-3 (win 3). In the end all the teams have equal number of wins (2 wins).\n\"\"\"\ndef code():"
}