{
    "0": "Python 3\n\"\"\"\n# Task\n\nGiven a list of pins knocked down per roll for one player, output the player's total score.\n\n# Rules\n\n## General rules\nRules of bowling in a nutshell:\n\n* A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls.\n\n* The total score is the sum of your scores for the 10 frames\n\n* If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down\n\n* If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball\n\n* If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls\n\n## Rules for 10th frame\nAs the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that:\n\n* if the last frame is a spare, player rolls 1 bonus ball.\n* if the last frame is a strike, player rolls 2 bonus balls.\n\nThese bonus balls on 10th frame are only counted as a bonus to the respective spare or strike.\n\n# More information\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring\n\n# Input\nYou may assume that the input is always valid. This means:\n\n* input list length is correct\n* number of pins knocked out per roll is valid\n\"\"\"\ndef bowling_score(rolls):",
    "1": "Python 3\n\"\"\"\n# Task\n\nYour task is to write a function for calculating the score of a 10 pin bowling game. The input for the function is a list of pins knocked down per roll for one player. Output is the player's total score.\n\n# Rules\n\n## General rules\nRules of bowling in a nutshell:\n\n* A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls.\n\n* The total score is the sum of your scores for the 10 frames\n\n* If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down\n\n* If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball\n\n* If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls\n\n## Rules for 10th frame\nAs the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that:\n\n* if the last frame is a spare, player rolls 1 bonus ball.\n* if the last frame is a strike, player rolls 2 bonus balls.\n\nThese bonus balls on 10th frame are only counted as a bonus to the respective spare or strike.\n\n# More information\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring\n\n# Input\nYou may assume that the input is always valid. This means:\n\n* input list length is correct\n* number of pins knocked out per roll is valid\n\"\"\"\ndef bowling_score(rolls):",
    "2": "Python 3\n\"\"\"\nGiven a two dimensional metrix of Latin letters, determine if the word \"spoon\" (case insensitive) appears in the matrix, in the rows, coloums or diagonals.\n\n-----Input-----\nThe first line of input contains a positive integer T, the number of test cases. After that T test cases follow. The first line of each test case contains two space separated integers R and C, the number of rows and the number of columns of the matrix M respectively. Thereafter R lines follow each containing C characters, the actual digital map itself.\n\n-----Output-----\nFor each test case print one line. If a \"Spoon\" is found in the matrix, output \"There is a spoon!\" else output \"There is indeed no spoon!\" (Quotes only for clarity).\n\n-----Constraints-----\n\n1 \u2264 T \u2264 100\n\n1 \u2264 R, C \u2264 100\n\n-----Sample Input-----\n3\n3 6\nabDefb\nbSpoon\nNIKHil\n6 6\naaaaaa\nssssss\nxuisdP\noooooo\nioowoo\nbdylan\n6 5\nbdfhj\ncacac\nopqrs\nddddd\nindia\nyucky\n\n-----Sample Output-----\nThere is a spoon!\nThere is a spoon!\nThere is indeed no spoon!\n\n-----Explanation-----\nIn the first test case, \"Spoon\" occurs in the second row. In the second test case, \"spOon\" occurs in the last column.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nChef recently saw the movie Matrix. He loved the movie overall but he didn't agree with some things in it. Particularly he didn't agree with the bald boy when he declared - There is no spoon. Being a chef, he understands the importance of the spoon and realizes that the universe can't survive without it. Furthermore, he is sure there is a spoon; he saw it in his kitchen this morning. So he has set out to prove the bald boy is wrong and find a spoon in the matrix. He has even obtained a digital map already. Can you help him?\n\nFormally you're given a matrix of lowercase and uppercase Latin letters. Your job is to find out if the word \"Spoon\" occurs somewhere in the matrix or not. A word is said to be occurred in the matrix if it is presented in some row from left to right or in some column from top to bottom. Note that match performed has to be case insensitive. \n\n-----Input-----\nThe first line of input contains a positive integer T, the number of test cases. After that T test cases follow. The first line of each test case contains two space separated integers R and C, the number of rows and the number of columns of the matrix M respectively. Thereafter R lines follow each containing C characters, the actual digital map itself.\n\n-----Output-----\nFor each test case print one line. If a \"Spoon\" is found in Matrix, output \"There is a spoon!\" else output \"There is indeed no spoon!\" (Quotes only for clarity).\n\n-----Constraints-----\n\n1 \u2264 T \u2264 100\n\n1 \u2264 R, C \u2264 100\n\n-----Sample Input-----\n3\n3 6\nabDefb\nbSpoon\nNIKHil\n6 6\naaaaaa\nssssss\nxuisdP\noooooo\nioowoo\nbdylan\n6 5\nbdfhj\ncacac\nopqrs\nddddd\nindia\nyucky\n\n-----Sample Output-----\nThere is a spoon!\nThere is a spoon!\nThere is indeed no spoon!\n\n-----Explanation-----\nIn the first test case, \"Spoon\" occurs in the second row. In the second test case, \"spOon\" occurs in the last column.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nTwo integers A and B are the inputs. Write a program to find GCD and LCM of A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nTwo integers A and B are the inputs. Write a program to find GCD and LCM of A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou want to build your own high-speed Internet exchange point. It should consist of n nodes connected with minimum possible number of wires into one network. Exactly k of the nodes should be exit-nodes, that means that each of them should be connected to exactly one other node of the network, while all other nodes should be connected to at least two nodes in order to increase the system stability.\n\nYou want to make the system as fast as possible, so minimize the maximum distance between two exit-nodes. The distance between two nodes is the number of wires a package needs to go through between those two nodes.\n\nFind such a way to build the network that the distance between the two most distant exit-nodes is as small as possible.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (3 \u2264 n \u2264 2\u00b710^5, 2 \u2264 k \u2264 n - 1)\u00a0\u2014 the total number of nodes and the number of exit-nodes.\n\nNote that it is always possible to build at least one network with n nodes and k exit-nodes within the given constraints.\n\n\n-----Output-----\n\nIn the first line print the minimum possible distance between the two most distant exit-nodes. In each of the next n - 1 lines print two integers: the ids of the nodes connected by a wire. The description of each wire should be printed exactly once. You can print wires and wires' ends in arbitrary order. The nodes should be numbered from 1 to n. Exit-nodes can have any ids.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n2\n1 2\n2 3\n\nInput\n5 3\n\nOutput\n3\n1 2\n2 3\n3 4\n3 5\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nArkady needs your help again! This time he decided to build his own high-speed Internet exchange point. It should consist of n nodes connected with minimum possible number of wires into one network (a wire directly connects two nodes). Exactly k of the nodes should be exit-nodes, that means that each of them should be connected to exactly one other node of the network, while all other nodes should be connected to at least two nodes in order to increase the system stability.\n\nArkady wants to make the system as fast as possible, so he wants to minimize the maximum distance between two exit-nodes. The distance between two nodes is the number of wires a package needs to go through between those two nodes.\n\nHelp Arkady to find such a way to build the network that the distance between the two most distant exit-nodes is as small as possible.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (3 \u2264 n \u2264 2\u00b710^5, 2 \u2264 k \u2264 n - 1)\u00a0\u2014 the total number of nodes and the number of exit-nodes.\n\nNote that it is always possible to build at least one network with n nodes and k exit-nodes within the given constraints.\n\n\n-----Output-----\n\nIn the first line print the minimum possible distance between the two most distant exit-nodes. In each of the next n - 1 lines print two integers: the ids of the nodes connected by a wire. The description of each wire should be printed exactly once. You can print wires and wires' ends in arbitrary order. The nodes should be numbered from 1 to n. Exit-nodes can have any ids.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n2\n1 2\n2 3\n\nInput\n5 3\n\nOutput\n3\n1 2\n2 3\n3 4\n3 5\n\n\n\n-----Note-----\n\nIn the first example the only network is shown on the left picture.\n\nIn the second example one of optimal networks is shown on the right picture.\n\nExit-nodes are highlighted. [Image]\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nyou are given a list. each element represent a 2D point.\nReturn the maximum number of points that are inside a circle of radius\u00a0r.\n\nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: if center is at (0,0) and radius = 2 contain all 2D points.\n\nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: if center is at (0,4) and radius = 5 contain all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 100\npoints[i].length == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000\n\n\"\"\"\nclass Solution:\n    def numPoints(self, points: List[List[int]], r: int) -> int:",
    "9": "Python 3\n\"\"\"\nYou have a very large square wall and a circular dartboard placed on the wall.\u00a0You have been challenged to throw darts into the board blindfolded.\u00a0Darts thrown at the wall are represented as an array of\u00a0points on a 2D plane.\u00a0\nReturn\u00a0the maximum number of points that are within or\u00a0lie\u00a0on\u00a0any circular dartboard of radius\u00a0r.\n\u00a0\nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 100\npoints[i].length == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000\n\"\"\"\nclass Solution:\n    def numPoints(self, points: List[List[int]], r: int) -> int:",
    "10": "Python 3\n\"\"\"\nFor two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nWrite a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\nIt can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points.\n\"\"\"\ndef getMatrixProduct(a, b):",
    "11": "Python 3\n\"\"\"\nIn mathematics, a matrix (plural matrices) is a rectangular array of numbers. Matrices have many applications in programming, from performing transformations in 2D space to machine learning. \n\nOne of the most useful operations to perform on matrices is matrix multiplication, which takes a pair of matrices and produces another matrix \u2013 known as the dot product. Multiplying matrices is very different to multiplying real numbers, and follows its own set of rules. \n\nUnlike multiplying real numbers, multiplying matrices is non-commutative: in other words, multiplying matrix ```a``` by matrix ```b``` will not give the same result as multiplying matrix ```b``` by matrix ```a```.\n\nAdditionally, not all pairs of matrix can be multiplied. For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nThere are many introductions to matrix multiplication online, including at Khan Academy, and in the classic MIT lecture series by Herbert Gross. \n\nTo complete this kata, write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\nIt can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points.\n\"\"\"\ndef getMatrixProduct(a, b):",
    "12": "Python 3\n\"\"\"\nYou are given N string. You have to identify the duplicates and print the length of the new string as a combination of unique characters only.\n\n-----Input-----\nFirst line contains T, number of testcases. Each testcase consists of a single string in one line. Each character of the string will be a small alphabet(ie. 'a' to 'z').\n\n-----Output-----\nFor each testcase, print the required answer in one line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- Subtask 1 (20 points):1 \u2264 N \u2264 10\n- Subtask 2 (80 points):1 \u2264 N \u2264 105\n\n-----Example-----\nInput:\n2\nabc\naba\n\nOutput:\n3\n2\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou have initially a string of N characters, denoted by A1,A2...AN. You have to print the size of the largest subsequence of string A such that all the characters in that subsequence are distinct ie. no two characters in that subsequence should be same.\n\nA subsequence of string A is a sequence that can be derived from A by deleting some elements  and without changing the order of the remaining elements.\n\n-----Input-----\nFirst line contains T, number of testcases. Each testcase consists of a single string in one line. Each character of the string will be a small alphabet(ie. 'a' to 'z').\n\n-----Output-----\nFor each testcase, print the required answer in one line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- Subtask 1 (20 points):1 \u2264 N \u2264 10\n- Subtask 2 (80 points):1 \u2264 N \u2264 105\n\n-----Example-----\nInput:\n2\nabc\naba\n\nOutput:\n3\n2\n\n-----Explanation-----\nFor first testcase, the whole string is a subsequence which has all distinct characters.\n\nIn second testcase, the we can delete last or first 'a' to get the required subsequence.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.\n\nLet's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.\n\nFor each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in the array. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print $n$ integers, where the $i$-th integer is equal to the $i$-amazing number of the array.\n\n\n-----Example-----\nInput\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\nOutput\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.\n\nLet's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.\n\nFor each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in the array. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print $n$ integers, where the $i$-th integer is equal to the $i$-amazing number of the array.\n\n\n-----Example-----\nInput\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\nOutput\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nyou are given an array.\nReturn the minimum number of elements in array that must move in order for all numbers in array to be in non-decreasing order.\nNotice that when a group of indexes are selected they can reorder in any possible way between themselves and the non selected indexes\u00a0remain the same.\n\u00a0\nExample 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 we have 4 vs 1 so we have to move this element.\nOn index 4 we have 1 vs 3 so we have to move this element.\nOn index 5 we have 3 vs 4 so we have to move this element.\n\nExample 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\n\nExample 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n\"\"\"\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:",
    "17": "Python 3\n\"\"\"\nStudents are asked to stand in non-decreasing order of heights for an annual photo.\nReturn the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.\nNotice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students\u00a0remain on their seats.\n\u00a0\nExample 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 (0-based) we have 4 vs 1 so we have to move this student.\nOn index 4 (0-based) we have 1 vs 3 so we have to move this student.\nOn index 5 (0-based) we have 3 vs 4 so we have to move this student.\n\nExample 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\n\nExample 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n\"\"\"\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:",
    "18": "Python 3\n\"\"\"\nConsider a sequence [a_1, a_2, ... , a_{n}]. \n\nLet's define its prefix product sequence as $[ a_{1} \\operatorname{mod} n,(a_{1} a_{2}) \\operatorname{mod} n, \\cdots,(a_{1} a_{2} \\cdots a_{n}) \\operatorname{mod} n ]$.\n\nNow given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1].\n\n\n-----Input-----\n\nThe only input line contains an integer n (1 \u2264 n \u2264 10^5).\n\n\n-----Output-----\n\nIn the first output line, print \"YES\" if such sequence exists, or print \"NO\" if no such sequence exists.\n\nIf any solution exists, you should output n more lines. i-th line contains only an integer a_{i}. The elements of the sequence should be different positive integers no larger than n.\n\nIf there are multiple solutions, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n7\n\nOutput\nYES\n1\n4\n3\n6\n5\n2\n7\n\nInput\n6\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nConsider a sequence [a_1, a_2, ... , a_{n}]. Define its prefix product sequence $[ a_{1} \\operatorname{mod} n,(a_{1} a_{2}) \\operatorname{mod} n, \\cdots,(a_{1} a_{2} \\cdots a_{n}) \\operatorname{mod} n ]$.\n\nNow given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1].\n\n\n-----Input-----\n\nThe only input line contains an integer n (1 \u2264 n \u2264 10^5).\n\n\n-----Output-----\n\nIn the first output line, print \"YES\" if such sequence exists, or print \"NO\" if no such sequence exists.\n\nIf any solution exists, you should output n more lines. i-th line contains only an integer a_{i}. The elements of the sequence should be different positive integers no larger than n.\n\nIf there are multiple solutions, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n7\n\nOutput\nYES\n1\n4\n3\n6\n5\n2\n7\n\nInput\n6\n\nOutput\nNO\n\n\n\n-----Note-----\n\nFor the second sample, there are no valid sequences.\n\"\"\"\ndef code():"
}