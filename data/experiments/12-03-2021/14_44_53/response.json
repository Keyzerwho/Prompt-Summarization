{
    "id": "cmpl-4BAdqL4Dhqd4Y7QiOQ1TptJbzREmV",
    "object": "text_completion",
    "created": 1638567862,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\nimport re\n\ndef is_valid(s):\n    if len(s) != 10:\n        return False\n    if not re.search(r'[A-Z]{2}', s):\n        return False\n    if not re.search(r'\\d{3}', s):\n        return False\n    if not re.search(r'[a-zA-Z0-9]{10}', s):\n        return False\n    if re.search(r'(.)\\1', s):\n        return False\n    return True\n\nfor _ in range(int(input())):\n    s = input()\n    if is_valid(s):\n        print('Valid')\n    else:\n        print('Invalid')",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\nimport re\n\ndef is_valid(uid):\n    if len(uid) != 10:\n        return False\n    if not re.search(r'[A-Z]{2}', uid):\n        return False\n    if not re.search(r'\\d\\d\\d', uid):\n        return False\n    if re.search(r'[^a-zA-Z0-9]', uid):\n        return False\n    if re.search(r'(.)\\1', uid):\n        return False\n    return True\n\nfor _ in range(int(input())):\n    uid = input()\n    print('Valid' if is_valid(uid) else 'Invalid')",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    score = 0\n    frame = 1\n    in_first_half = True\n    for i in range(len(rolls)):\n        if rolls[i] == 10:\n            score += 10 + rolls[i+1] + rolls[i+2]\n            frame += 1\n        elif rolls[i] + rolls[i+1] == 10:\n            score += 10 + rolls[i+2]\n            frame += 1\n        else:\n            score += rolls[i] + rolls[i+1]\n            frame += 1\n        if frame <= 10:\n            in_first_half = not in_first_half\n        if not in_first_half:\n            frame += 1\n    return score",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    score = 0\n    frame = 1\n    in_first_half = True\n    for i in range(len(rolls)):\n        if rolls[i] == 10:\n            score += 10 + rolls[i+1] + rolls[i+2]\n            frame += 1\n        else:\n            if frame <= 10:\n                if rolls[i] + rolls[i+1] == 10:\n                    score += 10 + rolls[i+2]\n                else:\n                    score += rolls[i] + rolls[i+1]\n                frame += 1\n                in_first_half = True\n            else:\n                return score\n        if not in_first_half:\n            in_first_half = True\n        else:\n            in_first_half = False\n    return score",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a,b = map(int,input().split())\n        print(a+b)\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a,b = map(int,input().split())\n        print(a+b)\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    string = input()\n    if len(string) == 1:\n        print(0)\n    else:\n        count = 0\n        for i in range(len(string)//2):\n            if string[i] != string[-i-1]:\n                count += 1\n        if count == 0:\n            print(0)\n        else:\n            print(count)\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    string = input()\n    if string == string[::-1]:\n        print(0)\n    else:\n        for i in range(len(string)):\n            if string[i] != string[len(string)-1-i]:\n                string = string[:i] + string[len(string)-1-i] + string[i+1:]\n                if string == string[::-1]:\n                    print(1)\n                    break\n        else:\n            print(-1)\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N % sum([int(x) for x in str(N)]) == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N % sum([int(x) for x in str(N)]) == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    rthns = []\n    for n in range(a, b):\n        if is_rthn(n):\n            rthns.append(n)\n    return rthns\n\ndef is_rthn(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    sum_digits = sum(digits)\n    if n % sum_digits == 0:\n        return True\n    return False\n\ndef is_rthn_trunc(n):\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    sum_digits = sum(digits)\n    for i in range(1, len(digits)):\n        trunc = int(''.join(map(str, digits[i:])))\n        if not is_rthn(trunc):\n            return False\n    return True\n\ndef rthn_trunc_between(a, b):\n    rthns = []\n    for n in range(a, b):\n        if is_rthn_trunc(n):\n            rthns.append(n)\n    return rthns\n\ndef test_rthn_between():\n    assert rthn_between(0, 20) == [10, 12, 18, 20]\n    assert rthn_between(30, 100) == [30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100]\n    assert rthn_between(90, 200) == [90, 100, 102, 108, 120, 126, 180, 200]\n    assert rthn_between(200, 210) == [200, 201, 204, 207, 209, 210]\n    assert rthn_between(1000, 2000) == [1000, 1002, 1008, 1020, 1026, 1080, 1088, 1200, 1204, 1206, 1260, 1800, 2000]\n    assert rthn_between(2200, 2300) == []\n    assert rthn_between(9000002182976, 9000195371842) == [9000004000000, 9000004000008]\n\ndef test_is_rthn():\n    assert is_rthn(201)\n    assert not is_rthn(202)\n    assert is_rthn(201 * 201)\n    assert not is_rthn(201 * 202)\n\ndef test_is_rthn_trunc():\n    assert is_rthn_trunc(201)\n    assert not is_rthn_trunc(202)\n    assert is_rthn_trunc(201 * 201)\n    assert not is_rthn_trunc(201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201 * 201 * 201 * 201)\n    assert not is_rthn_trunc(201 * 201 * 201 * 201 * 201 * 201 * 201 * 201 * 202)\n    assert is_rthn_trunc(201 * 201 * 201",
            "index": 10,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    def is_rthn(n):\n        return n % sum(map(int, str(n))) == 0\n    return [n for n in range(a, b+1) if is_rthn(n)]",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        words = []\n        for j in range(n):\n            words.append(input())\n        if n == 1:\n            print(-1)\n        else:\n            if words[0][0] == words[1][-1]:\n                print(0)\n            else:\n                for k in range(n):\n                    if words[k][0] == words[k-1][-1]:\n                        print(k)\n                        break\n                    else:\n                        if k == n-1:\n                            print(-1)\n                            break\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        words = []\n        for j in range(n):\n            words.append(input())\n        if len(words) == 1:\n            print(0)\n        else:\n            if len(set(words)) != len(words):\n                print(-1)\n            else:\n                for j in range(n):\n                    if words[j][0] != words[j][-1]:\n                        print(j+1)\n                        break\n                else:\n                    print(0)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # your code here\n    return \"Not implemented yet\"",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    i = str(i)\n    i = i.replace('0', '4')\n    i = i.replace('1', '3')\n    i = i.replace('2', '2')\n    i = i.replace('3', '1')\n    i = i.replace('4', '0')\n    i = i.replace('5', 'x')\n    i = i.replace('6', '9')\n    i = i.replace('7', '8')\n    i = i.replace('8', '7')\n    i = i.replace('9', '6')\n    i = i.replace('x', '5')\n    i = int(i)\n    return '{} is the fouriest ({}) in base {}'.format(i, i, i.bit_length())",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        print(n**2)\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        print(n**2)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        time = 0\n        for j in range(len(s)):\n            if j == 0:\n                if s[j] == 'N':\n                    time += 5\n                else:\n                    time += 1\n            else:\n                if s[j] == 'N':\n                    if s[j-1] == 'S':\n                        time += 1\n                    else:\n                        time += 5\n                elif s[j] == 'S':\n                    if s[j-1] == 'N':\n                        time += 1\n                    else:\n                        time += 5\n                elif s[j] == 'W':\n                    if s[j-1] == 'E':\n                        time += 1\n                    else:\n                        time += 5\n                else:\n                    if s[j-1] == 'W':\n                        time += 1\n                    else:\n                        time += 5\n        print(time)\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        time = 0\n        for j in range(len(s)):\n            if j == 0:\n                if s[j] == 'N':\n                    time += 5\n                elif s[j] == 'S':\n                    time += 5\n                elif s[j] == 'W':\n                    time += 1\n                elif s[j] == 'E':\n                    time += 1\n            else:\n                if s[j] == 'N':\n                    if s[j-1] == 'S':\n                        time += 1\n                    else:\n                        time += 5\n                elif s[j] == 'S':\n                    if s[j-1] == 'N':\n                        time += 1\n                    else:\n                        time += 5\n                elif s[j] == 'W':\n                    if s[j-1] == 'E':\n                        time += 1\n                    else:\n                        time += 1\n                elif s[j] == 'E':\n                    if s[j-1] == 'W':\n                        time += 1\n                    else:\n                        time += 1\n        print(time)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}