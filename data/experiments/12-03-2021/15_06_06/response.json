{
    "id": "cmpl-4BAyMeKLEmqrSbik5E94Owa42khlr",
    "object": "text_completion",
    "created": 1638569134,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        if a.count(1) == a.count(2):\n            print(0)\n        elif a.count(1) > a.count(2):\n            print(a.count(2))\n        else:\n            print(a.count(1))\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        s = 0\n        b = 0\n        for j in range(n):\n            if a[j] == 1:\n                s += 1\n            else:\n                b += 1\n        if s == b:\n            print(0)\n        elif s > b:\n            print(s - b)\n        else:\n            print(b - s)\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # your code here\n    return -1\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(finding_k([1, 2, 3]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert finding_k([1, 2, 3]) == 1\n    assert finding_k([1, 1, 1]) == -1\n    assert finding_k([5, 2, 8]) == 3\n    assert finding_k([5, 2, 8, 9, 9, 2, 8, 3, 7, 6, 5]) == 9\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, max(arr)):\n        if all(i % k == 0 for k in arr):\n            return i\n    return -1",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if len(st) == 0:\n        return \"name must be at least one letter\"\n    else:\n        l = len(st)\n        sqrt = l**0.5\n        if sqrt.is_integer():\n            return [list(st[i:i+int(sqrt)]) for i in range(0, l, int(sqrt))]\n        else:\n            return [list(st[i:i+int(sqrt)+1]) for i in range(0, l, int(sqrt)+1)]",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if len(st) == 0:\n        return \"name must be at least one letter\"\n    else:\n        l = len(st)\n        if l % 2 == 0:\n            n = 2\n        else:\n            n = 1\n        m = []\n        for i in range(l):\n            m.append([])\n            for j in range(l):\n                if j == i:\n                    m[i].append(st[i])\n                else:\n                    m[i].append(\".\")\n        return m",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        return n%4!=0",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        return n % 4 != 0\n\nif __name__ == \"__main__\":\n    n = 4\n    print(Solution().canWinNim(n))",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    m = int(input())\n    for i in range(m):\n        a, b = map(int, input().split())\n        strings.append(strings[a-1] + strings[b-1])\n    k = 1\n    while True:\n        if all(strings[-1][i:i+k].count('0') == k or strings[-1][i:i+k].count('1') == k for i in range(len(strings[-1])-k+1)):\n            print(k)\n            break\n        k += 1\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    m = int(input())\n    for i in range(m):\n        a, b = map(int, input().split())\n        strings[a-1] += strings[b-1]\n        strings[b-1] = ''\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '0':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '1':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '0':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '1':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '0':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '1':\n                strings[b-1] = strings[b-1][j",
            "index": 9,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n, m = len(a), len(b)\n    if n > m:\n        # Make sure n <= m, to use O(min(n,m)) space\n        a,b = b,a\n        n,m = m,n\n        \n    current = range(n+1)\n    for i in range(1,m+1):\n        previous, current = current, [i]+[0]*n\n        for j in range(1,n+1):\n            add, delete = previous[j]+1, current[j-1]+1\n            change = previous[j-1]\n            if a[j-1] != b[i-1]:\n                change = change + 1\n            current[j] = min(add, delete, change)\n            \n    return current[n]",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if len(a) > len(b):\n        a,b = b,a\n    if len(a) == 0:\n        return len(b)\n    if len(b) == 0:\n        return len(a)\n    if a[0] == b[0]:\n        return levenshtein(a[1:],b[1:])\n    else:\n        return 1 + min(levenshtein(a[1:],b[1:]),levenshtein(a,b[1:]),levenshtein(a[1:],b))\n\nprint(levenshtein(\"kitten\",\"sitting\"))",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[k] % a[j] == 0:\n                    count += 1\n        print(count)\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if (a[i] + a[j]) % 11 == 0:\n                    count += 1\n        print(count)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n, k, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        count = 0\n        for j in range(n):\n            if a[j] > d:\n                count += 1\n            else:\n                break\n        print(count)\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    def min_subscriptions(n, k, d):\n        ",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    q = int(input())\n    for i in range(q):\n        n, m = map(int, input().split())\n        sum = 0\n        for j in range(1, n+1):\n            if j % m == 0:\n                sum += int(str(j)[-1])\n        print(sum)\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    q = int(input())\n    for i in range(q):\n        n, m = map(int, input().split())\n        s = 0\n        for i in range(1, n+1):\n            if i % m == 0:\n                s += i % 10\n        print(s)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        K = int(input())\n        if K == 1:\n            print(1)\n        elif K == 2:\n            print(12)\n        elif K == 3:\n            print(3)\n        elif K == 4:\n            print(123)\n        elif K == 5:\n            print(45)\n        elif K == 6:\n            print(456)\n        elif K == 7:\n            print(789)\n        elif K == 8:\n            print(10)\n        elif K == 9:\n            print(1110)\n        elif K == 10:\n            print(1112)\n        elif K == 11:\n            print(11123)\n        elif K == 12:\n            print(111234)\n        elif K == 13:\n            print(1112345)\n        elif K == 14:\n            print(11123456)\n        elif K == 15:\n            print(111234567)\n        elif K == 16:\n            print(1112345678)\n        elif K == 17:\n            print(11123456789)\n        elif K == 18:\n            print(1112345678910)\n        elif K == 19:\n            print(111234567891011)\n        elif K == 20:\n            print(11123456789101112)\n        elif K == 21:\n            print(1112345678910111213)\n        elif K == 22:\n            print(11123456789101112132)\n        elif K == 23:\n            print(111234567891011121323)\n        elif K == 24:\n            print(1112345678910111213234)\n        elif K == 25:\n            print(11123456789101112132345)\n        elif K == 26:\n            print(111234567891011121323456)\n        elif K == 27:\n            print(1112345678910111213234567)\n        elif K == 28:\n            print(11123456789101112132345678)\n        elif K == 29:\n            print(111234567891011121323456789)\n        elif K == 30:\n            print(1112345678910111213234567890)\n        elif K == 31:\n            print(111234567891011121323456789101)\n        elif K == 32:\n            print(1112345678910111213234567891011)\n        elif K == 33:\n            print(111234567891011121323456789101112)\n        elif K == 34:\n            print(11123456789101112132345678910111213)\n        elif K == 35:\n            print(111234567891011121323456789101112132)\n        elif K == 36:\n            print(1112345678910111213234567891011121323)\n        elif K == 37:\n            print(11123456789101112132345678910111213234)\n        elif K == 38:\n            print(111234567891011121323456789101112132345)\n        elif K == 39:\n            print(1112345678910111213234567891011121323456)\n        elif K == 40:\n            print(11123456789101112132345678910111213234567)\n        elif K == 41:\n            print(111234567891011121323456789101112132345678)\n        elif K == 42:\n            print(1112345678910111213234567891011121323456789)\n        elif K == 43:\n            print(11123456789101112132345678910111213234567890)\n        elif K == 44:\n            print(111234567891011121323456789101112132345678901)\n        elif K == 45:\n            print(1112345678910111213234567891011121323456789012)\n        elif K == 46:",
            "index": 18,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        K = int(input())\n        for j in range(1, K+1):\n            print(j, end='')\n        print()\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}