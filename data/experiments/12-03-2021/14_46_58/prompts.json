{
    "0": "Python 3\n\"\"\"\nThe factorial of a number, `n!`, is defined for whole numbers as the product of all integers from `1` to `n`. \n\nWrite an implementation to calculate the factorial of arbitrarily large numbers, without recursion.\n\n# Rules\n\n* `n < 0` should return `nil`/  `None`\n* `n = 0` should return `1`\n* `n > 0` should return `n!`\n\n\"\"\"\ndef factorial(n):",
    "1": "Python 3\n\"\"\"\nThe factorial of a number, `n!`, is defined for whole numbers as the product of all integers from `1` to `n`. \n\nFor example, `5!` is `5 * 4 * 3 * 2 * 1 = 120`\n\nMost factorial implementations use a recursive function to determine the value of `factorial(n)`. However, this blows up the stack for large values of `n` - most systems cannot handle stack depths much greater than 2000 levels.\n\nWrite an implementation to calculate the factorial of arbitrarily large numbers, *without recursion.*\n\n# Rules\n\n* `n < 0` should return `nil`/  `None`\n* `n = 0` should return `1`\n* `n > 0` should return `n!`\n\n# Note\n\nCodewars limits the amount of data it will send back and forth, which may introduce a false ceiling for how high of a value of `n` it will accept. All tests use values less than this limit.\n\"\"\"\ndef factorial(n):",
    "2": "Python 3\n\"\"\"\nGiven that you know the page you are on, how many products are in the category in total, and how many products are on any given page, output a simple string showing which products you are viewing.\n\nExamples:\n\nIn a category of 30 products with 10 products per page, on page 1 you would see \n\n'Showing 1 to 10 of 30 Products.'\n\nIn a category of 26 products with 10 products per page, on page 3 you would see\n\n'Showing 21 to 26 of 26 Products.'\n\nIn a category of 8 products with 10 products per page, on page 1 you would see\n\n'Showing 1 to 8 of 8 Products.'\n\"\"\"\ndef pagination_text(page_number, page_size, total_products):",
    "3": "Python 3\n\"\"\"\nA category page displays a set number of products per page, with pagination at the bottom allowing the user to move from page to page.\n\nGiven that you know the page you are on, how many products are in the category in total, and how many products are on any given page, how would you output a simple string showing which products you are viewing..\n\nexamples\n\nIn a category of 30 products with 10 products per page, on page 1 you would see \n\n'Showing 1 to 10 of 30 Products.'\n\nIn a category of 26 products with 10 products per page, on page 3 you would see\n\n'Showing 21 to 26 of 26 Products.'\n\nIn a category of 8 products with 10 products per page, on page 1 you would see\n\n'Showing 1 to 8 of 8 Products.'\n\"\"\"\ndef pagination_text(page_number, page_size, total_products):",
    "4": "Python 3\n\"\"\"\nYou will have to permutate through a string of lowercase letters, each permutation will start at a and you must calculate how many iterations it takes to reach the current permutation.\n\nExamples:\ninput: 'a'\nresult: 1\n\ninput: 'c'\nresult: 3\n\ninput: 'z'\nresult: 26\n\ninput: 'foo'\nresult: 3759\n\ninput: 'aba'\nresult: 27\n\ninput: 'abb'\nresult: 28\n\n\"\"\"\ndef permutation_position(perm):",
    "5": "Python 3\n\"\"\"\n#Permutation  position\nIn this kata you will have to permutate through a string of lowercase letters, each permutation will start at ```a``` and you must calculate how many iterations it takes to reach the current permutation.\n\n##examples\n```\ninput: 'a'\nresult: 1\n\ninput: 'c'\nresult: 3\n\ninput: 'z'\nresult: 26\n\ninput: 'foo'\nresult: 3759\n\ninput: 'aba'\nresult: 27\n\ninput: 'abb'\nresult: 28\n\n```\n\"\"\"\ndef permutation_position(perm):",
    "6": "Python 3\n\"\"\"\n\nGiven $t$ pairs of integers $p_i$ and $q_i$ and for each pair decided to find the greatest integer $x_i$, such that:   $p_i$ is divisible by $x_i$;  $x_i$ is not divisible by $q_i$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 50$)\u00a0\u2014 the number of pairs.\n\nEach of the following $t$ lines contains two integers $p_i$ and $q_i$ ($1 \\le p_i \\le 10^{18}$; $2 \\le q_i \\le 10^{9}$)\u00a0\u2014 the $i$-th pair of integers.\n\n\n-----Output-----\n\nPrint $t$ integers: the $i$-th integer is the largest $x_i$ such that $p_i$ is divisible by $x_i$, but $x_i$ is not divisible by $q_i$.\n\nOne can show that there is always at least one value of $x_i$ satisfying the divisibility conditions for the given constraints.\n\n\n-----Example-----\nInput\n3\n10 4\n12 6\n179 822\n\nOutput\n10\n4\n179\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nOleg's favorite subjects are History and Math, and his favorite branch of mathematics is division.\n\nTo improve his division skills, Oleg came up with $t$ pairs of integers $p_i$ and $q_i$ and for each pair decided to find the greatest integer $x_i$, such that:   $p_i$ is divisible by $x_i$;  $x_i$ is not divisible by $q_i$.  Oleg is really good at division and managed to find all the answers quickly, how about you?\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 50$)\u00a0\u2014 the number of pairs.\n\nEach of the following $t$ lines contains two integers $p_i$ and $q_i$ ($1 \\le p_i \\le 10^{18}$; $2 \\le q_i \\le 10^{9}$)\u00a0\u2014 the $i$-th pair of integers.\n\n\n-----Output-----\n\nPrint $t$ integers: the $i$-th integer is the largest $x_i$ such that $p_i$ is divisible by $x_i$, but $x_i$ is not divisible by $q_i$.\n\nOne can show that there is always at least one value of $x_i$ satisfying the divisibility conditions for the given constraints.\n\n\n-----Example-----\nInput\n3\n10 4\n12 6\n179 822\n\nOutput\n10\n4\n179\n\n\n\n-----Note-----\n\nFor the first pair, where $p_1 = 10$ and $q_1 = 4$, the answer is $x_1 = 10$, since it is the greatest divisor of $10$ and $10$ is not divisible by $4$.\n\nFor the second pair, where $p_2 = 12$ and $q_2 = 6$, note that   $12$ is not a valid $x_2$, since $12$ is divisible by $q_2 = 6$;  $6$ is not valid $x_2$ as well: $6$ is also divisible by $q_2 = 6$.  The next available divisor of $p_2 = 12$ is $4$, which is the answer, since $4$ is not divisible by $6$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nThere is an integer sequence of length 2^N: A_0, A_1, ..., A_{2^N-1}.\nFor every integer K satisfying 1 \\leq K \\leq 2^N-1, solve the following problem:\n - Let i and j be integers. Find the maximum value of A_i + A_j where 0 \\leq i < j \\leq 2^N-1 and (i or j) \\leq K.\nHere, or denotes the bitwise OR.\n\n-----Constraints-----\n - 1 \\leq N \\leq 18\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_0 A_1 ... A_{2^N-1}\n\n-----Output-----\nPrint 2^N-1 lines.\nIn the i-th line, print the answer of the problem above for K=i.\n\n-----Sample Input-----\n2\n1 2 3 1\n\n-----Sample Output-----\n3\n4\n5\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThere is an integer sequence of length 2^N: A_0, A_1, ..., A_{2^N-1}. (Note that the sequence is 0-indexed.)\nFor every integer K satisfying 1 \\leq K \\leq 2^N-1, solve the following problem:\n - Let i and j be integers. Find the maximum value of A_i + A_j where 0 \\leq i < j \\leq 2^N-1 and (i or j) \\leq K.\nHere, or denotes the bitwise OR.\n\n-----Constraints-----\n - 1 \\leq N \\leq 18\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_0 A_1 ... A_{2^N-1}\n\n-----Output-----\nPrint 2^N-1 lines.\nIn the i-th line, print the answer of the problem above for K=i.\n\n-----Sample Input-----\n2\n1 2 3 1\n\n-----Sample Output-----\n3\n4\n5\n\nFor K=1, the only possible pair of i and j is (i,j)=(0,1), so the answer is A_0+A_1=1+2=3.\nFor K=2, the possible pairs of i and j are (i,j)=(0,1),(0,2).\nWhen (i,j)=(0,2), A_i+A_j=1+3=4. This is the maximum value, so the answer is 4.\nFor K=3, the possible pairs of i and j are (i,j)=(0,1),(0,2),(0,3),(1,2),(1,3),(2,3) .\nWhen (i,j)=(1,2), A_i+A_j=2+3=5. This is the maximum value, so the answer is 5.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have to find a $Special$ $Number$  and a $Partial$ special number for a number N.Special Number are those product of its digits is equal to number itself and there is no digit $1$. $Partial$ $Special$ is a number having all the condition same as $Special$ except that it can also have digit $1$ in it. Print the count of the $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$ . \n\n-----Input:-----\n- Integers $N$ is taken as input from input stream. \n\n-----Output:-----\n- Print the number of  $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$ numbers to be count will be less then 10^6\n\n-----Sample Input:-----\n3\n\n-----Sample Output:-----\n1 20\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\n$Neha$  is given a number $N$. She always looks for special thing , this time she is looking for $Special$ $Number$ and $Partial$ $Special$ $Number$. A $Special$ $Number$ is a number whose product of its digits is equal to number itself i.e. $N $, and in this number there is no digit $1$. $Partial$ $Special$ is a number having all the condition same as $Special$ except that it can also have digit $1$ in it .Neha have to count the number of $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$ . She is not so good in programming , so go and help her.\n\n-----Input:-----\n- Integers $N$ is taken as input from input stream. \n\n-----Output:-----\n- Print the number of  $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$ numbers to be count will be less then 10^6\n\n-----Sample Input:-----\n3\n\n-----Sample Output:-----\n1 20\n\n-----EXPLANATION:-----\nThere are only one natural numbers, the product of the digits of which is 3  :- {3}.\nThere are 20 natural numbers with digit 1 , whose  product of the digits  is 3 :-{13, 31, 113 ,131 311 ,1113 ,1131 ,1311, 3111 ,11113, 11131, 11311 ,13111, 31111, 111113, 111131, 111311,113111, 131111 ,311111}\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\nSwap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$. Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\nSwap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$, that is, the absolute difference between $i$ and $j$.  Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip (change $0$ to $1$ or $1$ to $0$) the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, one of the optimal solutions is to flip index $1$ and index $3$, the string $a$ changes in the following way: \"100\" $\\to$ \"000\" $\\to$ \"001\". The cost is $1 + 1 = 2$.\n\nThe other optimal solution is to swap bits and indices $1$ and $3$, the string $a$ changes then \"100\" $\\to$ \"001\", the cost is also $|1 - 3| = 2$.\n\nIn the second example, the optimal solution is to swap bits at indices $2$ and $3$, the string $a$ changes as \"0101\" $\\to$ \"0011\". The cost is $|2 - 3| = 1$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou have to find the number of squares of odd side length of the a N*N chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----s\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nChef has recently been playing a lot of chess in preparation for the ICCT (International Chef Chess Tournament).\nSince putting in long hours is not an easy task, Chef's mind wanders elsewhere. He starts counting the number of squares with odd side length on his chessboard..\nHowever, Chef is not satisfied. He wants to know the number of squares of odd side length on a generic $N*N$ chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nKate count words which means continuous sequences of English alphabetic characters. Here are examples:\n\n`Hello there, little user5453 374 ())$. I\u2019d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't count \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\".\n\nKate has decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I\u2019d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I\u2019d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"\ndef word_count(s):",
    "17": "Python 3\n\"\"\"\nKate likes to count words in text blocks. By words she means continuous sequences of English alphabetic characters (from a to z ). Here are examples:\n\n`Hello there, little user5453 374 ())$. I\u2019d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't like some of words and doesn't count them. Words to be excluded are \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\", case-insensitive.\n\nToday Kate's too lazy and have decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I\u2019d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I\u2019d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"\ndef word_count(s):",
    "18": "Python 3\n\"\"\"\nYou are given an array of numbers. Make sets of 3 numbers. Each should have numbers in ascending or descending order\n\nReturn the number of such sets that can be formed. a number can be in multiple sets\n\u00a0\nExample 1:\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three sets given the conditions. (2,3,4), (5,4,1), (5,3,1). \n\nExample 2:\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any set given the conditions.\n\nExample 3:\nInput: rating = [1,2,3,4]\nOutput: 4\n\n\u00a0\nConstraints:\n\nn == rating.length\n1 <= n <= 200\n1 <= rating[i] <= 10^5\n\n\"\"\"\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:",
    "19": "Python 3\n\"\"\"\nThere are\u00a0n\u00a0soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers\u00a0amongst them under the following rules:\n\nChoose 3 soldiers with index (i, j, k) with\u00a0rating (rating[i], rating[j], rating[k]).\nA team is valid if:\u00a0 (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0\u00a0<= i <\u00a0j <\u00a0k <\u00a0n).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n\nExample 1:\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n\nExample 2:\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.\n\nExample 3:\nInput: rating = [1,2,3,4]\nOutput: 4\n\n\u00a0\nConstraints:\n\nn == rating.length\n1 <= n <= 200\n1 <= rating[i] <= 10^5\n\n\"\"\"\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:"
}