{
    "0": "\n        \n        pass\n\n\nif __name__ == '__main__':\n    assert Solution().minCameraCover(0) == 0",
    "1": "\n        def dfs(node):\n            if not node:\n                return 0, 0, float(\"inf\")\n            L = dfs(node.left)\n            R = dfs(node.right)\n            dp0 = L[1] + R[1]\n            dp1 = min(L[2] + min(R[1:]), R[2] + min(L[1:]))\n            dp2 = 1 + min(L) + min(R)\n            return dp0, dp1, dp2\n        return min(dfs(root)[1:])",
    "2": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"berhampore\" in s.lower():\n            if \"serampore\" in s.lower():\n                print(\"Both\")\n            else:\n                print(\"GCETTB\")\n        elif \"serampore\" in s.lower():\n            print(\"GCETTS\")\n        else:\n            print(\"Others\")",
    "3": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"berhampore\" in s.lower():\n            print(\"GCETTB\")\n        elif \"serampore\" in s.lower():\n            print(\"GCETTS\")\n        else:\n            print(\"Others\")",
    "4": "\n    T = int(input())\n    for i in range(T):\n        X, R, A, B = map(int, input().split())\n        if A == B:\n            print(0)\n        elif A > B:\n            if (A - B) % (2 * R) == 0:\n                print(1)\n            else:\n                print(0)\n        else:\n            if (B - A) % (2 * R) == 0:\n                print(1)\n            else:\n                print(0)\n",
    "5": "\n    ",
    "6": "\n    T = int(input())\n    for i in range(T):\n        R, C = map(int, input().split())\n        matrix = []\n        for j in range(R):\n            matrix.append(input())\n        if \"spoon\" in matrix or \"SPOON\" in matrix:\n            print(\"There is a spoon!\")\n        else:\n            print(\"There is indeed no spoon!\")\n",
    "7": "\n    T = int(input())\n    for i in range(T):\n        R, C = map(int, input().split())\n        matrix = []\n        for j in range(R):\n            matrix.append(input())\n        if \"spoon\" in \"\".join(matrix).lower():\n            print(\"There is a spoon!\")\n        else:\n            print(\"There is indeed no spoon!\")",
    "8": "\n    string = input()\n    if len(string)%2 == 0:\n        print(string[:len(string)//2] + string[:len(string)//2][::-1])\n    else:\n        print(string[:len(string)//2] + string[len(string)//2] + string[:len(string)//2][::-1])",
    "9": "\n    A = input()\n    B = A[::-1]\n    print(B)",
    "10": "\n    k = int(input())\n    n = int(input())\n    G = [[0]*n for i in range(n)]\n    for i in range(n):\n        G[i] = list(input())\n    print(G)",
    "11": "\n    k = int(input())\n    n = int(input())\n    G = [['N' for i in range(n)] for j in range(n)]\n    for i in range(n):\n        G[i][i] = 'Y'\n    for i in range(n):\n        for j in range(i+1, n):\n            G[i][j] = G[j][i] = input()\n    for i in range(n):\n        for j in range(i+1, n):\n            if G[i][j] == 'Y':\n                for k in range(j+1, n):\n                    if G[j][k] == 'Y':\n                        G[i][k] = G[k][i] = 'Y'\n    for i in range(n):\n        for j in range(i+1, n):\n            if G[i][j] == 'N':\n                for k in range(j+1, n):\n                    if G[j][k] == 'Y':\n                        G[i][k] = G[k][i] = 'N'\n    for i in range(n):\n        for j in range(i+1, n):\n            if G[i][j] == 'Y':\n                for k in range(j+1, n):\n                    if G[j][k] == 'N':\n                        G[i][k] = G[k][i] = 'N'\n    for i in range(n):\n        for j in range(i+1, n):\n            if G[i][j] == 'N':\n                for k in range(j+1, n):\n                    if G[j][k] == 'N':\n                        G[i][k] = G[k][i] = 'Y'\n    for i in range(n):\n        for j in range(i+1, n):\n            if G[i][j] == 'Y':\n                for k in range(j+1, n):\n                    if G[j][k] == 'Y':\n                        G[i][k] = G[k][i] = 'N'\n",
    "12": "\n    n, m = map(int, input().split())\n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    if max(b) > min(g):\n        print(-1)\n    else:\n        print(min(g) * n)\n",
    "13": "\n    n, m = map(int, input().split())\n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    if min(b) > max(g):\n        print(-1)\n    else:\n        print(min(b) * m + sum(b))\n",
    "14": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s.reverse()\n    max_lucky = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            continue\n        max_lucky = max_lucky | s[i] | s[i+1]\n    print(max_lucky)\n",
    "15": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = 0\n    for i in range(n-1):\n        ans = max(ans, s[i]^s[i+1])\n    print(ans)\n",
    "16": "\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n//2)\n        for i in range(n//2):\n            print(2*i+1, 2*i+2)\n",
    "17": "\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n//2)\n        for i in range(n//2):\n            print(2, i+1)\n",
    "18": "\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] > k:\n            break\n        else:\n            ans += 1\n            k -= arr[i]\n    print(ans)\n",
    "19": "\n    n, k = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    count = 0\n    i = 0\n    while k > 0 and i < n:\n        if k - prices[i] >= 0:\n            k -= prices[i]\n            count += 1\n        else:\n            break\n        i += 1\n    print(count)\n"
}