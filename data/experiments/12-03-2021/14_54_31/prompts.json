{
    "0": "Python 3\n\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf ```S1``` is ```[1,2,3,4,5]```\nThe qualified subsets are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nIf ```S2``` is ```[1,2,3]```, we have only ```4``` qualified subsets :\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"\ndef f(n):",
    "1": "Python 3\n\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf our set ```S1``` is equal to ```[1,2,3,4,5]```\nThe subsets that fulfill these property are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nFrom the set ```S2``` equals to```[1,2,3]```, it is obvious that we have only ```4``` subsets and are:\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"\ndef f(n):",
    "2": "Python 3\n\"\"\"\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\n\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\n-----General Statement:-----\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Discussion:-----\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nTry guessing the statement from this picture:  $3$ \n\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Invalid Login - Bug Fixing #11\n\nOh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!\n\n## Task\n\nsearch the password string for any injected code \nInjected code is any thing that contains `||` or `//` \nIf you find any ,return `\"Wrong username or password!\"` \n\n## Preloaded\n\nYou will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.\n\n## Usage\n\n```python\ndatabase = Database()\ndatabase.login('Timmy', 'password')\n```\n\"\"\"\ndef validate(username, password):",
    "7": "Python 3\n\"\"\"\n# Invalid Login - Bug Fixing #11\n\nOh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!\n\n## Task\n\nYour task is simple, search the password string for any injected code (Injected code is any thing that would be used to exploit flaws in the current code, so basically anything that contains `||` or `//`) if you find any you must return `\"Wrong username or password!\"` because no one likes someone trying to cheat their way in!\n\n## Preloaded\n\nYou will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.\n\n## Usage\n\n```python\ndatabase = Database()\ndatabase.login('Timmy', 'password')\n```\n\"\"\"\ndef validate(username, password):",
    "8": "Python 3\n\"\"\"\nGiven a board of `NxN`, distributed with tiles labeled `0` to `N\u00b2 - 1`(inclusive):\n\nA solved grid will have the tiles in order of label, left to right, top to bottom.\n\nReturn `true` if the board state is currently solved, and `false` otherwise.\n\n\n\nFor example, a 2x2 solved grid:\n```\n[ [0, 1],\n  [2, 3] ]\n```\n\nA 2x2 unsolved grid:\n```\n[ [2, 1],\n  [0, 3] ]\n```\n\"\"\"\ndef is_solved(board):",
    "9": "Python 3\n\"\"\"\nGiven a board of `NxN`, distributed with tiles labeled `0` to `N\u00b2 - 1`(inclusive):\n\nA solved grid will have the tiles in order of label, left to right, top to bottom.\n\nReturn `true` if the board state is currently solved, and `false` if the board state is unsolved.\n\nInput will always be a square 2d array.\n\n\nFor example, a 2x2 solved grid:\n```\n[ [0, 1],\n  [2, 3] ]\n```\n\nA 2x2 unsolved grid:\n```\n[ [2, 1],\n  [0, 3] ]\n```\n\"\"\"\ndef is_solved(board):",
    "10": "Python 3\n\"\"\"\nGiven an array, check whether every value in the array is an array. This should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\nInput:\n[[1],[2]]\nOutput:\ntrue\n\nInput:\n['1','2']\nOutput:\nfalse\n\nInput:\n[{1:1},{2:2}]\nOutput:\nfalse\n\"\"\"\ndef arr_check(arr):",
    "11": "Python 3\n\"\"\"\nIs every value in the array an array?\n\nThis should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\n\n```python\n[[1],[2]] => true\n['1','2'] => false\n[{1:1},{2:2}] => false\n```\n\"\"\"\ndef arr_check(arr):",
    "12": "Python 3\n\"\"\"\n\nYou are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 3000)\u00a0\u2014 the length of the array.\n\nNext line contains n integer a_{i} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operation required to make the array strictly increasing.\n\n\n-----Examples-----\nInput\n7\n2 1 5 11 5 9 11\n\nOutput\n9\n\nInput\n5\n5 4 3 2 1\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, the array is going to look as follows:\n\n2 3 5 6 7 9 11\n\n|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9\n\nAnd for the second sample:\n\n1 2 3 4 5\n\n|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nSonya was unable to think of a story for this problem, so here comes the formal description.\n\nYou are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 3000)\u00a0\u2014 the length of the array.\n\nNext line contains n integer a_{i} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operation required to make the array strictly increasing.\n\n\n-----Examples-----\nInput\n7\n2 1 5 11 5 9 11\n\nOutput\n9\n\nInput\n5\n5 4 3 2 1\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, the array is going to look as follows:\n\n2 3 5 6 7 9 11\n\n|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9\n\nAnd for the second sample:\n\n1 2 3 4 5\n\n|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nWrite a function named sumEvenNumbers, taking a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence. Only numbers without decimals like 4 or 4.0 can be even. \n\nInput:\n* sequence of numbers: those numbers could be integers and/or floats. \n\nExample:\nInput:\n[4,3,1,2,5,10,6,7,9,8]\nOutput:\n30\nExplanation:\n4 + 2 + 10 + 6 + 8 = 30\n\"\"\"\ndef sum_even_numbers(seq):",
    "15": "Python 3\n\"\"\"\n# Task\n\nWrite a function named `sumEvenNumbers`, taking a sequence of numbers as single parameter. Your function must return the sum of **the even values** of this sequence.\n\nOnly numbers without decimals like `4` or `4.0` can be even. \n\n## Input\n* sequence of numbers: those numbers could be integers and/or floats. \n\n\nFor example, considering this input value : `[4,3,1,2,5,10,6,7,9,8]`, then your function should return `30` (because `4 + 2 + 10 + 6 + 8 = 30`).\n\"\"\"\ndef sum_even_numbers(seq):",
    "16": "Python 3\n\"\"\"\nYou are given a string $s$ of length $n$ consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases. $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length of a string $s$.\n\nThe second line of a test case description contains string $s$ of length $n$ consisting of lowercase English letters and question marks.\n\n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if there is no way to replace question marks in string $s$ with a lowercase English letters in such a way that there is exactly one occurrence of a string \"abacaba\" in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\" and in the next line output a resulting string consisting of $n$ lowercase English letters. If there are multiple possible strings, output any.\n\nYou may print every letter in \"Yes\" and \"No\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nAcacius is studying strings theory. Today he came with the following problem.\n\nYou are given a string $s$ of length $n$ consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease help Acacius to check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases. $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length of a string $s$.\n\nThe second line of a test case description contains string $s$ of length $n$ consisting of lowercase English letters and question marks.\n\n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if there is no way to replace question marks in string $s$ with a lowercase English letters in such a way that there is exactly one occurrence of a string \"abacaba\" in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\" and in the next line output a resulting string consisting of $n$ lowercase English letters. If there are multiple possible strings, output any.\n\nYou may print every letter in \"Yes\" and \"No\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n\n\n\n-----Note-----\n\nIn first example there is exactly one occurrence of a string \"abacaba\" in the string \"abacaba\" as a substring.\n\nIn second example seven question marks can be replaced with any seven lowercase English letters and with \"abacaba\" in particular.\n\nIn sixth example there are two occurrences of a string \"abacaba\" as a substring.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou have unweighted tree of $n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\nFor every two different leaves $v_{1}$ and $v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between $v_{1}$ and $v_{2}$ has to be equal to $0$. \n\nYou can put very large positive integers like $10^{(10^{10})}$.\n\nLet $f$ be the number of distinct weights in assignment.\n\nWhat are the minimum and the maximum possible values of $f$ for the given tree? Find and print both.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the number of vertices in given tree.\n\nThe $i$-th of the next $n-1$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. It is guaranteed that given graph forms tree of $n$ vertices.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum and maximum possible value of $f$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\n\n-----Examples-----\nInput\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\nOutput\n1 4\n\nInput\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\nOutput\n3 3\n\nInput\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\nOutput\n1 6\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou have unweighted tree of $n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\n  For every two different leaves $v_{1}$ and $v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between $v_{1}$ and $v_{2}$ has to be equal to $0$. \n\nNote that you can put very large positive integers (like $10^{(10^{10})}$).\n\nIt's guaranteed that such assignment always exists under given constraints. Now let's define $f$ as the number of distinct weights in assignment.\n\n [Image] In this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is $0$. $f$ value is $2$ here, because there are $2$ distinct edge weights($4$ and $5$).\n\n[Image] In this example, assignment is invalid, because bitwise XOR of all edge weights between vertex $1$ and vertex $6$ ($3, 4, 5, 4$) is not $0$. \n\nWhat are the minimum and the maximum possible values of $f$ for the given tree? Find and print both.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the number of vertices in given tree.\n\nThe $i$-th of the next $n-1$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. It is guaranteed that given graph forms tree of $n$ vertices.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum and maximum possible value of $f$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\n\n-----Examples-----\nInput\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\nOutput\n1 4\n\nInput\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\nOutput\n3 3\n\nInput\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\nOutput\n1 6\n\n\n\n-----Note-----\n\nIn the first example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.  [Image] \n\nIn the second example, possible assignments for each minimum and maximum are described in picture below. The $f$ value of valid assignment of this tree is always $3$.  [Image] \n\nIn the third example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.  [Image]\n\"\"\"\ndef code():"
}