{
    "0": "Python 3\n\"\"\"\nInitially, you have one stick and want to craft $k$ torches. One torch can be crafted using one stick and one coal.\n\nYou can trade $1$ stick for $x$ sticks or $y$ sticks for $1$ coal. \n\nYou can trade any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\nYou have to answer $t$ independent test cases.\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains three integers $x$, $y$ and $k$ ($2 \\le x \\le 10^9$; $1 \\le y, k \\le 10^9$) \u2014 the number of sticks you can buy with one stick, the number of sticks required to buy one coal and the number of torches you need, respectively.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\n\n-----Example-----\nInput\n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput\n14\n33\n25\n2000000003\n1000000001999999999\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are playing a very popular game called Cubecraft. Initially, you have one stick and want to craft $k$ torches. One torch can be crafted using one stick and one coal.\n\nHopefully, you've met a very handsome wandering trader who has two trade offers:  exchange $1$ stick for $x$ sticks (you lose $1$ stick and gain $x$ sticks).  exchange $y$ sticks for $1$ coal (you lose $y$ sticks and gain $1$ coal). \n\nDuring one trade, you can use only one of these two trade offers. You can use each trade offer any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains three integers $x$, $y$ and $k$ ($2 \\le x \\le 10^9$; $1 \\le y, k \\le 10^9$) \u2014 the number of sticks you can buy with one stick, the number of sticks required to buy one coal and the number of torches you need, respectively.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\n\n-----Example-----\nInput\n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput\n14\n33\n25\n2000000003\n1000000001999999999\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n# Example\n\n For `cell = \"a1\"`, the output should be `2`.\n\n For `cell = \"c2\"`, the output should be `6`.\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 \u00d7 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"\ndef chess_knight(cell):",
    "3": "Python 3\n\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/knight.jpg?_tm=1473533979951)\n\n# Example\n\n For `cell = \"a1\"`, the output should be `2`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/ex_1.jpg?_tm=1473533980197)\n\n For `cell = \"c2\"`, the output should be `6`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/ex_2.jpg?_tm=1473533980368)\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 \u00d7 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"\ndef chess_knight(cell):",
    "4": "Python 3\n\"\"\"\n\nPrint the reverse of the given integer.(0 is not allowed in starting).\n\n-----Input-----\n- The first line of each test case contains an integer T .\n\n- following T lines contains distinct integers N .\n\n\n\n-----Output-----\n- Output should contain T line , each line with the distinct integer as asked in question . \n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n\n- 1 \u2264 N \u2264 1018\n\nSubtask 1 :  N \u2264 105\nSubtask 2 :  N \u2264 109\nSubtask 3 :  N \u2264 1018\n\n\n\n-----Example-----\nInput:\n3\n1234\n4567\n1\n\nOutput:\n4321\n7654\n1\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\n-----Problem description.-----\nThis problem deals with the I/O methods used in codechef. \nYou are supposed to print the integer in its reverse form , or in simple words, print the reverse of the given integer . For instance , reverse of  120 is 21  (not 021)  .\n\n-----Input-----\n- The first line of each test case contains an integer T .\n\n- following T lines contains distinct integers N .\n\n\n\n-----Output-----\n- Output should contain T line , each line with the distinct integer as asked in question . \n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n\n- 1 \u2264 N \u2264 1018\n\nSubtask 1 :  N \u2264 105\nSubtask 2 :  N \u2264 109\nSubtask 3 :  N \u2264 1018\n\n\n\n-----Example-----\nInput:\n3\n1234\n4567\n1\n\nOutput:\n4321\n7654\n1\n\n-----Explanation-----\nreverse of 1234 is 4321 , 4567 is 7654 & of 1 is 1 \n\nNOTE: testcases may contain large range of data, use datatypes accordingly .\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:",
    "7": "Python 3\n\"\"\"\nGiven a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is between\u00a01\u00a0and\u00a010^4.\nThe value of nodes is between\u00a01\u00a0and\u00a0100.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:",
    "8": "Python 3\n\"\"\"\nYou are given a number X and limit N.\nYou need to output the sum of multiples of X upto N.\n\n-----Input:-----\n- First line will contain T, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u226410001 \\leq T \\leq 1000\n- 1\u2264X<=N\u22641071 \\leq X<=N \\leq 10^7\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nRichik$Richik$ has just completed his engineering and has got a job in one of the firms at Sabrina$Sabrina$ which is ranked among the top seven islands in the world in terms of the pay scale. \nSince Richik$Richik$ has to travel a lot to reach the firm, the owner assigns him a number X$X$, and asks him to come to work only on the day which is a multiple of X$X$. Richik joins the firm on 1-st day but starts working from X-th day. Richik$Richik$ is paid exactly the same amount in Dollars as the day number. For example, if Richik$Richik$ has been assigned X=3$X = 3$, then he will be paid 3$3$ dollars and 6$6$ dollars on the 3rd$3rd$ and 6th$6th$ day on which he comes for work. \nOn N\u2212th$N-th$ day, the owner calls up Richik$Richik$ and asks him not to come to his firm anymore. Hence Richik$Richik$ demands his salary of all his working days together. Since it will take a lot of time to add, Richik$Richik$ asks help from people around him, let's see if you can help him out. \n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N$X, N$. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264X<=N\u2264107$1 \\leq X<=N \\leq 10^7$\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k < n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n\n-----Example-----\nInput\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput\n10\n0\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\nSome examples:   if you have four barrels, each containing $5$ liters of water, and $k = 1$, you may pour $5$ liters from the second barrel into the fourth, so the amounts of water in the barrels are $[5, 0, 5, 10]$, and the difference between the maximum and the minimum is $10$;  if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still $0$. \n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k < n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n\n-----Example-----\nInput\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput\n10\n0\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nExamples:\nInput:\nD=1\nN=10\nOutput:\n45\n\nInput:\nD=2\nN=3\nOutput:\n18\n\"\"\"\ndef super_sum(D, N):",
    "13": "Python 3\n\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nFor Example if D=1 and N=10 then the answer would be 45 ([0,1,2,3,4,5,6,7,8,9])\nIf D=2 and N = 3 the answer is 18 which would be the sum of every number in the following:\n```python\n[\n[(0,0), (0,1), (0,2)],\n[(1,0), (1,1), (1,2)],\n[(2,0), (2,1), (2,2)]\n]\n```\n\nA naive solution could be to loop over every index in every dimension and add to a global sum. This won't work as the number of dimension is expected to be quite large.\n\nHint: A formulaic approach would be best\nHint 2: Gauss could solve the one dimensional case in his earliest of years, This is just a generalization.\n\n~~~if:javascript\nNote for JS version: Because the results will exceed the maximum safe integer easily, for such values you're only required to have a precision of at least `1 in 1e-9` to the actual answer.\n~~~\n\"\"\"\ndef super_sum(D, N):",
    "14": "Python 3\n\"\"\"\nYou are given grid of size $a \\times b$ and a coordinate $(x, y)$ within that grid. \nYou need to output the largest area of a rectangle that does not include the coordinate $(x, y)$.\nThe boundaries of the rectangle should be parallel to the sides of the grid.\n\n-----Input-----\n\nIn the first line you are given an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the\nnumber of test cases in the test. In the next lines you are given descriptions\nof $t$ test cases.\n\nEach test case contains a single line which consists of $4$ integers $a, b, x$\nand $y$ ($1 \\le a, b \\le 10^4$; $0 \\le x < a$; $0 \\le y < b$)\u00a0\u2014 the size of the\ngrid and the coordinate. It is guaranteed that $a+b>2$.\n\n\n-----Output-----\n\nPrint $t$ integers\u00a0\u2014 the answers for each test case. \n\n-----Example-----\nInput\n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput\n56\n6\n442\n1\n45\n80\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nScreen resolution of Polycarp's monitor is $a \\times b$ pixels. Unfortunately, there is one dead pixel at his screen. It has coordinates $(x, y)$ ($0 \\le x < a, 0 \\le y < b$). You can consider columns of pixels to be numbered from $0$ to $a-1$, and rows\u00a0\u2014 from $0$ to $b-1$.\n\nPolycarp wants to open a rectangular window of maximal size, which doesn't contain the dead pixel. The boundaries of the window should be parallel to the sides of the screen.\n\nPrint the maximal area (in pixels) of a window that doesn't contain the dead pixel inside itself.\n\n\n-----Input-----\n\nIn the first line you are given an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test. In the next lines you are given descriptions of $t$ test cases.\n\nEach test case contains a single line which consists of $4$ integers $a, b, x$ and $y$ ($1 \\le a, b \\le 10^4$; $0 \\le x < a$; $0 \\le y < b$)\u00a0\u2014 the resolution of the screen and the coordinates of a dead pixel. It is guaranteed that $a+b>2$ (e.g. $a=b=1$ is impossible).\n\n\n-----Output-----\n\nPrint $t$ integers\u00a0\u2014 the answers for each test case. Each answer should contain an integer equal to the maximal possible area (in pixels) of a rectangular window, that doesn't contain the dead pixel.\n\n\n-----Example-----\nInput\n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput\n56\n6\n442\n1\n45\n80\n\n\n\n-----Note-----\n\nIn the first test case, the screen resolution is $8 \\times 8$, and the upper left pixel is a dead pixel. Here you can see one of two possible layouts of the maximal window. [Image]\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nyou are given a list. each element represent a 2D point.\nReturn the maximum number of points that are inside a circle of radius\u00a0r.\n\nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: if center is at (0,0) and radius = 2 contain all 2D points.\n\nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: if center is at (0,4) and radius = 5 contain all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 100\npoints[i].length == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000\n\n\"\"\"\nclass Solution:\n    def numPoints(self, points: List[List[int]], r: int) -> int:",
    "17": "Python 3\n\"\"\"\nYou have a very large square wall and a circular dartboard placed on the wall.\u00a0You have been challenged to throw darts into the board blindfolded.\u00a0Darts thrown at the wall are represented as an array of\u00a0points on a 2D plane.\u00a0\nReturn\u00a0the maximum number of points that are within or\u00a0lie\u00a0on\u00a0any circular dartboard of radius\u00a0r.\n\u00a0\nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 100\npoints[i].length == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000\n\"\"\"\nclass Solution:\n    def numPoints(self, points: List[List[int]], r: int) -> int:",
    "18": "Python 3\n\"\"\"\nGiven a string S, you have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated.\n\nExample:\nInput:\n'CodeWars'\nOutput\n'CdWr oeas'\n\"\"\"\ndef sort_my_string(s):",
    "19": "Python 3\n\"\"\"\nGiven a string S.\nYou have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated (see sample below)\n\nNote: \n0 is considered to be an even index. \nAll input strings are valid with no spaces\n\n\ninput:\n'CodeWars'\n\noutput\n'CdWr oeas'\n\nS[0] = 'C'\nS[1] = 'o'\nS[2] = 'd'\nS[3] = 'e'\nS[4] = 'W'\nS[5] = 'a'\nS[6] = 'r'\nS[7] = 's'\n\n\nEven indices 0, 2, 4, 6, so we have 'CdWr' as the first group\nodd ones are 1, 3, 5, 7, so the second group is 'oeas'\nAnd the final string to return is 'Cdwr oeas'\n\nEnjoy.\n\"\"\"\ndef sort_my_string(s):"
}