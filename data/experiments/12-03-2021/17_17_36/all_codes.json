{
    "0": "\n    for i in s:\n        if s.count(i) > 1:\n            return i\n    return None\n\nprint(first_dup('tweet'))\nprint(first_dup('Ode to Joy'))\nprint(first_dup('ode to joy'))\nprint(first_dup('bar'))\nprint(first_dup('123123'))\nprint(first_dup('!@#$!@#$'))\nprint(first_dup('1a2b3a3c'))",
    "1": "\n    for i in s:\n        if s.count(i) > 1:\n            return i\n    return None",
    "2": "\n    # your code here\n    return None\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_prod(\"5 + 6\") == \"1.10000e+01\"\n    assert sum_prod(\"5 - 6\") == \"-7.00000e+00\"\n    assert sum_prod(\"5 * 6\") == \"2.50000e+01\"\n    assert sum_prod(\"5 / 6\") == \"5.000000e-01\"\n    assert sum_prod(\"5 * 6 + 7 * 8 - 2 + 4\") == \"9.000000e+01\"\n    assert sum_prod(\"5 / 6 + 7 * 8 - 2 + 4\") == \"9.900000e+00\"\n    assert sum_prod(\"5 * (6 + 7) * 8 - 2 + 4\") == \"1.100000e+02\"\n    assert sum_prod(\"5 * (6 + 7 * 8) - 2 + 4\") == \"1.000000e+02\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7) * (8 - 2) + 4\") == \"6.000000e+01\"\n    assert sum_prod(\"5 * (6 + 7)",
    "3": "\n    # your code here\n    return\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression)\n\n# Test\nstrex",
    "4": "\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr.sort()\n        count = 1\n        for i in range(1, n):\n            if arr[i] == arr[i-1]:\n                count += 1\n            else:\n                if count > k:\n                    print(arr[i-1], end=\" \")\n                count = 1\n        if count > k:\n            print(arr[n-1])\n        else:\n            print()",
    "5": "\n    T = int(input())\n    for i in range(T):\n        N, K = map(int, input().split())\n        A = list(map(int, input().split()))\n        A.sort()\n        count = 0\n        for i in range(N):\n            if A[i] == A[i-1]:\n                count += 1\n            else:\n                if count >= K:\n                    for j in range(count):\n                        print(A[i-1], end=\" \")\n                count = 1\n        if count >= K:\n            for j in range(count):\n                print(A[-1], end=\" \")\n        print()\n",
    "6": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N == 1:\n            print(0)\n        else:\n            print(N*(N-1)//2)\n",
    "7": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N == 0:\n            print(0)\n        elif N == 1:\n            print(1)\n        elif N == 2:\n            print(1)\n        else:\n            print(N-1 + N-2)",
    "8": "\n    return len(args) + len(kwargs)",
    "9": "\n    return len(args)",
    "10": "\n    n, k, m = map(int, input().split())\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i - j >= 0:\n                c[i] = (c[i] + c[i - j]) % m\n    for i in range(n + 1):\n        print(c[i])\n",
    "11": "\n    N, K, M = map(int, input().split())\n    mod = 998244353\n    # dp[i][j] = number of multisets with i elements, j instances of each element, and average of j\n    dp = [[0 for _ in range(K + 1)] for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            for k in range(1, i + 1):\n                dp[i][j] += dp[i - k][j - 1] * k\n                dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[i - 1][j]\n            dp[i][j] %= M\n    for i in range(1, N + 1):\n        for j in range(K + 1):\n            dp[i][j] += dp[",
    "12": "\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    print(count)\n",
    "13": "\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    print(count)\n",
    "14": "\n    return max(numbers) - min(numbers)",
    "15": "\n    return max(numbers) - min(numbers)",
    "16": "\n    return ['{}: {}'.format(i, line) for i, line in enumerate(lines, 1)]",
    "17": "\n    return ['{}: {}'.format(i, line) for i, line in enumerate(lines, 1)]",
    "18": "\n    k = float(input())\n    n = 1\n    while k**n > 2:\n        n += 1\n    print(n)\n    for i in range(n-1):\n        print(i, k**(n-i-1))",
    "19": "\n    k = float(input())\n    n = int(k)\n    if k - n > 0.5:\n        n += 1\n    print(n)\n    for i in range(n-1):\n        print(i, k-0.1)\n"
}