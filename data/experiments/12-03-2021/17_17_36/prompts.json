{
    "0": "Python 3\n\"\"\"\nFind the first character that repeats in a String and return that character. \n\nExample 1:\nInput: first_dup('tweet')\nOutput: 't'\n\nExample 2:\nInput: first_dup('like')\nOutput: None\n\"\"\"\ndef first_dup(s):",
    "1": "Python 3\n\"\"\"\nFind the first character that repeats in a String and return that character. \n\n```python\nfirst_dup('tweet') => 't'\nfirst_dup('like') => None\n```\n\n*This is not the same as finding the character that repeats first.*\n*In that case, an input of 'tweet' would yield 'e'.*\n\"\"\"\ndef first_dup(s):",
    "2": "Python 3\n\"\"\"\nWrite a function that solves an algebraic expression given as a string and returns a string with the calculated value given in scientific notation with 5 decimal digits. The expression can include only sums and products. The numbers in the expression are in standard notation.\n\nExamples:\nInput:\nstrexpression = \"5 * 4 + 6\"\nOutput:\nsum_prod(strexpression) = \"2.60000e+01\"\n\"\"\"\ndef sum_prod(strexpression):",
    "3": "Python 3\n\"\"\"\nWrite a function that solves an algebraic expression given as a string. \n\n* The expression can include only sums and products. \n\n* The numbers in the expression are in standard notation (NOT scientific).\n\n* In contrast, the function should return a string with the calculated value given in scientific notation with 5 decimal digits. \n\n# Example:\n```python\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression) = \"2.60000e+01\"\n```\n\"\"\"\ndef sum_prod(strexpression):",
    "4": "Python 3\n\"\"\"\nYou are given an array of N natural numbers and most of them are repeated. find all numbers(in ascending order) whose frequency is strictly more than K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, two integers $N, K$.\n- N space-separated natural numbers.\n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N, K \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n5 1\n5 2 1 2 5\n\n-----Sample Output:-----\n2 5\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nChef has an array of N natural numbers most of them are repeated. Cheffina challenges chef to find all numbers(in ascending order) whose frequency is strictly more than K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, two integers $N, K$.\n- N space-separated natural numbers.\n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N, K \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n5 1\n5 2 1 2 5\n\n-----Sample Output:-----\n2 5\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n\nYou are given a integer N as an input. Write a code to print the average of the multiplication of the given number N with N-1 integer.\n\nExample:\nInput                            Output\n9                                   36\n5                                   10\n1                                    0\n2                                    1\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer as displayed on the screen.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n1\n7\n\n-----Sample Output:-----\n21\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThe chef was searching for his pen in the garage but he found his old machine with a display and some numbers on it. If some numbers entered then some different output occurs on the display. Chef wants to crack the algorithm that the machine is following.\nExample to identify the pattern :\nInput                            Output\n9                                   36\n5                                   10\n1                                    0\n2                                    1\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer as displayed on the screen.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n1\n7\n\n-----Sample Output:-----\n21\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n```if:python\nCreate a function `args_count`, that returns the count of passed arguments\n```\n```if:kotlin\nCreate a function `argsCount`, that returns the count of passed arguments\n```\n```if:ruby\nCreate a method `args_count`, that returns the count of passed arguments\n```\n```if:julia\nCreate a method `argscount`, that returns the count of passed arguments\n```\n```python\nargs_count(1, 2, 3) -> 3\nargs_count(1, 2, 3, 10) -> 4\n```\n\"\"\"\ndef args_count(*args, **kwargs):",
    "9": "Python 3\n\"\"\"\n```if:python\nCreate a function `args_count`, that returns the count of passed arguments\n```\n```if:kotlin\nCreate a function `argsCount`, that returns the count of passed arguments\n```\n```if:ruby\nCreate a method `args_count`, that returns the count of passed arguments\n```\n```if:julia\nCreate a method `argscount`, that returns the count of passed arguments\n```\n```python\nargs_count(1, 2, 3) -> 3\nargs_count(1, 2, 3, 10) -> 4\n```\n\"\"\"\ndef args_count(*args, **kwargs):",
    "10": "Python 3\n\"\"\"\nGiven positive integers N, K and M, solve the following problem for every integer x between 1 and N (inclusive):\n - Find the number, modulo M, of non-empty multisets containing between 0 and K (inclusive) instances of each of the integers 1, 2, 3 \\cdots, N such that the average of the elements is x.\n\n-----Constraints-----\n - 1 \\leq N, K \\leq 100\n - 10^8 \\leq M \\leq 10^9 + 9\n - M is prime.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K M\n\n-----Output-----\nUse the following format:\nc_1\nc_2\n:\nc_N\n\nHere, c_x should be the number, modulo M, of multisets such that the average of the elements is x.\n\n-----Sample Input-----\n3 1 998244353\n\n-----Sample Output-----\n1\n3\n1\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nGiven positive integers N, K and M, solve the following problem for every integer x between 1 and N (inclusive):\n - Find the number, modulo M, of non-empty multisets containing between 0 and K (inclusive) instances of each of the integers 1, 2, 3 \\cdots, N such that the average of the elements is x.\n\n-----Constraints-----\n - 1 \\leq N, K \\leq 100\n - 10^8 \\leq M \\leq 10^9 + 9\n - M is prime.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K M\n\n-----Output-----\nUse the following format:\nc_1\nc_2\n:\nc_N\n\nHere, c_x should be the number, modulo M, of multisets such that the average of the elements is x.\n\n-----Sample Input-----\n3 1 998244353\n\n-----Sample Output-----\n1\n3\n1\n\nConsider non-empty multisets containing between 0 and 1 instance(s) of each of the integers between 1 and 3. Among them, there are:\n - one multiset such that the average of the elements is k = 1: \\{1\\};\n - three multisets such that the average of the elements is k = 2: \\{2\\}, \\{1, 3\\}, \\{1, 2, 3\\};\n - one multiset such that the average of the elements is k = 3: \\{3\\}.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are  given n cards of  3 different colours placed in a line. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n-----Constraints-----\n- $1 \\leq n \\leq 50$\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nThere are n cards of different colours placed in a line, each of them can be either red, green or blue cards. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n-----Constraints-----\n- $1 \\leq n \\leq 50$\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven an array of numbers, return the difference between the largest and smallest values. The array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow.\n\nExamples:\nInput:\n[23, 3, 19, 21, 16] should return `20` (i.e., `23 - 3`).\nOutput:\n20\n\nInput:\n[1, 434, 555, 34, 112]\nOutput:\n554\n\"\"\"\ndef between_extremes(numbers):",
    "15": "Python 3\n\"\"\"\nGiven an array of numbers, return the difference between the largest and smallest values. \n\nFor example:\n\n`[23, 3, 19, 21, 16]` should return `20` (i.e., `23 - 3`).\n\n`[1, 434, 555, 34, 112]` should return `554` (i.e., `555 - 1`).\n\nThe array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow.\n\"\"\"\ndef between_extremes(numbers):",
    "16": "Python 3\n\"\"\"\nWrite a function which takes a list of strings and returns each line prepended by the correct number. The numbering starts at 1. The format is \"n: string\".\n\nExamples:\nInput:\nnumber([])\nOutput:\n[]\n\nInput:\nnumber([\"a\", \"b\", \"c\"])\nOutput:\n[\"1: a\", \"2: b\", \"3: c\"]\n\"\"\"\ndef number(lines):",
    "17": "Python 3\n\"\"\"\nYour team is writing a fancy new text editor and you've been tasked with implementing the line numbering.\n\nWrite a function which takes a list of strings and returns each line prepended by the correct number.\n\nThe numbering starts at 1. The format is `n: string`. Notice the colon and space in between.\n\n**Examples:**\n\n```python\nnumber([]) # => []\nnumber([\"a\", \"b\", \"c\"]) # => [\"1: a\", \"2: b\", \"3: c\"]\n```\n\"\"\"\ndef number(lines):",
    "18": "Python 3\n\"\"\"\nYou are given a number of magnitude 1.\nYou need to divide this number into as many positive parts as possible such that at any moment you can only divide one part into two smaller parts and \nthe length of larger part may not be larger than the length of shortest one, times some constant factor.\n\n-----Input-----\nOne floating-point number, 1 \u2264 k \u2264 1.999, meaning the stated constant factor. The number will have at most 3 digits after the decimal point.\n\n-----Output-----\n\nFirst, you should output one number n, the maximal achievable number of parts for the given value of the constant factor. Then, you should output any proof that this number of parts is in fact achievable: n-1 descriptions of dividing, using the following notation. At each step, you print two numbers: first, the index of the part that you want to divide into two; second, the length of the new number formed. It is assumed that the starting number has index 0. Each newly created number will be given the lowest possible free integer index (so, at the ith step this will be i). Each time, the size of number will be decreased by the size of the newly created number.\n\n-----Example-----\nInput:\n1.5\nOutput:\n4\n0 0.4\n0 0.3\n1 0.2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe Chef has one long loaf of bread of length 1. He wants to cut it into as many little loaves as he can. But he wants to adhere to the following rule: At any moment, the length of the longest loaf which he possesses may not be larger than the length of shortest one, times some constant factor. Every time, he is only allowed to cut exactly one loaf into two shorter ones.\n\n-----Input-----\nOne floating-point number, 1 \u2264 k \u2264 1.999, meaning the stated constant factor. The number will have at most 3 digits after the decimal point.\n\n-----Output-----\n\nFirst, you should output one number n, the maximal achievable number of loaves for the given value of the constant factor. Then, you should output any proof that this number of loaves is in fact achievable: n-1 descriptions of cutting, using the following notation. At each step, you print two numbers: first, the index of the loaf that you want to cut into two parts; second, the length of the newly created loaf (cut off from the original one). It is assumed that the starting loaf has index 0. Each newly created loaf will be given the lowest possible free integer index (so, at the ith step this will be i). Each time, the size of size of the original loaf will be decreased by the size of the newly created loaf.\n\n-----Example-----\nInput:\n1.5\nOutput:\n4\n0 0.4\n0 0.3\n1 0.2\n\"\"\"\ndef code():"
}