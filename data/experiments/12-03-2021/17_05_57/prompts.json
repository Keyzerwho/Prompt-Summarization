{
    "0": "Python 3\n\"\"\"\nYou are given $N$ nodes arranged in a cycle initialised to zero and a difference $K$. \nFind and return the minimum number of increments required so that each node is atleast $1$ and adjacent nodes have a difference of is atleast $K$.\n\n-----Input:-----\n- First line will contain $T$, the number of testcases. Then the testcases follow. \n- The only line of each testcase contains two space-separated integers $N$ and $K$. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the number of increments you need.\n\n-----Constraints-----\n- $1 \\leq T \\leq  10^6$\n- $2 \\leq  N \\leq  10^3$\n- $0 \\leq  K \\leq 10^4$ \n\n-----Sample Input:-----\n1 \n2 1\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nThe minimum number of increments required is $3$. One node needs to be incremented once and the other node needs to be incremented $2$ times.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nChef wants you to distribute candies among $N$ kids who are sitting in a circle. However, he wants to make some kids jealous of others. Thus, he wants you to distribute candies in such a way that there is a difference of at least $K$ candies between two adjacent kids. \nGiven the value of $N$ and $K$, you need to find the minimum number of candies you need to satisfy the given conditions, such that, each kid gets at least one candy.\n\n-----Input:-----\n- First line will contain $T$, the number of testcases. Then the testcases follow. \n- The only line of each testcase contains two space-separated integers $N$ and $K$. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the number of candies you need.\n\n-----Constraints-----\n- $1 \\leq T \\leq  10^6$\n- $2 \\leq  N \\leq  10^3$\n- $0 \\leq  K \\leq 10^4$ \n\n-----Sample Input:-----\n1 \n2 1\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nThe minimum number of candies required is $3$. One kid needs to have $1$ candy and the other needs to have $2$ candy to have a difference of $1$ candy between them.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n0,1,0,1,2,0,1,2,3,0,1,2,3,4........\nThe sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$.\nFind the Nth term of the sequence.\n\n-----Input:-----\n- The first-line will contain $T$, the number of test cases. Then the test case follows. \n- Each test case contains a single numbers N.\n\n-----Output:-----\nPrint the Nth element of the sequence\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N  \\leq 10^{18}$\n\n-----Sample Input:-----\n5\n8\n9\n20\n32\n109\n\n-----Sample Output:-----\n2\n3\n5\n4\n4\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nSandu, a teacher in Chefland introduced his students to a new sequence i.e.\n0,1,0,1,2,0,1,2,3,0,1,2,3,4........\nThe Sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$\nStudents being curious about the sequence asks the Nth element of the sequence. Help Sandu to answer the Students\n\n-----Input:-----\n- The first-line will contain $T$, the number of test cases. Then the test case follows. \n- Each test case contains a single numbers N.\n\n-----Output:-----\nPrint the Nth element of the sequence\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N  \\leq 10^{18}$\n\n-----Sample Input:-----\n5\n8\n9\n20\n32\n109\n\n-----Sample Output:-----\n2\n3\n5\n4\n4\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven an integral number, determine if it's a square number.\n\nIn mathematics, a square number is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nExamples:\n\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n\"\"\"\ndef is_square(n):",
    "5": "Python 3\n\"\"\"\n## A square of squares\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\n\nHowever, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain\u2026 Wait! That's it! You just have to check if your number of building blocks is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nThe tests will _always_ use some integral number, so don't worry about that in dynamic typed languages.\n\n### Examples\n\n```\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n```\n\"\"\"\ndef is_square(n):",
    "6": "Python 3\n\"\"\"\nWe stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.\u00a0 \nEach glass holds one cup of champagne.\n\nThen, some champagne is poured in the first glass at the top.\u00a0 \nWhen the top most glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 \nWhen those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\n\nNow after pouring some non-negative integer cups of champagne, return how full the j-th glass in the i-th row is (both i and j are 0 indexed.)\n\nGlasses poured\u00a0will\u00a0be\u00a0in the range of [0, 10 ^ 9].\ni and j will be in the range of [0, 99].\n\u00a0\n\nExample 1:\nInput: poured = 1, query_glass = 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). \nThere will be no excess liquid so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput: poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. \nThe glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\"\"\"\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:",
    "7": "Python 3\n\"\"\"\nWe stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.\u00a0 \nEach glass holds one cup (250ml) of champagne.\n\nThen, some champagne is poured in the first glass at the top.\u00a0 \nWhen the top most glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 \nWhen those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has it's excess champagne fall on the floor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full.\u00a0 \nAfter two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 \nAfter three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 \nAfter four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\n\n\nNow after pouring some non-negative integer cups of champagne, return how full the j-th glass in the i-th row is (both i and j are 0 indexed.)\n\n\u00a0\n\n\nExample 1:\nInput: poured = 1, query_glass = 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput: poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\n\n\u00a0\n\nNote:\n\n\n       poured\u00a0will\u00a0be\u00a0in the range of [0, 10 ^ 9].\n       query_glass and query_row will be in the range of [0, 99].\n\"\"\"\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:",
    "8": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array.\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$, what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array (after the removal, the remaining parts are concatenated).\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$ (making them impossible to remove), what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\n-----Note-----\n\nExplanation of the first query:\n\nAfter making first $x = 3$ and last $y = 1$ elements impossible to remove, $a$ becomes $[\\times, \\times, \\times, 9, 5, 4, 6, 5, 7, 8, 3, 11, \\times]$ (we represent $14$ as $\\times$ for clarity).\n\nHere is a strategy that removes $5$ elements (the element removed is colored in red):  $[\\times, \\times, \\times, 9, \\color{red}{5}, 4, 6, 5, 7, 8, 3, 11, \\times]$  $[\\times, \\times, \\times, 9, 4, 6, 5, 7, 8, 3, \\color{red}{11}, \\times]$  $[\\times, \\times, \\times, 9, 4, \\color{red}{6}, 5, 7, 8, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 7, \\color{red}{8}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, \\color{red}{7}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 3, \\times]$ (final state) \n\nIt is impossible to remove more than $5$ elements, hence the weight is $5$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nThe input given are two series of non-negative integers following one of the two types of probability distributions:\n  \n  Poisson (d'avril) distribution: the probability of getting an answer k is $\\frac{p^{k} e^{-P}}{k !}$ for k = 0, 1, 2, 3, ...,  Uniform distribution: the probability of getting an answer k is $\\frac{1}{2 P + 1}$ for k = 0, 1, 2, ..., 2P. \n\nYou need to output whether the series follows a Poisson or a uniform distribution?\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nHeidi is a statistician to the core, and she likes to study the evolution of marmot populations in each of V (1 \u2264 V \u2264 100) villages! So it comes that every spring, when Heidi sees the first snowdrops sprout in the meadows around her barn, she impatiently dons her snowshoes and sets out to the Alps, to welcome her friends the marmots to a new season of thrilling adventures.\n\nArriving in a village, Heidi asks each and every marmot she comes across for the number of inhabitants of that village. This year, the marmots decide to play an April Fools' joke on Heidi. Instead of consistently providing the exact number of inhabitants P (10 \u2264 P \u2264 1000) of the village, they respond with a random non-negative integer k, drawn from one of two types of probability distributions:\n\n  Poisson (d'avril) distribution: the probability of getting an answer k is $\\frac{p^{k} e^{-P}}{k !}$ for k = 0, 1, 2, 3, ...,  Uniform distribution: the probability of getting an answer k is $\\frac{1}{2 P + 1}$ for k = 0, 1, 2, ..., 2P. \n\nHeidi collects exactly 250 answers per village. Every village follows either the Poisson or the uniform distribution. Heidi cannot tell marmots apart, so she may query some marmots several times, and each time the marmot will answer with a new number drawn from the village's distribution.\n\nCan you help Heidi to find out whether a village follows a Poisson or a uniform distribution?\n\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\n\n\n-----Note-----\n\nThe full example input is visually represented below, along with the probability distribution function it was drawn from (the y-axis is labeled by its values multiplied by 250).\n\n[Image]\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven a text and a character, fully mutate the text to the character. If the text or the character are empty, return an empty string.  \n\n# Example\nInput:\ntext = \"abc\"\ncharacter = \"z\"\nOutput:\ntext = \"zzz\"\n\n\"\"\"\ndef contamination(text, char):",
    "13": "Python 3\n\"\"\"\nAn AI has infected a text with a character!! \n\nThis text is now **fully mutated** to this character.\n\nIf the text or the character are empty, return an empty string.  \nThere will never be a case when both are empty as nothing is going on!!\n\n**Note:** The character is a string of length 1 or an empty string.\n\n# Example\n```python\ntext before = \"abc\"\ncharacter   = \"z\"\ntext after  = \"zzz\"\n```\n\"\"\"\ndef contamination(text, char):",
    "14": "Python 3\n\"\"\"\nGiven a number $p$ and $n$ numbers $k_1, \\ldots, k_n$, find p^{k_i}$ and divide that into two disjoint sets, minimizing the absolute difference between sums of numbers in\neach set. Find the minimal absolute difference. Output the result modulo $10^{9}+7$.\n\nIn the first test case of the example, there're the following numbers: $4$, $8$, $16$, $16$, and $8$. We can divide them into such two sets: ${4, 8, 16}$ and ${8, 16}$. \nThen the difference between the sums of numbers in sets would be $4$.\n\n-----Input-----\n\nInput consists of multiple test cases. The first line contains one integer $t$ $(1 \\leq t \\leq 10^5)$\u00a0\u2014 the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers $n$ and $p$ $(1 \\leq n, p \\leq 10^6)$. The second line contains $n$ integers $k_i$ $(0 \\leq k_i \\leq 10^6)$.\n\nThe sum of $n$ over all test cases doesn't exceed $10^6$.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the reminder of division the answer by $1\\,000\\,000\\,007$.\n\n\n-----Example-----\nInput\n4\n5 2\n2 3 4 4 3\n3 1\n2 10 1000\n4 5\n0 1 1 100\n1 8\n89\n\nOutput\n4\n1\n146981438\n747093407\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nJohnny has just found the new, great tutorial: \"How to become a grandmaster?\". The tutorial tells many strange and unexpected for Johnny things, such as you have to be patient or that very important is solving many harder and harder problems. \n\nThe boy has found an online judge with tasks divided by topics they cover. He has picked $p^{k_i}$ problems from $i$-th category ($p$ is his favorite number). He wants to solve them in two weeks (the patience condition is too hard for Johnny, so for simplicity, he looks only at easy tasks, which can be solved in such a period). Now our future grandmaster has to decide which topics to cover first and which the second week. Help him assign topics in such a way, that workload is balanced.\n\nFormally, given $n$ numbers $p^{k_i}$, the boy wants to divide them into two disjoint sets, minimizing the absolute difference between sums of numbers in each set. Find the minimal absolute difference. Output the result modulo $10^{9}+7$.\n\n\n-----Input-----\n\nInput consists of multiple test cases. The first line contains one integer $t$ $(1 \\leq t \\leq 10^5)$\u00a0\u2014 the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers $n$ and $p$ $(1 \\leq n, p \\leq 10^6)$. The second line contains $n$ integers $k_i$ $(0 \\leq k_i \\leq 10^6)$.\n\nThe sum of $n$ over all test cases doesn't exceed $10^6$.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the reminder of division the answer by $1\\,000\\,000\\,007$.\n\n\n-----Example-----\nInput\n4\n5 2\n2 3 4 4 3\n3 1\n2 10 1000\n4 5\n0 1 1 100\n1 8\n89\n\nOutput\n4\n1\n146981438\n747093407\n\n\n\n-----Note-----\n\nYou have to minimize the difference, not it's remainder. For example, if the minimum difference is equal to $2$, but there is also a distribution where the difference is $10^9 + 8$, then the answer is $2$, not $1$.\n\nIn the first test case of the example, there're the following numbers: $4$, $8$, $16$, $16$, and $8$. We can divide them into such two sets: ${4, 8, 16}$ and ${8, 16}$. Then the difference between the sums of numbers in sets would be $4$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nDisplay whether the number $(N)$ obtained from user is a one digit number, 2 digit number, 3 digit number or more than 3 digit number\n\n-----Input:-----\n- First line will contain the number $N$,\n\n-----Output:-----\nPrint \"1\" if N is a 1 digit number.\nPrint \"2\" if N is a 2 digit number.\nPrint \"3\" if N is a 3 digit number.\nPrint \"More than 3 digits\" if N has more than 3 digits.\n\n-----Constraints-----\n- $0 \\leq N \\leq 1000000$\n\n-----Sample Input:-----\n9\n\n-----Sample Output:-----\n1\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nWrite a program to obtain a number $(N)$ from the user and display whether the number is a one digit number, 2 digit number, 3 digit number or more than 3 digit number\n\n-----Input:-----\n- First line will contain the number $N$,\n\n-----Output:-----\nPrint \"1\" if N is a 1 digit number.\nPrint \"2\" if N is a 2 digit number.\nPrint \"3\" if N is a 3 digit number.\nPrint \"More than 3 digits\" if N has more than 3 digits.\n\n-----Constraints-----\n- $0 \\leq N \\leq 1000000$\n\n-----Sample Input:-----\n9\n\n-----Sample Output:-----\n1\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given six denominations of a currency, namely, Rs. 1, Rs. 2, Rs. 5, Rs. 10, Rs. 50, Rs. 100.\nIf the sum of Rs. N is input, write a program to computer smallest number of notes that will combine to give Rs. N.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the smallest number of notes that will combine to give N, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n1200\n500\n242\n\nOutput\n12\n5\n7\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nConsider a currency system in which there are notes of six denominations, namely, Rs. 1, Rs. 2, Rs. 5, Rs. 10, Rs. 50, Rs. 100.\nIf the sum of Rs. N is input, write a program to computer smallest number of notes that will combine to give Rs. N.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the smallest number of notes that will combine to give N, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n1200\n500\n242\n\nOutput\n12\n5\n7\n\"\"\"\ndef code():"
}