{
    "0": "Python 3\n\"\"\"\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "1": "Python 3\n\"\"\"\nKontti language is a finnish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "2": "Python 3\n\"\"\"\n\n\nYou are given three angles of a triangle.Check whether these angles form a valid triangle or not. \n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWrite a program to check whether a triangle is valid or not, when the three angles of the triangle are the inputs. A triangle is valid if the sum of all the three angles is equal to 180 degrees.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nThere were $2n$ values of A and B arranged in a list. You should start at the middle of the list. $n$ values to the left and $n$ values to the right.\n\nYou can choose to make a value zero from either the first non-zero value to left or the first non-zero value to right.\n\nFinally, at the end the number of A's and B's should become the same.\n\nFor example, this might be the result: [Image] He has eaten $1$ jar to his left and then $5$ jars to his right. There remained exactly $3$ full jars of both strawberry and blueberry jam. \n\nJars are numbered from $1$ to $2n$ from left to right, so Karlsson initially stands between jars $n$ and $n+1$.\n\nWhat is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left?\n\nYour program should answer $t$ independent test cases.\n\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le 2$) \u2014 $a_i=1$ means that the $i$-th value from the left is A and $a_i=2$ means that it is B.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 the minimum number of jars Karlsson is required to empty so that an equal number of A and B is left.\n\n\n-----Example-----\nInput\n4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n\nOutput\n6\n0\n6\n2\n\n\n\n-----Note-----\n\nThe picture from the statement describes the first test case.\n\nIn the second test case the number of A and B is already equal.\n\nIn the third test you are required to convert all $6$ values so that there remain $0$ vaues of both types.\n\nIn the fourth test case you can make zero either the second and the third values or the third and the fourth values. The both scenarios will leave $1$ jar of both types.\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nKarlsson has recently discovered a huge stock of berry jam jars in the basement of the house. More specifically, there were $2n$ jars of strawberry and blueberry jam.\n\nAll the $2n$ jars are arranged in a row. The stairs to the basement are exactly in the middle of that row. So when Karlsson enters the basement, he sees exactly $n$ jars to his left and $n$ jars to his right.\n\nFor example, the basement might look like this: [Image] \n\nBeing the starightforward man he is, he immediately starts eating the jam. In one minute he chooses to empty either the first non-empty jar to his left or the first non-empty jar to his right.\n\nFinally, Karlsson decided that at the end the amount of full strawberry and blueberry jam jars should become the same.\n\nFor example, this might be the result: [Image] He has eaten $1$ jar to his left and then $5$ jars to his right. There remained exactly $3$ full jars of both strawberry and blueberry jam. \n\nJars are numbered from $1$ to $2n$ from left to right, so Karlsson initially stands between jars $n$ and $n+1$.\n\nWhat is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left?\n\nYour program should answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$).\n\nThe second line of each test case contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$ ($1 \\le a_i \\le 2$) \u2014 $a_i=1$ means that the $i$-th jar from the left is a strawberry jam jar and $a_i=2$ means that it is a blueberry jam jar.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print the answer to it \u2014 the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left.\n\n\n-----Example-----\nInput\n4\n6\n1 1 1 2 2 1 2 1 2 1 1 2\n2\n1 2 1 2\n3\n1 1 1 1 1 1\n2\n2 1 1 1\n\nOutput\n6\n0\n6\n2\n\n\n\n-----Note-----\n\nThe picture from the statement describes the first test case.\n\nIn the second test case the number of strawberry and blueberry jam jars is already equal.\n\nIn the third test case Karlsson is required to eat all $6$ jars so that there remain $0$ jars of both jams.\n\nIn the fourth test case Karlsson can empty either the second and the third jars or the third and the fourth one. The both scenarios will leave $1$ jar of both jams.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou have to find the number of squares of odd side length of the a N*N chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----s\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nChef has recently been playing a lot of chess in preparation for the ICCT (International Chef Chess Tournament).\nSince putting in long hours is not an easy task, Chef's mind wanders elsewhere. He starts counting the number of squares with odd side length on his chessboard..\nHowever, Chef is not satisfied. He wants to know the number of squares of odd side length on a generic $N*N$ chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nImplement the ToUnderscore() method to translate a camelCase name into an underscore separated name. \n\nExamples:\nInput:\n\"ThisIsAUnitTest\"\nOutput:\n\"This_Is_A_Unit_Test\"\n\nInput:\n\"Calculate15Plus5Equals20\"\nOutput:\n\"Calculate_15_Plus_5_Equals_20\"\n\nInput:\n\"This_Is_Already_Split_Correct\"\nOutput:\n\"This_Is_Already_Split_Correct\"\n\nInput:\n\"ThisIs_Not_SplitCorrect\"\nOutput:\n\"This_Is_Not_Split_Correct\"\n\nInput:\n\"_UnderscoreMarked_Test_Name_\"\nOutput:\n_Underscore_Marked_Test_Name_\"\n\"\"\"\ndef toUnderScore(name):",
    "9": "Python 3\n\"\"\"\nYou wrote all your unit test names in camelCase.\nBut some of your colleagues have troubles reading these long test names.\nSo you make a compromise to switch to underscore separation.\n\nTo make these changes fast you wrote a class to translate a camelCase name\ninto an underscore separated name.\n\nImplement the ToUnderscore() method.\n\nExample:\n\n`\"ThisIsAUnitTest\" => \"This_Is_A_Unit_Test\"`\n\n\n**But of course there are always special cases...**\n\nYou also have some calculation tests. Make sure the results don't get split by underscores.\nSo only add an underscore in front of the first number.\n\nAlso Some people already used underscore names in their tests. You don't want to change them.\nBut if they are not split correct you should adjust them.\n\nSome of your colleagues mark their tests with a leading and trailing underscore.\nDon't remove this.\n\nAnd of course you should handle empty strings to avoid unnecessary errors. Just return an empty string then.\n\nExample:\n\n`\"Calculate15Plus5Equals20\" => \"Calculate_15_Plus_5_Equals_20\"`\n\n`\"This_Is_Already_Split_Correct\" => \"This_Is_Already_Split_Correct\"`\n\n`\"ThisIs_Not_SplitCorrect\" => \"This_Is_Not_Split_Correct\"`\n\n`\"_UnderscoreMarked_Test_Name_\" => _Underscore_Marked_Test_Name_\"`\n\"\"\"\ndef toUnderScore(name):",
    "10": "Python 3\n\"\"\"\n\nDecode the given pattern and generate new pattern for number K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n\nYou are given N teams which can play with each exactly one time.Each team is assigned a strength as a positive integer.Find the sum of all the absolute difference between the strengths of all the possible two matches.\n\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, total of absolute difference between the strengths of all the possible two matches.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nZonal Computing Olympiad 2013, 10 Nov 2012\nN teams participate in a league cricket tournament on Mars, where each pair of distinct teams plays each other exactly once. Thus, there are a total of (N \u00d7 (N-1))/2 matches. An expert has assigned a strength to each team, a positive integer. Strangely, the Martian crowds love one-sided matches and the advertising revenue earned from a match is the absolute value of the difference between the strengths of the two matches. Given the strengths of the N teams, find the total advertising revenue earned from all the matches.\n\nFor example, suppose N is 4 and the team strengths for teams 1, 2, 3, and 4 are 3, 10, 3, and 5 respectively. Then the advertising revenues from the 6 matches are as follows:\n\nMatch Team A Team B Ad revenue 1 1 2 7  2 1 3 0  3 1 4 2  4 2 3 7  5 2 4 5  6 3 4 2 \n\nThus the total advertising revenue is 23.\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, the total advertising revenue from the tournament.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n-----Test data-----\nIn all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.\n- Subtask 1 (30 marks) : 2 \u2264 N \u2264 1,000.\n- Subtask 2 (70 marks) : 2 \u2264 N \u2264 200,000.\n\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1,2.\n- Subtask 2: Testcases 3,4,5.\n\n-----Note-----\nThe answer might not fit in a variable of type int. We recommend that type long long be used for computing all advertising revenues. If you use printf and scanf, you can use %lld for long long.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a sequence a = \\{a_1, ..., a_N\\} with all zeros, and a sequence b = \\{b_1, ..., b_N\\} consisting of 0 and 1. The length of both is N.\nYou can perform Q kinds of operations. The i-th operation is as follows:\n - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1.\nMinimize the hamming distance between a and b.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200,000\n - b consists of 0 and 1.\n - 1 \\leq Q \\leq 200,000\n - 1 \\leq l_i \\leq r_i \\leq N\n - If i \\neq j, either l_i \\neq l_j or r_i \\neq r_j.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nb_1 b_2 ... b_N\nQ\nl_1 r_1\nl_2 r_2\n:\nl_Q r_Q\n\n-----Output-----\nPrint the minimum possible hamming distance.\n\n-----Sample Input-----\n3\n1 0 1\n1\n1 3\n\n-----Sample Output-----\n1\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a sequence a = \\{a_1, ..., a_N\\} with all zeros, and a sequence b = \\{b_1, ..., b_N\\} consisting of 0 and 1. The length of both is N.\nYou can perform Q kinds of operations. The i-th operation is as follows:\n - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1.\nMinimize the hamming distance between a and b, that is, the number of i such that a_i \\neq b_i, by performing some of the Q operations.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200,000\n - b consists of 0 and 1.\n - 1 \\leq Q \\leq 200,000\n - 1 \\leq l_i \\leq r_i \\leq N\n - If i \\neq j, either l_i \\neq l_j or r_i \\neq r_j.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nb_1 b_2 ... b_N\nQ\nl_1 r_1\nl_2 r_2\n:\nl_Q r_Q\n\n-----Output-----\nPrint the minimum possible hamming distance.\n\n-----Sample Input-----\n3\n1 0 1\n1\n1 3\n\n-----Sample Output-----\n1\n\nIf you choose to perform the operation, a will become \\{1, 1, 1\\}, for a hamming distance of 1.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given a string $s$ of even length $n$. String $s$ is binary.\n\nString $s$ has exactly $\\frac{n}{2}$ zeroes and $\\frac{n}{2}$ ones ($n$ is even).\n\nIn one operation you can reverse any substring of $s$. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string $s$ alternating? A string is alternating if $s_i \\neq s_{i + 1}$ for all $i$. There are two types of alternating strings in general: 01010101... or 10101010...\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$; $n$ is even)\u00a0\u2014 the length of string $s$.\n\nThe second line of each test case contains a binary string $s$ of length $n$ ($s_i \\in$ {0, 1}). String $s$ has exactly $\\frac{n}{2}$ zeroes and $\\frac{n}{2}$ ones.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the minimum number of operations to make $s$ alternating.\n\n\n-----Example-----\nInput\n3\n2\n10\n4\n0110\n8\n11101000\n\nOutput\n0\n1\n2\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given a string $s$ of even length $n$. String $s$ is binary, in other words, consists only of 0's and 1's.\n\nString $s$ has exactly $\\frac{n}{2}$ zeroes and $\\frac{n}{2}$ ones ($n$ is even).\n\nIn one operation you can reverse any substring of $s$. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string $s$ alternating? A string is alternating if $s_i \\neq s_{i + 1}$ for all $i$. There are two types of alternating strings in general: 01010101... or 10101010...\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($2 \\le n \\le 10^5$; $n$ is even)\u00a0\u2014 the length of string $s$.\n\nThe second line of each test case contains a binary string $s$ of length $n$ ($s_i \\in$ {0, 1}). String $s$ has exactly $\\frac{n}{2}$ zeroes and $\\frac{n}{2}$ ones.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the minimum number of operations to make $s$ alternating.\n\n\n-----Example-----\nInput\n3\n2\n10\n4\n0110\n8\n11101000\n\nOutput\n0\n1\n2\n\n\n\n-----Note-----\n\nIn the first test case, string 10 is already alternating.\n\nIn the second test case, we can, for example, reverse the last two elements of $s$ and get: 0110 $\\rightarrow$ 0101.\n\nIn the third test case, we can, for example, make the following two operations:   11101000 $\\rightarrow$ 10101100;  10101100 $\\rightarrow$ 10101010.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n`N` candles are placed in a row, some of them are initially lit. For each candle from the 1st to the Nth the following algorithm is applied: if the observed candle is lit then states of this candle and all candles before it are changed to the opposite. Which candles will remain lit after applying the algorithm to all candles in the order they are placed in the line?\n\n# Example\n\n For `a = [1, 1, 1, 1, 1]`, the output should be `[0, 1, 0, 1, 0].`\n \n For `a = [0, 0]`, the output should be `[0, 0].`\n\n# Input/Output\n\n - `[input]` integer array `a`\n\n     Initial situation - array of zeros and ones of length N, 1 means that the corresponding candle is lit.\n\n    Constraints: `2 \u2264 a.length \u2264 5000.`\n\n - `[output]` an integer array\n\n    Situation after applying the algorithm - array in the same format as input with the same length.\n\"\"\"\ndef switch_lights(a):",
    "19": "Python 3\n\"\"\"\n# Task\n `N` candles are placed in a row, some of them are initially lit. For each candle from the 1st to the Nth the following algorithm is applied: if the observed candle is lit then states of this candle and all candles before it are changed to the opposite. Which candles will remain lit after applying the algorithm to all candles in the order they are placed in the line?\n\n# Example\n\n For `a = [1, 1, 1, 1, 1]`, the output should be `[0, 1, 0, 1, 0].`\n\n Check out the image below for better understanding:\n \n \n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/switchLights/img/example.png?_tm=1484040239470)\n \n \n \n For `a = [0, 0]`, the output should be `[0, 0].`\n\n The candles are not initially lit, so their states are not altered by the algorithm.\n\n# Input/Output\n\n - `[input]` integer array `a`\n\n     Initial situation - array of zeros and ones of length N, 1 means that the corresponding candle is lit.\n\n    Constraints: `2 \u2264 a.length \u2264 5000.`\n\n - `[output]` an integer array\n\n    Situation after applying the algorithm - array in the same format as input with the same length.\n\"\"\"\ndef switch_lights(a):"
}