{
    "0": "Python 3\n\"\"\"\nYou need to write the method SharedBits that returns true if 2 integers share at least two '1' bits. Assume that all numbers are positive\n\nFor example\nint seven = 7;    //0111\nint ten = 10;     //1010\nint fifteen = 15; //1111\nSharedBits(seven, ten);     //false\nSharedBits(seven, fifteen); //true\nSharedBits(ten, fifteen);   //true\n\n- seven and ten share only a single '1' (at index 3)\n- seven and fifteen share 3 bits (at indexes 1, 2, and 3)\n- ten and fifteen  share 2 bits (at indexes 0 and 2)\n\nHint: you can do this with just string manipulation, but binary operators will make your life much easier.\n\"\"\"\ndef shared_bits(a, b):",
    "1": "Python 3\n\"\"\"\nIn this Kata you need to write the method SharedBits that returns true if 2 integers share at least two '1' bits. For simplicity assume that all numbers are positive\n\nFor example\nint seven = 7;    //0111\nint ten = 10;     //1010\nint fifteen = 15; //1111\nSharedBits(seven, ten);     //false\nSharedBits(seven, fifteen); //true\nSharedBits(ten, fifteen);   //true\n\n- seven and ten share only a single '1' (at index 3)\n- seven and fifteen share 3 bits (at indexes 1, 2, and 3)\n- ten and fifteen  share 2 bits (at indexes 0 and 2)\n\nHint: you can do this with just string manipulation, but binary operators will make your life much easier.\n\"\"\"\ndef shared_bits(a, b):",
    "2": "Python 3\n\"\"\"\nYou are given $n$ points on the plane. The polygon formed from all the $n$ points is strictly convex, that is, the polygon is convex, and there are no three collinear points. The points are numbered from $1$ to $n$, in clockwise order.\n\nWe define the distance between two points $p_1 = (x_1, y_1)$ and $p_2 = (x_2, y_2)$ as their Manhattan distance: $$d(p_1, p_2) = |x_1 - x_2| + |y_1 - y_2|.$$\n\nFurthermore, we define the perimeter of a polygon, as the sum of Manhattan distances between all adjacent pairs of points on it; if the points on the polygon are ordered as $p_1, p_2, \\ldots, p_k$ $(k \\geq 3)$, then the perimeter of the polygon is $d(p_1, p_2) + d(p_2, p_3) + \\ldots + d(p_k, p_1)$.\n\nFor some parameter $k$, let's consider all the polygons that can be formed from the given set of points, having any $k$ vertices, such that the polygon is not self-intersecting. For each such polygon, let's consider its perimeter. Over all such perimeters, we define $f(k)$ to be the maximal perimeter.\n\nIn the middle polygon, the order of points ($p_1, p_3, p_2, p_4$) is not valid, since it is a self-intersecting polygon. The right polygon (whose edges resemble the Manhattan distance) has the same order and is not self-intersecting, but we consider edges as straight lines. The correct way to draw this polygon is ($p_1, p_2, p_3, p_4$), which is the left polygon.\n\nYour task is to compute $f(3), f(4), \\ldots, f(n)$. In other words, find the maximum possible perimeter for each possible number of points (i.e. $3$ to $n$).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 3\\cdot 10^5$)\u00a0\u2014 the number of points. \n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^8 \\leq x_i, y_i \\leq 10^8$)\u00a0\u2014 the coordinates of point $p_i$.\n\nThe set of points is guaranteed to be convex, all points are distinct, the points are ordered in clockwise order, and there will be no three collinear points.\n\n\n-----Output-----\n\nFor each $i$ ($3\\leq i\\leq n$), output $f(i)$.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 3\n3 0\n1 3\n\nOutput\n12 14 \nInput\n3\n0 0\n0 2\n2 0\n\nOutput\n8 \n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are given $n$ points on the plane. The polygon formed from all the $n$ points is strictly convex, that is, the polygon is convex, and there are no three collinear points (i.e. lying in the same straight line). The points are numbered from $1$ to $n$, in clockwise order.\n\nWe define the distance between two points $p_1 = (x_1, y_1)$ and $p_2 = (x_2, y_2)$ as their Manhattan distance: $$d(p_1, p_2) = |x_1 - x_2| + |y_1 - y_2|.$$\n\nFurthermore, we define the perimeter of a polygon, as the sum of Manhattan distances between all adjacent pairs of points on it; if the points on the polygon are ordered as $p_1, p_2, \\ldots, p_k$ $(k \\geq 3)$, then the perimeter of the polygon is $d(p_1, p_2) + d(p_2, p_3) + \\ldots + d(p_k, p_1)$.\n\nFor some parameter $k$, let's consider all the polygons that can be formed from the given set of points, having any $k$ vertices, such that the polygon is not self-intersecting. For each such polygon, let's consider its perimeter. Over all such perimeters, we define $f(k)$ to be the maximal perimeter.\n\nPlease note, when checking whether a polygon is self-intersecting, that the edges of a polygon are still drawn as straight lines. For instance, in the following pictures:\n\n [Image] \n\nIn the middle polygon, the order of points ($p_1, p_3, p_2, p_4$) is not valid, since it is a self-intersecting polygon. The right polygon (whose edges resemble the Manhattan distance) has the same order and is not self-intersecting, but we consider edges as straight lines. The correct way to draw this polygon is ($p_1, p_2, p_3, p_4$), which is the left polygon.\n\nYour task is to compute $f(3), f(4), \\ldots, f(n)$. In other words, find the maximum possible perimeter for each possible number of points (i.e. $3$ to $n$).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 3\\cdot 10^5$)\u00a0\u2014 the number of points. \n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^8 \\leq x_i, y_i \\leq 10^8$)\u00a0\u2014 the coordinates of point $p_i$.\n\nThe set of points is guaranteed to be convex, all points are distinct, the points are ordered in clockwise order, and there will be no three collinear points.\n\n\n-----Output-----\n\nFor each $i$ ($3\\leq i\\leq n$), output $f(i)$.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 3\n3 0\n1 3\n\nOutput\n12 14 \nInput\n3\n0 0\n0 2\n2 0\n\nOutput\n8 \n\n\n-----Note-----\n\nIn the first example, for $f(3)$, we consider four possible polygons:   ($p_1, p_2, p_3$), with perimeter $12$.  ($p_1, p_2, p_4$), with perimeter $8$.  ($p_1, p_3, p_4$), with perimeter $12$.  ($p_2, p_3, p_4$), with perimeter $12$. \n\nFor $f(4)$, there is only one option, taking all the given points. Its perimeter $14$.\n\nIn the second example, there is only one possible polygon. Its perimeter is $8$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given an array of integers. You can permute its integers. You want to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Find the maximal number of such integers.\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given an array of integers. Vasya can permute (change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers.\n\nFor instance, if we are given an array $[10, 20, 30, 40]$, we can permute it so that it becomes $[20, 40, 10, 30]$. Then on the first and the second positions the integers became larger ($20>10$, $40>20$) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals $2$. Read the note for the first example, there is one more demonstrative test case.\n\nHelp Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, one of the best permutations is $[1, 5, 5, 3, 10, 1, 1]$. On the positions from second to fifth the elements became larger, so the answer for this permutation is 4.\n\nIn the second sample, there is no way to increase any element with a permutation, so the answer is 0.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Task\n\nImplement a method to return how many riders are necessary to get the mail from one end to the other. Each rider travels never more than 100 miles.\n\nA rider may go missing and the rider's absence would be noticed at the next station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer. \n\nstations is a list of miles from one station to the next along the Pony Express route.\nstationX is the number of the station where the rider's absence was noticed.\n\n# Example\n\nInput:\nstations = [43, 23, 40, 13]\nstationX = 4\nOutput:\n3\nExplanation:\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 takes mail bags from Rider 1 at station S3\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n\"\"\"\ndef riders(stations, station_x):",
    "7": "Python 3\n\"\"\"\n# A History Lesson\n\nThe Pony Express was a mail service operating in the US in 1859-60.\n\n\n\n\n\nIt reduced the time for messages to travel between the Atlantic and Pacific coasts to about 10 days, before it was made obsolete by the transcontinental telegraph.\n\n# How it worked\n\nThere were a number of *stations*, where:\n\n\n* The rider switched to a fresh horse and carried on, or\n\n* The mail bag was handed over to the next rider\n\n\n# Kata Task\n\n\n`stations` is a list/array of distances (miles) from one station to the next along the Pony Express route.\n\nImplement the `riders` method/function, to return how many riders are necessary to get the mail from one end to the other.\n\n##  Missing rider\n\nIn this version of the Kata a rider may go missing. In practice, this could be for a number of reasons - a lame horse, an accidental fall, foul play... \n\nAfter some time, the rider's absence would be noticed at the **next** station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer (or another substitute rider if necessary). \n\n`stationX` is the number (2..N) of the station where the rider's absence was noticed.\n\n# Notes\n\n* Each rider travels as far as he can, but never more than 100 miles.\n\n# Example\n\nGIven\n\n* `stations = [43, 23, 40, 13]`\n\n* `stationX = 4`\n\nSo\n\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 (at station S3) takes mail bags from Rider 1\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n**Answer:** \n3 riders\n\n\n\n\n*Good Luck.\nDM.*\n\n---\n\nSee also\n* The Pony Express\n* The Pony Express (missing rider)\n\"\"\"\ndef riders(stations, station_x):",
    "8": "Python 3\n\"\"\"\nYou are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction.\n\nA fraction in notation with base $b$ is finite if it contains finite number of numerals after the decimal point.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.\n\n\n-----Output-----\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n\n-----Examples-----\nInput\n2\n6 12 10\n4 3 10\n\nOutput\nFinite\nInfinite\n\nInput\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n\nOutput\nFinite\nFinite\nFinite\nInfinite\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction.\n\nA fraction in notation with base $b$ is finite if it contains finite number of numerals after the decimal point. It is also possible that a fraction has zero numerals after the decimal point.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.\n\n\n-----Output-----\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n\n-----Examples-----\nInput\n2\n6 12 10\n4 3 10\n\nOutput\nFinite\nInfinite\n\nInput\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n\nOutput\nFinite\nFinite\nFinite\nInfinite\n\n\n\n-----Note-----\n\n$\\frac{6}{12} = \\frac{1}{2} = 0,5_{10}$\n\n$\\frac{4}{3} = 1,(3)_{10}$\n\n$\\frac{9}{36} = \\frac{1}{4} = 0,01_2$\n\n$\\frac{4}{12} = \\frac{1}{3} = 0,1_3$\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n\nYou are given an array $a$ of item of size $N$.The ith item is of the type $a[i]$. You can choose one type of item in a day and purchase at most 2 items of that type.Find out the minimum number of days in which all items are purchased.\n\n-----Input:-----\n- First-line will contain $N$, the number of item.  \n- The next line will contain $N$ space integers denoting the type of item.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nDinesh is very fond of sweets recently his aunt Riya gifted him an array $a$ of sweets of size $N$. The ith sweet is of the type $a[i]$. His mother told him that he can choose one type of sweet in a day and eat at most 2 sweets of that type. Since he has to eat all the sweets as quickly as possible because his cousins are arriving. Find out the minimum number of days in which he can eat all the sweets gifted by his aunt Riya. \n\n-----Input:-----\n- First-line will contain $N$, the number of sweets.  \n- The next line will contain $N$ space integers denoting the type of sweets.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n=====Problem Statement=====\nYou are given a string\n\nA valid string must follow the conditions below:\n\nIt must contain at least 2 uppercase English alphabet characters.\nIt must contain at least 3 digits 0 to 9.\nIt should only contain alphanumeric characters a-z, A-Z & 0-9.\nNo character should repeat.\nThere must be exactly 10 characters in a valid string.\n\n\n\n=====Input Format=====\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains a string.\n\n=====Output Format=====\nFor each test case, print 'Valid' if the string is valid. Otherwise, print 'Invalid', on separate lines. Do not print the quotation marks.\n\n\"\"\"\n# Enter your code here. Read input from STDIN. Print output to STDOUT",
    "13": "Python 3\n\"\"\"\n=====Problem Statement=====\nABCXYZ company has up to 100 employees.\nThe company decides to create a unique identification number (UID) for each of its employees.\nThe company has assigned you the task of validating all the randomly generated UIDs.\n\nA valid UID must follow the rules below:\n\nIt must contain at least 2 uppercase English alphabet characters.\nIt must contain at least 3 digits (0-9).\nIt should only contain alphanumeric characters (a-z, A-Z & 0-9).\nNo character should repeat.\nThere must be exactly 10 characters in a valid UID.\n\n\n\n=====Input Format=====\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains an employee's UID.\n\n=====Output Format=====\nFor each test case, print 'Valid' if the UID is valid. Otherwise, print 'Invalid', on separate lines. Do not print the quotation marks.\n\n\"\"\"\n# Enter your code here. Read input from STDIN. Print output to STDOUT",
    "14": "Python 3\n\"\"\"\nYou are given a N integer.Your task is to convert each integer in the binary representation and print the total number of 1's for the given number.\n.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n2\n5\n\n-----Sample Output:-----\n1\n2\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nChef solved so many hard questions, now he wants to solve some easy problems for refreshment. Chef asks Cheffina for the new question. Cheffina challanges the chef to print the total number of 1's in the binary representation of N(natural number).\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n2\n5\n\n-----Sample Output:-----\n1\n2\n\n-----EXPLANATION:-----\nFor 1) Binary representation of 2 is 10. i.e. only one 1 present in it.\nFor 2) Binary representation of 5 is 101, i.e. two 1's present in it.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\nThe tree shown below satisfies the conditions.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n\nYou are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 3000)\u00a0\u2014 the length of the array.\n\nNext line contains n integer a_{i} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operation required to make the array strictly increasing.\n\n\n-----Examples-----\nInput\n7\n2 1 5 11 5 9 11\n\nOutput\n9\n\nInput\n5\n5 4 3 2 1\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, the array is going to look as follows:\n\n2 3 5 6 7 9 11\n\n|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9\n\nAnd for the second sample:\n\n1 2 3 4 5\n\n|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nSonya was unable to think of a story for this problem, so here comes the formal description.\n\nYou are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 3000)\u00a0\u2014 the length of the array.\n\nNext line contains n integer a_{i} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operation required to make the array strictly increasing.\n\n\n-----Examples-----\nInput\n7\n2 1 5 11 5 9 11\n\nOutput\n9\n\nInput\n5\n5 4 3 2 1\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, the array is going to look as follows:\n\n2 3 5 6 7 9 11\n\n|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9\n\nAnd for the second sample:\n\n1 2 3 4 5\n\n|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12\n\"\"\"\ndef code():"
}