{
    "0": "Python 3\n\"\"\"\n\nYou are given N teams which can play with each exactly one time.Thus, there are a total of (N \u00d7 (N-1))/2 matches. Each team is assigned a strength as a positive integer.Find the sum of all the absolute difference between the strengths of the two matches.\n\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, the total advertising revenue from the tournament.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nZonal Computing Olympiad 2013, 10 Nov 2012\nN teams participate in a league cricket tournament on Mars, where each pair of distinct teams plays each other exactly once. Thus, there are a total of (N \u00d7 (N-1))/2 matches. An expert has assigned a strength to each team, a positive integer. Strangely, the Martian crowds love one-sided matches and the advertising revenue earned from a match is the absolute value of the difference between the strengths of the two matches. Given the strengths of the N teams, find the total advertising revenue earned from all the matches.\n\nFor example, suppose N is 4 and the team strengths for teams 1, 2, 3, and 4 are 3, 10, 3, and 5 respectively. Then the advertising revenues from the 6 matches are as follows:\n\nMatch Team A Team B Ad revenue 1 1 2 7  2 1 3 0  3 1 4 2  4 2 3 7  5 2 4 5  6 3 4 2 \n\nThus the total advertising revenue is 23.\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, the total advertising revenue from the tournament.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n-----Test data-----\nIn all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.\n- Subtask 1 (30 marks) : 2 \u2264 N \u2264 1,000.\n- Subtask 2 (70 marks) : 2 \u2264 N \u2264 200,000.\n\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1,2.\n- Subtask 2: Testcases 3,4,5.\n\n-----Note-----\nThe answer might not fit in a variable of type int. We recommend that type long long be used for computing all advertising revenues. If you use printf and scanf, you can use %lld for long long.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nMake a program that filters a list of strings and returns a list with only names with exactly 4 letters in it.\n\nEx: Input = [\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"], Output = [\"Ryan\", \"Yous\"]\n\ni.e.\n\nNote: keep the original order of the names in the output.\n\"\"\"\ndef friend(x):",
    "3": "Python 3\n\"\"\"\nMake a program that filters a list of strings and returns a list with only your friends name in it.\n\nIf a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...\n\nEx: Input = [\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"], Output = [\"Ryan\", \"Yous\"]\n\ni.e.\n\nNote: keep the original order of the names in the output.\n\"\"\"\ndef friend(x):",
    "4": "Python 3\n\"\"\"\n\nYou are given a sequence. An inversion in sequence a_1, a_2, ..., a_{n} is a pair of indexes i, j (1 \u2264 i < j \u2264 n), such that an inequality a_{i} > a_{j} holds.\n\nYou can multiply some numbers of the sequence p by -1. You want the number of inversions in the sequence to be minimum. Find the minimum number of inversions you can get.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains n integers \u2014 sequence p_1, p_2, ..., p_{n} (|p_{i}| \u2264 10^5). The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem \u2014 the minimum number of inversions you can get.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n0\n\nInput\n9\n-2 0 -1 0 -1 2 1 0 -1\n\nOutput\n6\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nJeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p_1, p_2, ..., p_{n} for his birthday.\n\nJeff hates inversions in sequences. An inversion in sequence a_1, a_2, ..., a_{n} is a pair of indexes i, j (1 \u2264 i < j \u2264 n), such that an inequality a_{i} > a_{j} holds.\n\nJeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains n integers \u2014 sequence p_1, p_2, ..., p_{n} (|p_{i}| \u2264 10^5). The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem \u2014 the minimum number of inversions Jeff can get.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n0\n\nInput\n9\n-2 0 -1 0 -1 2 1 0 -1\n\nOutput\n6\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given a prime number $p$, $n$ integers $a_1, a_2, \\ldots, a_n$, and an integer $k$. \n\nFind the number of pairs of indexes $(i, j)$ where, $1 \\le i < j \\le n$, for which $(a_i + a_j)(a_i^2 + a_j^2) \\equiv k \\bmod p$.\n\n\n-----Input-----\n\nThe first line contains integers $n, p, k$ ($2 \\le n \\le 3 \\cdot 10^5$, $2 \\le p \\le 10^9$, $0 \\le k \\le p-1$). $p$ is guaranteed to be prime.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le p-1$). It is guaranteed that all elements are different.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 answer to the problem.\n\n\n-----Examples-----\nInput\n3 3 0\n0 1 2\n\nOutput\n1\nInput\n6 7 2\n1 2 3 4 5 6\n\nOutput\n3\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given a prime number $p$, $n$ integers $a_1, a_2, \\ldots, a_n$, and an integer $k$. \n\nFind the number of pairs of indexes $(i, j)$ ($1 \\le i < j \\le n$) for which $(a_i + a_j)(a_i^2 + a_j^2) \\equiv k \\bmod p$.\n\n\n-----Input-----\n\nThe first line contains integers $n, p, k$ ($2 \\le n \\le 3 \\cdot 10^5$, $2 \\le p \\le 10^9$, $0 \\le k \\le p-1$). $p$ is guaranteed to be prime.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le p-1$). It is guaranteed that all elements are different.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 answer to the problem.\n\n\n-----Examples-----\nInput\n3 3 0\n0 1 2\n\nOutput\n1\nInput\n6 7 2\n1 2 3 4 5 6\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first example:\n\n$(0+1)(0^2 + 1^2) = 1 \\equiv 1 \\bmod 3$.\n\n$(0+2)(0^2 + 2^2) = 8 \\equiv 2 \\bmod 3$.\n\n$(1+2)(1^2 + 2^2) = 15 \\equiv 0 \\bmod 3$.\n\nSo only $1$ pair satisfies the condition.\n\nIn the second example, there are $3$ such pairs: $(1, 5)$, $(2, 3)$, $(4, 6)$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nJust write a function `isAlphabetic(s)`, which takes an input string `s` in lowercase and returns `true`/`false` depending on whether the string is in alphabetical order or not.\n\nFor example, `isAlphabetic('kata')` is False as 'a' comes after 'k', but `isAlphabetic('ant')` is True.\n\n\"\"\"\ndef alphabetic(s):",
    "9": "Python 3\n\"\"\"\nYour task is very simple. Just write a function `isAlphabetic(s)`, which takes an input string `s` in lowercase and returns `true`/`false` depending on whether the string is in alphabetical order or not.\n\nFor example, `isAlphabetic('kata')` is False as 'a' comes after 'k', but `isAlphabetic('ant')` is True.\n\nGood luck :)\n\"\"\"\ndef alphabetic(s):"
}