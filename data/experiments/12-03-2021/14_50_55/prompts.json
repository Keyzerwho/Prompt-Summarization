{
    "0": "Python 3\n\"\"\"\nWe have three stones at points (0, 0), (1,0), and (0,1) on a two-dimensional plane.\nThese three stones are said to form an L when they satisfy the following conditions:\n - Each of the stones is at integer coordinates.\n - Each of the stones is adjacent to another stone.\n - The three stones do not lie on the same line.\nParticularly, the initial arrangement of the stone - (0, 0), (1,0), and (0,1) - forms an L.\nYou can do the following operation any number of times: choose one of the stones and move it to any position. However, after each operation, the stones must form an L.\nYou want to do as few operations as possible to put stones at points (ax, ay), (bx, by), and (cx, cy). How many operations do you need to do this?\nIt is guaranteed that the desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L.\nAssume that the three stones are indistinguishable.\n\n-----Constraints-----\n - 1 \\leq T \\leq 10^3\n - |ax|,|ay|,|bx|,|by|,|cx|,|cy| \\leq 10^9\n - The desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\text{case}_1\n\\vdots\n\\text{case}_T\n\nEach case is in the following format:\nax ay bx by cx cy\n\n-----Output-----\nPrint T values. The i-th value should be the minimum number of operations for \\text{case}_i.\n\n-----Sample Input-----\n1\n3 2 2 2 2 1\n\n-----Sample Output-----\n4\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nWe have three stones at points (0, 0), (1,0), and (0,1) on a two-dimensional plane.\nThese three stones are said to form an L when they satisfy the following conditions:\n - Each of the stones is at integer coordinates.\n - Each of the stones is adjacent to another stone. (That is, for each stone, there is another stone whose distance from that stone is 1.)\n - The three stones do not lie on the same line.\nParticularly, the initial arrangement of the stone - (0, 0), (1,0), and (0,1) - forms an L.\nYou can do the following operation any number of times: choose one of the stones and move it to any position. However, after each operation, the stones must form an L.\nYou want to do as few operations as possible to put stones at points (ax, ay), (bx, by), and (cx, cy). How many operations do you need to do this?\nIt is guaranteed that the desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L. Under this condition, it is always possible to achieve the objective with a finite number of operations.\nYou will be given T cases of this problem. Solve each of them.\n\n-----Notes-----\nWe assume that the three stones are indistinguishable. For example, the stone that is initially at point (0,0) may be at any of the points (ax, ay), (bx, by), and (cx, cy) in the end.\n\n-----Constraints-----\n - 1 \\leq T \\leq 10^3\n - |ax|,|ay|,|bx|,|by|,|cx|,|cy| \\leq 10^9\n - The desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\text{case}_1\n\\vdots\n\\text{case}_T\n\nEach case is in the following format:\nax ay bx by cx cy\n\n-----Output-----\nPrint T values. The i-th value should be the minimum number of operations for \\text{case}_i.\n\n-----Sample Input-----\n1\n3 2 2 2 2 1\n\n-----Sample Output-----\n4\n\nLet us use # to represent a stone.\nYou can move the stones to the specified positions with four operations, as follows:\n....    ....    ....    ..#.    ..##\n#... -> ##.. -> .##. -> .##. -> ..#.\n##..    .#..    .#..    ....    ....\n\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nFind maximum possible value of A[i]%A[j] where 1<=i,j<=N for a given array A of size N containing positive numbers. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou have an array A of size N containing only positive numbers. You have to output the maximum possible value of A[i]%A[j] where 1<=i,j<=N. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n-----Explanation-----\nThere will be four values, A[0]%A[0] = 0, A[0]%A[1]=1, A[1]%A[0]=0, A[1]%A[1]=0, and hence the output will be the maximum among them all, that is 1.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYour task is to implement a function which takes a string as input and return an object containing the properties vowels and consonants.\n\nInput:\n\nThe input is any random string. You must then discern what are vowels and what are consonants and sum for each category their total occurrences in an object. However you could also receive inputs that are not strings. If this happens then you must return an object with a vowels and consonants total of 0 because the input was NOT a string. Refer to the Example section for a more visual representation of which inputs you could receive and the outputs expected.\n\nExamples:\n\nInput: get_count('test')\nOutput: {vowels:1,consonants:3}\n\nInput: get_count('tEst')\nOutput: {vowels:1,consonants:3}\n\nInput get_count('    ')\nOutput: {vowels:0,consonants:0}\n\nInput get_count()\nOutput: {vowels:0,consonants:0}\n\n\"\"\"\ndef get_count(words=''):",
    "5": "Python 3\n\"\"\"\nError Handling is very important in coding and seems to be overlooked or not implemented properly.\n\n#Task\n\nYour task is to implement a function which takes a string as input and return an object containing the properties\nvowels and consonants. The vowels property must contain the total count of vowels {a,e,i,o,u}, and the total count of consonants {a,..,z} - {a,e,i,o,u}. Handle invalid input and don't forget to return valid ones.\n\n#Input\n\nThe input is any random string. You must then discern what are vowels and what are consonants and sum for each category their total occurrences in an object. However you could also receive inputs that are not strings. If this happens then you must return an object with a vowels and consonants total of 0 because the input was NOT a string. Refer to the Example section for a more visual representation of which inputs you could receive and the outputs expected. :)\n\nExample:\n\n```python\nInput: get_count('test')\nOutput: {vowels:1,consonants:3}\n\nInput: get_count('tEst')\nOutput: {vowels:1,consonants:3}\n\nInput get_count('    ')\nOutput: {vowels:0,consonants:0}\n\nInput get_count()\nOutput: {vowels:0,consonants:0}\n```\n\nC#\n\nA Counter class has been put in the preloaded section taking two parameters Vowels and Consonants this must be the Object you return!\n\"\"\"\ndef get_count(words=''):",
    "6": "Python 3\n\"\"\"\nYou are given a rectangular $n \\times m$ matrix $a$. In one move you can choose any column and cyclically shift elements in this column. You can perform this operation as many times as you want possibly zero.\n\nAfter you are done with cyclical shifts, you compute for every row the maximal value in it. Suppose that for $i$-th row it is equal $r_i$. What is the maximal possible value of $r_1+r_2+\\ldots+r_n$?\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 40$), the number of test cases in the input.\n\nThe first line of each test case contains integers $n$ and $m$ ($1 \\le n \\le 4$, $1 \\le m \\le 100$) \u2014 the number of rows and the number of columns in the given matrix $a$. \n\nEach of the following $n$ lines contains $m$ integers, the elements of $a$ ($1 \\le a_{i, j} \\le 10^5$).\n\n\n-----Output-----\n\nPrint $t$ integers: answers for all test cases in the order they are given in the input.\n\n\n-----Example-----\nInput\n2\n2 3\n2 5 7\n4 2 4\n3 6\n4 1 5 2 10 4\n8 6 6 4 9 10\n5 4 9 5 8 7\n\nOutput\n12\n29\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThis is an easier version of the next problem. The difference is only in constraints.\n\nYou are given a rectangular $n \\times m$ matrix $a$. In one move you can choose any column and cyclically shift elements in this column. You can perform this operation as many times as you want (possibly zero). You can perform this operation to a column multiple times.\n\nAfter you are done with cyclical shifts, you compute for every row the maximal value in it. Suppose that for $i$-th row it is equal $r_i$. What is the maximal possible value of $r_1+r_2+\\ldots+r_n$?\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 40$), the number of test cases in the input.\n\nThe first line of each test case contains integers $n$ and $m$ ($1 \\le n \\le 4$, $1 \\le m \\le 100$) \u2014 the number of rows and the number of columns in the given matrix $a$. \n\nEach of the following $n$ lines contains $m$ integers, the elements of $a$ ($1 \\le a_{i, j} \\le 10^5$).\n\n\n-----Output-----\n\nPrint $t$ integers: answers for all test cases in the order they are given in the input.\n\n\n-----Example-----\nInput\n2\n2 3\n2 5 7\n4 2 4\n3 6\n4 1 5 2 10 4\n8 6 6 4 9 10\n5 4 9 5 8 7\n\nOutput\n12\n29\n\n\n\n-----Note-----\n\nIn the first test case, you can shift the third column down by one, this way there will be $r_1 = 5$ and $r_2 = 7$.\n\nIn the second case you can don't rotate anything at all, this way there will be $r_1 = r_2 = 10$ and $r_3 = 9$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nImplement the ToUnderscore() method to translate a camelCase name into an underscore separated name. \n\nExamples:\nInput:\n\"ThisIsAUnitTest\"\nOutput:\n\"This_Is_A_Unit_Test\"\n\nInput:\n\"Calculate15Plus5Equals20\"\nOutput:\n\"Calculate_15_Plus_5_Equals_20\"\n\nInput:\n\"This_Is_Already_Split_Correct\"\nOutput:\n\"This_Is_Already_Split_Correct\"\n\nInput:\n\"ThisIs_Not_SplitCorrect\"\nOutput:\n\"This_Is_Not_Split_Correct\"\n\nInput:\n\"_UnderscoreMarked_Test_Name_\"\nOutput:\n_Underscore_Marked_Test_Name_\"\n\"\"\"\ndef toUnderScore(name):",
    "9": "Python 3\n\"\"\"\nYou wrote all your unit test names in camelCase.\nBut some of your colleagues have troubles reading these long test names.\nSo you make a compromise to switch to underscore separation.\n\nTo make these changes fast you wrote a class to translate a camelCase name\ninto an underscore separated name.\n\nImplement the ToUnderscore() method.\n\nExample:\n\n`\"ThisIsAUnitTest\" => \"This_Is_A_Unit_Test\"`\n\n\n**But of course there are always special cases...**\n\nYou also have some calculation tests. Make sure the results don't get split by underscores.\nSo only add an underscore in front of the first number.\n\nAlso Some people already used underscore names in their tests. You don't want to change them.\nBut if they are not split correct you should adjust them.\n\nSome of your colleagues mark their tests with a leading and trailing underscore.\nDon't remove this.\n\nAnd of course you should handle empty strings to avoid unnecessary errors. Just return an empty string then.\n\nExample:\n\n`\"Calculate15Plus5Equals20\" => \"Calculate_15_Plus_5_Equals_20\"`\n\n`\"This_Is_Already_Split_Correct\" => \"This_Is_Already_Split_Correct\"`\n\n`\"ThisIs_Not_SplitCorrect\" => \"This_Is_Not_Split_Correct\"`\n\n`\"_UnderscoreMarked_Test_Name_\" => _Underscore_Marked_Test_Name_\"`\n\"\"\"\ndef toUnderScore(name):",
    "10": "Python 3\n\"\"\"\nYou are given $R$ rows and $C$ columns of a matrix. Calculate the total number in the matrix. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are the principal of the Cake school in chefland and today is your birthday. You want to treat each of the children with a small cupcake which is made by you. But there is a problem, You don't know how many students are present today.\nThe students have gathered of the morning assembly in $R$ rows and $C$ columns. Now you have to calculate how many cakes you have to make such that each child gets a cupcake. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n```if:python\nComplete the function `get_issuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if-not:python\nComplete the function `getIssuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if:typescript\nWhere `Issuer` is defined with the following enum type.\n~~~typescript\nenum Issuer {\n  VISA = 'VISA',\n  AMEX = 'AMEX',\n  Mastercard = 'Mastercard',\n  Discover = 'Discover',\n  Unknown = 'Unknown',\n}\n~~~\n```\n\n```markdown\n| Card Type  | Begins With          | Number Length |\n|------------|----------------------|---------------|\n| AMEX       | 34 or 37             | 15            |\n| Discover   | 6011                 | 16            |\n| Mastercard | 51, 52, 53, 54 or 55 | 16            |\n| VISA       | 4                    | 13 or 16      |\n```\n\n```if:c,cpp\n**C/C++ note:** The return value in C is not freed.\n```\n\n## Examples\n\n```if-not:python\n~~~js\ngetIssuer(4111111111111111) == \"VISA\"\ngetIssuer(4111111111111) == \"VISA\"\ngetIssuer(4012888888881881) == \"VISA\"\ngetIssuer(378282246310005) == \"AMEX\"\ngetIssuer(6011111111111117) == \"Discover\"\ngetIssuer(5105105105105100) == \"Mastercard\"\ngetIssuer(5105105105105106) == \"Mastercard\"\ngetIssuer(9111111111111111) == \"Unknown\"\n~~~\n```\n```if:python\n~~~py\nget_issuer(4111111111111111) == \"VISA\"\nget_issuer(4111111111111) == \"VISA\"\nget_issuer(4012888888881881) == \"VISA\"\nget_issuer(378282246310005) == \"AMEX\"\nget_issuer(6011111111111117) == \"Discover\"\nget_issuer(5105105105105100) == \"Mastercard\"\nget_issuer(5105105105105106) == \"Mastercard\"\nget_issuer(9111111111111111) == \"Unknown\"\n~~~\n```\n\"\"\"\ndef get_issuer(number):",
    "13": "Python 3\n\"\"\"\nGiven a credit card number we can determine who the issuer/vendor is with a few basic knowns.\n\n```if:python\nComplete the function `get_issuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if-not:python\nComplete the function `getIssuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if:typescript\nWhere `Issuer` is defined with the following enum type.\n~~~typescript\nenum Issuer {\n  VISA = 'VISA',\n  AMEX = 'AMEX',\n  Mastercard = 'Mastercard',\n  Discover = 'Discover',\n  Unknown = 'Unknown',\n}\n~~~\n```\n\n```markdown\n| Card Type  | Begins With          | Number Length |\n|------------|----------------------|---------------|\n| AMEX       | 34 or 37             | 15            |\n| Discover   | 6011                 | 16            |\n| Mastercard | 51, 52, 53, 54 or 55 | 16            |\n| VISA       | 4                    | 13 or 16      |\n```\n\n```if:c,cpp\n**C/C++ note:** The return value in C is not freed.\n```\n\n## Examples\n\n```if-not:python\n~~~js\ngetIssuer(4111111111111111) == \"VISA\"\ngetIssuer(4111111111111) == \"VISA\"\ngetIssuer(4012888888881881) == \"VISA\"\ngetIssuer(378282246310005) == \"AMEX\"\ngetIssuer(6011111111111117) == \"Discover\"\ngetIssuer(5105105105105100) == \"Mastercard\"\ngetIssuer(5105105105105106) == \"Mastercard\"\ngetIssuer(9111111111111111) == \"Unknown\"\n~~~\n```\n```if:python\n~~~py\nget_issuer(4111111111111111) == \"VISA\"\nget_issuer(4111111111111) == \"VISA\"\nget_issuer(4012888888881881) == \"VISA\"\nget_issuer(378282246310005) == \"AMEX\"\nget_issuer(6011111111111117) == \"Discover\"\nget_issuer(5105105105105100) == \"Mastercard\"\nget_issuer(5105105105105106) == \"Mastercard\"\nget_issuer(9111111111111111) == \"Unknown\"\n~~~\n```\n\"\"\"\ndef get_issuer(number):",
    "14": "Python 3\n\"\"\"\nReturn the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.  \n\nExample:\nInput:\n[0, 2, 1, 2, 4, 1]\nOutput:\n3\nExplanation:\nIn an array with the values [0, 2, 1, 2, 4, 1] the greatest index distance is between the matching 1 values at index 2 and 5. \n\"\"\"\ndef greatest_distance(arr):",
    "15": "Python 3\n\"\"\"\nThe goal of this Kata is to return the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.  \n\nExample:\nIn an array with the values [0, 2, 1, 2, 4, 1] the greatest index distance is between the matching '1' values at index 2 and 5.  Executing greatestDistance against this array would return 3. (i.e. 5 - 2)  \n\nHere's the previous example in test form:\n```python\ntest.assert_equals(greatest_distance([0, 2, 1, 2, 4, 1]), 3)\n```\n\nThis is based on a Kata I had completed only to realize I has misread the instructions.  I enjoyed solving the problem I thought it was asking me to complete so I thought I'd add a new Kata for others to enjoy.  There are no tricks in this one, good luck!\n\"\"\"\ndef greatest_distance(arr):",
    "16": "Python 3\n\"\"\"\nTake an integer 'n' (n >= 0) and a digit 'd' (0 <= d <= 9) as an integer. Square all numbers 'k' (0 <= k <= n) between 0 and 'n'. Count the numbers of \ndigits 'd' used in the writing of all the 'k**2'. Write the function taking 'n' and 'd' as parameters and returning this count.\n\n#Examples:\n```\nn = 10, d = 1, the k*k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100\nWe are using the digit 1 in 1, 16, 81, 100. The total count is then 4.\n\nnb_dig(25, 1):\nthe numbers of interest are\n1, 4, 9, 10, 11, 12, 13, 14, 19, 21 which squared are 1, 16, 81, 100, 121, 144, 169, 196, 361, 441\nso there are 11 digits `1` for the squares of numbers between 0 and 25.\n\n\"\"\"\ndef nb_dig(n, d):",
    "17": "Python 3\n\"\"\"\nTake an integer `n (n >= 0)` and a digit `d (0 <= d <= 9)` as an integer. Square all numbers `k (0 <= k <= n)` between 0 and n. Count the numbers of \ndigits `d` used in the writing of all the `k**2`. Call `nb_dig` (or nbDig or ...) the function taking `n` and `d` as parameters and returning this count.\n\n#Examples:\n```\nn = 10, d = 1, the k*k are 0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100\nWe are using the digit 1 in 1, 16, 81, 100. The total count is then 4.\n\nnb_dig(25, 1):\nthe numbers of interest are\n1, 4, 9, 10, 11, 12, 13, 14, 19, 21 which squared are 1, 16, 81, 100, 121, 144, 169, 196, 361, 441\nso there are 11 digits `1` for the squares of numbers between 0 and 25.\n```\nNote that `121` has twice the digit `1`.\n\"\"\"\ndef nb_dig(n, d):",
    "18": "Python 3\n\"\"\"\nThere are $n$ lamps on a line, numbered from $1$ to $n$. Each one has an initial state off ($0$) or on ($1$).\n\nYou're given $k$ subsets $A_1, \\ldots, A_k$ of $\\{1, 2, \\dots, n\\}$, such that the intersection of any three subsets is empty.\n\nIn one operation, you can choose one of these $k$ subsets and switch the state of all lamps in it. It is guaranteed that, with the given subsets, it's possible to make all lamps be simultaneously on using this type of operation.\n\nLet $m_i$ be the minimum number of operations you have to do in order to make the $i$ first lamps be simultaneously on.\n\nYou have to compute $m_i$ for all $1 \\le i \\le n$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n, k \\le 3 \\cdot 10^5$).\n\nThe second line contains a binary string of length $n$, representing the initial state of each lamp (the lamp $i$ is off if $s_i = 0$, on if $s_i = 1$).\n\nThe description of each one of the $k$ subsets follows, in the following format:\n\nThe first line of the description contains a single integer $c$ ($1 \\le c \\le n$) \u00a0\u2014 the number of elements in the subset.\n\nThe second line of the description contains $c$ distinct integers $x_1, \\ldots, x_c$ ($1 \\le x_i \\le n$) \u00a0\u2014 the elements of the subset.\n\nIt is guaranteed that:   The intersection of any three subsets is empty;  It's possible to make all lamps be simultaneously on using some operations. \n\n\n-----Output-----\n\nYou must output $n$ lines. The $i$-th line should contain a single integer $m_i$ \u00a0\u2014 the minimum number of operations required to make the lamps $1$ to $i$ be simultaneously on.\n\n\n-----Examples-----\nInput\n7 3\n0011100\n3\n1 4 6\n3\n3 4 7\n2\n2 3\n\nOutput\n1\n2\n3\n3\n3\n3\n3\n\nInput\n8 6\n00110011\n3\n1 3 8\n5\n1 2 5 6 7\n2\n6 8\n2\n3 5\n2\n4 7\n1\n2\n\nOutput\n1\n1\n1\n1\n1\n1\n4\n4\n\nInput\n5 3\n00011\n3\n1 2 3\n1\n4\n3\n3 4 5\n\nOutput\n1\n1\n1\n1\n1\n\nInput\n19 5\n1001001001100000110\n2\n2 3\n2\n5 6\n2\n8 9\n5\n12 13 14 15 16\n1\n19\n\nOutput\n0\n1\n1\n1\n2\n2\n2\n3\n3\n3\n3\n4\n4\n4\n4\n4\n4\n4\n5\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThere are $n$ lamps on a line, numbered from $1$ to $n$. Each one has an initial state off ($0$) or on ($1$).\n\nYou're given $k$ subsets $A_1, \\ldots, A_k$ of $\\{1, 2, \\dots, n\\}$, such that the intersection of any three subsets is empty. In other words, for all $1 \\le i_1 < i_2 < i_3 \\le k$, $A_{i_1} \\cap A_{i_2} \\cap A_{i_3} = \\varnothing$.\n\nIn one operation, you can choose one of these $k$ subsets and switch the state of all lamps in it. It is guaranteed that, with the given subsets, it's possible to make all lamps be simultaneously on using this type of operation.\n\nLet $m_i$ be the minimum number of operations you have to do in order to make the $i$ first lamps be simultaneously on. Note that there is no condition upon the state of other lamps (between $i+1$ and $n$), they can be either off or on.\n\nYou have to compute $m_i$ for all $1 \\le i \\le n$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n, k \\le 3 \\cdot 10^5$).\n\nThe second line contains a binary string of length $n$, representing the initial state of each lamp (the lamp $i$ is off if $s_i = 0$, on if $s_i = 1$).\n\nThe description of each one of the $k$ subsets follows, in the following format:\n\nThe first line of the description contains a single integer $c$ ($1 \\le c \\le n$) \u00a0\u2014 the number of elements in the subset.\n\nThe second line of the description contains $c$ distinct integers $x_1, \\ldots, x_c$ ($1 \\le x_i \\le n$) \u00a0\u2014 the elements of the subset.\n\nIt is guaranteed that:   The intersection of any three subsets is empty;  It's possible to make all lamps be simultaneously on using some operations. \n\n\n-----Output-----\n\nYou must output $n$ lines. The $i$-th line should contain a single integer $m_i$ \u00a0\u2014 the minimum number of operations required to make the lamps $1$ to $i$ be simultaneously on.\n\n\n-----Examples-----\nInput\n7 3\n0011100\n3\n1 4 6\n3\n3 4 7\n2\n2 3\n\nOutput\n1\n2\n3\n3\n3\n3\n3\n\nInput\n8 6\n00110011\n3\n1 3 8\n5\n1 2 5 6 7\n2\n6 8\n2\n3 5\n2\n4 7\n1\n2\n\nOutput\n1\n1\n1\n1\n1\n1\n4\n4\n\nInput\n5 3\n00011\n3\n1 2 3\n1\n4\n3\n3 4 5\n\nOutput\n1\n1\n1\n1\n1\n\nInput\n19 5\n1001001001100000110\n2\n2 3\n2\n5 6\n2\n8 9\n5\n12 13 14 15 16\n1\n19\n\nOutput\n0\n1\n1\n1\n2\n2\n2\n3\n3\n3\n3\n4\n4\n4\n4\n4\n4\n4\n5\n\n\n\n-----Note-----\n\nIn the first example:   For $i = 1$, we can just apply one operation on $A_1$, the final states will be $1010110$;  For $i = 2$, we can apply operations on $A_1$ and $A_3$, the final states will be $1100110$;  For $i \\ge 3$, we can apply operations on $A_1$, $A_2$ and $A_3$, the final states will be $1111111$. \n\nIn the second example:   For $i \\le 6$, we can just apply one operation on $A_2$, the final states will be $11111101$;  For $i \\ge 7$, we can apply operations on $A_1, A_3, A_4, A_6$, the final states will be $11111111$.\n\"\"\"\ndef code():"
}