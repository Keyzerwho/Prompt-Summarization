{
    "id": "cmpl-4BAjf87fuj9MKTU9CytUUNZpXitZn",
    "object": "text_completion",
    "created": 1638568223,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    ",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    a.sort()\n    ans = a[0]\n    for i in range(1,n):\n        ans = max(ans, a[i]%a[i-1])\n    print(ans)\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(int(input()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, arr[i]%arr[(i+1)%n])\n    print(ans)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    if type(words) != str:\n        return {'vowels': 0, 'consonants': 0}\n    else:\n        count_vowels = 0\n        count_consonants = 0\n        for i in words:\n            if i in vowels:\n                count_vowels += 1\n            elif i in consonants:\n                count_consonants += 1\n        return {'vowels': count_vowels, 'consonants': count_consonants}",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if type(words) != str:\n        return {'vowels': 0, 'consonants': 0}\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    return {'vowels': sum(words.lower().count(c) for c in vowels),\n            'consonants': sum(words.lower().count(c) for c in consonants)}",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, input().split())))\n        max_sum = 0\n        for j in range(m):\n            max_sum += max(a[i][j] for i in range(n))\n        print(max_sum)\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, input().split())))\n        r = []\n        for j in range(n):\n            r.append(max(a[j]))\n        print(sum(r))\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    newName = \"\"\n    for i in range(len(name)):\n        if name[i].isupper():\n            if i != 0:\n                newName += \"_\"\n            newName += name[i].lower()\n        else:\n            newName += name[i]\n    return newName\n\nprint(toUnderScore(\"ThisIsAUnitTest\"))\nprint(toUnderScore(\"Calculate15Plus5Equals20\"))\nprint(toUnderScore(\"This_Is_Already_Split_Correct\"))\nprint(toUnderScore(\"ThisIs_Not_SplitCorrect\"))\nprint(toUnderScore(\"_UnderscoreMarked_Test_Name_\"))",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if name == \"\":\n        return \"\"\n    if name[0] == \"_\" and name[-1] == \"_\":\n        return name\n    if name[0] == \"_\":\n        return name[1:]\n    if name[-1] == \"_\":\n        return name[:-1]\n    if name.isupper():\n        return name\n    if name.islower():\n        return name\n    if name.isalpha():\n        return name\n    if name.isdigit():\n        return name\n    if name.isalnum():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.isalpha():\n        return name\n    if name.",
            "index": 9,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    ",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if len(number) == 15 and (number.startswith('34') or number.startswith('37')):\n        return 'AMEX'\n    elif len(number) == 16 and number.startswith('6011'):\n        return 'Discover'\n    elif len(number) == 16 and (number.startswith('51') or number.startswith('52') or number.startswith('53') or number.startswith('54') or number.startswith('55')):\n        return 'Mastercard'\n    elif len(number) == 13 or len(number) == 16 and number.startswith('4'):\n        return 'VISA'\n    else:\n        return 'Unknown'",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if len(number) == 15 and number[:2] in [\"34\", \"37\"]:\n        return \"AMEX\"\n    elif len(number) == 16 and number[:4] == \"6011\":\n        return \"Discover\"\n    elif len(number) == 16 and number[:2] in [\"51\", \"52\", \"53\", \"54\", \"55\"]:\n        return \"Mastercard\"\n    elif (len(number) == 13 or len(number) == 16) and number[0] == \"4\":\n        return \"VISA\"\n    else:\n        return \"Unknown\"",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[1]:\n            return 2\n        elif arr[0] == arr[2]:\n            return 1\n        elif arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 4:\n        if arr[0] == arr[1]:\n            if arr[2] == arr[3]:\n                return 0\n            else:\n                return 2\n        elif arr[0] == arr[2]:\n            if arr[1] == arr[3]:\n                return 0\n            else:\n                return 1\n        elif arr[0] == arr[3]:\n            if arr[1] == arr[2]:\n                return 0\n            else:\n                return 1\n        elif arr[1] == arr[2]:\n            if arr[0] == arr[3]:\n                return 0\n            else:\n                return 1\n        elif arr[1] == arr[3]:\n            if arr[0] == arr[2]:\n                return 0\n            else:\n                return 1\n        elif arr[2] == arr[3]:\n            if arr[0] == arr[1]:\n                return 0\n            else:\n                return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[1]:\n            if arr[2] == arr[3]:\n                if arr[4] == arr[3]:\n                    return 0\n                else:\n                    return 2\n            else:\n                if arr[4] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[0] == arr[2]:\n            if arr[1] == arr[3]:\n                if arr[4] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[4] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[0] == arr[3]:\n            if arr[1] == arr[2]:\n                if arr[4] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[4] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[0] == arr[4]:\n            if arr[1] == arr[2]:\n                if arr[3] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[3] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[1] == arr[2]:\n            if arr[0] == arr[3]:\n                if arr[4] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[4] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[1] == arr[3]:\n            if arr[0] == arr[2]:\n                if arr[4] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[4] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[1] == arr[4]:\n            if arr[0] == arr[2]:\n                if arr[3] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[3] == arr[3]:\n                    return 1\n                else:\n                    return 2\n        elif arr[2] == arr[3]:\n            if arr[0] == arr[1]:\n                if arr[4] == arr[3]:\n                    return 0\n                else:\n                    return 1\n            else:\n                if arr[4] == arr[3]:\n                    return 1\n                else:\n                    return",
            "index": 14,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    if len(arr) == 0:\n        return 0\n    else:\n        arr.sort()\n        max_distance = 0\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                distance = i+1\n                if distance > max_distance:\n                    max_distance = distance\n        return max_distance",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sum(str(i*i).count(str(d)) for i in range(n+1))",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sum(str(i*i).count(str(d)) for i in range(n+1))",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    s = input()\n    subsets = []\n    for i in range(k):\n        c = int(input())\n        subset = list(map(int, input().split()))\n        subsets.append(subset)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(n)\n    #print(k)\n    #print(s)\n    #print(subsets)\n    #print(s)\n    #print(",
            "index": 18,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    s = input()\n    subsets = []\n    for i in range(k):\n        c = int(input())\n        subset = list(map(int, input().split()))\n        subsets.append(subset)\n    m = [0] * n\n    for i in range(n):\n        for j in range(k):\n            if i + 1 in subsets[j]:\n                m[i] = 1\n                break\n    for i in range(1, n):\n        for j in range(k):\n            if i + 1 in subsets[j]:\n                m[i] = max(m[i], m[i - 1] + 1)\n    for i in range(n - 2, -1, -1):\n        for j in range(k):\n            if i + 1 in subsets[j]:\n                m[i] = max(m[i], m[i + 1] + 1)\n    for i in range(n):\n        print(m[i])\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}