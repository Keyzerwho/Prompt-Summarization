{
    "0": "Python 3\n\"\"\"\nThe input given is a positive integer `num` (30 > `num` > 0).\nYour task is to create a function `combos` that accepts `num` and returns an array of arrays of positive integers that sum to `num`.\n\nFor an optimal solution, the following operation should complete within 6000ms.\n\"\"\"\ndef combos(n):",
    "1": "Python 3\n\"\"\"\nJon and Joe have received equal marks in the school examination. \nBut, they won't reconcile in peace when equated with each other. \nTo prove his might, Jon challenges Joe to write a program to find all possible number combos that sum to a given number. \nWhile unsure whether he would be able to accomplish this feat or not, Joe accpets the challenge. \nBeing Joe's friend, your task is to help him out.\n\n# Task\n\nCreate a function `combos`, that accepts a single positive integer `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\n# Notes\n1. Sub-arrays may or may not have their elements sorted.\n2. The order of sub-arrays inside the main array does not matter.\n3. For an optimal solution, the following operation should complete within 6000ms.\n\n# Sample\n\"\"\"\ndef combos(n):",
    "2": "Python 3\n\"\"\"\nGiven a rectangular matrix and integers a and b, consider the union of the ath row and the bth column of the matrix. Return sum of all elements of that union.\n\nExamples:\n\nInput:\nmatrix = [[1, 1, 1, 1], \n          [2, 2, 2, 2], \n          [3, 3, 3, 3]]\na = 1\nb = 3\nOutput:\n12\nExplanation:\n(2 + 2 + 2 + 2) + (1 + 3) = 12\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n    2-dimensional array of integers representing a rectangular matrix.\n\n    Constraints: `1 \u2264 matrix.length \u2264 5, 1 \u2264 matrix[0].length \u2264 5, 1 \u2264 matrix[i][j] \u2264 100.`\n    \n\n - `[input]` integer `a`\n\n  A non-negative integer less than the number of matrix rows.\n\n   Constraints: `0 \u2264 a < matrix.length.`\n   \n   \n - `[input]` integer `b`\n\n   A non-negative integer less than the number of matrix columns.\n\n   Constraints: `0 \u2264 b < matrix[i].length. `\n\n\n - `[output]` an integer\n\"\"\"\ndef crossing_sum(matrix, row, col):",
    "3": "Python 3\n\"\"\"\n# Task\n Given a rectangular `matrix` and integers `a` and `b`, consider the union of the ath row and the bth (both 0-based) column of the `matrix`. Return sum of all elements of that union.\n\n# Example\n\n For\n```\nmatrix = [[1, 1, 1, 1], \n          [2, 2, 2, 2], \n          [3, 3, 3, 3]]\na = 1 and b = 3 ```\nthe output should be `12`.\n\n Here `(2 + 2 + 2 + 2) + (1 + 3) = 12`.\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n    2-dimensional array of integers representing a rectangular matrix.\n\n    Constraints: `1 \u2264 matrix.length \u2264 5, 1 \u2264 matrix[0].length \u2264 5, 1 \u2264 matrix[i][j] \u2264 100.`\n    \n\n - `[input]` integer `a`\n\n  A non-negative integer less than the number of matrix rows.\n\n   Constraints: `0 \u2264 a < matrix.length.`\n   \n   \n - `[input]` integer `b`\n\n   A non-negative integer less than the number of matrix columns.\n\n   Constraints: `0 \u2264 b < matrix[i].length. `\n\n\n - `[output]` an integer\n\"\"\"\ndef crossing_sum(matrix, row, col):",
    "4": "Python 3\n\"\"\"\nYou are given a special jigsaw puzzle consisting of $n\\cdot m$ identical pieces. Every piece has three tabs and one blank, as pictured below. $\\{3$ \n\nThe jigsaw puzzle is considered solved if the following conditions hold:  The pieces are arranged into a grid with $n$ rows and $m$ columns.  For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. \n\nThrough rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.\n\n\n-----Input-----\n\nThe test consists of multiple test cases. The first line contains a single integer $t$ ($1\\le t\\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nEach test case contains two integers $n$ and $m$ ($1 \\le n,m \\le 10^5$).\n\n\n-----Output-----\n\nFor each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n1 3\n100000 100000\n2 2\n\nOutput\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a special jigsaw puzzle consisting of $n\\cdot m$ identical pieces. Every piece has three tabs and one blank, as pictured below. $\\{3$ \n\nThe jigsaw puzzle is considered solved if the following conditions hold:  The pieces are arranged into a grid with $n$ rows and $m$ columns.  For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. \n\nThrough rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.\n\n\n-----Input-----\n\nThe test consists of multiple test cases. The first line contains a single integer $t$ ($1\\le t\\le 1000$)\u00a0\u2014 the number of test cases. Next $t$ lines contain descriptions of test cases.\n\nEach test case contains two integers $n$ and $m$ ($1 \\le n,m \\le 10^5$).\n\n\n-----Output-----\n\nFor each test case output a single line containing \"YES\" if it is possible to solve the jigsaw puzzle, or \"NO\" otherwise. You can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n1 3\n100000 100000\n2 2\n\nOutput\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nFor the first test case, this is an example solution:  [Image] \n\nFor the second test case, we can show that no solution exists.\n\nFor the third test case, this is an example solution: $\\left\\{\\begin{array}{l}{3} \\\\{3} \\end{array} \\right\\}$\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven n, m and a, calculate the number of squares of side length a required to completely cover a rectangle of length m and breadth n.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed squares.\nExamples\ninput\n6 6 4\noutput\n4\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nTheatre Square in the capital city of Berland has a rectangular shape with the size n\u2009\u00d7\u2009m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a\u2009\u00d7\u2009a.\nWhat is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed number of flagstones in new line.\nExamples\ninput\n6 6 4\noutput\n4\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given a some lines of English text.Your task is to print words in the line in reverse order without any punctuation marks.\n\n-----Input:-----\nThe first line of input contains a single integer $N$, indicating the number of lines in the input. This is followed by $N$ lines of input text.\n\n-----Output:-----\n$N$ lines of output text containing the input lines in reverse order and where each line contains the words in reverse order as illustrated above.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 10000$.\n- There are at most $80$ characters in each line\n\n-----Sample input-----\n2\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n-----Sample output-----\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nIn this problem the input will consist of a number of lines of English text consisting of the letters of the English alphabet, the punctuation marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white space characters (blank, newline). Your task is print the words in the text in reverse order without any punctuation marks.\nFor example consider the following candidate for the input text:\n$ $\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n$ $\nThe corresponding output would read as:\n$ $\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\n$ $\nThat is, the lines are printed in reverse order and in each line the words are printed in reverse order.\n\n-----Input:-----\nThe first line of input contains a single integer $N$, indicating the number of lines in the input. This is followed by $N$ lines of input text.\n\n-----Output:-----\n$N$ lines of output text containing the input lines in reverse order and where each line contains the words in reverse order as illustrated above.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 10000$.\n- There are at most $80$ characters in each line\n\n-----Sample input-----\n2\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n-----Sample output-----\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nCreate a function that takes any number and returns the number that it is a factorial of. If the number is not a factorial of another, returns \"None\". \n\nThe factorial is the product of an integer and all the integers below it.\n\nExamples:\nInput:\n120\nOutput:\n\"5!\"\nExplanation:\n5! = 5 * 4 * 3 * 2 * 1 = 120\n\nInput:\n24\nOutput:\n\"4!\"\n\nInput:\n150\nOutput:\n\"None\"\n\"\"\"\ndef reverse_factorial(num):",
    "11": "Python 3\n\"\"\"\nI'm sure you're familiar with factorials \u2013 that is, the product of an integer and all the integers below it. \n\nFor example, `5! = 120`, as `5 * 4 * 3 * 2 * 1 = 120`\n\nYour challenge is to create a function that takes any number and returns the number that it is a factorial of. So, if your function receives `120`, it should return `\"5!\"` (as a string).\n\nOf course, not every number is a factorial of another. In this case, your function would return `\"None\"` (as a string).\n\n### Examples\n\n* `120` will return `\"5!\"`\n* `24` will return `\"4!\"`\n* `150` will return `\"None\"`\n\"\"\"\ndef reverse_factorial(num):",
    "12": "Python 3\n\"\"\"\nGiven a string, determine if given string is minor or major or not a chord.\n\n_____________________________________________________________\nRules:\n\n1. Basic chord have three elements.\n\n2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4.\n\n3. Chord is major when interval between first and second element equals 4 and between second and third -> 3.\n\n4. In minor/major chord interval between first and third element equals... 7.\n\n_______________________________________________________________\nThere is a preloaded list of the 12 notes of a chromatic scale built on C. This means that there are (almost) all allowed note' s names in music.\n\nnotes = \n['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\nNote that e. g. 'C#' - 'C' = 1, 'C' - 'C#' = 1, 'Db' - 'C' = 1 and 'B' - 'C' = 1. \n\nInput:\nString of notes separated by whitespace, e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'.\n\"\"\"\ndef minor_or_major(chord):",
    "13": "Python 3\n\"\"\"\nCheck if given chord is minor or major.\n\n_____________________________________________________________\nRules:\n\n1. Basic minor/major chord have three elements.\n\n2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4.\n\n3. Chord is major when interval between first and second element equals 4 and between second and third -> 3.\n\n4. In minor/major chord interval between first and third element equals... 7.\n\n_______________________________________________________________\nThere is a preloaded list of the 12 notes of a chromatic scale built on C. This means that there are (almost) all allowed note' s names in music.\n\nnotes = \n['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\nNote that e. g. 'C#' - 'C' = 1, 'C' - 'C#' = 1, 'Db' - 'C' = 1 and 'B' - 'C' = 1. \n\nInput:\nString of notes separated by whitespace, e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'.\n\"\"\"\ndef minor_or_major(chord):",
    "14": "Python 3\n\"\"\"\nThe Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (i.e. insertions, deletions or substitutions) required to change one word into the other.\n\n(http://en.wikipedia.org/wiki/Levenshtein_distance)\n\n\nYour task is to implement a function which calculates the Levenshtein distance for two arbitrary strings.\n\"\"\"\ndef levenshtein(a,b):",
    "15": "Python 3\n\"\"\"\n> In information theory and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (i.e. insertions, deletions or substitutions) required to change one word into the other.\n\n(http://en.wikipedia.org/wiki/Levenshtein_distance)\n\n\nYour task is to implement a function which calculates the Levenshtein distance for two arbitrary strings.\n\"\"\"\ndef levenshtein(a,b):",
    "16": "Python 3\n\"\"\"\nYou are given two positive integers N and K. How many multisets of rational numbers satisfy all of the following conditions?\n - The multiset has exactly N elements and the sum of them is equal to K.\n - Each element can be represented as \\frac{1}{2^i}\\ (i = 0,1,\\dots).\nThe answer may be large, so print it modulo 998244353.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 3000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of multisets of rational numbers that satisfy all of the given conditions modulo 998244353.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given two positive integers N and K. How many multisets of rational numbers satisfy all of the following conditions?\n - The multiset has exactly N elements and the sum of them is equal to K.\n - Each element of the multiset is one of 1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{8}, \\dots. In other words, each element can be represented as \\frac{1}{2^i}\\ (i = 0,1,\\dots).\nThe answer may be large, so print it modulo 998244353.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 3000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of multisets of rational numbers that satisfy all of the given conditions modulo 998244353.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n2\n\nThe following two multisets satisfy all of the given conditions:\n - {1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{4}}\n - {\\frac{1}{2}, \\frac{1}{2}, \\frac{1}{2}, \\frac{1}{2}}\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf our set ```S1``` is ```[1,2,3,4,5]```\nThe qualified subsets are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nFrom the set ```S2``` equals to```[1,2,3]```, we have only ```4``` qualified subsets :\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"\ndef f(n):",
    "19": "Python 3\n\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf our set ```S1``` is equal to ```[1,2,3,4,5]```\nThe subsets that fulfill these property are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nFrom the set ```S2``` equals to```[1,2,3]```, it is obvious that we have only ```4``` subsets and are:\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"\ndef f(n):"
}