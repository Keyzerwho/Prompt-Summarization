{
    "0": "Python 3\n\"\"\"\nGiven a string, determine if given string is minor or major or not a chord.\n\n_____________________________________________________________\nRules:\n\n1. Basic chord have three elements.\n\n2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4.\n\n3. Chord is major when interval between first and second element equals 4 and between second and third -> 3.\n\n4. In minor/major chord interval between first and third element equals... 7.\n\n_______________________________________________________________\n\nnotes = \n['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\nInput:\nString of notes separated by whitespace, e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'.\n\"\"\"\ndef minor_or_major(chord):",
    "1": "Python 3\n\"\"\"\nCheck if given chord is minor or major.\n\n_____________________________________________________________\nRules:\n\n1. Basic minor/major chord have three elements.\n\n2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4.\n\n3. Chord is major when interval between first and second element equals 4 and between second and third -> 3.\n\n4. In minor/major chord interval between first and third element equals... 7.\n\n_______________________________________________________________\nThere is a preloaded list of the 12 notes of a chromatic scale built on C. This means that there are (almost) all allowed note' s names in music.\n\nnotes = \n['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\nNote that e. g. 'C#' - 'C' = 1, 'C' - 'C#' = 1, 'Db' - 'C' = 1 and 'B' - 'C' = 1. \n\nInput:\nString of notes separated by whitespace, e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'.\n\"\"\"\ndef minor_or_major(chord):",
    "2": "Python 3\n\"\"\"\nYou are given an array to check whether the characters of given string S belongs to it or not. Print 1 if it contains else print 0.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains- \na string $S$ of lowercase letter\na integer $n$ denoting length of character array $arr$\nnext line contains $n$ space separated characters.\n\n-----Output:-----\nFor each testcase, Print $1$ if the string contains characters from the given array only else print $0$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $0 \\leq n \\leq 10^5$\n\n-----Sample Input:-----\n3\nabcd\n4\na b c d\naabbbcccdddd\n4\na b c d\nacd\n3\na b d\n\n-----Sample Output:-----\n1\n1\n0\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYour are given a string $S$ containing only lowercase letter and a array of character $arr$. Find whether the given string only contains characters from the given character array. \nPrint $1$ if the string contains characters from the given array only else print $0$.\nNote: string contains characters in lower case only.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains- \na string $S$ of lowercase letter\na integer $n$ denoting length of character array $arr$\nnext line contains $n$ space separated characters.\n\n-----Output:-----\nFor each testcase, Print $1$ if the string contains characters from the given array only else print $0$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $0 \\leq n \\leq 10^5$\n\n-----Sample Input:-----\n3\nabcd\n4\na b c d\naabbbcccdddd\n4\na b c d\nacd\n3\na b d\n\n-----Sample Output:-----\n1\n1\n0\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.\n\nExamples:\nInput:\nnumber = 'G'\nOutput:\n[\"A + G\", \"B + F\", \"C + E\", \"D + D\"]\nExplanation:\nTranslating this into the decimal numeral system we get: number = 6, so it is [\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"].\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' \u2264 number \u2264 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"\ndef new_numeral_system(number):",
    "5": "Python 3\n\"\"\"\n# Task\n Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - `A for 0, B for 1, and so on`.\n\n The teacher assigned you the following numeral system exercise: given a one-digit `number`, you should find all unordered pairs of one-digit numbers whose values add up to the `number`.\n\n# Example\n\n For `number = 'G'`, the output should be `[\"A + G\", \"B + F\", \"C + E\", \"D + D\"]`\n\n Translating this into the decimal numeral system we get: number = 6, so it is `[\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"]`.\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' \u2264 number \u2264 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"\ndef new_numeral_system(number):",
    "6": "Python 3\n\"\"\"\nYou are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction or not.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.\n\n\n-----Output-----\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n\n-----Examples-----\nInput\n2\n6 12 10\n4 3 10\n\nOutput\nFinite\nInfinite\n\nInput\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n\nOutput\nFinite\nFinite\nFinite\nInfinite\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction.\n\nA fraction in notation with base $b$ is finite if it contains finite number of numerals after the decimal point. It is also possible that a fraction has zero numerals after the decimal point.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.\n\n\n-----Output-----\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n\n-----Examples-----\nInput\n2\n6 12 10\n4 3 10\n\nOutput\nFinite\nInfinite\n\nInput\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n\nOutput\nFinite\nFinite\nFinite\nInfinite\n\n\n\n-----Note-----\n\n$\\frac{6}{12} = \\frac{1}{2} = 0,5_{10}$\n\n$\\frac{4}{3} = 1,(3)_{10}$\n\n$\\frac{9}{36} = \\frac{1}{4} = 0,01_2$\n\n$\\frac{4}{12} = \\frac{1}{3} = 0,1_3$\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given two entities A and B and their positions are represented by integer coordinates on a horizantal line. the first position $x$ and a second position $y$. The Entity A moves in the positive direction by $a$, and the entity b moves to the negative direction by $b$.\n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, entities will be at position $2$ and $7$. At the $2$-nd second, both A and B will be at position $4$.\n\nWill the two entities be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the entities will be at the same point.\n\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$).\n\nEach test case contains exactly one line. The line consists of four integers $x$, $y$, $a$, $b$ ($0 \\le x \\lt y \\le 10^9$, $1 \\le a,b \\le 10^9$) \u2014 the current position of the entity A , the current position of the entity b, the moving distance of the entity A, and the moving distance of the entity b, respectively.\n\n\n-----Output-----\n\nFor each test case, print the single integer: number of seconds the two entities will take to be at the same position.\n\nIf the two entities will never be at the same position simultaneously, print $-1$.\n\n\n-----Example-----\nInput\n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput\n2\n-1\n10\n-1\n1\n\n\n\n-----Note-----\n\nThe first case is explained in the description.\n\nIn the second case, each rabbit will be at position $3$ and $7$ respectively at the $1$-st second. But in the $2$-nd second they will be at $6$ and $4$ respectively, and we can see that they will never be at the same position since the distance between the two rabbits will only increase afterward.\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nBeing tired of participating in too many Codeforces rounds, Gildong decided to take some rest in a park. He sat down on a bench, and soon he found two rabbits hopping around. One of the rabbits was taller than the other.\n\nHe noticed that the two rabbits were hopping towards each other. The positions of the two rabbits can be represented as integer coordinates on a horizontal line. The taller rabbit is currently on position $x$, and the shorter rabbit is currently on position $y$ ($x \\lt y$). Every second, each rabbit hops to another position. The taller rabbit hops to the positive direction by $a$, and the shorter rabbit hops to the negative direction by $b$.\n\n [Image] \n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, each rabbit will be at position $2$ and $7$. At the $2$-nd second, both rabbits will be at position $4$.\n\nGildong is now wondering: Will the two rabbits be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the rabbits will be at the same point.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$).\n\nEach test case contains exactly one line. The line consists of four integers $x$, $y$, $a$, $b$ ($0 \\le x \\lt y \\le 10^9$, $1 \\le a,b \\le 10^9$) \u2014 the current position of the taller rabbit, the current position of the shorter rabbit, the hopping distance of the taller rabbit, and the hopping distance of the shorter rabbit, respectively.\n\n\n-----Output-----\n\nFor each test case, print the single integer: number of seconds the two rabbits will take to be at the same position.\n\nIf the two rabbits will never be at the same position simultaneously, print $-1$.\n\n\n-----Example-----\nInput\n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput\n2\n-1\n10\n-1\n1\n\n\n\n-----Note-----\n\nThe first case is explained in the description.\n\nIn the second case, each rabbit will be at position $3$ and $7$ respectively at the $1$-st second. But in the $2$-nd second they will be at $6$ and $4$ respectively, and we can see that they will never be at the same position since the distance between the two rabbits will only increase afterward.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nWrite a function get_num() or getNum() that receives an array with potentially unordered prime factors and output: an array with the found integer n at index 0, the amount of total divisors at index 1, followed the smallest factor and the biggest one.\n\nExample:\nInput:\nget_num([2,13,2,5,2,5,3,3])\nOutput:\n[23400, 71, 2, 11700]\nExplanation:\nYou need to find the number, n, to which that prime factorization belongs.\nIt will be:\nn = 2\u00b3.3\u00b2.5\u00b2.13 = 23400\nThe list of divisors for that number (23400) is:\n2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700\nThere is a total amount of 71 divisors. The smallest divisor is 2 and the highest 11700.\nSo the expected output will be: \n[23400, 71, 2, 11700]\n\"\"\"\ndef get_num(arr):",
    "11": "Python 3\n\"\"\"\nYou will be given the prime factors of a number as an array.\nE.g: ```[2,2,2,3,3,5,5,13]```\n\nYou need to find the number, n, to which that prime factorization belongs.\nIt will be:\n```\nn = 2\u00b3.3\u00b2.5\u00b2.13 = 23400\n```\nThen, generate the divisors of this number.\n\nYour function ```get_num() or getNum()``` will receive an array with potentially unordered prime factors and should output: an array with the found integer n at index 0, the amount of total divisors (both prime and compound numbers) at index 1, followed the smallest factor (index 2, and the biggest one (last element)\n\nWe will see the example given above with the only difference that the array of the prime factors is unordered.\n\nThe list of divisors for that number (23400) is:\n```\n2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700 (not considering the integer 23400 itself)\n```\nThere is a total amount of ```71``` divisors. The smallest divisor is ```2``` and the highest ```11700```.\nSo the expected output will be: \n```\nget_num([2,13,2,5,2,5,3,3]) == [23400, 71, 2, 11700]\n```\nEnjoy!\n\"\"\"\ndef get_num(arr):",
    "12": "Python 3\n\"\"\"\nYou will be given a number and your task is to return the nth fibonacci string.\n\n\nExamples:\nInput:\nsolve(2)\nOutput:\n'010'\n\nInput:\nsolve(3)\nOutput:\n'01001'\n\n\"\"\"\ndef solve(n):",
    "13": "Python 3\n\"\"\"\nGiven that \n```\nf0 = '0'\nf1 = '01'\nf2 = '010' = f1 + f0\nf3 = '01001' = f2 + f1\n```\n\nYou will be given a number and your task is to return the `nth` fibonacci string. For example:\n\n```\nsolve(2) = '010'\nsolve(3) = '01001'\n```\n\nMore examples in test cases. Good luck!\n\nIf you like sequence Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"\ndef solve(n):",
    "14": "Python 3\n\"\"\"\nWrite a function which takes a number and returns the corresponding ASCII char for that value.\n\nExample: \nInput:\nget_char(65)\nOutput:\n'A'\n\"\"\"\ndef get_char(c):",
    "15": "Python 3\n\"\"\"\nWrite a function which takes a number and returns the corresponding ASCII char for that value.\n\nExample: \n\n~~~if-not:java,racket\n```\nget_char(65) # => 'A'\n```\n~~~\n~~~if:java\n~~~\n~~~if:racket\n~~~\n\nFor ASCII table, you can refer to http://www.asciitable.com/\n\"\"\"\ndef get_char(c):",
    "16": "Python 3\n\"\"\"\nFind the smallest positive integer M such that the bitwise XOR of M and M+1 is equal to given integer N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nGiven an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n-----Explanation-----First Example :  M desired in the problem would be 1. As bitwise XOR of 1 and 2 is equal to 3.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nReverse a linked list from position m to n.\n\nNote:\u00a01 \u2264 m \u2264 n \u2264 length of list.\n\nExample:\n\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:",
    "19": "Python 3\n\"\"\"\nReverse a linked list from position m to n. Do it in one-pass.\n\nNote:\u00a01 \u2264 m \u2264 n \u2264 length of list.\n\nExample:\n\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:"
}