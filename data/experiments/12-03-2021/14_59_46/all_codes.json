{
    "0": "\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    if chord[0] not in notes or chord[1] not in notes or chord[2] not in notes:\n        return 'Not a chord'\n    if notes.index(chord[0]) - notes.index(chord[1]) == 3 and notes.index(chord[1]) - notes.index(chord[2]) == 4:\n        return 'Minor'\n    elif notes.index(chord[0]) - notes.index(chord[1]) == 4 and notes.index(chord[1]) - notes.index(chord[2]) == 3:\n        return 'Major'\n    else:\n        return 'Not a chord'\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(minor_or_major('A C# E'))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert minor_or_major('A C# E') == 'Minor', 'Minor'\n    assert minor_or_major('A C# E') == 'Minor'\n    assert minor_or_major('A C# E') == 'Minor'\n    assert minor_or_major('A C# E') == 'Minor'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "1": "\n    notes = ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n    chord = chord.split()\n    if len(chord) != 3:\n        return 'Not a chord'\n    if chord[0] not in notes or chord[1] not in notes or chord[2] not in notes:\n        return 'Not a chord'\n    if notes.index(chord[0]) - notes.index(chord[1]) == 3 and notes.index(chord[1]) - notes.index(chord[2]) == 4:\n        return 'Minor'\n    if notes.index(chord[0]) - notes.index(chord[1]) == 4 and notes.index(chord[1]) - notes.index(chord[2]) == 3:\n        return 'Major'\n    return 'Not a chord'\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(minor_or_major('A C# E'))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert minor_or_major('A C# E') == 'Minor', 'Minor'\n    assert minor_or_major('A C E') == 'Major', 'Major'\n    assert minor_or_major('A C E G') == 'Not a chord', 'Not a chord'\n    assert minor_or_major('A B C# D') == 'Not a chord', 'Not a chord'\n    assert minor_or_major('A C G E') == 'Not a chord', 'Not a chord'\n    assert minor_or_major('A C G') == 'Not a chord', 'Not a chord'\n    assert minor_or_major('A C D') == 'Not a chord', 'Not a chord'\n    assert minor_or_major('C D E') == 'Minor', 'Minor'\n    assert minor_or_major('A B C# D#') == 'Minor', 'Minor'\n    assert minor_or_major('A B C# D# E') == 'Major', 'Major'\n    assert minor_or_major('A B C# D# F') == 'Minor', 'Minor'\n    assert minor_or_major('A B C# D# F# G#') == 'Major', 'Major'\n    assert minor_or_major('A B C# D# F#') == 'Minor', 'Minor'\n    assert minor_or_major('A B C# D# G#') == 'Major', 'Major'\n    assert minor_or_major('A B C# E') == 'Minor', 'Minor'\n    assert minor_or_major('A B C# E F#') == 'Major', 'Major'\n    assert minor_or_major('A B C# E G#') == 'Major', 'Major'\n    assert minor_or_major('A B C# E') == 'Minor', 'Minor'\n    assert minor_or_major('A B C#') == 'Minor', 'Minor'\n    assert minor_or_major('A B C') == 'Major', 'Major'\n    assert minor_or_major('A B') == 'Major', 'Major'\n    assert minor_or_major('A') == 'Major', 'Major'\n    assert minor_or_major('') == 'Major', 'Major'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")",
    "2": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        n = int(input())\n        arr = input().split()\n        flag = 0\n        for i in arr:\n            if i in s:\n                flag = 1\n            else:\n                flag = 0\n                break\n        if flag == 1:\n            print(1)\n        else:\n            print(0)",
    "3": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        n = int(input())\n        arr = input().split()\n        flag = 0\n        for i in s:\n            if i not in arr:\n                flag = 1\n                break\n        if flag == 1:\n            print(0)\n        else:\n            print(1)\n",
    "4": "\n    num = ord(number) - ord('A')\n    return [f'{chr(i + ord(\"A\"))} + {chr(num - i + ord(\"A\"))}' for i in range(num + 1)]",
    "5": "\n    return [f'{chr(ord(\"A\") + i) + chr(ord(\"A\") + j)} + {number}' for i in range(26) for j in range(26) if i + j == ord(number) - ord(\"A\")]",
    "6": "\n    n = int(input())\n    for i in range(n):\n        p, q, b = map(int, input().split())\n        if b == 1:\n            print(\"Finite\")\n        elif b == 2:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 3:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 4:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 5:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 6:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 7:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 8:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 9:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 10:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 11:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 12:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 13:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 14:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 15:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 16:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n                print(\"Finite\")\n            elif q == 1:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        elif b == 17:\n            if p == 0:\n                print(\"Finite\")\n            elif p == 1:\n               ",
    "7": "\n    n = int(input())\n    for i in range(n):\n        p, q, b = map(int, input().split())\n        if b == 10:\n            if p == q:\n                print(\"Finite\")\n            else:\n                print(\"Infinite\")\n        else:\n            if p == q:\n                print(\"Finite\")\n            else:\n                if p % b == 0:\n                    print(\"Finite\")\n                else:\n                    print(\"Infinite\")\n",
    "8": "\n    t = int(input())\n    for i in range(t):\n        x, y, a, b = map(int, input().split())\n        if a == b:\n            if x == y:\n                print(0)\n            elif x > y:\n                print(-1)\n            else:\n                print(y - x)\n        else:\n            if x == y:\n                print(0)\n            elif x > y:\n                print(-1)\n            else:\n                if (y - x) % (a - b) == 0:\n                    print((y - x) // (a - b))\n                else:\n                    print(-1)\n",
    "9": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        x, y, a, b = map(int, input().split())\n        if a == b:\n            print(-1)\n        else:\n            if (y - x) % (a - b) == 0:\n                print((y - x) // (a - b))\n            else:\n                print(-1)\n",
    "10": "\n    # your code here\n    return [n, len(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))]",
    "11": "\n    n = 1\n    for i in arr:\n        n *= i\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return [n, len(divisors), min(divisors), max(divisors)]",
    "12": "\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return str(bin(a))[2:]",
    "13": "\n    # your code here\n    pass",
    "14": "\n    return chr(c)",
    "15": "\n    return chr(c)",
    "16": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(2)\n        elif n == 3:\n            print(1)\n        else:\n            print(-1)",
    "17": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n == 0:\n            print(0)\n        elif n == 1:\n            print(1)\n        else:\n            for i in range(1, n):\n                if i ^ (i+1) == n:\n                    print(i)\n                    break\n                elif i ^ (i+1) > n:\n                    print(-1)\n                    break",
    "18": "\n        if not head:\n            return None\n        if m == n:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for i in range(m-1):\n            pre = pre.next\n        cur = pre.next\n        for i in range(n-m):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = pre.next\n            pre.next = temp\n        return dummy.next",
    "19": "\n        if not head:\n            return None\n        if m == n:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for i in range(m-1):\n            pre = pre.next\n        cur = pre.next\n        for i in range(n-m):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = pre.next\n            pre.next = temp\n        return dummy.next"
}