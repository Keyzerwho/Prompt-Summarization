{
    "0": "Python 3\n\"\"\"\nYou are given an array of integers. You need to add these integers without repetition and generate two largest possible numbers of equal value. For example, if you have numbers 1, 2, and 3, you can add them together to make a sum of value 6.\nReturn the largest possible sum.\u00a0 If you cannot make two sums of equal value, return 0.\n\u00a0\nExample 1:\nInput: [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\n\nExample 2:\nInput: [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\n\n\nExample 3:\nInput: [1,2]\nOutput: 0\nExplanation: tow equal interers cannot be generated, so we return 0.\n\n\n\u00a0\nNote:\n\n0 <= rods.length <= 20\n1 <= rods[i] <= 1000\nThe sum of rods is at most 5000.\n\n\"\"\"\nclass Solution:\n    def tallestBillboard(self, rods: List[int]) -> int:",
    "1": "Python 3\n\"\"\"\nYou are installing a billboard and want it to have the largest height.\u00a0 The billboard will have two steel supports, one on each side.\u00a0 Each steel support must be an equal height.\nYou have a collection of rods which can be welded together.\u00a0 For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation.\u00a0 If you cannot support the billboard, return 0.\n\u00a0\nExample 1:\nInput: [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n\n\nExample 2:\nInput: [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n\n\n\nExample 3:\nInput: [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.\n\n\n\u00a0\nNote:\n\n0 <= rods.length <= 20\n1 <= rods[i] <= 1000\nThe sum of rods is at most 5000.\n\"\"\"\nclass Solution:\n    def tallestBillboard(self, rods: List[int]) -> int:",
    "2": "Python 3\n\"\"\"\nYou are given n sets which are a subset of the set of natural numbers in the range 1 to m. You can add a single number to any one set at the cost 1.\n\nFind the minimum total cost such that for every pair of sets the union is not a null set.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of sets and the range of natural numbers.\n\nThe next n lines that follow - the sets containing the natural numbers in range 1 to m. If the input is zero it is a null set.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum cost such that the union of no two pairs is a null set.\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the third example add 2 to the third subset.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe \"BerCorp\" company has got n employees. These employees can use m approved official languages for the formal correspondence. The languages are numbered with integers from 1 to m. For each employee we have the list of languages, which he knows. This list could be empty, i. e. an employee may know no official languages. But the employees are willing to learn any number of official languages, as long as the company pays their lessons. A study course in one language for one employee costs 1 berdollar.\n\nFind the minimum sum of money the company needs to spend so as any employee could correspond to any other one (their correspondence can be indirect, i. e. other employees can help out translating).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of employees and the number of languages.\n\nThen n lines follow \u2014 each employee's language list. At the beginning of the i-th line is integer k_{i} (0 \u2264 k_{i} \u2264 m) \u2014 the number of languages the i-th employee knows. Next, the i-th line contains k_{i} integers \u2014 a_{ij} (1 \u2264 a_{ij} \u2264 m) \u2014 the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum amount of money to pay so that in the end every employee could write a letter to every other one (other employees can help out translating).\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the second sample the employee 1 can learn language 2, and employee 8 can learn language 4.\n\nIn the third sample employee 2 must learn language 2.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nWrite a function that takes an integer and returns an array [A, B, C], where A is the number of multiples of 3 below the given integer, B is the number of multiples of 5 below the given integer and C is the number of multiples of 3 and 5 below the given integer. \n\nExamples:\nInput:\nsolution(20)\nOutput:\n[5, 2, 1]\n\"\"\"\ndef solution(number):",
    "5": "Python 3\n\"\"\"\nWrite a function that takes an integer and returns an array `[A, B, C]`, where `A` is the number of multiples of 3 (but not 5) below the given integer, `B` is the number of multiples of 5 (but not 3) below the given integer and `C` is the number of multiples of 3 and 5 below the given integer. \n\nFor example, `solution(20)` should return `[5, 2, 1]`\n\n~~~if:r\n```r\n# in R, returns a numeric vector\nsolution(20)\n[1] 5 2 1\n\nclass(solution(20))\n[1] \"numeric\"\n```\n~~~\n\"\"\"\ndef solution(number):",
    "6": "Python 3\n\"\"\"\nYou have to check the divisibility of all the permutation of given number N by 5. If any of the permutations is divisible by 5 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input,$N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n19\n385\n\n-----Sample Output:-----\n0\n1\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 5. If any of the permutations is divisible by 5 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input,$N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n19\n385\n\n-----Sample Output:-----\n0\n1\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nYou are given a matrix N x M of N boys and M girls where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. There will be a collison if two boys like the same girl. Calculate the number of different collisions\n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases. Then T test cases follow.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nOnce N boys and M girls attended a party. You are given a matrix A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. Note that it is not necessary that if a boy x likes girl y, then girl y should like boy x.\nYou know that if there are two different boys x and y, who both like girl z, then there will be a collision.\nCan you calculate the number of different collisions at this party? Note that order of boys in the collision doesn't matter.\n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases. Then T test cases follow.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions at the party.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n-----Explanation-----\nExample Case 1. All three boys like the first girl, so there are (1, 2, 1), (1, 3, 1), (2, 3, 1) collisions with her. Boys 1 and 3 both like the second girl so this is one more collision. Only one boy likes the third girl, so there are no collisions with her and thus we have 4 collisions total.\nExample Case 2. For each girl there is only one boy who likes her, so there are no collisions at all.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\nsummary : \n\n\n\n-----Input-----\n\nThe first line contains two integers l and r (2 \u2264 l \u2264 r \u2264 10^9).\n\n\n-----Output-----\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n19 29\n\nOutput\n2\n\nInput\n3 6\n\nOutput\n3\n\n\n\n-----Note-----\n\nDefinition of a divisor: https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nTavak and Seyyed are good friends. Seyyed is very funny and he told Tavak to solve the following problem instead of longest-path.\n\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\n\n-----Input-----\n\nThe first line contains two integers l and r (2 \u2264 l \u2264 r \u2264 10^9).\n\n\n-----Output-----\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n19 29\n\nOutput\n2\n\nInput\n3 6\n\nOutput\n3\n\n\n\n-----Note-----\n\nDefinition of a divisor: https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven an array of integers $a_1, a_2, \\ldots, a_n$.\n\nWe say that $y$ is reachable from $x$ if $x<y$ and there exists an integer array $p$ such that $x = p_1 < p_2 < \\ldots < p_k=y$, and $a_{p_i}\\, \\&\\, a_{p_{i+1}} > 0$ for all integers $i$ such that $1 \\leq i < k$.\n\nHere $\\&$ denotes the bitwise AND operation.\n\nCheck reachability for each of them.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($2 \\leq n \\leq 300\\,000$, $1 \\leq q \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the number of queries you need to answer.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 300\\,000$)\u00a0\u2014 the given array.\n\nThe next $q$ lines contain two integers each. The $i$-th of them contains two space-separated integers $x_i$ and $y_i$ ($1 \\leq x_i < y_i \\leq n$). You need to check if $y_i$ is reachable from $x_i$. \n\n\n-----Output-----\n\nOutput $q$ lines. In the $i$-th of them print \"Shi\" if $y_i$ is reachable from $x_i$, otherwise, print \"Fou\".\n\n\n-----Example-----\nInput\n5 3\n1 3 0 2 1\n1 3\n2 4\n1 4\n\nOutput\nFou\nShi\nShi\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nToad Pimple has an array of integers $a_1, a_2, \\ldots, a_n$.\n\nWe say that $y$ is reachable from $x$ if $x<y$ and there exists an integer array $p$ such that $x = p_1 < p_2 < \\ldots < p_k=y$, and $a_{p_i}\\, \\&\\, a_{p_{i+1}} > 0$ for all integers $i$ such that $1 \\leq i < k$.\n\nHere $\\&$ denotes the bitwise AND operation.\n\nYou are given $q$ pairs of indices, check reachability for each of them.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($2 \\leq n \\leq 300\\,000$, $1 \\leq q \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the number of queries you need to answer.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 300\\,000$)\u00a0\u2014 the given array.\n\nThe next $q$ lines contain two integers each. The $i$-th of them contains two space-separated integers $x_i$ and $y_i$ ($1 \\leq x_i < y_i \\leq n$). You need to check if $y_i$ is reachable from $x_i$. \n\n\n-----Output-----\n\nOutput $q$ lines. In the $i$-th of them print \"Shi\" if $y_i$ is reachable from $x_i$, otherwise, print \"Fou\".\n\n\n-----Example-----\nInput\n5 3\n1 3 0 2 1\n1 3\n2 4\n1 4\n\nOutput\nFou\nShi\nShi\n\n\n\n-----Note-----\n\nIn the first example, $a_3 = 0$. You can't reach it, because AND with it is always zero. $a_2\\, \\&\\, a_4 > 0$, so $4$ is reachable from $2$, and to go from $1$ to $4$ you can use $p = [1, 2, 4]$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a sequence of n integers a_1, a_2, ..., a_{n}. \n\nDetermine a real number x such that the weakness of the sequence a_1 - x, a_2 - x, ..., a_{n} - x is as small as possible.\n\nThe weakness of a sequence is defined as the maximum value of the poorness over all segments of a sequence.\n\nThe poorness of a segment is defined as the absolute value of sum of the elements of segment.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 200 000), the length of a sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (|a_{i}| \u2264 10 000).\n\n\n-----Output-----\n\nOutput a real number denoting the minimum possible weakness of a_1 - x, a_2 - x, ..., a_{n} - x. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1.000000000000000\n\nInput\n4\n1 2 3 4\n\nOutput\n2.000000000000000\n\nInput\n10\n1 10 2 9 3 8 4 7 5 6\n\nOutput\n4.500000000000000\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a sequence of n integers a_1, a_2, ..., a_{n}. \n\nDetermine a real number x such that the weakness of the sequence a_1 - x, a_2 - x, ..., a_{n} - x is as small as possible.\n\nThe weakness of a sequence is defined as the maximum value of the poorness over all segments (contiguous subsequences) of a sequence.\n\nThe poorness of a segment is defined as the absolute value of sum of the elements of segment.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 200 000), the length of a sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (|a_{i}| \u2264 10 000).\n\n\n-----Output-----\n\nOutput a real number denoting the minimum possible weakness of a_1 - x, a_2 - x, ..., a_{n} - x. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1.000000000000000\n\nInput\n4\n1 2 3 4\n\nOutput\n2.000000000000000\n\nInput\n10\n1 10 2 9 3 8 4 7 5 6\n\nOutput\n4.500000000000000\n\n\n\n-----Note-----\n\nFor the first case, the optimal value of x is 2 so the sequence becomes  - 1, 0, 1 and the max poorness occurs at the segment \"-1\" or segment \"1\". The poorness value (answer) equals to 1 in this case. \n\nFor the second sample the optimal value of x is 2.5 so the sequence becomes  - 1.5,  - 0.5, 0.5, 1.5 and the max poorness occurs on segment \"-1.5 -0.5\" or \"0.5 1.5\". The poorness value (answer) equals to 2 in this case.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven two unordered lists of Size N and N+1 find and return the additional element in the second list.\nInput : \nFirst line contains the value of N. Second line contains list of size N. Third line contains list of size N+1.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Elements \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef and his friends are playing the game AMONG US. They all have chosen their names as numbers. There are N people in Chef\u2019s group including him, and each swears that he is not the imposter. However, it turns out there were N+1 people in the game. Now all that Chef needs to know is the name of the imposter, which is a number. Also remember that numbers can be duplicate. Can you help out Chef in finding the imposter?\nInput : \nFirst line contains the value of N. Second line contains the N numbers that Chef\u2019s friends used as their names. Third line contains the N+1 numbers that people in the game have used as their names.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Numbers used as names \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nImplement the ToUnderscore() method to translate a camelCase name into an underscore separated name. Make sure the results don't get split by underscores. So only add an underscore in front of the first number. Also if it's already an underscore name, don't change it. But if it's not split correctly,  you should adjust them. Some of the names have a learning and trailing underscore, don't remove this.\n\nExamples:\nInput:\n\"ThisIsAUnitTest\"\nOutput:\n\"This_Is_A_Unit_Test\"\n\nInput:\n\"Calculate15Plus5Equals20\"\nOutput:\n\"Calculate_15_Plus_5_Equals_20\"\n\nInput:\n\"This_Is_Already_Split_Correct\"\nOutput:\n\"This_Is_Already_Split_Correct\"\n\nInput:\n\"ThisIs_Not_SplitCorrect\"\nOutput:\n\"This_Is_Not_Split_Correct\"\n\nInput:\n\"_UnderscoreMarked_Test_Name_\"\nOutput:\n_Underscore_Marked_Test_Name_\"\n\"\"\"\ndef toUnderScore(name):",
    "19": "Python 3\n\"\"\"\nYou wrote all your unit test names in camelCase.\nBut some of your colleagues have troubles reading these long test names.\nSo you make a compromise to switch to underscore separation.\n\nTo make these changes fast you wrote a class to translate a camelCase name\ninto an underscore separated name.\n\nImplement the ToUnderscore() method.\n\nExample:\n\n`\"ThisIsAUnitTest\" => \"This_Is_A_Unit_Test\"`\n\n\n**But of course there are always special cases...**\n\nYou also have some calculation tests. Make sure the results don't get split by underscores.\nSo only add an underscore in front of the first number.\n\nAlso Some people already used underscore names in their tests. You don't want to change them.\nBut if they are not split correct you should adjust them.\n\nSome of your colleagues mark their tests with a leading and trailing underscore.\nDon't remove this.\n\nAnd of course you should handle empty strings to avoid unnecessary errors. Just return an empty string then.\n\nExample:\n\n`\"Calculate15Plus5Equals20\" => \"Calculate_15_Plus_5_Equals_20\"`\n\n`\"This_Is_Already_Split_Correct\" => \"This_Is_Already_Split_Correct\"`\n\n`\"ThisIs_Not_SplitCorrect\" => \"This_Is_Not_Split_Correct\"`\n\n`\"_UnderscoreMarked_Test_Name_\" => _Underscore_Marked_Test_Name_\"`\n\"\"\"\ndef toUnderScore(name):"
}