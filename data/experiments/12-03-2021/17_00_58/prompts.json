{
    "0": "Python 3\n\"\"\"\nYou are given a graph with $3 \\cdot n$ vertices and $m$ edges. You are to find a matching of $n$ edges, or an independent set of $n$ vertices.\n\nA set of edges is called a matching if no two edges share an endpoint.\n\nA set of vertices is called an independent set if no two vertices are connected with an edge.\n\n-----Input-----\n\nThe first line contains a single integer $T \\ge 1$\u00a0\u2014 the number of graphs you need to process. The description of $T$ graphs follows.\n\nThe first line of description of a single graph contains two integers $n$ and $m$, where $3 \\cdot n$ is the number of vertices, and $m$ is the number of edges in the graph ($1 \\leq n \\leq 10^{5}$, $0 \\leq m \\leq 5 \\cdot 10^{5}$).\n\nEach of the next $m$ lines contains two integers $v_i$ and $u_i$ ($1 \\leq v_i, u_i \\leq 3 \\cdot n$), meaning that there is an edge between vertices $v_i$ and $u_i$.\n\nThere are no self-loops and no multiple edges in the graph.\n\nThe sum of all $n$ over all graphs in a single test does not exceed $10^{5}$, and the sum of all $m$ over all graphs in a single test does not exceed $5 \\cdot 10^{5}$.\n\n\n-----Output-----\n\nPrint your answer for each of the $T$ graphs which has the following output format.\n\nIf you found a matching of size $n$, on the first line print \"Matching\", and on the second line print $n$ integers\u00a0\u2014 the indices of the edges in the matching. The edges are numbered from $1$ to $m$ in the input order.\n\nIf an independent set of size $n$, on the first line print \"IndSet\", and on the second line print $n$ integers\u00a0\u2014 the indices of the vertices in the independent set.\n\nIf there is no matching and no independent set of the specified size, print \"Impossible\" .\n\nIf there are several solutions, print any one only.\n\n\n-----Example-----\nInput\n4\n1 2\n1 3\n1 2\n1 2\n1 3\n1 2\n2 5\n1 2\n3 1\n1 4\n5 1\n1 6\n2 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\nOutput\nMatching\n2\nIndSet\n1\nIndSet\n2 4\nMatching\n1 15\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a graph with $3 \\cdot n$ vertices and $m$ edges. You are to find a matching of $n$ edges, or an independent set of $n$ vertices.\n\nA set of edges is called a matching if no two edges share an endpoint.\n\nA set of vertices is called an independent set if no two vertices are connected with an edge.\n\n\n-----Input-----\n\nThe first line contains a single integer $T \\ge 1$\u00a0\u2014 the number of graphs you need to process. The description of $T$ graphs follows.\n\nThe first line of description of a single graph contains two integers $n$ and $m$, where $3 \\cdot n$ is the number of vertices, and $m$ is the number of edges in the graph ($1 \\leq n \\leq 10^{5}$, $0 \\leq m \\leq 5 \\cdot 10^{5}$).\n\nEach of the next $m$ lines contains two integers $v_i$ and $u_i$ ($1 \\leq v_i, u_i \\leq 3 \\cdot n$), meaning that there is an edge between vertices $v_i$ and $u_i$.\n\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\n\nIt is guaranteed that the sum of all $n$ over all graphs in a single test does not exceed $10^{5}$, and the sum of all $m$ over all graphs in a single test does not exceed $5 \\cdot 10^{5}$.\n\n\n-----Output-----\n\nPrint your answer for each of the $T$ graphs. Output your answer for a single graph in the following format.\n\nIf you found a matching of size $n$, on the first line print \"Matching\" (without quotes), and on the second line print $n$ integers\u00a0\u2014 the indices of the edges in the matching. The edges are numbered from $1$ to $m$ in the input order.\n\nIf you found an independent set of size $n$, on the first line print \"IndSet\" (without quotes), and on the second line print $n$ integers\u00a0\u2014 the indices of the vertices in the independent set.\n\nIf there is no matching and no independent set of the specified size, print \"Impossible\" (without quotes).\n\nYou can print edges and vertices in any order.\n\nIf there are several solutions, print any. In particular, if there are both a matching of size $n$, and an independent set of size $n$, then you should print exactly one of such matchings or exactly one of such independent sets.\n\n\n-----Example-----\nInput\n4\n1 2\n1 3\n1 2\n1 2\n1 3\n1 2\n2 5\n1 2\n3 1\n1 4\n5 1\n1 6\n2 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\nOutput\nMatching\n2\nIndSet\n1\nIndSet\n2 4\nMatching\n1 15\n\n\n\n-----Note-----\n\nThe first two graphs are same, and there are both a matching of size 1 and an independent set of size 1. Any of these matchings and independent sets is a correct answer.\n\nThe third graph does not have a matching of size 2, however, there is an independent set of size 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer is not correct, because you are asked to find an independent set (or matching) of size exactly $n$.\n\nThe fourth graph does not have an independent set of size 2, but there is a matching of size 2.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given an integer N,to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nGiven an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n-----Explanation-----First Example :  M desired in the problem would be 1. As bitwise XOR of 1 and 2 is equal to 3.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nAn element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. \n\nFor example:\nInput:\nsolve([1,21,4,7,5])\nOutput:\n[21,7,5]\nExplanation:\n21, 7 and 5 are greater than elements to their right. \n\nInput:\nsolve([5,4,3,2,1])\nOutput:\n[5,4,3,2,1]\n\n\"\"\"\ndef solve(arr):",
    "5": "Python 3\n\"\"\"\nAn element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:\n```Haskell\nsolve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. \nsolve([5,4,3,2,1]) = [5,4,3,2,1]\n\nNotice that the last element is always included.\n```\n\nMore examples in the test cases.\n\nGood luck!\n\"\"\"\ndef solve(arr):",
    "6": "Python 3\n\"\"\"\nYou are given a directed graph of $n$ vertices and $m$ edges. Vertices are numbered from $1$ to $n$. There is a token in vertex $1$.\n\nThe following actions are allowed: Token movement. To move the token from vertex $u$ to vertex $v$ if there is an edge $u \\to v$ in the graph. This action takes $1$ second. To transpose all the edges in the graph: replace each edge $u \\to v$ by an edge $v \\to u$. This action takes increasingly more time: $k$-th transposition takes $2^{k-1}$ seconds.\n\nThe goal is to move the token from vertex $1$ to vertex $n$ in the shortest possible time. Print this time modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n, m$ ($1 \\le n, m \\le 200\\,000$).\n\nThe next $m$ lines contain two integers each: $u, v$ ($1 \\le u, v \\le n; u \\ne v$), which represent the edges of the graph. It is guaranteed that all ordered pairs $(u, v)$ are distinct.\n\nIt is guaranteed that it is possible to move the token from vertex $1$ to vertex $n$ using the actions above.\n\n\n-----Output-----\n\nPrint one integer: the minimum required time modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\n\nOutput\n2\n\nInput\n4 3\n2 1\n2 3\n4 3\n\nOutput\n10\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given a directed graph of $n$ vertices and $m$ edges. Vertices are numbered from $1$ to $n$. There is a token in vertex $1$.\n\nThe following actions are allowed:   Token movement. To move the token from vertex $u$ to vertex $v$ if there is an edge $u \\to v$ in the graph. This action takes $1$ second.  Graph transposition. To transpose all the edges in the graph: replace each edge $u \\to v$ by an edge $v \\to u$. This action takes increasingly more time: $k$-th transposition takes $2^{k-1}$ seconds, i.e. the first transposition takes $1$ second, the second one takes $2$ seconds, the third one takes $4$ seconds, and so on. \n\nThe goal is to move the token from vertex $1$ to vertex $n$ in the shortest possible time. Print this time modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n, m$ ($1 \\le n, m \\le 200\\,000$).\n\nThe next $m$ lines contain two integers each: $u, v$ ($1 \\le u, v \\le n; u \\ne v$), which represent the edges of the graph. It is guaranteed that all ordered pairs $(u, v)$ are distinct.\n\nIt is guaranteed that it is possible to move the token from vertex $1$ to vertex $n$ using the actions above.\n\n\n-----Output-----\n\nPrint one integer: the minimum required time modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\n\nOutput\n2\n\nInput\n4 3\n2 1\n2 3\n4 3\n\nOutput\n10\n\n\n\n-----Note-----\n\nThe first example can be solved by transposing the graph and moving the token to vertex $4$, taking $2$ seconds.\n\nThe best way to solve the second example is the following: transpose the graph, move the token to vertex $2$, transpose the graph again, move the token to vertex $3$, transpose the graph once more and move the token to vertex $4$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou have an array of integers, each integer is between $0$ and $m-1$ inclusive. The integers are $a_1, a_2, \\ldots, a_n$.\n\nIn one operation you can choose an integer $k$ and $k$ indices $i_1, i_2, \\ldots, i_k$ such that $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$. You should then change $a_{i_j}$ to $((a_{i_j}+1) \\bmod m)$ for each chosen integer $i_j$. The integer $m$ is fixed for all operations and indices.\n\nHere $x \\bmod y$ denotes the remainder of the division of $x$ by $y$.\n\nYou wants to make this array non-decreasing with the minimum number of such operations. Find this minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the parameter $m$.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < m$)\u00a0\u2014 the given array.\n\n\n-----Output-----\n\nOutput one integer: the minimum number of described operations Zitz needs to make his array non-decreasing. If no operations required, print $0$.\n\nIt is easy to see that with enough operations Zitz can always make his array non-decreasing.\n\n\n-----Examples-----\nInput\n5 3\n0 0 0 1 2\n\nOutput\n0\n\nInput\n5 7\n0 6 1 3 2\n\nOutput\n1\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nToad Zitz has an array of integers, each integer is between $0$ and $m-1$ inclusive. The integers are $a_1, a_2, \\ldots, a_n$.\n\nIn one operation Zitz can choose an integer $k$ and $k$ indices $i_1, i_2, \\ldots, i_k$ such that $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$. He should then change $a_{i_j}$ to $((a_{i_j}+1) \\bmod m)$ for each chosen integer $i_j$. The integer $m$ is fixed for all operations and indices.\n\nHere $x \\bmod y$ denotes the remainder of the division of $x$ by $y$.\n\nZitz wants to make his array non-decreasing with the minimum number of such operations. Find this minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the parameter $m$.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < m$)\u00a0\u2014 the given array.\n\n\n-----Output-----\n\nOutput one integer: the minimum number of described operations Zitz needs to make his array non-decreasing. If no operations required, print $0$.\n\nIt is easy to see that with enough operations Zitz can always make his array non-decreasing.\n\n\n-----Examples-----\nInput\n5 3\n0 0 0 1 2\n\nOutput\n0\n\nInput\n5 7\n0 6 1 3 2\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, the array is already non-decreasing, so the answer is $0$.\n\nIn the second example, you can choose $k=2$, $i_1 = 2$, $i_2 = 5$, the array becomes $[0,0,1,3,3]$. It is non-decreasing, so the answer is $1$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have a string S consisting of N uppercase English letters.Only one time you can choose any position in the string, remove the character at that position and insert it back to any other place in the string.Find the  lexicographically smallest  string you can achieve.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains the single integer N denoting length of string S.\nThe second line contains the string S.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 50\n- S will consist of uppercase English letters.\n\n-----Example-----\nInput:\n2\n4\nDCBA\n7\nXYZZYZZ\n\nOutput:\nADCB\nXYYZZZZ\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou have a string S consisting of N uppercase English letters. You are allowed to perform at most one operation of following kind: Choose any position in the string, remove the character at that position and insert it back to any other place in the string.\n\nFind the  lexicographically smallest  string you can achieve.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains the single integer N denoting length of string S.\nThe second line contains the string S.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 50\n- S will consist of uppercase English letters.\n\n-----Example-----\nInput:\n2\n4\nDCBA\n7\nXYZZYZZ\n\nOutput:\nADCB\nXYYZZZZ\n\n-----Explanation-----\nExample case 1. The optimal solution here is to choose the last character and put it in the beginning of the string. So the answer will be ADCB\nExample case 2. The optimal solution here is to choose the 5-th character (1-based index) and put it between the 2-nd and the 3-rd characters. So the answer will be XYYZZZZ\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYour company was appointed to lay new asphalt on the highway of length $n$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are $g$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $b$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $g$ good days, $b$ bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days $1, 2, \\dots, g$ are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. \n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of test cases.\n\nNext $T$ lines contain test cases \u2014 one per line. Each line contains three integers $n$, $g$ and $b$ ($1 \\le n, g, b \\le 10^9$) \u2014 the length of the highway and the number of good and bad days respectively.\n\n\n-----Output-----\n\nPrint $T$ integers \u2014 one per test case. For each test case, print the minimum number of days required to repair the whole highway if at least half of it should have high quality.\n\n\n-----Example-----\nInput\n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput\n5\n8\n499999500000\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYour company was appointed to lay new asphalt on the highway of length $n$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are $g$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $b$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $g$ good days, $b$ bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days $1, 2, \\dots, g$ are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the $n = 5$ then at least $3$ units of the highway should have high quality; if $n = 4$ then at least $2$ units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of test cases.\n\nNext $T$ lines contain test cases \u2014 one per line. Each line contains three integers $n$, $g$ and $b$ ($1 \\le n, g, b \\le 10^9$) \u2014 the length of the highway and the number of good and bad days respectively.\n\n\n-----Output-----\n\nPrint $T$ integers \u2014 one per test case. For each test case, print the minimum number of days required to repair the whole highway if at least half of it should have high quality.\n\n\n-----Example-----\nInput\n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput\n5\n8\n499999500000\n\n\n\n-----Note-----\n\nIn the first test case, you can just lay new asphalt each day, since days $1, 3, 5$ are good.\n\nIn the second test case, you can also lay new asphalt each day, since days $1$-$8$ are good.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nA standard 8x8 chess board has its rows (aka ranks) labelled 1-8 from bottom to top, and its columns (aka files) labelled a-h from left to right. \nAny square can be denoted by a combination of letter and number. \nFor example, the top left square is a8. A queen may attack any square on its rank or file. It may also attack any square diagonally.\n\nIn this kata, chessboard may have any size from 1 to 10. \nColumns are marked with letters a-j, and rows with single digit from 1 to 0 (first row is marked with 1, and tenth row is marked with 0).\n\nYou will be given the position of one queen on the board. \nYour challenge is to compute the position of the remaining queens and return the full solution (including the original input) as a comma-separated string (e.g. `'d8,a7,e6,h5,b4,g3,c2,f1'`). \nFields do not have to be sorted in any particular way, but you have to adhere to above format.\n\"\"\"\ndef queens(position, size):",
    "15": "Python 3\n\"\"\"\nBased on the well known ['Eight Queens' problem](https://en.wikipedia.org/wiki/Eight_queens_puzzle).\n\n#### Summary\nYour challenge is to place N queens on a chess board such that none of the queens are attacking each other.\n\n#### Details\nA standard 8x8 chess board has its rows (aka ranks) labelled 1-8 from bottom to top, and its columns (aka files) labelled a-h from left to right. Any square can be denoted by a combination of letter and number. For example, the top left square is a8. A queen may attack any square on its rank or file. It may also attack any square diagonally.\n\nIn this kata, chessboard may have any size from 1 to 10. Columns are marked with letters a-j, and rows with single digit from 1 to 0 (first row is marked with 1, ninth row is marked with 9, and tenth row is marked with 0, so `a1` denotes bottom left field of the chessboard, and `j0` - top right field on a 10x10 board).\n\nYou will be given the position of one queen on the board (e.g. `'c3'`). Your challenge is to compute the position of the remaining queens and return the full solution (including the original input) as a comma-separated string (e.g. `'d8,a7,e6,h5,b4,g3,c2,f1'`). Fields do not have to be sorted in any particular way, but you have to adhere to above format (lowercase letters, no spaces, fields separated with commas).\n\nNote that there may be multiple valid solutions for a given starting position. Your function only needs to produce (any) one of these. All given starting positions produce valid solutions.\n\nIf you wish to write more tests, the validity of a solution may be checked using preloaded function (see sample tests).\n\nHint: check the wiki article for the various algorithms that are applicable to this problem.\n\n----\nNext steps:\n - [N queens problem (with no mandatory queen position)](https://www.codewars.com/kata/52cdc1b015db27c484000031)\n - [N queens problem (with one mandatory queen position) - challenge version](https://www.codewars.com/kata/5985ea20695be6079e000003)\n\"\"\"\ndef queens(position, size):",
    "16": "Python 3\n\"\"\"\nYou are given an array of unique integers which represents salaries of employees.\nReturn the average salary of employees excluding the minimum and maximum salary.\n\u00a0\nExample 1:\nInput: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000)/2= 2500\n\nExample 2:\nInput: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000)/1= 2000\n\nExample 3:\nInput: salary = [6000,5000,4000,3000,2000,1000]\nOutput: 3500.00000\n\nExample 4:\nInput: salary = [8000,9000,2000,3000,6000,1000]\nOutput: 4750.00000\n\n\u00a0\nConstraints:\n\n3 <= salary.length <= 100\n10^3\u00a0<= salary[i] <= 10^6\nAnswers within 10^-5 of the actual value will be accepted as correct.\n\"\"\"\nclass Solution:\n    def average(self, salary: List[int]) -> float:",
    "17": "Python 3\n\"\"\"\nGiven an array of unique integers salary\u00a0where salary[i] is the salary of the employee i.\nReturn the average salary of employees excluding the minimum and maximum salary.\n\u00a0\nExample 1:\nInput: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000)/2= 2500\n\nExample 2:\nInput: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000)/1= 2000\n\nExample 3:\nInput: salary = [6000,5000,4000,3000,2000,1000]\nOutput: 3500.00000\n\nExample 4:\nInput: salary = [8000,9000,2000,3000,6000,1000]\nOutput: 4750.00000\n\n\u00a0\nConstraints:\n\n3 <= salary.length <= 100\n10^3\u00a0<= salary[i] <= 10^6\nsalary[i] is unique.\nAnswers within 10^-5 of the actual value will be accepted as correct.\n\"\"\"\nclass Solution:\n    def average(self, salary: List[int]) -> float:",
    "18": "Python 3\n\"\"\"\nWrite a program to calculate the sum of all the digits of given integer N. \n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, calculate the sum of digits of N, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n12345\n31203\n2123\nOutput\n15\n9\n8\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou're given an integer N. Write a program to calculate the sum of all the digits of N. \n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, calculate the sum of digits of N, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n12345\n31203\n2123\nOutput\n15\n9\n8\n\"\"\"\ndef code():"
}