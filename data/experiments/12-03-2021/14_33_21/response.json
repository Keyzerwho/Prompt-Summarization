{
    "id": "cmpl-4BASoqMEJIBh96WfpxOWcRNfa6ASO",
    "object": "text_completion",
    "created": 1638567178,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        K = int(input())\n        if K == 1:\n            print(K)\n        else:\n            for j in range(K):\n                if j == 0:\n                    print(K, end=\"\")\n                else:\n                    print(K-j, end=\"\")\n            print()\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        K = int(input())\n        for j in range(1, K+1):\n            print(j, end=\"\")\n        for j in range(K-1, 0, -1):\n            print(j, end=\"\")\n        print()\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n\tt = int(input())\n\tfor i in range(t):\n\t\tn,k = map(int,input().split())\n\t\tarr = list(map(int,input().split()))\n\t\tmax_sum = 0\n\t\tfor i in range(n-k+1):\n\t\t\ttemp = set(arr[i:i+k])\n\t\t\tif len(temp) == k:\n\t\t\t\tmax_sum = max(max_sum,sum(arr[i:i+k]))\n\t\tprint(max_sum)\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n\tt = int(input())\n\twhile t:\n\t\tn, k = map(int, input().split())\n\t\tarr = list(map(int, input().split()))\n\t\tmax_sum = 0\n\t\tfor i in range(n-k+1):\n\t\t\ttemp = set(arr[i:i+k])\n\t\t\tif len(temp) == k:\n\t\t\t\ttemp_sum = sum(temp)\n\t\t\t\tif temp_sum > max_sum:\n\t\t\t\t\tmax_sum = temp_sum\n\t\tprint(max_sum)\n\t\tt -= 1\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        k = 0\n        for j in range(n):\n            for l in range(j+1, n+1):\n                if a[j:l] == list(range(j+1, l)):\n                    k += 1\n                    print(j+1, l)\n        print(k)\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        a.sort()\n        k = 0\n        for j in range(n):\n            if a[j] == j + 1:\n                k += 1\n        if k == n:\n            print(1)\n            print(1, n)\n        else:\n            print(0)",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    #\n    # Write your code here.\n    #\n    result = []\n    for i in range(len(arr)):\n        if i == len(arr)-1:\n            result.append(arr[i])\n        elif arr[i] >= max(arr[i+1:]):\n            result.append(arr[i])\n    return result",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return [max(arr[i:]) for i in range(len(arr))]",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n    points.sort()\n    #print(points)\n    #print(points[0])\n    #print(points[1])\n    #print(points[2])\n    #print(points[3])\n    #print(points[0][0], points[0][1])\n    #print(points[1][0], points[1][1])\n    #print(points[2][0], points[2][1])\n    #print(points[3][0], points[3][1])\n    #print(points[0][0] - points[1][0], points[0][1] - points[1][1])\n    #print(points[0][0] - points[2][0], points[0][1] - points[2][1])\n    #print(points[0][0] - points[3][0], points[0][1] - points[3][1])\n    #print(points[1][0] - points[2][0], points[1][1] - points[2][1])\n    #print(points[1][0] - points[3][0], points[1][1] - points[3][1])\n    #print(points[2][0] - points[3][0], points[2][1] - points[3][1])\n    #print(points[0][0] - points[1][0], points[0][1] - points[1][1])\n    #print(points[0][0] - points[2][0], points[0][1] - points[2][1])\n    #print(points[0][0] - points[3][0], points[0][1] - points[3][1])\n    #print(points[1][0] - points[2][0], points[1][1] - points[2][1])\n    #print(points[1][0] - points[3][0], points[1][1] - points[3][1])\n    #print(points[2][0] - points[3][0], points[2][1] - points[3][1])\n    #print(points[0][0] - points[1][0], points[0][1] - points[1][1])\n    #print(points[0][0] - points[2][0], points[0][1] - points[2][1])\n    #print(points[0][0] - points[3][0], points[0][1] - points[3][1])\n    #print(points[1][0] - points[2][0], points[1][1] - points[2][1])\n    #print(points[1][0] - points[3][0], points[1][1] - points[3][1])\n    #print(points[2][0] - points[3][0], points[2][1] - points[3][1])\n    #print(points[0][0] - points[1][0], points[0][1] - points[1][1])\n    #print(points[0][0] - points[2][0], points[0][1] - points[2][1])\n    #print(points[0][0] - points[3][0], points[0][1] - points[3][1])\n    #print(points[1][0] - points[2][0], points[1][1] - points[2][1])\n    #print(points[1][0] - points[3][0], points[1][1] - points[3][1])\n    #print(points[2][0] - points[3][0], points[2][1] - points[3][1])\n    #print(points[0][0] - points[1][0], points[0][1] - points[1][1])\n    #print(points[0][0] - points[2][0], points[0][1] - points[2][1])\n    #print(points[0][0] - points[3][0], points[0][1] - points[3][1])\n    #print(points[1][0] - points[2][0], points[1][1]",
            "index": 10,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort()\n    points.append(points[0])\n    points.append(points[1])\n    points.append(points[2])\n    max_perimeter = 0\n    for i in range(n):\n        perimeter = abs(points[i][0] - points[i+1][0]) + abs(points[i][1] - points[i+1][1])\n        perimeter += abs(points[i+1][0] - points[i+2][0]) + abs(points[i+1][1] - points[i+2][1])\n        if perimeter > max_perimeter:\n            max_perimeter = perimeter\n    print(max_perimeter)\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        x, y = 0, 0\n        for move in moves:\n            if move == 'U':\n                y += 1\n            elif move == 'D':\n                y -= 1\n            elif move == 'L':\n                x -= 1\n            elif move == 'R':\n                x += 1\n        return x == 0 and y == 0",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        return moves.count('U') == moves.count('D') and moves.count('L') == moves.count('R')",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        k = 1\n        while k <= n:\n            if k == 1:\n                print(-1, end = \" \")\n            else:\n                count = 0\n                for j in range(n - k + 1):\n                    if a[j] == a[j + k - 1]:\n                        count += 1\n                if count == n - k + 1:\n                    print(a[j], end = \" \")\n                else:\n                    print(-1, end = \" \")\n            k += 1\n        print()\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        k = 1\n        while k <= n:\n            sub = []\n            for j in range(n-k+1):\n                sub.append(a[j:j+k])\n            if all(len(set(i)) == 1 for i in sub):\n                print(k)\n                break\n            k += 1\n        else:\n            print(-1)\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return strng.count(letter)",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return strng.count(letter)",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a1, b1 = map(int, input().split())\n        a2, b2 = map(int, input().split())\n        if a1 == a2 or b1 == b2:\n            print(\"Yes\")\n        elif a1 == b2 or b1 == a2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a1, b1 = map(int, input().split())\n        a2, b2 = map(int, input().split())\n        if a1 == a2 or b1 == b2:\n            print(\"Yes\")\n        elif a1 == b2 or b1 == a2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}