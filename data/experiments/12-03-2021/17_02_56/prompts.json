{
    "0": "Python 3\n\"\"\"\n\nYou are given a number N.For every number N, you have to check whether the given number N is divisible by 3 or not. If yes then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n18\n308\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 3. If any of the permutations is divisible by 3 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n18\n308\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given a read only array containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. \nAssuming only one duplicate number, find the duplicate one.\nAssuming the array is read only, use only constant extra space and runtime complexity should be less than O(n2)\n\nExample 1:\n\n\nInput: [1,3,4,2,2]\nOutput: 2\n\n\nExample 2:\n\n\nInput: [3,1,3,4,2]\nOutput: 3\n\n\"\"\"\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:",
    "3": "Python 3\n\"\"\"\nGiven an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.\n\nExample 1:\n\n\nInput: [1,3,4,2,2]\nOutput: 2\n\n\nExample 2:\n\n\nInput: [3,1,3,4,2]\nOutput: 3\n\nNote:\n\n\n       You must not modify the array (assume the array is read only).\n       You must use only constant, O(1) extra space.\n       Your runtime complexity should be less than O(n2).\n       There is only one duplicate number in the array, but it could be repeated more than once.\n\"\"\"\nclass Solution:\n    def findDuplicate(self, nums: List[int]) -> int:",
    "4": "Python 3\n\"\"\"\nYou are given circular track of radius $R$.Two person A and B are standing on the same point.They have to complete $X round and speed of A and B are given. You have to find how many times they will meet after the race starts and before completing all the rounds.\n\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, four integers $X, R, A, B$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the number of times whey will meet before any of them completes $X$ rounds.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq R \\leq 10^9$\n- $1 \\leq X \\leq 10^9$\n- $1 \\leq A \\leq 10^9$\n- $1 \\leq B \\leq 10^9$\n- Speed of both are different\n\n-----Sample Input:-----\n2\n3 10 2 5\n2 20 5 10\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nMotu and Patlu are racing against each other on a circular track of radius $R$. Initially they are at the same point on the track and will run in same direction .The coach ordered them to run $X$ rounds of the circular field. Patlu wants to know how many times they will meet after the race starts and  before any of them finishes $X$ rounds. But he is busy in warm up so he wants you to calculate this. You are given speed of both Motu and Patlu ($A$ and $B$). \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, four integers $X, R, A, B$. \n\n-----Output:-----\nFor each testcase, output in a single line answer the number of times whey will meet before any of them completes $X$ rounds.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq R \\leq 10^9$\n- $1 \\leq X \\leq 10^9$\n- $1 \\leq A \\leq 10^9$\n- $1 \\leq B \\leq 10^9$\n- Speed of both are different\n\n-----Sample Input:-----\n2\n3 10 2 5\n2 20 5 10\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nIt is known that there are k fish species in the polar ocean, numbered from 1 to k. They are sorted by non-decreasing order of their weight, which is a positive number. Let the weight of the i-th type of fish be w_{i}, then 0 < w_1 \u2264 w_2 \u2264 ... \u2264 w_{k} holds.\n\nDetermine whether it is possible that the fish caught by Alice has a strictly larger total weight than Bob's. In other words, does there exist a sequence of weights w_{i} (not necessary integers), such that the fish caught by Alice has a strictly larger total weight?\n\n\n-----Input-----\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 10^5, 1 \u2264 k \u2264 10^9) \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species.\n\n\n-----Output-----\n\nOutput \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 3 3\n2 2 2\n1 1 3\n\nOutput\nYES\n\nInput\n4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n\nOutput\nNO\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIt is known that there are k fish species in the polar ocean, numbered from 1 to k. They are sorted by non-decreasing order of their weight, which is a positive number. Let the weight of the i-th type of fish be w_{i}, then 0 < w_1 \u2264 w_2 \u2264 ... \u2264 w_{k} holds.\n\nPolar bears Alice and Bob each have caught some fish, and they are guessing who has the larger sum of weight of the fish he/she's caught. Given the type of the fish they've caught, determine whether it is possible that the fish caught by Alice has a strictly larger total weight than Bob's. In other words, does there exist a sequence of weights w_{i} (not necessary integers), such that the fish caught by Alice has a strictly larger total weight?\n\n\n-----Input-----\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 10^5, 1 \u2264 k \u2264 10^9) \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species.\n\n\n-----Output-----\n\nOutput \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 3 3\n2 2 2\n1 1 3\n\nOutput\nYES\n\nInput\n4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, if w_1 = 1, w_2 = 2, w_3 = 2.5,  then Alice has a total of 2 + 2 + 2 = 6 weight units, while Bob only has 1 + 1 + 2.5 = 4.5.\n\nIn the second sample, the fish that Alice caught is a subset of Bob's. Therefore, the total weight of Bob\u2019s fish is always not less than the total weight of Alice\u2019s fish.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThe Bubble Cup hypothesis stood unsolved for $130$ years. Who ever proves the hypothesis will be regarded as one of the greatest mathematicians of our time! A famous mathematician Jerry Mao managed to reduce the hypothesis to this problem:\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\nHelp Jerry Mao solve the long standing problem!\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nIn first case, for $m=2$, polynomials that satisfy the constraint are $x$ and $2$.\n\nIn second case, for $m=4$, polynomials that satisfy the constraint are $x^2$, $x + 2$, $2x$ and $4$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n\nSet A containing n positive different integers a_{i} are given. \n\nCreate a set B containing n different integers b_{j} such that all n^2 integers that can be obtained by summing up a_{i} and b_{j} for all possible pairs of i and j are different.\n\nall numbers in A are from 1 to 10^6, and all numbers in B must also be in the same range.\n\n\n\n\n-----Input-----\n\nInput data contains multiple test cases. The first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers a_{i}\u00a0\u2014 the elements of A (1 \u2264 a_{i} \u2264 10^6). \n\n\n-----Output-----\n\nFor each test first print the answer:   NO, if task is impossible to solve, there is no way to create the required set B.  YES, if there is the way to create the required set. In this case the second line must contain n different positive integers b_{j}\u00a0\u2014 elements of B (1 \u2264 b_{j} \u2264 10^6). If there are several possible sets, output any of them. \n\n\n-----Example-----\nInput\n3\n3\n1 10 100\n1\n1\n2\n2 4\n\nOutput\nYES\n1 2 3 \nYES\n1 \nYES\n1 2\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nMasha and Grisha like studying sets of positive integers.\n\nOne day Grisha has written a set A containing n different integers a_{i} on a blackboard. Now he asks Masha to create a set B containing n different integers b_{j} such that all n^2 integers that can be obtained by summing up a_{i} and b_{j} for all possible pairs of i and j are different.\n\nBoth Masha and Grisha don't like big numbers, so all numbers in A are from 1 to 10^6, and all numbers in B must also be in the same range.\n\nHelp Masha to create the set B that satisfies Grisha's requirement.\n\n\n-----Input-----\n\nInput data contains multiple test cases. The first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers a_{i}\u00a0\u2014 the elements of A (1 \u2264 a_{i} \u2264 10^6). \n\n\n-----Output-----\n\nFor each test first print the answer:   NO, if Masha's task is impossible to solve, there is no way to create the required set B.  YES, if there is the way to create the required set. In this case the second line must contain n different positive integers b_{j}\u00a0\u2014 elements of B (1 \u2264 b_{j} \u2264 10^6). If there are several possible sets, output any of them. \n\n\n-----Example-----\nInput\n3\n3\n1 10 100\n1\n1\n2\n2 4\n\nOutput\nYES\n1 2 3 \nYES\n1 \nYES\n1 2\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nFor a vector $\\vec{v} = (x, y)$, define $|v| = \\sqrt{x^2 + y^2}$.\n\nYou are at the origin. There are $n$ vectors $\\vec{v_1}, \\vec{v_2}, \\cdots, \\vec{v_n}$. You will make $n$ moves. During the $i$-th move you will either move to $p + \\vec{v_i}$ or $p - \\vec{v_i}$.\n\nFigure out a sequence of moves such that your final position $p$ satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of moves.\n\nEach of the following lines contains two space-separated integers $x_i$ and $y_i$, meaning that $\\vec{v_i} = (x_i, y_i)$. We have that $|v_i| \\le 10^6$ for all $i$.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers $c_1, c_2, \\cdots, c_n$, each of which is either $1$ or $-1$. Your solution is correct if the value of $p = \\sum_{i = 1}^n c_i \\vec{v_i}$, satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\nIt can be shown that a solution always exists under the given constraints.\n\n\n-----Examples-----\nInput\n3\n999999 0\n0 999999\n999999 0\n\nOutput\n1 1 -1 \n\nInput\n1\n-824590 246031\n\nOutput\n1 \n\nInput\n8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n\nOutput\n1 1 1 1 1 1 1 -1\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nFor a vector $\\vec{v} = (x, y)$, define $|v| = \\sqrt{x^2 + y^2}$.\n\nAllen had a bit too much to drink at the bar, which is at the origin. There are $n$ vectors $\\vec{v_1}, \\vec{v_2}, \\cdots, \\vec{v_n}$. Allen will make $n$ moves. As Allen's sense of direction is impaired, during the $i$-th move he will either move in the direction $\\vec{v_i}$ or $-\\vec{v_i}$. In other words, if his position is currently $p = (x, y)$, he will either move to $p + \\vec{v_i}$ or $p - \\vec{v_i}$.\n\nAllen doesn't want to wander too far from home (which happens to also be the bar). You need to help him figure out a sequence of moves (a sequence of signs for the vectors) such that his final position $p$ satisfies $|p| \\le 1.5 \\cdot 10^6$ so that he can stay safe.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of moves.\n\nEach of the following lines contains two space-separated integers $x_i$ and $y_i$, meaning that $\\vec{v_i} = (x_i, y_i)$. We have that $|v_i| \\le 10^6$ for all $i$.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers $c_1, c_2, \\cdots, c_n$, each of which is either $1$ or $-1$. Your solution is correct if the value of $p = \\sum_{i = 1}^n c_i \\vec{v_i}$, satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\nIt can be shown that a solution always exists under the given constraints.\n\n\n-----Examples-----\nInput\n3\n999999 0\n0 999999\n999999 0\n\nOutput\n1 1 -1 \n\nInput\n1\n-824590 246031\n\nOutput\n1 \n\nInput\n8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n\nOutput\n1 1 1 1 1 1 1 -1\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Example\n\n For `n = 152`, the output should be `52`;\n \n For `n = 1001`, the output should be `101`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 \u2264 n \u2264 1000000.`\n\n\n - `[output]` an integer\n\"\"\"\ndef delete_digit(n):",
    "15": "Python 3\n\"\"\"\n# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Example\n\n For `n = 152`, the output should be `52`;\n \n For `n = 1001`, the output should be `101`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 \u2264 n \u2264 1000000.`\n\n\n - `[output]` an integer\n\"\"\"\ndef delete_digit(n):",
    "16": "Python 3\n\"\"\"\nA heap of stones is given to you and your friend.In one move, each of you can remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.\n\nDetermine whether you can win the game given the number of stones in the heap.\n\nExample:\n\n\nInput: 4\nOutput: false \nExplanation: If there are 4 stones in the heap, then you will never win the game;\n\u00a0            No matter 1, 2, or 3 stones you remove, the last stone will always be \n\u00a0            removed by your friend.\n\"\"\"\nclass Solution:\n    def canWinNim(self, n: int) -> bool:",
    "17": "Python 3\n\"\"\"\nYou are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.\n\nBoth of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.\n\nExample:\n\n\nInput: 4\nOutput: false \nExplanation: If there are 4 stones in the heap, then you will never win the game;\n\u00a0            No matter 1, 2, or 3 stones you remove, the last stone will always be \n\u00a0            removed by your friend.\n\"\"\"\nclass Solution:\n    def canWinNim(self, n: int) -> bool:",
    "18": "Python 3\n\"\"\"\nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deleting some (possibly, zero or all) elements.\n\nA permutation of length $n$ is an array of length $n$ in which every element from $1$ to $n$ occurs exactly once.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\n\n\n-----Note-----\n\nIn the first test case, there are $4$ subsequences of length at least $2$:  $[3,2]$ which gives us $|3-2|=1$.  $[3,1]$ which gives us $|3-1|=2$.  $[2,1]$ which gives us $|2-1|=1$.  $[3,2,1]$ which gives us $|3-2|+|2-1|=2$. \n\nSo the answer is either $[3,1]$ or $[3,2,1]$. Since we want the subsequence to be as short as possible, the answer is $[3,1]$.\n\"\"\"\ndef code():"
}