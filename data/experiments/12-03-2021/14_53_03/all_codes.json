{
    "0": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a = [0] + a\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    print(max(dp))\n    for i in range(n, 0, -1):\n        if dp[i] == max(dp):\n            print(i, end=\" \")\n            for j in range(i, 0, -1):\n                if a[j] == a[i]:\n                    print(j, end=\" \")\n                    break\n            break\n",
    "1": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            k += 1\n    print(k)\n    for i in range(k):\n        print(a[i], end=' ')\n        for j in range(i + 1, n):\n            if a[j] != a[j - 1]:\n                print(a[j], end=' ')\n        print()",
    "2": "\n    n, m, a, b = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        graph[u-1].append((v-1, c))\n        graph[v-1].append((u-1, c))\n    min_cost = [float('inf') for i in range(n)]\n    min_cost[0] = 0\n    visited = [False for i in range(n)]\n    visited[0] = True\n    for i in range(n-1):\n        for j in range(n):\n            if visited[j]:\n                for k in graph[j]:\n                    if not visited[k[0]]:\n                        if k[1] == a:\n                            min_cost[k[0]] = min(min_cost[k[0]], min_cost[j] + b)\n                        else:\n                            min_cost[k[0]] = min(min_cost[k[0]], min_cost[j] + a)\n        visited[j] = True\n    print(*min_cost)\n\nif __name__ == '__main__':\n    code()",
    "3": "\n    n, m, a, b = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    p = int(input())\n    res = [0] * n\n    for i in range(p):\n        res[i] = 0\n    for i in range(p, n):\n        res[i] = float('inf')\n    for i in range(m):\n        if roads[i][2] == a:\n            res[roads[i][0] - 1] += a\n            res[roads[i][1] - 1] += a\n        else:\n            res[roads[i][0] - 1] += b\n            res[roads[i][1] - 1] += b\n    for i in range(m):\n        if roads[i][2] == a:\n            res[roads[i][0] - 1] = min(res[roads[i][0] - 1], res[roads[i][1] - 1] + a)\n            res[roads[i][1] - 1] = min(res[roads[i][1] - 1], res[roads[i][0] - 1] + a)\n        else:\n            res[roads[i][0] - 1] = min(res[roads[i][0] - 1], res[roads[i][1] - 1] + b)\n            res[roads[i][1] - 1] = min(res[roads[i][1] - 1], res[roads[i][0] - 1] + b)\n    for i in range(n):\n        print(res[i], end=' ')\n",
    "4": "\n    k = int(input())\n    n = int(input())\n    G = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        G[i] = list(input())\n    print(G)\n",
    "5": "\n    k = int(input())\n    n = int(input())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(input()))\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                matrix[j][i] = 'Y'\n    for i in range(n):\n        matrix[i][i] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                matrix[j][i] = 'Y'\n    for i in range(n):\n        matrix[i][i] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 'Y':\n                for k in range(n):\n                    if matrix[j][k] == 'Y':\n                        matrix[i][k] = 'Y'\n    for i in range(n):\n",
    "6": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        d = {}\n        for i in arr:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in d:\n            print(str(i) + \": \" + str(d[i]))",
    "7": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        A.sort()\n        count = 1\n        for i in range(1, N):\n            if A[i] == A[i-1]:\n                count += 1\n            else:\n                print(str(A[i-1]) + \": \" + str(count))\n                count = 1\n        print(str(A[N-1]) + \": \" + str(count))",
    "8": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * (m + 1)\n    for i in range(n):\n        for j in range(m, a[i] - 1, -1):\n            p[j] += p[j - a[i]]\n    print(*p)\n",
    "9": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = [0] * (m + 1)\n    for i in range(n):\n        for j in range(m, 0, -1):\n            if a[i] & (1 << j):\n                p[j] += 1\n    for i in range(1, m + 1):\n        p[i] += p[i - 1]\n    for i in range(m + 1):\n        p[i] %= 998244353\n    print(*p)\n",
    "10": "\n        # Solution 1: self\n        # if n == 0:\n        #     return 0\n        # i = 1\n        # while n >= i:\n        #     n -= i\n        #     i += 1\n        # return i - 1\n        \n        # Solution 2: using math\n        # return int((2 * n + 0.25)**0.5 - 0.5)\n        \n        # Solution 3: using binary search\n        left, right = 0, n\n        while left <= right:\n            k = (right + left) // 2\n            curr = k * (k + 1) // 2\n            if curr == n:\n                return k\n            if n < curr:\n                right = k - 1\n            else:\n                left = k + 1\n        return right",
    "11": "\n        if n == 0:\n            return 0\n        i = 1\n        while n >= i:\n            n -= i\n            i += 1\n        return i-1",
    "12": "\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        for s in strs:\n            zeros, ones = s.count('0'), s.count('1')\n            for i in range(m, zeros-1, -1):\n                for j in range(n, ones-1, -1):\n                    dp[i][j] = max(dp[i][j], dp[i-zeros][j-ones]+1)\n        return dp[m][n]",
    "13": "\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for s in strs:\n            zero, one = s.count('0'), s.count('1')\n            for i in range(m, zero-1, -1):\n                for j in range(n, one-1, -1):\n                    dp[i][j] = max(dp[i][j], dp[i-zero][j-one]+1)\n        return dp[m][n]",
    "14": "\n        # dp[i][j] = max(dp[i][j], dp[i-k][j+k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i+k][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], dp[i-k][j] + k)\n        # dp[i][j] = max(dp[i][j], dp[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-k] + k)\n        # dp[i][j] = max(dp[i][j], d",
    "15": "\n        # dp[i][s]: the max length of the billboard that can be supported by rods[:i] with sum s\n        # dp[i][s] = max(dp[i-1][s], dp[i-1][s-rods[i]]+rods[i])\n        # initial: dp[0][0] = 0, dp[0][s] = 0\n        # answer: dp[len(rods)][0]\n        dp = [[0]*(sum(rods)+1) for _ in range(len(rods)+1)]\n        for i in range(1, len(rods)+1):\n            for s in range(sum(rods)+1):\n                dp[i][s] = dp[i-1][s]\n                if s >= rods[i-1]:\n                    dp[i][s] = max(dp[i][s], dp[i-1][s-rods[i-1]]+rods[i-1])\n        return dp[len(rods)][0]",
    "16": "\n    n, k = map(int, input().split())\n    if k == n - 1:\n        print(n - 1)\n        for i in range(1, n + 1):\n            print(i, i + 1)\n        return\n    if k == n - 2:\n        print(n - 2)\n        for i in range(1, n + 1):\n            print(i, i + 1)\n        print(n, n + 1)\n        return\n    if k == 1:\n        print(1)\n        print(1, 2)\n        return\n    if k == 2:\n        print(2)\n        print(1, 2)\n        print(1, 3)\n        return\n    if k == 3:\n        print(3)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        return\n    if k == 4:\n        print(4)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        return\n    if k == 5:\n        print(5)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        return\n    if k == 6:\n        print(6)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        return\n    if k == 7:\n        print(7)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        return\n    if k == 8:\n        print(8)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        return\n    if k == 9:\n        print(9)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        return\n    if k == 10:\n        print(10)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        print(4, 5)\n        return\n    if k == 11:\n        print(11)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        print(4, 5)\n        print(1, 6)\n        return\n    if k == 12:\n        print(12)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        print(4, 5)\n        print(1, 6)\n        print(2, 6)\n        return\n    if k == 13:\n        print(13)\n        print(1, 2)\n        print(1, 3)\n        print(1, 4)\n        print(1, 5)\n        print(2, 3)\n        print(2, 4)\n        print(2, 5)\n        print(3, 4)\n        print(3, 5)\n        print(4, 5)\n        print(1",
    "17": "\n    n, k = map(int, input().split())\n    nodes = [i for i in range(1, n + 1)]\n    exit_nodes = [i for i in range(1, n + 1) if i <= k]\n    wires = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            wires.append((i, j))\n    wires = sorted(wires, key=lambda x: abs(x[0] - x[1]))\n    for i in range(len(wires)):\n        if wires[i][0] in exit_nodes and wires[i][1] in exit_nodes:\n            print(wires[i][0], wires[i][1])\n            exit_nodes.remove(wires[i][0])\n            exit_nodes.remove(wires[i][1])\n            break\n\nif __name__ == '__main__':\n    code()",
    "18": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        K = int(input())\n        if K % N == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
    "19": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        k = int(input())\n        if n%k == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
}