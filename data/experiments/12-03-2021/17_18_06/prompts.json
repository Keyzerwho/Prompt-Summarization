{
    "0": "Python 3\n\"\"\"\nWrite a simple regex to check if the string contains the word hello in different languages. Regex should be case insensitive to pass the tests.\n\nThese are hello in different languages:\n\nhello - english\nciao - italian\nsalut - french\nhallo - german\nhola - spanish\nahoj - czech republic\nczesc - polish\n\"\"\"\ndef validate_hello(greetings):",
    "1": "Python 3\n\"\"\"\nYou received a whatsup message from an unknown number. Could it be from that girl/boy with a foreign accent you met yesterday evening?\n\nWrite a simple regex to check if the string contains the word hallo in different languages.\n\nThese are the languages of the possible people you met the night before:\n\n* hello - english\n* ciao - italian\n* salut - french\n* hallo - german\n* hola - spanish\n* ahoj - czech republic\n* czesc - polish\n\nBy the way, how cool is the czech republic hallo!!\n\n\nPS. you can assume the input is a string.\nPPS. to keep this a beginner exercise you don't need to check if the greeting is a subset of word ('Hallowen' can pass the test)\n\nPS. regex should be case insensitive to pass the tests\n\"\"\"\ndef validate_hello(greetings):",
    "2": "Python 3\n\"\"\"\nYou are given N number of sentences.Each sentence letter is written in corresponding ASCII codes. Write a code to convert the encrypted message to readable format.\n\n\n-----Input-----\nThe input will consist of the first line containing the number of test cases \u2018n\u2019 followed by n lines of test cases.\n\n-----Output-----\n\nFor each input print the decoded line.\n\n-----Example-----\nInput:\n2\n721011081081113287111114108100\n871011089911110910132116111327311010010597\n\nOutput:\nHello World\nWelcome to India\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nAt the legendary times of Nonsenso wars in ISM Dhanbad, there was a neck to neck competition between Barney Stinson and Sheldon Cooper. They both were on level 19. After trying too hard both of them could not decipher the nonsense, so they decided to play alongside. Sheldon Cooper had to pass a message to Barney Stinson. So he decided to convert each letter of the sentence to their corresponding to their ASCII codes. When Barney received the message he could not get anything. Now you have to design a code which converts the encrypted message to readable format.\n\n-----Input-----\nThe input will consist of the first line containing the number of test cases \u2018n\u2019 followed by n lines of test cases.\n\n-----Output-----\n\nFor each input print the decoded line.\n\n-----Example-----\nInput:\n2\n721011081081113287111114108100\n871011089911110910132116111327311010010597\n\nOutput:\nHello World\nWelcome to India\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a string $s$ of length $n$ consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases. $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length of a string $s$.\n\nThe second line of a test case description contains string $s$ of length $n$ consisting of lowercase English letters and question marks.\n\n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if there is no way to replace question marks in string $s$ with a lowercase English letters in such a way that there is exactly one occurrence of a string \"abacaba\" in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\" and in the next line output a resulting string consisting of $n$ lowercase English letters. If there are multiple possible strings, output any.\n\nYou may print every letter in \"Yes\" and \"No\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nAcacius is studying strings theory. Today he came with the following problem.\n\nYou are given a string $s$ of length $n$ consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease help Acacius to check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases. $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length of a string $s$.\n\nThe second line of a test case description contains string $s$ of length $n$ consisting of lowercase English letters and question marks.\n\n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if there is no way to replace question marks in string $s$ with a lowercase English letters in such a way that there is exactly one occurrence of a string \"abacaba\" in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\" and in the next line output a resulting string consisting of $n$ lowercase English letters. If there are multiple possible strings, output any.\n\nYou may print every letter in \"Yes\" and \"No\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n\n\n\n-----Note-----\n\nIn first example there is exactly one occurrence of a string \"abacaba\" in the string \"abacaba\" as a substring.\n\nIn second example seven question marks can be replaced with any seven lowercase English letters and with \"abacaba\" in particular.\n\nIn sixth example there are two occurrences of a string \"abacaba\" as a substring.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n\nIn this problem, given a positive integer N. Your task is to calculate how many distinct ordered pairs (p, q) such that N = p + 2q, where p and q are primes.\n\n-----Input-----\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow.\n\nEach test case consists of exactly one line containing an integer N.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000 (105)\n- 1 \u2264 N \u2264 10000 (104)\n\n-----Output-----\nFor each test case, output the number of ordered pairs (p, q) of primes such that N = p + 2q.\n\n-----Example-----\nInput:\n3\n2\n7\n11\n\nOutput:\n0\n1\n2\n\n-----Explanation-----\nCase #1: There are no ordered pairs (p, q) such that p + 2q = 2.\nCase #2: There is only one ordered pair (p, q) = (3, 2) such that p + 2q = 7.\nCase #3: There are two ordered pairs (p, q) = (7, 2), (5, 3) such that p + 2q = 11.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\n-----Problem Statement-----\nLevy's conjecture, named after Hyman Levy, states that all odd integers greater than 5 can be represented as the sum of an odd prime number and an even semiprime. To put it algebraically, 2n + 1 = p + 2q always has a solution in primes p and q (not necessary to be distinct) for n > 2. (Source: Wikipedia)\nIn this problem, given a positive integer N (not necessary to be odd integer greater than 5). Your task is to calculate how many distinct ordered pairs (p, q) such that N = p + 2q, where p and q are primes.\n\n-----Input-----\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow.\n\nEach test case consists of exactly one line containing an integer N.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000 (105)\n- 1 \u2264 N \u2264 10000 (104)\n\n-----Output-----\nFor each test case, output the number of ordered pairs (p, q) of primes such that N = p + 2q.\n\n-----Example-----\nInput:\n3\n2\n7\n11\n\nOutput:\n0\n1\n2\n\n-----Explanation-----\nCase #1: There are no ordered pairs (p, q) such that p + 2q = 2.\nCase #2: There is only one ordered pair (p, q) = (3, 2) such that p + 2q = 7.\nCase #3: There are two ordered pairs (p, q) = (7, 2), (5, 3) such that p + 2q = 11.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nReverses the bits in a positive integer.\n\nExample:\nInput: 417\nOutput: 267\nExplanation: The number 417 is 110100001 in binary. Reversing the binary is 100001011 which is 267.\n\n\"\"\"\ndef reverse_bits(n):",
    "9": "Python 3\n\"\"\"\nWrite a function that reverses the bits in an integer.\n\nFor example, the number `417` is `110100001` in binary. Reversing the binary is `100001011` which is `267`.\n\nYou can assume that the number is not negative.\n\"\"\"\ndef reverse_bits(n):",
    "10": "Python 3\n\"\"\"\nYou have the radius of a circle with the center in point (0,0). Write a function that calculates the number of points in the circle where (x,y) are integers.  0 <= radius <= 1000.\n\nExample: \nInput:\nradius = 2\nOutput:\n13\n\"\"\"\ndef points(n):",
    "11": "Python 3\n\"\"\"\nYou have the `radius` of a circle with the center in point `(0,0)`.\n\nWrite a function that calculates the number of points in the circle where `(x,y)` - the cartesian coordinates of the points - are `integers`.\n\nExample: for `radius = 2` the result should be `13`.\n\n`0 <= radius <= 1000`\n\n![](http://i.imgur.com/1SMov3s.png)\n\"\"\"\ndef points(n):",
    "12": "Python 3\n\"\"\"\nWrite a method that, given the correct word and the player's guess, returns this number. The guessed word should be the same length as the correct word.\n\nExamples:\n\nCountCorrectCharacters(\"dog\", \"car\"); //0 (No letters are in the correct position)\nCountCorrectCharacters(\"dog\", \"god\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"cog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"cod\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"bog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"dog\"); //3 (Correct!)\ncount_correct_characters(\"dog\", \"car\"); #0 (No letters are in the correct position)\ncount_correct_characters(\"dog\", \"god\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"cog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"cod\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"bog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"dog\"); #3 (Correct!)\n\"\"\"\ndef count_correct_characters(correct, guess):",
    "13": "Python 3\n\"\"\"\nConsider a game, wherein the player has to guess a target word. All the player knows is the length of the target word.\n\nTo help them in their goal, the game will accept guesses, and return the number of letters that are in the correct position.\n\nWrite a method that, given the correct word and the player's guess, returns this number.\n\nFor example, here's a possible thought process for someone trying to guess the word \"dog\":\n\n```cs\nCountCorrectCharacters(\"dog\", \"car\"); //0 (No letters are in the correct position)\nCountCorrectCharacters(\"dog\", \"god\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"cog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"cod\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"bog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"dog\"); //3 (Correct!)\n```\n```python\ncount_correct_characters(\"dog\", \"car\"); #0 (No letters are in the correct position)\ncount_correct_characters(\"dog\", \"god\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"cog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"cod\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"bog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"dog\"); #3 (Correct!)\n```\n\nThe caller should ensure that the guessed word is always the same length as the correct word, but since it could cause problems if this were not the case, you need to check for this eventuality:\n\n```cs\n//Throw an InvalidOperationException if the two parameters are of different lengths.\n```\n```python\n#Raise an exception if the two parameters are of different lengths.\n```\n\nYou may assume, however, that the two parameters will always be in the same case.\n\"\"\"\ndef count_correct_characters(correct, guess):",
    "14": "Python 3\n\"\"\"\nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nWe hava two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow we concatenate these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\\{1\\} + \\{4, 3, 2, 1\\}$ and $\\{1,4,3,2\\} + \\{1\\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\\{2,4,1,3\\} + \\{2,1\\}$.\n\nIn the third example, there are no possible ways.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven a number, `num`. Find the total count of existing consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"\ndef consecutive_sum(num):",
    "17": "Python 3\n\"\"\"\nLet's say we have a number, `num`. Find the number of values of `n` such that: there exists `n` consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"\ndef consecutive_sum(num):",
    "18": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007\u00a0(10^9 + 7). When you represent s as a decimal number, ignore the leading zeroes; also if s is an empty string, then it's assumed that the number equals to zero.\n\n\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". For example, if s = 123123, then query \"2 \u2192 00\" transforms s to 10031003, and query \"3 \u2192 \" meaning \"replace 3 by an empty string\" transforms it to s = 1212. After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007\u00a0(10^9 + 7). When you represent s as a decimal number, please ignore the leading zeroes; also if s is an empty string, then it's assumed that the number equals to zero.\n\nAndrew got tired of processing Eugene's requests manually and he asked you to write a program for that. Help him!\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nNote that the leading zeroes are not removed from string s after the replacement (you can see it in the third sample).\n\"\"\"\ndef code():"
}