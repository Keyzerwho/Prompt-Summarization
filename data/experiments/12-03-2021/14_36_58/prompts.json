{
    "0": "Python 3\n\"\"\"\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\nsummary : \n\n\n\n-----Input-----\n\nThe first line contains two integers l and r (2 \u2264 l \u2264 r \u2264 10^9).\n\n\n-----Output-----\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n19 29\n\nOutput\n2\n\nInput\n3 6\n\nOutput\n3\n\n\n\n-----Note-----\n\nDefinition of a divisor: https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nTavak and Seyyed are good friends. Seyyed is very funny and he told Tavak to solve the following problem instead of longest-path.\n\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\n\n-----Input-----\n\nThe first line contains two integers l and r (2 \u2264 l \u2264 r \u2264 10^9).\n\n\n-----Output-----\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n19 29\n\nOutput\n2\n\nInput\n3 6\n\nOutput\n3\n\n\n\n-----Note-----\n\nDefinition of a divisor: https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nIn your tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost. When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point.\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\\le t \\le 20,000$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers $n, k$ ($1\\le n\\le 100,000$, $0\\le k\\le n$) \u2013 the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string $s$ of length $n$ containing only the characters W and L. If you have won the $i$-th game then $s_i=\\,$W, if you have lost the $i$-th game then $s_i=\\,$L.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\n\n-----Output-----\n\nFor each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou like playing chess tournaments online.\n\nIn your last tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point (since there is not a \"previous game\").\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\\le t \\le 20,000$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers $n, k$ ($1\\le n\\le 100,000$, $0\\le k\\le n$) \u2013 the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string $s$ of length $n$ containing only the characters W and L. If you have won the $i$-th game then $s_i=\\,$W, if you have lost the $i$-th game then $s_i=\\,$L.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\n\n-----Output-----\n\nFor each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\n\n\n-----Note-----\n\nExplanation of the first testcase. Before changing any outcome, the score is $2$. Indeed, you won the first game, so you got $1$ point, and you won also the third, so you got another $1$ point (and not $2$ because you lost the second game).\n\nAn optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games (the string of the outcomes becomes WWWWL). Hence, the new score is $7=1+2+2+2$: $1$ point for the first game and $2$ points for the second, third and fourth game.\n\nExplanation of the second testcase. Before changing any outcome, the score is $3$. Indeed, you won the fourth game, so you got $1$ point, and you won also the fifth game, so you got $2$ more points (since you won also the previous game).\n\nAn optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games (the string of the outcomes becomes WWWWWW). Hence, the new score is $11 = 1+2+2+2+2+2$: $1$ point for the first game and $2$ points for all the other games.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a chessboard of any size from 1 to 10, where columns are marked with letters a-j and rows with 1-0 (tenth row is marked with 0).\nThe input given is the position of one queen on the chess board.\nYour need to return remaining queens positions such that none of the queens are attacking each other.\n\n\"\"\"\ndef queens(position, size):",
    "5": "Python 3\n\"\"\"\nBased on the well known ['Eight Queens' problem](https://en.wikipedia.org/wiki/Eight_queens_puzzle).\n\n#### Summary\nYour challenge is to place N queens on a chess board such that none of the queens are attacking each other.\n\n#### Details\nA standard 8x8 chess board has its rows (aka ranks) labelled 1-8 from bottom to top, and its columns (aka files) labelled a-h from left to right. Any square can be denoted by a combination of letter and number. For example, the top left square is a8. A queen may attack any square on its rank or file. It may also attack any square diagonally.\n\nIn this kata, chessboard may have any size from 1 to 10. Columns are marked with letters a-j, and rows with single digit from 1 to 0 (first row is marked with 1, ninth row is marked with 9, and tenth row is marked with 0, so `a1` denotes bottom left field of the chessboard, and `j0` - top right field on a 10x10 board).\n\nYou will be given the position of one queen on the board (e.g. `'c3'`). Your challenge is to compute the position of the remaining queens and return the full solution (including the original input) as a comma-separated string (e.g. `'d8,a7,e6,h5,b4,g3,c2,f1'`). Fields do not have to be sorted in any particular way, but you have to adhere to above format (lowercase letters, no spaces, fields separated with commas).\n\nNote that there may be multiple valid solutions for a given starting position. Your function only needs to produce (any) one of these. All given starting positions produce valid solutions.\n\nIf you wish to write more tests, the validity of a solution may be checked using preloaded function (see sample tests).\n\nHint: check the wiki article for the various algorithms that are applicable to this problem.\n\n----\nNext steps:\n - [N queens problem (with no mandatory queen position)](https://www.codewars.com/kata/52cdc1b015db27c484000031)\n - [N queens problem (with one mandatory queen position) - challenge version](https://www.codewars.com/kata/5985ea20695be6079e000003)\n\"\"\"\ndef queens(position, size):",
    "6": "Python 3\n\"\"\"\nGiven a binary tree, return the zigzag level order traversal of its nodes' values.\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:",
    "7": "Python 3\n\"\"\"\nGiven a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\n\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:",
    "8": "Python 3\n\"\"\"\nGiven a string return \"Yes\" if there are two vowels adjacent in it (first and last letter are adjacent), \"No\" otherwise.\n\n-----Input:-----\nThe first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\nFirst line of every test case contains an integer N$N$ denoting the length of the string.\nSecond line contains a string S$S$ of length N$N$, consisting only of uppercase english alphabets.\n\n-----Output:-----\nFor each test case, print a single line containing \"Yes\" if any of the cyclic permutations of the string is clingy else print \"No\".\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n- String S$S$ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 80 points : Original$Original$ Constraints$Constraints$\n\n-----Sample Input:-----\n2\n5\nAUXFC\n6\nXBCDEF\n\n-----Sample Output:-----\nYes\n\nNo\n\n-----EXPLANATION:-----\nExample$Example$ case1:$ case 1: $ One of the cyclic permutation is the original string itself, which has \"A\" and \"U\" together.\nExample$Example$ case2:$ case 2: $     None of the cyclic permutation will have 2 vowels together.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nSaket loves to play with strings. One day , while he was having fun with Cyclic Permutations of available strings to him, he observed that despite being scarce in numbers Vowels were really clingy.Being clingy means for almost every given string, there was a Cyclic Permutation in which atleast two vowels were together.\nSo he decided to check this property for all the available strings to him. As the number of strings can be very large, help Saket determine whether the given string is clingy or not.\n\n-----Input:-----\nThe first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\nFirst line of every test case contains an integer N$N$ denoting the length of the string.\nSecond line contains a string S$S$ of length N$N$, consisting only of uppercase english alphabets.\n\n-----Output:-----\nFor each test case, print a single line containing \"Yes\" if any of the cyclic permutations of the string is clingy else print \"No\".\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n- String S$S$ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 80 points : Original$Original$ Constraints$Constraints$\n\n-----Sample Input:-----\n2\n5\nAUXFC\n6\nXBCDEF\n\n-----Sample Output:-----\nYes\n\nNo\n\n-----EXPLANATION:-----\nExample$Example$ case1:$ case 1: $ One of the cyclic permutation is the original string itself, which has \"A\" and \"U\" together.\nExample$Example$ case2:$ case 2: $     None of the cyclic permutation will have 2 vowels together.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nMake a program that filters a list of strings and returns a list with only names with exactly 4 letters in it.\n\nEx: Input = [\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"], Output = [\"Ryan\", \"Yous\"]\n\n\n\"\"\"\ndef friend(x):",
    "11": "Python 3\n\"\"\"\nMake a program that filters a list of strings and returns a list with only your friends name in it.\n\nIf a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...\n\nEx: Input = [\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"], Output = [\"Ryan\", \"Yous\"]\n\ni.e.\n\nNote: keep the original order of the names in the output.\n\"\"\"\ndef friend(x):",
    "12": "Python 3\n\"\"\"\nReverses the bits in a positive integer.\n\nExample:\nInput: 417\nOutput: 267\nExplanation: The number 417 is 110100001 in binary. Reversing the binary is 100001011 which is 267.\n\n\"\"\"\ndef reverse_bits(n):",
    "13": "Python 3\n\"\"\"\nWrite a function that reverses the bits in an integer.\n\nFor example, the number `417` is `110100001` in binary. Reversing the binary is `100001011` which is `267`.\n\nYou can assume that the number is not negative.\n\"\"\"\ndef reverse_bits(n):",
    "14": "Python 3\n\"\"\"\nCreate a function that takes any number and returns the number that it is a factorial of. If the number is not a factorial of another, returns \"None\". \n\nExamples:\nInput:\n120\nOutput:\n\"5!\"\nExplanation:\n5! = 5 * 4 * 3 * 2 * 1 = 120\n\nInput:\n24\nOutput:\n\"4!\"\n\nInput:\n150\nOutput:\n\"None\"\n\"\"\"\ndef reverse_factorial(num):",
    "15": "Python 3\n\"\"\"\nI'm sure you're familiar with factorials \u2013 that is, the product of an integer and all the integers below it. \n\nFor example, `5! = 120`, as `5 * 4 * 3 * 2 * 1 = 120`\n\nYour challenge is to create a function that takes any number and returns the number that it is a factorial of. So, if your function receives `120`, it should return `\"5!\"` (as a string).\n\nOf course, not every number is a factorial of another. In this case, your function would return `\"None\"` (as a string).\n\n### Examples\n\n* `120` will return `\"5!\"`\n* `24` will return `\"4!\"`\n* `150` will return `\"None\"`\n\"\"\"\ndef reverse_factorial(num):",
    "16": "Python 3\n\"\"\"\nYou are given N coordinates on the xy-plane.\n\nA given compass can point to (p,q) or (p,r) when d(p,q) = d(p,r) where d is the Manhattan distance.\n\nInitially, you are at (a,b) coordinates. You need to find the number of pairs of coordinates such that the compass can point.\n\n-----Constraints-----\n - 2\u2266N\u226610^5\n - 1\u2266x_i, y_i\u226610^9\n - 1\u2266a < b\u2266N\n - When i \u2260 j, (x_i, y_i) \u2260 (x_j, y_j)\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN a b\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Sample Input-----\n5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n\n-----Sample Output-----\n4\n\nInitially, the compass points at the first and second pinholes.\nSince d(1,2) = d(1,3), the compass can be moved so that it will point at the first and third pinholes.\nSince d(1,3) = d(3,4), the compass can also point at the third and fourth pinholes.\nSince d(1,2) = d(2,5), the compass can also point at the second and fifth pinholes.\nNo other pairs of pinholes can be pointed by the compass, thus the answer is 4.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are N pinholes on the xy-plane. The i-th pinhole is located at (x_i,y_i).\nWe will denote the Manhattan distance between the i-th and j-th pinholes as d(i,j)(=|x_i-x_j|+|y_i-y_j|).\nYou have a peculiar pair of compasses, called Manhattan Compass.\nThis instrument always points at two of the pinholes.\nThe two legs of the compass are indistinguishable, thus we do not distinguish the following two states: the state where the compass points at the p-th and q-th pinholes, and the state where it points at the q-th and p-th pinholes.\nWhen the compass points at the p-th and q-th pinholes and d(p,q)=d(p,r), one of the legs can be moved so that the compass will point at the p-th and r-th pinholes.\nInitially, the compass points at the a-th and b-th pinholes.\nFind the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Constraints-----\n - 2\u2266N\u226610^5\n - 1\u2266x_i, y_i\u226610^9\n - 1\u2266a < b\u2266N\n - When i \u2260 j, (x_i, y_i) \u2260 (x_j, y_j)\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN a b\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Sample Input-----\n5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n\n-----Sample Output-----\n4\n\nInitially, the compass points at the first and second pinholes.\nSince d(1,2) = d(1,3), the compass can be moved so that it will point at the first and third pinholes.\nSince d(1,3) = d(3,4), the compass can also point at the third and fourth pinholes.\nSince d(1,2) = d(2,5), the compass can also point at the second and fifth pinholes.\nNo other pairs of pinholes can be pointed by the compass, thus the answer is 4.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given $n$ arrays that can have different sizes. You also have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally in the $i$-th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table.\n\nYou need to find the maximum sum of the integers in the $j$-th column for each $j$ from $1$ to $w$ independently.\n\nYou can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$)\u00a0\u2014 the number of arrays and the width of the table.\n\nEach of the next $n$ lines consists of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array, followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\le a_{ij} \\le 10^{9}$)\u00a0\u2014 the elements of the array.\n\nThe total length of the arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\nInput\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\nOutput\n7 8 \n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given $n$ arrays that can have different sizes. You also have a table with $w$ columns and $n$ rows. The $i$-th array is placed horizontally in the $i$-th row. You can slide each array within its row as long as it occupies several consecutive cells and lies completely inside the table.\n\nYou need to find the maximum sum of the integers in the $j$-th column for each $j$ from $1$ to $w$ independently.\n\n [Image] Optimal placements for columns $1$, $2$ and $3$ are shown on the pictures from left to right. \n\nNote that you can exclude any array out of a column provided it remains in the window. In this case its value is considered to be zero.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ ($1 \\le n \\le 10^{6}$) and $w$ ($1 \\le w \\le 10^{6}$)\u00a0\u2014 the number of arrays and the width of the table.\n\nEach of the next $n$ lines consists of an integer $l_{i}$ ($1 \\le l_{i} \\le w$), the length of the $i$-th array, followed by $l_{i}$ integers $a_{i1}, a_{i2}, \\ldots, a_{il_i}$ ($-10^{9} \\le a_{ij} \\le 10^{9}$)\u00a0\u2014 the elements of the array.\n\nThe total length of the arrays does no exceed $10^{6}$.\n\n\n-----Output-----\n\nPrint $w$ integers, the $i$-th of them should be the maximum sum for column $i$.\n\n\n-----Examples-----\nInput\n3 3\n3 2 4 8\n2 2 5\n2 6 3\n\nOutput\n10 15 16 \n\nInput\n2 2\n2 7 8\n1 -8\n\nOutput\n7 8 \n\n\n\n-----Note-----\n\nIllustration for the first example is in the statement.\n\"\"\"\ndef code():"
}