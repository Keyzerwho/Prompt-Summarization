{
    "0": "Python 3\n\"\"\"\nYou are given a graph with $n$ vertices and $m$ edges.\nYou should find two disjoint subsets of its vertices A and B, such that both A and B are vertex covers or claim it's impossible.\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of vertices and the number of edges in the graph, respectively.\n\nEach of the next m lines contains a pair of integers u_{i} and v_{i} (1  \u2264 u_{i},  v_{i}  \u2264  n), denoting an undirected edge between u_{i} and v_{i}.\n\n-----Output-----\n\nIf it's impossible to split the graph, print \"-1\" (without quotes).\n\nIf there are two disjoint sets of vertices, such that both sets are vertex\ncover, print their descriptions. Each description must contain two lines. The\nfirst line contains a single integer k denoting the number of vertices in that\nvertex cover, and the second line contains k integers\u00a0\u2014 the indices of\nvertices.\n\n\n-----Examples-----\nInput\n4 2\n1 2\n2 3\n\nOutput\n1\n2 \n2\n1 3 \n\nInput\n3 3\n1 2\n2 3\n1 3\n\nOutput\n-1\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nRecently, Pari and Arya did some research about NP-Hard problems and they found the minimum vertex cover problem very interesting.\n\nSuppose the graph G is given. Subset A of its vertices is called a vertex cover of this graph, if for each edge uv there is at least one endpoint of it in this set, i.e. $u \\in A$ or $v \\in A$ (or both).\n\nPari and Arya have won a great undirected graph as an award in a team contest. Now they have to split it in two parts, but both of them want their parts of the graph to be a vertex cover.\n\nThey have agreed to give you their graph and you need to find two disjoint subsets of its vertices A and B, such that both A and B are vertex cover or claim it's impossible. Each vertex should be given to no more than one of the friends (or you can even keep it for yourself).\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers u_{i} and v_{i} (1  \u2264  u_{i},  v_{i}  \u2264  n), denoting an undirected edge between u_{i} and v_{i}. It's guaranteed the graph won't contain any self-loops or multiple edges.\n\n\n-----Output-----\n\nIf it's impossible to split the graph between Pari and Arya as they expect, print \"-1\" (without quotes).\n\nIf there are two disjoint sets of vertices, such that both sets are vertex cover, print their descriptions. Each description must contain two lines. The first line contains a single integer k denoting the number of vertices in that vertex cover, and the second line contains k integers\u00a0\u2014 the indices of vertices. Note that because of m \u2265 1, vertex cover cannot be empty.\n\n\n-----Examples-----\nInput\n4 2\n1 2\n2 3\n\nOutput\n1\n2 \n2\n1 3 \n\nInput\n3 3\n1 2\n2 3\n1 3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, you can give the vertex number 2 to Arya and vertices numbered 1 and 3 to Pari and keep vertex number 4 for yourself (or give it someone, if you wish).\n\nIn the second sample, there is no way to satisfy both Pari and Arya.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are provided an array of strings that represent the cage and Chuck's opponents. Your task is to take their heads off!! . Return the same array of strings, but with the heads ('O') removed and replaced with a space (' ').\n\nIf the provided array is empty, or is an empty string, return 'Gym is empty'. If you are given an array of numbers, return 'This isn't the gym!!'.\n\n\"\"\"\ndef head_smash(arr):",
    "3": "Python 3\n\"\"\"\nIt's Friday night, and Chuck is bored. He's already run 1,000 miles, stopping only to eat a family sized bag of Heatwave Doritos and a large fistful of M&Ms. He just can't stop thinking about kicking something! \n\nThere is only one thing for it, Chuck heads down to his local MMA gym and immediately challenges every fighter there to get in the cage and try and take him down... AT THE SAME TIME! \n\nYou are provided an array of strings that represent the cage and Chuck's opponents. Your task, in traditional Chuck style, is to take their heads off!! Throw punches, kicks, headbutts (or more likely - regex or iteration...) but whatever you do, remove their heads. Return the same array of strings, but with the heads ('O') removed and replaced with a space (' ').\n\nIf the provided array is empty, or is an empty string, return 'Gym is empty'. If you are given an array of numbers, return 'This isn't the gym!!'.\n\nFIGHT!!\n\n*Original design of this kata was a much more beautiful thing - the test cases illustrate the idea, and the intended output. I am unable to make the actual output go over multiple lines so for now at least you will have to imagine the beauty!*\n\"\"\"\ndef head_smash(arr):",
    "4": "Python 3\n\"\"\"\nYou are given a rectangular parallelepiped with sides of positive integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three integers $a$, $b$, $c$ such that $1\\leq a\\leq b\\leq c$ and parallelepiped $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$.\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$)\u00a0\u2014 the number of test cases.\n\nEach of the next $t$ lines contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$)\u00a0\u2014 the sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n4\n4\n165\n\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a rectangular parallelepiped with sides of positive integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three integers ($a$, $b$, $c$) such that $1\\leq a\\leq b\\leq c$ and parallelepiped $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$. Note, that all small parallelepipeds have to be rotated in the same direction.\n\nFor example, parallelepiped $1\\times 5\\times 6$ can be divided into parallelepipeds $1\\times 3\\times 5$, but can not be divided into parallelepipeds $1\\times 2\\times 3$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$)\u00a0\u2014 the number of test cases.\n\nEach of the next $t$ lines contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$)\u00a0\u2014 the sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n4\n4\n165\n\n\n\n-----Note-----\n\nIn the first test case, rectangular parallelepiped $(1, 1, 1)$ can be only divided into rectangular parallelepiped with sizes $(1, 1, 1)$.\n\nIn the second test case, rectangular parallelepiped $(1, 6, 1)$ can be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$, $(1, 1, 3)$ and $(1, 1, 6)$.\n\nIn the third test case, rectangular parallelepiped $(2, 2, 2)$ can be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$, $(1, 2, 2)$ and $(2, 2, 2)$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a function encode that takes in a string str and replaces all the letters with their respective positions in the English alphabet. String are case sensitive.\n\nExamples:\nInput:\nencode('abc')\nOutput:\n'123'\nExplanation:\na is 1st in English alpabet, b is 2nd and c is 3rd.\n\nInput:\nencode('codewars')\nOutput:\n'315452311819'\n\nInput:\nencode('abc-#@5')\nOutput:\n'123-#@5'\n\"\"\"\ndef encode(string):",
    "7": "Python 3\n\"\"\"\nThis is a follow up from my kata The old switcheroo\n\nWrite\n```python\ndef encode(str)\n```\nthat takes in a string ```str``` and replaces all the letters with their respective positions in the English alphabet.\n\n```python\nencode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd\nencode('codewars') == '315452311819'\nencode('abc-#@5') == '123-#@5'\n```\nString are case sensitive.\n\"\"\"\ndef encode(string):",
    "8": "Python 3\n\"\"\"\nGiven a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. Consecutive integers should be treated as a single number and all the numbers should be treaded as positive integer. If no number was given in the string, it should return 0.\n\nExamples:\nInput:\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\nOutput:\n2021\nExplanation:\nThe numbers are 2015 and 6.\n\"\"\"\ndef sum_from_string(string):",
    "9": "Python 3\n\"\"\"\nGiven a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. \n\nNote:\n\n- Consecutive integers should be treated as a single number. eg, `2015` should be treated as a single number `2015`, NOT four numbers\n- All the numbers should be treaded as positive integer. eg, `11-14` should be treated as two numbers `11` and `14`. Same as `3.14`, should be treated as two numbers `3` and `14`\n- If no number was given in the string, it should return `0`\n\n\nExample:\n\n```\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\n```\n\n The numbers are `2015`, `6`\n\nSum is `2021`.\n\"\"\"\ndef sum_from_string(string):",
    "10": "Python 3\n\"\"\"\n# Task\nGiven a list/array representing how much candy each child in our group has made out with, give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1. \n\n```python\ncandies ([5,8,6,4]) # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\ncandies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) // return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\ncandies [] -- return -1\n\ncandies [1,6] -- return 5\n```\n\"\"\"\ndef candies(s):",
    "11": "Python 3\n\"\"\"\n# Description\n\"It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home. \n\nSo we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount.\n# Task\nYour job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons.\"\n\nYour job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1. \n\nIn the first case (look below) the most candies are given to second kid (i.e second place in list/array), 8. Because of that we will give the first kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will have 8 candies.So we end up handing out 3 + 2 + 4 = 9.\n\n```python\ncandies ([5,8,6,4]) # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\ncandies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) // return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\ncandies [] -- return -1\n\ncandies [1,6] -- return 5\n```\n\"\"\"\ndef candies(s):",
    "12": "Python 3\n\"\"\"\nWrite a program to calculate the sum of all the digits of given integer N. \n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, calculate the sum of digits of N, and display it in a new line.\n\n\n\n-----Example-----\nInput\n3 \n12345\n31203\n2123\nOutput\n15\n9\n8\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou're given an integer N. Write a program to calculate the sum of all the digits of N. \n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, calculate the sum of digits of N, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n12345\n31203\n2123\nOutput\n15\n9\n8\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n# Task\n\nImplement a method to return how many riders are necessary to get the mail from one end to the other. Each rider travels never more than 100 miles.\n\nA rider may go missing and the rider's absence would be noticed at the next station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer. \n\nstations is a list of miles from one station to the next along the Pony Express route.\nstationX is the number of the station where the rider's absence was noticed.\n\n# Example\n\nInput:\nstations = [43, 23, 40, 13]\nstationX = 4\nOutput:\n3\nExplanation:\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 takes mail bags from Rider 1 at station S3\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n\"\"\"\ndef riders(stations, station_x):",
    "15": "Python 3\n\"\"\"\n# A History Lesson\n\nThe Pony Express was a mail service operating in the US in 1859-60.\n\n\n\n\n\nIt reduced the time for messages to travel between the Atlantic and Pacific coasts to about 10 days, before it was made obsolete by the transcontinental telegraph.\n\n# How it worked\n\nThere were a number of *stations*, where:\n\n\n* The rider switched to a fresh horse and carried on, or\n\n* The mail bag was handed over to the next rider\n\n\n# Kata Task\n\n\n`stations` is a list/array of distances (miles) from one station to the next along the Pony Express route.\n\nImplement the `riders` method/function, to return how many riders are necessary to get the mail from one end to the other.\n\n##  Missing rider\n\nIn this version of the Kata a rider may go missing. In practice, this could be for a number of reasons - a lame horse, an accidental fall, foul play... \n\nAfter some time, the rider's absence would be noticed at the **next** station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer (or another substitute rider if necessary). \n\n`stationX` is the number (2..N) of the station where the rider's absence was noticed.\n\n# Notes\n\n* Each rider travels as far as he can, but never more than 100 miles.\n\n# Example\n\nGIven\n\n* `stations = [43, 23, 40, 13]`\n\n* `stationX = 4`\n\nSo\n\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 (at station S3) takes mail bags from Rider 1\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n**Answer:** \n3 riders\n\n\n\n\n*Good Luck.\nDM.*\n\n---\n\nSee also\n* The Pony Express\n* The Pony Express (missing rider)\n\"\"\"\ndef riders(stations, station_x):",
    "16": "Python 3\n\"\"\"\nCreate a function with two arguments that will return an array of the first n multiples of x. Assume both the given number and the number of times to count will be positive numbers greater than 0. \n\nExamples:\nInput:\ncount_by(1,10)\nOutput:\n[1,2,3,4,5,6,7,8,9,10]\n\nInput:\ncount_by(2,5)\nOutput:\n[2,4,6,8,10]\n\n\"\"\"\ndef count_by(x, n):",
    "17": "Python 3\n\"\"\"\nCreate a function with two arguments that will return an array of the first (n) multiples of (x). \n\nAssume both the given number and the number of times to count will be positive numbers greater than 0. \n\nReturn the results as an array (or list in Python, Haskell or Elixir).\n\nExamples:\n\n```python\ncount_by(1,10) #should return [1,2,3,4,5,6,7,8,9,10]\ncount_by(2,5) #should return [2,4,6,8,10]\n```\n\"\"\"\ndef count_by(x, n):",
    "18": "Python 3\n\"\"\"\n\nFind all possible triangles with integer sides which has the radius of inscribed circle equal to R.\nTwo triangles are different if they have at least one different side lengths. Let a, b, c denote the sides of triangle T1, such that a \u2264 b \u2264 c. Similarly, Let d, e, f denote the sides of triangle T2, such that d \u2264 e \u2264 f. Then T1 will said to be different from T2 if either a \u2260 d, or b \u2260 e or c \u2260 f.\n\n-----Input-----\nThere is a single test case per test file.\nThe only line of input contains an integer R.\n\n-----Output-----\nOutput in first line single number - number of triangles satisfying statement.\nOrder the sides of triangles in non-decreasing order. Output all triangles in non-decreasing order, i.e. order first by smallest sides, otherwise by second smallest sides, if first and second sides equal, then by third.\n\n-----Constraints-----\n- 1 \u2264 R \u2264 100 \n\n-----Subtasks-----\n- Subtask #1: (20 points)  1 \u2264 R \u2264 3\n- Subtask #2: (30 points)  1 \u2264 R \u2264 20\n- Subtask #3: (50 points)  Original constraints\n\n-----Example-----\nInput:2\n\nOutput:5\n5 12 13\n6 8 10\n6 25 29\n7 15 20\n9 10 17\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nChef likes problems on geometry a lot. Please help him to solve one such problem.\nFind all possible triangles with integer sides which has the radius of inscribed circle (also known as incircle) equal to R.\nTwo triangles are said to be different if they have at least one different side lengths. Formally, let there be two triangles T1, T2. Let a, b, c denote the sides of triangle T1, such that a \u2264 b \u2264 c. Similarly, Let d, e, f denote the sides of triangle T2, such that d \u2264 e \u2264 f. Then T1 will said to be different from T2 if either a \u2260 d, or b \u2260 e or c \u2260 f.\n\n-----Input-----\nThere is a single test case per test file.\nThe only line of input contains an integer R.\n\n-----Output-----\nOutput in first line single number - number of triangles satisfying statement.\nOrder the sides of triangles in non-decreasing order. Output all triangles in non-decreasing order, i.e. order first by smallest sides, otherwise by second smallest sides, if first and second sides equal, then by third.\n\n-----Constraints-----\n- 1 \u2264 R \u2264 100 \n\n-----Subtasks-----\n- Subtask #1: (20 points)  1 \u2264 R \u2264 3\n- Subtask #2: (30 points)  1 \u2264 R \u2264 20\n- Subtask #3: (50 points)  Original constraints\n\n-----Example-----\nInput:2\n\nOutput:5\n5 12 13\n6 8 10\n6 25 29\n7 15 20\n9 10 17\n\"\"\"\ndef code():"
}