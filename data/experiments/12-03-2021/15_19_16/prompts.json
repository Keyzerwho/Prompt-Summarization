{
    "0": "Python 3\n\"\"\"\nYou are  given a stock of  integer price S and a number K . You can change the number $S$ at most $K$ times\nFind the largest price at which you can sell the stock in order to maximize profit. \n\n-----Input:-----\n- First line will contain $S$ and  $K$ , the price of the stock and the number K \n\n-----Output:-----\nPrint the largest profit you can make in a single line.\n\n-----Constraints-----\n- S can take value upto 10^18\nNOTE: use 64 int number to fit range\n- K can take value from [0.. 9]\n\n-----Sample Input:-----\n4483 2\n\n-----Sample Output:-----\n9983\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\n$Harshad$ $Mehta$ is planning  a new scam with the stocks he is given a stock of  integer price S and a number K . $harshad$ has got the power to change the number $S$ at most $K$ times\nIn order to raise the price of stock and now cash it for his benefits\nFind the largest price at which $harshad$ can sell the stock in order to maximize his profit \n\n-----Input:-----\n- First line will contain $S$ and  $K$ , the price of the stock and the number K \n\n-----Output:-----\nPrint the largest profit  he can make in a single line.\n\n-----Constraints-----\n- S can take value upto 10^18\nNOTE: use 64 int number to fit range\n- K can take value from [0.. 9]\n\n-----Sample Input:-----\n4483 2\n\n-----Sample Output:-----\n9983\n\n-----EXPLANATION:-----\nFirst two digits of the number are changed to get the required number.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nLet's assume that   v(n) is the largest prime number, that does not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first line contains integer t\u00a0(1 \u2264 t \u2264 500) \u2014 the number of testscases. \n\nEach of the following t lines of the input contains integer n (2 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nPrint t lines: the i-th of them must contain the answer to the i-th test as an irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\nInput\n2\n2\n3\n\nOutput\n1/6\n7/30\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nLet's assume that   v(n) is the largest prime number, that does not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first line contains integer t\u00a0(1 \u2264 t \u2264 500) \u2014 the number of testscases. \n\nEach of the following t lines of the input contains integer n (2 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nPrint t lines: the i-th of them must contain the answer to the i-th test as an irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\nInput\n2\n2\n3\n\nOutput\n1/6\n7/30\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven an array of words, you must concatenate the nth letter from each word to construct a new word which should be returned as a string, where n is the position of the word in the list.\n\nExamples:\nInput:\n[\"yoda\", \"best\", \"has\"]\nOutput:\n\"yes\"\n\"\"\"\ndef nth_char(words):",
    "5": "Python 3\n\"\"\"\nComplete the function that takes an array of words.\n\nYou must concatenate the `n`th letter from each word to construct a new word which should be returned as a string, where `n` is the position of the word in the list.\n\nFor example:\n\n```\n[\"yoda\", \"best\", \"has\"]  -->  \"yes\"\n  ^        ^        ^\n  n=0     n=1     n=2\n```\n\n**Note:** Test cases contain valid input only - i.e. a string array or an empty array; and each word will have enough letters.\n\"\"\"\ndef nth_char(words):",
    "6": "Python 3\n\"\"\"\nWrite a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return true if the string is valid, and false if it's invalid. 0 <= input.length <= 100.\n\nExamples:\nInput:\n\"()\"\nOutput:\ntrue\n\nInput:\n\")(()))\"\nOutput:\nfalse\n\nInput:\n\"(\"\nOutput:\nfalse\n\nInput:\n\"(())((()())())\"\nOutput:\ntrue\n\"\"\"\ndef valid_parentheses(string):",
    "7": "Python 3\n\"\"\"\nWrite a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return `true` if the string is valid, and `false` if it's invalid.\n\n## Examples\n\n```\n\"()\"              =>  true\n\")(()))\"          =>  false\n\"(\"               =>  false\n\"(())((()())())\"  =>  true\n```\n\n## Constraints\n\n`0 <= input.length <= 100`\n\n~~~if-not:javascript,go\nAlong with opening (`(`) and closing (`)`) parenthesis, input may contain any valid ASCII characters.  Furthermore, the input string may be empty and/or not contain any parentheses at all.  Do **not** treat other forms of brackets as parentheses (e.g. `[]`, `{}`, `<>`).\n~~~\n\"\"\"\ndef valid_parentheses(string):",
    "8": "Python 3\n\"\"\"\nConsider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor.\n\nExamples:\npoly_multiply([1, 2], [1] ) = [1, 2]\npoly_multiply([2, 4], [4, 5] ) = [8, 26, 20]\n\n\"\"\"\ndef poly_multiply(p1, p2):",
    "9": "Python 3\n\"\"\"\n*** Nova polynomial multiply*** \n\nThis kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1)   [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe)  [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 )   [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5))\n\nConsider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor (the constant).\n\np = [a0, a1, a2, a3] signifies the polynomial a0 + a1x + a2x^2 + a3*x^3\n\nIn this kata multiply two polynomials:\n\n```python \npoly_multiply([1, 2], [1] ) = [1, 2]\npoly_multiply([2, 4], [4, 5] ) = [8, 26, 20]\n```\nThe first kata of this series is preloaded in the code and can be used: [poly_add](http://www.codewars.com/kata/nova-polynomial-1-add-1)\n\"\"\"\ndef poly_multiply(p1, p2):",
    "10": "Python 3\n\"\"\"\n\nYou have find out the frequency of letters in a given string and print it as the new string which comprises of the letter followed by its frequency.For example string is- abcdabf. Then the new string is- a2b2c1d1f1\n\n-----Input-----\nThe input consists of a single line string without any space or numeric or special characters.\n\n-----Output-----\nIt will consist of in the new string which comprises the letters followed by each time it has occurred in the original string in order.\n\n-----Example-----\nInput:\ninformation\n\nOutput:\ni2n2f1o2r1m1a1t1\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nA simple string contains a large repetition of letters within it. This problem is related to string handling and manipulation.  An original message is sent from planet Earth to planet Cybertron in form of a string. However, the letter position and string size is not important. The number of time each letter has occurred in the string is important. So the original string which is sent to Cybertron is encrypted in the new string which comprises the letters followed by each time it has occurred in the original string. Eg- original message is- abcdabf. Then the encrypted string is- a2b2c1d1f1\n\n-----Input-----\nThe input consists of a single line string without any space or numeric or special characters.\n\n-----Output-----\nIt will consist of in the encrypted string which comprises the letters followed by each time it has occurred in the original string in order.\n\n-----Example-----\nInput:\ninformation\n\nOutput:\ni2n2f1o2r1m1a1t1\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nWrite a program to find GCD and LCM of given two integers A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nTwo integers A and B are the inputs. Write a program to find GCD and LCM of A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven a rectangular matrix and integers a and b, consider the union of the ath row and the bth column of the matrix. Return sum of all elements of that union.\n\nExamples:\n\nInput:\nmatrix = [[1, 1, 1, 1], \n          [2, 2, 2, 2], \n          [3, 3, 3, 3]]\na = 1\nb = 3\nOutput:\n12\nExplanation:\n(2 + 2 + 2 + 2) + (1 + 3) = 12\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n    2-dimensional array of integers representing a rectangular matrix.\n\n    Constraints: `1 \u2264 matrix.length \u2264 5, 1 \u2264 matrix[0].length \u2264 5, 1 \u2264 matrix[i][j] \u2264 100.`\n    \n\n - `[input]` integer `a`\n\n  A non-negative integer less than the number of matrix rows.\n\n   Constraints: `0 \u2264 a < matrix.length.`\n   \n   \n - `[input]` integer `b`\n\n   A non-negative integer less than the number of matrix columns.\n\n   Constraints: `0 \u2264 b < matrix[i].length. `\n\n\n - `[output]` an integer\n\"\"\"\ndef crossing_sum(matrix, row, col):",
    "15": "Python 3\n\"\"\"\n# Task\n Given a rectangular `matrix` and integers `a` and `b`, consider the union of the ath row and the bth (both 0-based) column of the `matrix`. Return sum of all elements of that union.\n\n# Example\n\n For\n```\nmatrix = [[1, 1, 1, 1], \n          [2, 2, 2, 2], \n          [3, 3, 3, 3]]\na = 1 and b = 3 ```\nthe output should be `12`.\n\n Here `(2 + 2 + 2 + 2) + (1 + 3) = 12`.\n\n# Input/Output\n\n\n - `[input]` 2D integer array `matrix`\n\n    2-dimensional array of integers representing a rectangular matrix.\n\n    Constraints: `1 \u2264 matrix.length \u2264 5, 1 \u2264 matrix[0].length \u2264 5, 1 \u2264 matrix[i][j] \u2264 100.`\n    \n\n - `[input]` integer `a`\n\n  A non-negative integer less than the number of matrix rows.\n\n   Constraints: `0 \u2264 a < matrix.length.`\n   \n   \n - `[input]` integer `b`\n\n   A non-negative integer less than the number of matrix columns.\n\n   Constraints: `0 \u2264 b < matrix[i].length. `\n\n\n - `[output]` an integer\n\"\"\"\ndef crossing_sum(matrix, row, col):",
    "16": "Python 3\n\"\"\"\nWrite a method that, given the correct word and the player's guess, returns this number. The guessed word should be the same length as the correct word.\n\nExamples:\n\nCountCorrectCharacters(\"dog\", \"car\"); //0 (No letters are in the correct position)\nCountCorrectCharacters(\"dog\", \"god\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"cog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"cod\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"bog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"dog\"); //3 (Correct!)\ncount_correct_characters(\"dog\", \"car\"); #0 (No letters are in the correct position)\ncount_correct_characters(\"dog\", \"god\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"cog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"cod\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"bog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"dog\"); #3 (Correct!)\n\"\"\"\ndef count_correct_characters(correct, guess):",
    "17": "Python 3\n\"\"\"\nConsider a game, wherein the player has to guess a target word. All the player knows is the length of the target word.\n\nTo help them in their goal, the game will accept guesses, and return the number of letters that are in the correct position.\n\nWrite a method that, given the correct word and the player's guess, returns this number.\n\nFor example, here's a possible thought process for someone trying to guess the word \"dog\":\n\n```cs\nCountCorrectCharacters(\"dog\", \"car\"); //0 (No letters are in the correct position)\nCountCorrectCharacters(\"dog\", \"god\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"cog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"cod\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"bog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"dog\"); //3 (Correct!)\n```\n```python\ncount_correct_characters(\"dog\", \"car\"); #0 (No letters are in the correct position)\ncount_correct_characters(\"dog\", \"god\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"cog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"cod\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"bog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"dog\"); #3 (Correct!)\n```\n\nThe caller should ensure that the guessed word is always the same length as the correct word, but since it could cause problems if this were not the case, you need to check for this eventuality:\n\n```cs\n//Throw an InvalidOperationException if the two parameters are of different lengths.\n```\n```python\n#Raise an exception if the two parameters are of different lengths.\n```\n\nYou may assume, however, that the two parameters will always be in the same case.\n\"\"\"\ndef count_correct_characters(correct, guess):",
    "18": "Python 3\n\"\"\"\nTask:\nMake a function that converts a word to pig latin. The rules of pig latin are:\n\nIf the word has more than 3 letters:\n  1. Take the first letter of a word and move it to the end\n  2. Add -ay to the word\nOtherwise leave the word alone.\n\n\nExample: \nInput: `hello` \nOutput: `ellohay`\n\"\"\"\ndef pig_latin(word):",
    "19": "Python 3\n\"\"\"\nTask:\nMake a function that converts a word to pig latin. The rules of pig latin are:\n\n```\nIf the word has more than 3 letters:\n  1. Take the first letter of a word and move it to the end\n  2. Add -ay to the word\nOtherwise leave the word alone.\n```\n\nExample: `hello` = `ellohay`\n\"\"\"\ndef pig_latin(word):"
}