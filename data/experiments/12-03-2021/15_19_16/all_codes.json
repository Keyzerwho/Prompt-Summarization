{
    "0": "\n    S, K = map(int, input().split())\n    if K == 0:\n        print(S)\n    else:\n        for i in range(K):\n            S = S // 2 + S % 2\n        print(S)\n\nif __name__ == \"__main__\":\n    code()",
    "1": "\n    S, K = map(int, input().split())\n    if K == 0:\n        print(S)\n    else:\n        if S % 10 == 0:\n            print(S)\n        else:\n            for i in range(K):\n                S = S + 1\n                if S % 10 == 0:\n                    print(S)\n                    break",
    "2": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = 1\n        q = 1\n        for j in range(2, n+1):\n            if is_prime(j):\n                p *= j\n                q *= j-1\n        print(str(p) + \"/\" + str(q))\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n",
    "3": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = 1\n        q = 1\n        for j in range(2, n+1):\n            if is_prime(j):\n                p *= j\n                q *= j-1\n        print(str(p) + \"/\" + str(q))\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n",
    "4": "\n    return ''.join([word[i] for i, word in enumerate(words)])",
    "5": "\n    return ''.join([word[i] for i, word in enumerate(words)])",
    "6": "\n    count = 0\n    for i in string:\n        if i == \"(\":\n            count += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0",
    "7": "\n    if string.count('(') != string.count(')'):\n        return False\n    else:\n        while '()' in string:\n            string = string.replace('()', '')\n        return not string",
    "8": "\n    # Fill in your code here\n    # First, find the max degree of the two polynomials\n    max_degree = 0\n    for i in range(len(p1)):\n        if p1[i] != 0:\n            max_degree = i\n    for i in range(len(p2)):\n        if p2[i] != 0:\n            max_degree = max(max_degree, i)\n    # Then, create a new polynomial with the max degree\n    p3 = [0] * (max_degree + 1)\n    # Then, multiply the two polynomials\n    for i in range(len(p1)):\n        for j in range(len(p2)):\n            p3[i + j] += p1[i] * p2[j]\n    return p3",
    "9": "\n    return [sum(x) for x in zip(*[(i*j) for j in p2 for i in p1])]\n\nprint(poly_multiply([1, 2], [1]))\nprint(poly_multiply([2, 4], [4, 5]))",
    "10": "\n    s=input()\n    l=[]\n    for i in s:\n        if i not in l:\n            l.append(i)\n    for i in l:\n        print(i,s.count(i),sep=\"\",end=\"\")",
    "11": "\n    s=input()\n    l=[]\n    for i in s:\n        if i not in l:\n            l.append(i)\n            l.append(s.count(i))\n    print(*l,sep='')",
    "12": "\n    t = int(input())\n    for i in range(t):\n        a,b = map(int,input().split())\n        print(gcd(a,b),end=\" \")\n        print(lcm(a,b))\n\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef lcm(a,b):\n    return (a*b)//gcd(a,b)\n",
    "13": "\n    t = int(input())\n    for i in range(t):\n        a,b = map(int,input().split())\n        gcd = 1\n        lcm = 1\n        for i in range(1,min(a,b)+1):\n            if a%i==0 and b%i==0:\n                gcd = i\n        lcm = (a*b)//gcd\n        print(gcd,lcm)",
    "14": "\n    sum = 0\n    for i in range(len(matrix)):\n        sum += matrix[i][col]\n    for j in range(len(matrix[row])):\n        sum += matrix[row][j]\n    sum -= matrix[row][col]\n    return sum\n\ndef sum_matrix(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sum += matrix[i][j]\n    return sum\n\ndef sum_matrix_cross(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sum += crossing_sum(matrix, i, j)\n    return sum\n\ndef sum_matrix_fast(matrix):\n    sum = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            sum += matrix[i][j]\n    return sum * len(matrix) * len(matrix[0]) + sum_matrix_cross(matrix)\n\nmatrix = [[1, 1, 1, 1], \n          [2, 2, 2, 2], \n          [3, 3, 3, 3]]\n\nprint(sum_matrix_fast(matrix))",
    "15": "\n    return sum(matrix[row]) + sum(matrix[i][col] for i in range(len(matrix))) - matrix[row][col]\n\ndef sum_matrix(matrix):\n    return sum(crossing_sum(matrix, row, col) for row in range(len(matrix)) for col in range(len(matrix[0])))",
    "16": "\n    correct_count = 0\n    for i in range(len(correct)):\n        if correct[i] == guess[i]:\n            correct_count += 1\n    return correct_count",
    "17": "\n    if len(correct) != len(guess):\n        raise ValueError(\"The two parameters are of different lengths.\")\n    correct_count = 0\n    for i in range(len(correct)):\n        if correct[i] == guess[i]:\n            correct_count += 1\n    return correct_count",
    "18": "\n    if len(word) > 3:\n        return word[1:] + word[0] + 'ay'\n    else:\n        return word\n\nprint(pig_latin('hello'))\nprint(pig_latin('world'))",
    "19": "\n    if len(word) > 3:\n        return word[1:] + word[0] + 'ay'\n    else:\n        return word\n\nprint(pig_latin('hello'))\nprint(pig_latin('world'))"
}