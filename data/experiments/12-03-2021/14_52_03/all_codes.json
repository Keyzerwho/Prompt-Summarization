{
    "0": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, a[i] - i)\n    print(ans)\n",
    "1": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, abs(a[i] - (i + 1)))\n    print(ans)\n",
    "2": "\n    t = int(input())\n    for i in range(t):\n        a, k = map(int, input().split())\n        if k == 1:\n            print(a)\n        else:\n            while k > 1:\n                a = a + min(a) * max(a)\n                k -= 1\n            print(a)\n",
    "3": "\n    t = int(input())\n    for i in range(t):\n        a, k = map(int, input().split())\n        while k > 0:\n            a = a + min(int(x) for x in str(a)) * max(int(x) for x in str(a))\n            k -= 1\n        print(a)\n",
    "4": "\n    n, c, d = map(int, input().split())\n    fountains = []\n    for i in range(n):\n        b, p = map(int, input().split())\n        fountains.append((b, p, input()))\n    fountains.sort(key=lambda x: x[0], reverse=True)\n    fountains.sort(key=lambda x: x[1])\n    coins = 0\n    diamonds = 0\n    for fountain in fountains:\n        if fountain[2] == 'C':\n            if coins + fountain[1] <= c:\n                coins += fountain[1]\n            else:\n                break\n        else:\n            if diamonds + fountain[1] <= d:\n                diamonds += fountain[1]\n            else:\n                break\n    if coins + diamonds > 0:\n        print(fountains[0][0] + fountains[1][0])\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    code()",
    "5": "\n    n, c, d = map(int, input().split())\n    fountains = []\n    for i in range(n):\n        b, p, t = map(str, input().split())\n        b = int(b)\n        p = int(p)\n        if t == \"C\":\n            fountains.append((b, p))\n        else:\n            fountains.append((b, p * d))\n    fountains.sort(key=lambda x: x[0], reverse=True)\n    fountains.sort(key=lambda x: x[1])\n    if fountains[0][1] + fountains[1][1] > c:\n        print(0)\n    else:\n        print(fountains[0][0] + fountains[1][0])\n",
    "6": "\n    return sum(int(x) for x in str(abs(number)))",
    "7": "\n    return sum(int(x) for x in str(abs(number)))",
    "8": "\n    def distance(x1, y1, x2, y2):\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    def is_favorite(x, y, fav):\n        for i in range(len(fav)):\n            if distance(x, y, 0, 0) == fav[i]:\n                return True\n        return False\n\n    def min_hops(fav):\n        min_hops = 0\n        x = 0\n        y = 0\n        while x < x_max:\n            if is_favorite(x, y, fav):\n                min_hops += 1\n                x += 1\n            else:\n                y += 1\n        return min_hops\n\n    t = int(input())\n    for i in range(t):\n        n, x_max = map(int, input().split())\n        fav = list(map(int, input().split()))\n        print(min_hops(fav))\n",
    "9": "\n    t = int(input())\n    for i in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        a = set(a)\n        if x == 0:\n            print(0)\n        else:\n            if x in a:\n                print(1)\n            else:\n                for j in range(1, x):\n                    if j in a:\n                        if x - j in a:\n                            print(2)\n                            break\n                else:\n                    print(3)",
    "10": "\n    n = int(input())\n    p = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                count += 1\n    print(count)\n",
    "11": "\n    n = int(input())\n    p = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                count += 1\n    print(count)\n",
    "12": "\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x_i, y_i = map(int, input().split())\n        x.append(x_i)\n        y.append(y_i)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[i] - x[j])**2 + (y[i] - y[j])**2 == (x[i] - x[j])**2 + (y[i] - y[j])**2:\n                count += 1\n    print(count)\n",
    "13": "\n    n = int(input())\n    watchmen = []\n    for i in range(n):\n        watchmen.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(watchmen[i][0] - watchmen[j][0]) + abs(watchmen[i][1] - watchmen[j][1]) == \\\n                    ((watchmen[i][0] - watchmen[j][0]) ** 2 + (watchmen[i][1] - watchmen[j][1]) ** 2) ** 0.5:\n                count += 1\n    print(count)\n\n",
    "14": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        if a[i] == a[k] and a[j] == a[l]:\n                            count += 1\n        print(count)\n",
    "15": "\n    n = int(input())\n    for i in range(n):\n        a = int(input())\n        b = list(map(int, input().split()))\n        c = 0\n        for j in range(a):\n            for k in range(j+1, a):\n                for l in range(k+1, a):\n                    if b[j] == b[k] and b[k] == b[l]:\n                        c += 1\n        print(c)\n",
    "16": "\n        \n        pass\n\n\nif __name__ == '__main__':\n    assert Solution().findFrequentTreeSum(0) == 0",
    "17": "\n        if not root:\n            return []\n        self.dic = {}\n        self.max_freq = 0\n        self.helper(root)\n        return [k for k, v in self.dic.items() if v == self.max_freq]\n\n    def helper(self, root):\n        if not root:\n            return 0\n        left = self.helper(root.left)\n        right = self.helper(root.right)\n        total = left + right + root.val\n        self.dic[total] = self.dic.get(total, 0) + 1\n        self.max_freq = max(self.max_freq, self.dic[total])\n        return total",
    "18": "\n    return (n * (n + 1)) // 2\n\nprint(cake_slice(0))\nprint(cake_slice(1))\nprint(cake_slice(2))\nprint(cake_slice(3))",
    "19": "\n    return (n * (n + 1)) // 2\n\nprint(cake_slice(0))\nprint(cake_slice(1))\nprint(cake_slice(2))\nprint(cake_slice(3))"
}