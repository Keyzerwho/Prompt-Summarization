{
    "0": "Python 3\n\"\"\"\nThere are $n$ positive integers $a_1, a_2, \\dots, a_n$. For the one move you can choose any even value $c$ and divide by two all elements that equal $c$.\n\nFor example, if $a=[6,8,12,6,3,12]$ and you choose $c=6$, and $a$ is transformed into $a=[3,8,12,3,3,12]$ after the move.\n\nYou need to find the minimal number of moves for transforming $a$ to an array of only odd integers (each element shouldn't be divisible by $2$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of integers in the sequence $a$. The second line contains positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor $t$ test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd (i.e. not divisible by $2$).\n\n\n-----Example-----\nInput\n4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput\n4\n10\n4\n0\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThere are $n$ positive integers $a_1, a_2, \\dots, a_n$. For the one move you can choose any even value $c$ and divide by two all elements that equal $c$.\n\nFor example, if $a=[6,8,12,6,3,12]$ and you choose $c=6$, and $a$ is transformed into $a=[3,8,12,3,3,12]$ after the move.\n\nYou need to find the minimal number of moves for transforming $a$ to an array of only odd integers (each element shouldn't be divisible by $2$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of integers in the sequence $a$. The second line contains positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor $t$ test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd (i.e. not divisible by $2$).\n\n\n-----Example-----\nInput\n4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput\n4\n10\n4\n0\n\n\n\n-----Note-----\n\nIn the first test case of the example, the optimal sequence of moves can be as follows:\n\n  before making moves $a=[40, 6, 40, 3, 20, 1]$;  choose $c=6$;  now $a=[40, 3, 40, 3, 20, 1]$;  choose $c=40$;  now $a=[20, 3, 20, 3, 20, 1]$;  choose $c=20$;  now $a=[10, 3, 10, 3, 10, 1]$;  choose $c=10$;  now $a=[5, 3, 5, 3, 5, 1]$ \u2014 all numbers are odd. \n\nThus, all numbers became odd after $4$ moves. In $3$ or fewer moves, you cannot make them all odd.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou have n bunnies. You have bought a carrot to be shared between these bunnies. You want to treat all the bunnies equally, and thus want to cut the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. You want to make n - 1 cuts parallel to the base to cut the carrot into n pieces. Make sure that all n pieces have the same area.\n\n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers, n and h (2 \u2264 n \u2264 1000, 1 \u2264 h \u2264 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ... < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n70710.678118654752\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIgor the analyst has adopted n little bunnies. As we all know, bunnies love carrots. Thus, Igor has bought a carrot to be shared between his bunnies. Igor wants to treat all the bunnies equally, and thus he wants to cut the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. Igor wants to make n - 1 cuts parallel to the base to cut the carrot into n pieces. He wants to make sure that all n pieces have the same area. Can you help Igor determine where to cut the carrot so that each piece have equal area?\n\n [Image] Illustration to the first example. \n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers, n and h (2 \u2264 n \u2264 1000, 1 \u2264 h \u2264 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ... < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n70710.678118654752\n\n\n\n-----Note-----\n\nDefinition of isosceles triangle: https://en.wikipedia.org/wiki/Isosceles_triangle.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val|\u00a0and A is an ancestor of B.\n\n\u00a0\nExample 1:\n\nInput: [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\n\n\u00a0\nNote:\n\nThe number of nodes in the tree is between 2 and 5000.\nEach node will have value between 0 and 100000.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def maxAncestorDiff(self, root: TreeNode) -> int:",
    "5": "Python 3\n\"\"\"\nGiven the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val|\u00a0and A is an ancestor of B.\n(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)\n\u00a0\nExample 1:\n\nInput: [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\nExplanation: \nWe have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\n\n\u00a0\nNote:\n\nThe number of nodes in the tree is between 2 and 5000.\nEach node will have value between 0 and 100000.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def maxAncestorDiff(self, root: TreeNode) -> int:",
    "6": "Python 3\n\"\"\"\nYou are given N different large numbers.You have to search for a number which is having maximum frequency of digit X. \n\n-----Input-----\nFirst Line contains number of test cases T. First Line of each test case contains N. Next line contains N space separated integers A1,A2,A3,....,AN. Where Ai integer indicates ith number in Stuart's room. Next Line contains digit X.\n\n-----Output-----\nOutput the number which is having maximum frequency of digit X. If two or more numbers are having same maximum frequency then output the first occurred number among them in A1,A2,A3,....,AN\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30\n- 1 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 10200\n- 0 \u2264 X \u2264 9\n\n-----Example-----\nInput:\n2\n5\n345 1323 165 98 456\n3\n5\n335 876 98 1323 349\n3\n\nOutput:\n1323\n335\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nStuart is obsessed to numbers. He like all type of numbers in fact he is having a great collection of numbers in his room. His collection includes N different large numbers. But today he is searching for a number which is having maximum frequency of digit X. Numbers are large so he can\u2019t do the task on his own. Help him to find a number having maximum frequency of digit X.\n\n-----Input-----\nFirst Line contains number of test cases T. First Line of each test case contains N. Next line contains N space separated integers A1,A2,A3,....,AN. Where Ai integer indicates ith number in Stuart's room. Next Line contains digit X.\n\n-----Output-----\nOutput the number which is having maximum frequency of digit X. If two or more numbers are having same maximum frequency then output the first occurred number among them in A1,A2,A3,....,AN\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30\n- 1 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 10200\n- 0 \u2264 X \u2264 9\n\n-----Example-----\nInput:\n2\n5\n345 1323 165 98 456\n3\n5\n335 876 98 1323 349\n3\n\nOutput:\n1323\n335\n\n-----Explanation-----\nExample case 1. 1323 number is having maximum occurrence of digit 3.\nExample case 2. 335 & 1323 are having maximum occurrence of digit 3 so output must be first occurred number in the array i.e. 335.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n-----Explanation-----\nThe digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nGiven an array of integers, return an array, where the first element is the count of positives numbers and the second element is sum of negative numbers. If the input array is empty or null, return an empty array.\n\nExamples:\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\nOutput:\n[10, -65]\n\"\"\"\ndef count_positives_sum_negatives(arr):",
    "11": "Python 3\n\"\"\"\nGiven an array of integers.\n\nReturn an array, where the first element is the count of positives numbers and the second element is sum of negative numbers.\n\nIf the input array is empty or null, return an empty array.\n\n# Example\n\nFor input `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]`, you should return `[10, -65]`.\n\"\"\"\ndef count_positives_sum_negatives(arr):",
    "12": "Python 3\n\"\"\"\nA cake is sliced with n straight lines. Your task is to calculate the maximum number of pieces the cake can have.\n\n# Example\n\n For `n = 0`, the output should be `1`.\n \n For `n = 1`, the output should be `2`.\n \n For `n = 2`, the output should be `4`.\n \n For `n = 3`, the output should be `7`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 \u2264 n \u2264 10000`\n\n\n - `[output]` an integer\n\n  The maximum number of pieces the sliced cake can have.\n\"\"\"\ndef cake_slice(n):",
    "13": "Python 3\n\"\"\"\n# Task\nA cake is sliced with `n` straight lines. Your task is to calculate the maximum number of pieces the cake can have.\n\n# Example\n\n For `n = 0`, the output should be `1`.\n \n For `n = 1`, the output should be `2`.\n \n For `n = 2`, the output should be `4`.\n \n For `n = 3`, the output should be `7`.\n \n See the following image to understand it:\n \n ![](https://cdn2.scratch.mit.edu/get_image/project/92275349_500x400.png?v=1450672809.79)\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 \u2264 n \u2264 10000`\n\n\n - `[output]` an integer\n\n  The maximum number of pieces the sliced cake can have.\n\"\"\"\ndef cake_slice(n):",
    "14": "Python 3\n\"\"\"\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\n\nExample 1:\n\n\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\n\nExample 2:\n\n\nInput: 1->1->1->2->3\nOutput: 2->3\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
    "15": "Python 3\n\"\"\"\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\n\nExample 1:\n\n\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\n\nExample 2:\n\n\nInput: 1->1->1->2->3\nOutput: 2->3\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
    "16": "Python 3\n\"\"\"\n=====Problem Statement=====\nGiven a string s in lowercase, your task is to find the top three most common characters in the string.\n\nPrint the three most common characters along with their occurrence count.\nSort in descending order of occurrence count.\nIf the occurrence count is the same, sort the characters in alphabetical order.\n\nFor example, according to the conditions described above, GOOGLE would output\nG 2\nO 2\nE 1\n\n=====Input Format=====\nA single line of input containing the string S.\n\n=====Constraints=====\n3\u2264len(S)\u226410^4\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    s = input()",
    "17": "Python 3\n\"\"\"\n=====Problem Statement=====\nA newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string s, which is the company name in lowercase letters, your task is to find the top three most common characters in the string.\nPrint the three most common characters along with their occurrence count.\nSort in descending order of occurrence count.\nIf the occurrence count is the same, sort the characters in alphabetical order.\n\nFor example, according to the conditions described above, GOOGLE would have it's logo with the letters G, O, E. \n\n=====Input Format=====\nA single line of input containing the string S.\n\n=====Constraints=====\n3\u2264len(S)\u226410^4\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    s = input()",
    "18": "Python 3\n\"\"\"\nYou are given a string s of length n.\nDoes a tree with n vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., n.\n - The edges are numbered 1,2,..., n-1, and Edge i connects Vertex u_i and v_i.\n - If the i-th character in s is 1, we can have a connected component of size i by removing one edge from the tree.\n - If the i-th character in s is 0, we cannot have a connected component of size i by removing any one edge from the tree.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - s is a string of length n consisting of 0 and 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n1111\n\n-----Sample Output-----\n-1\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a string s of length n.\nDoes a tree with n vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., n.\n - The edges are numbered 1,2,..., n-1, and Edge i connects Vertex u_i and v_i.\n - If the i-th character in s is 1, we can have a connected component of size i by removing one edge from the tree.\n - If the i-th character in s is 0, we cannot have a connected component of size i by removing any one edge from the tree.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - s is a string of length n consisting of 0 and 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n1111\n\n-----Sample Output-----\n-1\n\nIt is impossible to have a connected component of size n after removing one edge from a tree with n vertices.\n\"\"\"\ndef code():"
}