{
    "id": "cmpl-4BBDFpqbhnCP92lNLROYWOyd0M7zR",
    "object": "text_completion",
    "created": 1638570057,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(N*(N-1))\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N == 0:\n            print(0)\n        elif N == 1:\n            print(1)\n        elif N == 2:\n            print(1)\n        else:\n            print(N-1)\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    n = len(s)\n    if s.count('1') == 0:\n        print(-1)\n    elif s.count('1') == n:\n        print(n-1)\n        for i in range(1, n):\n            print(i, i+1)\n    else:\n        for i in range(1, n):\n            if s[i] == '1':\n                print(i, i+1)\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    if s.count(\"1\") == 0:\n        print(-1)\n    elif s.count(\"1\") == 1:\n        print(1)\n    else:\n        print(s.count(\"1\")-1)\n        for i in range(len(s)):\n            if s[i] == \"1\":\n                print(i+1, i+2)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 != 0 and is_prime(i) == False:\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(odd_not_prime(5))\nprint(odd_not_prime(10))",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 != 0 and not is_prime(i):\n            count += 1\n    return count\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(odd_not_prime(5))\nprint(odd_not_prime(10))",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = []\n        p = []\n        for j in range(n):\n            m_i, p_i = map(int, input().split())\n            m.append(m_i)\n            p.append(p_i)\n        m.sort()\n        p.sort()\n        cost = 0\n        for j in range(n):\n            if m[j] > p[j]:\n                cost += p[j]\n            else:\n                cost += m[j]\n        print(cost)\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    def min_coins(m, p):\n        m.sort()\n        p.sort()\n        i = 0\n        j = 0\n        res = 0\n        while i < len(m) and j < len(p):\n            if m[i] <= p[j]:\n                res += m[i]\n                i += 1\n            else:\n                res += p[j]\n                j += 1\n        while i < len(m):\n            res += m[i]\n            i += 1\n        while j < len(p):\n            res += p[j]\n            j += 1\n        return res\n\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = []\n        p = []\n        for j in range(n):\n            a, b = map(int, input().split())\n            m.append(a)\n            p.append(b)\n        print(min_coins(m, p))\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    num = int(input())\n    for i in range(num):\n        x1, y1, x2, y2 = map(int, input().split())\n        d1 = (x1**2 + y1**2)**0.5\n        d2 = (x2**2 + y2**2)**0.5\n        if d1 < d2:\n            print(\"A IS CLOSER\")\n        elif d1 > d2:\n            print(\"B IS CLOSER\")\n        else:\n            print(\"EQUIDISTANT\")\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    num_of_tests = int(input())\n    for i in range(num_of_tests):\n        test = input().split()\n        x1 = int(test[0])\n        y1 = int(test[1])\n        x2 = int(test[2])\n        y2 = int(test[3])\n        if abs(x1) + abs(y1) < abs(x2) + abs(y2):\n            print(\"A IS CLOSER\")\n        elif abs(x1) + abs(y1) > abs(x2) + abs(y2):\n            print(\"B IS CLOSER\")\n        else:\n            print(\"EQUAL\")\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}