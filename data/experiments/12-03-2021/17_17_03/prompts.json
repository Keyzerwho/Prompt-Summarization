{
    "0": "Python 3\n\"\"\"\n\nThere is a row of $n$ cells. Initially, all cells are empty. Cells are numbered from $1$ to $n$.\n\nYou are given an integer $m$ and $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\le l_i \\le n$)\n\nYou will perform $m$ operations.\n\nIn $i$-th operation, You will choose a number $p_i$ from range $[1, n-l_i+1]$ and will paint all cells from $p_i$ to $p_i+l_i-1$ inclusive in $i$-th color. Cells may be colored more than once, in this case, cell will have the color from the latest operation.\n\nYou hope that after these $m$ operations, all colors will appear at least once and all cells will be colored. Choose $p_i$ in each operation to satisfy all constraints.\n\n\n-----Input-----\n\nThe first line contains two integers $n,m$ ($1 \\leq m \\leq n \\leq 100\\,000$).\n\nThe second line contains $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\leq l_i \\leq n$).\n\n\n-----Output-----\n\nIf it's impossible to perform $m$ operations to satisfy all constraints, print -1.\n\nOtherwise, print $m$ integers $p_1, p_2, \\ldots, p_m$ ($1 \\leq p_i \\leq n - l_i + 1$), after these $m$ operations, all colors should appear at least once and all cells should be colored.\n\nIf there are several possible solutions, you can print any.\n\n\n-----Examples-----\nInput\n5 3\n3 2 2\n\nOutput\n2 4 1\n\nInput\n10 1\n1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nDreamoon likes coloring cells very much.\n\nThere is a row of $n$ cells. Initially, all cells are empty (don't contain any color). Cells are numbered from $1$ to $n$.\n\nYou are given an integer $m$ and $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\le l_i \\le n$)\n\nDreamoon will perform $m$ operations.\n\nIn $i$-th operation, Dreamoon will choose a number $p_i$ from range $[1, n-l_i+1]$ (inclusive) and will paint all cells from $p_i$ to $p_i+l_i-1$ (inclusive) in $i$-th color. Note that cells may be colored more one than once, in this case, cell will have the color from the latest operation.\n\nDreamoon hopes that after these $m$ operations, all colors will appear at least once and all cells will be colored. Please help Dreamoon to choose $p_i$ in each operation to satisfy all constraints.\n\n\n-----Input-----\n\nThe first line contains two integers $n,m$ ($1 \\leq m \\leq n \\leq 100\\,000$).\n\nThe second line contains $m$ integers $l_1, l_2, \\ldots, l_m$ ($1 \\leq l_i \\leq n$).\n\n\n-----Output-----\n\nIf it's impossible to perform $m$ operations to satisfy all constraints, print \"'-1\" (without quotes).\n\nOtherwise, print $m$ integers $p_1, p_2, \\ldots, p_m$ ($1 \\leq p_i \\leq n - l_i + 1$), after these $m$ operations, all colors should appear at least once and all cells should be colored.\n\nIf there are several possible solutions, you can print any.\n\n\n-----Examples-----\nInput\n5 3\n3 2 2\n\nOutput\n2 4 1\n\nInput\n10 1\n1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nThere are N people, numbered 1 through N.\nWe want to divide them into some number of groups, under the following two conditions:\n - Every group contains between A and B people, inclusive.\n - Let F_i be the number of the groups containing exactly i people. Then, for all i, either F_i=0 or C\u2264F_i\u2264D holds.\nFind the number of these ways to divide the people into groups.\nHere, two ways to divide them into groups is considered different if and only if there exists two people such that they belong to the same group in exactly one of the two ways.\nSince the number of these ways can be extremely large, print the count modulo 10^9+7.\n\n-----Constraints-----\n - 1\u2264N\u226410^3\n - 1\u2264A\u2264B\u2264N\n - 1\u2264C\u2264D\u2264N\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A B C D\n\n-----Output-----\nPrint the number of ways to divide the people into groups under the conditions, modulo 10^9+7.\n\n-----Sample Input-----\n3 1 3 1 2\n\n-----Sample Output-----\n4\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThere are N people, conveniently numbered 1 through N.\nWe want to divide them into some number of groups, under the following two conditions:\n - Every group contains between A and B people, inclusive.\n - Let F_i be the number of the groups containing exactly i people. Then, for all i, either F_i=0 or C\u2264F_i\u2264D holds.\nFind the number of these ways to divide the people into groups.\nHere, two ways to divide them into groups is considered different if and only if there exists two people such that they belong to the same group in exactly one of the two ways.\nSince the number of these ways can be extremely large, print the count modulo 10^9+7.\n\n-----Constraints-----\n - 1\u2264N\u226410^3\n - 1\u2264A\u2264B\u2264N\n - 1\u2264C\u2264D\u2264N\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A B C D\n\n-----Output-----\nPrint the number of ways to divide the people into groups under the conditions, modulo 10^9+7.\n\n-----Sample Input-----\n3 1 3 1 2\n\n-----Sample Output-----\n4\n\nThere are four ways to divide the people:\n - (1,2),(3)\n - (1,3),(2)\n - (2,3),(1)\n - (1,2,3)\nThe following way to divide the people does not count: (1),(2),(3). This is because it only satisfies the first condition and not the second.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n$n$ boys and $m$ girls came to the party. Each boy presented each girl some integer number of sweets possibly zero. All boys are numbered with integers from $1$ to $n$ and all girls are numbered with integers from $1$ to $m$. For all $1 \\leq i \\leq n$ the minimal number of sweets, which $i$-th boy presented to some girl is equal to $b_i$ and for all $1 \\leq j \\leq m$ the maximal number of sweets, which $j$-th girl received from some boy is equal to $g_j$.\n\nLet $a_{i,j}$ be the number of sweets which the $i$-th boy gives to the $j$-th girl. Then $b_i$ is equal exactly to the minimum among values $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ and $g_j$ is equal exactly to the maximum among values $b_{1,j}, b_{2,j}, \\ldots, b_{n,j}$.\n\nYou are interested in the minimum total number of sweets that boys could present. You are given the numbers $b_1, \\ldots, b_n$ and $g_1, \\ldots, g_m$, determine this number. \n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$, separated with space\u00a0\u2014 the number of boys and girls, respectively ($2 \\leq n, m \\leq 100\\,000$). The second line contains $n$ integers $b_1, \\ldots, b_n$, separated by spaces\u00a0\u2014 $b_i$ is equal to the minimal number of sweets, which $i$-th boy presented to some girl ($0 \\leq b_i \\leq 10^8$). The third line contains $m$ integers $g_1, \\ldots, g_m$, separated by spaces\u00a0\u2014 $g_j$ is equal to the maximal number of sweets, which $j$-th girl received from some boy ($0 \\leq g_j \\leq 10^8$).\n\n\n-----Output-----\n\nIf the described situation is impossible, print $-1$. In another case, print the minimal total number of sweets, which boys could have presented and all conditions could have satisfied.\n\n\n-----Examples-----\nInput\n3 2\n1 2 1\n3 4\n\nOutput\n12\nInput\n2 2\n0 1\n1 0\n\nOutput\n-1\nInput\n2 3\n1 0\n1 1 2\n\nOutput\n4\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\n$n$ boys and $m$ girls came to the party. Each boy presented each girl some integer number of sweets (possibly zero). All boys are numbered with integers from $1$ to $n$ and all girls are numbered with integers from $1$ to $m$. For all $1 \\leq i \\leq n$ the minimal number of sweets, which $i$-th boy presented to some girl is equal to $b_i$ and for all $1 \\leq j \\leq m$ the maximal number of sweets, which $j$-th girl received from some boy is equal to $g_j$.\n\nMore formally, let $a_{i,j}$ be the number of sweets which the $i$-th boy give to the $j$-th girl. Then $b_i$ is equal exactly to the minimum among values $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ and $g_j$ is equal exactly to the maximum among values $b_{1,j}, b_{2,j}, \\ldots, b_{n,j}$.\n\nYou are interested in the minimum total number of sweets that boys could present, so you need to minimize the sum of $a_{i,j}$ for all $(i,j)$ such that $1 \\leq i \\leq n$ and $1 \\leq j \\leq m$. You are given the numbers $b_1, \\ldots, b_n$ and $g_1, \\ldots, g_m$, determine this number. \n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$, separated with space\u00a0\u2014 the number of boys and girls, respectively ($2 \\leq n, m \\leq 100\\,000$). The second line contains $n$ integers $b_1, \\ldots, b_n$, separated by spaces\u00a0\u2014 $b_i$ is equal to the minimal number of sweets, which $i$-th boy presented to some girl ($0 \\leq b_i \\leq 10^8$). The third line contains $m$ integers $g_1, \\ldots, g_m$, separated by spaces\u00a0\u2014 $g_j$ is equal to the maximal number of sweets, which $j$-th girl received from some boy ($0 \\leq g_j \\leq 10^8$).\n\n\n-----Output-----\n\nIf the described situation is impossible, print $-1$. In another case, print the minimal total number of sweets, which boys could have presented and all conditions could have satisfied.\n\n\n-----Examples-----\nInput\n3 2\n1 2 1\n3 4\n\nOutput\n12\nInput\n2 2\n0 1\n1 0\n\nOutput\n-1\nInput\n2 3\n1 0\n1 1 2\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first test, the minimal total number of sweets, which boys could have presented is equal to $12$. This can be possible, for example, if the first boy presented $1$ and $4$ sweets, the second boy presented $3$ and $2$ sweets and the third boy presented $1$ and $1$ sweets for the first and the second girl, respectively. It's easy to see, that all conditions are satisfied and the total number of sweets is equal to $12$.\n\nIn the second test, the boys couldn't have presented sweets in such way, that all statements satisfied.\n\nIn the third test, the minimal total number of sweets, which boys could have presented is equal to $4$. This can be possible, for example, if the first boy presented $1$, $1$, $2$ sweets for the first, second, third girl, respectively and the second boy didn't present sweets for each girl. It's easy to see, that all conditions are satisfied and the total number of sweets is equal to $4$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven a set of n numbers, divide them into subsets of sizes at most different by 1, such that difference in the sum of numbers in each subset is minimum.\n\n-----Input-----\nFirst line consists of an integer n which denotes the size of the set. Second line is the set.\n\n-----Output-----\nThe first line is the first subset.\nThe second line is the second subset.\n\n-----Constraints-----\nn can range from 2 to 99. The numbers may vary from 1 to 10^4.\n\n-----Example-----\nInput:\n7\n1 2 3 4 5 6 7\n\nOutput:\n1 2 4 7\n3 5 6\n\n-----Explanation-----\nThese 7 values must be separated into 2 sets of sizes 3 and 4.In this case, it is possible to form two sets (1,2,4,7) & (3,5,6) of equal size.The set containing the first value (i.e.) and the elements of the output sets have the same order as the input.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nHan Solo and Chewbacca start a space journey to planet Naboo on the Millennium Falcon. During the journey they land at a mysterious planet with high gravity where they find n diamond stones scattered all around. All the stones are of same weight. Each stone has a value according to its purity which can be detected by a special device. They choose to divide the stones fairly among themselves in two halves so that they carry almost equal weights such that the difference between the value of two halves is as small as possible. If n is even, then sizes of two halves must be strictly n/2 and if n is odd, then size of one half must be (n-1)/2 and size of the other half must be (n+1)/2. Given the value of stones, help them to divide the stones among themselves.\n\n-----Input-----\nFirst line consists of an integer n which denotes the number of stones.Second line consists of n space separated integers denoting the value of the stones.\n\n-----Output-----\nFirst line consists of the values of the stones assigned to Han Solo.Second line consists of the values of the stones assigned to Chewbacca.Assume that the set containing the first value in the input is always assigned to Han Solo.Also the values in the output sets must follow the same ordering as the input.\n\n-----Constraints-----\nThe number of stones can range from 2 to 99.The values of the stones vary from 1 to 10^4.\n\n-----Example-----\nInput:\n7\n1 2 3 4 5 6 7\n\nOutput:\n1 2 4 7\n3 5 6\n\n-----Explanation-----\nThese 7 values must be separated into 2 sets of sizes 3 and 4.In this case, it is possible to form two sets (1,2,4,7) & (3,5,6) of equal size.The set containing the first value (i.e.) 1 must be assigned to Han Solo and the elements of the output sets have the same order as the input.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nA permutation p of size n is the sequence p_1, p_2, ..., p_{n}, consisting of n distinct integers, each of them is from 1 to n (1 \u2264 p_{i} \u2264 n).\n\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nA permutation p of size n is the sequence p_1, p_2, ..., p_{n}, consisting of n distinct integers, each of them is from 1 to n (1 \u2264 p_{i} \u2264 n).\n\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given n cards with numbers. The i-th card has the number a_{i} written on it. You have to put cards in a row to get one greater number.\n\nThere are n! ways to put his cards in a row. The resulting big number is divisible by eleven.\n\nFind out how many  ways are there to put the cards.\n\nConsiders all cards different, even if some of them contain the same number. This number can be large, so output it modulo 998244353.\n\n\n-----Input-----\n\nThe first line of the input data contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100). The descriptions of test cases follow.\n\nEach test is described by two lines.\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000)\u00a0\u2014 the number of cards.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers written on the cards.\n\nIt is guaranteed that the total number of cards in all tests of one input data doesn't exceed 2000.\n\n\n-----Output-----\n\nFor each test case output one line: the number of ways to put the cards to the table so that the resulting big number was divisible by 11, print the number modulo 998244353.\n\n\n-----Example-----\nInput\n4\n2\n1 1\n3\n1 31 12\n3\n12345 67 84\n9\n1 2 3 4 5 6 7 8 9\n\nOutput\n2\n2\n2\n31680\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nIt is Borya's eleventh birthday, and he has got a great present: n cards with numbers. The i-th card has the number a_{i} written on it. Borya wants to put his cards in a row to get one greater number. For example, if Borya has cards with numbers 1, 31, and 12, and he puts them in a row in this order, he would get a number 13112.\n\nHe is only 11, but he already knows that there are n! ways to put his cards in a row. But today is a special day, so he is only interested in such ways that the resulting big number is divisible by eleven. So, the way from the previous paragraph is good, because 13112 = 1192 \u00d7 11, but if he puts the cards in the following order: 31, 1, 12, he would get a number 31112, it is not divisible by 11, so this way is not good for Borya. Help Borya to find out how many good ways to put the cards are there.\n\nBorya considers all cards different, even if some of them contain the same number. For example, if Borya has two cards with 1 on it, there are two good ways.\n\nHelp Borya, find the number of good ways to put the cards. This number can be large, so output it modulo 998244353.\n\n\n-----Input-----\n\nInput data contains multiple test cases. The first line of the input data contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100). The descriptions of test cases follow.\n\nEach test is described by two lines.\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000)\u00a0\u2014 the number of cards in Borya's present.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers written on the cards.\n\nIt is guaranteed that the total number of cards in all tests of one input data doesn't exceed 2000.\n\n\n-----Output-----\n\nFor each test case output one line: the number of ways to put the cards to the table so that the resulting big number was divisible by 11, print the number modulo 998244353.\n\n\n-----Example-----\nInput\n4\n2\n1 1\n3\n1 31 12\n3\n12345 67 84\n9\n1 2 3 4 5 6 7 8 9\n\nOutput\n2\n2\n2\n31680\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n\nTwo different numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$ can form sides of a triangle.\n\nThree numbers $a$, $b$ and $c$ can form sides of a triangle if $a + b > c$, $b + c > a$ and $c + a > b$.\n\nIn a group of numbers, a number is lonely if it doesn't have any friends in that group.\n\nGiven a group of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each test case, print the answer on separate lines: number of lonely numbers in group $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n3\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nIn number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.\n\nMore precisely, two different numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$ can form sides of a triangle.\n\nThree numbers $a$, $b$ and $c$ can form sides of a triangle if $a + b > c$, $b + c > a$ and $c + a > b$.\n\nIn a group of numbers, a number is lonely if it doesn't have any friends in that group.\n\nGiven a group of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each test case, print the answer on separate lines: number of lonely numbers in group $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n3\n\n\n\n-----Note-----\n\nFor first test case, $1$ is the only number and therefore lonely.\n\nFor second test case where $n=5$, numbers $1$, $3$ and $5$ are lonely.\n\nFor third test case where $n=10$, numbers $1$, $5$ and $7$ are lonely.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nCameras are installed on the nodes of the binary tree.\u00a0\nEach camera at\u00a0a node can monitor its parent, itself, and its immediate children.\nCalculate the minimum number of cameras needed to monitor all nodes of the tree.\n\u00a0\nExample 1:\n\n\nInput: [0,0,null,0,0]\nOutput: 1\n\n\nExample 2:\n\nInput: [0,0,null,0,null,0,null,null,0]\nOutput: 2\n\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:",
    "15": "Python 3\n\"\"\"\nGiven a binary tree, we install cameras on the nodes of the tree.\u00a0\nEach camera at\u00a0a node can monitor its parent, itself, and its immediate children.\nCalculate the minimum number of cameras needed to monitor all nodes of the tree.\n\u00a0\nExample 1:\n\n\nInput: [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.\n\n\nExample 2:\n\nInput: [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\n\nNote:\n\nThe number of nodes in the given tree will be in the range\u00a0[1, 1000].\nEvery node has value 0.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:",
    "16": "Python 3\n\"\"\"\nWrite a function named first_non_repeating_letter that takes a string input, and returns the first character that is not repeated anywhere in the string. Uppercase and lowercase letters are considered the same character. If a string contains all repeating characters, it should return an empty string \"\" or None.\n\nExamples:\nInput:\n'stress'\nOutput:\n't'\nExplanation:\nThe letter t only occurs once in the string, and occurs first in the string.\n\"\"\"\ndef first_non_repeating_letter(string):",
    "17": "Python 3\n\"\"\"\nWrite a function named `first_non_repeating_letter` that takes a string input, and returns the first character that is not repeated anywhere in the string.\n\nFor example, if given the input `'stress'`, the function should return `'t'`, since the letter *t* only occurs once in the string, and occurs first in the string.\n\nAs an added challenge, upper- and lowercase letters are considered the **same character**, but the function should return the correct case for the initial letter.  For example, the input `'sTreSS'` should return `'T'`.\n\nIf a string contains *all repeating characters*, it should return an empty string (`\"\"`) or `None` -- see sample tests.\n\"\"\"\ndef first_non_repeating_letter(string):",
    "18": "Python 3\n\"\"\"\nYou are given a medium item for $3 and a large item for $4. For every item purchased you receive a promotional stamp. You may redeem 6 stamps for a any free item given here. No stamp will be given for a free item.\n\n\nDetermine the amount of money you have spent on items, given a sequence of items size you have got in the past a few days. You do not have any stamp in beginning and spent free stamp just after the purchase of six items.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium item or a Large item got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars spent.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nBohan loves milk tea so much and he drinks one cup of milk tea every day. The local shop sells milk tea in two sizes: a Medium cup for $3 and a Large cup for $4. For every cup of milk tea purchased Bohan receives a promotional stamp. Bohan may redeem 6 stamps for a free drink of milk tea regardless of the size. No stamp will be given for a free drink.\n\n\nDetermine the amount of money Bohan have spent on milk tea, given a sequence of milk tea sizes he got in the past a few days. Assume Bohan had no stamps in the beginning and he always redeemed the stamps for the next drink once he had collected 6 stamps.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium cup or a Large cup of milk tea Bohan got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars Bohan have spent on milk tea.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n-----Explanation-----\nExample 1: Bohan didn't redeem any stamps.\nExample 2: Bohan redeemed 6 stamps for the Large cup of milk tea on the 7th day.\nExample 3: Bohan redeemed 6 stamps for the Medium cup of milk tea on the 7th day.\n\"\"\"\ndef code():"
}