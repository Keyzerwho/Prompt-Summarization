{
    "0": "Python 3\n\"\"\"\nIt is known that there are k fish species in the polar ocean, numbered from 1 to k. They are sorted by non-decreasing order of their weight, which is a positive number. Let the weight of the i-th type of fish be w_{i}, then 0 < w_1 \u2264 w_2 \u2264 ... \u2264 w_{k} holds.\n\nDetermine whether it is possible that the fish caught by Alice has a strictly larger total weight than Bob's?\n-----Input-----\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 10^5, 1 \u2264 k \u2264 10^9) \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species.\n\n\n-----Output-----\n\nOutput \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 3 3\n2 2 2\n1 1 3\n\nOutput\nYES\n\nInput\n4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n\nOutput\nNO\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIt is known that there are k fish species in the polar ocean, numbered from 1 to k. They are sorted by non-decreasing order of their weight, which is a positive number. Let the weight of the i-th type of fish be w_{i}, then 0 < w_1 \u2264 w_2 \u2264 ... \u2264 w_{k} holds.\n\nPolar bears Alice and Bob each have caught some fish, and they are guessing who has the larger sum of weight of the fish he/she's caught. Given the type of the fish they've caught, determine whether it is possible that the fish caught by Alice has a strictly larger total weight than Bob's. In other words, does there exist a sequence of weights w_{i} (not necessary integers), such that the fish caught by Alice has a strictly larger total weight?\n\n\n-----Input-----\n\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 10^5, 1 \u2264 k \u2264 10^9) \u2014 the number of fish caught by Alice and Bob respectively, and the number of fish species.\n\nThe second line contains n integers each from 1 to k, the list of fish type caught by Alice. The third line contains m integers each from 1 to k, the list of fish type caught by Bob.\n\nNote that one may have caught more than one fish for a same species.\n\n\n-----Output-----\n\nOutput \"YES\" (without quotes) if it is possible, and \"NO\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 3 3\n2 2 2\n1 1 3\n\nOutput\nYES\n\nInput\n4 7 9\n5 2 7 3\n3 5 2 7 3 8 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, if w_1 = 1, w_2 = 2, w_3 = 2.5,  then Alice has a total of 2 + 2 + 2 = 6 weight units, while Bob only has 1 + 1 + 2.5 = 4.5.\n\nIn the second sample, the fish that Alice caught is a subset of Bob's. Therefore, the total weight of Bob\u2019s fish is always not less than the total weight of Alice\u2019s fish.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nFind the number of ways in which a stack of circular disk can be arranged in such a way that radius of\ndisk on the top of the stack should not exceed the radius of the largest disk in the stack by more than 1. \nThe bottom most disk should have its radius as 1.\n\n\n\nInput\nFirst line of the input contains T (T <= 1000) denoting the number of test cases.\nT lines follow each containing a single integer N (1 <= N <= 1000) denoting the size of the required stack.\n\nOutput\nFor each case the output should be a single integer representing the number of ways a stack of size N can be created. As the answer can be large print it modulo 1000000007.\n\nExample\n\nInput\n2\n1\n2\n\nOutput\n1\n2\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nChef is good at making pancakes. Generally he gets requests to serve N pancakes at once.\nHe serves them in the form of a stack.\nA pancake can be treated as a circular disk with some radius.\nChef needs to take care that when he places a pancake on the top of the stack the radius of the pancake should not exceed the radius of the largest pancake in the stack by more than 1. \nAdditionally all radii should be positive integers, and the bottom most pancake should have its radius as 1.\nChef wants you to find out in how many ways can he create a stack containing N pancakes.\nInput\nFirst line of the input contains T (T <= 1000) denoting the number of test cases.\nT lines follow each containing a single integer N (1 <= N <= 1000) denoting the size of the required stack.\nOutput\nFor each case the output should be a single integer representing the number of ways a stack of size N can be created. As the answer can be large print it modulo 1000000007.\nExample\nInput\n2\n1\n2\n\nOutput\n1\n2\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven n, m and a, calculate the number of squares of side length a required to completely cover a rectangle of length m and breadth n.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed squares.\nExamples\ninput\n6 6 4\noutput\n4\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nTheatre Square in the capital city of Berland has a rectangular shape with the size n\u2009\u00d7\u2009m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a\u2009\u00d7\u2009a.\nWhat is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed number of flagstones in new line.\nExamples\ninput\n6 6 4\noutput\n4\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Task\n Given a pack of candies of various sizes from the storetry to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\n\n\n# Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2, 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16, 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 \u2264 inputArray.length \u2264 50,`\n    \n    `1 \u2264 inputArray[i] \u2264 100.`\n\n\n - `[output]` an integer\n\"\"\"\ndef obtain_max_number(arr):",
    "7": "Python 3\n\"\"\"\n# Task\n CodeBots decided to make a gift for CodeMaster's birthday. They got a pack of candies of various sizes from the store, but instead of giving the whole pack they are trying to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\nWhat is the size of the biggest candy they can make as a gift?\n\n# Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2, 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16, 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 \u2264 inputArray.length \u2264 50,`\n    \n    `1 \u2264 inputArray[i] \u2264 100.`\n\n\n - `[output]` an integer\n\"\"\"\ndef obtain_max_number(arr):",
    "8": "Python 3\n\"\"\"\nYou are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nA point is bad if there are different points b and c, not equal to a, from the given set such that angle between vectors $\\vec{ab}$ and $\\vec{ac}$ is acute. Otherwise, the point is called good.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of points.\n\nThe next n lines of input contain five integers a_{i}, b_{i}, c_{i}, d_{i}, e_{i} (|a_{i}|, |b_{i}|, |c_{i}|, |d_{i}|, |e_{i}| \u2264 10^3) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.\n\n\n-----Output-----\n\nFirst, print a single integer k\u00a0\u2014 the number of good points.\n\nThen, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.\n\n\n-----Examples-----\nInput\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n1\n1\n\nInput\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\nOutput\n0\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nWe will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors $\\vec{ab}$ and $\\vec{ac}$ is acute (i.e. strictly less than $90^{\\circ}$). Otherwise, the point is called good.\n\nThe angle between vectors $\\vec{x}$ and $\\vec{y}$ in 5-dimensional space is defined as $\\operatorname{arccos}(\\frac{\\vec{x} \\cdot \\vec{y}}{|\\vec{x}||\\vec{y}|})$, where $\\vec{x} \\cdot \\vec{y} = x_{1} y_{1} + x_{2} y_{2} + x_{3} y_{3} + x_{4} y_{4} + x_{5} y_{5}$ is the scalar product and $|\\vec{x}|= \\sqrt{\\vec{x} \\cdot \\vec{x}}$ is length of $\\vec{x}$.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of points.\n\nThe next n lines of input contain five integers a_{i}, b_{i}, c_{i}, d_{i}, e_{i} (|a_{i}|, |b_{i}|, |c_{i}|, |d_{i}|, |e_{i}| \u2264 10^3) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.\n\n\n-----Output-----\n\nFirst, print a single integer k\u00a0\u2014 the number of good points.\n\nThen, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.\n\n\n-----Examples-----\nInput\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n1\n1\n\nInput\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, the first point forms exactly a $90^{\\circ}$ angle with all other pairs of points, so it is good.\n\nIn the second sample, along the cd plane, we can see the points look as follows:\n\n[Image]\n\nWe can see that all angles here are acute, so no points are good.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given a positive number, find if it is strong or not.\n\nExample 1:\nInput: strong_num(1)\nOutput: \"STRONG!!!!\"\nExplanation: Since the sum of its digits' factorial of 1 is equal to number itself, then it's a Strong.  \n\nExample 2:\nInput: strong_num(123)\nOutput: \"Not Strong !!\"\nExplanation: Since the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself, then it's Not Strong. \n\nExample 3:\nInput: strong_num(2)\nOutput: \"STRONG!!!!\"\nExplanation: Since **_the sum of its digits' factorial of 2! = 2 is equal to number itself, then it's a Strong.  \n\nExample 4:\nInput: strong_num(150)\nOutput: \"Not Strong !!\"\nExplanation: Since the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself, then it's Not Strong.\n\"\"\"\ndef strong_num(number):",
    "11": "Python 3\n\"\"\"\n# Definition\n\n**_Strong number_** is the number that *the sum of the factorial of its digits is equal to number itself*.\n\n## **_For example_**:  **_145_**, since \n```\n1! + 4! + 5! = 1 + 24 + 120 = 145\n```\nSo, **_145_** is a **_Strong number_**. \n____\n\n# Task\n\n**_Given_** a number, **_Find if it is Strong or not_**.\n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_Number_** *passed is always*  **_Positive_**.\n* **_Return_** *the result as* **_String_**\n___\n\n# Input >> Output Examples\n\n\n```\nstrong_num(1) ==> return \"STRONG!!!!\"\n```\n\n## **_Explanation_**:\n\nSince , **_the sum of its digits' factorial of (1) is equal to number itself (1)_** , **_Then_** its a **_Strong_** .  \n____\n\n```\nstrong_num(123) ==> return \"Not Strong !!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself (123)_** , **_Then_** it's  **_Not Strong_** . \n___\n\n```\nstrong_num(2)  ==>  return \"STRONG!!!!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 2! = 2 is equal to number itself (2)_** , **_Then_** its a **_Strong_** .  \n____\n\n```\nstrong_num(150) ==> return \"Not Strong !!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself (150)_**, **_Then_** it's **_Not Strong_** . \n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef strong_num(number):",
    "12": "Python 3\n\"\"\"\n\n\nYou are given three angles of a triangle.Check whether these angles form a valid triangle or not. \n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nWrite a program to check whether a triangle is valid or not, when the three angles of the triangle are the inputs. A triangle is valid if the sum of all the three angles is equal to 180 degrees.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given n sets which are a subset of the set of natural numbers in the range 1 to m. You can add a single number to any one set at the cost 1.\n\nFind the minimum total cost such that for every pair of sets the union is not a null set.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of sets and the range of natural numbers.\n\nThe next n lines that follow - the sets containing the natural numbers in range 1 to m. If the input is zero it is a null set.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum cost such that the union of no two pairs is a null set.\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the third example add 2 to the third subset.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe \"BerCorp\" company has got n employees. These employees can use m approved official languages for the formal correspondence. The languages are numbered with integers from 1 to m. For each employee we have the list of languages, which he knows. This list could be empty, i. e. an employee may know no official languages. But the employees are willing to learn any number of official languages, as long as the company pays their lessons. A study course in one language for one employee costs 1 berdollar.\n\nFind the minimum sum of money the company needs to spend so as any employee could correspond to any other one (their correspondence can be indirect, i. e. other employees can help out translating).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of employees and the number of languages.\n\nThen n lines follow \u2014 each employee's language list. At the beginning of the i-th line is integer k_{i} (0 \u2264 k_{i} \u2264 m) \u2014 the number of languages the i-th employee knows. Next, the i-th line contains k_{i} integers \u2014 a_{ij} (1 \u2264 a_{ij} \u2264 m) \u2014 the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum amount of money to pay so that in the end every employee could write a letter to every other one (other employees can help out translating).\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the second sample the employee 1 can learn language 2, and employee 8 can learn language 4.\n\nIn the third sample employee 2 must learn language 2.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nThe magic sum of 3s is calculated on an array by summing up odd numbers which include the digit 3. Write a function magic_sum which accepts an array of integers and returns the sum. If the sum cannot be calculated, 0 should be returned.\n\nExamples:\nInput:\n[3, 12, 5, 8, 30, 13]\nOutput:\n16\n\"\"\"\ndef magic_sum(arr):",
    "17": "Python 3\n\"\"\"\nThe magic sum of 3s is calculated on an array by summing up odd numbers which include the digit `3`. Write a function `magic_sum` which accepts an array of integers and returns the sum.\n\n*Example:* `[3, 12, 5, 8, 30, 13]` results in `16` (`3` + `13`)\n\nIf the sum cannot be calculated, `0` should be returned.\n\"\"\"\ndef magic_sum(arr):",
    "18": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007. When you represent s as a decimal number, ignore the leading zeroes.\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". For example, if s = 123123, then query \"2 \u2192 00\" transforms s to 10031003, and query \"3 \u2192 \" meaning \"replace 3 by an empty string\" transforms it to s = 1212. After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007\u00a0(10^9 + 7). When you represent s as a decimal number, please ignore the leading zeroes; also if s is an empty string, then it's assumed that the number equals to zero.\n\nAndrew got tired of processing Eugene's requests manually and he asked you to write a program for that. Help him!\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nNote that the leading zeroes are not removed from string s after the replacement (you can see it in the third sample).\n\"\"\"\ndef code():"
}