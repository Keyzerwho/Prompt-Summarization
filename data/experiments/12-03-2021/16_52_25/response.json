{
    "id": "cmpl-4BCdgM6V9tGJVEKXTkgDMbXTWerDp",
    "object": "text_completion",
    "created": 1638575540,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(0)\n    ans = 0\n    for i in range(n):\n        if a[i] != a[i+1]:\n            ans += 1\n    print(ans)\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        for j in range(i, n):\n            d[a[i] | a[j]] = 1\n    print(len(d))\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not board:\n            return 0\n        count = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        return count",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not board:\n            return 0\n        count = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'X':\n                    if i > 0 and board[i-1][j] == 'X':\n                        continue\n                    if j > 0 and board[i][j-1] == 'X':\n                        continue\n                    count += 1\n        return count",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isupper():\n            s[i] = s[i].lower()\n        else:\n            s[i] = s[i].upper()\n    return ''.join(s)\n\nprint(sc(\"Aab\"))\nprint(sc(\"AabBc\"))\nprint(sc(\"AaaaAaab\"))\nprint(sc(\"aAAAaAAb\"))",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return ''.join(sorted(set(s), key=s.index))",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return n * (n + 1) // 2\n\nprint(rocks(13))",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return n * (n + 1) // 2\n\nprint(rocks(13))",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if not words:\n        return {}\n    if not words[0]:\n        return {}\n    if len(words) == 1:\n        return {words[0]: {}}\n    root = {}\n    for word in words:\n        current = root\n        for letter in word:\n            if letter not in current:\n                current[letter] = {}\n            current = current[letter]\n        current[\"\"] = {}\n    return root",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    pass",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[n//2] == s:\n        print(0)\n    elif a[n//2] < s:\n        print(s - a[n//2])\n    else:\n        print(a[n//2] - s)\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, s = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[n//2] == s:\n        print(0)\n    elif a[n//2] < s:\n        print(s - a[n//2])\n    else:\n        print(a[n//2] - s)\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sorted(set(santas_list).intersection(children))",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sorted(set(santas_list).intersection(children))",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    even = []\n    odd = []\n    for i in integers:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == 1:\n        return even[0]\n    else:\n        return odd[0]",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    even = []\n    odd = []\n    for i in integers:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) > len(odd):\n        return odd[0]\n    else:\n        return even[0]",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a1, b1 = map(int, input().split())\n        a2, b2 = map(int, input().split())\n        if a1 == a2 or b1 == b2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a1, b1 = map(int, input().split())\n        a2, b2 = map(int, input().split())\n        if a1 == a2 or b1 == b2:\n            print(\"Yes\")\n        elif a1 == b2 or b1 == a2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not head:\n            return None\n        if m == n:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for i in range(m-1):\n            pre = pre.next\n        cur = pre.next\n        for i in range(n-m):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = pre.next\n            pre.next = temp\n        return dummy.next",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not head:\n            return None\n        if m == n:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        for i in range(m-1):\n            pre = pre.next\n        cur = pre.next\n        for i in range(n-m):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = pre.next\n            pre.next = temp\n        return dummy.next",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}