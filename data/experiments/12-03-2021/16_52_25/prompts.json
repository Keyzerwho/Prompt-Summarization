{
    "0": "Python 3\n\"\"\"\nYou have a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) where l, r are integer, 1 \u2264 l \u2264 r \u2264 n for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r.\n\nCount the number of distinct values of function f(l, r) for the given sequence a.\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nPolycarpus has a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) (l, r are integer, 1 \u2264 l \u2264 r \u2264 n) for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r. Formally: f(l, r) = a_{l}\u00a0|\u00a0a_{l} + 1\u00a0|\u00a0... \u00a0|\u00a0a_{r}. \n\nPolycarpus took a piece of paper and wrote out the values of function f(l, r) for all l, r (l, r are integer, 1 \u2264 l \u2264 r \u2264 n). Now he wants to know, how many distinct values he's got in the end. \n\nHelp Polycarpus, count the number of distinct values of function f(l, r) for the given sequence a.\n\nExpression x\u00a0|\u00a0y means applying the operation of bitwise OR to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is marked as \"|\", in Pascal \u2014 as \"or\".\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\n-----Note-----\n\nIn the first test case Polycarpus will have 6 numbers written on the paper: f(1, 1) = 1, f(1, 2) = 3, f(1, 3) = 3, f(2, 2) = 2, f(2, 3) = 2, f(3, 3) = 0. There are exactly 4 distinct numbers among them: 0, 1, 2, 3.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven an 2 dimentional array count number of structures in it.\nStructures are represented by 'X's and empty slots are represented with \".\"s.\nYou may assume the following rules:\n\n\nYou receive a valid 2 dimentional array, made of only structures or empty\nslots.  Structures can only be horizontal or vertical. \nAt least one horizontal or vertical cell separates between two structures.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above 2 dimentional array there are 2 structures.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid 2 dimentional array that you will not receive - as structures\nwill always have a cell separating between them.\n\n\"\"\"\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:",
    "3": "Python 3\n\"\"\"\nGiven an 2D board, count how many battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n\n\nYou receive a valid board, made of only battleships or empty slots.\nBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\nAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above board there are 2 battleships.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n\nFollow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n\"\"\"\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:",
    "4": "Python 3\n\"\"\"\nEvery uppercase letter is Father, The corresponding lowercase letters is the Son. Given a string s, if the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n    \nExamples:\nInput:\nsc(\"Aab\")\nOutput:\n\"Aa\"\n\nInput:\nsc(\"AabBc\")\nOutput:\n\"AabB\"\n\nInput:\nsc(\"AaaaAaab\")\nOutput:\n\"AaaaAaa\"\n\nInput:\nsc(\"aAAAaAAb\")\nOutput:\n\"aAAAaAA\"\n\"\"\"\ndef sc(s):",
    "5": "Python 3\n\"\"\"\nThis is the simple version of Shortest Code series. If you need some challenges, please try the [challenge version](http://www.codewars.com/kata/56f928b19982cc7a14000c9d)\n\n## Task: \n\n  Every uppercase letter is Father, The corresponding lowercase letters is the Son.\n    \n  Give you a string ```s```, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n    \n  For example: \n    \n   ```sc(\"Aab\")``` should return ```\"Aa\"```\n    \n   ```sc(\"AabBc\")``` should return ```\"AabB\"```\n   \n   ```sc(\"AaaaAaab\")``` should return ```\"AaaaAaa\"```(father can have a lot of son)\n    \n   ```sc(\"aAAAaAAb\")``` should return ```\"aAAAaAA\"```(son also can have a lot of father ;-)\n    \n    \n### Series:\n - [Bug in Apple](http://www.codewars.com/kata/56fe97b3cc08ca00e4000dc9)\n - [Father and Son](http://www.codewars.com/kata/56fe9a0c11086cd842000008)\n - [Jumping Dutch act](http://www.codewars.com/kata/570bcd9715944a2c8e000009)\n - [Planting Trees](http://www.codewars.com/kata/5710443187a36a9cee0005a1)\n - [Give me the equation](http://www.codewars.com/kata/56fe9b65cc08cafbc5000de3)\n - [Find the murderer](http://www.codewars.com/kata/570f3fc5b29c702c5500043e)\n - [Reading a Book](http://www.codewars.com/kata/570ca6a520c69f39dd0016d4)\n - [Eat watermelon](http://www.codewars.com/kata/570df12ce6e9282a7d000947)\n - [Special factor](http://www.codewars.com/kata/570e5d0b93214b1a950015b1)\n - [Guess the Hat](http://www.codewars.com/kata/570ef7a834e61306da00035b)\n - [Symmetric Sort](http://www.codewars.com/kata/5705aeb041e5befba20010ba)\n - [Are they symmetrical?](http://www.codewars.com/kata/5705cc3161944b10fd0004ba)\n - [Max Value](http://www.codewars.com/kata/570771871df89cf59b000742)\n - [Trypophobia](http://www.codewars.com/kata/56fe9ffbc25bf33fff000f7c)\n - [Virus in Apple](http://www.codewars.com/kata/5700af83d1acef83fd000048)\n - [Balance Attraction](http://www.codewars.com/kata/57033601e55d30d3e0000633)\n - [Remove screws I](http://www.codewars.com/kata/5710a50d336aed828100055a)\n - [Remove screws II](http://www.codewars.com/kata/5710a8fd336aed00d9000594)\n - [Regular expression compression](http://www.codewars.com/kata/570bae4b0237999e940016e9)\n - [Collatz Array(Split or merge)](http://www.codewars.com/kata/56fe9d579b7bb6b027000001)\n - [Tidy up the room](http://www.codewars.com/kata/5703ace6e55d30d3e0001029)\n - [Waiting for a Bus](http://www.codewars.com/kata/57070eff924f343280000015)\n\"\"\"\ndef sc(s):",
    "6": "Python 3\n\"\"\"\n# Task\n Vanya has `n` rocks in the pile, then he goes to the store to buy labels for enumeration. \n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1\u2009 \u2264 \u2009n \u2009\u2264 \u200910^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n  \n# Example\n\n For `n = 13`, the result should be `17`.\n ```\n the numbers from 1 to n are:\n 1 2 3 4 5 6 7 8 9 10 11 12 13\n we need 17 single digit labels:\n 1 2 3 4 5 6 7 8 9 1 0 1 1 1 2 1 3\n each label cost $1, so the output should be 17.\n ```\n\"\"\"\ndef rocks(n):",
    "7": "Python 3\n\"\"\"\n# Task\n Vanya gets bored one day and decides to enumerate a large pile of rocks. He first counts the rocks and finds out that he has `n` rocks in the pile, then he goes to the store to buy labels for enumeration. \n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1\u2009 \u2264 \u2009n \u2009\u2264 \u200910^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n  \n# Example\n\n For `n = 13`, the result should be `17`.\n ```\n the numbers from 1 to n are:\n 1 2 3 4 5 6 7 8 9 10 11 12 13\n we need 17 single digit labels:\n 1 2 3 4 5 6 7 8 9 1 0 1 1 1 2 1 3\n each label cost $1, so the output should be 17.\n ```\n\"\"\"\ndef rocks(n):",
    "8": "Python 3\n\"\"\"\nImplement a function which creates a radix tree in which each node that is the only child is merged with its parent from a given list of words using dictionaries where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\nExamples:\n\nInput:\nradix_tree()\nOutput:\n{}\n\nInput:\nradix_tree(\"\")\nOutput:\n{}\n\nInput:\nradix_tree(\"\", \"\")\nOutput:\n{}\n\nInput:\nradix_tree(\"radix\", \"tree\")\nOutput:\n{\"radix\": {}, \"tree\": {}}\n\nInput:\nradix_tree(\"ape\", \"apple\")\nOutput:\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\nInput:\nradix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\nOutput:\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\nInput:\nradix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\nOutput:\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}}, \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\nInput:\nradix_tree(\"appleabcd\", \"apple\")\nOutput:\n{\"apple\": {\"abcd\": {}}}\n\"\"\"\ndef radix_tree(*words):",
    "9": "Python 3\n\"\"\"\nImplement a function which \ncreates a **[radix tree](https://en.wikipedia.org/wiki/Radix_tree)** (a space-optimized trie [prefix tree]) \nin which each node that is the only child is merged with its parent [unless a word from the input ends there]) \nfrom a given list of words \nusing dictionaries (aka hash maps or hash tables) where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\n### Examples:\n\n```python\n>>> radix_tree()\n{}\n\n>>> radix_tree(\"\")\n{}\n\n>>> radix_tree(\"\", \"\")\n{}\n\n>>> radix_tree(\"radix\", \"tree\")\n{\"radix\": {}, \"tree\": {}}\n\n>>> radix_tree(\"ape\", \"apple\")\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\n>>> radix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\n>>> radix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}},\n       \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\n>>> radix_tree(\"appleabcd\", \"apple\")\n{\"apple\": {\"abcd\": {}}}\n```\n\"\"\"\ndef radix_tree(*words):",
    "10": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers and an integer $s$. It is guaranteed that $n$ is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to $s$.\n\nThe median of the array with odd length is the value of the element which is located on the middle position after the array is sorted. For example, the median of the array $6, 5, 8$ is equal to $6$, since if we sort this array we will get $5, 6, 8$, and $6$ is located on the middle position.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1\\le n\\le 2\\cdot 10^5-1$, $1\\le s\\le 10^9$)\u00a0\u2014 the length of the array and the required value of median.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\n\nIt is guaranteed that $n$ is odd.\n\n\n-----Output-----\n\nIn a single line output the minimum number of operations to make the median being equal to $s$.\n\n\n-----Examples-----\nInput\n3 8\n6 5 8\n\nOutput\n2\nInput\n7 20\n21 15 12 11 20 19 12\n\nOutput\n6\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers and an integer $s$. It is guaranteed that $n$ is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to $s$.\n\nThe median of the array with odd length is the value of the element which is located on the middle position after the array is sorted. For example, the median of the array $6, 5, 8$ is equal to $6$, since if we sort this array we will get $5, 6, 8$, and $6$ is located on the middle position.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1\\le n\\le 2\\cdot 10^5-1$, $1\\le s\\le 10^9$)\u00a0\u2014 the length of the array and the required value of median.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\n\nIt is guaranteed that $n$ is odd.\n\n\n-----Output-----\n\nIn a single line output the minimum number of operations to make the median being equal to $s$.\n\n\n-----Examples-----\nInput\n3 8\n6 5 8\n\nOutput\n2\nInput\n7 20\n21 15 12 11 20 19 12\n\nOutput\n6\n\n\n-----Note-----\n\nIn the first sample, $6$ can be increased twice. The array will transform to $8, 5, 8$, which becomes $5, 8, 8$ after sorting, hence the median is equal to $8$.\n\nIn the second sample, $19$ can be increased once and $15$ can be increased five times. The array will become equal to $21, 20, 12, 11, 20, 20, 12$. If we sort this array we get $11, 12, 12, 20, 20, 20, 21$, this way the median is $20$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a list of words. \nYou need to output sorted list of words such that any of the words returned are not duplicated and comparison is case sensitive\n\n\n\"\"\"\ndef find_children(santas_list, children):",
    "13": "Python 3\n\"\"\"\nChristmas is coming, and Santa has a long list to go through, to find who deserves presents for the big day. Go through a list of children, and return a list containing every child who appeared on Santa's list. Do not add any child more than once. Output should be sorted.\n~~~if:java\nFor java, use Lists.\n~~~\n\nComparison should be case sensitive and the returned list should contain only one copy of each name: `\"Sam\"` and `\"sam\"` are different, but `\"sAm\"` and `\"sAm\"` are not.\n\n\n\"\"\"\ndef find_children(santas_list, children):",
    "14": "Python 3\n\"\"\"\nYou are given an array which will have a length of at least 3 containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this N.\n\nExamples:\nInput:\n[2, 4, 0, 100, 4, 11, 2602, 36]\nOutput:\n11\n\nInput:\n[160, 3, 1719, 19, 11, 13, -21]\nOutput:\n160\n\"\"\"\ndef find_outlier(integers):",
    "15": "Python 3\n\"\"\"\nYou are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer `N`. Write a method that takes the array as an argument and returns this \"outlier\" `N`.\n\n## Examples\n\n```python\n[2, 4, 0, 100, 4, 11, 2602, 36]\nShould return: 11 (the only odd number)\n\n[160, 3, 1719, 19, 11, 13, -21]\nShould return: 160 (the only even number)\n```\n\"\"\"\ndef find_outlier(integers):",
    "16": "Python 3\n\"\"\"\nVasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers $a_1$ and $b_1$ ($1 \\le a_1, b_1 \\le 100$) \u2014 the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers $a_2$ and $b_2$ ($1 \\le a_2, b_2 \\le 100$) \u2014 the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\n\n-----Output-----\n\nPrint $t$ answers, each of which is a string \"YES\" (in the case of a positive answer) or \"NO\" (in the case of a negative answer). The letters in words can be printed in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n\nOutput\nYes\nYes\nNo\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nVasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case is given in two lines.\n\nThe first line contains two integers $a_1$ and $b_1$ ($1 \\le a_1, b_1 \\le 100$) \u2014 the dimensions of the first one obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\nThe second line contains two integers $a_2$ and $b_2$ ($1 \\le a_2, b_2 \\le 100$) \u2014 the dimensions of the second obtained after cutting rectangle. The sizes are given in random order (that is, it is not known which of the numbers is the width, and which of the numbers is the length).\n\n\n-----Output-----\n\nPrint $t$ answers, each of which is a string \"YES\" (in the case of a positive answer) or \"NO\" (in the case of a negative answer). The letters in words can be printed in any case (upper or lower).\n\n\n-----Example-----\nInput\n3\n2 3\n3 1\n3 2\n1 3\n3 3\n1 3\n\nOutput\nYes\nYes\nNo\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nReverse a linked list from position m to n.\n\nNote:\u00a01 \u2264 m \u2264 n \u2264 length of list.\n\nExample:\n\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:",
    "19": "Python 3\n\"\"\"\nReverse a linked list from position m to n. Do it in one-pass.\n\nNote:\u00a01 \u2264 m \u2264 n \u2264 length of list.\n\nExample:\n\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:"
}