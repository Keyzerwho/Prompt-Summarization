{
    "0": "Python 3\n\"\"\"\nYou are given a line of n gemstones, the i-th of which has color c_{i}. The goal is to destroy all the gemstones in the line as quickly as possible.\n\nIn one second, exactly one continuous substring of colored gemstones is chosen that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line?\n\nThe color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is c_{i} (1 \u2264 c_{i} \u2264 n)\u00a0\u2014 the color of the i-th gemstone in a line.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds needed to destroy the entire line.\n\n\n-----Examples-----\nInput\n3\n1 2 1\n\nOutput\n1\n\nInput\n3\n1 2 3\n\nOutput\n3\n\nInput\n7\n1 4 4 2 3 2 1\n\nOutput\n2\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nGenos recently installed the game Zuma on his phone. In Zuma there exists a line of n gemstones, the i-th of which has color c_{i}. The goal of the game is to destroy all the gemstones in the line as quickly as possible.\n\nIn one second, Genos is able to choose exactly one continuous substring of colored gemstones that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line?\n\nLet us remind, that the string (or substring) is called palindrome, if it reads same backwards or forward. In our case this means the color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of gemstones.\n\nThe second line contains n space-separated integers, the i-th of which is c_{i} (1 \u2264 c_{i} \u2264 n)\u00a0\u2014 the color of the i-th gemstone in a line.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds needed to destroy the entire line.\n\n\n-----Examples-----\nInput\n3\n1 2 1\n\nOutput\n1\n\nInput\n3\n1 2 3\n\nOutput\n3\n\nInput\n7\n1 4 4 2 3 2 1\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample, Genos can destroy the entire line in one second.\n\nIn the second sample, Genos can only destroy one gemstone at a time, so destroying three gemstones takes three seconds.\n\nIn the third sample, to achieve the optimal time of two seconds, destroy palindrome 4 4 first and then destroy palindrome 1 2 3 2 1.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nThe queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. \n\n## Task:\nWrite a function ```availableMoves(position)``` which returns possibly moves of chess queen. Returned value should be an ```array``` with possible moves sorted alphabetically, exluded starting position.\n\nFor example when input position is ```A1``` return value should be:\n\n```[\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\", \"B1\", \"B2\", \"C1\", \"C3\", \"D1\", \"D4\", \"E1\", \"E5\", \"F1\", \"F6\", \"G1\", \"G7\", \"H1\", \"H8\"]```\n\n```\n     A   B   C   D   E   F   G   H\n   + - + - + - + - + - + - + - + - +\n1  | Q | x | x | x | x | x | x | x |\n   + - + - + - + - + - + - + - + - +\n2  | x | x |   |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n3  | x |   | x |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n4  | x |   |   | x |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n5  | x |   |   |   | x |   |   |   |\n   + - + - + - + - + - + - + - + - +\n6  | x |   |   |   |   | x |   |   |\n   + - + - + - + - + - + - + - + - +\n7  | x |   |   |   |   |   | x |   |\n   + - + - + - + - + - + - + - + - +\n8  | x |   |   |   |   |   |   | x |\n   + - + - + - + - + - + - + - + - +\n   \nQ = queen\nx = available move\n```\n\n## Input:\n- input position can be any type (array, number, string and so on). If input position is not a string then return empty array.\n- valid input position is one letter from ```A``` to ```H``` with number from ```1``` to ```8```, for example ```A1```, ```C8```, ```B3```. If input is invalid (for example ```A10``` or ```H0```) then return empty array.\n\"\"\"\ndef available_moves(position):",
    "3": "Python 3\n\"\"\"\nThe queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally, thus combining the moves of the rook and bishop. The queen captures by occupying the square on which an enemy piece sits. (wikipedia: https://en.wikipedia.org/wiki/Queen_(chess)).\n\n## Task:\nWrite a function ```availableMoves(position)``` which returns possibly moves of chess queen. Returned value should be an ```array``` with possible moves sorted alphabetically, exluded starting position.\n\nFor example when input position is ```A1``` return value should be:\n\n```[\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\", \"B1\", \"B2\", \"C1\", \"C3\", \"D1\", \"D4\", \"E1\", \"E5\", \"F1\", \"F6\", \"G1\", \"G7\", \"H1\", \"H8\"]```\n\n```\n     A   B   C   D   E   F   G   H\n   + - + - + - + - + - + - + - + - +\n1  | Q | x | x | x | x | x | x | x |\n   + - + - + - + - + - + - + - + - +\n2  | x | x |   |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n3  | x |   | x |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n4  | x |   |   | x |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n5  | x |   |   |   | x |   |   |   |\n   + - + - + - + - + - + - + - + - +\n6  | x |   |   |   |   | x |   |   |\n   + - + - + - + - + - + - + - + - +\n7  | x |   |   |   |   |   | x |   |\n   + - + - + - + - + - + - + - + - +\n8  | x |   |   |   |   |   |   | x |\n   + - + - + - + - + - + - + - + - +\n   \nQ = queen\nx = available move\n```\n\n## Input:\n- input position can be any type (array, number, string and so on). If input position is not a string then return empty array.\n- valid input position is one letter from ```A``` to ```H``` with number from ```1``` to ```8```, for example ```A1```, ```C8```, ```B3```. If input is invalid (for example ```A10``` or ```H0```) then return empty array.\n\"\"\"\ndef available_moves(position):",
    "4": "Python 3\n\"\"\"\nA tree having n nodes, numbered from 1 to n. Each node i has an initial value init_{i}, which is either 0 or 1. The root of the tree is node 1.\n\nOne can perform several (possibly, zero) operations on the tree. The only available type of operation is to pick a node x. Right after picking node x, the value of node x flips, the values of sons of x remain the same, the values of sons of sons of x flips, the values of sons of sons of sons of x remain the same and so on.\n\nThe goal is to get each node i to have value goal_{i}, which can also be only 0 or 1. You need to reach the goal  by using minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; u_{i} \u2260 v_{i}) meaning there is an edge between nodes u_{i} and v_{i}. \n\nThe next line contains n integer numbers, the i-th of them corresponds to init_{i} (init_{i} is either 0 or 1). The following line also contains n integer numbers, the i-th number corresponds to goal_{i} (goal_{i} is either 0 or 1).\n\n\n-----Output-----\n\nIn the first line output an integer number cnt, representing the minimal number of operations you perform. Each of the next cnt lines should contain an integer x_{i}, representing that you pick a node x_{i}.\n\n\n-----Examples-----\nInput\n10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n\nOutput\n2\n4\n7\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nIahub is very proud of his recent discovery, propagating trees. Right now, he invented a new tree, called xor-tree. After this new revolutionary discovery, he invented a game for kids which uses xor-trees.\n\nThe game is played on a tree having n nodes, numbered from 1 to n. Each node i has an initial value init_{i}, which is either 0 or 1. The root of the tree is node 1.\n\nOne can perform several (possibly, zero) operations on the tree during the game. The only available type of operation is to pick a node x. Right after someone has picked node x, the value of node x flips, the values of sons of x remain the same, the values of sons of sons of x flips, the values of sons of sons of sons of x remain the same and so on.\n\nThe goal of the game is to get each node i to have value goal_{i}, which can also be only 0 or 1. You need to reach the goal of the game by using minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; u_{i} \u2260 v_{i}) meaning there is an edge between nodes u_{i} and v_{i}. \n\nThe next line contains n integer numbers, the i-th of them corresponds to init_{i} (init_{i} is either 0 or 1). The following line also contains n integer numbers, the i-th number corresponds to goal_{i} (goal_{i} is either 0 or 1).\n\n\n-----Output-----\n\nIn the first line output an integer number cnt, representing the minimal number of operations you perform. Each of the next cnt lines should contain an integer x_{i}, representing that you pick a node x_{i}.\n\n\n-----Examples-----\nInput\n10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n\nOutput\n2\n4\n7\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nThere are n watchmen on a plane, the i-th watchman is located at point (x_{i}, y_{i}).\n\nDoctor Manhattan considers the distance between watchmen i and j to be |x_{i} - x_{j}| + |y_{i} - y_{j}|. Daniel, calculates the distance using the formula $\\sqrt{(x_{i} - x_{j})^{2} +(y_{i} - y_{j})^{2}}$.\n\nThe success of the operation relies on the number of pairs (i, j) (1 \u2264 i < j \u2264 n), such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. Compute the number of such pairs.\n\n\n-----Input-----\n\nThe first line of the input contains the single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of watchmen.\n\nEach of the following n lines contains two integers x_{i} and y_{i} (|x_{i}|, |y_{i}| \u2264 10^9).\n\nSome positions may coincide.\n\n\n-----Output-----\n\nPrint the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.\n\n\n-----Examples-----\nInput\n3\n1 1\n7 5\n1 5\n\nOutput\n2\n\nInput\n6\n0 0\n0 1\n0 2\n-1 1\n0 1\n1 1\n\nOutput\n11\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nWatchmen are in a danger and Doctor Manhattan together with his friend Daniel Dreiberg should warn them as soon as possible. There are n watchmen on a plane, the i-th watchman is located at point (x_{i}, y_{i}).\n\nThey need to arrange a plan, but there are some difficulties on their way. As you know, Doctor Manhattan considers the distance between watchmen i and j to be |x_{i} - x_{j}| + |y_{i} - y_{j}|. Daniel, as an ordinary person, calculates the distance using the formula $\\sqrt{(x_{i} - x_{j})^{2} +(y_{i} - y_{j})^{2}}$.\n\nThe success of the operation relies on the number of pairs (i, j) (1 \u2264 i < j \u2264 n), such that the distance between watchman i and watchmen j calculated by Doctor Manhattan is equal to the distance between them calculated by Daniel. You were asked to compute the number of such pairs.\n\n\n-----Input-----\n\nThe first line of the input contains the single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of watchmen.\n\nEach of the following n lines contains two integers x_{i} and y_{i} (|x_{i}|, |y_{i}| \u2264 10^9).\n\nSome positions may coincide.\n\n\n-----Output-----\n\nPrint the number of pairs of watchmen such that the distance between them calculated by Doctor Manhattan is equal to the distance calculated by Daniel.\n\n\n-----Examples-----\nInput\n3\n1 1\n7 5\n1 5\n\nOutput\n2\n\nInput\n6\n0 0\n0 1\n0 2\n-1 1\n0 1\n1 1\n\nOutput\n11\n\n\n\n-----Note-----\n\nIn the first sample, the distance between watchman 1 and watchman 2 is equal to |1 - 7| + |1 - 5| = 10 for Doctor Manhattan and $\\sqrt{(1 - 7)^{2} +(1 - 5)^{2}} = 2 \\cdot \\sqrt{13}$ for Daniel. For pairs (1, 1), (1, 5) and (7, 5), (1, 5) Doctor Manhattan and Daniel will calculate the same distances.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYour task is to write a function get_animals_count(legs_number, heads_number, horns_number) which returns a dictionary {\"rabbits\" : rabbits_count, \"chickens\" : chickens_count, \"cows\" : cows_count}\n\nAll chickens have 2 legs, 1 head and no horns; all rabbits have 4 legs, 1 head and no horns; all cows have 4 legs, 1 head and 2 horns.\n\n\nExamples:\nInput:\nget_animals_count(34, 11, 6)\nOutput:\n{\"rabbits\" : 3, \"chickens\" : 5, \"cows\" : 3}\n\nInput:\nget_animals_count(154, 42, 10)\nOutput:\n{\"rabbits\" : 30, \"chickens\" : 7, \"cows\" : 5}\n\"\"\"\ndef get_animals_count(legs, heads, horns):",
    "9": "Python 3\n\"\"\"\nFarmer Bob have a big farm, where he growths chickens, rabbits and cows. It is very difficult to count the number of animals for each type manually, so he diceded to buy a system to do it. But he bought a cheap system that can count only total number of heads, total number of legs and total number of horns of animals on the farm.\nHelp Bob to figure out how many chickens, rabbits and cows does he have?\n\nAll chickens have 2 legs, 1 head and no horns; all rabbits have 4 legs, 1 head and no horns; all cows have 4 legs, 1 head and 2 horns.\n\nYour task is to write a function \n```Python\nget_animals_count(legs_number, heads_number, horns_number)\n```\n```Csharp\nDictionary get_animals_count(int legs_number, int heads_number, int horns_number)\n```\n, which returns a dictionary \n```python\n{\"rabbits\" : rabbits_count, \"chickens\" : chickens_count, \"cows\" : cows_count}\n``` \n```Csharp\nnew Dictionary(){{\"rabbits\", rabbits_count},{\"chickens\", chickens_count},{\"cows\", cows_count}}\n```\n\nParameters `legs_number, heads_number, horns_number` are integer, all tests have valid input.\n\nExample:\n\n```python\nget_animals_count(34, 11, 6); # Should return {\"rabbits\" : 3, \"chickens\" : 5, \"cows\" : 3}\nget_animals_count(154, 42, 10); # Should return {\"rabbits\" : 30, \"chickens\" : 7, \"cows\" : 5}\n```\n\n```Csharp\nget_animals_count(34, 11, 6); //Should return  Dictionary(){{\"rabbits\", 3},{\"chickens\", 5},{\"cows\", 3}}\nget_animals_count(154, 42, 10); //Should return Dictionary(){{\"rabbits\", 30},{\"chickens\", 7},{\"cows\", 5}}\n```\n\"\"\"\ndef get_animals_count(legs, heads, horns):",
    "10": "Python 3\n\"\"\"\nGiven a binary tree, return the zigzag level order traversal of its nodes' values.\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:",
    "11": "Python 3\n\"\"\"\nGiven a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\n\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:",
    "12": "Python 3\n\"\"\"\nGiven a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is between\u00a01\u00a0and\u00a010^4.\nThe value of nodes is between\u00a01\u00a0and\u00a0100.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:",
    "13": "Python 3\n\"\"\"\nGiven a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is between\u00a01\u00a0and\u00a010^4.\nThe value of nodes is between\u00a01\u00a0and\u00a0100.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:",
    "14": "Python 3\n\"\"\"\nYou are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nA point is bad if there are different points b and c, not equal to a, from the given set such that angle between vectors $\\vec{ab}$ and $\\vec{ac}$ is acute. Otherwise, the point is called good.\n\nThe angle between vectors $\\vec{x}$ and $\\vec{y}$ in 5-dimensional space is defined as $\\operatorname{arccos}(\\frac{\\vec{x} \\cdot \\vec{y}}{|\\vec{x}||\\vec{y}|})$, where $\\vec{x} \\cdot \\vec{y} = x_{1} y_{1} + x_{2} y_{2} + x_{3} y_{3} + x_{4} y_{4} + x_{5} y_{5}$ is the scalar product and $|\\vec{x}|= \\sqrt{\\vec{x} \\cdot \\vec{x}}$ is length of $\\vec{x}$.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of points.\n\nThe next n lines of input contain five integers a_{i}, b_{i}, c_{i}, d_{i}, e_{i} (|a_{i}|, |b_{i}|, |c_{i}|, |d_{i}|, |e_{i}| \u2264 10^3) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.\n\n\n-----Output-----\n\nFirst, print a single integer k\u00a0\u2014 the number of good points.\n\nThen, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.\n\n\n-----Examples-----\nInput\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n1\n1\n\nInput\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\nOutput\n0\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nWe will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors $\\vec{ab}$ and $\\vec{ac}$ is acute (i.e. strictly less than $90^{\\circ}$). Otherwise, the point is called good.\n\nThe angle between vectors $\\vec{x}$ and $\\vec{y}$ in 5-dimensional space is defined as $\\operatorname{arccos}(\\frac{\\vec{x} \\cdot \\vec{y}}{|\\vec{x}||\\vec{y}|})$, where $\\vec{x} \\cdot \\vec{y} = x_{1} y_{1} + x_{2} y_{2} + x_{3} y_{3} + x_{4} y_{4} + x_{5} y_{5}$ is the scalar product and $|\\vec{x}|= \\sqrt{\\vec{x} \\cdot \\vec{x}}$ is length of $\\vec{x}$.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of points.\n\nThe next n lines of input contain five integers a_{i}, b_{i}, c_{i}, d_{i}, e_{i} (|a_{i}|, |b_{i}|, |c_{i}|, |d_{i}|, |e_{i}| \u2264 10^3) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.\n\n\n-----Output-----\n\nFirst, print a single integer k\u00a0\u2014 the number of good points.\n\nThen, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.\n\n\n-----Examples-----\nInput\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n1\n1\n\nInput\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, the first point forms exactly a $90^{\\circ}$ angle with all other pairs of points, so it is good.\n\nIn the second sample, along the cd plane, we can see the points look as follows:\n\n[Image]\n\nWe can see that all angles here are acute, so no points are good.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nThere are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively.\nFor each of these bags, you will paint one of the balls red, and paint the other blue.\nAfterwards, the 2N balls will be classified according to color.\nThen, we will define the following:\n - R_{max}: the maximum integer written on a ball painted in red\n - R_{min}: the minimum integer written on a ball painted in red\n - B_{max}: the maximum integer written on a ball painted in blue\n - B_{min}: the minimum integer written on a ball painted in blue\nFind the minimum possible value of (R_{max} - R_{min}) \\times (B_{max} - B_{min}).\n\n-----Constraints-----\n - 1 \u2264 N \u2264 200,000\n - 1 \u2264 x_i, y_i \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum possible value.\n\n-----Sample Input-----\n3\n1 2\n3 4\n5 6\n\n-----Sample Output-----\n15\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively.\nFor each of these bags, you will paint one of the balls red, and paint the other blue.\nAfterwards, the 2N balls will be classified according to color.\nThen, we will define the following:\n - R_{max}: the maximum integer written on a ball painted in red\n - R_{min}: the minimum integer written on a ball painted in red\n - B_{max}: the maximum integer written on a ball painted in blue\n - B_{min}: the minimum integer written on a ball painted in blue\nFind the minimum possible value of (R_{max} - R_{min}) \\times (B_{max} - B_{min}).\n\n-----Constraints-----\n - 1 \u2264 N \u2264 200,000\n - 1 \u2264 x_i, y_i \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum possible value.\n\n-----Sample Input-----\n3\n1 2\n3 4\n5 6\n\n-----Sample Output-----\n15\n\nThe optimal solution is to paint the balls with x_1, x_2, y_3 red, and paint the balls with y_1, y_2, x_3 blue.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven a number, determine how many positive integers less than or equal to the number are odd but not prime. Assume it is an integer between 1 and 10000.\n\nExample: \nInput:\n5\nOutput:\n1\nExplanation:\n5 has three odd numbers (1,3,5) and only the number 1 is not prime, so the answer is 1\n\nInput:\n10\nOutput:\n2\nExplanation:\nExample: 10 has five odd numbers (1,3,5,7,9) and only 1 and 9 are not prime, so the answer is 2\n\"\"\"\ndef odd_not_prime(n):",
    "19": "Python 3\n\"\"\"\nFor \"x\", determine how many positive integers less than or equal to \"x\" are odd but not prime. Assume \"x\" is an integer between 1 and 10000.\n\nExample: 5 has three odd numbers (1,3,5) and only the number 1 is not prime, so the answer is 1\n\nExample: 10 has five odd numbers (1,3,5,7,9) and only 1 and 9 are not prime, so the answer is 2\n\"\"\"\ndef odd_not_prime(n):"
}