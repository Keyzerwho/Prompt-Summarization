{
    "0": "Python 3\n\"\"\"\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer.\n\n### Input\nA String containing 1s and 0s (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Examples\n`10001` returns 1\n`1001` returns 0\n`00000` returns 3\n`0000` returns 2\n`01000` returns 1\n\"\"\"\ndef get_free_urinals(urinals):",
    "1": "Python 3\n\"\"\"\n# How many urinals are free?\nIn men's public toilets with urinals, there is this unwritten rule that you leave at least one urinal free\nbetween you and the next person peeing. \nFor example if there are 3 urinals and one person is already peeing in the left one, you will choose the\nurinal on the right and not the one in the middle.\nThat means that a maximum of 3 people can pee at the same time on public toilets with \n5 urinals when following this rule (Only 2 if the first person pees into urinal 2 or 4).\n\n![Imgur Urinals](https://i.imgur.com/imZE6xm.png)\n\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule.\n\n### Input\nA String containing 1s and 0s (Example: `10001`) (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Examples\n\n`10001` returns 1 (10101)  \n`1001` returns 0 (1001)  \n`00000` returns 3 (10101)  \n`0000` returns 2 (1001)  \n`01000` returns 1 (01010 or 01001) \n\n### Note\nWhen there is already a mistake in the input string (for example `011`), then return `-1`\n\nHave fun and don't pee into the wrong urinal ;)\n\"\"\"\ndef get_free_urinals(urinals):",
    "2": "Python 3\n\"\"\"\nObtain the solutions to 2^n for a given n and display their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe chef won a duet singing award at Techsurge & Mridang 2012. From that time he is obsessed with the number 2.\n\nHe just started calculating the powers of two. And adding the digits of the results.\n\nBut he got puzzled after a few calculations. So gave you the job to generate the solutions to 2^n and find their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\nExplanation:\n2^5=32\n3+2=5\n2^10=1024\n1+0+2+4=7\n2^4=16\n1+6=7\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nWrite a function that takes an arbitrary number of strings and interlaces them.\n\nExample 1:\nInput: `combineStrings('abc', '123')`\nOutput: `'a1b2c3'`\n\nExample 2:\nInput: `combineStrings('abcd', '123')`\nOutput: `'a1b2c3d'`\n\nExample 3:\nInput: `combineStrings('abc', '123', '\u00a3$%')`\nOutput: `'a1\u00a3b2$c3%'`\n\"\"\"\ndef combine_strings(*args):",
    "5": "Python 3\n\"\"\"\nWrite a function that takes an arbitrary number of strings and interlaces them (combines them by alternating characters from each string).\n\nFor example `combineStrings('abc', '123')` should return `'a1b2c3'`.\n\nIf the strings are different lengths the function should interlace them until each string runs out, continuing to add characters from the remaining strings.\n\nFor example `combineStrings('abcd', '123')` should return `'a1b2c3d'`.\n\nThe function should take any number of arguments and combine them.\n\nFor example `combineStrings('abc', '123', '\u00a3$%')` should return `'a1\u00a3b2$c3%'`.\n\n**Note: if only one argument is passed return only that string. If no arguments are passed return an empty string.**\n\"\"\"\ndef combine_strings(*args):",
    "6": "Python 3\n\"\"\"\nGiven a year, find the next happy year or the closest year you'll see your best friend. Input Year with in range 1000\u2009 \u2264\u2009 y\u2009 \u2264\u2009 9000.\n\nExamples:\nInput:\nnextHappyYear(7712)\nOutput:\n7801\nExplanation:\nAs the next closest year with only distinct digits is 7801. \n\nInput:\nnextHappyYear(8989)\nOutput:\n9012\nExplanation:\nAs the next closest year with only distinct digits is 9012. \n\nInput:\nnextHappyYear(1001)\nOutput:\n1023\nExplanation:\nAs the next closest year with only distinct digits is 1023.\n\"\"\"\ndef next_happy_year(year):",
    "7": "Python 3\n\"\"\"\n# Scenario \n\n*You're saying good-bye your best friend* , **_See you next happy year_** . \n\n**_Happy Year_** *is the year with only distinct digits* , (e.g) **_2018_**\n\n___\n# Task\n\n**_Given_** a year, **_Find_** **_The next happy year_** or **_The closest year You'll see your best friend_**      ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)\n\n___\n# Notes\n\n* **_Year_** Of Course always **_Positive_** .\n* **_Have no fear_** , *It is guaranteed that the answer exists* . \n* **_It's not necessary_** *that the year passed to the function is Happy one* .   \n* **_Input Year with in range_** *(1000\u2009 \u2264\u2009 y\u2009 \u2264\u2009 9000)*\n\n____\n# Input >> Output Examples:\n\n```\nnextHappyYear (7712) ==> return (7801)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *7801* . \n___\n\n```\nnextHappyYear (8989) ==> return (9012)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *9012* . \n___\n\n```\nnextHappyYear (1001) ==> return (1023)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *1023* .\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef next_happy_year(year):",
    "8": "Python 3\n\"\"\"\nGiven a text and a character, fully mutate the text to the character. If the text or the character are empty, return an empty string.  \n\n# Example\nInput:\ntext = \"abc\"\ncharacter = \"z\"\nOutput:\ntext = \"zzz\"\n\n\"\"\"\ndef contamination(text, char):",
    "9": "Python 3\n\"\"\"\nAn AI has infected a text with a character!! \n\nThis text is now **fully mutated** to this character.\n\nIf the text or the character are empty, return an empty string.  \nThere will never be a case when both are empty as nothing is going on!!\n\n**Note:** The character is a string of length 1 or an empty string.\n\n# Example\n```python\ntext before = \"abc\"\ncharacter   = \"z\"\ntext after  = \"zzz\"\n```\n\"\"\"\ndef contamination(text, char):",
    "10": "Python 3\n\"\"\"\nDisplay \"Thanks for helping Chef!\" if given number N is less than 10, otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nWrite a program, which takes an integer N and if the number is less than 10 then display \"Thanks for helping Chef!\" otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n-----Explanation-----\nThe digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven a string of lowercase words, You need to return the highest scoring word as a string. If two words score the same, return the word that appears earliest in the original string.\n\n\"\"\"\ndef high(x):",
    "15": "Python 3\n\"\"\"\nGiven a string of words, you need to find the highest scoring word.\n\nEach letter of a word scores points according to its position in the alphabet: `a = 1, b = 2, c = 3` etc.\n\nYou need to return the highest scoring word as a string.\n\nIf two words score the same, return the word that appears earliest in the original string.\n\nAll letters will be lowercase and all inputs will be valid.\n\"\"\"\ndef high(x):",
    "16": "Python 3\n\"\"\"\nIf any of the permutations of a given number  N is divisible by 5, then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input,$N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n19\n385\n\n-----Sample Output:-----\n0\n1\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 5. If any of the permutations is divisible by 5 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input,$N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n19\n385\n\n-----Sample Output:-----\n0\n1\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given $N$ nodes arranged in a cycle initialised to zero and a difference $K$. \nFind and return the minimum number of increments required so that each node is atleast $1$ and adjacent nodes have a difference of is atleast $K$.\n\n-----Input:-----\n- First line will contain $T$, the number of testcases. Then the testcases follow. \n- The only line of each testcase contains two space-separated integers $N$ and $K$. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the number of increments you need.\n\n-----Constraints-----\n- $1 \\leq T \\leq  10^6$\n- $2 \\leq  N \\leq  10^3$\n- $0 \\leq  K \\leq 10^4$ \n\n-----Sample Input:-----\n1 \n2 1\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nThe minimum number of increments required is $3$. One node needs to be incremented once and the other node needs to be incremented $2$ times.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nChef wants you to distribute candies among $N$ kids who are sitting in a circle. However, he wants to make some kids jealous of others. Thus, he wants you to distribute candies in such a way that there is a difference of at least $K$ candies between two adjacent kids. \nGiven the value of $N$ and $K$, you need to find the minimum number of candies you need to satisfy the given conditions, such that, each kid gets at least one candy.\n\n-----Input:-----\n- First line will contain $T$, the number of testcases. Then the testcases follow. \n- The only line of each testcase contains two space-separated integers $N$ and $K$. \n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the number of candies you need.\n\n-----Constraints-----\n- $1 \\leq T \\leq  10^6$\n- $2 \\leq  N \\leq  10^3$\n- $0 \\leq  K \\leq 10^4$ \n\n-----Sample Input:-----\n1 \n2 1\n\n-----Sample Output:-----\n3\n\n-----EXPLANATION:-----\nThe minimum number of candies required is $3$. One kid needs to have $1$ candy and the other needs to have $2$ candy to have a difference of $1$ candy between them.\n\"\"\"\ndef code():"
}