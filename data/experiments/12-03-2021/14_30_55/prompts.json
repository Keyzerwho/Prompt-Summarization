{
    "0": "Python 3\n\"\"\"\nYou've got array A, consisting of n integers and a positive integer k.\n\nYou need to permute the array elements so that value $\\sum_{i = 1}^{n - k}|A [ i ] - A [ i + k ]|$ became as minimal as possible. It is not allowed to change order of elements at all.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 k \u2264 min(5000, n - 1)). \n\nThe second line contains n integers A[1], A[2], ..., A[n] ( - 10^9 \u2264 A[i] \u2264 10^9), separate by spaces \u2014 elements of the array A.\n\n\n-----Output-----\n\nPrint the minimum possible value of the sum described in the statement.\n\n\n-----Examples-----\nInput\n3 2\n1 2 4\n\nOutput\n1\n\nInput\n5 2\n3 -5 3 -5 3\n\nOutput\n0\n\nInput\n6 3\n4 3 4 3 2 5\n\nOutput\n3\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou've got array A, consisting of n integers and a positive integer k. Array A is indexed by integers from 1 to n.\n\nYou need to permute the array elements so that value $\\sum_{i = 1}^{n - k}|A [ i ] - A [ i + k ]|$ became minimal possible. In particular, it is allowed not to change order of elements at all.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 k \u2264 min(5000, n - 1)). \n\nThe second line contains n integers A[1], A[2], ..., A[n] ( - 10^9 \u2264 A[i] \u2264 10^9), separate by spaces \u2014 elements of the array A.\n\n\n-----Output-----\n\nPrint the minimum possible value of the sum described in the statement.\n\n\n-----Examples-----\nInput\n3 2\n1 2 4\n\nOutput\n1\n\nInput\n5 2\n3 -5 3 -5 3\n\nOutput\n0\n\nInput\n6 3\n4 3 4 3 2 5\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first test one of the optimal permutations is 1\u00a04\u00a02. \n\nIn the second test the initial order is optimal. \n\nIn the third test one of the optimal permutations is 2\u00a03\u00a04\u00a04\u00a03\u00a05.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou have a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) where l, r are integer, 1 \u2264 l \u2264 r \u2264 n for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r.\n\nCount the number of distinct values of function f(l, r) for the given sequence a.\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nPolycarpus has a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) (l, r are integer, 1 \u2264 l \u2264 r \u2264 n) for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r. Formally: f(l, r) = a_{l}\u00a0|\u00a0a_{l} + 1\u00a0|\u00a0... \u00a0|\u00a0a_{r}. \n\nPolycarpus took a piece of paper and wrote out the values of function f(l, r) for all l, r (l, r are integer, 1 \u2264 l \u2264 r \u2264 n). Now he wants to know, how many distinct values he's got in the end. \n\nHelp Polycarpus, count the number of distinct values of function f(l, r) for the given sequence a.\n\nExpression x\u00a0|\u00a0y means applying the operation of bitwise OR to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is marked as \"|\", in Pascal \u2014 as \"or\".\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\n-----Note-----\n\nIn the first test case Polycarpus will have 6 numbers written on the paper: f(1, 1) = 1, f(1, 2) = 3, f(1, 3) = 3, f(2, 2) = 2, f(2, 3) = 2, f(3, 3) = 0. There are exactly 4 distinct numbers among them: 0, 1, 2, 3.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three same added characters somewhere in the string. Write a function that returns the added character.\n\nExamples:\nInput:\nstring1 = \"hello\"\nstring2 = \"aaahello\"\nOutput:\n'a'\n\nInput:\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\nOutput:\n'2'\n\nInput:\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\nOutput:\n'c'\n\"\"\"\ndef added_char(s1, s2):",
    "5": "Python 3\n\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three added characters somewhere in the string (three same characters),\n\nWrite a function that returns the added character\n\n### E.g\n\n```\nstring1 = \"hello\"\nstring2 = \"aaahello\"\n\n// => 'a'\n```\n\nThe above is just an example; the characters could be anywhere in the string and string2 is actually **shuffled**.\n\n### Another example\n\n```\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\n\n// => '2'\n```\n\nNote that the added character could also exist in the original string\n\n\n```\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\n\n// => 'c'\n```\n\nYou can assume that string2 will aways be larger than string1, and there will always be three added characters in string2.\n\n```if:c\nWrite the function `added_char()` that takes two strings and return the added character as described above.\n```\n\n```if:javascript\nWrite the function `addedChar()` that takes two strings and return the added character as described above.\n```\n\"\"\"\ndef added_char(s1, s2):",
    "6": "Python 3\n\"\"\"\nYour translator should take in a string and output it with all odd length words having an extra letter that is the last letter in the word. It should also remove all punctuation as well as any underscores.\n\nExamples:\nInput:\n\"How did we end up here? We go?\"\nOutput:\n\"Howw didd we endd up here We go\"\n\"\"\"\ndef evenator(s):",
    "7": "Python 3\n\"\"\"\nMr. E Ven only likes even length words.\nPlease create a translator so that he doesn't have to hear those pesky odd length words.\nFor some reason he also hates punctuation, he likes his sentences to flow.\n\nYour translator should take in a string and output it with all odd length words having an extra letter (the last letter in the word). It should also remove all punctuation (.,?!) as well as any underscores (_).\n\n\"How did we end up here? We go?\"\ntranslated becomes-> \n\"Howw didd we endd up here We go\"\n\"\"\"\ndef evenator(s):",
    "8": "Python 3\n\"\"\"\nWrite a function which takes a list of strings and returns each line prepended by the correct number. The numbering starts at 1. The format is \"n: string\".\n\nExamples:\nInput:\nnumber([])\nOutput:\n[]\n\nInput:\nnumber([\"a\", \"b\", \"c\"])\nOutput:\n[\"1: a\", \"2: b\", \"3: c\"]\n\"\"\"\ndef number(lines):",
    "9": "Python 3\n\"\"\"\nYour team is writing a fancy new text editor and you've been tasked with implementing the line numbering.\n\nWrite a function which takes a list of strings and returns each line prepended by the correct number.\n\nThe numbering starts at 1. The format is `n: string`. Notice the colon and space in between.\n\n**Examples:**\n\n```python\nnumber([]) # => []\nnumber([\"a\", \"b\", \"c\"]) # => [\"1: a\", \"2: b\", \"3: c\"]\n```\n\"\"\"\ndef number(lines):",
    "10": "Python 3\n\"\"\"\nGiven starting number and the ending number, creates a dictionary of factors for all numbers.\n\nIf a number possesses no factors , the list for the key should be `['None']`\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2], 5: ['None'], 6: [2, 3]}\n```\n\"\"\"\ndef factorsRange(n, m):",
    "11": "Python 3\n\"\"\"\nThe objective of this Kata is to write a function that creates a dictionary of factors for a range of numbers.\n\nThe key for each list in the dictionary should be the number. The list associated with each key should possess the factors for the number.\n\nIf a number possesses no factors (only 1 and the number itself), the list for the key should be `['None']`\n\nThe function possesses two arguments (`n` and `m`). Where `n` is the starting number and `m` is the ending number.\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2], 5: ['None'], 6: [2, 3]}\n```\n\"\"\"\ndef factorsRange(n, m):",
    "12": "Python 3\n\"\"\"\n# Task\n Vanya has `n` rocks in the pile, then he buy labels.\n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1\u2009 \u2264 \u2009n \u2009\u2264 \u200910^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n  \n# Example\n\n For `n = 13`, the result should be `17`.\n ```\n the numbers from 1 to n are:\n 1 2 3 4 5 6 7 8 9 10 11 12 13\n we need 17 single digit labels:\n 1 2 3 4 5 6 7 8 9 1 0 1 1 1 2 1 3\n each label cost $1, so the output should be 17.\n ```\n\"\"\"\ndef rocks(n):",
    "13": "Python 3\n\"\"\"\n# Task\n Vanya gets bored one day and decides to enumerate a large pile of rocks. He first counts the rocks and finds out that he has `n` rocks in the pile, then he goes to the store to buy labels for enumeration. \n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1\u2009 \u2264 \u2009n \u2009\u2264 \u200910^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n  \n# Example\n\n For `n = 13`, the result should be `17`.\n ```\n the numbers from 1 to n are:\n 1 2 3 4 5 6 7 8 9 10 11 12 13\n we need 17 single digit labels:\n 1 2 3 4 5 6 7 8 9 1 0 1 1 1 2 1 3\n each label cost $1, so the output should be 17.\n ```\n\"\"\"\ndef rocks(n):",
    "14": "Python 3\n\"\"\"\n\nGive a string of length $n-1$, consisting of characters '<' and '>' only. The $i$-th (1-indexed) character is the comparison result between the $i$-th element and the $i+1$-st element of the sequence. If the $i$-th character of the string is '<', then the $i$-th element of the sequence is less than the $i+1$-st element. If the $i$-th character of the string is '>', then the $i$-th element of the sequence is greater than the $i+1$-st element.\n\nFind two possible sequences consisting of $n$ distinct integers between $1$ and $n$, inclusive, each satisfying the comparison results, where the length of the Longest Increasing Subsequence of the first sequence is minimum possible, and the length of the Longest Increasing Subsequence of the second sequence is maximum possible.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nEach test case contains exactly one line, consisting of an integer and a string consisting of characters '<' and '>' only. The integer is $n$ ($2 \\le n \\le 2 \\cdot 10^5$), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is $n-1$.\n\nIt is guaranteed that the sum of all $n$ in all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print two lines with $n$ integers each. The first line is the sequence with the minimum length of the Longest Increasing Subsequence, and the second line is the sequence with the maximum length of the Longest Increasing Subsequence. If there are multiple answers, print any one of them. Each sequence should contain all integers between $1$ and $n$, inclusive, and should satisfy the comparison results.\n\nIt can be shown that at least one answer always exists.\n\n\n-----Example-----\nInput\n3\n3 <<\n7 >><>><\n5 >>><\n\nOutput\n1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n\n\n-----Note-----\n\nIn the first case, $1$ $2$ $3$ is the only possible answer.\n\nIn the second case, the shortest length of the LIS is $2$, and the longest length of the LIS is $3$. In the example of the maximum LIS sequence, $4$ '$3$' $1$ $7$ '$5$' $2$ '$6$' can be one of the possible LIS.\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nGildong recently learned how to find the longest increasing subsequence (LIS) in $O(n\\log{n})$ time for a sequence of length $n$. He wants to test himself if he can implement it correctly, but he couldn't find any online judges that would do it (even though there are actually many of them). So instead he's going to make a quiz for you about making permutations of $n$ distinct integers between $1$ and $n$, inclusive, to test his code with your output.\n\nThe quiz is as follows.\n\nGildong provides a string of length $n-1$, consisting of characters '<' and '>' only. The $i$-th (1-indexed) character is the comparison result between the $i$-th element and the $i+1$-st element of the sequence. If the $i$-th character of the string is '<', then the $i$-th element of the sequence is less than the $i+1$-st element. If the $i$-th character of the string is '>', then the $i$-th element of the sequence is greater than the $i+1$-st element.\n\nHe wants you to find two possible sequences (not necessarily distinct) consisting of $n$ distinct integers between $1$ and $n$, inclusive, each satisfying the comparison results, where the length of the LIS of the first sequence is minimum possible, and the length of the LIS of the second sequence is maximum possible.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nEach test case contains exactly one line, consisting of an integer and a string consisting of characters '<' and '>' only. The integer is $n$ ($2 \\le n \\le 2 \\cdot 10^5$), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is $n-1$.\n\nIt is guaranteed that the sum of all $n$ in all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print two lines with $n$ integers each. The first line is the sequence with the minimum length of the LIS, and the second line is the sequence with the maximum length of the LIS. If there are multiple answers, print any one of them. Each sequence should contain all integers between $1$ and $n$, inclusive, and should satisfy the comparison results.\n\nIt can be shown that at least one answer always exists.\n\n\n-----Example-----\nInput\n3\n3 <<\n7 >><>><\n5 >>><\n\nOutput\n1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n\n\n-----Note-----\n\nIn the first case, $1$ $2$ $3$ is the only possible answer.\n\nIn the second case, the shortest length of the LIS is $2$, and the longest length of the LIS is $3$. In the example of the maximum LIS sequence, $4$ '$3$' $1$ $7$ '$5$' $2$ '$6$' can be one of the possible LIS.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string.\n\nExample:\nInput: string_to_int_list(\"-1,2,3,4,5\")\nOutput: [-1,2,3,4,5]\n\"\"\"\ndef string_to_int_list(s):",
    "17": "Python 3\n\"\"\"\nGiven a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string, preserving the order.\n\nFor example, give the string \"-1,2,3,4,5\", the function string_to_int_list() should return [-1,2,3,4,5]\n\nPlease note that there can be one or more consecutive commas whithout numbers, like so: \"-1,-2,,,,,,3,4,5,,6\"\n\"\"\"\ndef string_to_int_list(s):",
    "18": "Python 3\n\"\"\"\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak. Consider only uppercase letters and spaces.\n\nExamples:\nInput:\ntoLeetSpeak(\"LEET\")\nOutput:\n\"1337\"\n\nInput:\nto_leet_speak(\"LEET\")\nOutput:\n\"1337\"\n\"\"\"\ndef to_leet_speak(str):",
    "19": "Python 3\n\"\"\"\n```if-not:rust\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak.\n```\n```if:rust\nYour task is to write a function `to_leet_speak` that converts a regular english sentence to Leetspeak.\n```\n\nMore about LeetSpeak You can read at wiki -> https://en.wikipedia.org/wiki/Leet\n\nConsider only uppercase letters (no lowercase letters, no numbers) and spaces.\n\nFor example:\n\n```if-not:rust\n~~~\ntoLeetSpeak(\"LEET\") returns \"1337\"\n~~~\n```\n```if:rust\n~~~\nto_leet_speak(\"LEET\") returns \"1337\"\n~~~\n```\n\nIn this kata we use a simple LeetSpeak dialect. Use this alphabet:\n\n```\n{\n  A : '@',\n  B : '8',\n  C : '(',\n  D : 'D',\n  E : '3',\n  F : 'F',\n  G : '6',\n  H : '#',\n  I : '!',\n  J : 'J',\n  K : 'K',\n  L : '1',\n  M : 'M',\n  N : 'N',\n  O : '0',\n  P : 'P',\n  Q : 'Q',\n  R : 'R',\n  S : '$',\n  T : '7',\n  U : 'U',\n  V : 'V',\n  W : 'W',\n  X : 'X',\n  Y : 'Y',\n  Z : '2'\n}\n```\n\"\"\"\ndef to_leet_speak(str):"
}