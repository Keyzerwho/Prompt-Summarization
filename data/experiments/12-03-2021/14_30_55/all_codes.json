{
    "0": "\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    min_sum = sum(abs(A[i] - A[i + k]) for i in range(n - k))\n    print(min_sum)\n",
    "1": "\n    n, k = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    ans = 10**9\n    for i in range(n - k):\n        ans = min(ans, abs(A[i] - A[i + k]))\n    print(ans)\n",
    "2": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(0)\n    ans = 0\n    for i in range(n):\n        if a[i] != a[i+1]:\n            ans += 1\n    print(ans)\n",
    "3": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        for j in range(i, n):\n            d[a[i] | a[j]] = 1\n    print(len(d))\n",
    "4": "\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return s2[i]\n\nprint(added_char(\"hello\", \"aaahello\"))\nprint(added_char(\"abcde\", \"2db2a2ec\"))\nprint(added_char(\"aabbcc\", \"aacccbbcc\"))",
    "5": "\n    return ''.join(set(s2) - set(s1))\n\nprint(added_char(\"hello\", \"aaahello\"))\nprint(added_char(\"abcde\", \"2db2a2ec\"))\nprint(added_char(\"aabbcc\", \"aacccbbcc\"))",
    "6": "\n    s = s.replace('_', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('?', '')\n    s = s.replace('!', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('-', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('*', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('%', '')\n    s = s.replace('$', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('!', '')\n    s = s.replace('`', '')\n    s = s.replace('~', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('|', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('*', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('%', '')\n    s = s.replace('$', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('!', '')\n    s = s.replace('`', '')\n    s = s.replace('~', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('|', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('*', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('%', '')\n    s = s.replace('$', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('!', '')\n    s = s.replace('`', '')\n    s =",
    "7": "\n    s = s.replace('_', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('?', '')\n    s = s.replace('!', '')\n    s = s.replace(' ', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\r', '')\n    s = s.replace('\\t', '')\n    s = s.replace('\\v', '')\n    s = s.replace('\\f', '')\n    s = s.replace('\\b', '')\n    s = s.replace('\\a', '')\n    s = s.replace('\\0', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('/', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('`', '')\n    s = s.replace('~', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('&', '')\n    s = s.replace('*', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('{', '')\n    s = s.replace('[', '')\n    s = s.replace('}', '')\n    s = s.replace(']', '')\n    s = s.replace('|', '')\n    s = s.replace(':', '')\n    s = s.replace(';', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('?', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('`', '')\n    s = s.replace('~', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('&', '')\n    s = s.replace('*', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('{', '')\n    s = s.replace('[', '')\n    s = s.replace('}', '')\n    s = s.replace(']', '')\n    s = s.replace('|', '')\n    s = s.replace(':', '')\n    s = s.replace(';', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('?', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('\"', '')\n    s = s.replace(\"'\", '')\n    s = s.replace('`', '')\n    s = s.replace('~', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('%', '')\n    s = s.replace('^', '')\n    s = s.replace('&', '')\n    s = s.replace('*",
    "8": "\n    return ['{}: {}'.format(i, line) for i, line in enumerate(lines, 1)]",
    "9": "\n    return ['{}: {}'.format(i, line) for i, line in enumerate(lines, 1)]",
    "10": "\n    ",
    "11": "\n    return {i: [x for x in range(1, i+1) if not i%x] for i in range(n, m+1)}",
    "12": "\n    return n * (n + 1) // 2\n\nprint(rocks(13))",
    "13": "\n    return n * (n + 1) // 2\n\nprint(rocks(13))",
    "14": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        l = [0]*n\n        for i in range(n-1):\n            if s[i] == '<':\n                l[i+1] = max(l[i], l[i+1])\n            else:\n                l[i+1] = l[i] + 1\n        for i in range(n-1, 0, -1):\n            if s[i-1] == '>':\n                l[i-1] = max(l[i-1], l[i])\n            else:\n                l[i-1] = l[i] + 1\n        print(*list(range(1, n+1)))\n        print(*l)\n",
    "15": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        string = input()\n        lis = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if string[i-1] == '>' and lis[j] + 1 > lis[i]:\n                    lis[i] = lis[j] + 1\n        print(' '.join(map(str, lis)))\n        lis = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if string[i-1] == '<' and lis[j] + 1 > lis[i]:\n                    lis[i] = lis[j] + 1\n        print(' '.join(map(str, lis)))\n",
    "16": "\n    return [int(x) for x in s.split(',')]",
    "17": "\n    return [int(x) for x in s.split(',') if x]",
    "18": "\n    leet = {'A': '@', 'B': '8', 'C': '(', 'D': 'D', 'E': '3', 'F': 'F', 'G': '6', 'H': '#', 'I': '!', 'J': 'J', 'K': 'K', 'L': '1', 'M': 'M', 'N': 'N', 'O': '0', 'P': 'P', 'Q': 'Q', 'R': 'R', 'S': '$', 'T': '7', 'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': '2'}\n    return ''.join([leet[c] if c in leet else c for c in str])\n\nprint(to_leet_speak(\"LEET\"))",
    "19": "\n    return str.translate(str.maketrans(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"@8(D3F6#!JK1MN0PQR57UV2WX\"))"
}