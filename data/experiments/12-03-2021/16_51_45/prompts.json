{
    "0": "Python 3\n\"\"\"\nMarmot brought Mole n ordered piles of worms such that i-th pile contains a_{i} worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a_1, worms in second pile are labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5), the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^3, a_1 + a_2 + ... + a_{n} \u2264 10^6), where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 \u2264 m \u2264 10^5), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q_1, q_2, ..., q_{m} (1 \u2264 q_{i} \u2264 a_1 + a_2 + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number q_{i} is.\n\n\n-----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIt is lunch time for Mole. His friend, Marmot, prepared him a nice game for lunch.\n\nMarmot brought Mole n ordered piles of worms such that i-th pile contains a_{i} worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a_1, worms in second pile are labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.\n\nPoor Mole asks for your help. For all juicy worms said by Marmot, tell Mole the correct answers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5), the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^3, a_1 + a_2 + ... + a_{n} \u2264 10^6), where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 \u2264 m \u2264 10^5), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q_1, q_2, ..., q_{m} (1 \u2264 q_{i} \u2264 a_1 + a_2 + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number q_{i} is.\n\n\n-----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\n\n\n-----Note-----\n\nFor the sample input:\n\n  The worms with labels from [1, 2] are in the first pile.  The worms with labels from [3, 9] are in the second pile.  The worms with labels from [10, 12] are in the third pile.  The worms with labels from [13, 16] are in the fourth pile.  The worms with labels from [17, 25] are in the fifth pile.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given a non-empty string s consisting of lowercase English letters. You have to pick exactly one non-empty substring of s and shift all its letters 'z' $\\rightarrow$ 'y' $\\rightarrow$ 'x' $\\rightarrow \\ldots \\rightarrow$ 'b' $\\rightarrow$ 'a' $\\rightarrow$ 'z'.\nWhat is the lexicographically minimum string that can be obtained from s by performing this shift exactly once?\n\n\n-----Input-----\n\nThe only line of the input contains the string s (1 \u2264 |s| \u2264 100 000) consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the lexicographically minimum string that can be obtained from s by shifting letters of exactly one non-empty substring.\n\n\n-----Examples-----\nInput\ncodeforces\n\nOutput\nbncdenqbdr\n\nInput\nabacaba\n\nOutput\naaacaba\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are given a non-empty string s consisting of lowercase English letters. You have to pick exactly one non-empty substring of s and shift all its letters 'z' $\\rightarrow$ 'y' $\\rightarrow$ 'x' $\\rightarrow \\ldots \\rightarrow$ 'b' $\\rightarrow$ 'a' $\\rightarrow$ 'z'. In other words, each character is replaced with the previous character of English alphabet and 'a' is replaced with 'z'.\n\nWhat is the lexicographically minimum string that can be obtained from s by performing this shift exactly once?\n\n\n-----Input-----\n\nThe only line of the input contains the string s (1 \u2264 |s| \u2264 100 000) consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the lexicographically minimum string that can be obtained from s by shifting letters of exactly one non-empty substring.\n\n\n-----Examples-----\nInput\ncodeforces\n\nOutput\nbncdenqbdr\n\nInput\nabacaba\n\nOutput\naaacaba\n\n\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou have a bracket sequence s_1, s_2, ..., s_{n}, or, in other words, a string s of length n, consisting of characters \"(\" and \")\".\n\nYou need to answer m queries, each of them is described by two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n). The answer to the i-th query is the length of the maximum correct bracket subsequence of sequence s_{l}_{i}, s_{l}_{i} + 1, ..., s_{r}_{i}.\n\n-----Input-----\n\nThe first line contains a sequence of characters s_1, s_2, ..., s_{n} (1 \u2264 n \u2264 10^6) without any spaces. Each character is either a \"(\" or a \")\". The second line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Each of the next m lines contains a pair of integers. The i-th line contains integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the description of the i-th query.\n\n\n-----Output-----\n\nPrint the answer to each question on a single line. Print the answers in the order they go in the input.\n\n\n-----Examples-----\nInput\n())(())(())(\n7\n1 1\n2 3\n1 2\n1 12\n8 12\n5 11\n2 10\n\nOutput\n0\n0\n2\n10\n4\n6\n6\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nSereja has a bracket sequence s_1, s_2, ..., s_{n}, or, in other words, a string s of length n, consisting of characters \"(\" and \")\".\n\nSereja needs to answer m queries, each of them is described by two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n). The answer to the i-th query is the length of the maximum correct bracket subsequence of sequence s_{l}_{i}, s_{l}_{i} + 1, ..., s_{r}_{i}. Help Sereja answer all queries.\n\nYou can find the definitions for a subsequence and a correct bracket sequence in the notes.\n\n\n-----Input-----\n\nThe first line contains a sequence of characters s_1, s_2, ..., s_{n} (1 \u2264 n \u2264 10^6) without any spaces. Each character is either a \"(\" or a \")\". The second line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Each of the next m lines contains a pair of integers. The i-th line contains integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the description of the i-th query.\n\n\n-----Output-----\n\nPrint the answer to each question on a single line. Print the answers in the order they go in the input.\n\n\n-----Examples-----\nInput\n())(())(())(\n7\n1 1\n2 3\n1 2\n1 12\n8 12\n5 11\n2 10\n\nOutput\n0\n0\n2\n10\n4\n6\n6\n\n\n\n-----Note-----\n\nA subsequence of length |x| of string s = s_1s_2... s_{|}s| (where |s| is the length of string s) is string x = s_{k}_1s_{k}_2... s_{k}_{|}x| (1 \u2264 k_1 < k_2 < ... < k_{|}x| \u2264 |s|).\n\nA correct bracket sequence is a bracket sequence that can be transformed into a correct aryphmetic expression by inserting characters \"1\" and \"+\" between the characters of the string. For example, bracket sequences \"()()\", \"(())\" are correct (the resulting expressions \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.\n\nFor the third query required sequence will be \u00ab()\u00bb.\n\nFor the fourth query required sequence will be \u00ab()(())(())\u00bb.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given a rectangular board of dimensions R \u00d7 C, filled with numbers. Each integer i from 1 through N is written twice, at the coordinates (x_{i,1},y_{i,1}) and (x_{i,2},y_{i,2}).\nThe objective is to draw a curve connecting the pair of points where the same integer is written, for every integer from 1 through N.\nCurves may not go outside the board or cross each other.\nDetermine whether this is possible.\n\n-----Constraints-----\n - 1 \u2264 R,C \u2264 10^8\n - 1 \u2264 N \u2264 10^5\n - 0 \u2264 x_{i,1},x_{i,2} \u2264 R(1 \u2264 i \u2264 N)\n - 0 \u2264 y_{i,1},y_{i,2} \u2264 C(1 \u2264 i \u2264 N)\n - All given points are distinct.\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nR C N\nx_{1,1} y_{1,1} x_{1,2} y_{1,2}\n:\nx_{N,1} y_{N,1} x_{N,2} y_{N,2}\n\n-----Output-----\nPrint YES if the objective is achievable; print NO otherwise.\n\n-----Sample Input-----\n4 2 3\n0 1 3 1\n1 1 4 1\n2 0 2 2\n\n-----Sample Output-----\nYES\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nSnuke is playing a puzzle game.\nIn this game, you are given a rectangular board of dimensions R \u00d7 C, filled with numbers. Each integer i from 1 through N is written twice, at the coordinates (x_{i,1},y_{i,1}) and (x_{i,2},y_{i,2}).\nThe objective is to draw a curve connecting the pair of points where the same integer is written, for every integer from 1 through N.\nHere, the curves may not go outside the board or cross each other.\nDetermine whether this is possible.\n\n-----Constraints-----\n - 1 \u2264 R,C \u2264 10^8\n - 1 \u2264 N \u2264 10^5\n - 0 \u2264 x_{i,1},x_{i,2} \u2264 R(1 \u2264 i \u2264 N)\n - 0 \u2264 y_{i,1},y_{i,2} \u2264 C(1 \u2264 i \u2264 N)\n - All given points are distinct.\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nR C N\nx_{1,1} y_{1,1} x_{1,2} y_{1,2}\n:\nx_{N,1} y_{N,1} x_{N,2} y_{N,2}\n\n-----Output-----\nPrint YES if the objective is achievable; print NO otherwise.\n\n-----Sample Input-----\n4 2 3\n0 1 3 1\n1 1 4 1\n2 0 2 2\n\n-----Sample Output-----\nYES\n\n\nThe above figure shows a possible solution.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nFind the sum of the first n elements in the Recam\u00e1n Sequence. 0 <= n <= 2,500,000.\n\nThe Recam\u00e1n sequence is formed using the next formula:\n* We start with `0`\n* At each step `i`, we subtract `i` from the previous number\n* If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence\n* Otherwise the `i`th element of the sequence will be previous number plus `i`\n\nThe beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:  \n0) `0` <- we start with `0`  \n1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`  \n2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`  \n3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`  \n4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it\n\nExamples:\nrec(0) == 0\nrec(1) == 0\nrec(2) == 1\nrec(3) == 4\nrec(4) == 10\nrec(5) == 12\n\"\"\"\ndef rec(x):",
    "9": "Python 3\n\"\"\"\n## Task\n\nFind the sum of the first `n` elements in the Recam\u00e1n Sequence.\n\nInput range:\n\n```python\n1000 tests\n0 <= n <= 2,500,000\n```\n\n___\n\n## Sequence\n\nThe sequence is formed using the next formula:\n* We start with `0`\n* At each step `i`, we subtract `i` from the previous number\n* If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence\n* Otherwise the `i`th element of the sequence will be previous number plus `i`\n\nThe beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:  \n0) `0` <- we start with `0`  \n1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`  \n2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`  \n3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`  \n4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it\n\n___\n\n## Examples\n\n```\nrec(0) == 0\nrec(1) == 0\nrec(2) == 1\nrec(3) == 4\nrec(4) == 10\nrec(5) == 12\n```\n\"\"\"\ndef rec(x):",
    "10": "Python 3\n\"\"\"\nYou are given a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string, preserving the order.\n\nExample:\nInput: string_to_int_list(\"-1,2,3,4,5\")\nOutput: [-1,2,3,4,5]\n\"\"\"\ndef string_to_int_list(s):",
    "11": "Python 3\n\"\"\"\nGiven a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string, preserving the order.\n\nFor example, give the string \"-1,2,3,4,5\", the function string_to_int_list() should return [-1,2,3,4,5]\n\nPlease note that there can be one or more consecutive commas whithout numbers, like so: \"-1,-2,,,,,,3,4,5,,6\"\n\"\"\"\ndef string_to_int_list(s):",
    "12": "Python 3\n\"\"\"\nGiven a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.\n\nExamples:\nInput:\nnumber = 'G'\nOutput:\n[\"A + G\", \"B + F\", \"C + E\", \"D + D\"]\nExplanation:\nTranslating this into the decimal numeral system we get: number = 6, so it is [\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"].\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' \u2264 number \u2264 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"\ndef new_numeral_system(number):",
    "13": "Python 3\n\"\"\"\n# Task\n Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - `A for 0, B for 1, and so on`.\n\n The teacher assigned you the following numeral system exercise: given a one-digit `number`, you should find all unordered pairs of one-digit numbers whose values add up to the `number`.\n\n# Example\n\n For `number = 'G'`, the output should be `[\"A + G\", \"B + F\", \"C + E\", \"D + D\"]`\n\n Translating this into the decimal numeral system we get: number = 6, so it is `[\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"]`.\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' \u2264 number \u2264 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"\ndef new_numeral_system(number):",
    "14": "Python 3\n\"\"\"\nA entity can have some specialization: A or B. She/he can have no specialization, but can't have both at the same time.\n\nYou need to form a team. So the team is considered perfect if it includes at least one A, at least one B and it consists of exactly three entities.\n\nYou know that $c$ of the students are specialised in A, $m$ are in B and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both specialized in A and B at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 A, 1 B and 1 without specialization;  all three teams consist of 1 A and 2 B;  no teams can be formed;  no teams can be formed;  one team consists of 1 A, 1 B and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 A, 1 B and 1 without specialization, one consists of 2 A and 1 B and one consists of 1 A and 2 B.\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that $c$ of your students are coders, $m$ are mathematicians and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 coder, 1 mathematician and 1 without specialization;  all three teams consist of 1 coder and 2 mathematicians;  no teams can be formed;  no teams can be formed;  one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n$f(n) = \\text{product of non-zero digits of} n$\n\n$g(n) = \\left\\{\\begin{array}{ll}{n} & {\\text{if} n < 10} \\\\{g(f(n))} & {\\text{otherwise}} \\end{array} \\right.$ \n\nYou need to process Q queries. In each query, you will be given three integers l, r and k. You need to print the number of integers x between l and r inclusive, such that g(x) = k. \n\n\n-----Input-----\n\nThe first line of the input contains an integer Q (1 \u2264 Q \u2264 2 \u00d7 10^5) representing the number of queries. \n\nQ lines follow, each of which contains 3 integers l, r and k (1 \u2264 l \u2264 r \u2264 10^6, 1 \u2264 k \u2264 9).\n\n\n-----Output-----\n\nFor each query, print a single line containing the answer for that query.\n\n\n-----Examples-----\nInput\n4\n22 73 9\n45 64 6\n47 55 7\n2 62 4\n\nOutput\n1\n4\n0\n8\n\nInput\n4\n82 94 6\n56 67 4\n28 59 9\n39 74 4\n\nOutput\n3\n1\n1\n5\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nLet us define two functions f and g on positive integer numbers.  $f(n) = \\text{product of non-zero digits of} n$\n\n$g(n) = \\left\\{\\begin{array}{ll}{n} & {\\text{if} n < 10} \\\\{g(f(n))} & {\\text{otherwise}} \\end{array} \\right.$ \n\nYou need to process Q queries. In each query, you will be given three integers l, r and k. You need to print the number of integers x between l and r inclusive, such that g(x) = k. \n\n\n-----Input-----\n\nThe first line of the input contains an integer Q (1 \u2264 Q \u2264 2 \u00d7 10^5) representing the number of queries. \n\nQ lines follow, each of which contains 3 integers l, r and k (1 \u2264 l \u2264 r \u2264 10^6, 1 \u2264 k \u2264 9).\n\n\n-----Output-----\n\nFor each query, print a single line containing the answer for that query.\n\n\n-----Examples-----\nInput\n4\n22 73 9\n45 64 6\n47 55 7\n2 62 4\n\nOutput\n1\n4\n0\n8\n\nInput\n4\n82 94 6\n56 67 4\n28 59 9\n39 74 4\n\nOutput\n3\n1\n1\n5\n\n\n\n-----Note-----\n\nIn the first example:  g(33) = 9 as g(33) = g(3 \u00d7 3) = g(9) = 9  g(47) = g(48) = g(60) = g(61) = 6  There are no such integers between 47 and 55.  g(4) = g(14) = g(22) = g(27) = g(39) = g(40) = g(41) = g(58) = 4\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n# Task\nYou are given some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.\n\n# Example\n\nInput: `V = [2, 3, 7, 4]`\nOutput: `1`\nExplanation: There is only `(2, 3, 4)` can form a triangle.\n\nInput: `V = [5, 6, 7, 8]`\nOutput: `4`\nExplanation: `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` \n\n# Input/Output\n\n - `[input]` integer array `V`\n\n stick lengths\n \n `3 <= V.length <= 100`\n \n `0 < V[i] <=100`\n\n\n - `[output]` an integer\n\n number of ways we can choose 3 sticks to form a triangle.\n\"\"\"\ndef counting_triangles(V):",
    "19": "Python 3\n\"\"\"\n# Task\nGiven some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.\n\n# Example\n\n For `V = [2, 3, 7, 4]`, the result should be `1`.\n\n There is only `(2, 3, 4)` can form a triangle.\n \n For `V = [5, 6, 7, 8]`, the result should be `4`.\n \n `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` \n\n# Input/Output\n\n\n - `[input]` integer array `V`\n\n stick lengths\n \n `3 <= V.length <= 100`\n \n `0 < V[i] <=100`\n\n\n - `[output]` an integer\n\n number of ways we can choose 3 sticks to form a triangle.\n\"\"\"\ndef counting_triangles(V):"
}