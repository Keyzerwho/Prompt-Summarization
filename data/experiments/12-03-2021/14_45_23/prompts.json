{
    "0": "Python 3\n\"\"\"\nYou are given following inputs: original string S, starting index i, source word x and target word y. \n\nIf x starts at position i in S, you need to replace that occurrence of x with y.\n\nConsider:\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "1": "Python 3\n\"\"\"\nTo some string S, we will perform some\u00a0replacement\u00a0operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word\u00a0x\u00a0and a target word\u00a0y.\u00a0 The rule is that if x\u00a0starts at position i\u00a0in the original string S, then we will replace that occurrence of\u00a0x\u00a0with\u00a0y.\u00a0 If not, we do nothing.\nFor example, if we have\u00a0S = \"abcd\"\u00a0and we have some replacement operation\u00a0i = 2, x = \"cd\", y = \"ffff\", then because\u00a0\"cd\"\u00a0starts at position 2\u00a0in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation\u00a0i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string\u00a0S[2] = 'c', which doesn't match\u00a0x[0] = 'e'.\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "2": "Python 3\n\"\"\"\nYou are given glasses stacked in a pyramid.\nYou need to output how full the j-th glass in the i-th row is when champagne is poured in the first glass at the top.\n\nGlasses poured\u00a0will\u00a0be\u00a0in the range of [0, 10 ^ 9].\ni and j will be in the range of [0, 99].\n\nExample 1:\nInput: poured = 1, query_glass = 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). \nThere will be no excess liquid so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput: poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. \nThe glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\"\"\"\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:",
    "3": "Python 3\n\"\"\"\nWe stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.\u00a0 \nEach glass holds one cup (250ml) of champagne.\n\nThen, some champagne is poured in the first glass at the top.\u00a0 \nWhen the top most glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 \nWhen those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has it's excess champagne fall on the floor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full.\u00a0 \nAfter two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 \nAfter three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 \nAfter four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\n\n\nNow after pouring some non-negative integer cups of champagne, return how full the j-th glass in the i-th row is (both i and j are 0 indexed.)\n\n\u00a0\n\n\nExample 1:\nInput: poured = 1, query_glass = 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput: poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\n\n\u00a0\n\nNote:\n\n\n       poured\u00a0will\u00a0be\u00a0in the range of [0, 10 ^ 9].\n       query_glass and query_row will be in the range of [0, 99].\n\"\"\"\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:",
    "4": "Python 3\n\"\"\"\nYou are given a list of words, you need to output a sorted list. Comparison should be case sensitive.\n\"\"\"\ndef find_children(santas_list, children):",
    "5": "Python 3\n\"\"\"\nChristmas is coming, and Santa has a long list to go through, to find who deserves presents for the big day. Go through a list of children, and return a list containing every child who appeared on Santa's list. Do not add any child more than once. Output should be sorted.\n~~~if:java\nFor java, use Lists.\n~~~\n\nComparison should be case sensitive and the returned list should contain only one copy of each name: `\"Sam\"` and `\"sam\"` are different, but `\"sAm\"` and `\"sAm\"` are not.\n\n\n\"\"\"\ndef find_children(santas_list, children):",
    "6": "Python 3\n\"\"\"\nYou have to apply + and - symbol between the given list non-negative integers to achieve the target S.\n\nIn how many ways are there to assign symbols to make sum of integers equal to target S.  \n\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n\n\n\"\"\"\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:",
    "7": "Python 3\n\"\"\"\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n \n\nFind out how many ways to assign symbols to make sum of integers equal to target S.  \n\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n\n\n\nNote:\n\nThe length of the given array is positive and will not exceed 20. \nThe sum of elements in the given array will not exceed 1000.\nYour output answer is guaranteed to be fitted in a 32-bit integer.\n\"\"\"\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:",
    "8": "Python 3\n\"\"\"\n\nSet A containing n positive different integers a_{i} are given. \n\nCreate a set B containing n different integers b_{j} such that all n^2 integers that can be obtained by summing up a_{i} and b_{j} for all possible pairs of i and j are different. \n\nAll numbers in A and B are from 1 to 10^6.\n\n\n\n\n-----Input-----\n\nThe first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers a_{i}\u00a0\u2014 the elements of A (1 \u2264 a_{i} \u2264 10^6). \n\n\n-----Output-----\n\nFor each test first print the answer:   NO, if task is impossible to solve, there is no way to create the required set B.  YES, if there is the way to create the required set. In this case the second line must contain n different positive integers b_{j}\u00a0\u2014 elements of B (1 \u2264 b_{j} \u2264 10^6). If there are several possible sets, output any of them. \n\n\n-----Example-----\nInput\n3\n3\n1 10 100\n1\n1\n2\n2 4\n\nOutput\nYES\n1 2 3 \nYES\n1 \nYES\n1 2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nMasha and Grisha like studying sets of positive integers.\n\nOne day Grisha has written a set A containing n different integers a_{i} on a blackboard. Now he asks Masha to create a set B containing n different integers b_{j} such that all n^2 integers that can be obtained by summing up a_{i} and b_{j} for all possible pairs of i and j are different.\n\nBoth Masha and Grisha don't like big numbers, so all numbers in A are from 1 to 10^6, and all numbers in B must also be in the same range.\n\nHelp Masha to create the set B that satisfies Grisha's requirement.\n\n\n-----Input-----\n\nInput data contains multiple test cases. The first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers a_{i}\u00a0\u2014 the elements of A (1 \u2264 a_{i} \u2264 10^6). \n\n\n-----Output-----\n\nFor each test first print the answer:   NO, if Masha's task is impossible to solve, there is no way to create the required set B.  YES, if there is the way to create the required set. In this case the second line must contain n different positive integers b_{j}\u00a0\u2014 elements of B (1 \u2264 b_{j} \u2264 10^6). If there are several possible sets, output any of them. \n\n\n-----Example-----\nInput\n3\n3\n1 10 100\n1\n1\n2\n2 4\n\nOutput\nYES\n1 2 3 \nYES\n1 \nYES\n1 2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nGiven `num`. Find the total count of existing consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"\ndef consecutive_sum(num):",
    "11": "Python 3\n\"\"\"\nLet's say we have a number, `num`. Find the number of values of `n` such that: there exists `n` consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"\ndef consecutive_sum(num):",
    "12": "Python 3\n\"\"\"\nFind the remainder when an integer A is divided by an integer B.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then T lines follow, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, find the remainder when A is divided by  B, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n40 15\n\nOutput\n1\n100\n10\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nWrite a program to find the remainder when an integer A is divided by an integer B.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then T lines follow, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, find the remainder when A is divided by  B, and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n40 15\n\nOutput\n1\n100\n10\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nyou are given an array of numbers. Find the minimum number of indexes in the array need to be reordered such that all the elements in array are in non-decreasing order \n\nExample 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 we have 4 vs 1 so we have to move this element.\nOn index 4 we have 1 vs 3 so we have to move this element.\nOn index 5 we have 3 vs 4 so we have to move this element.\n\nExample 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\n\nExample 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n\"\"\"\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:",
    "15": "Python 3\n\"\"\"\nStudents are asked to stand in non-decreasing order of heights for an annual photo.\nReturn the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.\nNotice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students\u00a0remain on their seats.\n\u00a0\nExample 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 (0-based) we have 4 vs 1 so we have to move this student.\nOn index 4 (0-based) we have 1 vs 3 so we have to move this student.\nOn index 5 (0-based) we have 3 vs 4 so we have to move this student.\n\nExample 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\n\nExample 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n\"\"\"\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:",
    "16": "Python 3\n\"\"\"\nYou are given N people to be split into two groups such that given dislikes[i] = [a, b], a and b should be in different groups.\nYou need to return true if such split is possible.\n\nExample 1:\nInput: N = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: group1 [1,4], group2 [2,3]\n\n\nExample 2:\nInput: N = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\n\n\nExample 3:\nInput: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\nOutput: false\n\"\"\"\nclass Solution:\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:",
    "17": "Python 3\n\"\"\"\nGiven a set of N\u00a0people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.\nEach person may dislike some other people, and they should not go into the same group.\u00a0\nFormally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.\nReturn true\u00a0if and only if it is possible to split everyone into two groups in this way.\n\n\nExample 1:\nInput: N = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: group1 [1,4], group2 [2,3]\n\n\nExample 2:\nInput: N = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\n\n\nExample 3:\nInput: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\nOutput: false\n\n\n\n\n\u00a0\nConstraints:\n\n1 <= N <= 2000\n0 <= dislikes.length <= 10000\ndislikes[i].length == 2\n1 <= dislikes[i][j] <= N\ndislikes[i][0] < dislikes[i][1]\nThere does not exist i != j for which dislikes[i] == dislikes[j].\n\"\"\"\nclass Solution:\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:",
    "18": "Python 3\n\"\"\"\nYou are given a non-empty string s consisting of lowercase English letters. You have to pick exactly one non-empty substring of s and replace each character with the previous character of English alphabet and 'a' is replaced with 'z'.\n\nWhat is the lexicographically minimum string that can be obtained from s by performing this shift exactly once?\n\n\n-----Input-----\n\nThe only line of the input contains the string s (1 \u2264 |s| \u2264 100 000) consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the lexicographically minimum string that can be obtained from s by shifting letters of exactly one non-empty substring.\n\n\n-----Examples-----\nInput\ncodeforces\n\nOutput\nbncdenqbdr\n\nInput\nabacaba\n\nOutput\naaacaba\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a non-empty string s consisting of lowercase English letters. You have to pick exactly one non-empty substring of s and shift all its letters 'z' $\\rightarrow$ 'y' $\\rightarrow$ 'x' $\\rightarrow \\ldots \\rightarrow$ 'b' $\\rightarrow$ 'a' $\\rightarrow$ 'z'. In other words, each character is replaced with the previous character of English alphabet and 'a' is replaced with 'z'.\n\nWhat is the lexicographically minimum string that can be obtained from s by performing this shift exactly once?\n\n\n-----Input-----\n\nThe only line of the input contains the string s (1 \u2264 |s| \u2264 100 000) consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint the lexicographically minimum string that can be obtained from s by shifting letters of exactly one non-empty substring.\n\n\n-----Examples-----\nInput\ncodeforces\n\nOutput\nbncdenqbdr\n\nInput\nabacaba\n\nOutput\naaacaba\n\n\n\"\"\"\ndef code():"
}