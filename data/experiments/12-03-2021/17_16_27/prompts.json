{
    "0": "Python 3\n\"\"\"\nYou are  given a stock of  integer price S and a number K . You can change the number $S$ at most $K$ times\nIn order to raise the price of stock and now cash it for benefits\nFind the largest price at which you can sell the stock in order to maximize profit. \n\n-----Input:-----\n- First line will contain $S$ and  $K$ , the price of the stock and the number K \n\n-----Output:-----\nPrint the largest profit  you can make in a single line.\n\n-----Constraints-----\n- S can take value upto 10^18\nNOTE: use 64 int number to fit range\n- K can take value from [0.. 9]\n\n-----Sample Input:-----\n4483 2\n\n-----Sample Output:-----\n9983\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\n$Harshad$ $Mehta$ is planning  a new scam with the stocks he is given a stock of  integer price S and a number K . $harshad$ has got the power to change the number $S$ at most $K$ times\nIn order to raise the price of stock and now cash it for his benefits\nFind the largest price at which $harshad$ can sell the stock in order to maximize his profit \n\n-----Input:-----\n- First line will contain $S$ and  $K$ , the price of the stock and the number K \n\n-----Output:-----\nPrint the largest profit  he can make in a single line.\n\n-----Constraints-----\n- S can take value upto 10^18\nNOTE: use 64 int number to fit range\n- K can take value from [0.. 9]\n\n-----Sample Input:-----\n4483 2\n\n-----Sample Output:-----\n9983\n\n-----EXPLANATION:-----\nFirst two digits of the number are changed to get the required number.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given an integer, take the average of each pair of consecutive digits. Repeat this process until you have a single integer, then return that integer. If the average of two digits is not an integer, round the result up.\n\nExample 1:\nInput: digitsAverage(246)\nOutput: 4\n\nExample 2:\nInput: digitsAverage(89)\nOutputL 9\n\"\"\"\ndef digits_average(input):",
    "3": "Python 3\n\"\"\"\nGiven an integer, take the (mean) average of each pair of consecutive digits. Repeat this process until you have a single integer, then return that integer. e.g.\n\nNote: if the average of two digits is not an integer, round the result **up** (e.g. the average of 8 and 9 will be 9)\n\n## Examples\n\n```\ndigitsAverage(246)  ==>  4\n\noriginal: 2   4   6\n           \\ / \\ /\n1st iter:   3   5\n             \\ /\n2nd iter:     4\n\n\ndigitsAverage(89)  ==>  9\n\noriginal: 8   9\n           \\ /\n1st iter:   9\n```\n\np.s. for a bigger challenge, check out the [one line version](https://www.codewars.com/kata/one-line-task-digits-average) of this kata by myjinxin2015!\n\"\"\"\ndef digits_average(input):",
    "4": "Python 3\n\"\"\"\n`N` candles are placed in a row, some of them are initially lit. For each candle from the 1st to the Nth the following algorithm is applied: if the observed candle is lit then states of this candle and all candles before it are changed to the opposite. Which candles will remain lit after applying the algorithm to all candles in the order they are placed in the line?\n\n# Example\n\n For `a = [1, 1, 1, 1, 1]`, the output should be `[0, 1, 0, 1, 0].`\n \n For `a = [0, 0]`, the output should be `[0, 0].`\n\n# Input/Output\n\n - `[input]` integer array `a`\n\n     Initial situation - array of zeros and ones of length N, 1 means that the corresponding candle is lit.\n\n    Constraints: `2 \u2264 a.length \u2264 5000.`\n\n - `[output]` an integer array\n\n    Situation after applying the algorithm - array in the same format as input with the same length.\n\"\"\"\ndef switch_lights(a):",
    "5": "Python 3\n\"\"\"\n# Task\n `N` candles are placed in a row, some of them are initially lit. For each candle from the 1st to the Nth the following algorithm is applied: if the observed candle is lit then states of this candle and all candles before it are changed to the opposite. Which candles will remain lit after applying the algorithm to all candles in the order they are placed in the line?\n\n# Example\n\n For `a = [1, 1, 1, 1, 1]`, the output should be `[0, 1, 0, 1, 0].`\n\n Check out the image below for better understanding:\n \n \n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/switchLights/img/example.png?_tm=1484040239470)\n \n \n \n For `a = [0, 0]`, the output should be `[0, 0].`\n\n The candles are not initially lit, so their states are not altered by the algorithm.\n\n# Input/Output\n\n - `[input]` integer array `a`\n\n     Initial situation - array of zeros and ones of length N, 1 means that the corresponding candle is lit.\n\n    Constraints: `2 \u2264 a.length \u2264 5000.`\n\n - `[output]` an integer array\n\n    Situation after applying the algorithm - array in the same format as input with the same length.\n\"\"\"\ndef switch_lights(a):",
    "6": "Python 3\n\"\"\"\nInitially, you have one stick and want to craft $k$ torches. One torch can be crafted using one stick and one coal.\n\nYou can trade $1$ stick for $x$ sticks or $y$ sticks for $1$ coal. \n\nYou can trade any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\nYou have to answer $t$ independent test cases.\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains three integers $x$, $y$ and $k$ ($2 \\le x \\le 10^9$; $1 \\le y, k \\le 10^9$) \u2014 the number of sticks you can buy with one stick, the number of sticks required to buy one coal and the number of torches you need, respectively.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\n\n-----Example-----\nInput\n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput\n14\n33\n25\n2000000003\n1000000001999999999\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are playing a very popular game called Cubecraft. Initially, you have one stick and want to craft $k$ torches. One torch can be crafted using one stick and one coal.\n\nHopefully, you've met a very handsome wandering trader who has two trade offers:  exchange $1$ stick for $x$ sticks (you lose $1$ stick and gain $x$ sticks).  exchange $y$ sticks for $1$ coal (you lose $y$ sticks and gain $1$ coal). \n\nDuring one trade, you can use only one of these two trade offers. You can use each trade offer any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains three integers $x$, $y$ and $k$ ($2 \\le x \\le 10^9$; $1 \\le y, k \\le 10^9$) \u2014 the number of sticks you can buy with one stick, the number of sticks required to buy one coal and the number of torches you need, respectively.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of trades you need to craft at least $k$ torches. The answer always exists under the given constraints.\n\n\n-----Example-----\nInput\n5\n2 1 5\n42 13 24\n12 11 12\n1000000000 1000000000 1000000000\n2 1000000000 1000000000\n\nOutput\n14\n33\n25\n2000000003\n1000000001999999999\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nWrite a program to check for a given unweighted, undirected graph whether it's a tree topology or not.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given an unweighted, undirected graph. Write a program to check if it's a tree topology.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three same added characters somewhere in the string. Write a function that returns the added character.\n\nExamples:\nInput:\nstring1 = \"hello\"\nstring2 = \"aaahello\"\nOutput:\n'a'\n\nInput:\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\nOutput:\n'2'\n\nInput:\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\nOutput:\n'c'\n\"\"\"\ndef added_char(s1, s2):",
    "11": "Python 3\n\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three added characters somewhere in the string (three same characters),\n\nWrite a function that returns the added character\n\n### E.g\n\n```\nstring1 = \"hello\"\nstring2 = \"aaahello\"\n\n// => 'a'\n```\n\nThe above is just an example; the characters could be anywhere in the string and string2 is actually **shuffled**.\n\n### Another example\n\n```\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\n\n// => '2'\n```\n\nNote that the added character could also exist in the original string\n\n\n```\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\n\n// => 'c'\n```\n\nYou can assume that string2 will aways be larger than string1, and there will always be three added characters in string2.\n\n```if:c\nWrite the function `added_char()` that takes two strings and return the added character as described above.\n```\n\n```if:javascript\nWrite the function `addedChar()` that takes two strings and return the added character as described above.\n```\n\"\"\"\ndef added_char(s1, s2):",
    "12": "Python 3\n\"\"\"\nYou are given two integers X and d.\n\nYou should construct an array such that, removing all non-empty subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d from the set of all\nsubsequences will give you X subsequences.\nAll the numbers in the final array should be positive integers less than 10^18. \n\nNote the number of elements in the output array should not be more than 10^4. If no answer is possible, print  - 1.\n\nIn the output of the first example case, the remaining subsequences after\nremoving those with Maximum_element_of_the_subsequence  -\nMinimum_element_of_subsequence  \u2265 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50],\n[7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50,\n7, 15, 6, 100] is valid.  \n\nSimilarly, in the output of the second example case, the remaining\nsub-sequences after removing those with Maximum_element_of_the_subsequence  -\nMinimum_element_of_subsequence  \u2265 2 are [10], [100], [1000], [10000]. There are\n4 of them. Hence, the array [10, 100, 1000, 10000] is valid.\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nPikachu had an array with him. He wrote down all the non-empty subsequences of the array on paper. Note that an array of size n has 2^{n} - 1 non-empty subsequences in it. \n\nPikachu being mischievous as he always is, removed all the subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d\n\nPikachu was finally left with X subsequences. \n\nHowever, he lost the initial array he had, and now is in serious trouble. He still remembers the numbers X and d. He now wants you to construct any such array which will satisfy the above conditions. All the numbers in the final array should be positive integers less than 10^18. \n\nNote the number of elements in the output array should not be more than 10^4. If no answer is possible, print  - 1.\n\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\n-----Note-----\n\nIn the output of the first example case, the remaining subsequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50], [7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50, 7, 15, 6, 100] is valid.\n\nSimilarly, in the output of the second example case, the remaining sub-sequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 2 are [10], [100], [1000], [10000]. There are 4 of them. Hence, the array [10, 100, 1000, 10000] is valid.\n\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a chess board of $N*N$. You have to find the number of squares of odd side length of the given chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nChef has recently been playing a lot of chess in preparation for the ICCT (International Chef Chess Tournament).\nSince putting in long hours is not an easy task, Chef's mind wanders elsewhere. He starts counting the number of squares with odd side length on his chessboard..\nHowever, Chef is not satisfied. He wants to know the number of squares of odd side length on a generic $N*N$ chessboard.\n\n-----Input:-----\n- The first line will contain a single integer $T$, the number of test cases.\n- The next $T$ lines will have a single integer $N$, the size of the chess board.\n\n-----Output:-----\nFor each test case, print a integer denoting the number of squares with odd length.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq N \\leq 1000$\n\n-----Sample Input:-----\n2\n3\n8\n\n-----Sample Output:-----\n10\n120\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given $R$ rows and $C$ columns of a matrix. Calculate the total number in matrix. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are the principal of the Cake school in chefland and today is your birthday. You want to treat each of the children with a small cupcake which is made by you. But there is a problem, You don't know how many students are present today.\nThe students have gathered of the morning assembly in $R$ rows and $C$ columns. Now you have to calculate how many cakes you have to make such that each child gets a cupcake. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou will be given a number and your task is to return the nth fibonacci string.\n\n\nExamples:\nInput:\nsolve(2)\nOutput:\n'010'\n\nInput:\nsolve(3)\nOutput:\n'01001'\n\n\"\"\"\ndef solve(n):",
    "19": "Python 3\n\"\"\"\nGiven that \n```\nf0 = '0'\nf1 = '01'\nf2 = '010' = f1 + f0\nf3 = '01001' = f2 + f1\n```\n\nYou will be given a number and your task is to return the `nth` fibonacci string. For example:\n\n```\nsolve(2) = '010'\nsolve(3) = '01001'\n```\n\nMore examples in test cases. Good luck!\n\nIf you like sequence Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"\ndef solve(n):"
}