{
    "id": "cmpl-4B8xXMhsB4hmISkMsEenIVtDhimeX",
    "object": "text_completion",
    "created": 1638561395,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"berhampore\" in s.lower():\n            if \"serampore\" in s.lower():\n                print(\"Both\")\n            else:\n                print(\"GCETTB\")\n        elif \"serampore\" in s.lower():\n            print(\"GCETTS\")\n        else:\n            print(\"Others\")\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"berhampore\" in s.lower():\n            print(\"GCETTB\")\n        elif \"serampore\" in s.lower():\n            print(\"GCETTS\")\n        else:\n            print(\"Others\")\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    g = [int(i) for i in input().split()]\n    if max(b) > min(g):\n        print(-1)\n    else:\n        print(min(g)*sum(b))\n\nif __name__ == '__main__':\n    code()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    boys = list(map(int, input().split()))\n    girls = list(map(int, input().split()))\n    boys.sort()\n    girls.sort()\n    if n < m:\n        print(-1)\n        return\n    if n > m:\n        print(sum(boys[:n-m]))\n        return\n    if n == m:\n        print(sum(boys))\n        return\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        R, C = map(int, input().split())\n        matrix = []\n        for j in range(R):\n            matrix.append(input())\n        if \"spoon\" in matrix or \"SPOON\" in matrix:\n            print(\"There is a spoon!\")\n        else:\n            print(\"There is indeed no spoon!\")\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        R, C = map(int, input().split())\n        M = []\n        for j in range(R):\n            M.append(input())\n        if \"spoon\" in M or \"SPOON\" in M:\n            print(\"There is a spoon!\")\n        else:\n            print(\"There is indeed no spoon!\")\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        X, R, A, B = map(int, input().split())\n        if A == B:\n            print(0)\n        else:\n            if (A - B) % (2 * R) == 0:\n                print(1)\n            else:\n                print(0)\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    s = s[::-1]\n    max_lucky = 0\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            continue\n        else:\n            max_lucky = max_lucky | s[i] | s[i+1]\n    print(max_lucky)\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = 0\n    for i in range(n-1):\n        ans = max(ans, s[i]^s[i+1])\n    print(ans)\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    string = input()\n    if len(string)%2 == 0:\n        print(string[:len(string)//2] + string[:len(string)//2][::-1])\n    else:\n        print(string[:len(string)//2] + string[len(string)//2] + string[:len(string)//2][::-1])\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    A = input()\n    B = A[::-1]\n    print(B)\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n//2)\n        for i in range(n//2):\n            print(n-i, i+1)\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n//2)\n        for i in range(n//2):\n            print(2*i+1, 2*i+2)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        \n        pass\n\n\nif __name__ == '__main__':\n    assert Solution().minCameraCover(0) == 0",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        def dfs(node):\n            if not node:\n                return 0, 0, float(\"inf\")\n            L = dfs(node.left)\n            R = dfs(node.right)\n            dp0 = L[1] + R[1]\n            dp1 = min(L[2] + min(R[1:]), R[2] + min(L[1:]))\n            dp2 = 1 + min(L) + min(R)\n            return dp0, dp1, dp2\n        return min(dfs(root)[1:])",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        curr = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] + curr <= k:\n            j -= 1\n        ans = max(ans, i - j)\n    print(ans)\n\nif __name__ == \"__main__\":\n    code()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    count = 0\n    i = 0\n    while k > 0 and i < n:\n        if k - prices[i] >= 0:\n            count += 1\n            k -= prices[i]\n        else:\n            break\n        i += 1\n    print(count)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    k = int(input())\n    n = int(input())\n    G = [['N' for i in range(n)] for j in range(n)]\n    for i in range(n):\n        G[i][i] = 'Y'\n    for i in range(k):\n        a, b = map(int, input().split())\n        G[a-1][b-1] = 'Y'\n        G[b-1][a-1] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'Y' and G[j][i] == 'N':\n                G[j][i] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'N' and G[j][i] == 'Y':\n                G[i][j] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'N' and G[j][i] == 'N':\n                G[i][j] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'Y' and G[j][i] == 'Y':\n                G[i][j] = 'Y'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'N' and G[j][i] == 'Y':\n                G[i][j] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'Y' and G[j][i] == 'N':\n                G[i][j] = 'N'\n    for i in range(n):\n        for j in range(n):\n            if G[i][j] == 'N' and G[j][i] == 'N':\n                G[i][j] = 'Y'\n    for i in range(n",
            "index": 18,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    k = int(input())\n    n = int(input())\n    G = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            G[i][j] = G[j][i] = input()\n    print(n)\n    for i in range(n):\n        for j in range(n):\n            print(G[i][j], end='')\n        print()\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}