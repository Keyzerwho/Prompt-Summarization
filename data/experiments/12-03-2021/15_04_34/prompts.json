{
    "0": "Python 3\n\"\"\"\nYou are given n cards of 3 different colours placed in a line. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThere are n cards of different colours placed in a line, each of them can be either red, green or blue cards. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n-----Constraints-----\n- $1 \\leq n \\leq 50$\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n=====Problem Statement=====\nGiven a string s in lowercase, your task is to find the top three most common characters in the string and their occurance count.\nSort in descending order of occurrence count, and then by alphabetical order to break ties.\n\nFor example, GOOGLE would output\nG 2\nO 2\nE 1\n\n=====Input Format=====\nA single line of input containing the string S.\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    s = input()",
    "3": "Python 3\n\"\"\"\n=====Problem Statement=====\nA newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string s, which is the company name in lowercase letters, your task is to find the top three most common characters in the string.\nPrint the three most common characters along with their occurrence count.\nSort in descending order of occurrence count.\nIf the occurrence count is the same, sort the characters in alphabetical order.\n\nFor example, according to the conditions described above, GOOGLE would have it's logo with the letters G, O, E. \n\n=====Input Format=====\nA single line of input containing the string S.\n\n=====Constraints=====\n3\u2264len(S)\u226410^4\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    s = input()",
    "4": "Python 3\n\"\"\"\nYou have an array $a$ with $n$ integers. You need to count the number of funny pairs $(l, r)$ $(l \\leq r)$. To check if a pair $(l, r)$ is a funny pair, take $mid = \\frac{l + r - 1}{2}$, then if $r - l + 1$ is an even number and $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_{mid} = a_{mid + 1} \\oplus a_{mid + 2} \\oplus \\ldots \\oplus a_r$, then the pair is funny. $\\oplus$ denotes the bitwise XOR operation.\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the size of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{20}$)\u00a0\u2014 array itself.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of funny pairs. You should consider only pairs where $r - l + 1$ is even number.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n3 2 2 3 7 6\n\nOutput\n3\n\nInput\n3\n42 4 2\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nSasha likes programming. Once, during a very long contest, Sasha decided that he was a bit tired and needed to relax. So he did. But since Sasha isn't an ordinary guy, he prefers to relax unusually. During leisure time Sasha likes to upsolve unsolved problems because upsolving is very useful.\n\nTherefore, Sasha decided to upsolve the following problem:\n\nYou have an array $a$ with $n$ integers. You need to count the number of funny pairs $(l, r)$ $(l \\leq r)$. To check if a pair $(l, r)$ is a funny pair, take $mid = \\frac{l + r - 1}{2}$, then if $r - l + 1$ is an even number and $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_{mid} = a_{mid + 1} \\oplus a_{mid + 2} \\oplus \\ldots \\oplus a_r$, then the pair is funny. In other words, $\\oplus$ of elements of the left half of the subarray from $l$ to $r$ should be equal to $\\oplus$ of elements of the right half. Note that $\\oplus$ denotes the bitwise XOR operation.\n\nIt is time to continue solving the contest, so Sasha asked you to solve this task.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the size of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{20}$)\u00a0\u2014 array itself.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of funny pairs. You should consider only pairs where $r - l + 1$ is even number.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n3 2 2 3 7 6\n\nOutput\n3\n\nInput\n3\n42 4 2\n\nOutput\n0\n\n\n\n-----Note-----\n\nBe as cool as Sasha, upsolve problems!\n\nIn the first example, the only funny pair is $(2, 5)$, as $2 \\oplus 3 = 4 \\oplus 5 = 1$.\n\nIn the second example, funny pairs are $(2, 3)$, $(1, 4)$, and $(3, 6)$.\n\nIn the third example, there are no funny pairs.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Task\n\nGiven two positive values: divisor and bound. Write a function maxMultiple(divisor, bound) to find the largest integer that is divisible by divisor and less than or equal to bound but greater than 0. It's guaranteed that a divisor is found.\n\n# Examples:\n\nInput: maxMultiple(2,7)\nOutput: 6\nExplanation: 6 is divisible 2, 6 is less than or equal to bound 7, and 6 is > 0.\n\nInput: maxMultiple(10,50)\nOutput: 50\nExplanation: 50is divisible by 10, 50 is less than or equal to bound 50, and 50 is > 0.\n\nInput: maxMultiple(37,200)\nOutput: 185\nExplanation: 185 is divisible by 37, 185 is less than or equal to bound 200, and 185 is > 0.\n\"\"\"\ndef max_multiple(divisor, bound):",
    "7": "Python 3\n\"\"\"\n# Task\n\n**_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That , \n\n# Conditions :\n\n* **_N_**  is *divisible by divisor*\n\n* **_N_**  is *less than or equal to bound* \n\n* **_N_**  is *greater than 0*.\n___\n\n# Notes \n\n* The **_parameters (divisor, bound)_** passed to the function are *only positive values* .\n* *It's guaranteed that* a **divisor is Found** .\n___\n# Input >> Output Examples \n\n```\nmaxMultiple (2,7) ==> return (6)\n```\n## Explanation: \n\n**_(6)_** is divisible by **_(2)_** , **_(6)_** is less than or equal to bound **_(7)_** , and **_(6)_** is > 0 .\n___\n```\nmaxMultiple (10,50)  ==> return (50)\n```\n## Explanation:\n\n**_(50)_** *is divisible by* **_(10)_** , **_(50)_** is less than or equal to bound **_(50)_** , and **_(50)_** is > 0 .*\n___\n```\nmaxMultiple (37,200) ==> return (185)\n```\n## Explanation:\n\n**_(185)_** is divisible by **_(37)_** , **_(185)_** is less than or equal to bound **_(200)_** , and **_(185)_** is > 0 .\n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n~~~if:nasm\n## NASM-specific notes\n\nThe function declaration is `int max_multiple(int divisor, int bound)` where the first argument is the divisor and the second one is the bound.\n~~~\n\"\"\"\ndef max_multiple(divisor, bound):",
    "8": "Python 3\n\"\"\"\nYour need to create a function `combos` that accepts `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\nFor an optimal solution, the following operation should complete within 6000ms.\n\"\"\"\ndef combos(n):",
    "9": "Python 3\n\"\"\"\nJon and Joe have received equal marks in the school examination. \nBut, they won't reconcile in peace when equated with each other. \nTo prove his might, Jon challenges Joe to write a program to find all possible number combos that sum to a given number. \nWhile unsure whether he would be able to accomplish this feat or not, Joe accpets the challenge. \nBeing Joe's friend, your task is to help him out.\n\n# Task\n\nCreate a function `combos`, that accepts a single positive integer `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\n# Notes\n1. Sub-arrays may or may not have their elements sorted.\n2. The order of sub-arrays inside the main array does not matter.\n3. For an optimal solution, the following operation should complete within 6000ms.\n\n# Sample\n\"\"\"\ndef combos(n):",
    "10": "Python 3\n\"\"\"\nThe input given are two series of non-negative integers following Poisson or a uniform distribution.\n  \nYou need to output whether the series follows a Poisson or a uniform distribution?\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nHeidi is a statistician to the core, and she likes to study the evolution of marmot populations in each of V (1 \u2264 V \u2264 100) villages! So it comes that every spring, when Heidi sees the first snowdrops sprout in the meadows around her barn, she impatiently dons her snowshoes and sets out to the Alps, to welcome her friends the marmots to a new season of thrilling adventures.\n\nArriving in a village, Heidi asks each and every marmot she comes across for the number of inhabitants of that village. This year, the marmots decide to play an April Fools' joke on Heidi. Instead of consistently providing the exact number of inhabitants P (10 \u2264 P \u2264 1000) of the village, they respond with a random non-negative integer k, drawn from one of two types of probability distributions:\n\n  Poisson (d'avril) distribution: the probability of getting an answer k is $\\frac{p^{k} e^{-P}}{k !}$ for k = 0, 1, 2, 3, ...,  Uniform distribution: the probability of getting an answer k is $\\frac{1}{2 P + 1}$ for k = 0, 1, 2, ..., 2P. \n\nHeidi collects exactly 250 answers per village. Every village follows either the Poisson or the uniform distribution. Heidi cannot tell marmots apart, so she may query some marmots several times, and each time the marmot will answer with a new number drawn from the village's distribution.\n\nCan you help Heidi to find out whether a village follows a Poisson or a uniform distribution?\n\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\n\n\n-----Note-----\n\nThe full example input is visually represented below, along with the probability distribution function it was drawn from (the y-axis is labeled by its values multiplied by 250).\n\n[Image]\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven the number n, populate an array with all numbers up to and including that number, but excluding zero.\n\nExamples:\nInput:\nmonkeyCount(10)\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nInput:\nmonkeyCount(1)\nOutput:\n[1]\n\"\"\"\ndef monkey_count(n):",
    "13": "Python 3\n\"\"\"\nYou take your son to the forest to see the monkeys. You know that there are a certain number there (n), but your son is too young to just appreciate the full number, he has to start counting them from 1.\n\nAs a good parent, you will sit and count with him. Given the number (n), populate an array with all numbers up to and including that number, but excluding zero.\n\nFor example:\n```python\nmonkeyCount(10) # --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmonkeyCount(1) # --> [1]\n```\n\"\"\"\ndef monkey_count(n):",
    "14": "Python 3\n\"\"\"\n# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Example\n\n For `n = 152`, the output should be `52`;\n \n For `n = 1001`, the output should be `101`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 \u2264 n \u2264 1000000.`\n\n\n - `[output]` an integer\n\"\"\"\ndef delete_digit(n):",
    "15": "Python 3\n\"\"\"\n# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Example\n\n For `n = 152`, the output should be `52`;\n \n For `n = 1001`, the output should be `101`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 \u2264 n \u2264 1000000.`\n\n\n - `[output]` an integer\n\"\"\"\ndef delete_digit(n):",
    "16": "Python 3\n\"\"\"\nYou are given an array of size n and a limiting number k. Find the maximum count of numbers from array whose sum is not greater than k.\n\n\n\nInput Format\n\nThe first line contains two integers, n and k , the number of elements in array and a limiting number.\n\nThe next line contains n space-separated integers array[i]\n\nConstraints\n\n1<= n <= 105\n\n1<= k <= 109\n\n1<= array[i] <= 109\n\nA number can't be repeated multiple times.\n\nOutput Format\n\nAn integer that denotes the maximum count of array numbers whose sum can't be greater than k.\n\nSample Input\n\n7 50\n\n1 12 5 111 200 1000 10\n\nSample Output\n\n4\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nGive me Chocolate\n\nAnushka wants to buy chocolates.there are many chocolates in front of her, tagged with their prices.\n\nAnushka has only a certain amount to spend, and she wants to maximize the number of chocolates she buys with this money.\n\nGiven a list of prices and an amount to spend, what is the maximum number of chocolates Anushka can buy? \n\nFor example, \n\nif prices =[1,2,3,4]\nand Anushka has k=7 to spend, she can buy items [1,2,3] for 6 , or [3,4] for 7 units of currency. she would choose the first group of 3 items.\n\nInput Format\n\nThe first line contains two integers, n and k , the number of priced chocolates and the amount Anushka has to spend.\n\nThe next line contains n space-separated integers prices[i]\n\nConstraints\n\n1<= n <= 105\n\n1<= k <= 109\n\n1<= prices[i] <= 109\n\n\n\nA chocolate can't be bought multiple times.\n\nOutput Format\n\nAn integer that denotes the maximum number of chocolates Anushka can buy for her.\n\nSample Input\n\n7 50\n\n1 12 5 111 200 1000 10\n\nSample Output\n\n4\n\nExplanation\n\nshe can buy only 4 chocolatess at most. These chocolates have the following prices: 1, 12, 5, 10.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given a medium item for $3 and a large item for $4. A promotional free coupon is given for every purchase and six coupon are required for one free item. No coupon for free item.\n\n\nDetermine the amount of money you for the given past sequence of item.You do not have any stamp in beginning and spent free stamp just after the purchase of six items.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium item or a Large item  got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars you have spent.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nBohan loves milk tea so much and he drinks one cup of milk tea every day. The local shop sells milk tea in two sizes: a Medium cup for $3 and a Large cup for $4. For every cup of milk tea purchased Bohan receives a promotional stamp. Bohan may redeem 6 stamps for a free drink of milk tea regardless of the size. No stamp will be given for a free drink.\n\n\nDetermine the amount of money Bohan have spent on milk tea, given a sequence of milk tea sizes he got in the past a few days. Assume Bohan had no stamps in the beginning and he always redeemed the stamps for the next drink once he had collected 6 stamps.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium cup or a Large cup of milk tea Bohan got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars Bohan have spent on milk tea.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n-----Explanation-----\nExample 1: Bohan didn't redeem any stamps.\nExample 2: Bohan redeemed 6 stamps for the Large cup of milk tea on the 7th day.\nExample 3: Bohan redeemed 6 stamps for the Medium cup of milk tea on the 7th day.\n\"\"\"\ndef code():"
}