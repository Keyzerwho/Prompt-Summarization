{
    "0": "Python 3\n\"\"\"\nTask:\nMake a function that converts a word to pig latin. The rules of pig latin are:\n\nIf the word has more than 3 letters:\n  1. Take the first letter of a word and move it to the end\n  2. Add -ay to the word\nOtherwise leave the word alone.\n\n\nExample: \nInput: `hello` \nOutput: `ellohay`\n\"\"\"\ndef pig_latin(word):",
    "1": "Python 3\n\"\"\"\nTask:\nMake a function that converts a word to pig latin. The rules of pig latin are:\n\n```\nIf the word has more than 3 letters:\n  1. Take the first letter of a word and move it to the end\n  2. Add -ay to the word\nOtherwise leave the word alone.\n```\n\nExample: `hello` = `ellohay`\n\"\"\"\ndef pig_latin(word):",
    "2": "Python 3\n\"\"\"\nGiven an integer n, generate all structurally unique binary search trees that store values 1 ...\u00a0n.\n\nExample:\n\n\nInput: 3\nOutput:\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:",
    "3": "Python 3\n\"\"\"\nGiven an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ...\u00a0n.\n\nExample:\n\n\nInput: 3\nOutput:\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\nExplanation:\nThe above output corresponds to the 5 unique BST's shown below:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:",
    "4": "Python 3\n\"\"\"\nLet's denote $\\text{popcount}(x)$ as the number of bits set in the binary representation of the non-negative integer x.\n\nYou are given multiple queries consisting of pairs of integers l and r. For each query, find the x, such that l \u2264 x \u2264 r, and $\\text{popcount}(x)$ is maximum possible. If there are multiple such numbers find the smallest of them.\n\n\n-----Input-----\n\nThe first line contains integer n\u00a0\u2014 the number of queries (1 \u2264 n \u2264 10000).\n\nEach of the following n lines contain two integers l_{i}, r_{i}\u00a0\u2014 the arguments for the corresponding query (0 \u2264 l_{i} \u2264 r_{i} \u2264 10^18).\n\n\n-----Output-----\n\nFor each query print the answer in a separate line.\n\n\n-----Examples-----\nInput\n3\n1 2\n2 4\n1 10\n\nOutput\n1\n3\n7\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nLet's denote as $\\text{popcount}(x)$ the number of bits set ('1' bits) in the binary representation of the non-negative integer x.\n\nYou are given multiple queries consisting of pairs of integers l and r. For each query, find the x, such that l \u2264 x \u2264 r, and $\\text{popcount}(x)$ is maximum possible. If there are multiple such numbers find the smallest of them.\n\n\n-----Input-----\n\nThe first line contains integer n\u00a0\u2014 the number of queries (1 \u2264 n \u2264 10000).\n\nEach of the following n lines contain two integers l_{i}, r_{i}\u00a0\u2014 the arguments for the corresponding query (0 \u2264 l_{i} \u2264 r_{i} \u2264 10^18).\n\n\n-----Output-----\n\nFor each query print the answer in a separate line.\n\n\n-----Examples-----\nInput\n3\n1 2\n2 4\n1 10\n\nOutput\n1\n3\n7\n\n\n\n-----Note-----\n\nThe binary representations of numbers from 1 to 10 are listed below:\n\n1_10 = 1_2\n\n2_10 = 10_2\n\n3_10 = 11_2\n\n4_10 = 100_2\n\n5_10 = 101_2\n\n6_10 = 110_2\n\n7_10 = 111_2\n\n8_10 = 1000_2\n\n9_10 = 1001_2\n\n10_10 = 1010_2\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given a sequence a = \\{a_1, ..., a_N\\} with all zeros, and a sequence b = \\{b_1, ..., b_N\\} consisting of 0 and 1. The length of both is N.\nYou can perform Q kinds of operations. The i-th operation is as follows:\n - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1.\nMinimize the hamming distance between a and b.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200,000\n - b consists of 0 and 1.\n - 1 \\leq Q \\leq 200,000\n - 1 \\leq l_i \\leq r_i \\leq N\n - If i \\neq j, either l_i \\neq l_j or r_i \\neq r_j.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nb_1 b_2 ... b_N\nQ\nl_1 r_1\nl_2 r_2\n:\nl_Q r_Q\n\n-----Output-----\nPrint the minimum possible hamming distance.\n\n-----Sample Input-----\n3\n1 0 1\n1\n1 3\n\n-----Sample Output-----\n1\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given a sequence a = \\{a_1, ..., a_N\\} with all zeros, and a sequence b = \\{b_1, ..., b_N\\} consisting of 0 and 1. The length of both is N.\nYou can perform Q kinds of operations. The i-th operation is as follows:\n - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1.\nMinimize the hamming distance between a and b, that is, the number of i such that a_i \\neq b_i, by performing some of the Q operations.\n\n-----Constraints-----\n - 1 \\leq N \\leq 200,000\n - b consists of 0 and 1.\n - 1 \\leq Q \\leq 200,000\n - 1 \\leq l_i \\leq r_i \\leq N\n - If i \\neq j, either l_i \\neq l_j or r_i \\neq r_j.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nb_1 b_2 ... b_N\nQ\nl_1 r_1\nl_2 r_2\n:\nl_Q r_Q\n\n-----Output-----\nPrint the minimum possible hamming distance.\n\n-----Sample Input-----\n3\n1 0 1\n1\n1 3\n\n-----Sample Output-----\n1\n\nIf you choose to perform the operation, a will become \\{1, 1, 1\\}, for a hamming distance of 1.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nWrite a function that among the given numbers finds one that is different in evenness, and return a position of this number.\n\nExamples:\nInput:\niq_test(\"2 4 7 8 10\")\nOutput:\n3\nExplanation:\nThird number is odd, while the rest of the numbers are even.\n\nInput:\niq_test(\"1 2 1 1\")\nOutput:\n2\nExplanation:\nSecond number is even, while the rest of the numbers are odd.\n\"\"\"\ndef iq_test(numbers):",
    "9": "Python 3\n\"\"\"\nBob is preparing to pass IQ test. The most frequent task in this test is `to find out which one of the given numbers differs from the others`. Bob observed that one number usually differs from the others in **evenness**. Help Bob \u2014 to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.\n\n`!` Keep in mind that your task is to help Bob solve a `real IQ test`, which means indexes of the elements start from `1 (not 0)`\n\n##Examples :\n\n \n```python\niq_test(\"2 4 7 8 10\") => 3 // Third number is odd, while the rest of the numbers are even\n\niq_test(\"1 2 1 1\") => 2 // Second number is even, while the rest of the numbers are odd\n```\n\"\"\"\ndef iq_test(numbers):",
    "10": "Python 3\n\"\"\"\nYou are given two integers $d, m$, find the number of arrays $a$, \nsatisfying the following constraints:  \nThe length of $a$ is $n$, $n \\ge 1$  $1 \\le a_1 < a_2 < \\dots < a_n \\le d$  \nDefine an array $b$ of length $n$ as follows: $b_1 = a_1$, $\\forall i > 1, b_i = b_{i - 1} \\oplus a_i$, \nwhere $\\oplus$ is the bitwise exclusive-or. After constructing an array $b$, \nthe constraint $b_1 < b_2 < \\dots < b_{n - 1} < b_n$ should hold. \nYou need to find the answer modulo $m$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) denoting the number of test cases in the input.\n\nEach of the next $t$ lines contains two integers $d, m$ ($1 \\leq d, m \\leq 10^9$).\n\nNote that $m$ is not necessary the prime!\n\n\n-----Output-----\n\nFor each test case, print the number of arrays $a$, satisfying all given constrains, modulo $m$.\n\n\n-----Example-----\nInput\n10\n1 1000000000\n2 999999999\n3 99999998\n4 9999997\n5 999996\n6 99995\n7 9994\n8 993\n9 92\n10 1\n\nOutput\n1\n3\n5\n11\n17\n23\n29\n59\n89\n0\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nDreamoon likes sequences very much. So he created a problem about the sequence that you can't find in OEIS: \n\nYou are given two integers $d, m$, find the number of arrays $a$, satisfying the following constraints:  The length of $a$ is $n$, $n \\ge 1$  $1 \\le a_1 < a_2 < \\dots < a_n \\le d$  Define an array $b$ of length $n$ as follows: $b_1 = a_1$, $\\forall i > 1, b_i = b_{i - 1} \\oplus a_i$, where $\\oplus$ is the bitwise exclusive-or (xor). After constructing an array $b$, the constraint $b_1 < b_2 < \\dots < b_{n - 1} < b_n$ should hold. \n\nSince the number of possible arrays may be too large, you need to find the answer modulo $m$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) denoting the number of test cases in the input.\n\nEach of the next $t$ lines contains two integers $d, m$ ($1 \\leq d, m \\leq 10^9$).\n\nNote that $m$ is not necessary the prime!\n\n\n-----Output-----\n\nFor each test case, print the number of arrays $a$, satisfying all given constrains, modulo $m$.\n\n\n-----Example-----\nInput\n10\n1 1000000000\n2 999999999\n3 99999998\n4 9999997\n5 999996\n6 99995\n7 9994\n8 993\n9 92\n10 1\n\nOutput\n1\n3\n5\n11\n17\n23\n29\n59\n89\n0\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nExamples:\nInput:\nD=1\nN=10\nOutput:\n45\n\nInput:\nD=2\nN=3\nOutput:\n18\n\"\"\"\ndef super_sum(D, N):",
    "13": "Python 3\n\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nFor Example if D=1 and N=10 then the answer would be 45 ([0,1,2,3,4,5,6,7,8,9])\nIf D=2 and N = 3 the answer is 18 which would be the sum of every number in the following:\n```python\n[\n[(0,0), (0,1), (0,2)],\n[(1,0), (1,1), (1,2)],\n[(2,0), (2,1), (2,2)]\n]\n```\n\nA naive solution could be to loop over every index in every dimension and add to a global sum. This won't work as the number of dimension is expected to be quite large.\n\nHint: A formulaic approach would be best\nHint 2: Gauss could solve the one dimensional case in his earliest of years, This is just a generalization.\n\n~~~if:javascript\nNote for JS version: Because the results will exceed the maximum safe integer easily, for such values you're only required to have a precision of at least `1 in 1e-9` to the actual answer.\n~~~\n\"\"\"\ndef super_sum(D, N):",
    "14": "Python 3\n\"\"\"\n# Task\n\nYou will be given an array of random integers and a number n. You have to extract n smallest integers out of it. The original order need to be preserved.\n\n# Examples\n\nperformant_smallest([1, 2, 3, 4, 5], 3)     ==   [1, 2, 3]\nperformant_smallest([5, 4, 3, 2, 1], 3)     ==   [3, 2, 1]\nperformant_smallest([1, 2, 3, 4, 1], 3)     ==   [1, 2, 1]\nperformant_smallest([2, 1, 3, 2, 3], 3)     ==   [2, 1, 2]\n\n\"\"\"\ndef performant_smallest(arr, n):",
    "15": "Python 3\n\"\"\"\nThis challenge is based on [the kata](https://www.codewars.com/kata/n-smallest-elements-in-original-order) by GiacomoSorbi. Before doing this one it is advisable to complete the non-performance version first.\n\n___\n\n# Task\n\nYou will be given an array of random integers and a number `n`. You have to extract `n` smallest integers out of it **preserving the original order**.\n\n# Examples\n\n```python\nperformant_smallest([1, 2, 3, 4, 5], 3)     ==   [1, 2, 3]\nperformant_smallest([5, 4, 3, 2, 1], 3)     ==   [3, 2, 1]\nperformant_smallest([1, 2, 3, 4, 1], 3)     ==   [1, 2, 1]\nperformant_smallest([2, 1, 3, 2, 3], 3)     ==   [2, 1, 2]\n```\n\n# Notes\n\n* There will be duplicates in the array, and they have to be returned in the order of their each separate appearence.\n* This kata is an example of the \"know your data\" principle. Remember this while searching for the correct approach.\n\n# Performance tests\n\n```python\nTests: 15\nArray size: 800,000\nValues range: [1; 50]\nNumber of elements to return: 25-50% of the array\n```\n\"\"\"\ndef performant_smallest(arr, n):",
    "16": "Python 3\n\"\"\"\nIt takes the object (JavaScript/CoffeeScript) or hash (ruby) passed in and generates a human readable string from its key/value pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```\n\"\"\"\ndef solution(pairs):",
    "17": "Python 3\n\"\"\"\nComplete the solution so that it takes the object (JavaScript/CoffeeScript) or hash (ruby) passed in and generates a human readable string from its key/value pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```\n\"\"\"\ndef solution(pairs):",
    "18": "Python 3\n\"\"\"\nYou are given an array of length $n$ and you want to split it into several non-empty sets. The value of $i$-th element is $a_i$. You want to generate the maximum number of sets from the list. There is a restriction for each set: the number of values in the team multiplied by the minimum value among all values in the team must be at least $x$.\n\nEach value should belong to at most one set. Some value may be left without being part of any set.\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 10^5; 1 \\le x \\le 10^9$)\u00a0\u2014 the number of values and the restriction of sets respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the value of the $i$-th element.\n\nThe sum of $n$ over all inputs does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the maximum number of sets that you can generate. \n\n\n-----Example-----\nInput\n3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n\nOutput\n2\n1\n0\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThere are $n$ programmers that you want to split into several non-empty teams. The skill of the $i$-th programmer is $a_i$. You want to assemble the maximum number of teams from them. There is a restriction for each team: the number of programmers in the team multiplied by the minimum skill among all programmers in the team must be at least $x$.\n\nEach programmer should belong to at most one team. Some programmers may be left without a team.\n\nCalculate the maximum number of teams that you can assemble.\n\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 10^5; 1 \\le x \\le 10^9$)\u00a0\u2014 the number of programmers and the restriction of team skill respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the skill of the $i$-th programmer.\n\nThe sum of $n$ over all inputs does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the maximum number of teams that you can assemble. \n\n\n-----Example-----\nInput\n3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n\nOutput\n2\n1\n0\n\"\"\"\ndef code():"
}