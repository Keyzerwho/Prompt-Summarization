{
    "0": "\n        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n#Runtime: 40 ms\n#Memory Usage: 14.1 MB",
    "1": "\n        if not root:\n            return 0\n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n\n#Runtime: 32 ms\n#Memory Usage: 14.1 MB",
    "2": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        p = list(map(int, input().split()))\n        p.sort()\n        p = p[::-1]\n        k = 2\n        while k < n:\n            for i in range(n-k+1):\n                if p[i] - p[i+k-1] > p[i+1] - p[i+k-1]:\n                    print(k)\n                    print(*p[i:i+k])\n                    break\n            k += 1\n",
    "3": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        p = list(map(int, input().split()))\n        p.sort()\n        max_diff = 0\n        for i in range(n-1):\n            if p[i+1] - p[i] > max_diff:\n                max_diff = p[i+1] - p[i]\n        print(max_diff)\n        for i in range(n-1):\n            if p[i+1] - p[i] == max_diff:\n                print(p[i], p[i+1])\n",
    "4": "\n    return sum(ord(i) for i in string)",
    "5": "\n    return sum(ord(i) for i in string)",
    "6": "\n    n = int(input())\n    for i in range(n):\n        s = input()\n        s = s.split(\"0\")\n        s = \"\".join(s)\n        s = s.split(\"1\")\n        s = \"\".join(s)\n        print(s)",
    "7": "\n    n = int(input())\n    for i in range(n):\n        s = input()\n        for i in s:\n            print(chr(int(i)), end=\"\")\n        print()",
    "8": "\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    A = A[::-1]\n    K = 0\n    for i in range(N):\n        if A[i] >= M:\n            K += 1\n        else:\n            break\n    if K == N:\n        print(0)\n    else:\n        print(K)\n        for i in range(K, N):\n            print(A[i] % M, end=' ')\n",
    "9": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    a = a[::-1]\n    res = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) % m not in res:\n                res.append((a[i] + a[j]) % m)\n    res.sort()\n    print(len(res))\n    print(*res)\n",
    "10": "\n    a, b, c, d = map(int, input().split())\n    if a == b:\n        if c == d:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n    elif a == c:\n        if b == d:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n    elif a == d:\n        if b == c:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n",
    "11": "\n    a, b, c, d = map(int, input().split())\n    if a == b and c == d:\n        print(\"Possible\")\n    elif a == c and b == d:\n        print(\"Possible\")\n    elif a == d and b == c:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n",
    "12": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        arr.sort()\n        print(arr[0] + arr[1])\n",
    "13": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        A.sort()\n        print(A[0] + A[1])\n",
    "14": "\n    k = float(input())\n    n = 0\n    while k > 1:\n        n += 1\n        k /= 2\n    print(n)\n    for i in range(n-1):\n        print(i, 0.5)\n",
    "15": "\n    k = float(input())\n    n = 1\n    while k**n < 1:\n        n += 1\n    print(n)\n    for i in range(n-1):\n        print(i, k**(n-i-1))\n",
    "16": "\n    T = int(input())\n    for i in range(T):\n        a, d, k, n, inc = map(int, input().split())\n        if k == n:\n            print(a + (n - 1) * d)\n        else:\n            print(a + (n - 1) * d + (n - k) * inc)\n",
    "17": "\n    ",
    "18": "\n    return ' '.join(map(lambda x: x[:-5] + x[-5:].translate(str.maketrans('aeiouy', 'kontti')), s.split()))",
    "19": "\n    return ' '.join(map(kontti_word, s.split()))\n\ndef kontti_word(w):\n    if 'aeiouy' in w:\n        return w[-1] + w[:-1]\n    else:\n        return w"
}