{
    "0": "Python 3\n\"\"\"\nGiven a complete binary tree, count the number of nodes.\n\nExample:\n\n\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:",
    "1": "Python 3\n\"\"\"\nGiven a complete binary tree, count the number of nodes.\n\nNote: \n\nDefinition of a complete binary tree from Wikipedia:\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\nExample:\n\n\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:",
    "2": "Python 3\n\"\"\"\nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deleting some (possibly, zero or all) elements.\n\nA permutation of length $n$ is an array of length $n$ in which every element from $1$ to $n$ occurs exactly once.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\n\n\n-----Note-----\n\nIn the first test case, there are $4$ subsequences of length at least $2$:  $[3,2]$ which gives us $|3-2|=1$.  $[3,1]$ which gives us $|3-1|=2$.  $[2,1]$ which gives us $|2-1|=1$.  $[3,2,1]$ which gives us $|3-2|+|2-1|=2$. \n\nSo the answer is either $[3,1]$ or $[3,2,1]$. Since we want the subsequence to be as short as possible, the answer is $[3,1]$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou'll be given a string, and have to return the total of all the unicode characters as an int.\n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291\n\"\"\"\ndef uni_total(string):",
    "5": "Python 3\n\"\"\"\nYou'll be given a string, and have to return the total of all the unicode characters as an int. Should be able to handle any characters sent at it. \n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291\n\"\"\"\ndef uni_total(string):",
    "6": "Python 3\n\"\"\"\nYou are given N encrypted sentences whose characters are in ASCCI code. Write a code to convert ASCCI code into their corresponding characters.\n\n\n-----Input-----\nThe input will consist of the first line containing the number of test cases \u2018n\u2019 followed by n lines of test cases.\n\n-----Output-----\n\nFor each input print the decoded line.\n\n-----Example-----\nInput:\n2\n721011081081113287111114108100\n871011089911110910132116111327311010010597\n\nOutput:\nHello World\nWelcome to India\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nAt the legendary times of Nonsenso wars in ISM Dhanbad, there was a neck to neck competition between Barney Stinson and Sheldon Cooper. They both were on level 19. After trying too hard both of them could not decipher the nonsense, so they decided to play alongside. Sheldon Cooper had to pass a message to Barney Stinson. So he decided to convert each letter of the sentence to their corresponding to their ASCII codes. When Barney received the message he could not get anything. Now you have to design a code which converts the encrypted message to readable format.\n\n-----Input-----\nThe input will consist of the first line containing the number of test cases \u2018n\u2019 followed by n lines of test cases.\n\n-----Output-----\n\nFor each input print the decoded line.\n\n-----Example-----\nInput:\n2\n721011081081113287111114108100\n871011089911110910132116111327311010010597\n\nOutput:\nHello World\nWelcome to India\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou have two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is $\\{0,1,\u2026,M-1\\}$, for some positive integer $M$. You draw a number from the first bag and a number from the second bag, and then sum them modulo $M$.\n\nWhat are the residues modulo $M$ that you cannot obtain with this action?\n\n\n-----Input-----\n\nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$) and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\nIn the second line of the output, print $K$ space-separated integers greater or equal than zero and less than $M$, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If $K$=0, do not output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n2\n0 2\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nEverybody seems to think that the Martians are green, but it turns out they are metallic pink and fat. Ajs has two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is $\\{0,1,\u2026,M-1\\}$, for some positive integer $M$. Ajs draws a number from the first bag and a number from the second bag, and then sums them modulo $M$.\n\nWhat are the residues modulo $M$ that Ajs cannot obtain with this action?\n\n\n-----Input-----\n\nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$) and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\nIn the second line of the output, print $K$ space-separated integers greater or equal than zero and less than $M$, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If $K$=0, do not output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n2\n0 2\n\n\n\n-----Note-----\n\nIn the first sample, the first bag and the second bag contain $\\{3,4\\}$ and $\\{0,1,2\\}$, respectively. Ajs can obtain every residue modulo $5$ except the residue $2$: $ 4+1 \\equiv 0, \\, 4+2 \\equiv 1, \\, 3+0 \\equiv 3, \\, 3+1 \\equiv 4 $ modulo $5$. One can check that there is no choice of elements from the first and the second bag which sum to $2$ modulo $5$.\n\nIn the second sample, the contents of the first bag are $\\{5,25,125,625\\}$, while the second bag contains all other nonnegative integers with at most $9$ decimal digits. Every residue modulo $1\\,000\\,000\\,000$ can be obtained as a sum of an element in the first bag and an element in the second bag.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n\nYou have to shuffle digits of the given proportion(x : y :: z : w) in order to check that is it possible to make new proportion or not.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\".\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n-----Explanation-----\nBy swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\"\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1 \u2264 i < j \u2264 N.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each description consists of a single integer N.\nThe second line of each description contains N space separated integers - a1, a2, ..., aN respectively.\n\n-----Output-----\nFor each test case, output a single line containing a single integer - the smallest possible sum for the corresponding test case.\n\n-----Constraints-----\n\n- T = 105, N = 2 : 13 points.\n- T = 105, 2 \u2264 N \u2264 10 : 16 points.\n- T = 1000, 2 \u2264 N \u2264 100 : 31 points.\n- T = 10, 2 \u2264 N \u2264 105 : 40 points.\n- 1 \u2264 ai \u2264 106\n\n-----Example-----\nInput:\n1\n4\n5 1 3 4\n\nOutput:\n4\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1 \u2264 i < j \u2264 N.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each description consists of a single integer N.\nThe second line of each description contains N space separated integers - a1, a2, ..., aN respectively.\n\n-----Output-----\nFor each test case, output a single line containing a single integer - the smallest possible sum for the corresponding test case.\n\n-----Constraints-----\n\n- T = 105, N = 2 : 13 points.\n- T = 105, 2 \u2264 N \u2264 10 : 16 points.\n- T = 1000, 2 \u2264 N \u2264 100 : 31 points.\n- T = 10, 2 \u2264 N \u2264 105 : 40 points.\n- 1 \u2264 ai \u2264 106\n\n-----Example-----\nInput:\n1\n4\n5 1 3 4\n\nOutput:\n4\n\n-----Explanation-----\nHere we pick a2 and a3. Their sum equals to 1 + 3 = 4.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a number of magnitude 1.\nYou need to divide this number into as many positive parts as possible such that at any moment given a part A, \nyou can divide into only two parts B and C, such that B does not exceed C times some constant.\n\n-----Input-----\nOne floating-point number, 1 \u2264 k \u2264 1.999, meaning the stated constant factor. The number will have at most 3 digits after the decimal point.\n\n-----Output-----\n\nFirst, you should output n, the maximal achievable number of parts for the given value of the constant factor. Then, you should output any proof that this number of parts is in fact achievable: n-1 descriptions of dividing, using the following notation. At each step, you print two numbers: first, the index of the part that you want to divide into two; second, the length of the new number formed. It is assumed that the starting number has index 0. Each newly created number will be given the lowest possible free integer index (so, at the ith step this will be i).\n\n-----Example-----\nInput:\n1.5\nOutput:\n4\n0 0.4\n0 0.3\n1 0.2\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe Chef has one long loaf of bread of length 1. He wants to cut it into as many little loaves as he can. But he wants to adhere to the following rule: At any moment, the length of the longest loaf which he possesses may not be larger than the length of shortest one, times some constant factor. Every time, he is only allowed to cut exactly one loaf into two shorter ones.\n\n-----Input-----\nOne floating-point number, 1 \u2264 k \u2264 1.999, meaning the stated constant factor. The number will have at most 3 digits after the decimal point.\n\n-----Output-----\n\nFirst, you should output one number n, the maximal achievable number of loaves for the given value of the constant factor. Then, you should output any proof that this number of loaves is in fact achievable: n-1 descriptions of cutting, using the following notation. At each step, you print two numbers: first, the index of the loaf that you want to cut into two parts; second, the length of the newly created loaf (cut off from the original one). It is assumed that the starting loaf has index 0. Each newly created loaf will be given the lowest possible free integer index (so, at the ith step this will be i). Each time, the size of size of the original loaf will be decreased by the size of the newly created loaf.\n\n-----Example-----\nInput:\n1.5\nOutput:\n4\n0 0.4\n0 0.3\n1 0.2\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n\nFind the number of questions you will solve on $nth $ day if on first day you solved $a$ problems and after that you solved $d$ problems more than previous day. But after every $k$ days , you increased $d$ by $inc$.\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nKshitij has recently started solving problems on codechef. As he is real problem solving enthusiast, he wants continuous growth in number of problems solved per day.\nHe started with $a$  problems on first day. \nHe solves $d$ problems more than previous day. But after every $k$ days , he increases $d$ by\n$inc$ .\nCan you guess how many questions he will solve on $nth $ day ?\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n-----EXPLANATION:-----\nThe number of questions solved in first 8 days is :\n$1$ $5$ $9$ $15$ $21$ $27$ $35$ $43$ .\nOn first day he solved 1 problem . Here $d$ is  4 for first 3 days.\nThen after 3 days $d$ increases by 2 (that is 6).\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "19": "Python 3\n\"\"\"\nKontti language is a finnish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):"
}