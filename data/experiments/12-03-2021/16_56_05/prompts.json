{
    "0": "Python 3\n\"\"\"\n\n\nYou have been given an array of size n. You have to calculate a subarray of size k\nwith maximum sum having distinct elements same as original array.\n\n\t\t\n\t\t\n\n-----Input Format-----\n\nFirst line contains no. of test cases. Second line contains n and k. Third line\ncontains array of n integers.\n\n\n-----Output-----\n\nPrint maximum possible sum as stated in question\n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n1\n10 6\n8 8 3 5 3 8 5 7 7 7\n\nOutput:\n37\n\n\t\t\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\n-----\nARRAY AND DISTINCT ELEMENTS\n-----\n\nChef is multitalented but he mistakenly took part in 2 contest which will take place\nat the same time. So while chef is busy at one cooking contest, he wants you to\ntake part in coding contest. Chef wants u to solve this program for him.\n\n\t\n\nYou have been given an array of size n. You have to calculate a subarray of size k\nwith maximum sum having distinct elements same as original array.\n\n\t\t\n\t\t\n\n-----Input Format-----\n\nFirst line contains no. of test cases. Second line contains n and k. Third line\ncontains array of n integers.\n\n\n-----Output-----\n\nPrint maximum possible sum as stated in question\n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n1\n10 6\n8 8 3 5 3 8 5 7 7 7\n\nOutput:\n37\n\n\t\t\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nA group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\\frac{n \\cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road.\n\nA spanning tree is a set of roads containing exactly n - 1 roads such that it's possible to travel between any two cities using only these roads.\n\nSome spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. It is not guaranteed that x is smaller than y.\n\nYou would like to travel through all the cities using the shortest path possible. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264 10^9).\n\nEach of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds one needs to spend in order to visit all the cities exactly once.\n\n\n-----Examples-----\nInput\n5 2 3\n1 2\n1 3\n3 4\n5 3\n\nOutput\n9\n\nInput\n5 3 2\n1 2\n1 3\n3 4\n5 3\n\nOutput\n8\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nA group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\\frac{n \\cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road.\n\nA spanning tree is a set of roads containing exactly n - 1 roads such that it's possible to travel between any two cities using only these roads.\n\nSome spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. Note that it's not guaranteed that x is smaller than y.\n\nYou would like to travel through all the cities using the shortest path possible. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264 10^9).\n\nEach of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds one needs to spend in order to visit all the cities exactly once.\n\n\n-----Examples-----\nInput\n5 2 3\n1 2\n1 3\n3 4\n5 3\n\nOutput\n9\n\nInput\n5 3 2\n1 2\n1 3\n3 4\n5 3\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first sample, roads of the spanning tree have cost 2, while other roads have cost 3. One example of an optimal path is $5 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1 \\rightarrow 2$.\n\nIn the second sample, we have the same spanning tree, but roads in the spanning tree cost 3, while other roads cost 2. One example of an optimal path is $1 \\rightarrow 4 \\rightarrow 5 \\rightarrow 2 \\rightarrow 3$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a string S consisting of a,b and c. Find the number of strings that can be possibly obtained by repeatedly performing the following operation zero or more times, modulo 998244353:\n - Choose an integer i such that 1\\leq i\\leq |S|-1 and the i-th and (i+1)-th characters in S are different. Replace each of the i-th and (i+1)-th characters in S with the character that differs from both of them.\n\n-----Constraints-----\n - 2 \\leq |S| \\leq 2 \u00d7 10^5\n - S consists of a, b and c.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the number of strings that can be possibly obtained by repeatedly performing the operation, modulo 998244353.\n\n-----Sample Input-----\nabc\n\n-----Sample Output-----\n3\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a string S consisting of a,b and c. Find the number of strings that can be possibly obtained by repeatedly performing the following operation zero or more times, modulo 998244353:\n - Choose an integer i such that 1\\leq i\\leq |S|-1 and the i-th and (i+1)-th characters in S are different. Replace each of the i-th and (i+1)-th characters in S with the character that differs from both of them (among a, b and c).\n\n-----Constraints-----\n - 2 \\leq |S| \\leq 2 \u00d7 10^5\n - S consists of a, b and c.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the number of strings that can be possibly obtained by repeatedly performing the operation, modulo 998244353.\n\n-----Sample Input-----\nabc\n\n-----Sample Output-----\n3\n\nabc, aaa and ccc can be obtained.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n\nGive a string of length $n-1$, consisting of characters '<' and '>' only. The $i$-th (1-indexed) character is the comparison result between the $i$-th element and the $i+1$-st element of the sequence. If the $i$-th character of the string is '<', then the $i$-th element of the sequence is less than the $i+1$-st element. If the $i$-th character of the string is '>', then the $i$-th element of the sequence is greater than the $i+1$-st element.\n\nFind two possible sequences consisting of $n$ distinct integers between $1$ and $n$, inclusive, each satisfying the comparison results, where the length of the Longest Increasing Subsequence of the first sequence is minimum possible, and the length of the Longest Increasing Subsequence of the second sequence is maximum possible.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nEach test case contains exactly one line, consisting of an integer and a string consisting of characters '<' and '>' only. The integer is $n$ ($2 \\le n \\le 2 \\cdot 10^5$), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is $n-1$.\n\nIt is guaranteed that the sum of all $n$ in all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print two lines with $n$ integers each. The first line is the sequence with the minimum length of the Longest Increasing Subsequence, and the second line is the sequence with the maximum length of the Longest Increasing Subsequence. If there are multiple answers, print any one of them. Each sequence should contain all integers between $1$ and $n$, inclusive, and should satisfy the comparison results.\n\nIt can be shown that at least one answer always exists.\n\n\n-----Example-----\nInput\n3\n3 <<\n7 >><>><\n5 >>><\n\nOutput\n1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n\n\n-----Note-----\n\nIn the first case, $1$ $2$ $3$ is the only possible answer.\n\nIn the second case, the shortest length of the LIS is $2$, and the longest length of the LIS is $3$. In the example of the maximum LIS sequence, $4$ '$3$' $1$ $7$ '$5$' $2$ '$6$' can be one of the possible LIS.\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nGildong recently learned how to find the longest increasing subsequence (LIS) in $O(n\\log{n})$ time for a sequence of length $n$. He wants to test himself if he can implement it correctly, but he couldn't find any online judges that would do it (even though there are actually many of them). So instead he's going to make a quiz for you about making permutations of $n$ distinct integers between $1$ and $n$, inclusive, to test his code with your output.\n\nThe quiz is as follows.\n\nGildong provides a string of length $n-1$, consisting of characters '<' and '>' only. The $i$-th (1-indexed) character is the comparison result between the $i$-th element and the $i+1$-st element of the sequence. If the $i$-th character of the string is '<', then the $i$-th element of the sequence is less than the $i+1$-st element. If the $i$-th character of the string is '>', then the $i$-th element of the sequence is greater than the $i+1$-st element.\n\nHe wants you to find two possible sequences (not necessarily distinct) consisting of $n$ distinct integers between $1$ and $n$, inclusive, each satisfying the comparison results, where the length of the LIS of the first sequence is minimum possible, and the length of the LIS of the second sequence is maximum possible.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 10^4$).\n\nEach test case contains exactly one line, consisting of an integer and a string consisting of characters '<' and '>' only. The integer is $n$ ($2 \\le n \\le 2 \\cdot 10^5$), the length of the permutation you need to find. The string is the comparison results explained in the description. The length of the string is $n-1$.\n\nIt is guaranteed that the sum of all $n$ in all test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print two lines with $n$ integers each. The first line is the sequence with the minimum length of the LIS, and the second line is the sequence with the maximum length of the LIS. If there are multiple answers, print any one of them. Each sequence should contain all integers between $1$ and $n$, inclusive, and should satisfy the comparison results.\n\nIt can be shown that at least one answer always exists.\n\n\n-----Example-----\nInput\n3\n3 <<\n7 >><>><\n5 >>><\n\nOutput\n1 2 3\n1 2 3\n5 4 3 7 2 1 6\n4 3 1 7 5 2 6\n4 3 2 1 5\n5 4 2 1 3\n\n\n\n-----Note-----\n\nIn the first case, $1$ $2$ $3$ is the only possible answer.\n\nIn the second case, the shortest length of the LIS is $2$, and the longest length of the LIS is $3$. In the example of the maximum LIS sequence, $4$ '$3$' $1$ $7$ '$5$' $2$ '$6$' can be one of the possible LIS.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nYour friend solved $a$  problems on first day. \nHe solved $d$ problems more than previous day. But after every $k$ days , he increases $d$ by\n$inc$ .Calculate the number of questions he will solve on $nth $ day.\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nKshitij has recently started solving problems on codechef. As he is real problem solving enthusiast, he wants continuous growth in number of problems solved per day.\nHe started with $a$  problems on first day. \nHe solves $d$ problems more than previous day. But after every $k$ days , he increases $d$ by\n$inc$ .\nCan you guess how many questions he will solve on $nth $ day ?\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n-----EXPLANATION:-----\nThe number of questions solved in first 8 days is :\n$1$ $5$ $9$ $15$ $21$ $27$ $35$ $43$ .\nOn first day he solved 1 problem . Here $d$ is  4 for first 3 days.\nThen after 3 days $d$ increases by 2 (that is 6).\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n$f(0) = a$;  $f(1) = b$;  $f(n) = f(n-1) \\oplus f(n-2)$ when $n > 1$, where $\\oplus$ denotes the bitwise XOR operation. \n\nYou are given three integers $a$, $b$, and $n$, calculate $f(n)$.\n\nYou have to answer for $T$ independent test cases.\n\n\n-----Input-----\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer $T$ ($1 \\le T \\le 10^3$), the number of test cases.\n\nEach of the $T$ following lines contains three space-separated integers $a$, $b$, and $n$ ($0 \\le a, b, n \\le 10^9$) respectively.\n\n\n-----Output-----\n\nFor each test case, output $f(n)$.\n\n\n-----Example-----\nInput\n3\n3 4 2\n4 5 0\n325 265 1231232\n\nOutput\n7\n4\n76\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nCengiz recently learned Fibonacci numbers and now he is studying different algorithms to find them. After getting bored of reading them, he came with his own new type of numbers that he named XORinacci numbers. He defined them as follows:   $f(0) = a$;  $f(1) = b$;  $f(n) = f(n-1) \\oplus f(n-2)$ when $n > 1$, where $\\oplus$ denotes the bitwise XOR operation. \n\nYou are given three integers $a$, $b$, and $n$, calculate $f(n)$.\n\nYou have to answer for $T$ independent test cases.\n\n\n-----Input-----\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer $T$ ($1 \\le T \\le 10^3$), the number of test cases.\n\nEach of the $T$ following lines contains three space-separated integers $a$, $b$, and $n$ ($0 \\le a, b, n \\le 10^9$) respectively.\n\n\n-----Output-----\n\nFor each test case, output $f(n)$.\n\n\n-----Example-----\nInput\n3\n3 4 2\n4 5 0\n325 265 1231232\n\nOutput\n7\n4\n76\n\n\n\n-----Note-----\n\nIn the first example, $f(2) = f(0) \\oplus f(1) = 3 \\oplus 4 = 7$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a sequence of $n$ digits $d_1d_2 \\dots d_{n}$. You need to paint all the digits in two colors so that:  each digit is painted either in the color $1$ or in the color $2$;  if you write in a row from left to right all the digits painted in the color $1$, and then after them all the digits painted in the color $2$, then the resulting sequence of $n$ digits will be non-decreasing. \n\nIt is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions.\n\nFind any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the length of a given sequence of digits.\n\nThe next line contains a sequence of $n$ digits $d_1d_2 \\dots d_{n}$ ($0 \\le d_i \\le 9$). The digits are written in a row without spaces or any other separators. The sequence can start with 0.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines \u2014 the answers to each of the test cases in the input.\n\nIf there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of $n$ digits $t_1t_2 \\dots t_n$ ($1 \\le t_i \\le 2$), where $t_i$ is the color the $i$-th digit is painted in. If there are several feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding output line should contain a single character '-' (the minus sign).\n\n\n-----Example-----\nInput\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\nOutput\n121212211211\n1\n222222222\n21\n-\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a sequence of $n$ digits $d_1d_2 \\dots d_{n}$. You need to paint all the digits in two colors so that:  each digit is painted either in the color $1$ or in the color $2$;  if you write in a row from left to right all the digits painted in the color $1$, and then after them all the digits painted in the color $2$, then the resulting sequence of $n$ digits will be non-decreasing (that is, each next digit will be greater than or equal to the previous digit). \n\nFor example, for the sequence $d=914$ the only valid coloring is $211$ (paint in the color $1$ two last digits, paint in the color $2$ the first digit). But $122$ is not a valid coloring ($9$ concatenated with $14$ is not a non-decreasing sequence).\n\nIt is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions.\n\nFind any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the length of a given sequence of digits.\n\nThe next line contains a sequence of $n$ digits $d_1d_2 \\dots d_{n}$ ($0 \\le d_i \\le 9$). The digits are written in a row without spaces or any other separators. The sequence can start with 0.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines \u2014 the answers to each of the test cases in the input.\n\nIf there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of $n$ digits $t_1t_2 \\dots t_n$ ($1 \\le t_i \\le 2$), where $t_i$ is the color the $i$-th digit is painted in. If there are several feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding output line should contain a single character '-' (the minus sign).\n\n\n-----Example-----\nInput\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\nOutput\n121212211211\n1\n222222222\n21\n-\n\n\n\n-----Note-----\n\nIn the first test case, $d=040425524644$. The output $t=121212211211$ is correct because $0022444$ (painted in $1$) concatenated with $44556$ (painted in $2$) is $002244444556$ which is a sorted sequence of $n$ given digits.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a graph of $n$ nodes and $m$ bidirectional edges.\nThe cost for each edge is either $a$ or $b$.\nThe graph is fully-connected, so you can travel between any pair of nodes using the edges. \n\nFor each node $p = 1, 2, \\dots, n$, you need to remove some edges so that:\nIt will be possible to travel between each pair of nodes using the remaining edges only, and\nthe sum of times required to pass each remaining road will be the minimum possible.\nYou should output the minimum time required to travel between node $1$ and node $p$.\n\n\n-----Input-----\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($2 \\leq n \\leq 70$, $n - 1 \\leq m \\leq 200$, $1 \\leq a < b \\leq 10^7$) \u2014 the number of nodes and edges in the graph, and two possible travel times. Each of the following lines contains three integers $u, v, c$ ($1 \\leq u, v \\leq n$, $u \\neq v$, $c \\in \\{a, b\\}$) denoting an edge between the nodes $u$ and $v$, which has cost $c$.\n\nYou can assume that the graph is connected and has no loops or multiedges.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers. The $p$-th of them should denote the minimum possible post required to travel from $1$ to $p$ after the selected edges are abandoned. Note that for each $p$ you can abandon a different set of edges.\n\n\n-----Examples-----\nInput\n5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n\nOutput\n0 25 60 40 20\n\nInput\n6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n\nOutput\n0 13 26 39 26 13\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nCodefortia is a small island country located somewhere in the West Pacific. It consists of $n$ settlements connected by $m$ bidirectional gravel roads. Curiously enough, the beliefs of the inhabitants require the time needed to pass each road to be equal either to $a$ or $b$ seconds. It's guaranteed that one can go between any pair of settlements by following a sequence of roads.\n\nCodefortia was recently struck by the financial crisis. Therefore, the king decided to abandon some of the roads so that:\n\n  it will be possible to travel between each pair of cities using the remaining roads only,  the sum of times required to pass each remaining road will be minimum possible (in other words, remaining roads must form minimum spanning tree, using the time to pass the road as its weight),  among all the plans minimizing the sum of times above, the time required to travel between the king's residence (in settlement $1$) and the parliament house (in settlement $p$) using the remaining roads only will be minimum possible. \n\nThe king, however, forgot where the parliament house was. For each settlement $p = 1, 2, \\dots, n$, can you tell what is the minimum time required to travel between the king's residence and the parliament house (located in settlement $p$) after some roads are abandoned?\n\n\n-----Input-----\n\nThe first line of the input contains four integers $n$, $m$, $a$ and $b$ ($2 \\leq n \\leq 70$, $n - 1 \\leq m \\leq 200$, $1 \\leq a < b \\leq 10^7$) \u2014 the number of settlements and gravel roads in Codefortia, and two possible travel times. Each of the following lines contains three integers $u, v, c$ ($1 \\leq u, v \\leq n$, $u \\neq v$, $c \\in \\{a, b\\}$) denoting a single gravel road between the settlements $u$ and $v$, which requires $c$ minutes to travel.\n\nYou can assume that the road network is connected and has no loops or multiedges.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers. The $p$-th of them should denote the minimum possible time required to travel from $1$ to $p$ after the selected roads are abandoned. Note that for each $p$ you can abandon a different set of roads.\n\n\n-----Examples-----\nInput\n5 5 20 25\n1 2 25\n2 3 25\n3 4 20\n4 5 20\n5 1 20\n\nOutput\n0 25 60 40 20\n\nInput\n6 7 13 22\n1 2 13\n2 3 13\n1 4 22\n3 4 13\n4 5 13\n5 6 13\n6 1 13\n\nOutput\n0 13 26 39 26 13\n\n\n\n-----Note-----\n\nThe minimum possible sum of times required to pass each road in the first example is $85$ \u2014 exactly one of the roads with passing time $25$ must be abandoned. Note that after one of these roads is abandoned, it's now impossible to travel between settlements $1$ and $3$ in time $50$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nThere are n psycho standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. A psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]  \u2192  [10 8 4]  \u2192  [10]. So, there are two steps.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $i,i+1$ adjacent for $i<n$ and also elements $1$ and $n$) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\n\n\n-----Note-----\n\nIn the first test case $p = [1, 2, 3]$.\n\nIt is a correct answer, because:\n\n  $p_1 = 1 = a_1$, $p_2 = 2 = b_2$, $p_3 = 3 = c_3$  $p_1 \\neq p_2 $, $p_2 \\neq p_3 $, $p_3 \\neq p_1$ \n\nAll possible correct answers to this test case are: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$.\n\nIn the second test case $p = [1, 2, 1, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = a_3$, $p_4 = a_4$. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case $p = [1, 3, 4, 3, 2, 4, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = b_3$, $p_4 = b_4$, $p_5 = b_5$, $p_6 = c_6$, $p_7 = c_7$. Also we can see, that no two adjacent elements of the sequence are equal.\n\"\"\"\ndef code():"
}