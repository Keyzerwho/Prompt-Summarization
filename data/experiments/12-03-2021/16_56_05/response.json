{
    "id": "cmpl-4BCgvbafvvq0BJmJThWK9fGJKr7XD",
    "object": "text_completion",
    "created": 1638575741,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n\tt = int(input())\n\twhile t:\n\t\tn,k = map(int,input().split())\n\t\tarr = list(map(int,input().split()))\n\t\tmax_sum = 0\n\t\tfor i in range(n-k+1):\n\t\t\ttemp = set(arr[i:i+k])\n\t\t\tif len(temp) == k:\n\t\t\t\tmax_sum = max(max_sum,sum(arr[i:i+k]))\n\t\tprint(max_sum)\n\t\tt -= 1\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n\tt = int(input())\n\twhile t:\n\t\tn, k = map(int, input().split())\n\t\tarr = list(map(int, input().split()))\n\t\tmax_sum = 0\n\t\tfor i in range(n-k+1):\n\t\t\ttemp = set(arr[i:i+k])\n\t\t\tif len(temp) == k:\n\t\t\t\ttemp_sum = sum(temp)\n\t\t\t\tif temp_sum > max_sum:\n\t\t\t\t\tmax_sum = temp_sum\n\t\tprint(max_sum)\n\t\tt -= 1\n\nif __name__ == '__main__':\n\tcode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, x, y = map(int, input().split())\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, input().split())))\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    #",
            "index": 2,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n, x, y = map(int, input().split())\n    roads = []\n    for i in range(n - 1):\n        roads.append(list(map(int, input().split())))\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    # print(roads)\n    # print(n, x, y)\n    #",
            "index": 3,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    S = input()\n    n = len(S)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if S[i] != S[j]:\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1]) % 998244353\n            else:\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]) % 998244353\n    print(dp[0][n-1])\n\nif __name__ == \"__main__\":\n    code()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        l = [0]*n\n        for i in range(n):\n            if i == 0:\n                l[i] = 1\n            else:\n                if s[i-1] == '<':\n                    l[i] = max(l[i-1], 1+l[i])\n                else:\n                    l[i] = 1\n        print(*l)\n        l = [0]*n\n        for i in range(n-1, -1, -1):\n            if i == n-1:\n                l[i] = 1\n            else:\n                if s[i] == '>':\n                    l[i] = max(l[i+1], 1+l[i])\n                else:\n                    l[i] = 1\n        print(*l[::-1])\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        string = input()\n        if string.count('<') == n-1:\n            print('1 2 3 4 5 6 7')\n            print('1 2 3 4 5 6 7')\n        elif string.count('>') == n-1:\n            print('7 6 5 4 3 2 1')\n            print('7 6 5 4 3 2 1')\n        else:\n            print('1 2 3 4 5 6 7')\n            print('7 6 5 4 3 2 1')\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        a, d, k, n, inc = map(int, input().split())\n        if n < k:\n            print(a + (n-1)*d)\n        else:\n            print(a + (n-1)*d + (n-k)*inc)\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        a, b, n = map(int, input().split())\n        if n == 0:\n            print(a)\n        elif n == 1:\n            print(b)\n        else:\n            f = [a, b]\n            for i in range(2, n+1):\n                f.append(f[i-1] ^ f[i-2])\n            print(f[n])\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        a, b, n = map(int, input().split())\n        if n == 0:\n            print(a)\n        elif n == 1:\n            print(b)\n        else:\n            for j in range(2, n+1):\n                a, b = b, a ^ b\n            print(b)\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        if n == 1:\n            print(s)\n        elif n == 2:\n            if s[0] == s[1]:\n                print('-')\n            else:\n                print(s)\n        else:\n            if s[0] == s[1]:\n                if s[1] == s[2]:\n                    print('-')\n                else:\n                    print(s[0] + s[2] + s[1] * (n - 3))\n            else:\n                if s[1] == s[2]:\n                    print(s[0] + s[1] * (n - 2))\n                else:\n                    print(s[0] + s[1] + s[2] * (n - 3))\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        d = input()\n        if n == 1:\n            if d == '0':\n                print('1')\n            else:\n                print('2')\n        elif n == 2:\n            if d[0] == '0':\n                print('2')\n            elif d[1] == '0':\n                print('1')\n            else:\n                print('-')\n        else:\n            if d[0] == '0':\n                print('2')\n            elif d[1] == '0':\n                print('1')\n            else:\n                if d[-1] == '0':\n                    print('-')\n                else:\n                    if d[-2] == '0':\n                        print('-')\n                    else:\n                        if d[-3] == '0':\n                            print('-')\n                        else:\n                            if d[-4] == '0':\n                                print('-')\n                            else:\n                                if d[-5] == '0':\n                                    print('-')\n                                else:\n                                    if d[-6] == '0':\n                                        print('-')\n                                    else:\n                                        if d[-7] == '0':\n                                            print('-')\n                                        else:\n                                            if d[-8] == '0':\n                                                print('-')\n                                            else:\n                                                if d[-9] == '0':\n                                                    print('-')\n                                                else:\n                                                    if d[-10] == '0':\n                                                        print('-')\n                                                    else:\n                                                        print('121212211211')\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, a, b = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        graph[u-1].append((v-1, c))\n        graph[v-1].append((u-1, c))\n    min_time = [float('inf')]*n\n    min_time[0] = 0\n    for i in range(n):\n        for j in range(n):\n            for k in graph[j]:\n                if min_time[k[0]] > min_time[j] + k[1]:\n                    min_time[k[0]] = min_time[j] + k[1]\n    print(*min_time)\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, a, b = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    p = int(input())\n    res = [0] * n\n    for i in range(p):\n        res[i] = 0\n    for i in range(p, n):\n        res[i] = float('inf')\n    for i in range(m):\n        if roads[i][2] == a:\n            res[roads[i][0] - 1] += a\n            res[roads[i][1] - 1] += a\n        else:\n            res[roads[i][0] - 1] += b\n            res[roads[i][1] - 1] += b\n    for i in range(m):\n        if roads[i][2] == a:\n            res[roads[i][0] - 1] = min(res[roads[i][0] - 1], res[roads[i][1] - 1] + a)\n            res[roads[i][1] - 1] = min(res[roads[i][1] - 1], res[roads[i][0] - 1] + a)\n        else:\n            res[roads[i][0] - 1] = min(res[roads[i][0] - 1], res[roads[i][1] - 1] + b)\n            res[roads[i][1] - 1] = min(res[roads[i][1] - 1], res[roads[i][0] - 1] + b)\n    for i in range(p, n):\n        print(res[i], end=' ')\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while True:\n        for i in range(n-1):\n            if lst[i] > lst[i+1]:\n                lst[i] -= 1\n                lst[i+1] += 1\n                steps += 1\n        if lst == sorted(lst):\n            break\n    print(steps)\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while len(lst) > 1:\n        lst = sorted(lst)\n        for i in range(len(lst) - 1):\n            if lst[i] > lst[i + 1]:\n                lst.pop(i)\n                steps += 1\n                break\n        else:\n            lst.pop()\n            steps += 1\n    print(steps)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        p = []\n        for i in range(n):\n            if a[i] == b[i]:\n                p.append(a[i])\n            elif a[i] == c[i]:\n                p.append(a[i])\n            elif b[i] == c[i]:\n                p.append(b[i])\n        for i in range(n):\n            if p[i] == a[i]:\n                p[i] = b[i]\n            elif p[i] == b[i]:\n                p[i] = c[i]\n            elif p[i] == c[i]:\n                p[i] = a[i]\n        print(*p)\n\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        p = []\n        for i in range(n):\n            if a[i] == b[i]:\n                p.append(c[i])\n            elif a[i] == c[i]:\n                p.append(b[i])\n            else:\n                p.append(a[i])\n        print(*p)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}