{
    "0": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array.\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$, what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array (after the removal, the remaining parts are concatenated).\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$ (making them impossible to remove), what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\n-----Note-----\n\nExplanation of the first query:\n\nAfter making first $x = 3$ and last $y = 1$ elements impossible to remove, $a$ becomes $[\\times, \\times, \\times, 9, 5, 4, 6, 5, 7, 8, 3, 11, \\times]$ (we represent $14$ as $\\times$ for clarity).\n\nHere is a strategy that removes $5$ elements (the element removed is colored in red):  $[\\times, \\times, \\times, 9, \\color{red}{5}, 4, 6, 5, 7, 8, 3, 11, \\times]$  $[\\times, \\times, \\times, 9, 4, 6, 5, 7, 8, 3, \\color{red}{11}, \\times]$  $[\\times, \\times, \\times, 9, 4, \\color{red}{6}, 5, 7, 8, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 7, \\color{red}{8}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, \\color{red}{7}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 3, \\times]$ (final state) \n\nIt is impossible to remove more than $5$ elements, hence the weight is $5$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given following inputs: original string S, starting index i, source word x and target word y. \n\nIf x starts at position i in S, you need to replace that occurrence of x with y.\n\nConsider:\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "3": "Python 3\n\"\"\"\nTo some string S, we will perform some\u00a0replacement\u00a0operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word\u00a0x\u00a0and a target word\u00a0y.\u00a0 The rule is that if x\u00a0starts at position i\u00a0in the original string S, then we will replace that occurrence of\u00a0x\u00a0with\u00a0y.\u00a0 If not, we do nothing.\nFor example, if we have\u00a0S = \"abcd\"\u00a0and we have some replacement operation\u00a0i = 2, x = \"cd\", y = \"ffff\", then because\u00a0\"cd\"\u00a0starts at position 2\u00a0in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation\u00a0i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string\u00a0S[2] = 'c', which doesn't match\u00a0x[0] = 'e'.\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "4": "Python 3\n\"\"\"\nYou are given two numbers X and Y.\n\nIn one step, you can either double the value of X, or decrement X by 1.\n\nReturn the minimum number of steps required before the value of X equals Y.\n\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "5": "Python 3\n\"\"\"\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "6": "Python 3\n\"\"\"\nObtain the solutions to 2^n for a given n and display their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThe chef won a duet singing award at Techsurge & Mridang 2012. From that time he is obsessed with the number 2.\n\nHe just started calculating the powers of two. And adding the digits of the results.\n\nBut he got puzzled after a few calculations. So gave you the job to generate the solutions to 2^n and find their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\nExplanation:\n2^5=32\n3+2=5\n2^10=1024\n1+0+2+4=7\n2^4=16\n1+6=7\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\n\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\n-----General Statement:-----\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Discussion:-----\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nInitially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place. \n\nThere is a entity at position (0, 0). Given a sequence of its moves, judge if entity moves back to the original place. \n\nThe move sequence is represented by a string. And each move is represent by a character. The valid entity moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the entity makes a circle.\n\n\nExample 1:\n\nInput: \"UD\"\nOutput: true\n\n\n\nExample 2:\n\nInput: \"LL\"\nOutput: false\n\n\"\"\"\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:",
    "11": "Python 3\n\"\"\"\nInitially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place. \n\n\n\nThe move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.\n\n\nExample 1:\n\nInput: \"UD\"\nOutput: true\n\n\n\nExample 2:\n\nInput: \"LL\"\nOutput: false\n\"\"\"\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:",
    "12": "Python 3\n\"\"\"\n\nGiven $t$ pairs of integers $p_i$ and $q_i$ and for each pair decided to find the greatest integer $x_i$, such that:   $p_i$ is divisible by $x_i$;  $x_i$ is not divisible by $q_i$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 50$)\u00a0\u2014 the number of pairs.\n\nEach of the following $t$ lines contains two integers $p_i$ and $q_i$ ($1 \\le p_i \\le 10^{18}$; $2 \\le q_i \\le 10^{9}$)\u00a0\u2014 the $i$-th pair of integers.\n\n\n-----Output-----\n\nPrint $t$ integers: the $i$-th integer is the largest $x_i$ such that $p_i$ is divisible by $x_i$, but $x_i$ is not divisible by $q_i$.\n\nOne can show that there is always at least one value of $x_i$ satisfying the divisibility conditions for the given constraints.\n\n\n-----Example-----\nInput\n3\n10 4\n12 6\n179 822\n\nOutput\n10\n4\n179\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nOleg's favorite subjects are History and Math, and his favorite branch of mathematics is division.\n\nTo improve his division skills, Oleg came up with $t$ pairs of integers $p_i$ and $q_i$ and for each pair decided to find the greatest integer $x_i$, such that:   $p_i$ is divisible by $x_i$;  $x_i$ is not divisible by $q_i$.  Oleg is really good at division and managed to find all the answers quickly, how about you?\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 50$)\u00a0\u2014 the number of pairs.\n\nEach of the following $t$ lines contains two integers $p_i$ and $q_i$ ($1 \\le p_i \\le 10^{18}$; $2 \\le q_i \\le 10^{9}$)\u00a0\u2014 the $i$-th pair of integers.\n\n\n-----Output-----\n\nPrint $t$ integers: the $i$-th integer is the largest $x_i$ such that $p_i$ is divisible by $x_i$, but $x_i$ is not divisible by $q_i$.\n\nOne can show that there is always at least one value of $x_i$ satisfying the divisibility conditions for the given constraints.\n\n\n-----Example-----\nInput\n3\n10 4\n12 6\n179 822\n\nOutput\n10\n4\n179\n\n\n\n-----Note-----\n\nFor the first pair, where $p_1 = 10$ and $q_1 = 4$, the answer is $x_1 = 10$, since it is the greatest divisor of $10$ and $10$ is not divisible by $4$.\n\nFor the second pair, where $p_2 = 12$ and $q_2 = 6$, note that   $12$ is not a valid $x_2$, since $12$ is divisible by $q_2 = 6$;  $6$ is not valid $x_2$ as well: $6$ is also divisible by $q_2 = 6$.  The next available divisor of $p_2 = 12$ is $4$, which is the answer, since $4$ is not divisible by $6$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007. When you represent s as a decimal number, ignore the leading zeroes.\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". For example, if s = 123123, then query \"2 \u2192 00\" transforms s to 10031003, and query \"3 \u2192 \" meaning \"replace 3 by an empty string\" transforms it to s = 1212. After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007\u00a0(10^9 + 7). When you represent s as a decimal number, please ignore the leading zeroes; also if s is an empty string, then it's assumed that the number equals to zero.\n\nAndrew got tired of processing Eugene's requests manually and he asked you to write a program for that. Help him!\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nNote that the leading zeroes are not removed from string s after the replacement (you can see it in the third sample).\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYour task is to determine whether a palindrome can be made or not by deleting only one character from the given string s.\n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nGiven a string s. Can you make it a palindrome by deleting exactly one character? Note that size of the string after deletion would be one less than it was before. \n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\nSubtask 2, 65 points \n- 2 \u2264  size of string s \u2264 10^5\n-  Sum of size of string s over all the input test cases won't exceed 10^6\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n-----Explanation-----\nExample case 1. Delete any one 'a', resulting string is \"aa\" which is a palindrome.\nExample case 2. It is not possible to delete exactly one character and having a palindrome.\nExample case 3. Delete 'c', resulting string is \"abdba\" which is a palindrome. \nExample case 4. Delete 'b', resulting string is \"aba\" which is a palindrome.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given an array $a$ of item of size $N$.Only one type of item can be chosen in a day and purchased at most 2 items of that type.Find minimum number of days in which all items are purchased.\n\n-----Input:-----\n- First-line will contain $N$, the number of item.  \n- The next line will contain $N$ space integers denoting the type of item.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nDinesh is very fond of sweets recently his aunt Riya gifted him an array $a$ of sweets of size $N$. The ith sweet is of the type $a[i]$. His mother told him that he can choose one type of sweet in a day and eat at most 2 sweets of that type. Since he has to eat all the sweets as quickly as possible because his cousins are arriving. Find out the minimum number of days in which he can eat all the sweets gifted by his aunt Riya. \n\n-----Input:-----\n- First-line will contain $N$, the number of sweets.  \n- The next line will contain $N$ space integers denoting the type of sweets.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():"
}