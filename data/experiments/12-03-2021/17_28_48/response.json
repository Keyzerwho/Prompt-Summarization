{
    "id": "cmpl-4BDCrt8i2DdiV0s1SftXehb0XXOmi",
    "object": "text_completion",
    "created": 1638577721,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a = int(input())\n        b = int(input())\n        l = int(input())\n        print(a//b%l)\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a = int(input())\n        b = int(input())\n        l = int(input())\n        print(a % b)\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if operator == '+':\n        return value1 + value2\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2\n    elif operator == '/':\n        return value1 / value2",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if operator == '+':\n        return value1 + value2\n    elif operator == '-':\n        return value1 - value2\n    elif operator == '*':\n        return value1 * value2\n    elif operator == '/':\n        return value1 / value2\n    else:\n        return 'Invalid operator'",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    mod = 998244353\n    dp = [[0 for i in range(n)] for j in range(k+1)]\n    for i in range(n):\n        dp[1][i] = a[i]\n    for i in range(2, k+1):\n        for j in range(n):\n            for l in range(j):\n                dp[i][j] += dp[i-1][l] * a[j]\n            dp[i][j] %= mod\n    for i in range(k):\n        print(dp[i+1][n-1])\n\ndef main():\n    code()\n\nif __name__ == \"__main__\":\n    main()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    dp = [[0 for i in range(n)] for j in range(k+1)]\n    for i in range(n):\n        dp[1][i] = a[i]\n    for i in range(2, k+1):\n        for j in range(n):\n            for l in range(j+1):\n                dp[i][j] += dp[i-1][l] * a[j]\n    for i in range(k):\n        print(dp[i+1][-1] % 998244353)\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return [i for i in range(1, n+1)]",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return list(range(1, n+1))",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        x, y, a, b = map(int, input().split())\n        if a > b:\n            a, b = b, a\n        if x < y:\n            if a > b:\n                print(-1)\n            else:\n                print(int((y - x - 1) / (a - b) + 1))\n        else:\n            if a > b:\n                print(int((y - x + 1) / (a - b) + 1))\n            else:\n                print(-1)\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    test_cases = int(input())\n    for _ in range(test_cases):\n        x, y, a, b = map(int, input().split())\n        if a == b:\n            print(-1)\n        else:\n            if (y - x) % (a - b) == 0:\n                print((y - x) // (a - b))\n            else:\n                print(-1)\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sum(int(i) for i in re.findall(r'\\d+', string))",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    #your code here\n    return sum(map(int, re.findall(r'\\d+', string)))",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        return True",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        return True",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = input()\n    a = a.replace('0','')\n    a = a.replace('1','')\n    print(a)\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = input()\n    a = a[::-1]\n    max = 0\n    for i in range(len(a)):\n        if a[i] == '1':\n            max = i\n            break\n    print(a[:max] + a[max+1:])\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        a,b = map(int,input().split())\n        print(a+b)\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        A, B = map(int, input().split())\n        print(A+B)\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        \n        pass\n\n\nif __name__ == '__main__':\n    assert Solution().kthSmallest(0) == 0",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        stack = []\n        while True:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            k -= 1\n            if not k:\n                return root.val\n            root = root.right",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}