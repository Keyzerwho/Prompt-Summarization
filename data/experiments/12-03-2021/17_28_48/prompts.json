{
    "0": "Python 3\n\"\"\"\nYou are given two integers \u2014 A and B \u2014 in 7-ary system. Find C, such that B * C = A and  B is a divisor of A. Calculate the number C modulo 7L.\n\n-----Input-----\n\nFirst line of input contains an integer T \u2014 the number of test cases. T tests follow.\n\nFor each test case, the first line contains the integer A, and the second line contains the integer B, and the third line contains the integer L. A and B are given in 7-ary system.\n\n-----Output-----\nOutput the answer in 7-ary system.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- A and B are both positive integers.\n- Length of A is a positive integer and doesn't exceed 106.\n- L and length of B are positive integers and do not exceed 10000.\n\n\n-----Example-----\nInput:3\n21\n5\n10\n202\n13\n1\n202\n13\n2\n\nOutput:3\n3\n13\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSereja has two integers \u2014 A and B \u2014 in 7-ary system. He wants to calculate the number C, such that B * C = A. It is guaranteed that B is a divisor of A.\n\nPlease, help Sereja calculate the number C modulo 7L.\n\n-----Input-----\n\nFirst line of input contains an integer T \u2014 the number of test cases. T tests follow.\n\nFor each test case, the first line contains the integer A, and the second line contains the integer B, and the third line contains the integer L. A and B are given in 7-ary system.\n\n-----Output-----\nOutput the answer in 7-ary system.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- A and B are both positive integers.\n- Length of A is a positive integer and doesn't exceed 106.\n- L and length of B are positive integers and do not exceed 10000.\n\n-----Subtasks-----\n- Sub task #1 (20 points): Length of A is a positive integer and doesn't exceed 20.\n- Sub task #2 (30 points): Length of A is a positive integer and doesn't exceed 2000.\n- Sub task #3 (50 points): Original constraints.\n\n-----Example-----\nInput:3\n21\n5\n10\n202\n13\n1\n202\n13\n2\n\nOutput:3\n3\n13\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given an operation and two values. Your task is to create a function that does four basic mathematical operations and return the result.\n\nExample 1:\nInput: basic_op('+', 4, 7)         \nOutput: 11\n\nExample 2:\nInput: basic_op('-', 15, 18)\nOutput: -3\n\nExample 3:\nInput: basic_op('*', 5, 5)\nOutput: 25\n\nExample 4:\nInput: basic_op('/', 49, 7)\nOutput: 7\n\n\"\"\"\ndef basic_op(operator, value1, value2):",
    "3": "Python 3\n\"\"\"\nYour task is to create a function that does four basic mathematical operations.\n\nThe function should take three arguments - operation(string/char), value1(number), value2(number).  \nThe function should return result of numbers after applying the chosen operation.\n\n### Examples\n\n```python\nbasic_op('+', 4, 7)         # Output: 11\nbasic_op('-', 15, 18)       # Output: -3\nbasic_op('*', 5, 5)         # Output: 25\nbasic_op('/', 49, 7)        # Output: 7\n```\n\"\"\"\ndef basic_op(operator, value1, value2):",
    "4": "Python 3\n\"\"\"\nGiven are integer sequence of length N, A = (A_1, A_2, \\cdots, A_N), and an integer K.\nFor each X such that 1 \\le X \\le K, find the following value:\n\\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X\\right) \\bmod 998244353\n\n-----Constraints-----\n - All values in input are integers.\n -  2 \\le N \\le 2 \\times 10^5\n -  1 \\le K \\le 300 \n -  1 \\le A_i \\le 10^8 \n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint K lines.\nThe X-th line should contain the value \\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X \\right) \\bmod 998244353.\n\n-----Sample Input-----\n3 3\n1 2 3\n\n-----Sample Output-----\n12\n50\n216\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nGiven are integer sequence of length N, A = (A_1, A_2, \\cdots, A_N), and an integer K.\nFor each X such that 1 \\le X \\le K, find the following value:\n\\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X\\right) \\bmod 998244353\n\n-----Constraints-----\n - All values in input are integers.\n -  2 \\le N \\le 2 \\times 10^5\n -  1 \\le K \\le 300 \n -  1 \\le A_i \\le 10^8 \n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint K lines.\nThe X-th line should contain the value \\left(\\displaystyle \\sum_{L=1}^{N-1} \\sum_{R=L+1}^{N} (A_L+A_R)^X \\right) \\bmod 998244353.\n\n-----Sample Input-----\n3 3\n1 2 3\n\n-----Sample Output-----\n12\n50\n216\n\nIn the 1-st line, we should print (1+2)^1 + (1+3)^1 + (2+3)^1 = 3 + 4 + 5 = 12.\nIn the 2-nd line, we should print (1+2)^2 + (1+3)^2 + (2+3)^2 = 9 + 16 + 25 = 50.\nIn the 3-rd line, we should print (1+2)^3 + (1+3)^3 + (2+3)^3 = 27 + 64 + 125 = 216.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven the number n, populate an array with all numbers up to and including that number, but excluding zero.\n\nExamples:\nInput:\nmonkeyCount(10)\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nInput:\nmonkeyCount(1)\nOutput:\n[1]\n\"\"\"\ndef monkey_count(n):",
    "7": "Python 3\n\"\"\"\nYou take your son to the forest to see the monkeys. You know that there are a certain number there (n), but your son is too young to just appreciate the full number, he has to start counting them from 1.\n\nAs a good parent, you will sit and count with him. Given the number (n), populate an array with all numbers up to and including that number, but excluding zero.\n\nFor example:\n```python\nmonkeyCount(10) # --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmonkeyCount(1) # --> [1]\n```\n\"\"\"\ndef monkey_count(n):",
    "8": "Python 3\n\"\"\"\nYou are given two entities A and B and their positions are represented by integer coordinates on a horizantal line. the first position $x$ and a second position $y$. The Entity A moves in the positive direction by $a$, and the entity b moves to the negative direction by $b$.\n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, entities will be at position $2$ and $7$. At the $2$-nd second, both A and B will be at position $4$.\n\nWill the two entities be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the entities will be at the same point.\n\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$).\n\nEach test case contains exactly one line. The line consists of four integers $x$, $y$, $a$, $b$ ($0 \\le x \\lt y \\le 10^9$, $1 \\le a,b \\le 10^9$) \u2014 the current position of the entity A , the current position of the entity b, the moving distance of the entity A, and the moving distance of the entity b, respectively.\n\n\n-----Output-----\n\nFor each test case, print the single integer: number of seconds the two entities will take to be at the same position.\n\nIf the two entities will never be at the same position simultaneously, print $-1$.\n\n\n-----Example-----\nInput\n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput\n2\n-1\n10\n-1\n1\n\n\n\n-----Note-----\n\nThe first case is explained in the description.\n\nIn the second case, each rabbit will be at position $3$ and $7$ respectively at the $1$-st second. But in the $2$-nd second they will be at $6$ and $4$ respectively, and we can see that they will never be at the same position since the distance between the two rabbits will only increase afterward.\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nBeing tired of participating in too many Codeforces rounds, Gildong decided to take some rest in a park. He sat down on a bench, and soon he found two rabbits hopping around. One of the rabbits was taller than the other.\n\nHe noticed that the two rabbits were hopping towards each other. The positions of the two rabbits can be represented as integer coordinates on a horizontal line. The taller rabbit is currently on position $x$, and the shorter rabbit is currently on position $y$ ($x \\lt y$). Every second, each rabbit hops to another position. The taller rabbit hops to the positive direction by $a$, and the shorter rabbit hops to the negative direction by $b$.\n\n [Image] \n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, each rabbit will be at position $2$ and $7$. At the $2$-nd second, both rabbits will be at position $4$.\n\nGildong is now wondering: Will the two rabbits be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the rabbits will be at the same point.\n\n\n-----Input-----\n\nEach test contains one or more test cases. The first line contains the number of test cases $t$ ($1 \\le t \\le 1000$).\n\nEach test case contains exactly one line. The line consists of four integers $x$, $y$, $a$, $b$ ($0 \\le x \\lt y \\le 10^9$, $1 \\le a,b \\le 10^9$) \u2014 the current position of the taller rabbit, the current position of the shorter rabbit, the hopping distance of the taller rabbit, and the hopping distance of the shorter rabbit, respectively.\n\n\n-----Output-----\n\nFor each test case, print the single integer: number of seconds the two rabbits will take to be at the same position.\n\nIf the two rabbits will never be at the same position simultaneously, print $-1$.\n\n\n-----Example-----\nInput\n5\n0 10 2 3\n0 10 3 3\n900000000 1000000000 1 9999999\n1 2 1 1\n1 3 1 1\n\nOutput\n2\n-1\n10\n-1\n1\n\n\n\n-----Note-----\n\nThe first case is explained in the description.\n\nIn the second case, each rabbit will be at position $3$ and $7$ respectively at the $1$-st second. But in the $2$-nd second they will be at $6$ and $4$ respectively, and we can see that they will never be at the same position since the distance between the two rabbits will only increase afterward.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nGiven a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. Consecutive integers should be treated as a single number and all the numbers should be treaded as positive integer. If no number was given in the string, it should return 0.\n\nExamples:\nInput:\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\nOutput:\n2021\nExplanation:\nThe numbers are 2015 and 6.\n\"\"\"\ndef sum_from_string(string):",
    "11": "Python 3\n\"\"\"\nGiven a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. \n\nNote:\n\n- Consecutive integers should be treated as a single number. eg, `2015` should be treated as a single number `2015`, NOT four numbers\n- All the numbers should be treaded as positive integer. eg, `11-14` should be treated as two numbers `11` and `14`. Same as `3.14`, should be treated as two numbers `3` and `14`\n- If no number was given in the string, it should return `0`\n\n\nExample:\n\n```\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\n```\n\n The numbers are `2015`, `6`\n\nSum is `2021`.\n\"\"\"\ndef sum_from_string(string):",
    "12": "Python 3\n\"\"\"\nAlex and Lee play a game with a list of numbers. There are an even number of\u00a0elements in the list and each value has a positive integer number.\nThe objective of the game is to end with largest value. The total sum of values is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first. Each turn, a player\u00a0takes value from either the beginning or the end of the list.\u00a0This continues until there are no more values left, at which point the person with the largest value wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\n\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\n\"\"\"\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:",
    "13": "Python 3\n\"\"\"\nAlex and Lee play a game with piles of stones.\u00a0 There are an even number of\u00a0piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most\u00a0stones.\u00a0 The total number of stones is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first.\u00a0 Each turn, a player\u00a0takes the entire pile of stones from either the beginning or the end of the row.\u00a0 This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\u00a0\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\"\"\"\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:",
    "14": "Python 3\n\"\"\"\nGiven an integer a in binary notation. Print the maximum number that can be obtained after removing one digit from a and keeping the remaining digits in the same order. \n\n-----Input-----\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 10^5 digits.\n\n\n-----Output-----\n\nIn the single line print the number that is written without leading zeroes in the binary notation \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n101\n\nOutput\n11\n\nInput\n110010\n\nOutput\n11010\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe Little Elephant has an integer a, written in the binary notation. He wants to write this number on a piece of paper.\n\nTo make sure that the number a fits on the piece of paper, the Little Elephant ought to delete exactly one any digit from number a in the binary record. At that a new number appears. It consists of the remaining binary digits, written in the corresponding order (possible, with leading zeroes).\n\nThe Little Elephant wants the number he is going to write on the paper to be as large as possible. Help him find the maximum number that he can obtain after deleting exactly one binary digit and print it in the binary notation.\n\n\n-----Input-----\n\nThe single line contains integer a, written in the binary notation without leading zeroes. This number contains more than 1 and at most 10^5 digits.\n\n\n-----Output-----\n\nIn the single line print the number that is written without leading zeroes in the binary notation \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n101\n\nOutput\n11\n\nInput\n110010\n\nOutput\n11010\n\n\n\n-----Note-----\n\nIn the first sample the best strategy is to delete the second digit. That results in number 11_2 = 3_10.\n\nIn the second sample the best strategy is to delete the third or fourth digits \u2014 that results in number 11010_2 = 26_10.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n\n\nYou are given two integers A and B, write a program to add these two numbers.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, add A and B and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n10 40\n\nOutput\n3\n300\n50\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nShivam is the youngest programmer in the world, he is just 12 years old. Shivam is learning programming and today he is writing his first program. \n\nProgram is very simple, Given two integers A and B, write a program to add these two numbers.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, add A and B and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n10 40\n\nOutput\n3\n300\n50\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven a binary search tree, write a function to find the kth smallest element in it.\n\nNote: \n1 \u2264 k \u2264 BST's total elements.\n\nExample 1:\n\n\nInput: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n\u00a0  2\nOutput: 1\n\nExample 2:\n\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\nOutput: 3\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:",
    "19": "Python 3\n\"\"\"\nGiven a binary search tree, write a function kthSmallest to find the kth smallest element in it.\n\nNote: \nYou may assume k is always valid, 1 \u2264 k \u2264 BST's total elements.\n\nExample 1:\n\n\nInput: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n\u00a0  2\nOutput: 1\n\nExample 2:\n\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\nOutput: 3\n\n\nFollow up:\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:"
}