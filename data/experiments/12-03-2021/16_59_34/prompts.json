{
    "0": "Python 3\n\"\"\"\nThe BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \\le d \\le n$) days in a row?\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input. Then $t$ test case descriptions follow.\n\nThe first line of each test case contains three integers $n, k$ and $d$ ($1 \\le n \\le 2\\cdot10^5$, $1 \\le k \\le 10^6$, $1 \\le d \\le n$). The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show that is broadcasted on the $i$-th day.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ integers \u2014 the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for $d$ consecutive days. Please note that it is permissible that you will be able to watch more than $d$ days in a row.\n\n\n-----Example-----\nInput\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\nOutput\n2\n1\n4\n5\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \\le d \\le n$) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of $d$ consecutive days in which all episodes belong to the purchased shows.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input. Then $t$ test case descriptions follow.\n\nThe first line of each test case contains three integers $n, k$ and $d$ ($1 \\le n \\le 2\\cdot10^5$, $1 \\le k \\le 10^6$, $1 \\le d \\le n$). The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le k$), where $a_i$ is the show that is broadcasted on the $i$-th day.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ integers \u2014 the answers to the test cases in the input in the order they follow. The answer to a test case is the minimum number of TV shows for which you need to purchase a subscription so that you can watch episodes of the purchased TV shows on BerTV for $d$ consecutive days. Please note that it is permissible that you will be able to watch more than $d$ days in a row.\n\n\n-----Example-----\nInput\n4\n5 2 2\n1 2 1 2 1\n9 3 3\n3 3 3 2 2 2 1 1 1\n4 10 4\n10 8 6 4\n16 9 8\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\n\nOutput\n2\n1\n4\n5\n\n\n\n-----Note-----\n\nIn the first test case to have an opportunity to watch shows for two consecutive days, you need to buy a subscription on show $1$ and on show $2$. So the answer is two.\n\nIn the second test case, you can buy a subscription to any show because for each show you can find a segment of three consecutive days, consisting only of episodes of this show.\n\nIn the third test case in the unique segment of four days, you have four different shows, so you need to buy a subscription to all these four shows.\n\nIn the fourth test case, you can buy subscriptions to shows $3,5,7,8,9$, and you will be able to watch shows for the last eight days.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L.\n\n# Example\n\n For `cell = \"a1\"`, the output should be `2`.\n\n For `cell = \"c2\"`, the output should be `6`.\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 \u00d7 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"\ndef chess_knight(cell):",
    "3": "Python 3\n\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/knight.jpg?_tm=1473533979951)\n\n# Example\n\n For `cell = \"a1\"`, the output should be `2`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/ex_1.jpg?_tm=1473533980197)\n\n For `cell = \"c2\"`, the output should be `6`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/ex_2.jpg?_tm=1473533980368)\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 \u00d7 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"\ndef chess_knight(cell):",
    "4": "Python 3\n\"\"\"\nYou have n apples numbered from 1 to n. You have to group them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Each apple can be part of at most one group.\n\nGet the maximum possible number of groups.\n\n\n-----Input-----\n\nA single integer n (1 \u2264 n \u2264 10^5), the number of the apples.\n\n\n-----Output-----\n\nThe first line must contain a single integer m, representing the maximum number of groups he can get. Each of the next m lines must contain two integers \u2014 the numbers of apples in the current group.\n\nIf there are several optimal answers you can print any of them.\n\n\n-----Examples-----\nInput\n6\n\nOutput\n2\n6 3\n2 4\n\nInput\n9\n\nOutput\n3\n9 3\n2 4\n6 8\n\nInput\n2\n\nOutput\n0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nJzzhu has picked n apples from his big apple tree. All the apples are numbered from 1 to n. Now he wants to sell them to an apple store. \n\nJzzhu will pack his apples into groups and then sell them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Of course, each apple can be part of at most one group.\n\nJzzhu wonders how to get the maximum possible number of groups. Can you help him?\n\n\n-----Input-----\n\nA single integer n (1 \u2264 n \u2264 10^5), the number of the apples.\n\n\n-----Output-----\n\nThe first line must contain a single integer m, representing the maximum number of groups he can get. Each of the next m lines must contain two integers \u2014 the numbers of apples in the current group.\n\nIf there are several optimal answers you can print any of them.\n\n\n-----Examples-----\nInput\n6\n\nOutput\n2\n6 3\n2 4\n\nInput\n9\n\nOutput\n3\n9 3\n2 4\n6 8\n\nInput\n2\n\nOutput\n0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou will have to permutate through a string of lowercase letters, each permutation will start at a and you must calculate how many iterations it takes to reach the current permutation.\n\nExamples:\ninput: 'a'\nresult: 1\n\ninput: 'c'\nresult: 3\n\ninput: 'z'\nresult: 26\n\ninput: 'foo'\nresult: 3759\n\ninput: 'aba'\nresult: 27\n\ninput: 'abb'\nresult: 28\n\n\"\"\"\ndef permutation_position(perm):",
    "7": "Python 3\n\"\"\"\n#Permutation  position\nIn this kata you will have to permutate through a string of lowercase letters, each permutation will start at ```a``` and you must calculate how many iterations it takes to reach the current permutation.\n\n##examples\n```\ninput: 'a'\nresult: 1\n\ninput: 'c'\nresult: 3\n\ninput: 'z'\nresult: 26\n\ninput: 'foo'\nresult: 3759\n\ninput: 'aba'\nresult: 27\n\ninput: 'abb'\nresult: 28\n\n```\n\"\"\"\ndef permutation_position(perm):",
    "8": "Python 3\n\"\"\"\nYour translator should take in a string and output it with all odd length words having an extra letter that is the last letter in the word. It should also remove all punctuation as well as any underscores.\n\nExamples:\nInput:\n\"How did we end up here? We go?\"\nOutput:\n\"Howw didd we endd up here We go\"\n\"\"\"\ndef evenator(s):",
    "9": "Python 3\n\"\"\"\nMr. E Ven only likes even length words.\nPlease create a translator so that he doesn't have to hear those pesky odd length words.\nFor some reason he also hates punctuation, he likes his sentences to flow.\n\nYour translator should take in a string and output it with all odd length words having an extra letter (the last letter in the word). It should also remove all punctuation (.,?!) as well as any underscores (_).\n\n\"How did we end up here? We go?\"\ntranslated becomes-> \n\"Howw didd we endd up here We go\"\n\"\"\"\ndef evenator(s):",
    "10": "Python 3\n\"\"\"\nInitially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place. \n\nThere is a entity at position (0, 0). Given a sequence of its moves, judge if entity moves back to the original place. \n\nThe move sequence is represented by a string. And each move is represent by a character. The valid entity moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the entity makes a circle.\n\n\nExample 1:\n\nInput: \"UD\"\nOutput: true\n\n\n\nExample 2:\n\nInput: \"LL\"\nOutput: false\n\n\"\"\"\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:",
    "11": "Python 3\n\"\"\"\nInitially, there is a Robot at position (0, 0). Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place. \n\n\n\nThe move sequence is represented by a string. And each move is represent by a character. The valid robot moves are R (Right), L (Left), U (Up) and D (down). The output should be true or false representing whether the robot makes a circle.\n\n\nExample 1:\n\nInput: \"UD\"\nOutput: true\n\n\n\nExample 2:\n\nInput: \"LL\"\nOutput: false\n\"\"\"\nclass Solution:\n    def judgeCircle(self, moves: str) -> bool:",
    "12": "Python 3\n\"\"\"\nGiven an array containing only zeros and ones, find the index of the zero that, if converted to one, will make the longest sequence of ones.\n\nFor instance, given the array:\n\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1]\n```\n\nreplacing the zero at index 10 forms a sequence of 9 ones:\n\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]\n```\n\nYour task is to complete the function that determines where to replace a zero with a one to make the maximum length subsequence.\nIf there are multiple valid answers, return the last one\n\"\"\"\ndef replace_zero(arr):",
    "13": "Python 3\n\"\"\"\nGiven an array containing only zeros and ones, find the index of the zero that, if converted to one, will make the longest sequence of ones.\n\nFor instance, given the array:\n\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1]\n```\n\nreplacing the zero at index 10 (counting from 0) forms a sequence of 9 ones:\n\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]\n                  '------------^------------'\n```\n\n\nYour task is to complete the function that determines where to replace a zero with a one to make the maximum length subsequence.\n\n\n**Notes:**\n- If there are multiple results, return the last one:\n\n `[1, 1, 0, 1, 1, 0, 1, 1] ==> 5`\n\n\n- The array will always contain only zeros and ones.\n\n\nCan you do this in one pass?\n\"\"\"\ndef replace_zero(arr):",
    "14": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of one element $1$ ($a = [1]$).\n\nIn one move, you can do one of the following things:\n\n  Increase some (single) element of $a$ by $1$ (choose some $i$ from $1$ to the current length of $a$ and increase $a_i$ by one);  Append the copy of some (single) element of $a$ to the end of the array (choose some $i$ from $1$ to the current length of $a$ and append $a_i$ to the end of the array). \n\nYour task is to find the minimum number of moves required to obtain the array with the sum at least $n$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains one integer $n$ ($1 \\le n \\le 10^9$) \u2014 the lower bound on the sum of the array.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of moves required to obtain the array with the sum at least $n$.\n\n\n-----Example-----\nInput\n5\n1\n5\n42\n1337\n1000000000\n\nOutput\n0\n3\n11\n72\n63244\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nInitially, you have the array $a$ consisting of one element $1$ ($a = [1]$).\n\nIn one move, you can do one of the following things:\n\n  Increase some (single) element of $a$ by $1$ (choose some $i$ from $1$ to the current length of $a$ and increase $a_i$ by one);  Append the copy of some (single) element of $a$ to the end of the array (choose some $i$ from $1$ to the current length of $a$ and append $a_i$ to the end of the array). \n\nFor example, consider the sequence of five moves:\n\n  You take the first element $a_1$, append its copy to the end of the array and get $a = [1, 1]$.  You take the first element $a_1$, increase it by $1$ and get $a = [2, 1]$.  You take the second element $a_2$, append its copy to the end of the array and get $a = [2, 1, 1]$.  You take the first element $a_1$, append its copy to the end of the array and get $a = [2, 1, 1, 2]$.  You take the fourth element $a_4$, increase it by $1$ and get $a = [2, 1, 1, 3]$. \n\nYour task is to find the minimum number of moves required to obtain the array with the sum at least $n$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains one integer $n$ ($1 \\le n \\le 10^9$) \u2014 the lower bound on the sum of the array.\n\n\n-----Output-----\n\nFor each test case, print the answer: the minimum number of moves required to obtain the array with the sum at least $n$.\n\n\n-----Example-----\nInput\n5\n1\n5\n42\n1337\n1000000000\n\nOutput\n0\n3\n11\n72\n63244\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n\nFind all possible triangles with integer sides which has the radius of inscribed circle equal to R.\nTwo triangles are said to be different if they have at least one different side lengths. Formally, let there be two triangles T1, T2. Let a, b, c denote the sides of triangle T1, such that a \u2264 b \u2264 c. Similarly, Let d, e, f denote the sides of triangle T2, such that d \u2264 e \u2264 f. Then T1 will said to be different from T2 if either a \u2260 d, or b \u2260 e or c \u2260 f.\n\n-----Input-----\nThere is a single test case per test file.\nThe only line of input contains an integer R.\n\n-----Output-----\nOutput in first line single number - number of triangles satisfying statement.\nOrder the sides of triangles in non-decreasing order. Output all triangles in non-decreasing order, i.e. order first by smallest sides, otherwise by second smallest sides, if first and second sides equal, then by third.\n\n-----Constraints-----\n- 1 \u2264 R \u2264 100 \n\n-----Subtasks-----\n- Subtask #1: (20 points)  1 \u2264 R \u2264 3\n- Subtask #2: (30 points)  1 \u2264 R \u2264 20\n- Subtask #3: (50 points)  Original constraints\n\n-----Example-----\nInput:2\n\nOutput:5\n5 12 13\n6 8 10\n6 25 29\n7 15 20\n9 10 17\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef likes problems on geometry a lot. Please help him to solve one such problem.\nFind all possible triangles with integer sides which has the radius of inscribed circle (also known as incircle) equal to R.\nTwo triangles are said to be different if they have at least one different side lengths. Formally, let there be two triangles T1, T2. Let a, b, c denote the sides of triangle T1, such that a \u2264 b \u2264 c. Similarly, Let d, e, f denote the sides of triangle T2, such that d \u2264 e \u2264 f. Then T1 will said to be different from T2 if either a \u2260 d, or b \u2260 e or c \u2260 f.\n\n-----Input-----\nThere is a single test case per test file.\nThe only line of input contains an integer R.\n\n-----Output-----\nOutput in first line single number - number of triangles satisfying statement.\nOrder the sides of triangles in non-decreasing order. Output all triangles in non-decreasing order, i.e. order first by smallest sides, otherwise by second smallest sides, if first and second sides equal, then by third.\n\n-----Constraints-----\n- 1 \u2264 R \u2264 100 \n\n-----Subtasks-----\n- Subtask #1: (20 points)  1 \u2264 R \u2264 3\n- Subtask #2: (30 points)  1 \u2264 R \u2264 20\n- Subtask #3: (50 points)  Original constraints\n\n-----Example-----\nInput:2\n\nOutput:5\n5 12 13\n6 8 10\n6 25 29\n7 15 20\n9 10 17\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou have $n$ dolls. The $i$-th doll has a non-negative integer value $a_i$ ($a_i < 2^m$, $m$ is given). You want to pick some dolls, so there are $2^n$ different picking ways.\n\nLet $x$ be the bitwise-xor-sum of values of dolls Chiori picks. The value of this picking way is equal to the number of $1$-bits in the binary representation of $x$. More formally, it is also equal to the number of indices $0 \\leq i < m$, such that $\\left\\lfloor \\frac{x}{2^i} \\right\\rfloor$ is odd.\n\nFind the number of picking ways with value $i$ for each integer $i$ from $0$ to $m$. Due to the answers can be very huge, print them by modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 35$) \u00a0\u2014 the number of dolls and the maximum value of the picking way.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^m$) \u00a0\u2014 the values of dolls.\n\n\n-----Output-----\n\nPrint $m+1$ integers $p_0, p_1, \\ldots, p_m$ \u00a0\u2014 $p_i$ is equal to the number of picking ways with value $i$ by modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n3 5 8 14\n\nOutput\n2 2 6 6 0 \nInput\n6 7\n11 45 14 9 19 81\n\nOutput\n1 2 11 20 15 10 5 0\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThis is the easy version of the problem. The only difference between easy and hard versions is the constraint of $m$. You can make hacks only if both versions are solved.\n\nChiori loves dolls and now she is going to decorate her bedroom![Image]\u00a0\n\nAs a doll collector, Chiori has got $n$ dolls. The $i$-th doll has a non-negative integer value $a_i$ ($a_i < 2^m$, $m$ is given). Chiori wants to pick some (maybe zero) dolls for the decoration, so there are $2^n$ different picking ways.\n\nLet $x$ be the bitwise-xor-sum of values of dolls Chiori picks (in case Chiori picks no dolls $x = 0$). The value of this picking way is equal to the number of $1$-bits in the binary representation of $x$. More formally, it is also equal to the number of indices $0 \\leq i < m$, such that $\\left\\lfloor \\frac{x}{2^i} \\right\\rfloor$ is odd.\n\nTell her the number of picking ways with value $i$ for each integer $i$ from $0$ to $m$. Due to the answers can be very huge, print them by modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 35$) \u00a0\u2014 the number of dolls and the maximum value of the picking way.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^m$) \u00a0\u2014 the values of dolls.\n\n\n-----Output-----\n\nPrint $m+1$ integers $p_0, p_1, \\ldots, p_m$ \u00a0\u2014 $p_i$ is equal to the number of picking ways with value $i$ by modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n3 5 8 14\n\nOutput\n2 2 6 6 0 \nInput\n6 7\n11 45 14 9 19 81\n\nOutput\n1 2 11 20 15 10 5 0\n\"\"\"\ndef code():"
}