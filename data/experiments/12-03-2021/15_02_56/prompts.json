{
    "0": "Python 3\n\"\"\"\n\nOnly N items can be chosen randomly from a total of S items.\nYou need M item including your one personal item. If there are atleast K item which are required and one your own item. What is the probability that you will purchase your K item with your one personal item.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nAlice's school is planning to take some students from her class on a field trip. Alice is really excited about it. There are a total of S students in her class. But due to budget constraints, the school is planning to take only N students for the trip. These students will be picked randomly. And each student has equal chance of being picked.\nAlice's friend circle has M students including her. Though she is excited about the field trip, she will enjoy it only if there are atleast K of her friends with her on the trip. She is wondering what are the chances of that happening. She needs your help. Tell her the probability that she will enjoy given that she goes on the trip.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n-----Explanation:-----Case #1:\nEvery student will be taken to the trip. So all her 4 friends will accompany her to the trip no matter what. \nCase #2:\nAlice wants 4 out of her 5 friends to come along with her which isn't possible because the school is willing to pick only 4 students for the trip.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou have n apples numbered from 1 to n. You have to group them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Each apple can be part of at most one group.\n\nGet the maximum possible number of groups.\n\n\n-----Input-----\n\nA single integer n (1 \u2264 n \u2264 10^5), the number of the apples.\n\n\n-----Output-----\n\nThe first line must contain a single integer m, representing the maximum number of groups he can get. Each of the next m lines must contain two integers \u2014 the numbers of apples in the current group.\n\nIf there are several optimal answers you can print any of them.\n\n\n-----Examples-----\nInput\n6\n\nOutput\n2\n6 3\n2 4\n\nInput\n9\n\nOutput\n3\n9 3\n2 4\n6 8\n\nInput\n2\n\nOutput\n0\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nJzzhu has picked n apples from his big apple tree. All the apples are numbered from 1 to n. Now he wants to sell them to an apple store. \n\nJzzhu will pack his apples into groups and then sell them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Of course, each apple can be part of at most one group.\n\nJzzhu wonders how to get the maximum possible number of groups. Can you help him?\n\n\n-----Input-----\n\nA single integer n (1 \u2264 n \u2264 10^5), the number of the apples.\n\n\n-----Output-----\n\nThe first line must contain a single integer m, representing the maximum number of groups he can get. Each of the next m lines must contain two integers \u2014 the numbers of apples in the current group.\n\nIf there are several optimal answers you can print any of them.\n\n\n-----Examples-----\nInput\n6\n\nOutput\n2\n6 3\n2 4\n\nInput\n9\n\nOutput\n3\n9 3\n2 4\n6 8\n\nInput\n2\n\nOutput\n0\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given two positive integers N and K. How many multisets of rational numbers satisfy all of the following conditions?\n - The multiset has exactly N elements and the sum of them is equal to K.\n - Each element can be represented as \\frac{1}{2^i}\\ (i = 0,1,\\dots).\nPrint the answer modulo 998244353.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 3000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of multisets of rational numbers that satisfy all of the given conditions modulo 998244353.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given two positive integers N and K. How many multisets of rational numbers satisfy all of the following conditions?\n - The multiset has exactly N elements and the sum of them is equal to K.\n - Each element of the multiset is one of 1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{8}, \\dots. In other words, each element can be represented as \\frac{1}{2^i}\\ (i = 0,1,\\dots).\nThe answer may be large, so print it modulo 998244353.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 3000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of multisets of rational numbers that satisfy all of the given conditions modulo 998244353.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n2\n\nThe following two multisets satisfy all of the given conditions:\n - {1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{4}}\n - {\\frac{1}{2}, \\frac{1}{2}, \\frac{1}{2}, \\frac{1}{2}}\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a program to check for a given unweighted, undirected graph whether it's a tree topology or not.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given an unweighted, undirected graph. Write a program to check if it's a tree topology.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nFind the factorial of each number from 1 to given positive integer n.\n\n-----Input-----\nFirst line of input contains an integer T denoting the number of test cases.\nThe next T lines contain an integer N.\n\n-----Output-----\nFor each test case, print a single line containing the solution to the spell which is equal to factorial of N, i.e. N!. Since the output could be large, output it modulo 1589540031.\n\n\n-----Example-----\nInput:\n4\n1\n2\n3\n4\n\nOutput:\n1\n2\n6\n24\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nMaster Oogway has forseen that a panda named Po will be the dragon warrior, and the master of Chi. But he did not tell anyone about the spell that would make him the master of Chi, and has left Po confused. Now Po has to defeat Kai, who is the super villian, the strongest of them all. Po needs to master Chi, and he finds a spell which unlocks his powerful Chi. But the spell is rather strange. It asks Po to calculate the factorial of a number! Po is very good at mathematics, and thinks that this is very easy. So he leaves the spell, thinking it's a hoax. But little does he know that this can give him the ultimate power of Chi. Help Po by solving the spell and proving that it's not a hoax.\n\n-----Input-----\nFirst line of input contains an integer T denoting the number of test cases.\nThe next T lines contain an integer N.\n\n-----Output-----\nFor each test case, print a single line containing the solution to the spell which is equal to factorial of N, i.e. N!. Since the output could be large, output it modulo 1589540031(Grand Master Oogway's current age).\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000\n- 1 \u2264 N \u2264 100000\n\n-----Example-----\nInput:\n4\n1\n2\n3\n4\n\nOutput:\n1\n2\n6\n24\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have n distinct integers: p_1, p_2, ..., p_{n}. You want to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nDivide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\n\nLittle X has n distinct integers: p_1, p_2, ..., p_{n}. He wants to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nHelp Little X divide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIt's OK if all the numbers are in the same set, and the other one is empty.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nDelete all nodes that have duplicate numbers in a given sorted linked list, leaving only distinct numbers from the original list.\n\nExample 1:\n\n\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\n\nExample 2:\n\n\nInput: 1->1->1->2->3\nOutput: 2->3\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
    "13": "Python 3\n\"\"\"\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\n\nExample 1:\n\n\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\n\nExample 2:\n\n\nInput: 1->1->1->2->3\nOutput: 2->3\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
    "14": "Python 3\n\"\"\"\nYou are given two numbers X and Y.\n\nIn one step, you can either double the value of X, or decrement X by 1.\n\nReturn the minimum number of steps required before the value of X equals Y.\n\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "15": "Python 3\n\"\"\"\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "16": "Python 3\n\"\"\"\nGiven positive integers N, K and M, solve the following problem for every integer x between 1 and N (inclusive):\n - Find the number, modulo M, of non-empty multisets containing between 0 and K (inclusive) instances of each of the integers 1, 2, 3 \\cdots, N such that the average of the elements is x.\n\n-----Constraints-----\n - 1 \\leq N, K \\leq 100\n - 10^8 \\leq M \\leq 10^9 + 9\n - M is prime.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K M\n\n-----Output-----\nUse the following format:\nc_1\nc_2\n:\nc_N\n\nHere, c_x should be the number, modulo M, of multisets such that the average of the elements is x.\n\n-----Sample Input-----\n3 1 998244353\n\n-----Sample Output-----\n1\n3\n1\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nGiven positive integers N, K and M, solve the following problem for every integer x between 1 and N (inclusive):\n - Find the number, modulo M, of non-empty multisets containing between 0 and K (inclusive) instances of each of the integers 1, 2, 3 \\cdots, N such that the average of the elements is x.\n\n-----Constraints-----\n - 1 \\leq N, K \\leq 100\n - 10^8 \\leq M \\leq 10^9 + 9\n - M is prime.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K M\n\n-----Output-----\nUse the following format:\nc_1\nc_2\n:\nc_N\n\nHere, c_x should be the number, modulo M, of multisets such that the average of the elements is x.\n\n-----Sample Input-----\n3 1 998244353\n\n-----Sample Output-----\n1\n3\n1\n\nConsider non-empty multisets containing between 0 and 1 instance(s) of each of the integers between 1 and 3. Among them, there are:\n - one multiset such that the average of the elements is k = 1: \\{1\\};\n - three multisets such that the average of the elements is k = 2: \\{2\\}, \\{1, 3\\}, \\{1, 2, 3\\};\n - one multiset such that the average of the elements is k = 3: \\{3\\}.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nIt takes the object or hash passed in and generates a human readable string from its key/value pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```\n\"\"\"\ndef solution(pairs):",
    "19": "Python 3\n\"\"\"\nComplete the solution so that it takes the object (JavaScript/CoffeeScript) or hash (ruby) passed in and generates a human readable string from its key/value pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```\n\"\"\"\ndef solution(pairs):"
}