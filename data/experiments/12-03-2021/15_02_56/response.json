{
    "id": "cmpl-4BAvONV0y7U2q5TxXFMyTCYubg448",
    "object": "text_completion",
    "created": 1638568950,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        S, N, M, K = map(int, input().split())\n        if K == 0:\n            print(1)\n        elif K == 1:\n            print(0)\n        else:\n            print((K/M)/(N/S))\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        S, N, M, K = map(int, input().split())\n        if N > S:\n            print(0)\n        else:\n            if K == 0:\n                print(1)\n            else:\n                if K > M:\n                    print(0)\n                else:\n                    print(M/S)\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n//2)\n        for i in range(n//2):\n            print(2*i+1, 2*i+2)\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(n//2)\n        for i in range(n//2):\n            print(2*i+1, 2*i+2)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    # n = number of elements, k = sum of elements\n    # n = 2, k = 2\n    # 1/2 + 1/4 = 1/2\n    # 1/2 + 1/8 = 1/4\n    # 1/4 + 1/8 = 1/4\n    # 1/4 + 1/16 = 1/8\n    # 1/8 + 1/16 = 1/8\n    # 1/8 + 1/32 = 1/16\n    # 1/16 + 1/32 = 1/16\n    # 1/16 + 1/64 = 1/32\n    # 1/32 + 1/64 = 1/32\n    # 1/32 + 1/128 = 1/64\n    # 1/64 + 1/128 = 1/64\n    # 1/64 + 1/256 = 1/128\n    # 1/128 + 1/256 = 1/128\n    # 1/128 + 1/512 = 1/256\n    # 1/256 + 1/512 = 1/256\n    # 1/256 + 1/1024 = 1/512\n    # 1/512 + 1/1024 = 1/512\n    # 1/512 + 1/2048 = 1/1024\n    # 1/1024 + 1/2048 = 1/1024\n    # 1/1024 + 1/4096 = 1/2048\n    # 1/2048 + 1/4096 = 1/2048\n    # 1/2048 + 1/8192 = 1/4096\n    # 1/4096 + 1/8192 = 1/4096\n    # 1/4096 + 1/16384 = 1/8192\n    # 1/8192 + 1/16384 = 1/8192\n    # 1/8192 + 1/32768 = 1/16384\n    # 1/16384 + 1/32768 = 1/16384\n    # 1/16384 + 1/65536 = 1/32768\n    # 1/32768 + 1/65536 = 1/32768\n    # 1/32768 + 1/131072 = 1/65536\n    # 1/65536 + 1/131072 = 1/65536\n    # 1/65536 + 1/262144 = 1/131072\n    # 1/131072 + 1/262144 = 1/131072\n    # 1/131072 + 1/524288 = 1/262144\n    # 1/262144 + 1/524288 = 1/262144\n    # 1/262144 + 1/1048576 = 1/524288\n    # 1/524288 + 1/1048576 = 1/524288\n    # 1/524288 + 1/2097152 = 1/1048576\n    # 1/1048576 + 1/2097152 = 1/1048576\n    # 1/1048576 + 1/4194304 = 1/2097152\n    # 1/2097152 + 1/4194304 = 1/2097152\n    # 1/2097152 + 1/8388608 = 1/4194304\n    # 1/4194304 + 1/8388608 = 1/4194304\n    # 1/4194304 + 1/16777216 = 1/8388608\n    # 1/8388608 + 1/16777216 = 1/8388608\n    # 1/8388608 + 1/33554432 = 1/16777216\n    # 1/16777216 + 1/33554432 = 1/16777216\n    # 1/16777216 + 1/67108864 = 1/33554432\n    # 1/33554432 + 1/67108864 = 1/33554432\n    # 1/33554432 + 1/134217728 = 1/67108864\n    # 1/67108864 + 1/134217728 = 1/67108864\n    # 1/67108864 + 1/268435456 = 1/134217728\n    # 1/134217728 + 1/268435456 = 1/134217728\n    # 1/134217728 + 1/536870912 = 1/268435456\n    # 1/268435456 + 1/536870912 = 1/268435456\n    # 1/268435456 + 1/10737418",
            "index": 4,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    ",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    N, M = map(int, input().split())\n    graph = [[] for i in range(N)]\n    for i in range(M):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    visited = [False]*N\n    if dfs(graph, visited, 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef dfs(graph, visited, node):\n    visited[node] = True\n    for i in graph[node]:\n        if not visited[i]:\n            if dfs(graph, visited, i):\n                return True\n        else:\n            return True\n    return False\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    visited = [False]*n\n    if dfs(graph, visited, 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef dfs(graph, visited, node):\n    visited[node] = True\n    for i in graph[node]:\n        if not visited[i]:\n            if not dfs(graph, visited, i):\n                return False\n        else:\n            return False\n    return True\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    mod = 10**9+7\n    for _ in range(int(input())):\n        n = int(input())\n        fact = 1\n        for i in range(1,n+1):\n            fact = (fact*i)%mod\n        print(fact)\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        print(fact(N)%1589540031)\n\ndef fact(N):\n    if N == 0:\n        return 1\n    else:\n        return N*fact(N-1)\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, a, b = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    if p[0] > a or p[-1] < b:\n        print(\"NO\")\n        return\n    for i in range(n):\n        if p[i] > a:\n            print(\"NO\")\n            return\n        if p[i] < b:\n            p[i] = 1\n        else:\n            p[i] = 0\n    print(\"YES\")\n    print(*p)\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, a, b = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    if p[0] == p[-1]:\n        print(\"YES\")\n        print(\"0\"*n)\n    else:\n        if a - p[0] > b - p[-1]:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(n):\n                if p[i] <= a:\n                    print(\"0\", end=\" \")\n                else:\n                    print(\"1\", end=\" \")\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not head:\n            return head\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not head:\n            return head\n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr and curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                curr = curr.next\n                prev.next = curr\n            else:\n                prev = prev.next\n                curr = curr.next\n        return dummy.next",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        res = 0\n        while Y > X:\n            res += 1\n            if Y%2:\n                Y += 1\n            else:\n                Y //= 2\n        return res + X-Y",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if X>=Y:\n            return X-Y\n        else:\n            if Y%2==0:\n                return 1+self.brokenCalc(X,Y//2)\n            else:\n                return 1+self.brokenCalc(X,Y+1)",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k, m = map(int, input().split())\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i - j >= 0:\n                c[i] = (c[i] + c[i - j]) % m\n    for i in range(n + 1):\n        print(c[i])\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k, m = map(int, input().split())\n    mod = 998244353\n    # n, k, m = 3, 1, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 2, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 3, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 4, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 5, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 6, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 7, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 8, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 9, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 10, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 11, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 12, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 13, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 14, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 15, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 16, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 17, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 18, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 19, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 20, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 21, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 22, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 23, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 24, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 25, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 26, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 27, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 28, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 29, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 30, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 31, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 32, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 33, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 34, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 35, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 36, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 37, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 38, 998244353\n    # mod = 998244353\n    # n, k, m = 3, 39",
            "index": 17,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    return ','.join(['{} = {}'.format(k, v) for k, v in pairs.items()])",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return ','.join(['%s = %s' % (k, v) for k, v in pairs.items()])",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}