{
    "0": "Python 3\n\"\"\"\nWrite a function that receives a list of pairs and returns the number of days that the company is represented in the foreign country. The first number of the pair is the number of the day of arrival and the second number of the pair is the day of departure of someone who travels, i.e. 1 January is number 1 and 31 of December is 365.\n\nExample:\nInput:\ndays_represented([[10,17],[200,207]])\nOutput:\n16\nExplanation:\nReturns 16 because there are two trips of 8 days, which add up to 16.\n\n\"\"\"\ndef days_represented(trips):",
    "1": "Python 3\n\"\"\"\nHow many days are we represented in a foreign country?\n\nMy colleagues make business trips to a foreign country. We must find the number of days our company is represented in a country. Every day that one or more colleagues are present in the country is a day that the company is represented. A single day cannot count for more than one day.\n\nWrite a function that recieves a list of pairs and returns the number of days that the company is represented in the foreign country. The first number of the pair is the number of the day of arrival and the second number of the pair is the day of departure of someone who travels, i.e. 1 january is number 1 and 31 of december is 365.\n\nExample:\n```python\ndays_represented([[10,17],[200,207]])\n```\n\nReturns 16 because there are two trips of 8 days, which add up to 16.\n\nHappy coding and rank this kata if you wish ;-)\n\"\"\"\ndef days_represented(trips):",
    "2": "Python 3\n\"\"\"\nFind the first character that repeats in a String and return that character. \n\nExample 1:\nInput: first_dup('tweet')\nOutput: 't'\n\nExample 2:\nInput: first_dup('like')\nOutput: None\n\"\"\"\ndef first_dup(s):",
    "3": "Python 3\n\"\"\"\nFind the first character that repeats in a String and return that character. \n\n```python\nfirst_dup('tweet') => 't'\nfirst_dup('like') => None\n```\n\n*This is not the same as finding the character that repeats first.*\n*In that case, an input of 'tweet' would yield 'e'.*\n\"\"\"\ndef first_dup(s):",
    "4": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n can be composed from the first m lowercase English letters exist such that the length of Longest Common Subsequence between S and T is n - 1.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1.\n\nRecall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\n\n-----Note-----\n\nFor the first sample, the 6 possible strings T are: aab, aac, aba, aca, baa, caa. \n\nFor the second sample, the 11 possible strings T are: aaa, aac, aba, abb, abc, aca, acb, baa, bab, caa, cab.\n\nFor the third sample, the only possible string T is b.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given a list of strings where each string in format of \"A,B,C,D\". where A,D are strings and B,C are numbers. A string is possibly invalid if:\n\nthe C exceeds 1000, or;\nif two strings have same A and different D and the difference between C is greater than or equal to 60.\n\nreturn list of strings which are possibley invalid in any order\n\nExample 1:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\nExample 2:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]\n\nExample 3:\nInput: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]\n\n\u00a0\nConstraints:\n\ntransactions.length <= 1000\nEach transactions[i] takes the form \"{name},{time},{amount},{city}\"\nEach {name} and {city}\u00a0consist of\u00a0lowercase English letters, and have lengths between 1 and 10.\nEach {time} consist of\u00a0digits, and represent an integer between 0 and 1000.\nEach {amount}\u00a0consist of\u00a0digits, and represent an integer between 0 and 2000.\n\n\"\"\"\nclass Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:",
    "7": "Python 3\n\"\"\"\nA transaction is possibly invalid if:\n\nthe amount exceeds $1000, or;\nif it occurs within (and including) 60 minutes of another transaction with the same name in a different city.\n\nEach transaction string transactions[i]\u00a0consists of\u00a0comma separated values representing\u00a0the name, time (in minutes), amount, and city of the transaction.\nGiven a list of transactions,\u00a0return a list of transactions that are possibly invalid.\u00a0 You may return the answer in any order.\n\u00a0\nExample 1:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\nExample 2:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]\n\nExample 3:\nInput: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]\n\n\u00a0\nConstraints:\n\ntransactions.length <= 1000\nEach transactions[i] takes the form \"{name},{time},{amount},{city}\"\nEach {name} and {city}\u00a0consist of\u00a0lowercase English letters, and have lengths between 1 and 10.\nEach {time} consist of\u00a0digits, and represent an integer between 0 and 1000.\nEach {amount}\u00a0consist of\u00a0digits, and represent an integer between 0 and 2000.\n\"\"\"\nclass Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:",
    "8": "Python 3\n\"\"\"\nGiven a number n, find the number x and the numbers whose arithmentic sum of their digits with themselves will give the number n itself.\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nIn the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition. \n\nIn next k lines print these values in ascending order.\n\n\n-----Examples-----\nInput\n21\n\nOutput\n1\n15\n\nInput\n20\n\nOutput\n0\n\n\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nEighth-grader Vova is on duty today in the class. After classes, he went into the office to wash the board, and found on it the number n. He asked what is this number and the teacher of mathematics Inna Petrovna answered Vova that n is the answer to the arithmetic task for first-graders. In the textbook, a certain positive integer x was given. The task was to add x to the sum of the digits of the number x written in decimal numeral system.\n\nSince the number n on the board was small, Vova quickly guessed which x could be in the textbook. Now he wants to get a program which will search for arbitrary values of the number n for all suitable values of x or determine that such x does not exist. Write such a program for Vova.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nIn the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition. \n\nIn next k lines print these values in ascending order.\n\n\n-----Examples-----\nInput\n21\n\nOutput\n1\n15\n\nInput\n20\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case x = 15 there is only one variant: 15 + 1 + 5 = 21.\n\nIn the second test case there are no such x.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given a list of $n$ integers and $d$ days.\n\nOn each day you must increment an element and decrement an adjacent positive element.\n\nFind the maximum value possible for element in first postion after $d$ days.\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 100$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain a description of test cases \u00a0\u2014 two lines per test case.\n\nThe first line of each test case contains integers $n$ and $d$ ($1 \\le n,d \\le 100$) \u2014 the number of integers in each array and the number of days, respectively. \n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 100$) \u00a0\u2014 the integers in the array.\n\n\n-----Output-----\n\nFor each test case, output one integer: the maximum value of the first element if we take optimal action each day.\n\n\n-----Example-----\nInput\n3\n4 5\n1 0 3 2\n2 2\n100 1\n1 8\n0\n\nOutput\n3\n101\n0\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThe USA Construction Operation (USACO) recently ordered Farmer John to arrange a row of $n$ haybale piles on the farm. The $i$-th pile contains $a_i$ haybales. \n\nHowever, Farmer John has just left for vacation, leaving Bessie all on her own. Every day, Bessie the naughty cow can choose to move one haybale in any pile to an adjacent pile. Formally, in one day she can choose any two indices $i$ and $j$ ($1 \\le i, j \\le n$) such that $|i-j|=1$ and $a_i>0$ and apply $a_i = a_i - 1$, $a_j = a_j + 1$. She may also decide to not do anything on some days because she is lazy.\n\nBessie wants to maximize the number of haybales in pile $1$ (i.e. to maximize $a_1$), and she only has $d$ days to do so before Farmer John returns. Help her find the maximum number of haybales that may be in pile $1$ if she acts optimally!\n\n\n-----Input-----\n\nThe input consists of multiple test cases. The first line contains an integer $t$ ($1 \\le t \\le 100$) \u00a0\u2014 the number of test cases. Next $2t$ lines contain a description of test cases \u00a0\u2014 two lines per test case.\n\nThe first line of each test case contains integers $n$ and $d$ ($1 \\le n,d \\le 100$) \u2014 the number of haybale piles and the number of days, respectively. \n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 100$) \u00a0\u2014 the number of haybales in each pile.\n\n\n-----Output-----\n\nFor each test case, output one integer: the maximum number of haybales that may be in pile $1$ after $d$ days if Bessie acts optimally.\n\n\n-----Example-----\nInput\n3\n4 5\n1 0 3 2\n2 2\n100 1\n1 8\n0\n\nOutput\n3\n101\n0\n\n\n\n-----Note-----\n\nIn the first test case of the sample, this is one possible way Bessie can end up with $3$ haybales in pile $1$:   On day one, move a haybale from pile $3$ to pile $2$  On day two, move a haybale from pile $3$ to pile $2$  On day three, move a haybale from pile $2$ to pile $1$  On day four, move a haybale from pile $2$ to pile $1$  On day five, do nothing  \n\nIn the second test case of the sample, Bessie can do nothing on the first day and move a haybale from pile $2$ to pile $1$ on the second day.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of $n$ non-negative integers. You have to choose a non-negative integer $x$ and form a new array $b$ of size $n$ according to the following rule: for all $i$ from $1$ to $n$, $b_i = a_i \\oplus x$ where $\\oplus$ denotes the operation bitwise XOR.\n\nYou should choose $x$ in such a way that the number of inversions in $b$ is minimized. If there are several options for $x$ \u2014 output the smallest one.\n\n\n-----Input-----\n\nFirst line contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nSecond line contains $n$ space-separated integers $a_1$, $a_2$, ..., $a_n$ ($0 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nOutput two integers: the minimum possible number of inversions in $b$, and the minimum possible value of $x$, which achieves those number of inversions.\n\n\n-----Examples-----\nInput\n4\n0 1 3 2\n\nOutput\n1 0\n\nInput\n9\n10 7 9 10 7 5 5 3 5\n\nOutput\n4 14\n\nInput\n3\n8 10 3\n\nOutput\n0 8\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of $n$ non-negative integers. You have to choose a non-negative integer $x$ and form a new array $b$ of size $n$ according to the following rule: for all $i$ from $1$ to $n$, $b_i = a_i \\oplus x$ ($\\oplus$ denotes the operation bitwise XOR).\n\nAn inversion in the $b$ array is a pair of integers $i$ and $j$ such that $1 \\le i < j \\le n$ and $b_i > b_j$.\n\nYou should choose $x$ in such a way that the number of inversions in $b$ is minimized. If there are several options for $x$ \u2014 output the smallest one.\n\n\n-----Input-----\n\nFirst line contains a single integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nSecond line contains $n$ space-separated integers $a_1$, $a_2$, ..., $a_n$ ($0 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nOutput two integers: the minimum possible number of inversions in $b$, and the minimum possible value of $x$, which achieves those number of inversions.\n\n\n-----Examples-----\nInput\n4\n0 1 3 2\n\nOutput\n1 0\n\nInput\n9\n10 7 9 10 7 5 5 3 5\n\nOutput\n4 14\n\nInput\n3\n8 10 3\n\nOutput\n0 8\n\n\n\n-----Note-----\n\nIn the first sample it is optimal to leave the array as it is by choosing $x = 0$.\n\nIn the second sample the selection of $x = 14$ results in $b$: $[4, 9, 7, 4, 9, 11, 11, 13, 11]$. It has $4$ inversions:\n\n  $i = 2$, $j = 3$;  $i = 2$, $j = 4$;  $i = 3$, $j = 4$;  $i = 8$, $j = 9$. \n\nIn the third sample the selection of $x = 8$ results in $b$: $[0, 2, 11]$. It has no inversions.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nWrite a function named first_non_repeating_letter that takes a string input, and returns the first character that is not repeated anywhere in the string. Uppercase and lowercase letters are considered the same character. If a string contains all repeating characters, it should return an empty string \"\" or None.\n\nExamples:\nInput:\n'stress'\nOutput:\n't'\nExplanation:\nThe letter t only occurs once in the string, and occurs first in the string.\n\"\"\"\ndef first_non_repeating_letter(string):",
    "15": "Python 3\n\"\"\"\nWrite a function named `first_non_repeating_letter` that takes a string input, and returns the first character that is not repeated anywhere in the string.\n\nFor example, if given the input `'stress'`, the function should return `'t'`, since the letter *t* only occurs once in the string, and occurs first in the string.\n\nAs an added challenge, upper- and lowercase letters are considered the **same character**, but the function should return the correct case for the initial letter.  For example, the input `'sTreSS'` should return `'T'`.\n\nIf a string contains *all repeating characters*, it should return an empty string (`\"\"`) or `None` -- see sample tests.\n\"\"\"\ndef first_non_repeating_letter(string):",
    "16": "Python 3\n\"\"\"\nYou are given an array of N natural numbers. find all numbers(in ascending order) whose frequency is strictly more than K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, two integers $N, K$.\n- N space-separated natural numbers.\n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N, K \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n5 1\n5 2 1 2 5\n\n-----Sample Output:-----\n2 5\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef has an array of N natural numbers most of them are repeated. Cheffina challenges chef to find all numbers(in ascending order) whose frequency is strictly more than K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains two lines of input, two integers $N, K$.\n- N space-separated natural numbers.\n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10$\n- $1 \\leq N, K \\leq 10^5$\n- $1 \\leq arr[i] \\leq 10^5$\n\n-----Sample Input:-----\n1\n5 1\n5 2 1 2 5\n\n-----Sample Output:-----\n2 5\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou have a string S consisting of N uppercase English letters.You have to replace a one character by other character present in the string so that the string becomes lexicographically smallest.Find that lexicographically smallest  string.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains the single integer N denoting length of string S.\nThe second line contains the string S.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 50\n- S will consist of uppercase English letters.\n\n-----Example-----\nInput:\n2\n4\nDCBA\n7\nXYZZYZZ\n\nOutput:\nADCB\nXYYZZZZ\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou have a string S consisting of N uppercase English letters. You are allowed to perform at most one operation of following kind: Choose any position in the string, remove the character at that position and insert it back to any other place in the string.\n\nFind the  lexicographically smallest  string you can achieve.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\nThe first line of each test case contains the single integer N denoting length of string S.\nThe second line contains the string S.\n\n-----Output-----\nFor each test case, output a single line containing the answer to the corresponding test case.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 50\n- S will consist of uppercase English letters.\n\n-----Example-----\nInput:\n2\n4\nDCBA\n7\nXYZZYZZ\n\nOutput:\nADCB\nXYYZZZZ\n\n-----Explanation-----\nExample case 1. The optimal solution here is to choose the last character and put it in the beginning of the string. So the answer will be ADCB\nExample case 2. The optimal solution here is to choose the 5-th character (1-based index) and put it between the 2-nd and the 3-rd characters. So the answer will be XYYZZZZ\n\"\"\"\ndef code():"
}