{
    "0": "Python 3\n\"\"\"\nThe second maximum element in the sequence of distinct numbers x_1, x_2, ..., x_{k} (k > 1) is such maximum element x_{j}, that the following inequality holds: $x_{j} \\neq \\operatorname{max}_{i = 1}^{k} x_{i}$.\n\nThe lucky number of the sequence of distinct positive integers x_1, x_2, ..., x_{k} (k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence.\n\nYou've got a sequence of distinct positive integers s_1, s_2, ..., s_{n} (n > 1). Let's denote sequence s_{l}, s_{l} + 1, ..., s_{r} as s[l..r] (1 \u2264 l < r \u2264 n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r].\n\nAll numbers in sequence s are distinct.\n\n\n-----Input-----\n\nThe first line contains integer n (1 < n \u2264 10^5). The second line contains n distinct integers s_1, s_2, ..., s_{n} (1 \u2264 s_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum lucky number among all lucky numbers of sequences s[l..r].\n\n\n-----Examples-----\nInput\n5\n5 2 1 4 3\n\nOutput\n7\n\nInput\n5\n9 8 3 5 7\n\nOutput\n15\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nBike loves looking for the second maximum element in the sequence. The second maximum element in the sequence of distinct numbers x_1, x_2, ..., x_{k} (k > 1) is such maximum element x_{j}, that the following inequality holds: $x_{j} \\neq \\operatorname{max}_{i = 1}^{k} x_{i}$.\n\nThe lucky number of the sequence of distinct positive integers x_1, x_2, ..., x_{k} (k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence.\n\nYou've got a sequence of distinct positive integers s_1, s_2, ..., s_{n} (n > 1). Let's denote sequence s_{l}, s_{l} + 1, ..., s_{r} as s[l..r] (1 \u2264 l < r \u2264 n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r].\n\nNote that as all numbers in sequence s are distinct, all the given definitions make sence.\n\n\n-----Input-----\n\nThe first line contains integer n (1 < n \u2264 10^5). The second line contains n distinct integers s_1, s_2, ..., s_{n} (1 \u2264 s_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum lucky number among all lucky numbers of sequences s[l..r].\n\n\n-----Examples-----\nInput\n5\n5 2 1 4 3\n\nOutput\n7\n\nInput\n5\n9 8 3 5 7\n\nOutput\n15\n\n\n\n-----Note-----\n\nFor the first sample you can choose s[4..5] = {4, 3} and its lucky number is (4\u00a0xor\u00a03) = 7. You can also choose s[1..2].\n\nFor the second sample you must choose s[2..5] = {8, 3, 5, 7}.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven starting number and the ending number, creates a dictionary of factors for all numbers except 1 and number itself.\n\nIf a number possesses no factors , the list for the key should be `['None']`\n\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2], 5: ['None'], 6: [2, 3]}\n```\n\"\"\"\ndef factorsRange(n, m):",
    "3": "Python 3\n\"\"\"\nThe objective of this Kata is to write a function that creates a dictionary of factors for a range of numbers.\n\nThe key for each list in the dictionary should be the number. The list associated with each key should possess the factors for the number.\n\nIf a number possesses no factors (only 1 and the number itself), the list for the key should be `['None']`\n\nThe function possesses two arguments (`n` and `m`). Where `n` is the starting number and `m` is the ending number.\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2], 5: ['None'], 6: [2, 3]}\n```\n\"\"\"\ndef factorsRange(n, m):",
    "4": "Python 3\n\"\"\"\nConsider all integer sequences of length N whose elements are between 1 and 10, inclusive. Out of those 10^N sequences, how many contain an X,Y,Z-Haiku?\nHere, an integer sequence a_0, a_1, ..., a_{N-1} is said to contain an X,Y,Z-Haiku if and only if there exist four indices x, y, z, w (0 \u2266 x < y < z < w \u2266 N) such that all of the following are satisfied:\n - a_x + a_{x+1} + ... + a_{y-1} = X\n - a_y + a_{y+1} + ... + a_{z-1} = Y\n - a_z + a_{z+1} + ... + a_{w-1} = Z\nPrint the answer modulo 10^9+7.\n\n-----Constraints-----\n - 3 \u2266 N \u2266 40\n - 1 \u2266 X \u2266 5\n - 1 \u2266 Y \u2266 7\n - 1 \u2266 Z \u2266 5\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN X Y Z\n\n-----Output-----\nPrint the number of the sequences that contain an X,Y,Z-Haiku, modulo 10^9+7.\n\n-----Sample Input-----\n3 5 7 5\n\n-----Sample Output-----\n1\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nHaiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nIroha is looking for X,Y,Z-Haiku (defined below) in integer sequences.\nConsider all integer sequences of length N whose elements are between 1 and 10, inclusive. Out of those 10^N sequences, how many contain an X,Y,Z-Haiku?\nHere, an integer sequence a_0, a_1, ..., a_{N-1} is said to contain an X,Y,Z-Haiku if and only if there exist four indices x, y, z, w (0 \u2266 x < y < z < w \u2266 N) such that all of the following are satisfied:\n - a_x + a_{x+1} + ... + a_{y-1} = X\n - a_y + a_{y+1} + ... + a_{z-1} = Y\n - a_z + a_{z+1} + ... + a_{w-1} = Z\nSince the answer can be extremely large, print the number modulo 10^9+7.\n\n-----Constraints-----\n - 3 \u2266 N \u2266 40\n - 1 \u2266 X \u2266 5\n - 1 \u2266 Y \u2266 7\n - 1 \u2266 Z \u2266 5\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN X Y Z\n\n-----Output-----\nPrint the number of the sequences that contain an X,Y,Z-Haiku, modulo 10^9+7.\n\n-----Sample Input-----\n3 5 7 5\n\n-----Sample Output-----\n1\n\nHere, the only sequence that contains a 5,7,5-Haiku is [5, 7, 5].\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou have $n$ nodes in a graph, numbered from $v_1$ to $v_n$. Each node has a certain value \u2014 initially the $i$-th node has a value of $i$.\n\nThe node values will be revised $q$ times. For the $j$-th revision, node $v_i$ will have a value of $n+i$ and have the highest value amongst every node. \nThe node $v_i$ will have this value for the only the $j$-th revision,\nit will have value $i$ on the next revision unless that node's value is revisied again.\n\nSome nodes dislike with each other which causes conflicts. Formally, if two nodes $a$ and $b$ dislike with each other and $a$ has a higher value than $b$ then $a$ conflicts with $b$.\nA dangerous triple is a triple of three nodes $a$, $b$, $c$ such that $a$ conflicts with $b$ and $b$ conflicts with $c$.\n\nYou need to find the number of dangerous triples before the revisions and after each revision.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $0\n\\le m \\le 100\\,000$) \u2014 the number of nodes and the number of nodes that dislike each other. Each of the following $m$ lines\ncontains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$)\ndenoting that nodes $a_i$ and $b_i$ dislike each other (that is, $a_i$\ndislikes $b_i$ and $b_i$ dislikes $a_i$). Each such relationship will be\nmentioned exactly once.\n\nThe next line contains an integer $q$ ($0 \\le q \\le 100\\,000$) \u2014 the number of \nrevisions. The $i$-th of the following $q$ lines contains a single\ninteger $v_i$ ($1 \\le v_i \\le n$) denoting that at the end of the $i$-th day,\nnode $v_i$ will have the highest value. \n\n\n-----Output-----\n\nOutput $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples on the $i$-th revision.\n\n\n-----Examples-----\nInput\n4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n\nOutput\n4\n3\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n\nOutput\n1\n1\n1\n1\n1\n1\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nKonrad is a Human Relations consultant working for VoltModder, a large electrical equipment producer. Today, he has been tasked with evaluating the level of happiness in the company.\n\nThere are $n$ people working for VoltModder, numbered from $1$ to $n$. Each employee earns a different amount of money in the company \u2014 initially, the $i$-th person earns $i$ rubles per day.\n\nOn each of $q$ following days, the salaries will be revised. At the end of the $i$-th day, employee $v_i$ will start earning $n+i$ rubles per day and will become the best-paid person in the company. The employee will keep his new salary until it gets revised again.\n\nSome pairs of people don't like each other. This creates a great psychological danger in the company. Formally, if two people $a$ and $b$ dislike each other and $a$ earns more money than $b$, employee $a$ will brag about this to $b$. A dangerous triple is a triple of three employees $a$, $b$ and $c$, such that $a$ brags to $b$, who in turn brags to $c$. If $a$ dislikes $b$, then $b$ dislikes $a$.\n\nAt the beginning of each day, Konrad needs to evaluate the number of dangerous triples in the company. Can you help him do it?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $0 \\le m \\le 100\\,000$) \u2014 the number of employees in the company and the number of pairs of people who don't like each other. Each of the following $m$ lines contains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$) denoting that employees $a_i$ and $b_i$ hate each other (that is, $a_i$ dislikes $b_i$ and $b_i$ dislikes $a_i$). Each such relationship will be mentioned exactly once.\n\nThe next line contains an integer $q$ ($0 \\le q \\le 100\\,000$) \u2014 the number of salary revisions. The $i$-th of the following $q$ lines contains a single integer $v_i$ ($1 \\le v_i \\le n$) denoting that at the end of the $i$-th day, employee $v_i$ will earn the most.\n\n\n-----Output-----\n\nOutput $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples in the company at the beginning of the $i$-th day.\n\n\n-----Examples-----\nInput\n4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n\nOutput\n4\n3\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n\nOutput\n1\n1\n1\n1\n1\n1\n\n\n\n-----Note-----\n\nConsider the first sample test. The $i$-th row in the following image shows the structure of the company at the beginning of the $i$-th day. A directed edge from $a$ to $b$ denotes that employee $a$ brags to employee $b$. The dangerous triples are marked by highlighted edges. [Image]\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nYou are given four numbers x, y, z, w which make a proportion if ratio of x : y is same as that of z : w. You have to check that if it is possible to shuffle x, y, z, w to make  some proportion or not.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n-----Explanation-----\nBy swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\"\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have n distinct integers: p_1, p_2, ..., p_{n}. You want to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nDivide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\n\nLittle X has n distinct integers: p_1, p_2, ..., p_{n}. He wants to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nHelp Little X divide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIt's OK if all the numbers are in the same set, and the other one is empty.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou have unweighted tree of $n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\nFor every two different leaves $v_{1}$ and $v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between $v_{1}$ and $v_{2}$ has to be equal to $0$. \n\nYou can put very large positive integers like $10^{(10^{10})}$.\n\nIt's guaranteed that such assignment always exists under given constraints. Let $f$ be the number of distinct weights in assignment.\n\nWhat are the minimum and the maximum possible values of $f$ for the given tree? Find and print both.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the number of vertices in given tree.\n\nThe $i$-th of the next $n-1$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. It is guaranteed that given graph forms tree of $n$ vertices.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum and maximum possible value of $f$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\n\n-----Examples-----\nInput\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\nOutput\n1 4\n\nInput\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\nOutput\n3 3\n\nInput\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\nOutput\n1 6\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou have unweighted tree of $n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\n  For every two different leaves $v_{1}$ and $v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between $v_{1}$ and $v_{2}$ has to be equal to $0$. \n\nNote that you can put very large positive integers (like $10^{(10^{10})}$).\n\nIt's guaranteed that such assignment always exists under given constraints. Now let's define $f$ as the number of distinct weights in assignment.\n\n [Image] In this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is $0$. $f$ value is $2$ here, because there are $2$ distinct edge weights($4$ and $5$).\n\n[Image] In this example, assignment is invalid, because bitwise XOR of all edge weights between vertex $1$ and vertex $6$ ($3, 4, 5, 4$) is not $0$. \n\nWhat are the minimum and the maximum possible values of $f$ for the given tree? Find and print both.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the number of vertices in given tree.\n\nThe $i$-th of the next $n-1$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. It is guaranteed that given graph forms tree of $n$ vertices.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum and maximum possible value of $f$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\n\n-----Examples-----\nInput\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\nOutput\n1 4\n\nInput\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\nOutput\n3 3\n\nInput\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\nOutput\n1 6\n\n\n\n-----Note-----\n\nIn the first example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.  [Image] \n\nIn the second example, possible assignments for each minimum and maximum are described in picture below. The $f$ value of valid assignment of this tree is always $3$.  [Image] \n\nIn the third example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.  [Image]\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nReducing Problems - Bug Fixing #8\n\nTimmy's goal is to calculate the two teams scores and return the winner but timmy has gotten confused and sometimes teams don't enter their scores, total the scores out of 3!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"\ndef calculate_total(t1, t2):",
    "15": "Python 3\n\"\"\"\nReducing Problems - Bug Fixing #8\n\nOh no! Timmy's reduce is causing problems, Timmy's goal is to calculate the two teams scores and return the winner but timmy has gotten confused and sometimes teams don't enter their scores, total the scores out of 3! Help timmy fix his program!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"\ndef calculate_total(t1, t2):",
    "16": "Python 3\n\"\"\"\nGiven a list of n points in one-dimensional space, find the number of ways to select 3 points such that the distance between any two is not greater than d.\n\n\n-----Input-----\n\nThe first line contains two integers: n and d (1 \u2264 n \u2264 10^5;\u00a01 \u2264 d \u2264 10^9). The next line contains n integers x_1, x_2, ..., x_{n}, their absolute value doesn't exceed 10^9 \u2014 the x-coordinates of the points in the list.\n\nIt is guaranteed that the coordinates of the points in the input strictly increase.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of groups of three points, where the distance between two farthest points doesn't exceed d.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n4 3\n1 2 3 4\n\nOutput\n4\n\nInput\n4 2\n-3 -2 -1 0\n\nOutput\n2\n\nInput\n5 19\n1 10 20 30 50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample any group of three points meets our conditions.\n\nIn the seconds sample only 2 groups of three points meet our conditions: {-3, -2, -1} and {-2, -1, 0}.\n\nIn the third sample only one group does: {1, 10, 20}.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nLittle Petya likes points a lot. Recently his mom has presented him n points lying on the line OX. Now Petya is wondering in how many ways he can choose three distinct points so that the distance between the two farthest of them doesn't exceed d.\n\nNote that the order of the points inside the group of three chosen points doesn't matter.\n\n\n-----Input-----\n\nThe first line contains two integers: n and d (1 \u2264 n \u2264 10^5;\u00a01 \u2264 d \u2264 10^9). The next line contains n integers x_1, x_2, ..., x_{n}, their absolute value doesn't exceed 10^9 \u2014 the x-coordinates of the points that Petya has got.\n\nIt is guaranteed that the coordinates of the points in the input strictly increase.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of groups of three points, where the distance between two farthest points doesn't exceed d.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n4 3\n1 2 3 4\n\nOutput\n4\n\nInput\n4 2\n-3 -2 -1 0\n\nOutput\n2\n\nInput\n5 19\n1 10 20 30 50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample any group of three points meets our conditions.\n\nIn the seconds sample only 2 groups of three points meet our conditions: {-3, -2, -1} and {-2, -1, 0}.\n\nIn the third sample only one group does: {1, 10, 20}.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nCreate a function called noRepeat() that takes a string argument and returns a single letter string of the first not repeated character in the entire string.\n\nExamples:\nInput:\nnoRepeat(\"aabbccdde\")\nOutput:\n'e'\nInput:\nnoRepeat(\"wxyz\")\nOutput:\n'w'\nInput:\nnoRepeat(\"testing\")\nOutput:\n'e'\n\"\"\"\ndef no_repeat(string):",
    "19": "Python 3\n\"\"\"\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #16\n\nCreate a function called noRepeat() that takes a string argument and returns a single letter string of the **first** not repeated character in the entire string.\n\n``` haskell\nnoRepeat \"aabbccdde\" `shouldBe` 'e'\nnoRepeat \"wxyz\"      `shouldBe` 'w'\nnoRepeat \"testing\"   `shouldBe` 'e'\n```\n\nNote:\nONLY letters from the english alphabet will be used as input\nThere will ALWAYS be at least one non-repeating letter in the input string\n\"\"\"\ndef no_repeat(string):"
}