{
    "id": "cmpl-4BCd8neMhw1Tmz5d8OQEV3fUCdHSd",
    "object": "text_completion",
    "created": 1638575506,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    max_s = s[-1]\n    second_max_s = s[-2]\n    lucky_number = max_s ^ second_max_s\n    print(lucky_number)\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = 0\n    for i in range(n-1):\n        ans = max(ans, s[i]^s[i+1])\n    print(ans)\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return {i: [x for x in range(1, i+1) if not i%x] for i in range(n, m+1)}",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, x, y, z = map(int, input().split())\n    count = 0\n    for a in range(1, x+1):\n        for b in range(a+1, y+1):\n            for c in range(b+1, z+1):\n                for d in range(c+1, n+1):\n                    if a + b + c == x and b + c + d == y and c + d + a == z:\n                        count += 1\n    print(count % (10**9+7))\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, x, y, z = map(int, input().split())\n    mod = 10**9 + 7\n    count = 0\n    for a in range(1, 11):\n        for b in range(1, 11):\n            for c in range(1, 11):\n                for d in range(1, 11):\n                    if a + b + c + d == n:\n                        if a == x and b == y and c == z:\n                            count += 1\n    print(count % mod)\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    dislikes = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, input().split())\n        dislikes[a-1].append(b-1)\n        dislikes[b-1].append(a-1)\n    q = int(input())\n    values = list(map(int, input().split()))\n    values.insert(0, 0)\n    values.append(0)\n    ans = [0] * (q+1)\n    for i in range(1, q+1):\n        ans[i] = ans[i-1]\n        for j in range(n):\n            if values[i] > values[i-1]:\n                ans[i] += len(dislikes[j])\n            for k in dislikes[j]:\n                if values[i] > values[i-1] and values[i] > values[i+1]:\n                    ans[i] -= 1\n    print(*ans)\n\nif __name__ == \"__main__\":\n    code()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    dislikes = [list(map(int, input().split())) for _ in range(m)]\n    q = int(input())\n    best = [int(input()) for _ in range(q)]\n\n    # Create graph\n    graph = [[] for _ in range(n)]\n    for a, b in dislikes:\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    # Count triples\n    triples = [0] * (q + 1)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            for k in range(n):\n                if i == k or j == k:\n                    continue\n                if j in graph[i] and k in graph[j]:\n                    triples[0] += 1\n\n    # Count triples for each day\n    for i in range(q):\n        for j in range(n):\n            if best[i] == j:\n                for k in range(n):\n                    if j == k:\n                        continue\n                    if best[i] in graph[k]:\n                        triples[i + 1] += 1\n\n    print(*triples)\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a, b, c, d = map(int, input().split())\n    if a/b == c/d:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a, b, c, d = map(int, input().split())\n    if a == b:\n        if c == d:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n    elif a == c:\n        if b == d:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n    elif a == d:\n        if b == c:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n    else:\n        print(\"Impossible\")\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, a, b = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    if p[0] > a or p[-1] < b:\n        print(\"NO\")\n        return\n    for i in range(n):\n        if p[i] > a:\n            print(\"NO\")\n            return\n        if p[i] < b:\n            p[i] = 1\n        else:\n            p[i] = 0\n    print(\"YES\")\n    print(*p)\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, a, b = map(int, input().split())\n    p = list(map(int, input().split()))\n    p.sort()\n    if p[0] == p[-1]:\n        print(\"YES\")\n        print(\"0\"*n)\n    else:\n        if p[0] + a > p[-1] + b:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for i in range(n):\n                if p[i] + a <= p[-1] + b:\n                    print(\"0\", end=\" \")\n                else:\n                    print(\"1\", end=\" \")\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    adj = [[] for i in range(n)]\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n    leaves = [i for i in range(n) if len(adj[i]) == 1]\n    weights = [0] * n\n    for i in range(n):\n        if len(adj[i]) == 1:\n            weights[i] = 1\n        else:\n            weights[i] = 2 ** (len(adj[i]) - 1)\n    for i in range(n):\n        if len(adj[i]) == 1:\n            continue\n        for j in adj[i]:\n            if j == adj[i][0]:\n                continue\n            weights[i] += weights[j]\n    min_weight = min(weights)\n    max_weight = max(weights)\n    print(min_weight, max_weight)\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    adj = [[] for _ in range(n)]\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n    leaves = [i for i in range(n) if len(adj[i]) == 1]\n    min_f = n\n    max_f = 0\n    for i in range(len(leaves)):\n        for j in range(i+1, len(leaves)):\n            f = 0\n            q = [leaves[i]]\n            visited = [False] * n\n            while q:\n                cur = q.pop()\n                visited[cur] = True\n                for v in adj[cur]:\n                    if not visited[v]:\n                        q.append(v)\n                        f ^= v ^ cur\n            min_f = min(min_f, f)\n            max_f = max(max_f, f)\n    print(min_f, max_f)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if t1 == None or t2 == None:\n        return False\n    else:\n        return t1 > t2",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    if t1 == None or t2 == None:\n        return False\n    else:\n        return t1 > t2",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, d = map(int, input().split())\n    x = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if x[i] - x[j] <= d and x[j] - x[k] <= d:\n                    count += 1\n    print(count)\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, d = [int(i) for i in input().split()]\n    x = [int(i) for i in input().split()]\n    x.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if x[k] - x[j] <= d:\n                    count += 1\n                else:\n                    break\n    print(count)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    for i in string:\n        if string.count(i) == 1:\n            return i\n\nprint(no_repeat(\"aabbccdde\"))\nprint(no_repeat(\"wxyz\"))\nprint(no_repeat(\"testing\"))",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    for i in string:\n        if string.count(i) == 1:\n            return i\n\nprint(no_repeat(\"aabbccdde\"))\nprint(no_repeat(\"wxyz\"))\nprint(no_repeat(\"testing\"))",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}