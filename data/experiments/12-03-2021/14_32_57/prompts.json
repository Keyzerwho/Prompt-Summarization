{
    "0": "Python 3\n\"\"\"\nGiven an array of numbers t to represent baby's gums, you need to return the index of the lump that is most pronounced. The most pronounced lump is the one that has the biggest differential to its surrounding values. If there is no distinct highest value, return -1.\n\nExamples:\nInput:\n[1, 2, 4]\nOutput:\n2\nExplanation:\nindex 0 has a differential of -1 to its right.\nindex 1 has a differential of +1 to its left, and -2 to its right. Total is -1.\nindex 2 has a differential of +2 to its left, and nothing to its right, \n\"\"\"\ndef first_tooth(array):",
    "1": "Python 3\n\"\"\"\nBaby is getting his frst tooth. This means more sleepless nights, but with the fun of feeling round his gums and trying to guess which will be first out! \n\nProbably best have a sweepstake with your friends - because you have the best chance of knowing. You can feel the gums and see where the raised bits are - most raised, most likely tooth to come through first!\n\nGiven an array of numbers (t) to represent baby's gums, you need to return the index of the lump that is most pronounced. \n\nThe most pronounced lump is the one that has the biggest differential to its surrounding values. e.g.:\n\n```\n[1, 2, 4] = 2\n\nindex 0 has a differential of -1 to its right (it is lower so the figure is negative)\n\nindex 1 has a differential of +1 to its left, and -2 to its right. Total is -1.\n\nindex 2 has a differential of +2 to its left, and nothing to its right, \n```\n\nIf there is no distinct highest value (more than one occurence of the largest differential), return -1.\n\"\"\"\ndef first_tooth(array):",
    "2": "Python 3\n\"\"\"\nYou are given an array with some bits. there three possible combinations of bits 10, 11, 0. convert array to string and find if the last charecter should be a one bit charecter or not \n\nExample 1:\n\nInput: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n\n\n\nExample 2:\n\nInput: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\n\n\nNote:\n1 .\nbits[i] is always 0 or 1.\n\n\"\"\"\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:",
    "3": "Python 3\n\"\"\"\nWe have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).  \n\nNow given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n\nExample 1:\n\nInput: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n\n\n\nExample 2:\n\nInput: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\n\n\nNote:\n1 .\nbits[i] is always 0 or 1.\n\"\"\"\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:",
    "4": "Python 3\n\"\"\"\nCreate a function that takes a string and returns that string with the first half lowercased and the last half uppercased. If it is an odd number then 'round' it up to find which letters to uppercase. \n\nExamples:\nInput: footer\nOutput: fooBAR\n\nInput: brian\nOutput: briAN\n\"\"\"\ndef sillycase(silly):",
    "5": "Python 3\n\"\"\"\nCreate a function that takes a string and returns that\nstring with the first half lowercased and the last half uppercased.\n\neg: foobar == fooBAR\n\nIf it is an odd number then 'round' it up to find which letters to uppercase. See example below.\n\n    sillycase(\"brian\")  \n    //         --^-- midpoint  \n    //         bri    first half (lower-cased)  \n    //            AN second half (upper-cased)\n\"\"\"\ndef sillycase(silly):",
    "6": "Python 3\n\"\"\"\nYou are given an array which will have a length of at least 3 containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this N.\n\nExamples:\nInput:\n[2, 4, 0, 100, 4, 11, 2602, 36]\nOutput:\n11\n\nInput:\n[160, 3, 1719, 19, 11, 13, -21]\nOutput:\n160\n\"\"\"\ndef find_outlier(integers):",
    "7": "Python 3\n\"\"\"\nYou are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer `N`. Write a method that takes the array as an argument and returns this \"outlier\" `N`.\n\n## Examples\n\n```python\n[2, 4, 0, 100, 4, 11, 2602, 36]\nShould return: 11 (the only odd number)\n\n[160, 3, 1719, 19, 11, 13, -21]\nShould return: 160 (the only even number)\n```\n\"\"\"\ndef find_outlier(integers):",
    "8": "Python 3\n\"\"\"\nGiven 2 strings, if there is a substring that appears in both strings, return true. Otherwise, return false. We only count substrings that are > 1 in length. Lowercase and uppercase letters are the same.\n\n#Examples:\n\nInput:\nSubstringTest(\"Something\",\"Fun\");\nOutput:\nfalse\nExplanation:\n\"Something\" and \"Fun\" contain no common substrings.\n\nInput:\nSubstringTest(\"Something\",\"Home\");\nOutput:\ntrue\nExplanation:\nBoth of the inputs contain the substring \"me\".\n\"\"\"\ndef substring_test(str1, str2):",
    "9": "Python 3\n\"\"\"\nGiven 2 strings, your job is to find out if there is a substring that appears in both strings. You will return true if you find a substring that appears in both strings, or false if you do not. We only care about substrings that are longer than one letter long.\n\n#Examples:\n\n````\n*Example 1*\nSubstringTest(\"Something\",\"Fun\"); //Returns false\n\n*Example 2*\nSubstringTest(\"Something\",\"Home\"); //Returns true\n````\nIn the above example, example 2 returns true because both of the inputs contain the substring \"me\". (so**ME**thing and ho**ME**)  \nIn example 1, the method will return false because something and fun contain no common substrings. (We do not count the 'n' as a substring in this Kata because it is only 1 character long)\n\n#Rules:\nLowercase and uppercase letters are the same. So 'A' == 'a'.  \nWe only count substrings that are > 1 in length.  \n\n#Input:\nTwo strings with both lower and upper cases.\n#Output:\nA boolean value determining if there is a common substring between the two inputs.\n\"\"\"\ndef substring_test(str1, str2):",
    "10": "Python 3\n\"\"\"\n\nCalculate the number of different collisions if a matrix N x M of N boys and M girls are given where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0 and collison occurs when two boys like the same girl. \n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nOnce N boys and M girls attended a party. You are given a matrix A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. Note that it is not necessary that if a boy x likes girl y, then girl y should like boy x.\nYou know that if there are two different boys x and y, who both like girl z, then there will be a collision.\nCan you calculate the number of different collisions at this party? Note that order of boys in the collision doesn't matter.\n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases. Then T test cases follow.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions at the party.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n-----Explanation-----\nExample Case 1. All three boys like the first girl, so there are (1, 2, 1), (1, 3, 1), (2, 3, 1) collisions with her. Boys 1 and 3 both like the second girl so this is one more collision. Only one boy likes the third girl, so there are no collisions with her and thus we have 4 collisions total.\nExample Case 2. For each girl there is only one boy who likes her, so there are no collisions at all.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given N different numbers you want to make combinations of L different numbers. Create combinations so that:\n\nevery number is used atleast once\na number can only be repeated only if K other numbers have been used\n\nReturn the number of possible combinations. As the answer can be very large, return it modulo 10^9 + 7.\n\n\n\n\nExample 1:\nInput: N = 3, L = 3, K = 1\nOutput: 6\nExplanation: There are 6 possible combinations. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n\n\nExample 2:\nInput: N = 2, L = 3, K = 0\nOutput: 6\nExplanation: There are 6 possible combinations. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n\n\nExample 3:\nInput: N = 2, L = 3, K = 1\nOutput: 2\nExplanation: There are 2 possible combinations. [1, 2, 1], [2, 1, 2]\n\n\n\n\u00a0\nNote:\n\n0 <= K < N <= L <= 100\n\n\"\"\"\nclass Solution:\n    def numMusicPlaylists(self, N: int, L: int, K: int) -> int:",
    "13": "Python 3\n\"\"\"\nYour music player contains N\u00a0different songs and she wants to listen to L (not necessarily different) songs during your trip. \u00a0You\u00a0create\u00a0a playlist so\u00a0that:\n\nEvery song is played at least once\nA song can only be played again only if\u00a0K\u00a0other songs have been played\n\nReturn the number of possible playlists.\u00a0 As the answer can be very large, return it modulo 10^9 + 7.\n\u00a0\n\n\n\nExample 1:\nInput: N = 3, L = 3, K = 1\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n\n\nExample 2:\nInput: N = 2, L = 3, K = 0\nOutput: 6\nExplanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n\n\nExample 3:\nInput: N = 2, L = 3, K = 1\nOutput: 2\nExplanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]\n\n\n\n\u00a0\nNote:\n\n0 <= K < N <= L <= 100\n\"\"\"\nclass Solution:\n    def numMusicPlaylists(self, N: int, L: int, K: int) -> int:",
    "14": "Python 3\n\"\"\"\n# Description\n\nGiven a current position of a knight in a chess board, find the possible positions that it will end up after 1 move.\n\n# Example\n\nInput: \"a1\"\nOutput: [\"b3\", \"c2\"]\n\"\"\"\ndef possible_positions(pos):",
    "15": "Python 3\n\"\"\"\n# Description\n\nWrite a function that accepts the current position of a knight in a chess board, it returns the possible positions that it will end up after 1 move. The resulted should be sorted. \n\n## Example\n\n\"a1\" -> [\"b3\", \"c2\"]\n\"\"\"\ndef possible_positions(pos):",
    "16": "Python 3\n\"\"\"\nYou are given an array of integers. You need to compute the bitwise XOR of all pariwise sums.\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 400\\,000$)\u00a0\u2014 the number of integers in the array.\n\nThe second line contains integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^7$).\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 xor of all pairwise sums of integers in the given array.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n3\nInput\n3\n1 2 3\n\nOutput\n2\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nCatherine received an array of integers as a gift for March 8. Eventually she grew bored with it, and she started calculated various useless characteristics for it. She succeeded to do it for each one she came up with. But when she came up with another one\u00a0\u2014 xor of all pairwise sums of elements in the array, she realized that she couldn't compute it for a very large array, thus she asked for your help. Can you do it? Formally, you need to compute\n\n$$ (a_1 + a_2) \\oplus (a_1 + a_3) \\oplus \\ldots \\oplus (a_1 + a_n) \\\\ \\oplus (a_2 + a_3) \\oplus \\ldots \\oplus (a_2 + a_n) \\\\ \\ldots \\\\ \\oplus (a_{n-1} + a_n) \\\\ $$\n\nHere $x \\oplus y$ is a bitwise XOR operation (i.e. $x$ ^ $y$ in many modern programming languages). You can read about it in Wikipedia: https://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 400\\,000$)\u00a0\u2014 the number of integers in the array.\n\nThe second line contains integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^7$).\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 xor of all pairwise sums of integers in the given array.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n3\nInput\n3\n1 2 3\n\nOutput\n2\n\n\n-----Note-----\n\nIn the first sample case there is only one sum $1 + 2 = 3$.\n\nIn the second sample case there are three sums: $1 + 2 = 3$, $1 + 3 = 4$, $2 + 3 = 5$. In binary they are represented as $011_2 \\oplus 100_2 \\oplus 101_2 = 010_2$, thus the answer is 2.\n\n$\\oplus$ is the bitwise xor operation. To define $x \\oplus y$, consider binary representations of integers $x$ and $y$. We put the $i$-th bit of the result to be 1 when exactly one of the $i$-th bits of $x$ and $y$ is 1. Otherwise, the $i$-th bit of the result is put to be 0. For example, $0101_2 \\, \\oplus \\, 0011_2 = 0110_2$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nThere are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively.\nFor each of these bags, you will paint one of the balls red, and paint the other blue.\nAfterwards, the 2N balls will be classified according to color.\nThen, we will define the following:\n - R_{max}: the maximum integer written on a ball painted in red\n - R_{min}: the minimum integer written on a ball painted in red\n - B_{max}: the maximum integer written on a ball painted in blue\n - B_{min}: the minimum integer written on a ball painted in blue\nFind the minimum possible value of (R_{max} - R_{min}) \\times (B_{max} - B_{min}).\n\n-----Constraints-----\n - 1 \u2264 N \u2264 200,000\n - 1 \u2264 x_i, y_i \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum possible value.\n\n-----Sample Input-----\n3\n1 2\n3 4\n5 6\n\n-----Sample Output-----\n15\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThere are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively.\nFor each of these bags, you will paint one of the balls red, and paint the other blue.\nAfterwards, the 2N balls will be classified according to color.\nThen, we will define the following:\n - R_{max}: the maximum integer written on a ball painted in red\n - R_{min}: the minimum integer written on a ball painted in red\n - B_{max}: the maximum integer written on a ball painted in blue\n - B_{min}: the minimum integer written on a ball painted in blue\nFind the minimum possible value of (R_{max} - R_{min}) \\times (B_{max} - B_{min}).\n\n-----Constraints-----\n - 1 \u2264 N \u2264 200,000\n - 1 \u2264 x_i, y_i \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum possible value.\n\n-----Sample Input-----\n3\n1 2\n3 4\n5 6\n\n-----Sample Output-----\n15\n\nThe optimal solution is to paint the balls with x_1, x_2, y_3 red, and paint the balls with y_1, y_2, x_3 blue.\n\"\"\"\ndef code():"
}