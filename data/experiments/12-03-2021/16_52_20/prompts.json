{
    "0": "Python 3\n\"\"\"\nYou'll be given a string, and have to return the total of all the unicode characters as an int.\n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291\n\"\"\"\ndef uni_total(string):",
    "1": "Python 3\n\"\"\"\nYou'll be given a string, and have to return the total of all the unicode characters as an int. Should be able to handle any characters sent at it. \n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291\n\"\"\"\ndef uni_total(string):",
    "2": "Python 3\n\"\"\"\nTask\n=======\n\nMake a custom esolang interpreter for the language Tick. Tick is a descendant of [Ticker] but also very different data and command-wise.\n\nSyntax/Info\n========\n\nCommands are given in character format. Non-command characters should be ignored. Tick  only has 4 commands.\n\nCommands\n========\n\n`>`: Move data selector right\n\n`<`: Move data selector left(infinite in both directions)\n\n`+`: Increment memory cell by 1. 255+1=0\n\n`*`: Add ascii value of memory cell to the output tape.\n\nExamples\n========\n\n**Hello world!**\n\n```\nn```\n\"\"\"\ndef interpreter(tape):",
    "3": "Python 3\n\"\"\"\nTask\n=======\n\nMake a custom esolang interpreter for the language Tick. Tick is a descendant of [Ticker](https://www.codewars.com/kata/esolang-ticker) but also very different data and command-wise.\n\nSyntax/Info\n========\n\nCommands are given in character format. Non-command characters should be ignored. Tick has an potentially infinite memory as opposed to Ticker(which you have a special command to add a new cell) and only has 4 commands(as opposed to 7). Read about this esolang [here](https://esolangs.org/wiki/Tick).\n\nCommands\n========\n\n`>`: Move data selector right\n\n`<`: Move data selector left(infinite in both directions)\n\n`+`: Increment memory cell by 1. 255+1=0\n\n`*`: Add ascii value of memory cell to the output tape.\n\nExamples\n========\n\n**Hello world!**\n\n```\nn```\n\"\"\"\ndef interpreter(tape):",
    "4": "Python 3\n\"\"\"\nYou are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N.\nThere are N^2 ways to choose two integers i and j such that 1 \\leq i, j \\leq N. For each of these N^2 pairs, we will compute a_i + b_j.\nCompute the XOR of these N^2 integers.\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 200,000\n - 0 \\leq a_i, b_i < 2^{28}\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\nb_1 b_2 ... b_N\n\n-----Output-----\nPrint the result of the computation.\n\n-----Sample Input-----\n2\n1 2\n3 4\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N.\nThere are N^2 ways to choose two integers i and j such that 1 \\leq i, j \\leq N. For each of these N^2 pairs, we will compute a_i + b_j and write it on a sheet of paper.\nThat is, we will write N^2 integers in total.\nCompute the XOR of these N^2 integers.\nDefinition of XOR\nThe XOR of integers c_1, c_2, ..., c_m is defined as follows:\n - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \\leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even.\nFor example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6.\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 200,000\n - 0 \\leq a_i, b_i < 2^{28}\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\nb_1 b_2 ... b_N\n\n-----Output-----\nPrint the result of the computation.\n\n-----Sample Input-----\n2\n1 2\n3 4\n\n-----Sample Output-----\n2\n\nOn the sheet, the following four integers will be written: 4(1+3), 5(1+4), 5(2+3) and 6(2+4).\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a function that when given a number n, returns the nth number in the Fibonacci Sequence.\n\nExamples:\nInput:\nnth_fib(4)\nOutput:\n2\nExplanation:\nBecause 2 is the 4th number in the Fibonacci Sequence.\n\"\"\"\ndef nth_fib(n):",
    "7": "Python 3\n\"\"\"\nI love Fibonacci numbers in general, but I must admit I love some more than others. \n\nI would like for you to write me a function that when given a number (n)  returns the n-th number in the Fibonacci Sequence.\n\nFor example:\n\n```python\n   nth_fib(4) == 2\n```\n\nBecause 2 is the 4th number in the Fibonacci Sequence.\n\nFor reference, the first two numbers in the Fibonacci sequence are 0 and 1, and each subsequent number is the sum of the previous two.\n\"\"\"\ndef nth_fib(n):",
    "8": "Python 3\n\"\"\"\nYou are given a list of integers of length $n$. You need to split the list into two smaller lists.\nEach list must have at least one integer, and every integer must be in exactly one list.\n\nYou want to largest integer from the first list to differ as little as possible from the smallest integer in the second list.\nThe output will be the smallest value of this difference.\n\nFor example, if $n=5$ and the list is $s=[3, 1, 2, 6, 4]$, then one of the possible splits is:   \n$A = [1, 2, 4]$, $B = [3, 6]$. \n\nThe value $|\\max(A) - \\min(B)|$ is equal to $|4-3|=1$. \n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case consists of two lines. \n\nThe first line contains positive integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 length of the list. \n\nThe second line contains $n$ positive integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le 1000$), where $s_i$\u00a0\u2014 is the integer of the $i$-th element.\n\n\n-----Output-----\n\nFor each test case print one integer\u00a0\u2014 the minimum value of $|\\max(A) - \\min(B)|$\n\n\n-----Example-----\nInput\n5\n5\n3 1 2 6 4\n6\n2 1 3 2 4 3\n4\n7 9 3 1\n2\n1 1000\n3\n100 150 200\n\nOutput\n1\n0\n2\n999\n50\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThere are $n$ athletes in front of you. Athletes are numbered from $1$ to $n$ from left to right. You know the strength of each athlete\u00a0\u2014 the athlete number $i$ has the strength $s_i$.\n\nYou want to split all athletes into two teams. Each team must have at least one athlete, and each athlete must be exactly in one team.\n\nYou want the strongest athlete from the first team to differ as little as possible from the weakest athlete from the second team. Formally, you want to split the athletes into two teams $A$ and $B$ so that the value $|\\max(A) - \\min(B)|$ is as small as possible, where $\\max(A)$ is the maximum strength of an athlete from team $A$, and $\\min(B)$ is the minimum strength of an athlete from team $B$.\n\nFor example, if $n=5$ and the strength of the athletes is $s=[3, 1, 2, 6, 4]$, then one of the possible split into teams is:   first team: $A = [1, 2, 4]$,  second team: $B = [3, 6]$. \n\nIn this case, the value $|\\max(A) - \\min(B)|$ will be equal to $|4-3|=1$. This example illustrates one of the ways of optimal split into two teams.\n\nPrint the minimum value $|\\max(A) - \\min(B)|$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case consists of two lines. \n\nThe first line contains positive integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 number of athletes. \n\nThe second line contains $n$ positive integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le 1000$), where $s_i$\u00a0\u2014 is the strength of the $i$-th athlete. Please note that $s$ values may not be distinct.\n\n\n-----Output-----\n\nFor each test case print one integer\u00a0\u2014 the minimum value of $|\\max(A) - \\min(B)|$ with the optimal split of all athletes into two teams. Each of the athletes must be a member of exactly one of the two teams.\n\n\n-----Example-----\nInput\n5\n5\n3 1 2 6 4\n6\n2 1 3 2 4 3\n4\n7 9 3 1\n2\n1 1000\n3\n100 150 200\n\nOutput\n1\n0\n2\n999\n50\n\n\n\n-----Note-----\n\nThe first test case was explained in the statement. In the second test case, one of the optimal splits is $A=[2, 1]$, $B=[3, 2, 4, 3]$, so the answer is $|2-2|=0$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given an array consisting of n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step you selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image] \n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after your algorithm finishes.\n\nsummary : \n\n\n\n-----Input-----\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers x_{i} (1 \u2264 x_{i} \u2264 n), the indices of cells for which it is necessary to output their content after your algorithm finishes.\n\n\n-----Output-----\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after your algorithm finishes.\n\n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8, 3, 11, 4, 9, 5, 13, 6, 10, 7].\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nDima is a beginner programmer. During his working process, he regularly has to repeat the following operation again and again: to remove every second element from the array. One day he has been bored with easy solutions of this problem, and he has come up with the following extravagant algorithm.\n\nLet's consider that initially array contains n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step Dima selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image] \n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after Dima's algorithm finishes.\n\n\n-----Input-----\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers x_{i} (1 \u2264 x_{i} \u2264 n), the indices of cells for which it is necessary to output their content after Dima's algorithm finishes.\n\n\n-----Output-----\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after Dima's algorithm finishes.\n\n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8, 3, 11, 4, 9, 5, 13, 6, 10, 7].\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n can be composed from the first m lowercase English letters exist such that the length of Longest Common Subsequence between S and T is n - 1.\n\nLongest Common Subsequence of two strings S and T is the longest string C such that C both in S and T as a subsequence.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1.\n\nRecall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\n\n-----Note-----\n\nFor the first sample, the 6 possible strings T are: aab, aac, aba, aca, baa, caa. \n\nFor the second sample, the 11 possible strings T are: aaa, aac, aba, abb, abc, aca, acb, baa, bab, caa, cab.\n\nFor the third sample, the only possible string T is b.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a rectangular parallelepiped with sides of positive integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three integers $a$, $b$, $c$ such that $1\\leq a\\leq b\\leq c$ and parallelepiped $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$.\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$)\u00a0\u2014 the number of test cases.\n\nEach of the next $t$ lines contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$)\u00a0\u2014 the sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n4\n4\n165\n\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a rectangular parallelepiped with sides of positive integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three integers ($a$, $b$, $c$) such that $1\\leq a\\leq b\\leq c$ and parallelepiped $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$. Note, that all small parallelepipeds have to be rotated in the same direction.\n\nFor example, parallelepiped $1\\times 5\\times 6$ can be divided into parallelepipeds $1\\times 3\\times 5$, but can not be divided into parallelepipeds $1\\times 2\\times 3$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$)\u00a0\u2014 the number of test cases.\n\nEach of the next $t$ lines contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$)\u00a0\u2014 the sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n4\n4\n165\n\n\n\n-----Note-----\n\nIn the first test case, rectangular parallelepiped $(1, 1, 1)$ can be only divided into rectangular parallelepiped with sizes $(1, 1, 1)$.\n\nIn the second test case, rectangular parallelepiped $(1, 6, 1)$ can be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$, $(1, 1, 3)$ and $(1, 1, 6)$.\n\nIn the third test case, rectangular parallelepiped $(2, 2, 2)$ can be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$, $(1, 2, 2)$ and $(2, 2, 2)$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given N pinholes on the xy-plane.\nWe will denote the Manhattan distance between the i-th and j-th coordinates as d(i,j)(=|x_i-x_j|+|y_i-y_j|).\n\nA given compass pointing (p, q) can also point to (p,r) when d(p,q) = d(p,r) \n\nInitially, you are at (a,b) coordinates. You need to find the number of pairs of coordinates such that the compass can point.\n\n-----Constraints-----\n - 2\u2266N\u226610^5\n - 1\u2266x_i, y_i\u226610^9\n - 1\u2266a < b\u2266N\n - When i \u2260 j, (x_i, y_i) \u2260 (x_j, y_j)\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN a b\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Sample Input-----\n5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n\n-----Sample Output-----\n4\n\nInitially, the compass points at the first and second pinholes.\nSince d(1,2) = d(1,3), the compass can be moved so that it will point at the first and third pinholes.\nSince d(1,3) = d(3,4), the compass can also point at the third and fourth pinholes.\nSince d(1,2) = d(2,5), the compass can also point at the second and fifth pinholes.\nNo other pairs of pinholes can be pointed by the compass, thus the answer is 4.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are N pinholes on the xy-plane. The i-th pinhole is located at (x_i,y_i).\nWe will denote the Manhattan distance between the i-th and j-th pinholes as d(i,j)(=|x_i-x_j|+|y_i-y_j|).\nYou have a peculiar pair of compasses, called Manhattan Compass.\nThis instrument always points at two of the pinholes.\nThe two legs of the compass are indistinguishable, thus we do not distinguish the following two states: the state where the compass points at the p-th and q-th pinholes, and the state where it points at the q-th and p-th pinholes.\nWhen the compass points at the p-th and q-th pinholes and d(p,q)=d(p,r), one of the legs can be moved so that the compass will point at the p-th and r-th pinholes.\nInitially, the compass points at the a-th and b-th pinholes.\nFind the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Constraints-----\n - 2\u2266N\u226610^5\n - 1\u2266x_i, y_i\u226610^9\n - 1\u2266a < b\u2266N\n - When i \u2260 j, (x_i, y_i) \u2260 (x_j, y_j)\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN a b\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Sample Input-----\n5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n\n-----Sample Output-----\n4\n\nInitially, the compass points at the first and second pinholes.\nSince d(1,2) = d(1,3), the compass can be moved so that it will point at the first and third pinholes.\nSince d(1,3) = d(3,4), the compass can also point at the third and fourth pinholes.\nSince d(1,2) = d(2,5), the compass can also point at the second and fifth pinholes.\nNo other pairs of pinholes can be pointed by the compass, thus the answer is 4.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nKate likes to count words which means continuous sequences of English alphabetic characters. Here are examples:\n\n`Hello there, little user5453 374 ())$. I\u2019d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't like \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\" so she doesn't count them.\n\nToday Kate has decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I\u2019d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I\u2019d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"\ndef word_count(s):",
    "19": "Python 3\n\"\"\"\nKate likes to count words in text blocks. By words she means continuous sequences of English alphabetic characters (from a to z ). Here are examples:\n\n`Hello there, little user5453 374 ())$. I\u2019d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't like some of words and doesn't count them. Words to be excluded are \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\", case-insensitive.\n\nToday Kate's too lazy and have decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I\u2019d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I\u2019d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"\ndef word_count(s):"
}