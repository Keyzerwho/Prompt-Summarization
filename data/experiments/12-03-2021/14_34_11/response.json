{
    "id": "cmpl-4BATbLWDNNtxbcj2qEppXuwjD1UCO",
    "object": "text_completion",
    "created": 1638567227,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    V.sort()\n    count = 0\n    for i in range(len(V) - 2):\n        k = i + 2\n        for j in range(i + 1, len(V) - 1):\n            while k < len(V) and V[i] + V[j] > V[k]:\n                k += 1\n            count += k - j - 1\n    return count",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    V.sort()\n    count = 0\n    for i in range(len(V) - 2):\n        k = i + 2\n        for j in range(i + 1, len(V) - 1):\n            while k < len(V) and V[i] + V[j] > V[k]:\n                k += 1\n            count += k - j - 1\n    return count",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    #print(words)\n    #print(len(words))\n    #print(len(set(words)))\n    #print(set(words))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n    #print(len(set(words)))\n",
            "index": 2,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    words.sort()\n    groups = []\n    for i in range(n):\n        if i == 0:\n            groups.append([words[i]])\n        else:\n            if words[i] == words[i-1]:\n                groups[-1].append(words[i])\n            else:\n                groups.append([words[i]])\n    print(len(groups))\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    adj = [[] for i in range(n)]\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        adj[a-1].append(b-1)\n        adj[b-1].append(a-1)\n    v = list(map(int, input().split()))\n    q = [0]\n    visited = [False]*n\n    visited[0] = True\n    while q:\n        cur = q.pop(0)\n        for i in adj[cur]:\n            if not visited[i]:\n                q.append(i)\n                visited[i] = True\n    q = [0]\n    visited = [False]*n\n    visited[0] = True\n    ans = 0\n    while q:\n        cur = q.pop(0)\n        for i in adj[cur]:\n            if not visited[i]:\n                q.append(i)\n                visited[i] = True\n                ans += abs(v[cur]-v[i])\n                v[i] = v[cur]\n    print(ans)\n\nif __name__ == \"__main__\":\n    code()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    graph = [[] for i in range(n)]\n    for i in range(n-1):\n        a, b = map(int, input().split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    v = list(map(int, input().split()))\n    visited = [False]*n\n    visited[0] = True\n    q = [0]\n    while q:\n        cur = q.pop(0)\n        for i in graph[cur]:\n            if not visited[i]:\n                visited[i] = True\n                q.append(i)\n    ans = 0\n    for i in range(n):\n        if not visited[i]:\n            ans += v[i]\n    print(ans)\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not root:\n            return []\n        res = []\n        self.dfs(root, sum, [], res)\n        return res\n    \n    def dfs(self, root, sum, ls, res):\n        if not root.left and not root.right and sum == root.val:\n            ls.append(root.val)\n            res.append(ls)\n        if root.left:\n            self.dfs(root.left, sum-root.val, ls+[root.val], res)\n        if root.right:\n            self.dfs(root.right, sum-root.val, ls+[root.val], res)",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        if not root:\n            return []\n        res = []\n        self.dfs(root, sum, [], res)\n        return res\n    \n    def dfs(self, root, sum, ls, res):\n        if not root.left and not root.right and sum == root.val:\n            ls.append(root.val)\n            res.append(ls)\n        if root.left:\n            self.dfs(root.left, sum-root.val, ls+[root.val], res)\n        if root.right:\n            self.dfs(root.right, sum-root.val, ls+[root.val], res)",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # return a sorted array.\n    return sorted(value)",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return sorted(value)",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        m = int(input())\n        if m == 0:\n            print(1)\n        elif m == 1:\n            print(7)\n        elif m == 2:\n            print(6)\n        elif m == 3:\n            print(5)\n        elif m == 4:\n            print(4)\n        elif m == 5:\n            print(3)\n        elif m == 6:\n            print(2)\n        elif m == 7:\n            print(1)\n        else:\n            print(0)\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        m = int(input())\n        if m == 2:\n            print(2)\n        elif m == 4:\n            print(4)\n        else:\n            print(0)\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        pairs.sort(key=lambda x: x[1])\n        cur, ans = float('-inf'), 0\n        for x, y in pairs:\n            if cur < x:\n                cur = y\n                ans += 1\n        return ans",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        ",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    graph = [[] for i in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    init = list(map(int, input().split()))\n    goal = list(map(int, input().split()))\n    cnt = 0\n    for i in range(1, n+1):\n        if init[i-1] != goal[i-1]:\n            cnt += 1\n            for j in graph[i]:\n                init[j-1] = 1 - init[j-1]\n    print(cnt)\n    for i in range(1, n+1):\n        if init[i-1] != goal[i-1]:\n            print(i)\n\nif __name__ == '__main__':\n    code()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    graph = [[] for i in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    init = list(map(int, input().split()))\n    goal = list(map(int, input().split()))\n    cnt = 0\n    for i in range(1, n+1):\n        if init[i-1] != goal[i-1]:\n            cnt += 1\n            for j in graph[i]:\n                if init[j-1] == goal[i-1]:\n                    init[j-1] = 1 - init[j-1]\n                    break\n    print(cnt)\n    for i in range(1, n+1):\n        if init[i-1] == goal[i-1]:\n            print(i)\n\nif __name__ == '__main__':\n    code()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        m, Tc, Th = map(int, input().split())\n        if (Th - Tc) % 3 != 0:\n            print(\"Yes\")\n        elif (Th - Tc) // 3 > m:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        m, Tc, Th = map(int, input().split())\n        if Tc > Th:\n            Tc, Th = Th, Tc\n        if Tc == Th:\n            print(\"No\")\n        elif (Th - Tc) % 2 == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    f = [0]*n\n    for i in range(n):\n        f[p[i]-1] = i\n    for i in range(n):\n        print(f[i], end=' ')\n\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    f = [0]*n\n    for i in range(1,n):\n        f[i] = f[i-1] + (1 if p[i] < p[i-1] else 0)\n    for i in range(n-2,-1,-1):\n        f[i] = min(f[i], f[i+1] + (1 if p[i] > p[i+1] else 0))\n    print(*f)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}