{
    "0": "Python 3\n\"\"\"\n# Task\nYou are given some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.\n\n# Example\n\nInput: `V = [2, 3, 7, 4]`\nOutput: `1`\nExplanation: There is only `(2, 3, 4)` can form a triangle.\n\nInput: `V = [5, 6, 7, 8]`\nOutput: `4`\nExplanation: `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` \n\n# Input/Output\n\n - `[input]` integer array `V`\n\n stick lengths\n \n `3 <= V.length <= 100`\n \n `0 < V[i] <=100`\n\n\n - `[output]` an integer\n\n number of ways we can choose 3 sticks to form a triangle.\n\"\"\"\ndef counting_triangles(V):",
    "1": "Python 3\n\"\"\"\n# Task\nGiven some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.\n\n# Example\n\n For `V = [2, 3, 7, 4]`, the result should be `1`.\n\n There is only `(2, 3, 4)` can form a triangle.\n \n For `V = [5, 6, 7, 8]`, the result should be `4`.\n \n `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` \n\n# Input/Output\n\n\n - `[input]` integer array `V`\n\n stick lengths\n \n `3 <= V.length <= 100`\n \n `0 < V[i] <=100`\n\n\n - `[output]` an integer\n\n number of ways we can choose 3 sticks to form a triangle.\n\"\"\"\ndef counting_triangles(V):",
    "2": "Python 3\n\"\"\"\nSome names with latin alphabets have ambiguities.\nFor example, the Berland sound u can be written in the Latin alphabet as \"u\", and can be written as \"oo\". For this reason, two words \"ulyana\" and \"oolyana\" denote the same name.\n\nThe second ambiguity is about the Berland sound h: one can use both \"h\" and \"kh\" to write it.\n\nHow many distinct names are there, if two ambiguities described above are taken into account.\n\nFor example, the following pairs of words denote the same name:  \"koouper\" and \"kuooper\". Making the replacements described above, you can make both words to be equal: \"koouper\" $\\rightarrow$ \"kuuper\" and \"kuooper\" $\\rightarrow$ \"kuuper\".  \"khun\" and \"kkkhoon\". With the replacements described above you can make both words to be equal: \"khun\" $\\rightarrow$ \"khoon\" and \"kkkhoon\" $\\rightarrow$ \"kkhoon\" $\\rightarrow$ \"khoon\". \n\nFor a given list of words, find the minimal number of groups where the words in each group denote the same name.\n\n\n-----Input-----\n\nThe first line contains integer number n (2 \u2264 n \u2264 400) \u2014 number of the words in the list.\n\nThe following n lines contain words, one word per line. Each word consists of only lowercase Latin letters. The length of each word is between 1 and 20 letters inclusive.\n\n\n-----Output-----\n\nPrint the minimal number of groups where the words in each group denote the same name.\n\n\n-----Examples-----\nInput\n10\nmihail\noolyana\nkooooper\nhoon\nulyana\nkoouper\nmikhail\nkhun\nkuooper\nkkkhoon\n\nOutput\n4\n\nInput\n9\nhariton\nhkariton\nbuoi\nkkkhariton\nboooi\nbui\nkhariton\nboui\nboi\n\nOutput\n5\n\nInput\n2\nalex\nalex\n\nOutput\n1\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThere are some ambiguities when one writes Berland names with the letters of the Latin alphabet.\n\nFor example, the Berland sound u can be written in the Latin alphabet as \"u\", and can be written as \"oo\". For this reason, two words \"ulyana\" and \"oolyana\" denote the same name.\n\nThe second ambiguity is about the Berland sound h: one can use both \"h\" and \"kh\" to write it. For example, the words \"mihail\" and \"mikhail\" denote the same name.\n\nThere are n users registered on the Polycarp's website. Each of them indicated a name represented by the Latin letters. How many distinct names are there among them, if two ambiguities described above are taken into account?\n\nFormally, we assume that two words denote the same name, if using the replacements \"u\"\u00a0[Image]\u00a0\"oo\" and \"h\"\u00a0[Image]\u00a0\"kh\", you can make the words equal. One can make replacements in both directions, in any of the two words an arbitrary number of times. A letter that resulted from the previous replacement can participate in the next replacements.\n\nFor example, the following pairs of words denote the same name:  \"koouper\" and \"kuooper\". Making the replacements described above, you can make both words to be equal: \"koouper\" $\\rightarrow$ \"kuuper\" and \"kuooper\" $\\rightarrow$ \"kuuper\".  \"khun\" and \"kkkhoon\". With the replacements described above you can make both words to be equal: \"khun\" $\\rightarrow$ \"khoon\" and \"kkkhoon\" $\\rightarrow$ \"kkhoon\" $\\rightarrow$ \"khoon\". \n\nFor a given list of words, find the minimal number of groups where the words in each group denote the same name.\n\n\n-----Input-----\n\nThe first line contains integer number n (2 \u2264 n \u2264 400) \u2014 number of the words in the list.\n\nThe following n lines contain words, one word per line. Each word consists of only lowercase Latin letters. The length of each word is between 1 and 20 letters inclusive.\n\n\n-----Output-----\n\nPrint the minimal number of groups where the words in each group denote the same name.\n\n\n-----Examples-----\nInput\n10\nmihail\noolyana\nkooooper\nhoon\nulyana\nkoouper\nmikhail\nkhun\nkuooper\nkkkhoon\n\nOutput\n4\n\nInput\n9\nhariton\nhkariton\nbuoi\nkkkhariton\nboooi\nbui\nkhariton\nboui\nboi\n\nOutput\n5\n\nInput\n2\nalex\nalex\n\nOutput\n1\n\n\n\n-----Note-----\n\nThere are four groups of words in the first example. Words in each group denote same name:  \"mihail\", \"mikhail\"  \"oolyana\", \"ulyana\"  \"kooooper\", \"koouper\"  \"hoon\", \"khun\", \"kkkhoon\" \n\nThere are five groups of words in the second example. Words in each group denote same name:  \"hariton\", \"kkkhariton\", \"khariton\"  \"hkariton\"  \"buoi\", \"boooi\", \"boui\"  \"bui\"  \"boi\" \n\nIn the third example the words are equal, so they denote the same name.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou're given a tree with n vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to v_{i}. In one move you can apply the following operation:  Select the subtree of the given tree that includes the vertex with number 1.  Increase or decrease by one all the integers which are written on the vertices of that subtree. \n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}) indicating there's an edge between vertices a_{i} and b_{i}. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v_1, v_2, ..., v_{n} (|v_{i}| \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2\n1 3\n1 -1 1\n\nOutput\n3\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nA tree is a graph with n vertices and exactly n - 1 edges; this graph should meet the following condition: there exists exactly one shortest (by number of edges) path between any pair of its vertices.\n\nA subtree of a tree T is a tree with both vertices and edges as subsets of vertices and edges of T.\n\nYou're given a tree with n vertices. Consider its vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to v_{i}. In one move you can apply the following operation:  Select the subtree of the given tree that includes the vertex with number 1.  Increase (or decrease) by one all the integers which are written on the vertices of that subtree. \n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}) indicating there's an edge between vertices a_{i} and b_{i}. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v_1, v_2, ..., v_{n} (|v_{i}| \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2\n1 3\n1 -1 1\n\nOutput\n3\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n\n\nReturn:\n\n\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:",
    "7": "Python 3\n\"\"\"\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n\nNote:\u00a0A leaf is a node with no children.\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n\n\nReturn:\n\n\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:",
    "8": "Python 3\n\"\"\"\nFailed Sort - Bug Fixing #4\nYour task is to fix the function to sort all numbers in ascending order\n\"\"\"\ndef sort_array(value):",
    "9": "Python 3\n\"\"\"\nFailed Sort - Bug Fixing #4\nOh no, Timmy's Sort doesn't seem to be working? Your task is to fix the sortArray function to sort all numbers in ascending order\n\"\"\"\ndef sort_array(value):",
    "10": "Python 3\n\"\"\"\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThe Bubble Cup hypothesis stood unsolved for $130$ years. Who ever proves the hypothesis will be regarded as one of the greatest mathematicians of our time! A famous mathematician Jerry Mao managed to reduce the hypothesis to this problem:\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\nHelp Jerry Mao solve the long standing problem!\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nIn first case, for $m=2$, polynomials that satisfy the constraint are $x$ and $2$.\n\nIn second case, for $m=4$, polynomials that satisfy the constraint are $x^2$, $x + 2$, $2x$ and $4$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given n pairs of numbers where the first number is always smaller than the second number in a pair.\n\nA chain if formed when a pair (c, d) can follow another pair (a, b) if and only if b < c.\n\nFind the length of longest chain which can be formed. \n\nExample 1:\n\nInput: [[1,2], [2,3], [3,4]]\nOutput: 2\n\n\n\n\"\"\"\nclass Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -> int:",
    "13": "Python 3\n\"\"\"\nYou are given n pairs of numbers where the first number is always smaller than the second number.\n\n\n\nNow, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion. \n\n\n\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\n\n\n\nExample 1:\n\nInput: [[1,2], [2,3], [3,4]]\nOutput: 2\nExplanation: The longest chain is [1,2] -> [3,4]\n\n\n\nNote:\n\nThe number of given pairs will be in the range [1, 1000].\n\"\"\"\nclass Solution:\n    def findLongestChain(self, pairs: List[List[int]]) -> int:",
    "14": "Python 3\n\"\"\"\nA tree having n nodes, numbered from 1 to n. Each node i has an initial value init_{i}, which is either 0 or 1. The root of the tree is node 1.\n\nOne can perform several operations on the tree and available type of operation is to pick a node x.\nRight after picking node x, the value of node x flips, the values of sons of x remain the same, the values of sons of sons of x flips, the values of sons of sons of sons of x remain the same and so on.\n\nThe goal is to get each node i to have value goal_{i}, which can also be only 0 or 1 by using minimum number of operations. \n\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; u_{i} \u2260 v_{i}) meaning there is an edge between nodes u_{i} and v_{i}. \n\nThe next line contains n integer numbers, the i-th of them corresponds to init_{i} (init_{i} is either 0 or 1). The following line also contains n integer numbers, the i-th number corresponds to goal_{i} (goal_{i} is either 0 or 1).\n\n\n-----Output-----\n\nIn the first line output an integer number cnt, representing the minimal number of operations you perform. Each of the next cnt lines should contain an integer x_{i}, representing that you pick a node x_{i}.\n\n\n-----Examples-----\nInput\n10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n\nOutput\n2\n4\n7\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nIahub is very proud of his recent discovery, propagating trees. Right now, he invented a new tree, called xor-tree. After this new revolutionary discovery, he invented a game for kids which uses xor-trees.\n\nThe game is played on a tree having n nodes, numbered from 1 to n. Each node i has an initial value init_{i}, which is either 0 or 1. The root of the tree is node 1.\n\nOne can perform several (possibly, zero) operations on the tree during the game. The only available type of operation is to pick a node x. Right after someone has picked node x, the value of node x flips, the values of sons of x remain the same, the values of sons of sons of x flips, the values of sons of sons of sons of x remain the same and so on.\n\nThe goal of the game is to get each node i to have value goal_{i}, which can also be only 0 or 1. You need to reach the goal of the game by using minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; u_{i} \u2260 v_{i}) meaning there is an edge between nodes u_{i} and v_{i}. \n\nThe next line contains n integer numbers, the i-th of them corresponds to init_{i} (init_{i} is either 0 or 1). The following line also contains n integer numbers, the i-th number corresponds to goal_{i} (goal_{i} is either 0 or 1).\n\n\n-----Output-----\n\nIn the first line output an integer number cnt, representing the minimal number of operations you perform. Each of the next cnt lines should contain an integer x_{i}, representing that you pick a node x_{i}.\n\n\n-----Examples-----\nInput\n10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n\nOutput\n2\n4\n7\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven numbers $m$, $Tc$, $Th$. \nIf the difference between $Tc$ and $Th$ is not divisible by $3$, return \"Yes\".\nElse if the differnce divided by $3$ is more than $m$ return \"Yes\". \nElse return \"No\".\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, three  integers $m, Tc,Th$. \n\n-----Output:-----\nFor each testcase, output based on the rules.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq m,Tc,Th \\leq 10^9$\n- $Tc \\leq Th $\n\n-----Sample Input:-----\n2\n4 5 10\n2 2 5\n\n-----Sample Output:-----\nYes\nNo\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThis is a peculiar functioning setup.\nTwo Tanks are separated from each other by a wall .There is a pipe in the wall which connects  both tanks  which allows flow of water between them . Due to this ,there is change in temperature of both tanks , every minute temperature of Tank with larger temperature among two decreases by one and temperature of Tank  with smaller temperature among two increases by two until equilibrium is reached , But there is a problem .\nThe pipe can't control this flow of water if there is Non-equilibrium (inequality of temperature  on  both sides )  even after $m$ minutes and the pipe will burst after it , your task is to predict whether the pipe will burst or not .\nNote: If equilibrium cannot be reached the process will continue forever.\nThe initial temperature of Cold Tank is $Tc$ , of Hot Tank it is $Th$. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, three  integers $m, Tc,Th$. \n\n-----Output:-----\nFor each testcase, output in a single line answer \"Yes\" if Pipe will burst after m minutes \"No\" if pipe will not burst.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq m,Tc,Th \\leq 10^9$\n- $Tc \\leq Th $\n\n-----Sample Input:-----\n2\n4 5 10\n2 2 5\n\n-----Sample Output:-----\nYes\nNo\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given a permutation $p_1, p_2, \\ldots, p_n$.\n\nIn one move you can swap two adjacent values.\n\nYou want to perform a minimum number of moves, such that in the end there should be an integer $i$, $1 \\leq i \\leq n-k+1$ such that $p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$.\n\nLet $f(k)$ be the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation.\n\nYou need to find $f(1), f(2), \\ldots, f(n)$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $n$ ($1 \\leq n \\leq 200\\,000$): the number of elements in the permutation.\n\nThe next line of input contains $n$ integers $p_1, p_2, \\ldots, p_n$: given permutation ($1 \\leq p_i \\leq n$).\n\n\n-----Output-----\n\nPrint $n$ integers, the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation, for $k=1, 2, \\ldots, n$.\n\n\n-----Examples-----\nInput\n5\n5 4 3 2 1\n\nOutput\n0 1 3 6 10 \n\nInput\n3\n1 2 3\n\nOutput\n0 0 0\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a permutation $p_1, p_2, \\ldots, p_n$.\n\nIn one move you can swap two adjacent values.\n\nYou want to perform a minimum number of moves, such that in the end there will exist a subsegment $1,2,\\ldots, k$, in other words in the end there should be an integer $i$, $1 \\leq i \\leq n-k+1$ such that $p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$.\n\nLet $f(k)$ be the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation.\n\nYou need to find $f(1), f(2), \\ldots, f(n)$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $n$ ($1 \\leq n \\leq 200\\,000$): the number of elements in the permutation.\n\nThe next line of input contains $n$ integers $p_1, p_2, \\ldots, p_n$: given permutation ($1 \\leq p_i \\leq n$).\n\n\n-----Output-----\n\nPrint $n$ integers, the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation, for $k=1, 2, \\ldots, n$.\n\n\n-----Examples-----\nInput\n5\n5 4 3 2 1\n\nOutput\n0 1 3 6 10 \n\nInput\n3\n1 2 3\n\nOutput\n0 0 0\n\"\"\"\ndef code():"
}