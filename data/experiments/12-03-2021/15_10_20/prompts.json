{
    "0": "Python 3\n\"\"\"\nYou are given random numbers of each of the three types of ballon Red,Green and Black in a bag.\nDetermine the minimum number of balloons which are required to withdraw such that there is at least K balloons of same color.\n\n\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nToday a plane was hijacked by a maniac. All the passengers of the flight are taken as hostage. Chef is also one of them.\nHe invited one of the passengers to play a game with him. If he loses the game, he will release all the passengers, otherwise he will kill all of them. A high risk affair it is.\n\nChef volunteered for this tough task. He was blindfolded by Hijacker. Hijacker brought a big black bag from his pockets. The contents of the bag is not visible. He tells Chef that the bag contains R red, G green and B blue colored balloons.\n\nHijacker now asked Chef to take out some balloons from the box such that there are at least K balloons of the same color and hand him over. If the taken out balloons does not contain at least K balloons of the same color, then the hijacker will shoot everybody. Chef is very scared and wants to leave this game as soon as possible, so he will draw the minimum number of balloons so as to save the passengers. Can you please help scared Chef to find out the minimum number of balloons he should take out.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons Chef need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n-----Subtasks-----\n- Subtask 1 (44 points): 1 \u2264 R, G, B \u2264 10\n- Subtask 2 (56 points):  No additional constraints\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n-----Explanation-----\nExample case 2. In the worst-case scenario first three balloons will be of the three different colors and only after fourth balloon Chef will have two balloons of the same color. So, Chef might need to fetch 4 balloons\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou have $n$ nodes in a graph. The $i$-th node starts with a value of $i$.\n\nThe node values will be revised $q$ times. For the $j$-th revision, node $v_i$ will have a value of $n+i$.\nThe node $v_i$ will have this value for the only the $j$-th revision,\nit will have value $i$ otherwise.\n\nSome nodes dislike with each other, if two nodes $a$ and $b$ dislike with each other and $a$ has a higher value than $b$ then $a$ conflicts with $b$.\nA dangerous triple is three nodes $a$, $b$, $c$ such that $a$ conflicts with $b$ and $b$ conflicts with $c$.\n\nYou need to find the number of dangerous triples before the revisions and after each revision.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $0\n\\le m \\le 100\\,000$) \u2014 the number of nodes and the number of nodes that dislike each other. Each of the following $m$ lines\ncontains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$)\ndenoting that node $a_i$ and $b_i$ dislike each other. \n\nThe next line contains an integer $q$ ($0 \\le q \\le 100\\,000$) \u2014 the number of \nrevisions. The $i$-th of the following $q$ lines contains a single\ninteger $v_i$ ($1 \\le v_i \\le n$) denoting that at the end of the $i$-th day,\nnode $v_i$ will have the highest value. \n\n\n-----Output-----\n\nOutput $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples on the $i$-th revision.\n\n\n-----Examples-----\nInput\n4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n\nOutput\n4\n3\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n\nOutput\n1\n1\n1\n1\n1\n1\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nKonrad is a Human Relations consultant working for VoltModder, a large electrical equipment producer. Today, he has been tasked with evaluating the level of happiness in the company.\n\nThere are $n$ people working for VoltModder, numbered from $1$ to $n$. Each employee earns a different amount of money in the company \u2014 initially, the $i$-th person earns $i$ rubles per day.\n\nOn each of $q$ following days, the salaries will be revised. At the end of the $i$-th day, employee $v_i$ will start earning $n+i$ rubles per day and will become the best-paid person in the company. The employee will keep his new salary until it gets revised again.\n\nSome pairs of people don't like each other. This creates a great psychological danger in the company. Formally, if two people $a$ and $b$ dislike each other and $a$ earns more money than $b$, employee $a$ will brag about this to $b$. A dangerous triple is a triple of three employees $a$, $b$ and $c$, such that $a$ brags to $b$, who in turn brags to $c$. If $a$ dislikes $b$, then $b$ dislikes $a$.\n\nAt the beginning of each day, Konrad needs to evaluate the number of dangerous triples in the company. Can you help him do it?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $0 \\le m \\le 100\\,000$) \u2014 the number of employees in the company and the number of pairs of people who don't like each other. Each of the following $m$ lines contains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$) denoting that employees $a_i$ and $b_i$ hate each other (that is, $a_i$ dislikes $b_i$ and $b_i$ dislikes $a_i$). Each such relationship will be mentioned exactly once.\n\nThe next line contains an integer $q$ ($0 \\le q \\le 100\\,000$) \u2014 the number of salary revisions. The $i$-th of the following $q$ lines contains a single integer $v_i$ ($1 \\le v_i \\le n$) denoting that at the end of the $i$-th day, employee $v_i$ will earn the most.\n\n\n-----Output-----\n\nOutput $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples in the company at the beginning of the $i$-th day.\n\n\n-----Examples-----\nInput\n4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n\nOutput\n4\n3\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n\nOutput\n1\n1\n1\n1\n1\n1\n\n\n\n-----Note-----\n\nConsider the first sample test. The $i$-th row in the following image shows the structure of the company at the beginning of the $i$-th day. A directed edge from $a$ to $b$ denotes that employee $a$ brags to employee $b$. The dangerous triples are marked by highlighted edges. [Image]\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven an array a with n distinct integers. Construct an array b by permuting a such that for every non-empty subset of indices S = {x_1, x_2, ..., x_{k}} the sums of elements on that positions in a and b are different.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 22)\u00a0\u2014 the size of the array.\n\nThe second line contains n space-separated distinct integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nIf there is no such array b, print -1.\n\nOtherwise in the only line print n space-separated integers b_1, b_2, ..., b_{n}. Note that b must be a permutation of a.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2 1 \n\nInput\n4\n1000 100 10 1\n\nOutput\n100 1 1000 10\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given an array a with n distinct integers. Construct an array b by permuting a such that for every non-empty subset of indices S = {x_1, x_2, ..., x_{k}} (1 \u2264 x_{i} \u2264 n, 0 < k < n) the sums of elements on that positions in a and b are different, i.\u00a0e. $\\sum_{i = 1}^{k} a_{x_{i}} \\neq \\sum_{i = 1}^{k} b_{x_{i}}$\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 22)\u00a0\u2014 the size of the array.\n\nThe second line contains n space-separated distinct integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nIf there is no such array b, print -1.\n\nOtherwise in the only line print n space-separated integers b_1, b_2, ..., b_{n}. Note that b must be a permutation of a.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2 1 \n\nInput\n4\n1000 100 10 1\n\nOutput\n100 1 1000 10\n\n\n\n-----Note-----\n\nAn array x is a permutation of y, if we can shuffle elements of y such that it will coincide with x.\n\nNote that the empty subset and the subset containing all indices are not counted.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n$f(0) = a$;  $f(1) = b$;  $f(n) = f(n-1) \\oplus f(n-2)$ when $n > 1$, where $\\oplus$ denotes the bitwise XOR operation. \n\nYou are given three integers $a$, $b$, and $n$, calculate $f(n)$.\n\n-----Input-----\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer $T$ ($1 \\le T \\le 10^3$), the number of test cases.\n\nEach of the $T$ following lines contains three space-separated integers $a$, $b$, and $n$ ($0 \\le a, b, n \\le 10^9$) respectively.\n\n\n-----Output-----\n\nFor each test case, output $f(n)$.\n\n\n-----Example-----\nInput\n3\n3 4 2\n4 5 0\n325 265 1231232\n\nOutput\n7\n4\n76\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nCengiz recently learned Fibonacci numbers and now he is studying different algorithms to find them. After getting bored of reading them, he came with his own new type of numbers that he named XORinacci numbers. He defined them as follows:   $f(0) = a$;  $f(1) = b$;  $f(n) = f(n-1) \\oplus f(n-2)$ when $n > 1$, where $\\oplus$ denotes the bitwise XOR operation. \n\nYou are given three integers $a$, $b$, and $n$, calculate $f(n)$.\n\nYou have to answer for $T$ independent test cases.\n\n\n-----Input-----\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer $T$ ($1 \\le T \\le 10^3$), the number of test cases.\n\nEach of the $T$ following lines contains three space-separated integers $a$, $b$, and $n$ ($0 \\le a, b, n \\le 10^9$) respectively.\n\n\n-----Output-----\n\nFor each test case, output $f(n)$.\n\n\n-----Example-----\nInput\n3\n3 4 2\n4 5 0\n325 265 1231232\n\nOutput\n7\n4\n76\n\n\n\n-----Note-----\n\nIn the first example, $f(2) = f(0) \\oplus f(1) = 3 \\oplus 4 = 7$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven $n$ numbers $p^{k_i}$, divide them into two disjoint sets. Find the minimal absolute difference between the two sets. Output the result modulo $10^{9}+7$.\n\n-----Input-----\n\nInput consists of multiple test cases. The first line contains one integer $t$ $(1 \\leq t \\leq 10^5)$\u00a0\u2014 the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers $n$ and $p$ $(1 \\leq n, p \\leq 10^6)$. The second line contains $n$ integers $k_i$ $(0 \\leq k_i \\leq 10^6)$.\n\nThe sum of $n$ over all test cases doesn't exceed $10^6$.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the reminder of division the answer by $1\\,000\\,000\\,007$.\n\n\n-----Example-----\nInput\n4\n5 2\n2 3 4 4 3\n3 1\n2 10 1000\n4 5\n0 1 1 100\n1 8\n89\n\nOutput\n4\n1\n146981438\n747093407\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nJohnny has just found the new, great tutorial: \"How to become a grandmaster?\". The tutorial tells many strange and unexpected for Johnny things, such as you have to be patient or that very important is solving many harder and harder problems. \n\nThe boy has found an online judge with tasks divided by topics they cover. He has picked $p^{k_i}$ problems from $i$-th category ($p$ is his favorite number). He wants to solve them in two weeks (the patience condition is too hard for Johnny, so for simplicity, he looks only at easy tasks, which can be solved in such a period). Now our future grandmaster has to decide which topics to cover first and which the second week. Help him assign topics in such a way, that workload is balanced.\n\nFormally, given $n$ numbers $p^{k_i}$, the boy wants to divide them into two disjoint sets, minimizing the absolute difference between sums of numbers in each set. Find the minimal absolute difference. Output the result modulo $10^{9}+7$.\n\n\n-----Input-----\n\nInput consists of multiple test cases. The first line contains one integer $t$ $(1 \\leq t \\leq 10^5)$\u00a0\u2014 the number of test cases. Each test case is described as follows:\n\nThe first line contains two integers $n$ and $p$ $(1 \\leq n, p \\leq 10^6)$. The second line contains $n$ integers $k_i$ $(0 \\leq k_i \\leq 10^6)$.\n\nThe sum of $n$ over all test cases doesn't exceed $10^6$.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the reminder of division the answer by $1\\,000\\,000\\,007$.\n\n\n-----Example-----\nInput\n4\n5 2\n2 3 4 4 3\n3 1\n2 10 1000\n4 5\n0 1 1 100\n1 8\n89\n\nOutput\n4\n1\n146981438\n747093407\n\n\n\n-----Note-----\n\nYou have to minimize the difference, not it's remainder. For example, if the minimum difference is equal to $2$, but there is also a distribution where the difference is $10^9 + 8$, then the answer is $2$, not $1$.\n\nIn the first test case of the example, there're the following numbers: $4$, $8$, $16$, $16$, and $8$. We can divide them into such two sets: ${4, 8, 16}$ and ${8, 16}$. Then the difference between the sums of numbers in sets would be $4$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given two integers X and d.\n\nYou should construct an array such that, removing all non-empty subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d from the set of all\nsubsequences will give you X subsequences.\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nPikachu had an array with him. He wrote down all the non-empty subsequences of the array on paper. Note that an array of size n has 2^{n} - 1 non-empty subsequences in it. \n\nPikachu being mischievous as he always is, removed all the subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d\n\nPikachu was finally left with X subsequences. \n\nHowever, he lost the initial array he had, and now is in serious trouble. He still remembers the numbers X and d. He now wants you to construct any such array which will satisfy the above conditions. All the numbers in the final array should be positive integers less than 10^18. \n\nNote the number of elements in the output array should not be more than 10^4. If no answer is possible, print  - 1.\n\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\n-----Note-----\n\nIn the output of the first example case, the remaining subsequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50], [7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50, 7, 15, 6, 100] is valid.\n\nSimilarly, in the output of the second example case, the remaining sub-sequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 2 are [10], [100], [1000], [10000]. There are 4 of them. Hence, the array [10, 100, 1000, 10000] is valid.\n\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n```if:python\nCreate a function `args_count`, that returns the count of passed arguments\n```\n```if:kotlin\nCreate a function `argsCount`, that returns the count of passed arguments\n```\n```if:ruby\nCreate a method `args_count`, that returns the count of passed arguments\n```\n```if:julia\nCreate a method `argscount`, that returns the count of passed arguments\n```\n```python\nargs_count(1, 2, 3) -> 3\nargs_count(1, 2, 3, 10) -> 4\n```\n\"\"\"\ndef args_count(*args, **kwargs):",
    "13": "Python 3\n\"\"\"\n```if:python\nCreate a function `args_count`, that returns the count of passed arguments\n```\n```if:kotlin\nCreate a function `argsCount`, that returns the count of passed arguments\n```\n```if:ruby\nCreate a method `args_count`, that returns the count of passed arguments\n```\n```if:julia\nCreate a method `argscount`, that returns the count of passed arguments\n```\n```python\nargs_count(1, 2, 3) -> 3\nargs_count(1, 2, 3, 10) -> 4\n```\n\"\"\"\ndef args_count(*args, **kwargs):",
    "14": "Python 3\n\"\"\"\n$n$ boys and $m$ girls came to the party. Each boy presented each girl some integer number of sweets possibly zero. All boys are numbered with integers from $1$ to $n$ and all girls are numbered with integers from $1$ to $m$. For all $1 \\leq i \\leq n$ the minimal number of sweets, which $i$-th boy presented to some girl is equal to $b_i$ and for all $1 \\leq j \\leq m$ the maximal number of sweets, which $j$-th girl received from some boy is equal to $g_j$.\n\nLet $a_{i,j}$ be the number of sweets which the $i$-th boy gives to the $j$-th girl.\n\nYou are interested in the minimum total number of sweets that boys could present. You are given the numbers $b_1, \\ldots, b_n$ and $g_1, \\ldots, g_m$, determine this number. \n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$, separated with space\u00a0\u2014 the number of boys and girls, respectively ($2 \\leq n, m \\leq 100\\,000$). The second line contains $n$ integers $b_1, \\ldots, b_n$, separated by spaces\u00a0\u2014 $b_i$ is equal to the minimal number of sweets, which $i$-th boy presented to some girl ($0 \\leq b_i \\leq 10^8$). The third line contains $m$ integers $g_1, \\ldots, g_m$, separated by spaces\u00a0\u2014 $g_j$ is equal to the maximal number of sweets, which $j$-th girl received from some boy ($0 \\leq g_j \\leq 10^8$).\n\n\n-----Output-----\n\nIf the described situation is impossible, print $-1$. In another case, print the minimal total number of sweets, which boys could have presented and all conditions could have satisfied.\n\n\n-----Examples-----\nInput\n3 2\n1 2 1\n3 4\n\nOutput\n12\nInput\n2 2\n0 1\n1 0\n\nOutput\n-1\nInput\n2 3\n1 0\n1 1 2\n\nOutput\n4\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\n$n$ boys and $m$ girls came to the party. Each boy presented each girl some integer number of sweets (possibly zero). All boys are numbered with integers from $1$ to $n$ and all girls are numbered with integers from $1$ to $m$. For all $1 \\leq i \\leq n$ the minimal number of sweets, which $i$-th boy presented to some girl is equal to $b_i$ and for all $1 \\leq j \\leq m$ the maximal number of sweets, which $j$-th girl received from some boy is equal to $g_j$.\n\nMore formally, let $a_{i,j}$ be the number of sweets which the $i$-th boy give to the $j$-th girl. Then $b_i$ is equal exactly to the minimum among values $a_{i,1}, a_{i,2}, \\ldots, a_{i,m}$ and $g_j$ is equal exactly to the maximum among values $b_{1,j}, b_{2,j}, \\ldots, b_{n,j}$.\n\nYou are interested in the minimum total number of sweets that boys could present, so you need to minimize the sum of $a_{i,j}$ for all $(i,j)$ such that $1 \\leq i \\leq n$ and $1 \\leq j \\leq m$. You are given the numbers $b_1, \\ldots, b_n$ and $g_1, \\ldots, g_m$, determine this number. \n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$, separated with space\u00a0\u2014 the number of boys and girls, respectively ($2 \\leq n, m \\leq 100\\,000$). The second line contains $n$ integers $b_1, \\ldots, b_n$, separated by spaces\u00a0\u2014 $b_i$ is equal to the minimal number of sweets, which $i$-th boy presented to some girl ($0 \\leq b_i \\leq 10^8$). The third line contains $m$ integers $g_1, \\ldots, g_m$, separated by spaces\u00a0\u2014 $g_j$ is equal to the maximal number of sweets, which $j$-th girl received from some boy ($0 \\leq g_j \\leq 10^8$).\n\n\n-----Output-----\n\nIf the described situation is impossible, print $-1$. In another case, print the minimal total number of sweets, which boys could have presented and all conditions could have satisfied.\n\n\n-----Examples-----\nInput\n3 2\n1 2 1\n3 4\n\nOutput\n12\nInput\n2 2\n0 1\n1 0\n\nOutput\n-1\nInput\n2 3\n1 0\n1 1 2\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first test, the minimal total number of sweets, which boys could have presented is equal to $12$. This can be possible, for example, if the first boy presented $1$ and $4$ sweets, the second boy presented $3$ and $2$ sweets and the third boy presented $1$ and $1$ sweets for the first and the second girl, respectively. It's easy to see, that all conditions are satisfied and the total number of sweets is equal to $12$.\n\nIn the second test, the boys couldn't have presented sweets in such way, that all statements satisfied.\n\nIn the third test, the minimal total number of sweets, which boys could have presented is equal to $4$. This can be possible, for example, if the first boy presented $1$, $1$, $2$ sweets for the first, second, third girl, respectively and the second boy didn't present sweets for each girl. It's easy to see, that all conditions are satisfied and the total number of sweets is equal to $4$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou have a permutation of the integers from 1 through N, p_1, p_2, .., p_N.\nYou also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M).\nYou are going to perform the following operation on p as many times as desired so that the number of i (1 \u2264 i \u2264 N) such that p_i = i is maximized:\n - Choose j such that 1 \u2264 j \u2264 M, and swap p_{x_j} and p_{y_j}.\nFind the maximum possible number of i such that p_i = i after operations.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 M \u2264 10^5\n - p is a permutation of integers from 1 through N.\n - 1 \u2264 x_j,y_j \u2264 N\n - x_j \u2260 y_j\n - If i \u2260 j, \\{x_i,y_i\\} \u2260 \\{x_j,y_j\\}.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\np_1 p_2 .. p_N\nx_1 y_1\nx_2 y_2\n:\nx_M y_M\n\n-----Output-----\nPrint the maximum possible number of i such that p_i = i after operations.\n\n-----Sample Input-----\n5 2\n5 3 1 4 2\n1 3\n5 4\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nWe have a permutation of the integers from 1 through N, p_1, p_2, .., p_N.\nWe also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M).\nAtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1 \u2264 i \u2264 N) such that p_i = i is maximized:\n - Choose j such that 1 \u2264 j \u2264 M, and swap p_{x_j} and p_{y_j}.\nFind the maximum possible number of i such that p_i = i after operations.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 M \u2264 10^5\n - p is a permutation of integers from 1 through N.\n - 1 \u2264 x_j,y_j \u2264 N\n - x_j \u2260 y_j\n - If i \u2260 j, \\{x_i,y_i\\} \u2260 \\{x_j,y_j\\}.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\np_1 p_2 .. p_N\nx_1 y_1\nx_2 y_2\n:\nx_M y_M\n\n-----Output-----\nPrint the maximum possible number of i such that p_i = i after operations.\n\n-----Sample Input-----\n5 2\n5 3 1 4 2\n1 3\n5 4\n\n-----Sample Output-----\n2\n\nIf we perform the operation by choosing j=1, p becomes 1 3 5 4 2, which is optimal, so the answer is 2.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nOnly coin of Rs 5 ,Rs 10 and Rs 15 can be used to buy icecream which costs 5 Rs. In beginning, shopkeeper does not have any money. Icecream can be sold only if shopkeeper can return the change exactly. Check whether the shopkeeper can sell the icecream or not.\n\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if all people can be served or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $a_i \\in \\{5, 10, 15\\}$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $a_i \\in \\{5, 10\\}$ for each valid $i$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n3\n2\n5 10\n2\n10 5\n2\n5 15\n\n-----Example Output-----\nYES\nNO\nNO\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nChef owns an icecream shop in Chefland named scoORZ. There are only three types of coins in Chefland: Rs. 5, Rs. 10 and Rs. 15. An icecream costs Rs. 5.\nThere are $N$ people (numbered $1$ through $N$) standing in a queue to buy icecream from scoORZ. Each person wants to buy exactly one icecream. For each valid $i$, the $i$-th person has one coin with value $a_i$. It is only possible for someone to buy an icecream when Chef can give them back their change exactly \u2015 for example, if someone pays with a Rs. 10 coin, Chef needs to have a Rs. 5 coin that he gives to this person as change.\nInitially, Chef has no money. He wants to know if he can sell icecream to everyone in the queue, in the given order. Since he is busy eating his own icecream, can you tell him if he can serve all these people?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if all people can be served or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $a_i \\in \\{5, 10, 15\\}$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $a_i \\in \\{5, 10\\}$ for each valid $i$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n3\n2\n5 10\n2\n10 5\n2\n5 15\n\n-----Example Output-----\nYES\nNO\nNO\n\n-----Explanation-----\nExample case 1: The first person pays with a Rs. 5 coin. The second person pays with a Rs. 10 coin and Chef gives them back the Rs. 5 coin (which he got from the first person) as change.\nExample case 2: The first person already cannot buy an icecream because Chef cannot give them back Rs. 5.\nExample case 3: The first person pays with a Rs. 5 coin. The second person cannot buy the icecream because Chef has only one Rs. 5 coin, but he needs to give a total of Rs. 10 back as change.\n\"\"\"\ndef code():"
}