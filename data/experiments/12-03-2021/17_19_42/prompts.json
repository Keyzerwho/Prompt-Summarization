{
    "0": "Python 3\n\"\"\"\nYou have two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is $\\{0,1,\u2026,M-1\\}$, for some positive integer $M$. You draw a number from the first bag and a number from the second bag, and then sum them modulo $M$.\n\nWhat are the residues modulo $M$ that you cannot obtain with this action?\n\n\n-----Input-----\n\nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$) and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\nIn the second line of the output, print $K$ space-separated integers greater or equal than zero and less than $M$, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If $K$=0, do not output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n2\n0 2\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nEverybody seems to think that the Martians are green, but it turns out they are metallic pink and fat. Ajs has two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is $\\{0,1,\u2026,M-1\\}$, for some positive integer $M$. Ajs draws a number from the first bag and a number from the second bag, and then sums them modulo $M$.\n\nWhat are the residues modulo $M$ that Ajs cannot obtain with this action?\n\n\n-----Input-----\n\nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$) and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\nIn the second line of the output, print $K$ space-separated integers greater or equal than zero and less than $M$, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If $K$=0, do not output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n2\n0 2\n\n\n\n-----Note-----\n\nIn the first sample, the first bag and the second bag contain $\\{3,4\\}$ and $\\{0,1,2\\}$, respectively. Ajs can obtain every residue modulo $5$ except the residue $2$: $ 4+1 \\equiv 0, \\, 4+2 \\equiv 1, \\, 3+0 \\equiv 3, \\, 3+1 \\equiv 4 $ modulo $5$. One can check that there is no choice of elements from the first and the second bag which sum to $2$ modulo $5$.\n\nIn the second sample, the contents of the first bag are $\\{5,25,125,625\\}$, while the second bag contains all other nonnegative integers with at most $9$ decimal digits. Every residue modulo $1\\,000\\,000\\,000$ can be obtained as a sum of an element in the first bag and an element in the second bag.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven a name, turn that name into a perfect square matrix. You will need to add periods to the end of the name if necessary to turn it into a matrix. If the name has a length of 0, return \"name must be at least one letter\"\n\nExamples:\nInput\n\"Bill\"\nOutput:\n[ [\"B\", \"i\"],\n  [\"l\", \"l\"] ]\n\nInput:\n\"Frank\"\nOutput:\n[ [\"F\", \"r\", \"a\"],\n  [\"n\", \"k\", \".\"],\n  [\".\", \".\", \".\"] ]\n\"\"\"\ndef matrixfy(st):",
    "3": "Python 3\n\"\"\"\nGiven a name, turn that name into a perfect square matrix (nested array with the amount of arrays equivalent to the length of each array). \n\nYou will need to add periods (`.`) to the end of the name if necessary, to turn it into a matrix. \n\nIf the name has a length of 0, return `\"name must be at least one letter\"`\n\n## Examples\n\n\"Bill\" ==> [ [\"B\", \"i\"],\n             [\"l\", \"l\"] ]\n\n\"Frank\" ==> [ [\"F\", \"r\", \"a\"],\n              [\"n\", \"k\", \".\"],\n              [\".\", \".\", \".\"] ]\n\"\"\"\ndef matrixfy(st):",
    "4": "Python 3\n\"\"\"\n# Task\nGiven a list/array representing how much candy each child in our group has made out with, find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. \n\nYour job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1. \n\n```python\ncandies ([5,8,6,4]) # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\ncandies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) // return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\ncandies [] -- return -1\n\ncandies [1,6] -- return 5\n```\n\"\"\"\ndef candies(s):",
    "5": "Python 3\n\"\"\"\n# Description\n\"It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home. \n\nSo we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount.\n# Task\nYour job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons.\"\n\nYour job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1. \n\nIn the first case (look below) the most candies are given to second kid (i.e second place in list/array), 8. Because of that we will give the first kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will have 8 candies.So we end up handing out 3 + 2 + 4 = 9.\n\n```python\ncandies ([5,8,6,4]) # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\ncandies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) // return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\ncandies [] -- return -1\n\ncandies [1,6] -- return 5\n```\n\"\"\"\ndef candies(s):",
    "6": "Python 3\n\"\"\"\nSolve a given equation and return the value of x in the form of string \"x=#value\".\nFor the equation, if there is no solution, return \"No solution\" or if there are infinite solutions, return \"Infinite solutions\" or if there is exactly one solution for the equation, ensure that the value of x is an integer.\n\n\nExample 1:\n\nInput: \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n\n\n\nExample 2:\n\nInput: \"x=x\"\nOutput: \"Infinite solutions\"\n\n\n\nExample 3:\n\nInput: \"2x=x\"\nOutput: \"x=0\"\n\n\n\nExample 4:\n\nInput: \"2x+3x-6x=x+2\"\nOutput: \"x=-1\"\n\n\n\nExample 5:\n\nInput: \"x=x+2\"\nOutput: \"No solution\"\n\"\"\"\nclass Solution:\n    def solveEquation(self, equation: str) -> str:",
    "7": "Python 3\n\"\"\"\nSolve a given equation and return the value of x in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable x and its coefficient.\n\n\n\nIf there is no solution for the equation, return \"No solution\".\n\n\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\n\n\nIf there is exactly one solution for the equation, we ensure that the value of x is an integer.\n\n\nExample 1:\n\nInput: \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n\n\n\nExample 2:\n\nInput: \"x=x\"\nOutput: \"Infinite solutions\"\n\n\n\nExample 3:\n\nInput: \"2x=x\"\nOutput: \"x=0\"\n\n\n\nExample 4:\n\nInput: \"2x+3x-6x=x+2\"\nOutput: \"x=-1\"\n\n\n\nExample 5:\n\nInput: \"x=x+2\"\nOutput: \"No solution\"\n\"\"\"\nclass Solution:\n    def solveEquation(self, equation: str) -> str:",
    "8": "Python 3\n\"\"\"\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule that you leave at least one urinal free between you and the next person peeing.\n\n### Input\nA String containing 1s and 0s (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Examples\n`10001` returns 1\n`1001` returns 0\n`00000` returns 3\n`0000` returns 2\n`01000` returns 1\n\"\"\"\ndef get_free_urinals(urinals):",
    "9": "Python 3\n\"\"\"\n# How many urinals are free?\nIn men's public toilets with urinals, there is this unwritten rule that you leave at least one urinal free\nbetween you and the next person peeing. \nFor example if there are 3 urinals and one person is already peeing in the left one, you will choose the\nurinal on the right and not the one in the middle.\nThat means that a maximum of 3 people can pee at the same time on public toilets with \n5 urinals when following this rule (Only 2 if the first person pees into urinal 2 or 4).\n\n![Imgur Urinals](https://i.imgur.com/imZE6xm.png)\n\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule.\n\n### Input\nA String containing 1s and 0s (Example: `10001`) (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Examples\n\n`10001` returns 1 (10101)  \n`1001` returns 0 (1001)  \n`00000` returns 3 (10101)  \n`0000` returns 2 (1001)  \n`01000` returns 1 (01010 or 01001) \n\n### Note\nWhen there is already a mistake in the input string (for example `011`), then return `-1`\n\nHave fun and don't pee into the wrong urinal ;)\n\"\"\"\ndef get_free_urinals(urinals):",
    "10": "Python 3\n\"\"\"\nYou are given a permutation $p_1, p_2, \\ldots, p_n$.\n\nIn one move you can swap two adjacent values.\n\nYou want to perform a minimum number of moves, such that in the end there should be an integer $i$, $1 \\leq i \\leq n-k+1$ such that $p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$.\n\nLet $f(k)$ be the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation.\n\nYou need to find $f(1), f(2), \\ldots, f(n)$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $n$ ($1 \\leq n \\leq 200\\,000$): the number of elements in the permutation.\n\nThe next line of input contains $n$ integers $p_1, p_2, \\ldots, p_n$: given permutation ($1 \\leq p_i \\leq n$).\n\n\n-----Output-----\n\nPrint $n$ integers, the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation, for $k=1, 2, \\ldots, n$.\n\n\n-----Examples-----\nInput\n5\n5 4 3 2 1\n\nOutput\n0 1 3 6 10 \n\nInput\n3\n1 2 3\n\nOutput\n0 0 0\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a permutation $p_1, p_2, \\ldots, p_n$.\n\nIn one move you can swap two adjacent values.\n\nYou want to perform a minimum number of moves, such that in the end there will exist a subsegment $1,2,\\ldots, k$, in other words in the end there should be an integer $i$, $1 \\leq i \\leq n-k+1$ such that $p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$.\n\nLet $f(k)$ be the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation.\n\nYou need to find $f(1), f(2), \\ldots, f(n)$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $n$ ($1 \\leq n \\leq 200\\,000$): the number of elements in the permutation.\n\nThe next line of input contains $n$ integers $p_1, p_2, \\ldots, p_n$: given permutation ($1 \\leq p_i \\leq n$).\n\n\n-----Output-----\n\nPrint $n$ integers, the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation, for $k=1, 2, \\ldots, n$.\n\n\n-----Examples-----\nInput\n5\n5 4 3 2 1\n\nOutput\n0 1 3 6 10 \n\nInput\n3\n1 2 3\n\nOutput\n0 0 0\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n# Task\n Consider the following algorithm for constructing strings S(1) .. S(26):\n```\nS(1) = \"a\";\nFor i in [2, 3, ..., 26]:\nS(i) = S(i - 1) + character(i) + S(i - 1).```\n\n For example:\n```\nS(1) = \"a\"\nS(2) = S(1) + \"b\" + S(1) = \"a\" + \"b\" + \"a\" = \"aba\"\nS(3) = S(2) + \"c\" + S(2) = \"aba\" + \"c\" +\"aba\" = \"abacaba\"\n...\nS(26) = S(25) + \"z\" + S(25)```\nYour task is to find the `k`th symbol (indexing from 1) in the string S(26).\n\n# Input / Output\n\n\n - `[input]` integer `k`\n\n  1 \u2264 k < 2^(26)\n\n\n - `[output]` a string(char in C#)\n\n  the `k`th symbol of S(26)\n\"\"\"\ndef abacaba(k):",
    "13": "Python 3\n\"\"\"\n# Task\n Consider the following algorithm for constructing 26 strings S(1) .. S(26):\n```\nS(1) = \"a\";\nFor i in [2, 3, ..., 26]:\nS(i) = S(i - 1) + character(i) + S(i - 1).```\n\n For example:\n```\nS(1) = \"a\"\nS(2) = S(1) + \"b\" + S(1) = \"a\" + \"b\" + \"a\" = \"aba\"\nS(3) = S(2) + \"c\" + S(2) = \"aba\" + \"c\" +\"aba\" = \"abacaba\"\n...\nS(26) = S(25) + \"z\" + S(25)```\nFinally, we got a long string S(26). Your task is to find the `k`th symbol (indexing from 1) in the string S(26). All strings consist of lowercase letters only.\n\n# Input / Output\n\n\n - `[input]` integer `k`\n\n  1 \u2264 k < 2^(26)\n\n\n - `[output]` a string(char in C#)\n\n  the `k`th symbol of S(26)\n\"\"\"\ndef abacaba(k):",
    "14": "Python 3\n\"\"\"\nA subsequence of a string S is a string that can be obtained by deleting zero or more characters from S without changing the order of the remaining characters.\nYou are given a string A consisting of lowercase English letters.\nFind the shortest string among the strings consisting of lowercase English letters that are not subsequences of A.\nIf there are more than one such string, find the lexicographically smallest one among them.\n\n-----Constraints-----\n - 1 \\leq |A| \\leq 2 \\times 10^5\n - A consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA\n\n-----Output-----\nPrint the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of A.\n\n-----Sample Input-----\natcoderregularcontest\n\n-----Sample Output-----\nb\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nA subsequence of a string S is a string that can be obtained by deleting zero or more characters from S without changing the order of the remaining characters.\nFor example, arc, artistic and (an empty string) are all subsequences of artistic; abc and ci are not.\nYou are given a string A consisting of lowercase English letters.\nFind the shortest string among the strings consisting of lowercase English letters that are not subsequences of A.\nIf there are more than one such string, find the lexicographically smallest one among them.\n\n-----Constraints-----\n - 1 \\leq |A| \\leq 2 \\times 10^5\n - A consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA\n\n-----Output-----\nPrint the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of A.\n\n-----Sample Input-----\natcoderregularcontest\n\n-----Sample Output-----\nb\n\nThe string atcoderregularcontest contains a as a subsequence, but not b.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given two positive numbers X and N.\nOn each day which is the multiple of X, you are paid the same amount as day number.\nYou need to output the total amount collected until the Nth day. \n\n-----Input:-----\n- First line will contain T, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u226410001 \\leq T \\leq 1000\n- 1\u2264X<=N\u22641071 \\leq X<=N \\leq 10^7\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nRichik$Richik$ has just completed his engineering and has got a job in one of the firms at Sabrina$Sabrina$ which is ranked among the top seven islands in the world in terms of the pay scale. \nSince Richik$Richik$ has to travel a lot to reach the firm, the owner assigns him a number X$X$, and asks him to come to work only on the day which is a multiple of X$X$. Richik joins the firm on 1-st day but starts working from X-th day. Richik$Richik$ is paid exactly the same amount in Dollars as the day number. For example, if Richik$Richik$ has been assigned X=3$X = 3$, then he will be paid 3$3$ dollars and 6$6$ dollars on the 3rd$3rd$ and 6th$6th$ day on which he comes for work. \nOn N\u2212th$N-th$ day, the owner calls up Richik$Richik$ and asks him not to come to his firm anymore. Hence Richik$Richik$ demands his salary of all his working days together. Since it will take a lot of time to add, Richik$Richik$ asks help from people around him, let's see if you can help him out. \n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N$X, N$. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264X<=N\u2264107$1 \\leq X<=N \\leq 10^7$\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven a credit card number we can determine who the issuer/vendor is with a few basic knowns.\n\n```if:python\nComplete the function `get_issuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if-not:python\nComplete the function `getIssuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if:typescript\nWhere `Issuer` is defined with the following enum type.\n~~~typescript\nenum Issuer {\n  VISA = 'VISA',\n  AMEX = 'AMEX',\n  Mastercard = 'Mastercard',\n  Discover = 'Discover',\n  Unknown = 'Unknown',\n}\n~~~\n```\n\n```markdown\n| Card Type  | Begins With          | Number Length |\n|------------|----------------------|---------------|\n| AMEX       | 34 or 37             | 15            |\n| Discover   | 6011                 | 16            |\n| Mastercard | 51, 52, 53, 54 or 55 | 16            |\n| VISA       | 4                    | 13 or 16      |\n```\n\n```if:c,cpp\n**C/C++ note:** The return value in C is not freed.\n```\n\n## Examples\n\n```if-not:python\n~~~js\ngetIssuer(4111111111111111) == \"VISA\"\ngetIssuer(4111111111111) == \"VISA\"\ngetIssuer(4012888888881881) == \"VISA\"\ngetIssuer(378282246310005) == \"AMEX\"\ngetIssuer(6011111111111117) == \"Discover\"\ngetIssuer(5105105105105100) == \"Mastercard\"\ngetIssuer(5105105105105106) == \"Mastercard\"\ngetIssuer(9111111111111111) == \"Unknown\"\n~~~\n```\n```if:python\n~~~py\nget_issuer(4111111111111111) == \"VISA\"\nget_issuer(4111111111111) == \"VISA\"\nget_issuer(4012888888881881) == \"VISA\"\nget_issuer(378282246310005) == \"AMEX\"\nget_issuer(6011111111111117) == \"Discover\"\nget_issuer(5105105105105100) == \"Mastercard\"\nget_issuer(5105105105105106) == \"Mastercard\"\nget_issuer(9111111111111111) == \"Unknown\"\n~~~\n```\n\"\"\"\ndef get_issuer(number):",
    "19": "Python 3\n\"\"\"\nGiven a credit card number we can determine who the issuer/vendor is with a few basic knowns.\n\n```if:python\nComplete the function `get_issuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if-not:python\nComplete the function `getIssuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if:typescript\nWhere `Issuer` is defined with the following enum type.\n~~~typescript\nenum Issuer {\n  VISA = 'VISA',\n  AMEX = 'AMEX',\n  Mastercard = 'Mastercard',\n  Discover = 'Discover',\n  Unknown = 'Unknown',\n}\n~~~\n```\n\n```markdown\n| Card Type  | Begins With          | Number Length |\n|------------|----------------------|---------------|\n| AMEX       | 34 or 37             | 15            |\n| Discover   | 6011                 | 16            |\n| Mastercard | 51, 52, 53, 54 or 55 | 16            |\n| VISA       | 4                    | 13 or 16      |\n```\n\n```if:c,cpp\n**C/C++ note:** The return value in C is not freed.\n```\n\n## Examples\n\n```if-not:python\n~~~js\ngetIssuer(4111111111111111) == \"VISA\"\ngetIssuer(4111111111111) == \"VISA\"\ngetIssuer(4012888888881881) == \"VISA\"\ngetIssuer(378282246310005) == \"AMEX\"\ngetIssuer(6011111111111117) == \"Discover\"\ngetIssuer(5105105105105100) == \"Mastercard\"\ngetIssuer(5105105105105106) == \"Mastercard\"\ngetIssuer(9111111111111111) == \"Unknown\"\n~~~\n```\n```if:python\n~~~py\nget_issuer(4111111111111111) == \"VISA\"\nget_issuer(4111111111111) == \"VISA\"\nget_issuer(4012888888881881) == \"VISA\"\nget_issuer(378282246310005) == \"AMEX\"\nget_issuer(6011111111111117) == \"Discover\"\nget_issuer(5105105105105100) == \"Mastercard\"\nget_issuer(5105105105105106) == \"Mastercard\"\nget_issuer(9111111111111111) == \"Unknown\"\n~~~\n```\n\"\"\"\ndef get_issuer(number):"
}