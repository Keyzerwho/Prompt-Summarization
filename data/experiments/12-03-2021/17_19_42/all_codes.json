{
    "0": "\n    N, M = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    A = A[::-1]\n    K = 0\n    for i in range(N):\n        if A[i] >= M:\n            K += 1\n        else:\n            break\n    if K == N:\n        print(0)\n    else:\n        print(K)\n        for i in range(K, N):\n            print(A[i] % M, end=' ')\n",
    "1": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    a = a[::-1]\n    res = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) % m not in res:\n                res.append((a[i] + a[j]) % m)\n    res.sort()\n    print(len(res))\n    print(*res)\n",
    "2": "\n    if len(st) == 0:\n        return \"name must be at least one letter\"\n    else:\n        l = len(st)\n        if l % 2 == 0:\n            n = l // 2\n            return [list(st[:n]), list(st[n:])]\n        else:\n            n = l // 2\n            return [list(st[:n+1]), list(st[n+1:])]",
    "3": "\n    if len(st) == 0:\n        return \"name must be at least one letter\"\n    else:\n        l = len(st)\n        if l % 2 == 0:\n            n = 2\n        else:\n            n = 1\n        m = []\n        for i in range(l):\n            m.append([])\n            for j in range(l):\n                if j == i:\n                    m[i].append(st[i])\n                else:\n                    m[i].append('.')\n        return m",
    "4": "\n    if len(s) == 0:\n        return -1\n    if len(s) == 1:\n        return -1\n    if len(s) == 2:\n        return max(s)\n    max_candy = max(s)\n    total_candy = 0\n    for i in s:\n        total_candy += max_candy\n    return total_candy",
    "5": "\n    if len(s) == 0:\n        return -1\n    if len(s) == 1:\n        return -1\n    s.sort()\n    max_candy = s[-1]\n    total_candy = 0\n    for i in s:\n        total_candy += max_candy - i\n    return total_candy",
    "6": "\n        left, right = equation.split('=')\n        left_x, left_num = self.parse(left)\n        right_x, right_num = self.parse(right)\n        x = left_x - right_x\n        num = right_num - left_num\n        if x == 0:\n            if num == 0:\n                return \"Infinite solutions\"\n            else:\n                return \"No solution\"\n        else:\n            return \"x=\" + str(num // x)\n\n    def parse(self, s):\n        x = 0\n        num = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '+':\n                i += 1\n            elif s[i] == '-':\n                i += 1\n                if i < len(s) and s[i].isdigit():\n                    num -= int(s[i])\n                else:\n                    num -= 1\n            elif s[i].isdigit():\n                j = i\n                while j < len(s) and s[j].isdigit():\n                    j += 1\n                num += int(s[i:j])\n                i = j - 1\n            elif s[i] == 'x':\n                if i == 0 or (i > 0 and s[i-1] == '+'):\n                    x += 1\n                elif i > 0 and s[i-1] == '-':\n                    x -= 1\n                else:\n                    num += 1\n            i += 1\n        return x, num",
    "7": "\n        def helper(s):\n            sign, n = 1, len(s)\n            # i, coef, const stand for current index, and accumulative 'x' coefficient and constant\n            i = coef = const = 0\n            while i < n:\n                if s[i] == '+':\n                    sign = 1\n                elif s[i] == '-':\n                    sign = -1\n                elif s[i].isdigit():\n                    j = i\n                    while j < n and s[j].isdigit():\n                        j += 1\n                    tmp = int(s[i:j])\n                    if j < n and s[j] == 'x':\n                        coef += tmp * sign\n                        j += 1\n                    else:\n                        const += tmp * sign\n                    i = j - 1\n                else:\n                    coef += 1 * sign\n                i += 1\n            return coef, const\n\n        left, right = equation.split('=')\n        k1, b1 = helper(left)\n        k2, b2 = helper(right)\n        # k1x + b1 = k2x + b2\n        ans = 'x=' + str((b2 - b1) // (k1 - k2)) if k1 != k2 and b1 != b2 \\\n            else \"Infinite solutions\" if k1 == k2 and b1 == b2 \\\n            else \"No solution\" if b2 != b1 else 'x=0'\n        return ans",
    "8": "\n    # your code here\n    return 0",
    "9": "\n    if len(urinals) > 20:\n        return -1\n    if len(urinals) == 0:\n        return 0\n    if len(urinals) == 1:\n        if urinals == '0':\n            return 1\n        else:\n            return 0\n    if urinals[0] == '1':\n        if urinals[1] == '0':\n            return 1 + get_free_urinals(urinals[1:])\n        else:\n            return get_free_urinals(urinals[1:])\n    else:\n        if urinals[1] == '0':\n            return 1 + get_free_urinals(urinals[1:])\n        else:\n            return get_free_urinals(urinals[1:])",
    "10": "\n    n = int(input())\n    perm = list(map(int, input().split()))\n    f = [0] * (n + 1)\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] + 1\n        for j in range(1, i):\n            if perm[j - 1] > perm[i - 1]:\n                f[i] = min(f[i], f[j - 1] + 1)\n    print(*f[1:])\n",
    "11": "\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    f = [0]*n\n    for i in range(1,n):\n        f[i] = f[i-1] + (1 if p[i] < p[i-1] else 0)\n    for i in range(n-2,-1,-1):\n        f[i] = min(f[i], f[i+1] + (1 if p[i] > p[i+1] else 0))\n    print(*f)\n",
    "12": "\n    s = 'a'\n    for i in range(2, k + 1):\n        s = s + chr(ord('a') + i - 1) + s\n    return s[k - 1]",
    "13": "\n    s = 'abacaba'\n    for i in range(1, k):\n        s += s[i] + s[i - 1]\n    return s[k - 1]",
    "14": "\n    ",
    "15": "\n    ",
    "16": "\n    t = int(input())\n    for i in range(t):\n        x, n = map(int, input().split())\n        print(x*(n//x)*(n//x+1)//2)\n",
    "17": "\n    T = int(input())\n    for i in range(T):\n        X, N = map(int, input().split())\n        print(N*X)\n",
    "18": "\n    if len(number) == 15 and number[:2] in [\"34\", \"37\"]:\n        return \"AMEX\"\n    elif len(number) == 16 and number[:4] == \"6011\":\n        return \"Discover\"\n    elif len(number) == 16 and number[:2] in [\"51\", \"52\", \"53\", \"54\", \"55\"]:\n        return \"Mastercard\"\n    elif (len(number) == 13 or len(number) == 16) and number[0] == \"4\":\n        return \"VISA\"\n    else:\n        return \"Unknown\"",
    "19": "\n    if str(number).startswith('34') or str(number).startswith('37'):\n        return 'AMEX'\n    elif str(number).startswith('6011'):\n        return 'Discover'\n    elif str(number).startswith('51') or str(number).startswith('52') or str(number).startswith('53') or str(number).startswith('54') or str(number).startswith('55'):\n        return 'Mastercard'\n    elif str(number).startswith('4'):\n        return 'VISA'\n    else:\n        return 'Unknown'"
}