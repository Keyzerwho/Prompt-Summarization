{
    "0": "Python 3\n\"\"\"\nGiven an array of words, you must concatenate the nth letter from each word to construct a new word which should be returned as a string, where n is the position of the word in the list.\n\nExamples:\nInput:\n[\"yoda\", \"best\", \"has\"]\nOutput:\n\"yes\"\n\"\"\"\ndef nth_char(words):",
    "1": "Python 3\n\"\"\"\nComplete the function that takes an array of words.\n\nYou must concatenate the `n`th letter from each word to construct a new word which should be returned as a string, where `n` is the position of the word in the list.\n\nFor example:\n\n```\n[\"yoda\", \"best\", \"has\"]  -->  \"yes\"\n  ^        ^        ^\n  n=0     n=1     n=2\n```\n\n**Note:** Test cases contain valid input only - i.e. a string array or an empty array; and each word will have enough letters.\n\"\"\"\ndef nth_char(words):",
    "2": "Python 3\n\"\"\"\nA [Harshad number](https://en.wikipedia.org/wiki/Harshad_number) (or Niven number) is a number that is divisible by the sum of its digits. A *right truncatable Harshad number* is any Harshad number that, when recursively right-truncated, results in a Harshad number at each truncation. By definition, 1-digit numbers are **not** right truncatable Harshad numbers.\n\nFor example `201` (which is a Harshad number) yields `20`, then `2` when right-truncated, which are all Harshad numbers. Thus `201` is a *right truncatable Harshad number*.\n\n\n## Your task\n\nGiven a range of numbers , return the list of right truncatable Harshad numbers in this range.\n\n## Examples\n\n```\n0, 20        -->  [10, 12, 18, 20]\n30, 100      -->  [30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100]\n90, 200      -->  [90, 100, 102, 108, 120, 126, 180, 200]\n200, 210     -->  [200, 201, 204, 207, 209, 210]\n1000, 2000   -->  [1000, 1002, 1008, 1020, 1026, 1080, 1088, 1200, 1204, 1206, 1260, 1800, 2000]\n2200, 2300   -->  []\n9000002182976, 9000195371842  -->  [9000004000000, 9000004000008]\n```\n\"\"\"\ndef rthn_between(a, b):",
    "3": "Python 3\n\"\"\"\n*This kata is inspired by [Project Euler Problem #387](https://projecteuler.net/problem=387)*\n\n---\n\nA [Harshad number](https://en.wikipedia.org/wiki/Harshad_number) (or Niven number) is a number that is divisible by the sum of its digits. A *right truncatable Harshad number* is any Harshad number that, when recursively right-truncated, results in a Harshad number at each truncation. By definition, 1-digit numbers are **not** right truncatable Harshad numbers.\n\nFor example `201` (which is a Harshad number) yields `20`, then `2` when right-truncated, which are all Harshad numbers. Thus `201` is a *right truncatable Harshad number*.\n\n\n## Your task\n\nGiven a range of numbers (`(a, b)`, both included), return the list of right truncatable Harshad numbers in this range.\n\n```if-not:javascript\nNote: there are `500` random tests, with 0 <= `a` <= `b` <= 10^(16)\n```\n```if:javascript\nNote: there are `500` random tests, with `0 <= a <= b <= Number.MAX_SAFE_INTEGER`\n```\n\n## Examples\n\n```\n0, 20        -->  [10, 12, 18, 20]\n30, 100      -->  [30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100]\n90, 200      -->  [90, 100, 102, 108, 120, 126, 180, 200]\n200, 210     -->  [200, 201, 204, 207, 209, 210]\n1000, 2000   -->  [1000, 1002, 1008, 1020, 1026, 1080, 1088, 1200, 1204, 1206, 1260, 1800, 2000]\n2200, 2300   -->  []\n9000002182976, 9000195371842  -->  [9000004000000, 9000004000008]\n```\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n#### *Translations are welcome!*\n\"\"\"\ndef rthn_between(a, b):",
    "4": "Python 3\n\"\"\"\nGiven two strings A and B, the similarity of the strings is the length of the longest prefix common to both strings. For example, the similarity of strings `abc` and `abd` is 2, while the similarity of strings `aaa` and `aaab` is 3.\n\nWrite a function that calculates the sum of similarities of a string with each of its suffixes.\n\nExamples:\nInput:\nstring_suffix('ababaa')\nOutput:\n11\nExplanation:\nThe suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.\n\nInput:\nstring_suffix('abc')\nOutput:\n3\n\"\"\"\ndef string_suffix(s):",
    "5": "Python 3\n\"\"\"\nLet's say take 2 strings, A and B, and define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings `abc` and `abd` is 2, while the similarity of strings `aaa` and `aaab` is 3.\n\nwrite a function that calculates the sum of similarities of a string S with each of it's **suffixes**.\n\n```python\nstring_suffix('ababaa') => returns 11\nstring_suffix('abc') => returns 3\n```\n\nExplanation:\n\nIn the first case, the suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.\n\nFor the second case, the answer is simply 3 + 0 + 0 = 3.\n\nNote : Each string will have at least one character - no need to check for empty strings :)\n\"\"\"\ndef string_suffix(s):",
    "6": "Python 3\n\"\"\"\nDetermine if the count of each of the characters in a string can be equal if a single character is removed from that string.\n\nExamples:\nInput:\nsolve('abba')\nOutput:\nfalse\nExplanation:\nIf we remove any character, the count of each character will not be equal.\n\nInput:\nsolve('abbba')\nOutput:\ntrue\nExplanation:\nIf we remove one b, the count of each character becomes 2.\n\nInput:\nsolve('aaaa')\nOutput:\ntrue\nExplanation:\nIf we remove one character, the remaining characters have same count.\n\nInput:\nsolve('wwwf')\nOutput:\ntrue\nExplanation:\nIf we remove f, the remaining letters have same count.\n\"\"\"\ndef solve(s):",
    "7": "Python 3\n\"\"\"\nIn this Kata, we are going to determine if the count of each of the characters in a string can be equal if we remove a single character from that string.\n\nFor example:\n```\nsolve('abba') = false -- if we remove any character, the count of each character will not be equal.\nsolve('abbba') = true -- if we remove one b, the count of each character becomes 2.\nsolve('aaaa') = true -- if we remove one character, the remaining characters have same count.\nsolve('wwwf') = true -- if we remove f, the remaining letters have same count.\n```\nMore examples in the test cases. Empty string is not tested.\n\nGood luck!\n\"\"\"\ndef solve(s):",
    "8": "Python 3\n\"\"\"\n# Task\n\nGiven an array of numbers representing votes given to each of the candidates, and an integer which is equal to the number of voters who haven't cast their vote yet, find the number of candidates who still have a chance to win the election. If two or more candidates receive the same maximum number of votes, assume there is no winner at all.\n\n\n# Examples\n\nInput:\nvotes = [2, 3, 5, 2]\nvoters = 3\nOutput:\nresult = 2\nExplanation:\n* Candidate `#3` may win, because he's already leading.\n* Candidate `#2` may win, because with 3 additional votes he may become the new leader.\n* Candidates `#1` and `#4` have no chance, because in the best case scenario each of them can only tie with the candidate `#3`.\n\nInput:\nvotes = [3, 1, 1, 3, 1]\nvoters = 2\nOutput:\nresult = 2\nExplanation:\n* Candidate `#1` and `#4` can become leaders if any of them gets the votes.\n* If any other candidate gets the votes, they will get tied with candidates `#1` and `#4`.\n\nInput:\nvotes = [1, 3, 3, 1, 1]\nvoters = 0\nOutput:\nresult = 0\n\n\"\"\"\ndef elections_winners(votes, k):",
    "9": "Python 3\n\"\"\"\n# Task\n\nElections are in progress!\n\nGiven an array of numbers representing votes given to each of the candidates, and an integer which is equal to the number of voters who haven't cast their vote yet, find the number of candidates who still have a chance to win the election.\n\nThe winner of the election must secure strictly more votes than any other candidate. If two or more candidates receive the same (maximum) number of votes, assume there is no winner at all.\n\n**Note**: big arrays will be tested.\n\n# Examples\n\n```\nvotes = [2, 3, 5, 2]\nvoters = 3\n\nresult = 2\n```\n\n* Candidate `#3` may win, because he's already leading.\n* Candidate `#2` may win, because with 3 additional votes he may become the new leader.\n* Candidates `#1` and `#4` have no chance, because in the best case scenario each of them can only tie with the candidate `#3`.\n\n___\n\n```\nvotes = [3, 1, 1, 3, 1]\nvoters = 2\n\nresult = 2\n```\n\n* Candidate `#1` and `#4` can become leaders if any of them gets the votes.\n* If any other candidate gets the votes, they will get tied with candidates `#1` and `#4`.\n\n___\n\n```\nvotes = [1, 3, 3, 1, 1]\nvoters = 0\n\nresult = 0\n```\n\n* There're no additional votes to cast, and there's already a tie.\n\"\"\"\ndef elections_winners(votes, k):",
    "10": "Python 3\n\"\"\"\nYou are given random numbers of each of the three types of ballon Red,Green and Black in a bag.\nThere should be atleast K balloons of same color in each withdrawal.\nDetermine the minimum number of balloons which are required to withdraw such that there is at least k balloons of same color.\n\n\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nToday a plane was hijacked by a maniac. All the passengers of the flight are taken as hostage. Chef is also one of them.\nHe invited one of the passengers to play a game with him. If he loses the game, he will release all the passengers, otherwise he will kill all of them. A high risk affair it is.\n\nChef volunteered for this tough task. He was blindfolded by Hijacker. Hijacker brought a big black bag from his pockets. The contents of the bag is not visible. He tells Chef that the bag contains R red, G green and B blue colored balloons.\n\nHijacker now asked Chef to take out some balloons from the box such that there are at least K balloons of the same color and hand him over. If the taken out balloons does not contain at least K balloons of the same color, then the hijacker will shoot everybody. Chef is very scared and wants to leave this game as soon as possible, so he will draw the minimum number of balloons so as to save the passengers. Can you please help scared Chef to find out the minimum number of balloons he should take out.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons Chef need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n-----Subtasks-----\n- Subtask 1 (44 points): 1 \u2264 R, G, B \u2264 10\n- Subtask 2 (56 points):  No additional constraints\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n-----Explanation-----\nExample case 2. In the worst-case scenario first three balloons will be of the three different colors and only after fourth balloon Chef will have two balloons of the same color. So, Chef might need to fetch 4 balloons\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given two integers n and m. Create a matrix numbered from 1 to n\u00b7m in order of rows. So a cell in row i and column j has a number (i - 1)\u00b7m + j.\nYou have to find a matrix with n rows and m columns in which all numbers from 1\nto n\u00b7m appear exactly once and adjacent numbers in the original matrix are not\nadjacent in it, or determine that there is no such matrix.\n\nIn the first test case the matrix initially looks like this:\n\n1 2 3 4\n\n5 6 7 8\n\n\n\nIt's easy to see that there are no two students that are adjacent in both matrices.\n\n-----Input-----\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5; n\u00b7m \u2264 10^5)\u00a0\u2014 the number of rows and the number of columns in the required matrix.\n\n\n-----Output-----\n\nIf there is no such matrix, output \"NO\" (without quotes). \n\nOtherwise in the first line output \"YES\" (without quotes), and in the next n lines output m integers which form the required matrix.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\nYES\n5 4 7 2 \n3 6 1 8 \n\nInput\n2 1\n\nOutput\nNO\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nStudents went into a class to write a test and sat in some way. The teacher thought: \"Probably they sat in this order to copy works of each other. I need to rearrange them in such a way that students that were neighbors are not neighbors in a new seating.\"\n\nThe class can be represented as a matrix with n rows and m columns with a student in each cell. Two students are neighbors if cells in which they sit have a common side.\n\nLet's enumerate students from 1 to n\u00b7m in order of rows. So a student who initially sits in the cell in row i and column j has a number (i - 1)\u00b7m + j. You have to find a matrix with n rows and m columns in which all numbers from 1 to n\u00b7m appear exactly once and adjacent numbers in the original matrix are not adjacent in it, or determine that there is no such matrix.\n\n\n-----Input-----\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5; n\u00b7m \u2264 10^5)\u00a0\u2014 the number of rows and the number of columns in the required matrix.\n\n\n-----Output-----\n\nIf there is no such matrix, output \"NO\" (without quotes). \n\nOtherwise in the first line output \"YES\" (without quotes), and in the next n lines output m integers which form the required matrix.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\nYES\n5 4 7 2 \n3 6 1 8 \n\nInput\n2 1\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first test case the matrix initially looks like this:\n\n1 2 3 4\n\n5 6 7 8\n\n\n\nIt's easy to see that there are no two students that are adjacent in both matrices.\n\nIn the second test case there are only two possible seatings and in both of them students with numbers 1 and 2 are neighbors.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nDecode the given pattern and obtain new pattern for a given number K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n12\n3\n123\n45\n6\n1234\n567\n89\n10\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n12\n3\n123\n45\n6\n1234\n567\n89\n10\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven the angle of the hour-hand, return the time in HH:MM format and round down to the nearest minute. 0 <= angle <= 360\n\n# Examples\n\n* ```12:00``` = 0 degrees\n\n\n* ```03:00``` = 90 degrees\n\n\n* ```06:00``` = 180 degrees\n\n\n* ```09:00``` = 270 degrees\n\n\n* ```12:00``` = 360 degrees\n\"\"\"\ndef what_time_is_it(angle):",
    "17": "Python 3\n\"\"\"\n# Story\n\nDue to lack of maintenance the minute-hand has fallen off Town Hall clock face.\n\nAnd because the local council has lost most of our tax money to a Nigerian email scam there are no funds to fix the clock properly. \n\nInstead, they are asking for volunteer programmers to write some code that tell the time by only looking at the remaining hour-hand!\n\nWhat a bunch of cheapskates!\n\nCan you do it?\n\n# Kata\n\nGiven the ```angle``` (in degrees) of the hour-hand, return the time in HH:MM format. Round _down_ to the nearest minute.\n\n# Examples\n\n* ```12:00``` = 0 degrees\n\n\n* ```03:00``` = 90 degrees\n\n\n* ```06:00``` = 180 degrees\n\n\n* ```09:00``` = 270 degrees\n\n\n* ```12:00``` = 360 degrees\n\n# Notes\n\n* 0 <= ```angle``` <= 360\n\"\"\"\ndef what_time_is_it(angle):",
    "18": "Python 3\n\"\"\"\n\nDecode the given pattern and generate new pattern for number K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\"\"\"\ndef code():"
}