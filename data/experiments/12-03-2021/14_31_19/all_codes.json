{
    "0": "\n    for i in range(m):\n        for j in range(n):\n            print(\"| o \",end=\"\")\n        print(\"|\")\n        for j in range(n):\n            print(\"+---\",end=\"\")\n        print(\"+\")\n\ndot(3,2)",
    "1": "\n    return '\\n'.join([''.join(['o' for x in range(n)]) for y in range(m)])",
    "2": "\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                for k in range(j+1, n):\n                    if s[i] == s[k] and s[j] == s[k]:\n                        count += 1\n    print(count)\n",
    "3": "\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                for k in range(j+1, n):\n                    if s[i] == s[k] and s[j] == s[k]:\n                        ans += 1\n    print(ans)\n",
    "4": "\n    T = int(input())\n    for i in range(T):\n        s = input()\n        if s == s[::-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
    "5": "\n    T = int(input())\n    for i in range(T):\n        s = input()\n        if s == s[::-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
    "6": "\n        # \u627e\u5230\u6240\u6709\u7684\u70b9\u7684x,y\u5750\u6807\n        x_set = set()\n        y_set = set()\n        for x, y in points:\n            x_set.add(x)\n            y_set.add(y)\n        # \u627e\u5230\u6240\u6709\u7684\u70b9\u7684x,y\u5750\u6807\u5bf9\n        xy_set = set()\n        for x in x_set:\n            for y in y_set:\n                xy_set.add((x, y))\n        # \u627e\u5230\u6240\u6709\u7684\u70b9\u7684x,y\u5750\u6807\u5bf9\u7684\u7ec4\u5408\n        xy_list = list(xy_set)\n        xy_list.sort()\n        xy_combination = []\n        for i in range(len(xy_list)):\n            for j in range(i+1, len(xy_list)):\n                xy_combination.append((xy_list[i], xy_list[j]))\n        # \u627e\u5230\u6240\u6709\u7684\u7ec4\u5408\u4e2d\u7684\u77e9\u5f62\n        min_area = float('inf')\n        for xy1, xy2 in xy_combination:\n            x1, y1 = xy1\n            x2, y2 = xy2\n            if x1 == x2 or y1 == y2:\n                continue\n            # \u627e\u5230\u6240\u6709\u7684\u70b9\u7684x,y\u5750\u6807\u5bf9\u4e2d\u7684\u70b9\n            xy_points = []\n            for x, y in points:\n                if x == x1 and y == y1:\n                    xy_points.append((x, y))\n                elif x == x2 and y == y2:\n                    xy_points.append((x, y))\n                elif x == x1 and y == y2:\n                    xy_points.append((x, y))\n                elif x == x2 and y == y1:\n                    xy_points.append((x, y))\n            # \u627e\u5230\u77e9\u5f62\u7684\u9762\u79ef\n            if len(xy_points) >= 4:\n                min_area = min(min_area, abs(x1-x2)*abs(y1-y2))\n        if min_area == float('inf'):\n            return 0\n        return min_area",
    "7": "\n        # \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u8bb0\u5f55\u4e0b\u4ed6\u7684x\u548cy\u503c\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u70b9\u7684x\u548cy\u503c\u4f5c\u4e3akey\uff0c\u8fd9\u4e2a\u70b9\u7684\u5750\u6807\u4f5c\u4e3avalue\u5b58\u5165\u5b57\u5178\u4e2d\n        # \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u904d\u5386\u5176\u4ed6\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u7684x\u548cy\u503c\u4e0e\u5f53\u524d\u70b9\u7684x\u548cy\u503c\u76f8\u540c\uff0c\u5219\u8df3\u8fc7\n        # \u5982\u679c\u8fd9\u4e2a\u70b9\u7684x\u548cy\u503c\u4e0e\u5f53\u524d\u70b9\u7684x\u548cy\u503c\u4e0d\u540c\uff0c\u5219\u5224\u65ad\u8fd9\u4e2a\u70b9\u7684x\u548cy\u503c\u662f\u5426\u5728\u5b57\u5178\u4e2d\uff0c\u5982\u679c\u5728\uff0c\u5219\u5224\u65ad\u8fd9\u4e2a\u70b9\u7684\u5750\u6807\u662f\u5426\u5728\u5f53\u524d\u70b9\u7684\u5750\u6807\u7684\u53f3\u4e0b\u65b9\n        # \u5982\u679c\u5728\uff0c\u5219\u8ba1\u7b97\u8fd9\u4e2a\u70b9\u7684\u5750\u6807\u548c\u5f53\u524d\u70b9\u7684\u5750\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5982\u679c\u8ddd\u79bb\u5c0f\u4e8e\u5f53\u524d\u6700\u5c0f\u8ddd\u79bb\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u8ddd\u79bb\n        # \u5982\u679c\u4e0d\u5728\uff0c\u5219\u5c06\u8fd9\u4e2a\u70b9\u7684\u5750\u6807\u4f5c\u4e3akey\uff0c\u8fd9\u4e2a\u70b9\u7684\u5750\u6807\u4f5c\u4e3avalue\u5b58\u5165\u5b57\u5178\u4e2d\n        # \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n        if not points:\n            return 0\n        points_dict = {}\n        for point in points:\n            if point[0] not in points_dict:\n                points_dict[point[0]] = [point[1]]\n            else:\n                points_dict[point[0]].append(point[1])\n        min_area = float('inf')\n        for point in points:\n            if point[0] == point[1]:\n                continue\n            if point[0] in points_dict and point[1] in points_dict:\n                for y1 in points_dict[point[0]]:\n                    for y2 in points_dict[point[1]]:\n                        if y2 > y1:\n                            area = (point[1] - point[0]) * (y2 - y1)\n                            if area < min_area:\n                                min_area = area\n            if point[1] not in points_dict:\n                points_dict[point[1]] = [point[0]]\n            else:\n                points_dict[point[1]].append(point[0])\n        return min_area if min_area != float('inf') else 0",
    "8": "\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    for i in range(n-1):\n        x = i+1\n        y = 0\n        while x > 0 and x <= n:\n            x += a[x-1]\n            y += a[x-1]\n            x -= a[x-1]\n            y -= a[x-1]\n        if x > 0 and x <= n:\n            print(y)\n        else:\n            print(-1)\n",
    "9": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n-1):\n        x = 1\n        y = 0\n        for j in range(i, n):\n            x += a[j]\n            y += a[j]\n            if x <= 0 or x > n:\n                print(-1)\n                break\n            x, y = y, x\n        else:\n            print(y)\n",
    "10": "\n    n, m = map(int, input().split())\n    if n*m > 10**5:\n        print(\"NO\")\n        return\n    if n == 1:\n        print(\"YES\")\n        print(*list(range(1, m+1)))\n        return\n    if m == 1:\n        print(\"YES\")\n        print(*list(range(1, n+1)))\n        return\n    if n == 2:\n        if m%2 == 0:\n            print(\"YES\")\n            print(*list(range(1, m+1, 2)), *list(range(2, m+1, 2)))\n            return\n        else:\n            print(\"NO\")\n            return\n    if m == 2:\n        if n%2 == 0:\n            print(\"YES\")\n            print(*list(range(1, n+1, 2)), *list(range(2, n+1, 2)))\n            return\n        else:\n            print(\"NO\")\n            return\n    if n%2 == 0 and m%2 == 0:\n        print(\"YES\")\n        for i in range(1, n+1, 2):\n            print(*list(range(i, m+1, 2)), *list(range(i+1, m+1, 2)))\n        return\n    print(\"NO\")\n    return\n",
    "11": "\n    n, m = map(int, input().split())\n    if n*m == 1:\n        print(\"YES\")\n        print(1)\n    elif n*m == 2:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(n):\n            for j in range(m):\n                print(i*m+j+1, end=\" \")\n            print()\n",
    "12": "\n    if not isinstance(position, str):\n        return []\n    if len(position) != 2:\n        return []\n    if position[0] not in 'ABCDEFGH' or position[1] not in '12345678':\n        return []\n    x = 'ABCDEFGH'.index(position[0])\n    y = '12345678'.index(position[1])\n    moves = []\n    for i in range(1, 9):\n        moves.append(f'{chr(ord(position[0]) + i)}{position[1]}')\n        moves.append(f'{chr(ord(position[0]) - i)}{position[1]}')\n        moves.append(f'{position[0]}{str(int(position[1]) + i)}')\n        moves.append(f'{position[0]}{str(int(position[1]) - i)}')\n        moves.append(f'{chr(ord(position[0]) + i)}{str(int(position[1]) + i)}')\n        moves.append(f'{chr(ord(position[0]) - i)}{str(int(position[1]) + i)}')\n        moves.append(f'{chr(ord(position[0]) + i)}{str(int(position[1]) - i)}')\n        moves.append(f'{chr(ord(position[0]) - i)}{str(int(position[1]) - i)}')\n    return sorted(list(filter(lambda x: x[0] in 'ABCDEFGH' and x[1] in '12345678', moves)))",
    "13": "\n    if type(position) != str:\n        return []\n    if len(position) != 2:\n        return []\n    if position[0] not in 'ABCDEFGH' or position[1] not in '12345678':\n        return []\n    x = 'ABCDEFGH'.index(position[0])\n    y = '12345678'.index(position[1])\n    moves = []\n    for i in range(1, 9):\n        moves.append(f'{chr(ord(position[0]) + i)}{position[1]}')\n        moves.append(f'{chr(ord(position[0]) - i)}{position[1]}')\n        moves.append(f'{position[0]}{str(int(position[1]) + i)}')\n        moves.append(f'{position[0]}{str(int(position[1]) - i)}')\n        moves.append(f'{chr(ord(position[0]) + i)}{str(int(position[1]) + i)}')\n        moves.append(f'{chr(ord(position[0]) - i)}{str(int(position[1]) + i)}')\n        moves.append(f'{chr(ord(position[0]) + i)}{str(int(position[1]) - i)}')\n        moves.append(f'{chr(ord(position[0]) - i)}{str(int(position[1]) - i)}')\n    moves = [x for x in moves if x[0] in 'ABCDEFGH' and x[1] in '12345678']\n    return sorted(list(set(moves)))",
    "14": "\n    if len(arg1) < 2:\n        return arg1\n    else:\n        return sorted(set(arg1), reverse=True)[:2]",
    "15": "\n    if arg1 == []:\n        return []\n    else:\n        return sorted(list(set(arg1)), reverse=True)[:2]",
    "16": "\n    n, m = map(int, input().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    visited[1] = True\n    queue = [1]\n    time = 0\n    while queue:\n        for i in range(len(queue)):\n            node = queue.pop(0)\n            for j in graph[node]:\n                if not visited[j]:\n                    visited[j] = True\n                    queue.append(j)\n        time += 1\n    print(time)\n\nif __name__ == '__main__':\n    code()",
    "17": "\n    n, m = map(int, input().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    visited[1] = True\n    queue = [1]\n    time = 0\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            node = queue.pop(0)\n            for j in graph[node]:\n                if not visited[j]:\n                    visited[j] = True\n                    queue.append(j)\n        time += 1\n    print(time)\n",
    "18": "\n    if n < 0:\n        return False\n    else:\n        return n**0.5 == int(n**0.5)",
    "19": "\n    if n < 0:\n        return False\n    else:\n        return n**0.5 == int(n**0.5)\n\nif __name__ == '__main__':\n    print(is_square(-1))\n    print(is_square(0))\n    print(is_square(3))\n    print(is_square(4))\n    print(is_square(25))\n    print(is_square(26))"
}