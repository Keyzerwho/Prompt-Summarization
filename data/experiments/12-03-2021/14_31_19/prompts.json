{
    "0": "Python 3\n\"\"\"\nYou will be given two integers and your task is to draw following pattern.\n\nExample 1:\nInput: dot(1,1)       \n\n        +---+\nOutput: | o |\n        +---+ \n\nExample 2:\nInput: dot(3,2)\n\n        +---+---+---+\n        | o | o | o |\nOutput: +---+---+---+\n        | o | o | o |\n        +---+---+---+\n\"\"\"\ndef dot(n,m):",
    "1": "Python 3\n\"\"\"\nThis is now a little serie :)\n\nFunny Dots\n\nYou will get two Integer n (width) and m (height) and your task is to draw following pattern. Each line is seperated with '\\n'.\n\nBoth integers are equal or greater than 1. No need to check for invalid parameters.\n\ne.g.:\n\n\n\n                                          +---+---+---+\n            +---+                         | o | o | o |\ndot(1,1) => | o |          dot(3,2) =>    +---+---+---+            \n            +---+                         | o | o | o |\n                                          +---+---+---+\n\n\n Serie: ASCII Fun\n\nASCII Fun #1: X-Shape\nASCII Fun #2: Funny Dots\nASCII Fun #3: Puzzle Tiles\nASCII Fun #4: Build a pyramid\n\"\"\"\ndef dot(n,m):",
    "2": "Python 3\n\"\"\"\nGiven a binary string $s$ consisting of zeros and ones of length $n$. Find the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\n\n-----Input-----\n\nThe first line contains the string $s$ ($1 \\leq |s| \\leq 300\\,000$), consisting of zeros and ones.\n\n\n-----Output-----\n\nOutput one integer: the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\n\n-----Examples-----\nInput\n010101\n\nOutput\n3\n\nInput\n11001100\n\nOutput\n0\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nToad Rash has a binary string $s$. A binary string consists only of zeros and ones.\n\nLet $n$ be the length of $s$.\n\nRash needs to find the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\nFind this number of pairs for Rash.\n\n\n-----Input-----\n\nThe first line contains the string $s$ ($1 \\leq |s| \\leq 300\\,000$), consisting of zeros and ones.\n\n\n-----Output-----\n\nOutput one integer: the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\n\n-----Examples-----\nInput\n010101\n\nOutput\n3\n\nInput\n11001100\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, there are three $l$, $r$ pairs we need to count: $1$, $6$; $2$, $6$; and $1$, $5$.\n\nIn the second example, there are no values $x$, $k$ for the initial string, so the answer is $0$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYour task is to determine whether a palindrome can be made or not by deleting only one character from the given string s.\n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nGiven a string s. Can you make it a palindrome by deleting exactly one character? Note that size of the string after deletion would be one less than it was before. \n\n-----Input-----\nFirst line of the input contains a single integer T denoting number of test cases.\nFor each test case, you are given a single line containing string  s. \n\n-----Output-----\nFor each test case, print YES or NO depending on the answer of the problem. \n\n-----Constraints-----\nSubtask 1, 35 points \n-  1 \u2264 T \u2264 100\n- 2 \u2264  size of string s \u2264 1000\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\nSubtask 2, 65 points \n- 2 \u2264  size of string s \u2264 10^5\n-  Sum of size of string s over all the input test cases won't exceed 10^6\n-  String s contains lowercase English alphabets (ie. from 'a' to 'z').\n\n-----Example-----\nInput:\n4\naaa\nabc\nabdbca\nabba\n\nOutput:\nYES\nNO\nYES\nYES\n\n-----Explanation-----\nExample case 1. Delete any one 'a', resulting string is \"aa\" which is a palindrome.\nExample case 2. It is not possible to delete exactly one character and having a palindrome.\nExample case 3. Delete 'c', resulting string is \"abdba\" which is a palindrome. \nExample case 4. Delete 'b', resulting string is \"aba\" which is a palindrome.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nDetermine the minimum area of a rectangle formed from given points in xy plane, with sides parallel to the x and y axes.\nIf there isn't any rectangle, return 0.\n\u00a0\n\nExample 1:\nInput: [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4\n\n\nExample 2:\nInput: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2\n\n\u00a0\nNote:\n\n1 <= points.length <= 500\n0 <=\u00a0points[i][0] <=\u00a040000\n0 <=\u00a0points[i][1] <=\u00a040000\nAll points are distinct.\n\"\"\"\nclass Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:",
    "7": "Python 3\n\"\"\"\nGiven a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.\nIf there isn't any rectangle, return 0.\n\u00a0\n\nExample 1:\nInput: [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4\n\n\nExample 2:\nInput: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2\n\n\u00a0\nNote:\n\n1 <= points.length <= 500\n0 <=\u00a0points[i][0] <=\u00a040000\n0 <=\u00a0points[i][1] <=\u00a040000\nAll points are distinct.\n\"\"\"\nclass Solution:\n    def minAreaRect(self, points: List[List[int]]) -> int:",
    "8": "Python 3\n\"\"\"\nPerform the following operations on a sequence a_1, a_2, ..., a_{n} of positive integers:  Initially, x = 1 and y = 0. If, after any step, x \u2264 0 or x > n, the program immediately terminates.  The program increases both x and y by a value equal to a_{x} simultaneously.  The program now increases y by a_{x} while decreasing x by a_{x}.  The program executes steps 2 and 3 first step 2, then step 3 repeatedly until it terminates .It may never terminate.\n\nYou are given the sequence a_2, a_3, ..., a_{n}. Suppose for each i (1 \u2264 i \u2264 n - 1) we run the program on the sequence i, a_2, a_3, ..., a_{n}. For each such run output the final value of y if the program terminates or -1 if it does not terminate.\n\n\n-----Input-----\n\nThe first line contains a single integer, n (2 \u2264 n \u2264 2\u00b710^5). The next line contains n - 1 space separated integers, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nOutput n - 1 lines. On the i-th line, print the requested value when the program is run on the sequence i, a_2, a_3, ...a_{n}.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n4\n2 4 1\n\nOutput\n3\n6\n8\n\nInput\n3\n1 2\n\nOutput\n-1\n-1\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nFarmer John has just given the cows a program to play with! The program contains two integer variables, x and y, and performs the following operations on a sequence a_1, a_2, ..., a_{n} of positive integers:  Initially, x = 1 and y = 0. If, after any step, x \u2264 0 or x > n, the program immediately terminates.  The program increases both x and y by a value equal to a_{x} simultaneously.  The program now increases y by a_{x} while decreasing x by a_{x}.  The program executes steps 2 and 3 (first step 2, then step 3) repeatedly until it terminates (it may never terminate). So, the sequence of executed steps may start with: step 2, step 3, step 2, step 3, step 2 and so on. \n\nThe cows are not very good at arithmetic though, and they want to see how the program works. Please help them!\n\nYou are given the sequence a_2, a_3, ..., a_{n}. Suppose for each i (1 \u2264 i \u2264 n - 1) we run the program on the sequence i, a_2, a_3, ..., a_{n}. For each such run output the final value of y if the program terminates or -1 if it does not terminate.\n\n\n-----Input-----\n\nThe first line contains a single integer, n (2 \u2264 n \u2264 2\u00b710^5). The next line contains n - 1 space separated integers, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nOutput n - 1 lines. On the i-th line, print the requested value when the program is run on the sequence i, a_2, a_3, ...a_{n}.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n4\n2 4 1\n\nOutput\n3\n6\n8\n\nInput\n3\n1 2\n\nOutput\n-1\n-1\n\n\n\n-----Note-----\n\nIn the first sample   For i = 1,  x becomes $1 \\rightarrow 2 \\rightarrow 0$ and y becomes 1 + 2 = 3.  For i = 2,  x becomes $1 \\rightarrow 3 \\rightarrow - 1$ and y becomes 2 + 4 = 6.  For i = 3,  x becomes $1 \\rightarrow 4 \\rightarrow 3 \\rightarrow 7$ and y becomes 3 + 1 + 4 = 8.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given two integers n and m. Create a matrix numbered from 1 to n\u00b7m in order of rows. \nYou have to find a matrix with n rows and m columns in which all numbers from 1\nto n\u00b7m appear exactly once and adjacent numbers in the original matrix are not\nadjacent in it, or determine that there is no such matrix.\n\n-----Input-----\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5; n\u00b7m \u2264 10^5)\u00a0\u2014 the number of rows and the number of columns in the required matrix.\n\n\n-----Output-----\n\nIf there is no such matrix, output \"NO\" (without quotes). \n\nOtherwise in the first line output \"YES\" (without quotes), and in the next n lines output m integers which form the required matrix.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\nYES\n5 4 7 2 \n3 6 1 8 \n\nInput\n2 1\n\nOutput\nNO\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nStudents went into a class to write a test and sat in some way. The teacher thought: \"Probably they sat in this order to copy works of each other. I need to rearrange them in such a way that students that were neighbors are not neighbors in a new seating.\"\n\nThe class can be represented as a matrix with n rows and m columns with a student in each cell. Two students are neighbors if cells in which they sit have a common side.\n\nLet's enumerate students from 1 to n\u00b7m in order of rows. So a student who initially sits in the cell in row i and column j has a number (i - 1)\u00b7m + j. You have to find a matrix with n rows and m columns in which all numbers from 1 to n\u00b7m appear exactly once and adjacent numbers in the original matrix are not adjacent in it, or determine that there is no such matrix.\n\n\n-----Input-----\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5; n\u00b7m \u2264 10^5)\u00a0\u2014 the number of rows and the number of columns in the required matrix.\n\n\n-----Output-----\n\nIf there is no such matrix, output \"NO\" (without quotes). \n\nOtherwise in the first line output \"YES\" (without quotes), and in the next n lines output m integers which form the required matrix.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\nYES\n5 4 7 2 \n3 6 1 8 \n\nInput\n2 1\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first test case the matrix initially looks like this:\n\n1 2 3 4\n\n5 6 7 8\n\n\n\nIt's easy to see that there are no two students that are adjacent in both matrices.\n\nIn the second test case there are only two possible seatings and in both of them students with numbers 1 and 2 are neighbors.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nThe queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. \n\n## Task:\nWrite a function ```availableMoves(position)``` which returns possibly moves of chess queen. Returned value should be an ```array``` with possible moves sorted alphabetically, exluded starting position.\n\nFor example when input position is ```A1``` return value should be:\n\n```[\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\", \"B1\", \"B2\", \"C1\", \"C3\", \"D1\", \"D4\", \"E1\", \"E5\", \"F1\", \"F6\", \"G1\", \"G7\", \"H1\", \"H8\"]```\n\n```\n     A   B   C   D   E   F   G   H\n   + - + - + - + - + - + - + - + - +\n1  | Q | x | x | x | x | x | x | x |\n   + - + - + - + - + - + - + - + - +\n2  | x | x |   |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n3  | x |   | x |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n4  | x |   |   | x |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n5  | x |   |   |   | x |   |   |   |\n   + - + - + - + - + - + - + - + - +\n6  | x |   |   |   |   | x |   |   |\n   + - + - + - + - + - + - + - + - +\n7  | x |   |   |   |   |   | x |   |\n   + - + - + - + - + - + - + - + - +\n8  | x |   |   |   |   |   |   | x |\n   + - + - + - + - + - + - + - + - +\n   \nQ = queen\nx = available move\n```\n\n## Input:\n- input position can be any type (array, number, string and so on). If input position is not a string then return empty array.\n- valid input position is one letter from ```A``` to ```H``` with number from ```1``` to ```8```, for example ```A1```, ```C8```, ```B3```. If input is invalid (for example ```A10``` or ```H0```) then return empty array.\n\"\"\"\ndef available_moves(position):",
    "13": "Python 3\n\"\"\"\nThe queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally, thus combining the moves of the rook and bishop. The queen captures by occupying the square on which an enemy piece sits. (wikipedia: https://en.wikipedia.org/wiki/Queen_(chess)).\n\n## Task:\nWrite a function ```availableMoves(position)``` which returns possibly moves of chess queen. Returned value should be an ```array``` with possible moves sorted alphabetically, exluded starting position.\n\nFor example when input position is ```A1``` return value should be:\n\n```[\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\", \"B1\", \"B2\", \"C1\", \"C3\", \"D1\", \"D4\", \"E1\", \"E5\", \"F1\", \"F6\", \"G1\", \"G7\", \"H1\", \"H8\"]```\n\n```\n     A   B   C   D   E   F   G   H\n   + - + - + - + - + - + - + - + - +\n1  | Q | x | x | x | x | x | x | x |\n   + - + - + - + - + - + - + - + - +\n2  | x | x |   |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n3  | x |   | x |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n4  | x |   |   | x |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n5  | x |   |   |   | x |   |   |   |\n   + - + - + - + - + - + - + - + - +\n6  | x |   |   |   |   | x |   |   |\n   + - + - + - + - + - + - + - + - +\n7  | x |   |   |   |   |   | x |   |\n   + - + - + - + - + - + - + - + - +\n8  | x |   |   |   |   |   |   | x |\n   + - + - + - + - + - + - + - + - +\n   \nQ = queen\nx = available move\n```\n\n## Input:\n- input position can be any type (array, number, string and so on). If input position is not a string then return empty array.\n- valid input position is one letter from ```A``` to ```H``` with number from ```1``` to ```8```, for example ```A1```, ```C8```, ```B3```. If input is invalid (for example ```A10``` or ```H0```) then return empty array.\n\"\"\"\ndef available_moves(position):",
    "14": "Python 3\n\"\"\"\nYour job is to return the two distinct highest values in a list. If there're less than 2 unique values, return as many of them as possible.\n\nThe result should also be ordered from highest to lowest.\n\nExamples:\n\n```\n[4, 10, 10, 9]  =>  [10, 9]\n[1, 1, 1]  =>  [1]\n[]  =>  []\n```\n\"\"\"\ndef two_highest(arg1):",
    "15": "Python 3\n\"\"\"\nIn this kata, your job is to return the two distinct highest values in a list. If there're less than 2 unique values, return as many of them, as possible.\n\nThe result should also be ordered from highest to lowest.\n\nExamples:\n\n```\n[4, 10, 10, 9]  =>  [10, 9]\n[1, 1, 1]  =>  [1]\n[]  =>  []\n```\n\"\"\"\ndef two_highest(arg1):",
    "16": "Python 3\n\"\"\"\nYou are given a directed graph of $n$ vertices and $m$ edges. Vertices are numbered from $1$ to $n$. There is a token in vertex $1$.\n\nThe following actions are allowed: Token movement. To move the token from vertex $u$ to vertex $v$ if there is an edge $u \\to v$ in the graph. This action takes $1$ second. To transpose all the edges in the graph: replace each edge $u \\to v$ by an edge $v \\to u$. This action takes increasingly more time: $k$-th transposition takes $2^{k-1}$ seconds.\n\nThe goal is to move the token from vertex $1$ to vertex $n$ in the shortest possible time. Print this time modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n, m$ ($1 \\le n, m \\le 200\\,000$).\n\nThe next $m$ lines contain two integers each: $u, v$ ($1 \\le u, v \\le n; u \\ne v$), which represent the edges of the graph. It is guaranteed that all ordered pairs $(u, v)$ are distinct.\n\nIt is guaranteed that it is possible to move the token from vertex $1$ to vertex $n$ using the actions above.\n\n\n-----Output-----\n\nPrint one integer: the minimum required time modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\n\nOutput\n2\n\nInput\n4 3\n2 1\n2 3\n4 3\n\nOutput\n10\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given a directed graph of $n$ vertices and $m$ edges. Vertices are numbered from $1$ to $n$. There is a token in vertex $1$.\n\nThe following actions are allowed:   Token movement. To move the token from vertex $u$ to vertex $v$ if there is an edge $u \\to v$ in the graph. This action takes $1$ second.  Graph transposition. To transpose all the edges in the graph: replace each edge $u \\to v$ by an edge $v \\to u$. This action takes increasingly more time: $k$-th transposition takes $2^{k-1}$ seconds, i.e. the first transposition takes $1$ second, the second one takes $2$ seconds, the third one takes $4$ seconds, and so on. \n\nThe goal is to move the token from vertex $1$ to vertex $n$ in the shortest possible time. Print this time modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n, m$ ($1 \\le n, m \\le 200\\,000$).\n\nThe next $m$ lines contain two integers each: $u, v$ ($1 \\le u, v \\le n; u \\ne v$), which represent the edges of the graph. It is guaranteed that all ordered pairs $(u, v)$ are distinct.\n\nIt is guaranteed that it is possible to move the token from vertex $1$ to vertex $n$ using the actions above.\n\n\n-----Output-----\n\nPrint one integer: the minimum required time modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\n\nOutput\n2\n\nInput\n4 3\n2 1\n2 3\n4 3\n\nOutput\n10\n\n\n\n-----Note-----\n\nThe first example can be solved by transposing the graph and moving the token to vertex $4$, taking $2$ seconds.\n\nThe best way to solve the second example is the following: transpose the graph, move the token to vertex $2$, transpose the graph again, move the token to vertex $3$, transpose the graph once more and move the token to vertex $4$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven an integral number, determine if it's a square number.\n\nExamples:\n\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n\"\"\"\ndef is_square(n):",
    "19": "Python 3\n\"\"\"\n## A square of squares\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\n\nHowever, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain\u2026 Wait! That's it! You just have to check if your number of building blocks is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nThe tests will _always_ use some integral number, so don't worry about that in dynamic typed languages.\n\n### Examples\n\n```\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n```\n\"\"\"\ndef is_square(n):"
}