{
    "0": "Python 3\n\"\"\"\nYou need to write a program that, given the sequence a_{i}, builds two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree.\n\nTwo rooted trees are isomorphic, if you can reenumerate the vertices of the first one in such a way, that the index of the root becomes equal the index of the root of the second tree, and these two trees become equal.\n\nThe height of a rooted tree is the maximum number of edges on a path from the root to any other vertex.\n\n\n-----Input-----\n\nThe first line contains a single integer h (2 \u2264 h \u2264 10^5)\u00a0\u2014 the height of the tree.\n\nThe second line contains h + 1 integers\u00a0\u2014 the sequence a_0, a_1, ..., a_{h} (1 \u2264 a_{i} \u2264 2\u00b710^5). The sum of all a_{i} does not exceed 2\u00b710^5. It is guaranteed that there is at least one tree matching this sequence.\n\n\n-----Output-----\n\nIf there is only one tree matching this sequence, print \"perfect\".\n\nOtherwise print \"ambiguous\" in the first line. In the second and in the third line print descriptions of two trees in the following format: in one line print $\\sum_{i = 0}^{h} a_{i}$ integers, the k-th of them should be the parent of vertex k or be equal to zero, if the k-th vertex is the root.\n\nThese treese should be non-isomorphic and should match the given sequence.\n\n\n-----Examples-----\nInput\n2\n1 1 1\n\nOutput\nperfect\n\nInput\n2\n1 2 2\n\nOutput\nambiguous\n0 1 1 3 3\n0 1 1 3 2\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSasha is taking part in a programming competition. In one of the problems she should check if some rooted trees are isomorphic or not. She has never seen this problem before, but, being an experienced participant, she guessed that she should match trees to some sequences and then compare these sequences instead of trees. Sasha wants to match each tree with a sequence a_0, a_1, ..., a_{h}, where h is the height of the tree, and a_{i} equals to the number of vertices that are at distance of i edges from root. \n\nUnfortunately, this time Sasha's intuition was wrong, and there could be several trees matching the same sequence. To show it, you need to write a program that, given the sequence a_{i}, builds two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree.\n\nTwo rooted trees are isomorphic, if you can reenumerate the vertices of the first one in such a way, that the index of the root becomes equal the index of the root of the second tree, and these two trees become equal.\n\nThe height of a rooted tree is the maximum number of edges on a path from the root to any other vertex.\n\n\n-----Input-----\n\nThe first line contains a single integer h (2 \u2264 h \u2264 10^5)\u00a0\u2014 the height of the tree.\n\nThe second line contains h + 1 integers\u00a0\u2014 the sequence a_0, a_1, ..., a_{h} (1 \u2264 a_{i} \u2264 2\u00b710^5). The sum of all a_{i} does not exceed 2\u00b710^5. It is guaranteed that there is at least one tree matching this sequence.\n\n\n-----Output-----\n\nIf there is only one tree matching this sequence, print \"perfect\".\n\nOtherwise print \"ambiguous\" in the first line. In the second and in the third line print descriptions of two trees in the following format: in one line print $\\sum_{i = 0}^{h} a_{i}$ integers, the k-th of them should be the parent of vertex k or be equal to zero, if the k-th vertex is the root.\n\nThese treese should be non-isomorphic and should match the given sequence.\n\n\n-----Examples-----\nInput\n2\n1 1 1\n\nOutput\nperfect\n\nInput\n2\n1 2 2\n\nOutput\nambiguous\n0 1 1 3 3\n0 1 1 3 2\n\n\n\n-----Note-----\n\nThe only tree in the first example and the two printed trees from the second example are shown on the picture:\n\n$88$\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #18\n\nCreate a function that accepts 2 string arguments and returns an integer of the count of occurrences the 2nd argument is found in the first one.\n\nIf no occurrences can be found, a count of 0 should be returned.\n\nNotes:\n* The first argument can be an empty string  \n* The second string argument will always be of length 1\n\"\"\"\ndef str_count(strng, letter):",
    "3": "Python 3\n\"\"\"\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #18\n\nCreate a function called that accepts 2 string arguments and returns an integer of the count of occurrences the 2nd argument is found in the first one.\n\nIf no occurrences can be found, a count of 0 should be returned.\n\nNotes:\n* The first argument can be an empty string  \n* The second string argument will always be of length 1\n\"\"\"\ndef str_count(strng, letter):",
    "4": "Python 3\n\"\"\"\nWrite a function encode that takes in a string str and replaces all the letters with their respective positions in the English alphabet. String are case sensitive.\n\nExamples:\nInput:\nencode('abc')\nOutput:\n'123'\nExplanation:\na is 1st in English alpabet, b is 2nd and c is 3rd.\n\nInput:\nencode('codewars')\nOutput:\n'315452311819'\n\nInput:\nencode('abc-#@5')\nOutput:\n'123-#@5'\n\"\"\"\ndef encode(string):",
    "5": "Python 3\n\"\"\"\nThis is a follow up from my kata The old switcheroo\n\nWrite\n```python\ndef encode(str)\n```\nthat takes in a string ```str``` and replaces all the letters with their respective positions in the English alphabet.\n\n```python\nencode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd\nencode('codewars') == '315452311819'\nencode('abc-#@5') == '123-#@5'\n```\nString are case sensitive.\n\"\"\"\ndef encode(string):",
    "6": "Python 3\n\"\"\"\nFailed Sort - Bug Fixing #4\nYour task is to fix the sortArray function to sort all numbers in ascending order\n\"\"\"\ndef sort_array(value):",
    "7": "Python 3\n\"\"\"\nFailed Sort - Bug Fixing #4\nOh no, Timmy's Sort doesn't seem to be working? Your task is to fix the sortArray function to sort all numbers in ascending order\n\"\"\"\ndef sort_array(value):",
    "8": "Python 3\n\"\"\"\nYou are given a positive number, find if it is strong or not. Strong number is the number that the sum of the factorial of its digits is equal to number itself.\n\nExample 1:\nInput: strong_num(1)\nOutput: \"STRONG!!!!\"\nExplanation: Since the sum of its digits' factorial of 1 is equal to number itself, then it's a Strong.  \n\nExample 2:\nInput: strong_num(123)\nOutput: \"Not Strong !!\"\nExplanation: Since the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself, then it's Not Strong. \n\nExample 3:\nInput: strong_num(2)\nOutput: \"STRONG!!!!\"\nExplanation: Since **_the sum of its digits' factorial of 2! = 2 is equal to number itself, then it's a Strong.  \n\nExample 4:\nInput: strong_num(150)\nOutput: \"Not Strong !!\"\nExplanation: Since the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself, then it's Not Strong.\n\"\"\"\ndef strong_num(number):",
    "9": "Python 3\n\"\"\"\n# Definition\n\n**_Strong number_** is the number that *the sum of the factorial of its digits is equal to number itself*.\n\n## **_For example_**:  **_145_**, since \n```\n1! + 4! + 5! = 1 + 24 + 120 = 145\n```\nSo, **_145_** is a **_Strong number_**. \n____\n\n# Task\n\n**_Given_** a number, **_Find if it is Strong or not_**.\n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_Number_** *passed is always*  **_Positive_**.\n* **_Return_** *the result as* **_String_**\n___\n\n# Input >> Output Examples\n\n\n```\nstrong_num(1) ==> return \"STRONG!!!!\"\n```\n\n## **_Explanation_**:\n\nSince , **_the sum of its digits' factorial of (1) is equal to number itself (1)_** , **_Then_** its a **_Strong_** .  \n____\n\n```\nstrong_num(123) ==> return \"Not Strong !!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself (123)_** , **_Then_** it's  **_Not Strong_** . \n___\n\n```\nstrong_num(2)  ==>  return \"STRONG!!!!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 2! = 2 is equal to number itself (2)_** , **_Then_** its a **_Strong_** .  \n____\n\n```\nstrong_num(150) ==> return \"Not Strong !!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself (150)_**, **_Then_** it's **_Not Strong_** . \n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef strong_num(number):",
    "10": "Python 3\n\"\"\"\nYou are given integer $n$. You have to arrange numbers from $1$ to $2n$, using each of them exactly once, on the circle, so that the following condition would be satisfied:\n\nFor every $n$ consecutive numbers on the circle write their sum on the blackboard. Then any two of written on the blackboard $2n$ numbers differ not more than by $1$.\n\n\n-----Input-----\n\nThe first and the only line contain one integer $n$ ($1 \\le n \\le 10^5$).\n\n\n-----Output-----\n\nIf there is no solution, output \"NO\" in the first line. \n\nIf there is a solution, output \"YES\" in the first line. In the second line output $2n$ numbers\u00a0\u2014 numbers from $1$ to $2n$ in the order they will stay in the circle. Each number should appear only once. If there are several solutions, you can output any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\nYES\n1 4 5 2 3 6 \nInput\n4\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given integer $n$. You have to arrange numbers from $1$ to $2n$, using each of them exactly once, on the circle, so that the following condition would be satisfied:\n\nFor every $n$ consecutive numbers on the circle write their sum on the blackboard. Then any two of written on the blackboard $2n$ numbers differ not more than by $1$.\n\nFor example, choose $n = 3$. On the left you can see an example of a valid arrangement: $1 + 4 + 5 = 10$, $4 + 5 + 2 = 11$, $5 + 2 + 3 = 10$, $2 + 3 + 6 = 11$, $3 + 6 + 1 = 10$, $6 + 1 + 4 = 11$, any two numbers differ by at most $1$. On the right you can see an invalid arrangement: for example, $5 + 1 + 6 = 12$, and $3 + 2 + 4 = 9$, $9$ and $12$ differ more than by $1$.\n\n [Image] \n\n\n-----Input-----\n\nThe first and the only line contain one integer $n$ ($1 \\le n \\le 10^5$).\n\n\n-----Output-----\n\nIf there is no solution, output \"NO\" in the first line. \n\nIf there is a solution, output \"YES\" in the first line. In the second line output $2n$ numbers\u00a0\u2014 numbers from $1$ to $2n$ in the order they will stay in the circle. Each number should appear only once. If there are several solutions, you can output any of them.\n\n\n-----Examples-----\nInput\n3\n\nOutput\nYES\n1 4 5 2 3 6 \nInput\n4\n\nOutput\nNO\n\n\n-----Note-----\n\nExample from the statement is shown for the first example. \n\nIt can be proved that there is no solution in the second example.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nLet's assume that   v(n) is the largest prime number, that does not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first line contains integer t\u00a0(1 \u2264 t \u2264 500) \u2014 the number of testscases. \n\nEach of the following t lines of the input contains integer n (2 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nPrint t lines: the i-th of them must contain the answer to the i-th test as an irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\nInput\n2\n2\n3\n\nOutput\n1/6\n7/30\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLet's assume that   v(n) is the largest prime number, that does not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first line contains integer t\u00a0(1 \u2264 t \u2264 500) \u2014 the number of testscases. \n\nEach of the following t lines of the input contains integer n (2 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nPrint t lines: the i-th of them must contain the answer to the i-th test as an irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\nInput\n2\n2\n3\n\nOutput\n1/6\n7/30\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n# Description\n\nGiven a current position of a knight in a chess board, find the possible positions that it will end up after 1 move. The resulted should be sorted.\n\n# Example\n\nInput: \"a1\"\nOutput: [\"b3\", \"c2\"]\n\"\"\"\ndef possible_positions(pos):",
    "15": "Python 3\n\"\"\"\n# Description\n\nWrite a function that accepts the current position of a knight in a chess board, it returns the possible positions that it will end up after 1 move. The resulted should be sorted. \n\n## Example\n\n\"a1\" -> [\"b3\", \"c2\"]\n\"\"\"\ndef possible_positions(pos):",
    "16": "Python 3\n\"\"\"\nWrite a function search_substr(fullText, searchText) that it returns the number of times the search_text is found within the full_text. If the searchText is empty, return 0.\n\nExamples:\nInput:\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb')\nOutput:\n2\nExplanation:\nshould return 2 since bb shows up twice\n\nInput:\nsearch_substr('aaabbbcccc', 'bbb')\nOutput:\n1\n\nInput:\nsearch_substr( 'aaa', 'aa' )\nOutput:\n2\n\nInput:\nsearch_substr( 'aaa', '' )\nOutput:\n0\n\nInput:\nsearch_substr( 'aaa', 'aa', false )\nOutput:\n1\n\"\"\"\ndef search_substr(full_text, search_text, allow_overlap=True):",
    "17": "Python 3\n\"\"\"\nComplete the solution so that it returns the number of times the search_text is found within the full_text.\n\n```python\nsearch_substr( fullText, searchText, allowOverlap = true )\n```\n\nso that overlapping solutions are (not) counted. If the searchText is empty, it should return `0`. Usage examples:\n\n```python\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb') # should return 2 since bb shows up twice\nsearch_substr('aaabbbcccc', 'bbb') # should return 1\nsearch_substr( 'aaa', 'aa' ) # should return 2\nsearch_substr( 'aaa', '' ) # should return 0\nsearch_substr( 'aaa', 'aa', false ) # should return 1\n```\n\"\"\"\ndef search_substr(full_text, search_text, allow_overlap=True):",
    "18": "Python 3\n\"\"\"\nYou are given a sequence a consisting of n integers. Find the maximum possible value of integer remainder of a_{i} divided by a_{j}, where 1 \u2264 i, j \u2264 n and a_{i} \u2265 a_{j}.\n\n\n-----Input-----\n\nThe first line contains integer n\u00a0\u2014 the length of the sequence (1 \u2264 n \u2264 2\u00b710^5). \n\nThe second line contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 10^6).\n\n\n-----Output-----\n\nPrint the answer to the problem.\n\n\n-----Examples-----\nInput\n3\n3 4 5\n\nOutput\n2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a sequence a consisting of n integers. Find the maximum possible value of $a_{i} \\operatorname{mod} a_{j}$ (integer remainder of a_{i} divided by a_{j}), where 1 \u2264 i, j \u2264 n and a_{i} \u2265 a_{j}.\n\n\n-----Input-----\n\nThe first line contains integer n\u00a0\u2014 the length of the sequence (1 \u2264 n \u2264 2\u00b710^5). \n\nThe second line contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 10^6).\n\n\n-----Output-----\n\nPrint the answer to the problem.\n\n\n-----Examples-----\nInput\n3\n3 4 5\n\nOutput\n2\n\"\"\"\ndef code():"
}