{
    "0": "Python 3\n\"\"\"\nYour work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped. The bits are numbered from the least significant bit. The index number can be out of number's range.\n\nExample:\nInput:\nflip_bit(15, 4)\nOutput:\n7\nExplanation:\n15 in binary is 1111, after flipping 4th bit, it becomes 0111, i.e. 7\n\nInput:\nflip_bit(15, 5)\nOutput:\n31\nExplanation:\n15 in binary is 1111, 5th bit is 0, after flipping, it becomes 11111, i.e., 31\n\n\"\"\"\ndef flip_bit(value, bit_index):",
    "1": "Python 3\n\"\"\"\nYour work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped.\n\nThe bits are numbered from the least significant bit (index 1).\n\nExample:\n```python\nflip_bit(15, 4) == 7 # 15 in binary is 1111, after flipping 4th bit, it becomes 0111, i.e. 7\nflip_bit(15, 5) == 31 # 15 in binary is 1111, 5th bit is 0, after flipping, it becomes 11111, i.e., 31\n```\nNote : index number can be out of number's range : e.g number is 3 (it has 2 bits) and index number is 8(for C# this number is up to 31) -> result will be 131 \n\nSee more examples in test classes\n\nGood luck!\n\"\"\"\ndef flip_bit(value, bit_index):",
    "2": "Python 3\n\"\"\"\nYou are given two integers X and d.\n\nYou should construct an array such that, removing all non-empty subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d from the set of all\nsubsequences will give you X subsequences.\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nPikachu had an array with him. He wrote down all the non-empty subsequences of the array on paper. Note that an array of size n has 2^{n} - 1 non-empty subsequences in it. \n\nPikachu being mischievous as he always is, removed all the subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d\n\nPikachu was finally left with X subsequences. \n\nHowever, he lost the initial array he had, and now is in serious trouble. He still remembers the numbers X and d. He now wants you to construct any such array which will satisfy the above conditions. All the numbers in the final array should be positive integers less than 10^18. \n\nNote the number of elements in the output array should not be more than 10^4. If no answer is possible, print  - 1.\n\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\n-----Note-----\n\nIn the output of the first example case, the remaining subsequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50], [7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50, 7, 15, 6, 100] is valid.\n\nSimilarly, in the output of the second example case, the remaining sub-sequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 2 are [10], [100], [1000], [10000]. There are 4 of them. Hence, the array [10, 100, 1000, 10000] is valid.\n\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nImplement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\nExamples:\n\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n\"\"\"\ndef string_hash(s):",
    "5": "Python 3\n\"\"\"\nImplement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\n**Note**: OR, AND, NOT, XOR are bitwise operations.\n\n___\n\n### Examples\n\n```\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n```\n\n___\n\nGive an example why this hashing algorithm is bad?\n\"\"\"\ndef string_hash(s):",
    "6": "Python 3\n\"\"\"\nWrite a function which takes a number and returns the corresponding ASCII char for that value.\n\nExample: \nInput:\nget_char(65)\nOutput:\n'A'\n\"\"\"\ndef get_char(c):",
    "7": "Python 3\n\"\"\"\nWrite a function which takes a number and returns the corresponding ASCII char for that value.\n\nExample: \n\n~~~if-not:java,racket\n```\nget_char(65) # => 'A'\n```\n~~~\n~~~if:java\n~~~\n~~~if:racket\n~~~\n\nFor ASCII table, you can refer to http://www.asciitable.com/\n\"\"\"\ndef get_char(c):",
    "8": "Python 3\n\"\"\"\nYou are given an array arr.\nCalculate and return the sum of all possible odd-length subarrays.\n\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "9": "Python 3\n\"\"\"\nGiven an array of positive integers\u00a0arr, calculate the sum of all possible odd-length subarrays.\nA subarray is a contiguous\u00a0subsequence of the array.\nReturn\u00a0the sum of all odd-length subarrays of\u00a0arr.\n\u00a0\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "10": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n can be composed from the first m lowercase English letters exist such that the length of Longest Common Subsequence between S and T is n - 1.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1.\n\nRecall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\n\n-----Note-----\n\nFor the first sample, the 6 possible strings T are: aab, aac, aba, aca, baa, caa. \n\nFor the second sample, the 11 possible strings T are: aaa, aac, aba, abb, abc, aca, acb, baa, bab, caa, cab.\n\nFor the third sample, the only possible string T is b.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a graph which might have undirected edges.\n\nYou need to direct undirected edges in such a way that the resulting graph is directed and acyclic.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and the number of edges in the graph, respectively.\n\nThe next $m$ lines describe edges of the graph. The $i$-th edge is described with three integers $t_i$, $x_i$ and $y_i$ ($t_i \\in [0; 1]$, $1 \\le x_i, y_i \\le n$) \u2014 the type of the edge ($t_i = 0$ if the edge is undirected and $t_i = 1$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $x_i$ and $y_i$ and directed edge is going from the vertex $x_i$ to the vertex $y_i$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($x_i, y_i$) there are no other pairs ($x_i, y_i$) or ($y_i, x_i$)).\n\nIt is guaranteed that both sum $n$ and sum $m$ do not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$; $\\sum m \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case print the answer \u2014 \"NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"YES\" on the first line and $m$ lines describing edges of the resulted directed acyclic graph (in any order). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.\n\n\n-----Example-----\nInput\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n\nOutput\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a graph consisting of $n$ vertices and $m$ edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can't change their direction. Other edges are undirected and you have to choose some direction for all these edges.\n\nYou have to direct undirected edges in such a way that the resulting graph is directed and acyclic (i.e. the graph with all edges directed and having no directed cycles). Note that you have to direct all undirected edges.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and the number of edges in the graph, respectively.\n\nThe next $m$ lines describe edges of the graph. The $i$-th edge is described with three integers $t_i$, $x_i$ and $y_i$ ($t_i \\in [0; 1]$, $1 \\le x_i, y_i \\le n$) \u2014 the type of the edge ($t_i = 0$ if the edge is undirected and $t_i = 1$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $x_i$ and $y_i$ and directed edge is going from the vertex $x_i$ to the vertex $y_i$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($x_i, y_i$) there are no other pairs ($x_i, y_i$) or ($y_i, x_i$)).\n\nIt is guaranteed that both sum $n$ and sum $m$ do not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$; $\\sum m \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case print the answer \u2014 \"NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"YES\" on the first line and $m$ lines describing edges of the resulted directed acyclic graph (in any order). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.\n\n\n-----Example-----\nInput\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n\nOutput\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n\n\n\n-----Note-----\n\nExplanation of the second test case of the example:\n\n[Image]\n\nExplanation of the third test case of the example:\n\n[Image]\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nyou are given a list of of integers for every index print the index if there is a smaller value after that index\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of indexes with a bad values in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPolycarp analyzes the prices of the new berPhone. At his disposal are the prices for $n$ last days: $a_1, a_2, \\dots, a_n$, where $a_i$ is the price of berPhone on the day $i$.\n\nPolycarp considers the price on the day $i$ to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of days with a bad price is $3$ \u2014 these are days $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$).\n\nPrint the number of days with a bad price.\n\nYou have to answer $t$ independent data sets.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of days with a bad price in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nDelete all nodes that have duplicate numbers in a given sorted linked list, leaving only distinct numbers from the original list.\n\nExample 1:\n\n\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\n\nExample 2:\n\n\nInput: 1->1->1->2->3\nOutput: 2->3\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
    "17": "Python 3\n\"\"\"\nGiven a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.\n\nExample 1:\n\n\nInput: 1->2->3->3->4->4->5\nOutput: 1->2->5\n\n\nExample 2:\n\n\nInput: 1->1->1->2->3\nOutput: 2->3\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def deleteDuplicates(self, head: ListNode) -> ListNode:",
    "18": "Python 3\n\"\"\"\nFind the second-to-last element of a list.\n\nExamples:\nInput:\npenultimate([1,2,3,4])\nOutput:\n3\nInput:\npenultimate([\"Python is dynamic\"])\nOutput:\n'i'\n\n\"\"\"\ndef penultimate(a):",
    "19": "Python 3\n\"\"\"\nFind the second-to-last element of a list.\n\nExample:\n```python\npenultimate([1,2,3,4])            # => 3\npenultimate([\"Python is dynamic\"]) # => 'i'\n(courtesy of [haskell.org](http://www.haskell.org/haskellwiki/99_questions/1_to_10))\n```\n\"\"\"\ndef penultimate(a):"
}