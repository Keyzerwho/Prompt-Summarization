{
    "0": "\n    return sum([x for x in seq if x % 2 == 0])",
    "1": "\n    return sum([x for x in seq if x % 2 == 0])",
    "2": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        s = input()\n        if s[0] in \"AEIOU\" and s[-1] in \"AEIOU\":\n            print(\"Yes\")\n        else:\n            print(\"No\")",
    "3": "\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        S = input()\n        vowels = ['A', 'E', 'I', 'O', 'U']\n        count = 0\n        for i in range(N):\n            if S[i] in vowels:\n                count += 1\n        if count >= 2:\n            print(\"Yes\")\n        else:\n            print(\"No\")",
    "4": "\n        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        res = 0\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if matrix[i-1][j-1] == 1:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                    res += dp[i][j]\n        return res",
    "5": "\n        if not matrix:\n            return 0\n        m, n = len(matrix), len(matrix[0])\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        res = 0\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if matrix[i-1][j-1] == 1:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n                    res += dp[i][j]\n        return res",
    "6": "\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    for i in range(n-1):\n        x = 1\n        y = 0\n        while x > 0 and x <= n:\n            x += a[x-1]\n            y += a[x-1]\n            a[x-1] = a[x-1] + a[x-1]\n            x += a[x-1]\n            a[x-1] = a[x-1] - a[x-1]\n        print(y)\n",
    "7": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n-1):\n        x = 1\n        y = 0\n        for j in range(i, n):\n            if x <= 0 or x > n:\n                print(-1)\n                break\n            else:\n                x += a[j]\n                y += a[j]\n                x -= a[j]\n        else:\n            print(y)\n",
    "8": "\n        for i in set(ransomNote):\n            if ransomNote.count(i) > magazine.count(i):\n                return False\n        return True",
    "9": "\n        for i in set(ransomNote):\n            if ransomNote.count(i) > magazine.count(i):\n                return False\n        return True",
    "10": "\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, input().split())))\n        r = []\n        for j in range(n):\n            r.append(max(a[j]))\n        print(sum(r))\n",
    "11": "\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, input().split())))\n        r = [0]*n\n        for j in range(m):\n            for k in range(n):\n                r[k] = max(r[k], a[k][j])\n        print(sum(r))\n",
    "12": "\n    n = int(input())\n    adj = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    visited = [False]*n\n    def dfs(v):\n        visited[v] = True\n        for u in adj[v]:\n            if not visited[u]:\n                dfs(u)\n    dfs(0)\n    if False in visited:\n        print(-1)\n    else:\n        print(n-1)\n",
    "13": "\n    n = int(input())\n    adj = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    visited = [False]*n\n    def dfs(v, parent):\n        visited[v] = True\n        for u in adj[v]:\n            if not visited[u]:\n                dfs(u, v)\n    dfs(0, -1)\n    if not all(visited):\n        print(-1)\n        return\n    def bfs(v):\n        visited = [False]*n\n        q = [v]\n        visited[v] = True\n        while q:\n            v = q.pop(0)\n            for u in adj[v]:\n                if not visited[u]:\n                    visited[u] = True\n                    q.append(u)\n        return visited\n    visited = bfs(0)\n    if not all(visited):\n        print(-1)\n        return\n    print(n-1)\n",
    "14": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res ^= a[i] + a[j]\n    print(res)\n",
    "15": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res ^= a[i] + a[j]\n    print(res)\n",
    "16": "\n    n, k = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if arr[i] <= k:\n            k -= arr[i]\n            ans += 1\n        else:\n            break\n    print(ans)\n",
    "17": "\n    n, k = map(int, input().split())\n    prices = list(map(int, input().split()))\n    prices.sort()\n    count = 0\n    for i in prices:\n        if k - i >= 0:\n            count += 1\n            k -= i\n        else:\n            break\n    print(count)\n",
    "18": "\n    count = 0\n    for i in range(len(ar)-1):\n        if ar[i]+1 == ar[i+1]:\n            count += 1\n    return count\n\n#clever\ndef pairs(ar):\n    return sum(abs(ar[i]-ar[i+1])==1 for i in range(len(ar)-1))",
    "19": "\n    count = 0\n    for i in range(len(ar)-1):\n        if ar[i]+1 == ar[i+1]:\n            count += 1\n    return count"
}