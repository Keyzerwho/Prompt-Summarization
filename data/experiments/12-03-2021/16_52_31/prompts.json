{
    "0": "Python 3\n\"\"\"\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\n\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\n-----General Statement:-----\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Discussion:-----\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou have an array A of size N containing only positive numbers. Find maximum possible value of A[i]%A[j] where 1<=i,j<=N. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou have an array A of size N containing only positive numbers. You have to output the maximum possible value of A[i]%A[j] where 1<=i,j<=N. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n-----Explanation-----\nThere will be four values, A[0]%A[0] = 0, A[0]%A[1]=1, A[1]%A[0]=0, A[1]%A[1]=0, and hence the output will be the maximum among them all, that is 1.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nGiven 2 strings, if there is a substring that appears in both strings, return true. Otherwise, return false. We only count substrings that are > 1 in length. Lowercase and uppercase letters are the same.\n\n#Examples:\n\nInput:\nSubstringTest(\"Something\",\"Fun\");\nOutput:\nfalse\nExplanation:\n\"Something\" and \"Fun\" contain no common substrings.\n\nInput:\nSubstringTest(\"Something\",\"Home\");\nOutput:\ntrue\nExplanation:\nBoth of the inputs contain the substring \"me\".\n\"\"\"\ndef substring_test(str1, str2):",
    "5": "Python 3\n\"\"\"\nGiven 2 strings, your job is to find out if there is a substring that appears in both strings. You will return true if you find a substring that appears in both strings, or false if you do not. We only care about substrings that are longer than one letter long.\n\n#Examples:\n\n````\n*Example 1*\nSubstringTest(\"Something\",\"Fun\"); //Returns false\n\n*Example 2*\nSubstringTest(\"Something\",\"Home\"); //Returns true\n````\nIn the above example, example 2 returns true because both of the inputs contain the substring \"me\". (so**ME**thing and ho**ME**)  \nIn example 1, the method will return false because something and fun contain no common substrings. (We do not count the 'n' as a substring in this Kata because it is only 1 character long)\n\n#Rules:\nLowercase and uppercase letters are the same. So 'A' == 'a'.  \nWe only count substrings that are > 1 in length.  \n\n#Input:\nTwo strings with both lower and upper cases.\n#Output:\nA boolean value determining if there is a common substring between the two inputs.\n\"\"\"\ndef substring_test(str1, str2):",
    "6": "Python 3\n\"\"\"\nYou are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1 \u2264 i < j \u2264 N.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each description consists of a single integer N.\nThe second line of each description contains N space separated integers - a1, a2, ..., aN respectively.\n\n-----Output-----\nFor each test case, output a single line containing a single integer - the smallest possible sum for the corresponding test case.\n\n-----Constraints-----\n\n- T = 105, N = 2 : 13 points.\n- T = 105, 2 \u2264 N \u2264 10 : 16 points.\n- T = 1000, 2 \u2264 N \u2264 100 : 31 points.\n- T = 10, 2 \u2264 N \u2264 105 : 40 points.\n- 1 \u2264 ai \u2264 106\n\n-----Example-----\nInput:\n1\n4\n5 1 3 4\n\nOutput:\n4\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1 \u2264 i < j \u2264 N.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \nThe first line of each description consists of a single integer N.\nThe second line of each description contains N space separated integers - a1, a2, ..., aN respectively.\n\n-----Output-----\nFor each test case, output a single line containing a single integer - the smallest possible sum for the corresponding test case.\n\n-----Constraints-----\n\n- T = 105, N = 2 : 13 points.\n- T = 105, 2 \u2264 N \u2264 10 : 16 points.\n- T = 1000, 2 \u2264 N \u2264 100 : 31 points.\n- T = 10, 2 \u2264 N \u2264 105 : 40 points.\n- 1 \u2264 ai \u2264 106\n\n-----Example-----\nInput:\n1\n4\n5 1 3 4\n\nOutput:\n4\n\n-----Explanation-----\nHere we pick a2 and a3. Their sum equals to 1 + 3 = 4.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven a string S, you have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated.\n\nExample:\nInput:\n'CodeWars'\nOutput\n'CdWr oeas'\n\"\"\"\ndef sort_my_string(s):",
    "9": "Python 3\n\"\"\"\nGiven a string S.\nYou have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated (see sample below)\n\nNote: \n0 is considered to be an even index. \nAll input strings are valid with no spaces\n\n\ninput:\n'CodeWars'\n\noutput\n'CdWr oeas'\n\nS[0] = 'C'\nS[1] = 'o'\nS[2] = 'd'\nS[3] = 'e'\nS[4] = 'W'\nS[5] = 'a'\nS[6] = 'r'\nS[7] = 's'\n\n\nEven indices 0, 2, 4, 6, so we have 'CdWr' as the first group\nodd ones are 1, 3, 5, 7, so the second group is 'oeas'\nAnd the final string to return is 'Cdwr oeas'\n\nEnjoy.\n\"\"\"\ndef sort_my_string(s):",
    "10": "Python 3\n\"\"\"\nA icecream costs 5 Rs. Only coin of Rs 5 ,Rs 10 and Rs 15 can be used to buy icecream. There are N number of buyer. In beginning, shopkeeper does not have any money. Icecream can be bought only if shopkeeper can return the change exactly. Write a code to check whether the shopkeeper can sell the icecream or not.\n\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if all people can be served or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $a_i \\in \\{5, 10, 15\\}$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $a_i \\in \\{5, 10\\}$ for each valid $i$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n3\n2\n5 10\n2\n10 5\n2\n5 15\n\n-----Example Output-----\nYES\nNO\nNO\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nChef owns an icecream shop in Chefland named scoORZ. There are only three types of coins in Chefland: Rs. 5, Rs. 10 and Rs. 15. An icecream costs Rs. 5.\nThere are $N$ people (numbered $1$ through $N$) standing in a queue to buy icecream from scoORZ. Each person wants to buy exactly one icecream. For each valid $i$, the $i$-th person has one coin with value $a_i$. It is only possible for someone to buy an icecream when Chef can give them back their change exactly \u2015 for example, if someone pays with a Rs. 10 coin, Chef needs to have a Rs. 5 coin that he gives to this person as change.\nInitially, Chef has no money. He wants to know if he can sell icecream to everyone in the queue, in the given order. Since he is busy eating his own icecream, can you tell him if he can serve all these people?\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $a_1, a_2, \\ldots, a_N$.\n\n-----Output-----\nFor each test case, print a single line containing the string \"YES\" if all people can be served or \"NO\" otherwise (without quotes).\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 10^3$\n- $a_i \\in \\{5, 10, 15\\}$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (40 points): $a_i \\in \\{5, 10\\}$ for each valid $i$\nSubtask #2 (60 points): original constraints\n\n-----Example Input-----\n3\n2\n5 10\n2\n10 5\n2\n5 15\n\n-----Example Output-----\nYES\nNO\nNO\n\n-----Explanation-----\nExample case 1: The first person pays with a Rs. 5 coin. The second person pays with a Rs. 10 coin and Chef gives them back the Rs. 5 coin (which he got from the first person) as change.\nExample case 2: The first person already cannot buy an icecream because Chef cannot give them back Rs. 5.\nExample case 3: The first person pays with a Rs. 5 coin. The second person cannot buy the icecream because Chef has only one Rs. 5 coin, but he needs to give a total of Rs. 10 back as change.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a string S containing only lowercase characters. Rearrange the string and print minimum number of characters needed to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a string S containing only lowercase characters. \nYou can rearrange the string and you have to print minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nA spoonerism is a spoken phrase in which the first letters of two of the words are swapped around.\n\nYour task is to create a function that takes a string of two words separated by a space, and returns a spoonerism of those words in a string.\n\nExample:\nInput: \"not picking\"\nOutput: \"pot nicking\"\n\"\"\"\ndef spoonerize(words):",
    "15": "Python 3\n\"\"\"\nA spoonerism is a spoken phrase in which the first letters of two of the words are swapped around, often with amusing results.\n\nIn its most basic form a spoonerism is a two word phrase in which only the first letters of each word are swapped:\n\n```\"not picking\" --> \"pot nicking\"```\n\nYour task is to create a function that takes a string of two words, separated by a space: ```words``` and returns a spoonerism of those words in a string, as in the above example.\n\nNOTE: All input strings will contain only two words.  Spoonerisms can be more complex.  For example, three-word phrases in which the first letters of the first and last words are swapped: ```\"pack of lies\" --> \"lack of pies\"``` or more than one letter from a word is swapped: ```\"flat battery --> \"bat flattery\"```\nYou are NOT expected to account for these, or any other nuances involved in spoonerisms.\n\nOnce you have completed this kata, a slightly more challenging take on the idea can be found here: http://www.codewars.com/kata/56dbed3a13c2f61ae3000bcd\n\"\"\"\ndef spoonerize(words):",
    "16": "Python 3\n\"\"\"\nComplete the function that determines the score of a hand in the card game Blackjack and return the highest score of the cards that is less than or equal to 21. If there is no score less than or equal to 21 return the smallest score more than 21.\n\nNumber cards count as their face value. Jack, Queen and King count as 10. An Ace can be counted as either 1 or 11.\n\nExamples:\nInput:\n[\"A\"]\nOutput:\n11\n\nInput:\n[\"A\", \"J\"]\nOutput:\n21\n\nInput:\n[\"A\", \"10\", \"A\"]\nOutput:\n12\n\nInput:\n[\"5\", \"3\", \"7\"]\nOutput:\n15\n\nInput:\n[\"5\", \"4\", \"3\", \"2\", \"A\", \"K\"]\nOutput:\n25\n\"\"\"\ndef score_hand(cards):",
    "17": "Python 3\n\"\"\"\nComplete the function that determines the score of a hand in the card game [Blackjack](https://en.wikipedia.org/wiki/Blackjack) (aka 21).\n\nThe function receives an array of strings that represent each card in the hand (`\"2\"`, `\"3\",` ..., `\"10\"`, `\"J\"`, `\"Q\"`, `\"K\"` or `\"A\"`) and should return the score of the hand (integer).\n\n~~~if:c\nNote: in C the function receives a character array with the card `10` represented by the character `T`.\n~~~\n\n\n### Scoring rules:\n\nNumber cards count as their face value (2 through 10). Jack, Queen and King count as 10. An Ace can be counted as either 1 or 11.\n\nReturn the highest score of the cards that is less than or equal to 21. If there is no score less than or equal to 21 return the smallest score more than 21.\n\n\n## Examples\n\n```\n[\"A\"]                           ==>  11\n[\"A\", \"J\"]                      ==>  21\n[\"A\", \"10\", \"A\"]                ==>  12\n[\"5\", \"3\", \"7\"]                 ==>  15\n[\"5\", \"4\", \"3\", \"2\", \"A\", \"K\"]  ==>  25\n```\n\"\"\"\ndef score_hand(cards):",
    "18": "Python 3\n\"\"\"\nThere are two arrays of integers $a$ and $b$ of length $n$. It turned out that array $a$ contains only elements from the set $\\{-1, 0, 1\\}$.\n\nYou can perform the following sequence of operations any number of times:  Choose any pair of indexes $(i, j)$ such that $1 \\le i < j \\le n$. It is possible to choose the same pair $(i, j)$ more than once.   Add $a_i$ to $a_j$. In other words, $j$-th element of the array becomes equal to $a_i + a_j$. \n\nYou wants to predict if it is possible to apply some number (zero or more) of these operations to the array $a$ so that it becomes equal to array $b$.\n\n\n-----Input-----\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) \u00a0\u2014 the length of arrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-1 \\le a_i \\le 1$) \u00a0\u2014 elements of array $a$. There can be duplicates among elements.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($-10^9 \\le b_i \\le 10^9$) \u00a0\u2014 elements of array $b$. There can be duplicates among elements.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output one line containing \"YES\" if it's possible to make arrays $a$ and $b$ equal by performing the described operations, or \"NO\" if it's impossible.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n\nOutput\nYES\nNO\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nOnce again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:\n\nThere are two arrays of integers $a$ and $b$ of length $n$. It turned out that array $a$ contains only elements from the set $\\{-1, 0, 1\\}$.\n\nAnton can perform the following sequence of operations any number of times:  Choose any pair of indexes $(i, j)$ such that $1 \\le i < j \\le n$. It is possible to choose the same pair $(i, j)$ more than once.   Add $a_i$ to $a_j$. In other words, $j$-th element of the array becomes equal to $a_i + a_j$. \n\nFor example, if you are given array $[1, -1, 0]$, you can transform it only to $[1, -1, -1]$, $[1, 0, 0]$ and $[1, -1, 1]$ by one operation.\n\nAnton wants to predict if it is possible to apply some number (zero or more) of these operations to the array $a$ so that it becomes equal to array $b$. Can you help him?\n\n\n-----Input-----\n\nEach test contains multiple test cases. \n\nThe first line contains the number of test cases $t$ ($1 \\le t \\le 10000$). The description of the test cases follows.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 10^5$) \u00a0\u2014 the length of arrays.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-1 \\le a_i \\le 1$) \u00a0\u2014 elements of array $a$. There can be duplicates among elements.\n\nThe third line of each test case contains $n$ integers $b_1, b_2, \\dots, b_n$ ($-10^9 \\le b_i \\le 10^9$) \u00a0\u2014 elements of array $b$. There can be duplicates among elements.\n\nIt is guaranteed that the sum of $n$ over all test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, output one line containing \"YES\" if it's possible to make arrays $a$ and $b$ equal by performing the described operations, or \"NO\" if it's impossible.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n5\n3\n1 -1 0\n1 1 -2\n3\n0 1 1\n0 2 2\n2\n1 0\n1 41\n2\n-1 0\n-1 -41\n5\n0 1 -1 1 -1\n1 1 -1 1 -1\n\nOutput\nYES\nNO\nYES\nYES\nNO\n\n\n\n-----Note-----\n\nIn the first test-case we can choose $(i, j)=(2, 3)$ twice and after that choose $(i, j)=(1, 2)$ twice too. These operations will transform $[1, -1, 0] \\to [1, -1, -2] \\to [1, 1, -2]$\n\nIn the second test case we can't make equal numbers on the second position.\n\nIn the third test case we can choose $(i, j)=(1, 2)$ $41$ times. The same about the fourth test case.\n\nIn the last lest case, it is impossible to make array $a$ equal to the array $b$.\n\"\"\"\ndef code():"
}