{
    "0": "Python 3\n\"\"\"\nMarmot brought Mole n ordered piles of worms such that i-th pile contains a_{i} worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a_1, worms in second pile are labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5), the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^3, a_1 + a_2 + ... + a_{n} \u2264 10^6), where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 \u2264 m \u2264 10^5), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q_1, q_2, ..., q_{m} (1 \u2264 q_{i} \u2264 a_1 + a_2 + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number q_{i} is.\n\n\n-----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIt is lunch time for Mole. His friend, Marmot, prepared him a nice game for lunch.\n\nMarmot brought Mole n ordered piles of worms such that i-th pile contains a_{i} worms. He labeled all these worms with consecutive integers: worms in first pile are labeled with numbers 1 to a_1, worms in second pile are labeled with numbers a_1 + 1 to a_1 + a_2 and so on. See the example for a better understanding.\n\nMole can't eat all the worms (Marmot brought a lot) and, as we all know, Mole is blind, so Marmot tells him the labels of the best juicy worms. Marmot will only give Mole a worm if Mole says correctly in which pile this worm is contained.\n\nPoor Mole asks for your help. For all juicy worms said by Marmot, tell Mole the correct answers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5), the number of piles.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^3, a_1 + a_2 + ... + a_{n} \u2264 10^6), where a_{i} is the number of worms in the i-th pile.\n\nThe third line contains single integer m (1 \u2264 m \u2264 10^5), the number of juicy worms said by Marmot.\n\nThe fourth line contains m integers q_1, q_2, ..., q_{m} (1 \u2264 q_{i} \u2264 a_1 + a_2 + ... + a_{n}), the labels of the juicy worms.\n\n\n-----Output-----\n\nPrint m lines to the standard output. The i-th line should contain an integer, representing the number of the pile where the worm labeled with the number q_{i} is.\n\n\n-----Examples-----\nInput\n5\n2 7 3 4 9\n3\n1 25 11\n\nOutput\n1\n5\n3\n\n\n\n-----Note-----\n\nFor the sample input:\n\n  The worms with labels from [1, 2] are in the first pile.  The worms with labels from [3, 9] are in the second pile.  The worms with labels from [10, 12] are in the third pile.  The worms with labels from [13, 16] are in the fourth pile.  The worms with labels from [17, 25] are in the fifth pile.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nThe input given are lists of linear equations.\n\nYou need to write a method ```solve``` that accepts the input and outputs a dictionary with a value for each variable in the equations. \n\nIf the system does not have a unique solution, return ```null```.\n\nFor example :  \n  \n\"2x + 4y + 6z = 18\"  \n\"3y + 3z = 6\"  \n\"x + 2y = z - 3\"\n  \nshould result in a map :  \n  \nx = 2  \ny = -1  \nz = 3 \n\"\"\"\ndef solve(*equations):",
    "3": "Python 3\n\"\"\"\nTo almost all of us solving sets of linear equations is quite obviously the most exciting bit of linear algebra. \nBenny does not agree though and wants to write a quick program to solve his homework problems for him. \nUnfortunately Benny's lack of interest in linear algebra means he has no real clue on how to go about this. \nFortunately, you can help him!\n\nWrite a method ```solve``` that accepts a list of linear equations that your method will have to solve. \nThe output should be a map (a `Map` object in JavaScript) with a value for each variable in the equations. \nIf the system does not have a unique solution (has infinitely many solutions or is unsolvable), return ```null``` (`None` in python).\n\nFor example :  \n  \n\"2x + 4y + 6z = 18\"  \n\"3y + 3z = 6\"  \n\"x + 2y = z - 3\"\n  \nshould result in a map :  \n  \nx = 2  \ny = -1  \nz = 3  \n  \nPossible input equations have the following rules:  \n-   Only the plus and minus operators are used on both the left and right hand side of the equation.  \n-   Both sides of the equation can have variables; One variable can appear in multiple terms, on both sides.\n-   Variable names are strings of arbitrary length.  \n-   All coefficients are integers and generally fall within the range of -150 to 150, with a few ranging from -1000 to 1000. Free terms are integers in range -20000 to 20000.  \n-   Equations do not necessarily have variables.  \n-   Equations have exactly one operator (+ or -) between terms.  \n\n\nComparisons are performed with accuracy of `1e-6`.\n\n**Note on numerical stability:**\n\nThere are many possible ways to solve a system of linear equations. One group of such algorithms is based on reduction and elimination methods. If you are going to use any of these, remember that such algorithms are in general *numerically unstable*, i.e. division operations repeated over and over introduce inaccuracies which accumulate from row to row. As a result it might occur that some value which is expected to be zero is actually larger, for example, `2.5e-10`. Such inaccuracies tend to be bigger in large equation systems, and random tests check systems of up to 26 equations. If it happens that small tests pass for you, and large tests fail, it probably means that you did not account for inaccuracies correctly.\nAlso note that tests do not depend on any reference solution, so the way how test cases are generated _is numerically stable_ - the only source of inaccuracies is your solution, and you need to account for it.\n\n```if:python\n___Note for python users:___\n\n`numpy` module has been disabled, so that the task matches the one of the other languages. There is an anti-cheat measure about that, so you won't be able to import some other modules too (either way, you shouldn't need any module to solve this kata...)\n```\n\"\"\"\ndef solve(*equations):",
    "4": "Python 3\n\"\"\"\n# Task\n Some people start with the same positive amount of money  and the money will be redistributed. \n\n Find out if the given end-state of amounts is possible.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "5": "Python 3\n\"\"\"\n# Task\n You have some people who are betting money, and they all start with the same amount of money (this number>0). \n\n Find out if the given end-state of amounts is possible after the betting is over and money is redistributed.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "6": "Python 3\n\"\"\"\nYou need to write a program that, given the sequence a_{i}, build two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree.\n\n\n-----Input-----\n\nThe first line contains a single integer h (2 \u2264 h \u2264 10^5)\u00a0\u2014 the height of the tree.\n\nThe second line contains h + 1 integers\u00a0\u2014 the sequence a_0, a_1, ..., a_{h} (1 \u2264 a_{i} \u2264 2\u00b710^5). The sum of all a_{i} does not exceed 2\u00b710^5. It is guaranteed that there is at least one tree matching this sequence.\n\n\n-----Output-----\n\nIf there is only one tree matching this sequence, print \"perfect\".\n\nOtherwise print \"ambiguous\" in the first line. In the second and in the third line print descriptions of two trees in the following format: in one line print $\\sum_{i = 0}^{h} a_{i}$ integers, the k-th of them should be the parent of vertex k or be equal to zero, if the k-th vertex is the root.\n\nThese treese should be non-isomorphic and should match the given sequence.\n\n\n-----Examples-----\nInput\n2\n1 1 1\n\nOutput\nperfect\n\nInput\n2\n1 2 2\n\nOutput\nambiguous\n0 1 1 3 3\n0 1 1 3 2\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nSasha is taking part in a programming competition. In one of the problems she should check if some rooted trees are isomorphic or not. She has never seen this problem before, but, being an experienced participant, she guessed that she should match trees to some sequences and then compare these sequences instead of trees. Sasha wants to match each tree with a sequence a_0, a_1, ..., a_{h}, where h is the height of the tree, and a_{i} equals to the number of vertices that are at distance of i edges from root. \n\nUnfortunately, this time Sasha's intuition was wrong, and there could be several trees matching the same sequence. To show it, you need to write a program that, given the sequence a_{i}, builds two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree.\n\nTwo rooted trees are isomorphic, if you can reenumerate the vertices of the first one in such a way, that the index of the root becomes equal the index of the root of the second tree, and these two trees become equal.\n\nThe height of a rooted tree is the maximum number of edges on a path from the root to any other vertex.\n\n\n-----Input-----\n\nThe first line contains a single integer h (2 \u2264 h \u2264 10^5)\u00a0\u2014 the height of the tree.\n\nThe second line contains h + 1 integers\u00a0\u2014 the sequence a_0, a_1, ..., a_{h} (1 \u2264 a_{i} \u2264 2\u00b710^5). The sum of all a_{i} does not exceed 2\u00b710^5. It is guaranteed that there is at least one tree matching this sequence.\n\n\n-----Output-----\n\nIf there is only one tree matching this sequence, print \"perfect\".\n\nOtherwise print \"ambiguous\" in the first line. In the second and in the third line print descriptions of two trees in the following format: in one line print $\\sum_{i = 0}^{h} a_{i}$ integers, the k-th of them should be the parent of vertex k or be equal to zero, if the k-th vertex is the root.\n\nThese treese should be non-isomorphic and should match the given sequence.\n\n\n-----Examples-----\nInput\n2\n1 1 1\n\nOutput\nperfect\n\nInput\n2\n1 2 2\n\nOutput\nambiguous\n0 1 1 3 3\n0 1 1 3 2\n\n\n\n-----Note-----\n\nThe only tree in the first example and the two printed trees from the second example are shown on the picture:\n\n$88$\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nWrite the code to convert the hexadecimal number into its corresponding decimal value.\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given number\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nMs. E.T. came from planet Hex. She has 8 fingers in each hand which makes her count in hexadecimal way. When she meets you, she tells you that she came from 7E light years from the planet Earth. You see she means that it is 126 light years far away and she is telling you the numbers in hexadecimal. Now, you are in trouble to understand what those numbers really mean. Therefore, you have to convert the hexadecimal numbers to decimals.\n\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given nunmber\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given an array of length $n$ and you want to split it into several non-empty sets. The value of $i$-th element is $a_i$. You want to generate the maximum number of sets from the list. There is a restriction for each set: the number of values in the team multiplied by the minimum value among all values in the team must be at least $x$.\n\nEach value should belong to at most one set. Some value may be left without being part of any set.\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 10^5; 1 \\le x \\le 10^9$)\u00a0\u2014 the number of values and the restriction of sets respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the value of the $i$-th element.\n\nThe sum of $n$ over all inputs does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the maximum number of sets that you can generate. \n\n\n-----Example-----\nInput\n3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n\nOutput\n2\n1\n0\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere are $n$ programmers that you want to split into several non-empty teams. The skill of the $i$-th programmer is $a_i$. You want to assemble the maximum number of teams from them. There is a restriction for each team: the number of programmers in the team multiplied by the minimum skill among all programmers in the team must be at least $x$.\n\nEach programmer should belong to at most one team. Some programmers may be left without a team.\n\nCalculate the maximum number of teams that you can assemble.\n\n\n-----Input-----\n\nThe first line contains the integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $x$ ($1 \\le n \\le 10^5; 1 \\le x \\le 10^9$)\u00a0\u2014 the number of programmers and the restriction of team skill respectively.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the skill of the $i$-th programmer.\n\nThe sum of $n$ over all inputs does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the maximum number of teams that you can assemble. \n\n\n-----Example-----\nInput\n3\n5 10\n7 11 2 9 5\n4 8\n2 4 2 3\n4 11\n1 3 3 7\n\nOutput\n2\n1\n0\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n# Task\n\nGiven a list of digits, return the smallest number that could be formed from these digits, using the digits only once (ignore duplicates).\n___\n\n# Notes:\n\nOnly positive integers will be passed to the function (> 0 ), no negatives or zeros.\n___\n# Input >> Output Examples \n\n```\nminValue ({1, 3, 1})  ==> return (13)\n```\n## Explanation:\n**_(13)_** *is the minimum number could be formed from* **_{1, 3, 1}_** , *Without duplications*  \n___\n```\nminValue({5, 7, 5, 9, 7})  ==> return (579)\n```\n## Explanation:\n**_(579)_** *is the minimum number could be formed from* **_{5, 7, 5, 9, 7}_** , *Without duplications* \n___\n\n```\nminValue({1, 9, 3, 1, 7, 4, 6, 6, 7}) return  ==> (134679)\n```\n## Explanation:\n**_(134679)_** *is the minimum number could be formed from* **_{1, 9, 3, 1, 7, 4, 6, 6, 7}_** , *Without duplications* \n\n\n\"\"\"\ndef min_value(digits):",
    "13": "Python 3\n\"\"\"\n# Task\n\n**_Given_** a **_list of digits_**, *return the **_smallest number_** that could be formed from these digits, using the digits only once (ignore duplicates).* \n___\n\n# Notes:\n\n* Only **_positive integers_** *will be passed to the function (> 0 ), no negatives or zeros.*\n___\n# Input >> Output Examples \n\n```\nminValue ({1, 3, 1})  ==> return (13)\n```\n## Explanation:\n**_(13)_** *is the minimum number could be formed from* **_{1, 3, 1}_** , *Without duplications*  \n___\n```\nminValue({5, 7, 5, 9, 7})  ==> return (579)\n```\n## Explanation:\n**_(579)_** *is the minimum number could be formed from* **_{5, 7, 5, 9, 7}_** , *Without duplications* \n___\n\n```\nminValue({1, 9, 3, 1, 7, 4, 6, 6, 7}) return  ==> (134679)\n```\n## Explanation:\n**_(134679)_** *is the minimum number could be formed from* **_{1, 9, 3, 1, 7, 4, 6, 6, 7}_** , *Without duplications* \n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef min_value(digits):",
    "14": "Python 3\n\"\"\"\nFor two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nWrite a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list. Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\"\"\"\ndef getMatrixProduct(a, b):",
    "15": "Python 3\n\"\"\"\nIn mathematics, a matrix (plural matrices) is a rectangular array of numbers. Matrices have many applications in programming, from performing transformations in 2D space to machine learning. \n\nOne of the most useful operations to perform on matrices is matrix multiplication, which takes a pair of matrices and produces another matrix \u2013 known as the dot product. Multiplying matrices is very different to multiplying real numbers, and follows its own set of rules. \n\nUnlike multiplying real numbers, multiplying matrices is non-commutative: in other words, multiplying matrix ```a``` by matrix ```b``` will not give the same result as multiplying matrix ```b``` by matrix ```a```.\n\nAdditionally, not all pairs of matrix can be multiplied. For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nThere are many introductions to matrix multiplication online, including at Khan Academy, and in the classic MIT lecture series by Herbert Gross. \n\nTo complete this kata, write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\nIt can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points.\n\"\"\"\ndef getMatrixProduct(a, b):",
    "16": "Python 3\n\"\"\"\nYou are given an array consisting of n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step you selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image] \n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after your algorithm finishes.\n\nsummary : \n\n\n\n-----Input-----\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers x_{i} (1 \u2264 x_{i} \u2264 n), the indices of cells for which it is necessary to output their content after your algorithm finishes.\n\n\n-----Output-----\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after your algorithm finishes.\n\n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8, 3, 11, 4, 9, 5, 13, 6, 10, 7].\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nDima is a beginner programmer. During his working process, he regularly has to repeat the following operation again and again: to remove every second element from the array. One day he has been bored with easy solutions of this problem, and he has come up with the following extravagant algorithm.\n\nLet's consider that initially array contains n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step Dima selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image] \n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after Dima's algorithm finishes.\n\n\n-----Input-----\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers x_{i} (1 \u2264 x_{i} \u2264 n), the indices of cells for which it is necessary to output their content after Dima's algorithm finishes.\n\n\n-----Output-----\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after Dima's algorithm finishes.\n\n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8, 3, 11, 4, 9, 5, 13, 6, 10, 7].\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYour task will be to return the count of pairs that have consecutive numbers as follows:\n```Haskell\npairs([1,2,5,8,-4,-3,7,6,5]) = 3\nThe pairs are selected as follows [(1,2),(5,8),(-4,-3),(7,6),5]\n--the first pair is (1,2) and are consecutive; Count = 1\n--the second pair is (5,8) and are not consecutive\n--the third pair is (-4,-3), consecutive. Count = 2\n--the fourth pair is (7,6), consecutive. Count = 3. \n--the last digit has no pair, so we ignore.\n```\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"\ndef pairs(ar):",
    "19": "Python 3\n\"\"\"\nIn this Kata your task will be to return the count of pairs that have consecutive numbers as follows:\n```Haskell\npairs([1,2,5,8,-4,-3,7,6,5]) = 3\nThe pairs are selected as follows [(1,2),(5,8),(-4,-3),(7,6),5]\n--the first pair is (1,2) and the numbers in the pair are consecutive; Count = 1\n--the second pair is (5,8) and are not consecutive\n--the third pair is (-4,-3), consecutive. Count = 2\n--the fourth pair is (7,6), also consecutive. Count = 3. \n--the last digit has no pair, so we ignore.\n```\n\nMore examples in the test cases. \n\nGood luck!\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"\ndef pairs(ar):"
}