{
    "0": "Python 3\n\"\"\"\nYou are given numbers m and n.\n\nYou are given an array of strings of only 0's and 1's.\n\nReturn the maximum number of strings that can be formed by using less than (m+1) 0's and (n+1) 1's in total.\n\nNote:\n\nThe given numbers m and n will both not exceed 100\nThe size of given string array won't exceed 600.\n\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using less than 6 0s and 4 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\n\n\nExample 2:\n\nInput: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\"\"\"\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:",
    "1": "Python 3\n\"\"\"\nIn the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\nFor now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.\n\n\nNow your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.\n\n\n\nNote:\n\nThe given numbers of 0s and 1s will both not exceed 100\nThe size of given string array won't exceed 600.\n\n\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\n\n\n\nExample 2:\n\nInput: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\"\"\"\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:",
    "2": "Python 3\n\"\"\"\n\nYou are given a text string and you have to print the words in the given text in lexicographic order. Each word should appear exactly once in your list. You can ignore the case. There should be no uppercase letters in the output.\n\n\n\n-----Input format-----\n- The first line of input contains a single integer $N$, indicating the number of lines in the input.\n- This is followed by $N$ lines of input text.\n\n-----Output format-----\n- The first line of output contains a single integer $M$ indicating the number of distinct words in the given text. \n- The next $M$ lines list out these words in lexicographic order.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- There are at most 80 characters in each line.\n- There are at the most 1000 distinct words in the given text.\n\n-----Sample Input-----\n2\nThis is a sample piece of text to illustrate this \nproblem. \n\n-----Sample Output-----\n10\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIn this problem the input will consist of a number of lines of English text consisting of the letters of the English alphabet, the punctuation marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white space characters (blank, newline).\nYour task is print the words in the text in lexicographic order (that is, dictionary order). Each word should appear exactly once in your list. You can ignore the case (for instance, \"The\" and \"the\" are to be treated as the same word). There should be no uppercase letters in the output.\nFor example, consider the following candidate for the input text: \nThis is a sample piece of text to illustrate this \nproblem.\n\nThe corresponding output would read as:\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\n-----Input format-----\n- The first line of input contains a single integer $N$, indicating the number of lines in the input.\n- This is followed by $N$ lines of input text.\n\n-----Output format-----\n- The first line of output contains a single integer $M$ indicating the number of distinct words in the given text. \n- The next $M$ lines list out these words in lexicographic order.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- There are at most 80 characters in each line.\n- There are at the most 1000 distinct words in the given text.\n\n-----Sample Input-----\n2\nThis is a sample piece of text to illustrate this \nproblem. \n\n-----Sample Output-----\n10\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given an integer N. if N is less than 10 then display \"Thanks for helping Chef!\" otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nWrite a program, which takes an integer N and if the number is less than 10 then display \"Thanks for helping Chef!\" otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 5000$) \u2014 the number of voters.\n\nThe next $n$ lines contains the description of voters. $i$-th line contains two integers $m_i$ and $p_i$ ($1 \\le p_i \\le 10^9, 0 \\le m_i < n$).\n\nIt is guaranteed that the sum of all $n$ over all test cases does not exceed $5000$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Example-----\nInput\n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput\n8\n0\n7\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThe only difference between easy and hard versions is constraints.\n\nNow elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.\n\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 5000$) \u2014 the number of voters.\n\nThe next $n$ lines contains the description of voters. $i$-th line contains two integers $m_i$ and $p_i$ ($1 \\le p_i \\le 10^9, 0 \\le m_i < n$).\n\nIt is guaranteed that the sum of all $n$ over all test cases does not exceed $5000$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Example-----\nInput\n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput\n8\n0\n7\n\n\n\n-----Note-----\n\nIn the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: ${3} \\rightarrow {1, 3} \\rightarrow {1, 2, 3}$.\n\nIn the second example you don't need to buy votes. The set of people voting for you will change as follows: ${1} \\rightarrow {1, 3, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 5, 6, 7} \\rightarrow {1, 2, 3, 4, 5, 6, 7}$.\n\nIn the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: ${2, 5} \\rightarrow {1, 2, 3, 4, 5} \\rightarrow {1, 2, 3, 4, 5, 6}$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given a regular polygon with $2 \\cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 200$)\u00a0\u2014 the number of test cases.\n\nNext $T$ lines contain descriptions of test cases\u00a0\u2014 one per line. Each line contains single even integer $n$ ($2 \\le n \\le 200$). Don't forget you need to embed $2n$-gon, not an $n$-gon.\n\n\n-----Output-----\n\nPrint $T$ real numbers\u00a0\u2014 one per test case. For each test case, print the minimum length of a side of the square $2n$-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$.\n\n\n-----Example-----\nInput\n3\n2\n4\n200\n\nOutput\n1.000000000\n2.414213562\n127.321336469\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThe statement of this problem is the same as the statement of problem C2. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd.\n\nYou are given a regular polygon with $2 \\cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 200$)\u00a0\u2014 the number of test cases.\n\nNext $T$ lines contain descriptions of test cases\u00a0\u2014 one per line. Each line contains single even integer $n$ ($2 \\le n \\le 200$). Don't forget you need to embed $2n$-gon, not an $n$-gon.\n\n\n-----Output-----\n\nPrint $T$ real numbers\u00a0\u2014 one per test case. For each test case, print the minimum length of a side of the square $2n$-gon can be embedded in. Your answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$.\n\n\n-----Example-----\nInput\n3\n2\n4\n200\n\nOutput\n1.000000000\n2.414213562\n127.321336469\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nGiven a binary string $s$ consisting of zeros and ones. Let $n$ be the length of $s$. Find the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\n\n-----Input-----\n\nThe first line contains the string $s$ ($1 \\leq |s| \\leq 300\\,000$), consisting of zeros and ones.\n\n\n-----Output-----\n\nOutput one integer: the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\n\n-----Examples-----\nInput\n010101\n\nOutput\n3\n\nInput\n11001100\n\nOutput\n0\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nToad Rash has a binary string $s$. A binary string consists only of zeros and ones.\n\nLet $n$ be the length of $s$.\n\nRash needs to find the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\nFind this number of pairs for Rash.\n\n\n-----Input-----\n\nThe first line contains the string $s$ ($1 \\leq |s| \\leq 300\\,000$), consisting of zeros and ones.\n\n\n-----Output-----\n\nOutput one integer: the number of such pairs of integers $l$, $r$ that $1 \\leq l \\leq r \\leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \\leq x, k \\leq n$, $l \\leq x < x + 2k \\leq r$, and $s_x = s_{x+k} = s_{x+2k}$.\n\n\n-----Examples-----\nInput\n010101\n\nOutput\n3\n\nInput\n11001100\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, there are three $l$, $r$ pairs we need to count: $1$, $6$; $2$, $6$; and $1$, $5$.\n\nIn the second example, there are no values $x$, $k$ for the initial string, so the answer is $0$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nCreate a function that takes a string and returns that string with the first half lowercased and the last half uppercased. If it is an odd number then 'round' it up to find which letters to uppercase. \n\nExamples:\nInput: footer\nOutput: fooBAR\n\nInput: brian\nOutput: briAN\n\"\"\"\ndef sillycase(silly):",
    "13": "Python 3\n\"\"\"\nCreate a function that takes a string and returns that\nstring with the first half lowercased and the last half uppercased.\n\neg: foobar == fooBAR\n\nIf it is an odd number then 'round' it up to find which letters to uppercase. See example below.\n\n    sillycase(\"brian\")  \n    //         --^-- midpoint  \n    //         bri    first half (lower-cased)  \n    //            AN second half (upper-cased)\n\"\"\"\ndef sillycase(silly):",
    "14": "Python 3\n\"\"\"\n\n\nYou are given an array of size N. Array can have duplicate values in it. You have to write code for the calculating the frequency of a unique value repeated in the array.\n\n-----INPUT-----\nThe first line of input contains an integer T denoting the number of test cases. T test cases follow.\n\nThe first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum.\n\nThe next line contains N spaced integers the number of contributions chef has made if he has made any.\n\n-----OUTPUT-----\n\nThe output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green.\n\n-----CONSTRAINTS-----\n1 <= T <= 25\n\n5 <= N <= 50\n\n1 <= Ai <= 50\n\n-----EXAMPLE-----Input:\n\n1\n\n7\n\n20 6 5 3 3 1 1\nOutput:\n\n1: 2\n\n3: 2\n\n5: 1\n\n6: 1\n\n20: 1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nChef is very organised in whatever he does and likes to maintain statistics of his work. Chef has expertise in web development and hence is a regular contributor on a forum. Chef sometimes makes multiple contributions in a single day.. Each day chef makes at least 1 contribution he is assigned a shade of green. The greater the number of contribution in a single day the darker shade of green he gets assigned and vice versa. Your job is to find out the number of days chef is assigned a same shade of green and print the number of times chef is assigned a unique shade of green.\n\n-----INPUT-----\nThe first line of input contains an integer T denoting the number of test cases. T test cases follow.\n\nThe first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum.\n\nThe next line contains N spaced integers the number of contributions chef has made if he has made any.\n\n-----OUTPUT-----\n\nThe output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green.\n\n-----CONSTRAINTS-----\n1 <= T <= 25\n\n5 <= N <= 50\n\n1 <= Ai <= 50\n\n-----EXAMPLE-----Input:\n\n1\n\n7\n\n20 6 5 3 3 1 1\nOutput:\n\n1: 2\n\n3: 2\n\n5: 1\n\n6: 1\n\n20: 1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nThere are n available fountains, for each fountain its beauty and cost are known. You have to build two new fountains.There are two types of money: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\n\nfind two fountains with maximum total beauty so that both can be bought at the same time.\n\n\n-----Input-----\n\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\u00a0\u2014 the number of fountains, the number of coins and diamonds.\n\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \"C\" or \"D\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\n\n\n-----Output-----\n\nPrint the maximum total beauty of exactly two fountains that can build. If two fountains can't be built, print 0.\n\n\n-----Examples-----\nInput\n3 7 6\n10 8 C\n4 3 C\n5 6 D\n\nOutput\n9\n\nInput\n2 4 5\n2 5 C\n2 1 D\n\nOutput\n0\n\nInput\n3 10 10\n5 5 C\n5 5 C\n10 11 D\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example, the first fountain can't be built because there is not enough number of coins.the third fountain with beauty 5 should be built which costs 6 diamonds. Thus the total beauty of built fountains is 9.\n\nIn the second example there are two fountains, but both of them can't be built , because  5 coins are needed for the first fountain, and there is only 4 coins.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nArkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\n\nHelp Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.\n\n\n-----Input-----\n\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\u00a0\u2014 the number of fountains, the number of coins and diamonds Arkady has.\n\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \"C\" or \"D\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\n\n\n-----Output-----\n\nPrint the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.\n\n\n-----Examples-----\nInput\n3 7 6\n10 8 C\n4 3 C\n5 6 D\n\nOutput\n9\n\nInput\n2 4 5\n2 5 C\n2 1 D\n\nOutput\n0\n\nInput\n3 10 10\n5 5 C\n5 5 C\n10 11 D\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.\n\nIn the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n# Invalid Login - Bug Fixing #11\n\nOh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!\n\n## Task\n\nsearch the password string for any injected code \nInjected code is any thing that contains `||` or `//` \nIf you find any you must return `\"Wrong username or password!\"` \n\n## Preloaded\n\nYou will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.\n\n## Usage\n\n```python\ndatabase = Database()\ndatabase.login('Timmy', 'password')\n```\n\"\"\"\ndef validate(username, password):",
    "19": "Python 3\n\"\"\"\n# Invalid Login - Bug Fixing #11\n\nOh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!\n\n## Task\n\nYour task is simple, search the password string for any injected code (Injected code is any thing that would be used to exploit flaws in the current code, so basically anything that contains `||` or `//`) if you find any you must return `\"Wrong username or password!\"` because no one likes someone trying to cheat their way in!\n\n## Preloaded\n\nYou will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.\n\n## Usage\n\n```python\ndatabase = Database()\ndatabase.login('Timmy', 'password')\n```\n\"\"\"\ndef validate(username, password):"
}