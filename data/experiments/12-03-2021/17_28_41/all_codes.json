{
    "0": "\n        ",
    "1": "\n        dp = [[0] * (n+1) for _ in range(m+1)]\n        for s in strs:\n            zero, one = s.count('0'), s.count('1')\n            for i in range(m, zero-1, -1):\n                for j in range(n, one-1, -1):\n                    dp[i][j] = max(dp[i][j], dp[i-zero][j-one]+1)\n        return dp[m][n]",
    "2": "\n    n = int(input())\n    words = []\n    for i in range(n):\n        words += input().split()\n    words = list(set(words))\n    words.sort()\n    print(len(words))\n    for word in words:\n        print(word)\n",
    "3": "\n    n = int(input())\n    words = []\n    for i in range(n):\n        words += input().split()\n    words = list(set(words))\n    words.sort()\n    print(len(words))\n    for word in words:\n        print(word)\n",
    "4": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n < 10:\n            print(\"Thanks for helping Chef!\")\n        else:\n            print(\"-1\")",
    "5": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n < 10:\n            print(\"Thanks for helping Chef!\")\n        else:\n            print(\"-1\")",
    "6": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = []\n        p = []\n        for j in range(n):\n            m_i, p_i = map(int, input().split())\n            m.append(m_i)\n            p.append(p_i)\n        m.sort()\n        p.sort()\n        cost = 0\n        for j in range(n):\n            cost += m[j] * p[j]\n        print(cost)\n",
    "7": "\n    def min_coins(m, p):\n        m.sort()\n        p.sort()\n        i = 0\n        j = 0\n        res = 0\n        while i < len(m) and j < len(p):\n            if m[i] <= p[j]:\n                res += m[i]\n                i += 1\n            else:\n                res += p[j]\n                j += 1\n        while i < len(m):\n            res += m[i]\n            i += 1\n        while j < len(p):\n            res += p[j]\n            j += 1\n        return res\n\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        m = []\n        p = []\n        for j in range(n):\n            a, b = map(int, input().split())\n            m.append(a)\n            p.append(b)\n        print(min_coins(m, p))\n",
    "8": "\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        print(n**2)\n",
    "9": "\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        print(n**2)\n",
    "10": "\n    s = input()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                for k in range(j+1, n):\n                    if s[i] == s[k] and s[j] == s[k]:\n                        count += 1\n    print(count)\n",
    "11": "\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                for k in range(j+1, n):\n                    if s[i] == s[k] and s[j] == s[k]:\n                        ans += 1\n    print(ans)\n",
    "12": "\n    half = int(len(silly)/2)\n    return silly[:half].lower() + silly[half:].upper()\n\nprint(sillycase(\"brian\"))",
    "13": "\n    mid = int(len(silly)/2)\n    return silly[:mid].lower() + silly[mid:].upper()\n\nprint(sillycase(\"brian\"))",
    "14": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        d = {}\n        for i in arr:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        for i in d:\n            print(str(i) + \": \" + str(d[i]))",
    "15": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        A.sort()\n        count = 1\n        for i in range(1, N):\n            if A[i] == A[i-1]:\n                count += 1\n            else:\n                print(str(A[i-1]) + \": \" + str(count))\n                count = 1\n        print(str(A[N-1]) + \": \" + str(count))\n",
    "16": "\n    n, c, d = map(int, input().split())\n    fountains = []\n    for i in range(n):\n        b, p, t = map(str, input().split())\n        b = int(b)\n        p = int(p)\n        if t == 'C':\n            fountains.append((b, p, 0))\n        else:\n            fountains.append((b, 0, p))\n    fountains.sort(key=lambda x: x[0], reverse=True)\n    fountains.sort(key=lambda x: x[2])\n    cost = 0\n    beauty = 0\n    for i in range(n):\n        if cost + fountains[i][1] <= c and cost + fountains[i][2] <= d:\n            cost += fountains[i][1]\n            beauty += fountains[i][0]\n    print(beauty)\n",
    "17": "\n    n, c, d = map(int, input().split())\n    fountains = []\n    for i in range(n):\n        b, p, t = map(str, input().split())\n        b = int(b)\n        p = int(p)\n        if t == \"C\":\n            fountains.append((b, p))\n        else:\n            fountains.append((b, p * d))\n    fountains.sort(key=lambda x: x[0], reverse=True)\n    fountains.sort(key=lambda x: x[1])\n    if fountains[0][1] + fountains[1][1] > c:\n        print(0)\n    else:\n        print(fountains[0][0] + fountains[1][0])\n",
    "18": "\n    database = Database()\n    return database.login(username, password)",
    "19": "\n    database = Database()\n    return database.login(username, password)"
}