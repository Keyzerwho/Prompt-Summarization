{
    "0": "Python 3\n\"\"\"\nYou are given a permutation of 1,2,...,N: p_1,p_2,...,p_N. Determine if the state where p_i=i for every i can be reached by performing the following operation any number of times:\n - Choose three elements p_{i-1},p_{i},p_{i+1} (2\\leq i\\leq N-1) such that p_{i-1}>p_{i}>p_{i+1} and reverse the order of these three.\n\n-----Constraints-----\n - 3 \\leq N \\leq 3 \u00d7 10^5\n - p_1,p_2,...,p_N is a permutation of 1,2,...,N.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\np_1\n:\np_N\n\n-----Output-----\nIf the state where p_i=i for every i can be reached by performing the operation, print Yes; otherwise, print No.\n\n-----Sample Input-----\n5\n5\n2\n1\n4\n3\n\n-----Sample Output-----\nYes\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a permutation of 1,2,...,N: p_1,p_2,...,p_N. Determine if the state where p_i=i for every i can be reached by performing the following operation any number of times:\n - Choose three elements p_{i-1},p_{i},p_{i+1} (2\\leq i\\leq N-1) such that p_{i-1}>p_{i}>p_{i+1} and reverse the order of these three.\n\n-----Constraints-----\n - 3 \\leq N \\leq 3 \u00d7 10^5\n - p_1,p_2,...,p_N is a permutation of 1,2,...,N.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\np_1\n:\np_N\n\n-----Output-----\nIf the state where p_i=i for every i can be reached by performing the operation, print Yes; otherwise, print No.\n\n-----Sample Input-----\n5\n5\n2\n1\n4\n3\n\n-----Sample Output-----\nYes\n\nThe state where p_i=i for every i can be reached as follows:\n - Reverse the order of p_1,p_2,p_3. The sequence p becomes 1,2,5,4,3.\n - Reverse the order of p_3,p_4,p_5. The sequence p becomes 1,2,3,4,5.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nImplement a function which creates a radix tree in which each node that is the only child is merged with its parent from a given list of words using dictionaries where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\nExamples:\n\nInput:\nradix_tree()\nOutput:\n{}\n\nInput:\nradix_tree(\"\")\nOutput:\n{}\n\nInput:\nradix_tree(\"\", \"\")\nOutput:\n{}\n\nInput:\nradix_tree(\"radix\", \"tree\")\nOutput:\n{\"radix\": {}, \"tree\": {}}\n\nInput:\nradix_tree(\"ape\", \"apple\")\nOutput:\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\nInput:\nradix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\nOutput:\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\nInput:\nradix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\nOutput:\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}}, \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\nInput:\nradix_tree(\"appleabcd\", \"apple\")\nOutput:\n{\"apple\": {\"abcd\": {}}}\n\"\"\"\ndef radix_tree(*words):",
    "3": "Python 3\n\"\"\"\nImplement a function which \ncreates a **[radix tree](https://en.wikipedia.org/wiki/Radix_tree)** (a space-optimized trie [prefix tree]) \nin which each node that is the only child is merged with its parent [unless a word from the input ends there]) \nfrom a given list of words \nusing dictionaries (aka hash maps or hash tables) where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\n### Examples:\n\n```python\n>>> radix_tree()\n{}\n\n>>> radix_tree(\"\")\n{}\n\n>>> radix_tree(\"\", \"\")\n{}\n\n>>> radix_tree(\"radix\", \"tree\")\n{\"radix\": {}, \"tree\": {}}\n\n>>> radix_tree(\"ape\", \"apple\")\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\n>>> radix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\n>>> radix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}},\n       \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\n>>> radix_tree(\"appleabcd\", \"apple\")\n{\"apple\": {\"abcd\": {}}}\n```\n\"\"\"\ndef radix_tree(*words):",
    "4": "Python 3\n\"\"\"\nWrite a simple regex to check if the string contains the word hello in different languages. Regex should be case insensitive to pass the tests.\n\"\"\"\ndef validate_hello(greetings):",
    "5": "Python 3\n\"\"\"\nYou received a whatsup message from an unknown number. Could it be from that girl/boy with a foreign accent you met yesterday evening?\n\nWrite a simple regex to check if the string contains the word hallo in different languages.\n\nThese are the languages of the possible people you met the night before:\n\n* hello - english\n* ciao - italian\n* salut - french\n* hallo - german\n* hola - spanish\n* ahoj - czech republic\n* czesc - polish\n\nBy the way, how cool is the czech republic hallo!!\n\n\nPS. you can assume the input is a string.\nPPS. to keep this a beginner exercise you don't need to check if the greeting is a subset of word ('Hallowen' can pass the test)\n\nPS. regex should be case insensitive to pass the tests\n\"\"\"\ndef validate_hello(greetings):",
    "6": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers and an integer $s$. It is guaranteed that $n$ is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to $s$.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1\\le n\\le 2\\cdot 10^5-1$, $1\\le s\\le 10^9$)\u00a0\u2014 the length of the array and the required value of median.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\n\nIt is guaranteed that $n$ is odd.\n\n\n-----Output-----\n\nIn a single line output the minimum number of operations to make the median being equal to $s$.\n\n\n-----Examples-----\nInput\n3 8\n6 5 8\n\nOutput\n2\nInput\n7 20\n21 15 12 11 20 19 12\n\nOutput\n6\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers and an integer $s$. It is guaranteed that $n$ is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to $s$.\n\nThe median of the array with odd length is the value of the element which is located on the middle position after the array is sorted. For example, the median of the array $6, 5, 8$ is equal to $6$, since if we sort this array we will get $5, 6, 8$, and $6$ is located on the middle position.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1\\le n\\le 2\\cdot 10^5-1$, $1\\le s\\le 10^9$)\u00a0\u2014 the length of the array and the required value of median.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\n\nIt is guaranteed that $n$ is odd.\n\n\n-----Output-----\n\nIn a single line output the minimum number of operations to make the median being equal to $s$.\n\n\n-----Examples-----\nInput\n3 8\n6 5 8\n\nOutput\n2\nInput\n7 20\n21 15 12 11 20 19 12\n\nOutput\n6\n\n\n-----Note-----\n\nIn the first sample, $6$ can be increased twice. The array will transform to $8, 5, 8$, which becomes $5, 8, 8$ after sorting, hence the median is equal to $8$.\n\nIn the second sample, $19$ can be increased once and $15$ can be increased five times. The array will become equal to $21, 20, 12, 11, 20, 20, 12$. If we sort this array we get $11, 12, 12, 20, 20, 20, 21$, this way the median is $20$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given an array $a$ of item of size $N$.Only one type of item can be chosen in a day and purchased at most 2 items of that type.Find minimum number of days in which all items are purchased.\n\n-----Input:-----\n- First-line will contain $N$, the number of item.  \n- The next line will contain $N$ space integers denoting the type of item.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nDinesh is very fond of sweets recently his aunt Riya gifted him an array $a$ of sweets of size $N$. The ith sweet is of the type $a[i]$. His mother told him that he can choose one type of sweet in a day and eat at most 2 sweets of that type. Since he has to eat all the sweets as quickly as possible because his cousins are arriving. Find out the minimum number of days in which he can eat all the sweets gifted by his aunt Riya. \n\n-----Input:-----\n- First-line will contain $N$, the number of sweets.  \n- The next line will contain $N$ space integers denoting the type of sweets.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given N values with weight attached to each value. You need to find minimum number of continuous values to be chosen such that total weight is maximum possible.\n\n-----Input:-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N.\n- The second line contains N space-separated integers A_1, A_2,......,A_N.\n\n-----Output:-----\nFor each test case, print a single line containing one integer.\n\n-----Sample Input:-----\n2\n4\n1 2 3 4\n5\n3 2 0 3 0\n\n-----Sample Output:-----\n4\n4\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nMaster Shifu is training Po to become The Dragon Warrior and as a final assignment he must obtain maximum deliciousness from dumplings. There are  $N$ plates of dumplings in front of him with deliciousness $A_1, A_2, \\ldots, A_N$, Po can choose any number of continuous plates of  dumplings. The total deliciousness is the sum of deliciousness of all the  chosen dumplings.\nWhat is the minimum number of plates he must choose so that total deliciousness is maximum possible?\nNote: Po must choose atleast one plate.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one integer.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 2 \\cdot 10^5$\n- $0 \\le A_i \\le 10^9$\n\n-----Sample Input:-----\n2\n4\n1 2 3 4\n5\n3 2 0 3 0\n\n-----Sample Output:-----\n4\n4\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nA entity can have some specialization: A or B. She/he can have no specialization, but can't have both at the same time.\n\nYou need to form a team. So the team is considered perfect if it includes at least one A, at least one B and it consists of exactly three entities.\n\nYou know that $c$ of the students are specialised in A, $m$ are in B and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both specialized in A and B at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 A, 1 B and 1 without specialization;  all three teams consist of 1 A and 2 B;  no teams can be formed;  no teams can be formed;  one team consists of 1 A, 1 B and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 A, 1 B and 1 without specialization, one consists of 2 A and 1 B and one consists of 1 A and 2 B.\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that $c$ of your students are coders, $m$ are mathematicians and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 coder, 1 mathematician and 1 without specialization;  all three teams consist of 1 coder and 2 mathematicians;  no teams can be formed;  no teams can be formed;  one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nyou are given a list of of integers for every index print the index if there is a smaller value after that index\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of indexes with a bad values in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPolycarp analyzes the prices of the new berPhone. At his disposal are the prices for $n$ last days: $a_1, a_2, \\dots, a_n$, where $a_i$ is the price of berPhone on the day $i$.\n\nPolycarp considers the price on the day $i$ to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of days with a bad price is $3$ \u2014 these are days $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$).\n\nPrint the number of days with a bad price.\n\nYou have to answer $t$ independent data sets.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of days with a bad price in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n\nTwo different numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$ can form sides of a triangle.\n\nGiven a group of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each test case, print the answer on separate lines: number of lonely numbers in group $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n3\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nIn number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.\n\nMore precisely, two different numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$ can form sides of a triangle.\n\nThree numbers $a$, $b$ and $c$ can form sides of a triangle if $a + b > c$, $b + c > a$ and $c + a > b$.\n\nIn a group of numbers, a number is lonely if it doesn't have any friends in that group.\n\nGiven a group of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each test case, print the answer on separate lines: number of lonely numbers in group $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n3\n\n\n\n-----Note-----\n\nFor first test case, $1$ is the only number and therefore lonely.\n\nFor second test case where $n=5$, numbers $1$, $3$ and $5$ are lonely.\n\nFor third test case where $n=10$, numbers $1$, $5$ and $7$ are lonely.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given a string A. Find a string B, where B is a palindrome and A is a subsequence of B.\n\nThe length of string B should be at most 10^4.\n\nYou do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4.\n\n\n-----Input-----\n\nFirst line contains a string A (1 \u2264 |A| \u2264 10^3) consisting of lowercase Latin letters, where |A| is a length of A.\n\n\n-----Output-----\n\nOutput single line containing B consisting of only lowercase Latin letters. You do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4. If there are many possible B, print any of them.\n\n\n-----Examples-----\nInput\naba\n\nOutput\naba\nInput\nab\n\nOutput\naabaa\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a string A. Find a string B, where B is a palindrome and A is a subsequence of B.\n\nA subsequence of a string is a string that can be derived from it by deleting some (not necessarily consecutive) characters without changing the order of the remaining characters. For example, \"cotst\" is a subsequence of \"contest\".\n\nA palindrome is a string that reads the same forward or backward.\n\nThe length of string B should be at most 10^4. It is guaranteed that there always exists such string.\n\nYou do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4.\n\n\n-----Input-----\n\nFirst line contains a string A (1 \u2264 |A| \u2264 10^3) consisting of lowercase Latin letters, where |A| is a length of A.\n\n\n-----Output-----\n\nOutput single line containing B consisting of only lowercase Latin letters. You do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4. If there are many possible B, print any of them.\n\n\n-----Examples-----\nInput\naba\n\nOutput\naba\nInput\nab\n\nOutput\naabaa\n\n\n-----Note-----\n\nIn the first example, \"aba\" is a subsequence of \"aba\" which is a palindrome.\n\nIn the second example, \"ab\" is a subsequence of \"aabaa\" which is a palindrome.\n\"\"\"\ndef code():"
}