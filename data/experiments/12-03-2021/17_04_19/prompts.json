{
    "0": "Python 3\n\"\"\"\nWrite a function that checks if all the letters in the second string are present in the first one at least once, regardless of how many times they appear. Function should not be case sensitive.\n\nExamples:\n\n[\"ab\", \"aaa\"]    =>  true\n[\"trances\", \"nectar\"]    =>  true\n[\"compadres\", \"DRAPES\"]  =>  true\n[\"parses\", \"parsecs\"]    =>  false\n\"\"\"\ndef letter_check(arr):",
    "1": "Python 3\n\"\"\"\nWrite a function that checks if all the letters in the second string are present in the first one at least once, regardless of how many times they appear:\n\n```\n[\"ab\", \"aaa\"]    =>  true\n[\"trances\", \"nectar\"]    =>  true\n[\"compadres\", \"DRAPES\"]  =>  true\n[\"parses\", \"parsecs\"]    =>  false\n```\n\nFunction should not be case sensitive, as indicated in example #2. Note: both strings are presented as a **single argument** in the form of an array.\n\"\"\"\ndef letter_check(arr):",
    "2": "Python 3\n\"\"\"\nYou are given an array arr. \nA subarray is a contiguous\u00a0subsequence of the array.\nCalculate and return the sum of all possible odd-length subarrays.\n\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "3": "Python 3\n\"\"\"\nGiven an array of positive integers\u00a0arr, calculate the sum of all possible odd-length subarrays.\nA subarray is a contiguous\u00a0subsequence of the array.\nReturn\u00a0the sum of all odd-length subarrays of\u00a0arr.\n\u00a0\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "4": "Python 3\n\"\"\"\nYou are given a number in Hexadecimal format. Your task is to write the given hexadecimal number into its corresponding decimal format.\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given number\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nMs. E.T. came from planet Hex. She has 8 fingers in each hand which makes her count in hexadecimal way. When she meets you, she tells you that she came from 7E light years from the planet Earth. You see she means that it is 126 light years far away and she is telling you the numbers in hexadecimal. Now, you are in trouble to understand what those numbers really mean. Therefore, you have to convert the hexadecimal numbers to decimals.\n\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given nunmber\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Task\n\nA number is a special number if its digits only consist 0, 1, 2, 3, 4 or 5.\n\nGiven a positive number determine if it is a special number or not. \n\n# Examples\n\nInput:\nspecialNumber(2)\nOutput: \"Special!!\"\nExplanation: \nIt's a single-digit number within the interval [0:5]. \n\nInput:\nspecialNumber(9)\nOutput: \"NOT!!\"\nExplanation:\nAlthough, it's a single-digit number but outside the interval [0:5].\n\nInput:\nspecialNumber(23)\nOutput: \"Special!!\"\nExplanation:\nAll the number's digits formed from the interval [0:5] digits.\n\nInput:\nspecialNumber(39)\nOutput: \"NOT!!\"\nExplanation:\nAlthough, there is a digit 3 within the interval but the second digit is not.\n\nInput:\nspecialNumber(59)\nOutput: \"NOT!!\"\nExplanation:\nAlthough, there is a digit 5 Within the interval but the second digit is not.\n\nInput:\nspecialNumber(513)\nOutput: \"Special!!\"\n\nInput:\nspecialNumber(709)\nOutput: \"NOT!!\"\n\n\"\"\"\ndef special_number(number):",
    "7": "Python 3\n\"\"\"\n# Definition \n\nA number is a **_Special Number_** *if it\u2019s digits only consist 0, 1, 2, 3, 4 or 5*\n\n**_Given_** a number *determine if it special number or not* .  \n\n\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_The number_** passed will be **_positive_** (N > 0) .\n\n* All **single-digit numbers** with in the interval **_[0:5]_** are considered as **_special number_**. \n___\n\n# Input >> Output Examples\n\n```\nspecialNumber(2) ==> return \"Special!!\"\n```\n## Explanation: \n\nIt's **_a single-digit number_** within the interval **_[0:5]_** . \n\n```\nspecialNumber(9) ==> return \"NOT!!\"\n```\n## Explanation:\n\nAlthough, it's a single-digit number but **_Outside the interval [0:5]_** .\n\n```\nspecialNumber(23) ==> return \"Special!!\"\n```\n## Explanation: \n\nAll **_the number's digits_** formed from the interval **_[0:5]_** digits .\n\n```\nspecialNumber(39) ==> return \"NOT!!\"\n```\n## Explanation: \n\nAlthough, *there is a digit (3) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(59) ==> return \"NOT!!\"\n```\n## Explanation:  \n\nAlthough, *there is a digit (5) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(513) ==> return \"Special!!\"\n```\n___\n```\nspecialNumber(709) ==> return \"NOT!!\"\n```\n___\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)          \n\n### ALL translation are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef special_number(number):",
    "8": "Python 3\n\"\"\"\nConsider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor.\n\nExamples:\npoly_multiply([1, 2], [1] ) = [1, 2]\npoly_multiply([2, 4], [4, 5] ) = [8, 26, 20]\n\n\"\"\"\ndef poly_multiply(p1, p2):",
    "9": "Python 3\n\"\"\"\n*** Nova polynomial multiply*** \n\nThis kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1)   [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe)  [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 )   [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5))\n\nConsider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor (the constant).\n\np = [a0, a1, a2, a3] signifies the polynomial a0 + a1x + a2x^2 + a3*x^3\n\nIn this kata multiply two polynomials:\n\n```python \npoly_multiply([1, 2], [1] ) = [1, 2]\npoly_multiply([2, 4], [4, 5] ) = [8, 26, 20]\n```\nThe first kata of this series is preloaded in the code and can be used: [poly_add](http://www.codewars.com/kata/nova-polynomial-1-add-1)\n\"\"\"\ndef poly_multiply(p1, p2):",
    "10": "Python 3\n\"\"\"\nyou are given a list of of integers of length $n$ of values $a_1, a_2, \\dots, a_n$, where $a_i$ is the value of index $i$.\n\nA vaue of index $i$ is bad if later that index the list contains a smaller value. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of indexes with a bad value is $3$ \u2014 these are index $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$).\n\nPrint the number of index with a bad value.\n\nYou have to answer $t$ independent data sets.\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of indexes with a bad values in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nPolycarp analyzes the prices of the new berPhone. At his disposal are the prices for $n$ last days: $a_1, a_2, \\dots, a_n$, where $a_i$ is the price of berPhone on the day $i$.\n\nPolycarp considers the price on the day $i$ to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of days with a bad price is $3$ \u2014 these are days $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$).\n\nPrint the number of days with a bad price.\n\nYou have to answer $t$ independent data sets.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of days with a bad price in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nCreate a method `fouriest` that takes a number and makes it the fouriest, telling us in which base this happened.\n\nA number's fouriest transformation converts it to the base in which it has the most 4s.\n\nExamples:\nInput:\nfouriest(42)\nOutput:\n\"30 is the fouriest(42) in base 7\"\n\nInput:\nfouriest(14)\nOutput:\n\"15 is the fouriest(14) in base 11\"\n\"\"\"\ndef fouriest(i):",
    "13": "Python 3\n\"\"\"\n# Fourier transformations are hard. Fouriest transformations are harder.\n\nThis Kata is based on the SMBC Comic on fourier transformations.\n\nA fourier transformation on a number is one that converts the number to a base in which it has more `4`s ( `10` in base `6` is `14`, which has `1` four as opposed to none, hence, fourier in base `6` ).\n\nA number's fouriest transformation converts it to the base in which it has the most `4`s.  \nFor example: `35353` is the fouriest in base `6`: `431401`.\n\nThis kata requires you to create a method `fouriest` that takes a number and makes it the fouriest, telling us in which base this happened, as follows:\n\n```python\nfouriest(number) -> \"{number} is the fouriest ({fouriest_representation}) in base {base}\"\n```\n\n## Important notes\n\n* For this kata we don't care about digits greater than `9` ( only `0` to `9` ), so we will represent all digits greater than `9` as `'x'`: `10` in base `11` is `'x'`, `119` in base `20` is `'5x'`, `118` in base `20` is also `'5x'`\n\n* When a number has several fouriest representations, we want the one with the LOWEST base\n\n```if:haskell,javascript\n* Numbers below `9` will not be tested\n```\n\n```if:javascript\n* A `BigNumber` library has been provided; documentation is [here](https://mikemcl.github.io/bignumber.js/)\n```\n\n## Examples\n\n```python\n\"30 is the fouriest (42) in base 7\"\n\"15 is the fouriest (14) in base 11\"\n```\n\"\"\"\ndef fouriest(i):",
    "14": "Python 3\n\"\"\"\nYou are given a total of S items.Only N items can be purchased only. These items will be picked randomly.\nYou need M item including your personal item. Your shopping will complete only if there are atleast K of her item and your personal item. What is the probability that you will purchase your K item with your personal item.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAlice's school is planning to take some students from her class on a field trip. Alice is really excited about it. There are a total of S students in her class. But due to budget constraints, the school is planning to take only N students for the trip. These students will be picked randomly. And each student has equal chance of being picked.\nAlice's friend circle has M students including her. Though she is excited about the field trip, she will enjoy it only if there are atleast K of her friends with her on the trip. She is wondering what are the chances of that happening. She needs your help. Tell her the probability that she will enjoy given that she goes on the trip.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n-----Explanation:-----Case #1:\nEvery student will be taken to the trip. So all her 4 friends will accompany her to the trip no matter what. \nCase #2:\nAlice wants 4 out of her 5 friends to come along with her which isn't possible because the school is willing to pick only 4 students for the trip.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n# Task\n Some people start with the same amount of money (this number>0) and the money will be redistributed. \n\n Find out if the given end-state of amounts is possible after the betting.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "17": "Python 3\n\"\"\"\n# Task\n You have some people who are betting money, and they all start with the same amount of money (this number>0). \n\n Find out if the given end-state of amounts is possible after the betting is over and money is redistributed.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "18": "Python 3\n\"\"\"\nGiven the prime factors of a number as an array, you need to find the number, n, to which that prime factorization belongs. Then, generate the divisors of this number. Your function get_num() or getNum() will receive an array with potentially unordered prime factors and should output: an array with the found integer n at index 0, the amount of total divisors at index 1, followed the smallest factor and the biggest one.\n\nExample:\nInput:\nget_num([2,13,2,5,2,5,3,3])\nOutput:\n[23400, 71, 2, 11700]\nExplanation:\nYou need to find the number, n, to which that prime factorization belongs.\nIt will be:\nn = 2\u00b3.3\u00b2.5\u00b2.13 = 23400\nThe list of divisors for that number (23400) is:\n2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700\nThere is a total amount of 71 divisors. The smallest divisor is 2 and the highest 11700.\nSo the expected output will be: \n[23400, 71, 2, 11700]\n\"\"\"\ndef get_num(arr):",
    "19": "Python 3\n\"\"\"\nYou will be given the prime factors of a number as an array.\nE.g: ```[2,2,2,3,3,5,5,13]```\n\nYou need to find the number, n, to which that prime factorization belongs.\nIt will be:\n```\nn = 2\u00b3.3\u00b2.5\u00b2.13 = 23400\n```\nThen, generate the divisors of this number.\n\nYour function ```get_num() or getNum()``` will receive an array with potentially unordered prime factors and should output: an array with the found integer n at index 0, the amount of total divisors (both prime and compound numbers) at index 1, followed the smallest factor (index 2, and the biggest one (last element)\n\nWe will see the example given above with the only difference that the array of the prime factors is unordered.\n\nThe list of divisors for that number (23400) is:\n```\n2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700 (not considering the integer 23400 itself)\n```\nThere is a total amount of ```71``` divisors. The smallest divisor is ```2``` and the highest ```11700```.\nSo the expected output will be: \n```\nget_num([2,13,2,5,2,5,3,3]) == [23400, 71, 2, 11700]\n```\nEnjoy!\n\"\"\"\ndef get_num(arr):"
}