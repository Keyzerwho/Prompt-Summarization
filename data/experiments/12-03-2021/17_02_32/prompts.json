{
    "0": "Python 3\n\"\"\"\nYou are given a string A. Find a string B, where B is a palindrome and A is a subsequence of B.\n\nThe length of string B should be at most 10^4.\n\nYou do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4.\n\n\n-----Input-----\n\nFirst line contains a string A (1 \u2264 |A| \u2264 10^3) consisting of lowercase Latin letters, where |A| is a length of A.\n\n\n-----Output-----\n\nOutput single line containing B consisting of only lowercase Latin letters. You do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4. If there are many possible B, print any of them.\n\n\n-----Examples-----\nInput\naba\n\nOutput\naba\nInput\nab\n\nOutput\naabaa\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a string A. Find a string B, where B is a palindrome and A is a subsequence of B.\n\nA subsequence of a string is a string that can be derived from it by deleting some (not necessarily consecutive) characters without changing the order of the remaining characters. For example, \"cotst\" is a subsequence of \"contest\".\n\nA palindrome is a string that reads the same forward or backward.\n\nThe length of string B should be at most 10^4. It is guaranteed that there always exists such string.\n\nYou do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4.\n\n\n-----Input-----\n\nFirst line contains a string A (1 \u2264 |A| \u2264 10^3) consisting of lowercase Latin letters, where |A| is a length of A.\n\n\n-----Output-----\n\nOutput single line containing B consisting of only lowercase Latin letters. You do not need to find the shortest answer, the only restriction is that the length of string B should not exceed 10^4. If there are many possible B, print any of them.\n\n\n-----Examples-----\nInput\naba\n\nOutput\naba\nInput\nab\n\nOutput\naabaa\n\n\n-----Note-----\n\nIn the first example, \"aba\" is a subsequence of \"aba\" which is a palindrome.\n\nIn the second example, \"ab\" is a subsequence of \"aabaa\" which is a palindrome.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nAn array of integers $p_{1},p_{2}, \\ldots,p_{n}$ is called a permutation if it contains each number from $1$ to $n$ exactly once.\n\nThere is a hidden permutation of length $n$.\n\nFor each index $i$, you are given $s_{i}$, which equals to the sum of all $p_{j}$ such that $j < i$ and $p_{j} < p_{i}$.\n\nYour task is to restore the permutation.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{5}$)\u00a0\u2014 the size of the permutation.\n\nThe second line contains $n$ integers $s_{1}, s_{2}, \\ldots, s_{n}$ ($0 \\le s_{i} \\le \\frac{n(n-1)}{2}$).\n\nIt is guaranteed that the array $s$ corresponds to a valid permutation of length $n$.\n\n\n-----Output-----\n\nPrint $n$ integers $p_{1}, p_{2}, \\ldots, p_{n}$ \u2014 the elements of the restored permutation. We can show that the answer is always unique.\n\n\n-----Examples-----\nInput\n3\n0 0 0\n\nOutput\n3 2 1\n\nInput\n2\n0 1\n\nOutput\n1 2\n\nInput\n5\n0 1 1 1 10\n\nOutput\n1 4 3 2 5\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nAn array of integers $p_{1},p_{2}, \\ldots,p_{n}$ is called a permutation if it contains each number from $1$ to $n$ exactly once. For example, the following arrays are permutations: $[3,1,2], [1], [1,2,3,4,5]$ and $[4,3,1,2]$. The following arrays are not permutations: $[2], [1,1], [2,3,4]$.\n\nThere is a hidden permutation of length $n$.\n\nFor each index $i$, you are given $s_{i}$, which equals to the sum of all $p_{j}$ such that $j < i$ and $p_{j} < p_{i}$. In other words, $s_i$ is the sum of elements before the $i$-th element that are smaller than the $i$-th element.\n\nYour task is to restore the permutation.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^{5}$)\u00a0\u2014 the size of the permutation.\n\nThe second line contains $n$ integers $s_{1}, s_{2}, \\ldots, s_{n}$ ($0 \\le s_{i} \\le \\frac{n(n-1)}{2}$).\n\nIt is guaranteed that the array $s$ corresponds to a valid permutation of length $n$.\n\n\n-----Output-----\n\nPrint $n$ integers $p_{1}, p_{2}, \\ldots, p_{n}$ \u2014 the elements of the restored permutation. We can show that the answer is always unique.\n\n\n-----Examples-----\nInput\n3\n0 0 0\n\nOutput\n3 2 1\n\nInput\n2\n0 1\n\nOutput\n1 2\n\nInput\n5\n0 1 1 1 10\n\nOutput\n1 4 3 2 5\n\n\n\n-----Note-----\n\nIn the first example for each $i$ there is no index $j$ satisfying both conditions, hence $s_i$ are always $0$.\n\nIn the second example for $i = 2$ it happens that $j = 1$ satisfies the conditions, so $s_2 = p_1$.\n\nIn the third example for $i = 2, 3, 4$ only $j = 1$ satisfies the conditions, so $s_2 = s_3 = s_4 = 1$. For $i = 5$ all $j = 1, 2, 3, 4$ are possible, so $s_5 = p_1 + p_2 + p_3 + p_4 = 10$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given n strings s_1, s_2, ..., s_{n} consisting of characters 0 and 1. m operations are performed, on each of them you concatenate two existing strings into a new one. On the i-th operation the concatenation s_{a}_{i}s_{b}_{i} is saved into a new string s_{n} + i (the operations are numbered starting from 1). After each operation you need to find the maximum positive integer k such that all possible strings consisting of 0 and 1 of length k (there are 2^{k} such strings) are substrings of the new string. If there is no such k, print 0.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of strings. The next n lines contain strings s_1, s_2, ..., s_{n} (1 \u2264 |s_{i}| \u2264 100), one per line. The total length of strings is not greater than 100.\n\nThe next line contains single integer m (1 \u2264 m \u2264 100)\u00a0\u2014 the number of operations. m lines follow, each of them contains two integers a_{i} abd b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n + i - 1)\u00a0\u2014 the number of strings that are concatenated to form s_{n} + i.\n\n\n-----Output-----\n\nPrint m lines, each should contain one integer\u00a0\u2014 the answer to the question after the corresponding operation.\n\n\n-----Example-----\nInput\n5\n01\n10\n101\n11111\n0\n3\n1 2\n6 5\n4 4\n\nOutput\n1\n2\n0\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given n strings s_1, s_2, ..., s_{n} consisting of characters 0 and 1. m operations are performed, on each of them you concatenate two existing strings into a new one. On the i-th operation the concatenation s_{a}_{i}s_{b}_{i} is saved into a new string s_{n} + i (the operations are numbered starting from 1). After each operation you need to find the maximum positive integer k such that all possible strings consisting of 0 and 1 of length k (there are 2^{k} such strings) are substrings of the new string. If there is no such k, print 0.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of strings. The next n lines contain strings s_1, s_2, ..., s_{n} (1 \u2264 |s_{i}| \u2264 100), one per line. The total length of strings is not greater than 100.\n\nThe next line contains single integer m (1 \u2264 m \u2264 100)\u00a0\u2014 the number of operations. m lines follow, each of them contains two integers a_{i} abd b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n + i - 1)\u00a0\u2014 the number of strings that are concatenated to form s_{n} + i.\n\n\n-----Output-----\n\nPrint m lines, each should contain one integer\u00a0\u2014 the answer to the question after the corresponding operation.\n\n\n-----Example-----\nInput\n5\n01\n10\n101\n11111\n0\n3\n1 2\n6 5\n4 4\n\nOutput\n1\n2\n0\n\n\n\n-----Note-----\n\nOn the first operation, a new string \"0110\" is created. For k = 1 the two possible binary strings of length k are \"0\" and \"1\", they are substrings of the new string. For k = 2 and greater there exist strings of length k that do not appear in this string (for k = 2 such string is \"00\"). So the answer is 1.\n\nOn the second operation the string \"01100\" is created. Now all strings of length k = 2 are present.\n\nOn the third operation the string \"1111111111\" is created. There is no zero, so the answer is 0.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Task\n Given a pack of candies of various sizes from the storetry to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\n\n\n# Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2, 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16, 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 \u2264 inputArray.length \u2264 50,`\n    \n    `1 \u2264 inputArray[i] \u2264 100.`\n\n\n - `[output]` an integer\n\"\"\"\ndef obtain_max_number(arr):",
    "7": "Python 3\n\"\"\"\n# Task\n CodeBots decided to make a gift for CodeMaster's birthday. They got a pack of candies of various sizes from the store, but instead of giving the whole pack they are trying to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\nWhat is the size of the biggest candy they can make as a gift?\n\n# Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2, 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16, 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 \u2264 inputArray.length \u2264 50,`\n    \n    `1 \u2264 inputArray[i] \u2264 100.`\n\n\n - `[output]` an integer\n\"\"\"\ndef obtain_max_number(arr):",
    "8": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ positive integers.\n\nYou can use the following operation as many times as you like: select any integer $1 \\le k \\le n$ and do one of two things:   decrement by one $k$ of the first elements of the array.  decrement by one $k$ of the last elements of the array. \n\nDetermine if it is possible to make all the elements of the array equal to zero by applying a certain number of operations.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 30000$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing one integer $n$ ($1 \\le n \\le 30000$)\u00a0\u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1 \\ldots a_n$ ($1 \\le a_i \\le 10^6$).\n\nThe sum of $n$ over all test cases does not exceed $30000$.\n\n\n-----Output-----\n\nFor each test case, output on a separate line:   YES, if it is possible to make all elements of the array equal to zero by applying a certain number of operations.  NO, otherwise. \n\nThe letters in the words YES and NO can be outputed in any case.\n\n\n-----Example-----\nInput\n4\n3\n1 2 1\n5\n11 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n\nOutput\nYES\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ positive integers.\n\nYou can use the following operation as many times as you like: select any integer $1 \\le k \\le n$ and do one of two things:   decrement by one $k$ of the first elements of the array.  decrement by one $k$ of the last elements of the array. \n\nFor example, if $n=5$ and $a=[3,2,2,1,4]$, then you can apply one of the following operations to it (not all possible options are listed below):   decrement from the first two elements of the array. After this operation $a=[2, 1, 2, 1, 4]$;  decrement from the last three elements of the array. After this operation $a=[3, 2, 1, 0, 3]$;  decrement from the first five elements of the array. After this operation $a=[2, 1, 1, 0, 3]$; \n\nDetermine if it is possible to make all the elements of the array equal to zero by applying a certain number of operations.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 30000$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing one integer $n$ ($1 \\le n \\le 30000$)\u00a0\u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1 \\ldots a_n$ ($1 \\le a_i \\le 10^6$).\n\nThe sum of $n$ over all test cases does not exceed $30000$.\n\n\n-----Output-----\n\nFor each test case, output on a separate line:   YES, if it is possible to make all elements of the array equal to zero by applying a certain number of operations.  NO, otherwise. \n\nThe letters in the words YES and NO can be outputed in any case.\n\n\n-----Example-----\nInput\n4\n3\n1 2 1\n5\n11 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n\nOutput\nYES\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have a permutation of the integers from 1 through N, p_1, p_2, .., p_N.\nYou also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M).\nYou are going to perform the following operation on p as many times as desired so that the number of i (1 \u2264 i \u2264 N) such that p_i = i is maximized:\n - Choose j such that 1 \u2264 j \u2264 M, and swap p_{x_j} and p_{y_j}.\nFind the maximum possible number of i such that p_i = i after operations.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 M \u2264 10^5\n - p is a permutation of integers from 1 through N.\n - 1 \u2264 x_j,y_j \u2264 N\n - x_j \u2260 y_j\n - If i \u2260 j, \\{x_i,y_i\\} \u2260 \\{x_j,y_j\\}.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\np_1 p_2 .. p_N\nx_1 y_1\nx_2 y_2\n:\nx_M y_M\n\n-----Output-----\nPrint the maximum possible number of i such that p_i = i after operations.\n\n-----Sample Input-----\n5 2\n5 3 1 4 2\n1 3\n5 4\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nWe have a permutation of the integers from 1 through N, p_1, p_2, .., p_N.\nWe also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M).\nAtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1 \u2264 i \u2264 N) such that p_i = i is maximized:\n - Choose j such that 1 \u2264 j \u2264 M, and swap p_{x_j} and p_{y_j}.\nFind the maximum possible number of i such that p_i = i after operations.\n\n-----Constraints-----\n - 2 \u2264 N \u2264 10^5\n - 1 \u2264 M \u2264 10^5\n - p is a permutation of integers from 1 through N.\n - 1 \u2264 x_j,y_j \u2264 N\n - x_j \u2260 y_j\n - If i \u2260 j, \\{x_i,y_i\\} \u2260 \\{x_j,y_j\\}.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\np_1 p_2 .. p_N\nx_1 y_1\nx_2 y_2\n:\nx_M y_M\n\n-----Output-----\nPrint the maximum possible number of i such that p_i = i after operations.\n\n-----Sample Input-----\n5 2\n5 3 1 4 2\n1 3\n5 4\n\n-----Sample Output-----\n2\n\nIf we perform the operation by choosing j=1, p becomes 1 3 5 4 2, which is optimal, so the answer is 2.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given following inputs: original string S, starting index i, source word x and target word y. \n\nYou need to perform replacement operations with this rule: \n\nIf x starts at position i in S, you need to replace that occurrence of x with y. If not, we do nothing.\n\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\n\nConsider:\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "13": "Python 3\n\"\"\"\nTo some string S, we will perform some\u00a0replacement\u00a0operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word\u00a0x\u00a0and a target word\u00a0y.\u00a0 The rule is that if x\u00a0starts at position i\u00a0in the original string S, then we will replace that occurrence of\u00a0x\u00a0with\u00a0y.\u00a0 If not, we do nothing.\nFor example, if we have\u00a0S = \"abcd\"\u00a0and we have some replacement operation\u00a0i = 2, x = \"cd\", y = \"ffff\", then because\u00a0\"cd\"\u00a0starts at position 2\u00a0in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation\u00a0i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string\u00a0S[2] = 'c', which doesn't match\u00a0x[0] = 'e'.\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "14": "Python 3\n\"\"\"\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak. Consider only uppercase letters and spaces.\n\nIn this task we use a simple LeetSpeak dialect. Use this alphabet:\n{\n  A : '@',\n  B : '8',\n  C : '(',\n  D : 'D',\n  E : '3',\n  F : 'F',\n  G : '6',\n  H : '#',\n  I : '!',\n  J : 'J',\n  K : 'K',\n  L : '1',\n  M : 'M',\n  N : 'N',\n  O : '0',\n  P : 'P',\n  Q : 'Q',\n  R : 'R',\n  S : '$',\n  T : '7',\n  U : 'U',\n  V : 'V',\n  W : 'W',\n  X : 'X',\n  Y : 'Y',\n  Z : '2'\n}\n\n\nExamples:\nInput:\ntoLeetSpeak(\"LEET\")\nOutput:\n\"1337\"\n\nInput:\nto_leet_speak(\"LEET\")\nOutput:\n\"1337\"\n\"\"\"\ndef to_leet_speak(str):",
    "15": "Python 3\n\"\"\"\n```if-not:rust\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak.\n```\n```if:rust\nYour task is to write a function `to_leet_speak` that converts a regular english sentence to Leetspeak.\n```\n\nMore about LeetSpeak You can read at wiki -> https://en.wikipedia.org/wiki/Leet\n\nConsider only uppercase letters (no lowercase letters, no numbers) and spaces.\n\nFor example:\n\n```if-not:rust\n~~~\ntoLeetSpeak(\"LEET\") returns \"1337\"\n~~~\n```\n```if:rust\n~~~\nto_leet_speak(\"LEET\") returns \"1337\"\n~~~\n```\n\nIn this kata we use a simple LeetSpeak dialect. Use this alphabet:\n\n```\n{\n  A : '@',\n  B : '8',\n  C : '(',\n  D : 'D',\n  E : '3',\n  F : 'F',\n  G : '6',\n  H : '#',\n  I : '!',\n  J : 'J',\n  K : 'K',\n  L : '1',\n  M : 'M',\n  N : 'N',\n  O : '0',\n  P : 'P',\n  Q : 'Q',\n  R : 'R',\n  S : '$',\n  T : '7',\n  U : 'U',\n  V : 'V',\n  W : 'W',\n  X : 'X',\n  Y : 'Y',\n  Z : '2'\n}\n```\n\"\"\"\ndef to_leet_speak(str):",
    "16": "Python 3\n\"\"\"\nWe make 2 rows and put first letter in the Row 1, the second in the Row 2, third in Row 1 and so on until the end. Then we put the text from Row 2 next to the Row 1 text.\n\nComplete the function that receives a string and encrypt it with this simple transposition.\n\n## Example\nFor example if the text to encrypt is: `\"Simple text\"`, the 2 rows will be:\n\n\n\nRow 1\nS\nm\nl\n \ne\nt\n\n\nRow 2\ni\np\ne\nt\nx\n \n\n\n\nSo the result string will be: `\"Sml etipetx\"`\n\"\"\"\ndef simple_transposition(text):",
    "17": "Python 3\n\"\"\"\nSimple transposition is a basic and simple cryptography technique. We make 2 rows and put first a letter in the Row 1, the second in the Row 2, third in Row 1 and so on until the end. Then we put the text from Row 2 next to the Row 1 text and thats it.\n\nComplete the function that receives a string and encrypt it with this simple transposition.\n\n## Example\nFor example if the text to encrypt is: `\"Simple text\"`, the 2 rows will be:\n\n\n\nRow 1\nS\nm\nl\n \ne\nt\n\n\nRow 2\ni\np\ne\nt\nx\n \n\n\n\nSo the result string will be: `\"Sml etipetx\"`\n\"\"\"\ndef simple_transposition(text):",
    "18": "Python 3\n\"\"\"\nA game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves:  Take one gold coin from the chest.  Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. \n\nBoth players will try to maximize the number of coins they have. Your need to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 10^5)$ denotes the number of test cases.\n\nThe next $T$ lines each contain a single integer $N$ $(1 \\le N \\le 10^{18})$.\n\n\n-----Output-----\n\n$T$ lines, each line is the answer requested by Mr. Chanek.\n\n\n-----Example-----\nInput\n2\n5\n6\n\nOutput\n2\n4\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLately, Mr. Chanek frequently plays the game Arena of Greed. As the name implies, the game's goal is to find the greediest of them all, who will then be crowned king of Compfestnesia.\n\nThe game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves:  Take one gold coin from the chest.  Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. \n\nBoth players will try to maximize the number of coins they have. Mr. Chanek asks your help to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 10^5)$ denotes the number of test cases.\n\nThe next $T$ lines each contain a single integer $N$ $(1 \\le N \\le 10^{18})$.\n\n\n-----Output-----\n\n$T$ lines, each line is the answer requested by Mr. Chanek.\n\n\n-----Example-----\nInput\n2\n5\n6\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nFor the first case, the game is as follows:   Mr. Chanek takes one coin.  The opponent takes two coins.  Mr. Chanek takes one coin.  The opponent takes one coin. \n\nFor the second case, the game is as follows:   Mr. Chanek takes three coins.  The opponent takes one coin.  Mr. Chanek takes one coin.  The opponent takes one coin.\n\"\"\"\ndef code():"
}