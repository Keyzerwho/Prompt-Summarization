{
    "id": "cmpl-4BCn0rWM3OsVY4fVK2Al1hKT623dF",
    "object": "text_completion",
    "created": 1638576118,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    string = input()\n    if len(string)%2 == 0:\n        print(string[:len(string)//2] + string[:len(string)//2][::-1])\n    else:\n        print(string[:len(string)//2] + string[len(string)//2] + string[:len(string)//2][::-1])\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    A = input()\n    B = A[::-1]\n    print(B)\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(n):\n        p[i] = i + 1\n    for i in range(n):\n        for j in range(i):\n            if p[j] < p[i] and s[j] < s[i]:\n                p[i] = p[j]\n    for i in range(n):\n        print(p[i], end=' ')\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = list(map(int, input().split()))\n    p = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if s[j] < s[i] and p[j] < p[i]:\n                s[i] = s[i] - s[j]\n        p[i] = s[i]\n    print(*p)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    m = int(input())\n    for i in range(m):\n        a, b = map(int, input().split())\n        strings[a-1] += strings[b-1]\n        strings[b-1] = ''\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif strings[a-1][j] == '1':\n",
            "index": 4,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    m = int(input())\n    for i in range(m):\n        a, b = map(int, input().split())\n        strings[a-1] += strings[b-1]\n        strings[b-1] = ''\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '0':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '1':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '0':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '1':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '0':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[a-1])):\n            if strings[a-1][j] == '1':\n                strings[a-1] = strings[a-1][j:]\n                break\n            elif j == len(strings[a-1])-1:\n                strings[a-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '0':\n                strings[b-1] = strings[b-1][j:]\n                break\n            elif j == len(strings[b-1])-1:\n                strings[b-1] = ''\n                break\n        for j in range(len(strings[b-1])):\n            if strings[b-1][j] == '1':\n                strings[b-1] = strings[b-1][j",
            "index": 5,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] + obtain_max_number(arr[2:]), arr[1] + obtain_max_number(arr[3:]))\n\ndef split_and_merge(arr):\n    return obtain_max_number(arr)",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    arr.sort()\n    return arr[-1]\n\ndef split_candy(arr):\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i] = arr[i]/2\n            arr.append(arr[i])\n    return arr\n\ndef merge_candy(arr):\n    for i in range(len(arr)):\n        if i < len(arr)-1:\n            if arr[i] == arr[i+1]:\n                arr[i] = arr[i]*2\n                arr.pop(i+1)\n    return arr\n\ndef birthdayCakeCandles(arr):\n    arr = split_candy(arr)\n    arr = merge_candy(arr)\n    return obtain_max_number(arr)\n\narr = [2, 4, 8, 1, 1, 15]\nprint(birthdayCakeCandles(arr))",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # Get the number of elements and the number of swaps\n    n, m = [int(x) for x in input().split()]\n\n    # Get the permutation\n    perm = [int(x) for x in input().split()]\n\n    # Get the swaps\n    swaps = []\n    for i in range(m):\n        swaps.append([int(x) for x in input().split()])\n\n    # Create a dictionary to store the number of times each element appears\n    count = {}\n    for i in range(1, n + 1):\n        count[i] = 0\n\n    # Loop through the swaps and update the count dictionary\n    for i in range(m):\n        count[swaps[i][0]] += 1\n        count[swaps[i][1]] += 1\n\n    # Loop through the permutation and update the count dictionary\n    for i in range(n):\n        count[perm[i]] += 1\n\n    # Find the maximum value in the count dictionary\n    max_val = 0\n    for i in range(1, n + 1):\n        if count[i] > max_val:\n            max_val = count[i]\n\n    # Print the maximum value\n    print(max_val)\n\nif __name__ == \"__main__\":\n    code()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n    swaps = []\n    for i in range(m):\n        swaps.append(list(map(int, input().split())))\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.sort(key=lambda x: x[0])\n    swaps.sort(key=lambda x: x[1])\n    swaps.",
            "index": 11,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n        res = \"\"\n        for i in range(len(indexes)):\n            if S[indexes[i]:indexes[i]+len(sources[i])] == sources[i]:\n                res += targets[i]\n                S = S[:indexes[i]] + S[indexes[i]+len(sources[i]):]\n            else:\n                res += S[indexes[i]]\n        res += S\n        return res",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n        res = \"\"\n        for i in range(len(indexes)):\n            if S[indexes[i]:].startswith(sources[i]):\n                res += targets[i]\n                S = S[:indexes[i]] + S[indexes[i]+len(sources[i]):]\n            else:\n                res += S[indexes[i]]\n        return res + S",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    leet_dict = {\n        'A': '@',\n        'B': '8',\n        'C': '(',\n        'D': 'D',\n        'E': '3',\n        'F': 'F',\n        'G': '6',\n        'H': '#',\n        'I': '!',\n        'J': 'J',\n        'K': 'K',\n        'L': '1',\n        'M': 'M',\n        'N': 'N',\n        'O': '0',\n        'P': 'P',\n        'Q': 'Q',\n        'R': 'R',\n        'S': '$',\n        'T': '7',\n        'U': 'U',\n        'V': 'V',\n        'W': 'W',\n        'X': 'X',\n        'Y': 'Y',\n        'Z': '2'\n    }\n    return ''.join([leet_dict[x] if x in leet_dict else x for x in str])\n\nif __name__ == '__main__':\n    print(to_leet_speak('LEET'))",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return str.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZ', '@8(D3F6#!JK1MN0PQR57UVWXY2'))",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    row1 = []\n    row2 = []\n    for i in range(len(text)):\n        if i % 2 == 0:\n            row1.append(text[i])\n        else:\n            row2.append(text[i])\n    return ''.join(row1) + ''.join(row2)",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    row1 = []\n    row2 = []\n    for i in range(len(text)):\n        if i % 2 == 0:\n            row1.append(text[i])\n        else:\n            row2.append(text[i])\n    return ''.join(row1) + ''.join(row2)",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N % 2 == 0:\n            print(N//2)\n        else:\n            print(N//2 + 1)\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        if N%2 == 0:\n            print(N//2)\n        else:\n            print(N//2+1)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}