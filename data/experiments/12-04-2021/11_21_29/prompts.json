{
    "0": "Python 3\n\"\"\"\n There is a string S of length N consisting of characters 0 and 1. You will perform the following operation for each i = 1, 2, ..., m: - Arbitrarily permute the characters within the substring of S starting at the l_i-th character from the left and extending through the r_i-th character. Here, the sequence l_i is non-decreasing. How many values are possible for S after the M operations, modulo 1000000007(= 10^9+7)  -----Constraints----- - 2 N 3000 - 1 M 3000 - S consists of characters 0 and 1. - The length of S equals N. - 1 l_i < r_i N - l_i   l_{i+1}\n-----Input----- The input is given from Standard Input in the following format: N M S l_1 r_1 : l_M r_M -----Output----- Print the number of the possible values for S after the M operations, modulo 1000000007. -----Sample Input----- 5 2 01001 2 4 3 5 -----Sample Output----- 6 After the first operation, S can be one of the following three: 01001, 00101 and 00011. After the second operation, S can be one of the following six: 01100, 01010, 01001, 00011, 00101 and 00110.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThere is a string S of length N consisting of characters 0 and 1. You will perform the following operation for each i = 1, 2, ..., m:\n - Arbitrarily permute the characters within the substring of S starting at the l_i-th character from the left and extending through the r_i-th character.\nHere, the sequence l_i is non-decreasing.\nHow many values are possible for S after the M operations, modulo 1000000007(= 10^9+7)?\n\n-----Constraints-----\n - 2\u2266N\u22663000\n - 1\u2266M\u22663000\n - S consists of characters 0 and 1.\n - The length of S equals N.\n - 1\u2266l_i < r_i\u2266N\n - l_i \u2266 l_{i+1}\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M\nS\nl_1 r_1\n:\nl_M r_M\n\n-----Output-----\nPrint the number of the possible values for S after the M operations, modulo 1000000007.\n\n-----Sample Input-----\n5 2\n01001\n2 4\n3 5\n\n-----Sample Output-----\n6\n\nAfter the first operation, S can be one of the following three: 01001, 00101 and 00011.\nAfter the second operation, S can be one of the following six: 01100, 01010, 01001, 00011, 00101 and 00110.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Let's call an array consisting of n integer numbers a_1, a_2, ..., a_{n}, beautiful if it has the following property:   consider all pairs of numbers x, y (x   y), such that number x occurs in the array a and number y occurs in the array a;  for each pair x, y must exist some position j (1   j < n), such that at least one of the two conditions are met, either a_{j} = x, a_{j} + 1 = y, or a_{j} = y, a_{j} + 1 = x.  Sereja wants to build a beautiful array a, consisting of n integers. But not everything is so easy, Sereja's friend Dima has m coupons, each contains two integers q_{i}, w_{i}. Coupon i costs w_{i} and allows you to use as many numbers q_{i} as you want when constructing the array a. Values q_{i} are distinct. Sereja has no coupons, so Dima and Sereja have made the following deal. Dima builds some beautiful array a of n elements. After that he takes w_{i} rubles from Sereja for each q_{i}, which occurs in the array a. Sereja believed his friend and agreed to the contract, and now he is wondering, what is the maximum amount of money he can pay. Help Sereja, find the maximum amount of money he can pay to Dima. \n-----Input----- The first line contains two integers n and m (1 \u2264 n \u2264 2\u00b710^6, 1 \u2264 m \u2264 10^5). Next m lines contain pairs of integers. The i-th line contains numbers q_{i}, w_{i} (1 \u2264 q_{i}, w_{i} \u2264 10^5). It is guaranteed that all q_{i} are distinct. -----Output----- In a single line print maximum amount of money (in rubles) Sereja can pay. Please, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier. -----Examples----- Input 5 2 1 2 2 3 Output 5 Input 100 3 1 2 2 1 3 1 Output 4 Input 1 2 1 1 2 100 Output 100 -----Note----- In the first sample Sereja can pay 5 rubles, for example, if Dima constructs the following array: [1, 2, 1, 2, 2]. There are another optimal arrays for this test. In the third sample Sereja can pay 100 rubles, if Dima constructs the following array: [2].\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nLet's call an array consisting of n integer numbers a_1, a_2, ..., a_{n}, beautiful if it has the following property:\n\n  consider all pairs of numbers x, y (x \u2260 y), such that number x occurs in the array a and number y occurs in the array a;  for each pair x, y must exist some position j (1 \u2264 j < n), such that at least one of the two conditions are met, either a_{j} = x, a_{j} + 1 = y, or a_{j} = y, a_{j} + 1 = x. \n\nSereja wants to build a beautiful array a, consisting of n integers. But not everything is so easy, Sereja's friend Dima has m coupons, each contains two integers q_{i}, w_{i}. Coupon i costs w_{i} and allows you to use as many numbers q_{i} as you want when constructing the array a. Values q_{i} are distinct. Sereja has no coupons, so Dima and Sereja have made the following deal. Dima builds some beautiful array a of n elements. After that he takes w_{i} rubles from Sereja for each q_{i}, which occurs in the array a. Sereja believed his friend and agreed to the contract, and now he is wondering, what is the maximum amount of money he can pay.\n\nHelp Sereja, find the maximum amount of money he can pay to Dima.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 2\u00b710^6, 1 \u2264 m \u2264 10^5). Next m lines contain pairs of integers. The i-th line contains numbers q_{i}, w_{i} (1 \u2264 q_{i}, w_{i} \u2264 10^5).\n\nIt is guaranteed that all q_{i} are distinct.\n\n\n-----Output-----\n\nIn a single line print maximum amount of money (in rubles) Sereja can pay.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n5 2\n1 2\n2 3\n\nOutput\n5\n\nInput\n100 3\n1 2\n2 1\n3 1\n\nOutput\n4\n\nInput\n1 2\n1 1\n2 100\n\nOutput\n100\n\n\n\n-----Note-----\n\nIn the first sample Sereja can pay 5 rubles, for example, if Dima constructs the following array: [1, 2, 1, 2, 2]. There are another optimal arrays for this test.\n\nIn the third sample Sereja can pay 100 rubles, if Dima constructs the following array: [2].\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given a string of decimal digits, find the number of rectangles in a matrix such that the sum of all cells in the rectangle equals a. \n-----Input----- The first line contains integer a (0 \u2264 a \u2264 10^9), the second line contains a string of decimal integers s (1 \u2264 |s| \u2264 4000). -----Output----- Print a single integer \u2014 the answer to a problem. Please, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier. -----Examples----- Input 10 12345 Output 6 Input 16 439873893693495623498263984765 Output 40\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou have a string of decimal digits s. Let's define b_{ij} = s_{i}\u00b7s_{j}. Find in matrix b the number of such rectangles that the sum b_{ij} for all cells (i, j) that are the elements of the rectangle equals a in each rectangle.\n\nA rectangle in a matrix is a group of four integers (x, y, z, t) (x \u2264 y, z \u2264 t). The elements of the rectangle are all cells (i, j) such that x \u2264 i \u2264 y, z \u2264 j \u2264 t.\n\n\n-----Input-----\n\nThe first line contains integer a (0 \u2264 a \u2264 10^9), the second line contains a string of decimal integers s (1 \u2264 |s| \u2264 4000).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to a problem.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n10\n12345\n\nOutput\n6\n\nInput\n16\n439873893693495623498263984765\n\nOutput\n40\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Kuro and Shiro are playing with a board composed of n squares lining up in a row. The squares are numbered 1 to n from left to right, and Square s has a mark on it. First, for each square, Kuro paints it black or white with equal probability, independently from other squares. Then, he puts on Square s a stone of the same color as the square. Kuro and Shiro will play a game using this board and infinitely many black stones and white stones. In this game, Kuro and Shiro alternately put a stone as follows, with Kuro going first:  - Choose an empty square adjacent to a square with a stone on it. Let us say Square i is chosen.  - Put on Square i a stone of the same color as the square.  - If there are squares other than Square i that contain a stone of the same color as the stone just placed, among such squares, let Square j be the one nearest to Square i. Change the color of every stone between Square i and Square j to the color of Square i. The game ends when the board has no empty square. Kuro plays optimally to maximize the number of black stones at the end of the game, while Shiro plays optimally to maximize the number of white stones at the end of the game. For each of the cases s=1,\\dots,n, find the expected value, modulo 998244353, of the number of black stones at the end of the game. \n-----Input----- Input is given from Standard Input in the following format: n -----Output----- Print n values. The i-th value should be the expected value, modulo 998244353, of the number of black stones at the end of the game for the case s=i. -----Sample Input----- 3 -----Sample Output----- 499122178 499122178 499122178 Let us use b to represent a black square and w to represent a white square. There are eight possible boards: www, wwb, wbw, wbb, bww, bwb, bbw, and bbb, which are chosen with equal probability. For each of these boards, there will be 0, 1, 0, 2, 1, 3, 2, and 3 black stones at the end of the game, respectively, regardless of the value of s. Thus, the expected number of stones is (0+1+0+2+1+3+2+3)/8 = 3/2, and the answer is r = 499122178, which satisfies 2r = 3 ~(\\text{mod } 998244353) and 0 \\leq r \\lt 998244353.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nKuro and Shiro are playing with a board composed of n squares lining up in a row.\nThe squares are numbered 1 to n from left to right, and Square s has a mark on it.\nFirst, for each square, Kuro paints it black or white with equal probability, independently from other squares. Then, he puts on Square s a stone of the same color as the square.\nKuro and Shiro will play a game using this board and infinitely many black stones and white stones. In this game, Kuro and Shiro alternately put a stone as follows, with Kuro going first:\n - Choose an empty square adjacent to a square with a stone on it. Let us say Square i is chosen.\n - Put on Square i a stone of the same color as the square.\n - If there are squares other than Square i that contain a stone of the same color as the stone just placed, among such squares, let Square j be the one nearest to Square i. Change the color of every stone between Square i and Square j to the color of Square i.\nThe game ends when the board has no empty square.\nKuro plays optimally to maximize the number of black stones at the end of the game, while Shiro plays optimally to maximize the number of white stones at the end of the game.\nFor each of the cases s=1,\\dots,n, find the expected value, modulo 998244353, of the number of black stones at the end of the game.\n\n-----Notes-----\nWhen the expected value in question is represented as an irreducible fraction p/q, there uniquely exists an integer r such that rq=p ~(\\text{mod } 998244353) and 0 \\leq r \\lt 998244353, which we ask you to find.\n\n-----Constraints-----\n - 1 \\leq n \\leq 2\\times 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint n values.\nThe i-th value should be the expected value, modulo 998244353, of the number of black stones at the end of the game for the case s=i.\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n499122178\n499122178\n499122178\n\nLet us use b to represent a black square and w to represent a white square.\nThere are eight possible boards: www, wwb, wbw, wbb, bww, bwb, bbw, and bbb, which are chosen with equal probability.\nFor each of these boards, there will be 0, 1, 0, 2, 1, 3, 2, and 3 black stones at the end of the game, respectively, regardless of the value of s.\nThus, the expected number of stones is (0+1+0+2+1+3+2+3)/8 = 3/2, and the answer is r = 499122178, which satisfies 2r = 3 ~(\\text{mod } 998244353) and 0 \\leq r \\lt 998244353.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You have recently made a grid traversing robot that can find its way from the top left corner of a grid to the bottom right corner. However, you had forgotten all your AI programming skills, so you only programmed your robot to go rightwards and downwards (that s after all where the goal is). You have placed your robot on a grid with some obstacles, and you sit and observe. However, after a while you get tired of observing it getting stuck, and ask yourself \n-----Input----- On the first line is one integer, $1 \\leq n \\leq 1000$. Then follows $n$ lines, each with $n$ characters, where each character is one of \u2019.\u2019 and \u2019#\u2019, where \u2019.\u2019 is to be interpreted as a walkable tile and \u2019#\u2019 as a non-walkable tile. There will never be a wall at $s$, and there will never be a wall at $t$. -----Output----- Output one line with the number of different paths starting in $s$ and ending in $t$ (modulo $2^{31} - 1$) or THE GAME IS A LIE if you cannot go from $s$ to $t$ going only rightwards and downwards but you can if you are allowed to go left and up as well, or INCONCEIVABLE if there simply is no path from $s$ to $t$. -----Examples----- Sample Input: 5 ..... #..#. #..#. ...#. ..... Sample Output: 6\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou have recently made a grid traversing robot that can find its way from the top left corner of a grid to the bottom right corner. However, you had forgotten all your AI programming skills, so you only programmed your robot to go rightwards and downwards (that\u2019s after all where the goal is). You have placed your robot on a grid with some obstacles, and you sit and observe. However, after a while you get tired of observing it getting stuck, and ask yourself \u201cHow many paths are there from the start position to the goal position?\u201d, and \u201cIf there are none, could the robot have made it to the goal if it could walk upwards and leftwards?\u201d\n\nSo you decide to write a program that, given a grid of size $n \\times n$ with some obstacles marked on it where the robot cannot walk, counts the different ways the robot could go from the top left corner $s$ to the bottom right $t$, and if none, tests if it were possible if it could walk up and left as well. However, your program does not handle very large numbers, so the answer should be given modulo $2^{31} - 1$.\n\n-----Input-----\nOn the first line is one integer, $1 \\leq n \\leq 1000$. Then follows $n$ lines, each with $n$ characters, where each character is one of \u2019.\u2019 and \u2019#\u2019, where \u2019.\u2019 is to be interpreted as a walkable tile and \u2019#\u2019 as a non-walkable tile. There will never be a wall at $s$, and there will never be a wall at $t$.\n\n-----Output-----\nOutput one line with the number of different paths starting in $s$ and ending in $t$ (modulo $2^{31} - 1$) or THE GAME IS A LIE if you cannot go from $s$ to $t$ going only rightwards and downwards but you can if you are allowed to go left and up as well, or INCONCEIVABLE if there simply is no path from $s$ to $t$.\n\n-----Examples-----\nSample Input:\n5\n.....\n#..#.\n#..#.\n...#.\n.....\nSample Output:\n6\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Mirko and Slavko are competing against each other in mathematical games. This time they took a heap of $N$ pebbles and settled on the following rules: - Mirko is the first to play, then Slavko, then Mirko again, then Slavko and so on; - Mirko can take any number of pebbles (between $1$ and $N$, inclusive) from the heap during his first move; - In each of the following turns the current player must take at least $1$ pebble and is allowed to take at most double the amount of pebbles taken during the previous turn by the other player; naturally, one cannot take more pebbles than the remaining amount in the heap; - The player who takes the last pebble is the winner. Both Mirko and Slavko play optimally (if it is possible for one player to beat the other, that player will always win). We need to find the minimum number of pebbles that Mirko must take during his first turn such that he is guaranteed to win the game. \n-----Input----- The first and only line of input contains the positive integer $N$ ($2 \\le N \\le 10^{15}$), the number of pebbles in the starting heap. -----Output----- The first and only line of output must contain the required minimum number of pebbles that Mirko needs to remove during his first turn. -----Explanation of Sample Input 1----- Mirko has $4$ possibilities to choose from: he can take $1$, $2$, $3$, or $4$ pebbles from the heap. If he takes all $4$ pebbles he will naturally win, but that is not the minimum solution. We need to check the remaining alternatives. If Mirko takes only one pebble, Slavko is left with a heap of $3$, but he can take at most $2$. Slavko cannot take all pebbles, but Mirko will be able to take all remaining pebbles during his next turn, winning the game. We conclude that $1$ is the minimum solution for this test case. -----Examples----- Sample Input 1: 4 Sample Output 1: 1 Sample Input 2: 7 Sample Output 2: 2\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nMirko and Slavko\u2019s favourite pastime is competing against each other in mathematical games. This time they took a heap of $N$ pebbles and settled on the following rules:\n - Mirko is the first to play, then Slavko, then Mirko again, then Slavko and so on;\n - Mirko can take any number of pebbles (between $1$ and $N$, inclusive) from the heap during his first move;\n - In each of the following turns the current player must take at least $1$ pebble and is allowed to take at most double the amount of pebbles taken during the previous turn by the other player; naturally, one cannot take more pebbles than the remaining amount in the heap;\n - The player who takes the last pebble is the winner.\n\nBoth Mirko and Slavko play optimally (if it is possible for one player to beat the other, that player will always win). We need to find the minimum number of pebbles that Mirko must take during his first turn such that he is guaranteed to win the game.\n\n-----Input-----\nThe first and only line of input contains the positive integer $N$ ($2 \\le N \\le 10^{15}$), the number of pebbles in the starting heap.\n\n-----Output-----\nThe first and only line of output must contain the required minimum number of pebbles that Mirko needs to remove during his first turn.\n\n-----Explanation of Sample Input 1-----\nMirko has $4$ possibilities to choose from: he can take $1$, $2$, $3$, or $4$ pebbles from the heap. If he takes all $4$ pebbles he will naturally win, but that is not the minimum solution. We need to check the remaining alternatives. If Mirko takes only one pebble, Slavko is left with a heap of $3$, but he can take at most $2$. Slavko cannot take all pebbles, but Mirko will be able to take all remaining pebbles during his next turn, winning the game. We conclude that $1$ is the minimum solution for this test case.\n\n-----Examples-----\nSample Input 1:\n4\nSample Output 1:\n1\n\nSample Input 2:\n7\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a board of size $N+1$ with $N$ squares of different colors. You are also given a deck of $N$ cards of different colors. You need to find the minimum number of cards required to complete the game. \n-----Input----- The first line of input consists of a single integer $N$ ($1 \\le N \\le 200000$) denoting the number of squares. The next $N$ lines each contain a single string $S_ i \\in \\{ \\text {Blue}, \\text {Orange}, \\text {Pink}, \\text {Green}, \\text {Red}, \\text {Yellow}\\} $ representing the color of the $i^\\text {th}$ square, starting with the first square on the board (not counting the start square). -----Output----- Output a single integer equal to the minimum number of draws required to move from the start square to square $N$. -----Examples----- Sample Input 1: 6 Blue Orange Pink Green Red Yellow Sample Output 1: 1 Sample Input 2: 12 Blue Orange Pink Green Red Yellow Yellow Red Green Pink Orange Blue Sample Output 2: 2\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYancy is designing a new board game called Colorland. The rules of Colorland are as follows:\n - Colorland\u2019s board is a linear sequence of $N+1$ squares. The first square is a special start square, the remaining $N$ squares are colored blue, orange, pink, green, red, or yellow.\n - The goal of Colorland is to move your game piece from the start square to square $N$.\n - Players take turns drawing from a shuffled deck of cards. Each card has a single color on it. A player moves to the nearest square after their current square with the color indicated by the drawn card.\n - If there are no squares of the drawn color after a player\u2019s current square, that player\u2019s piece does not move and their turn ends.\n\nYancy is interested in the length of play required for different board layouts. She would like to know the smallest number of cards any one player would have to draw to complete the game.\n\nFor instance, the board for Sample Input 3 is [Start, Blue, Orange, Pink, Green, Red, Yellow, Yellow, Yellow, Yellow]. The best first draw is Yellow which advances a player from Start to the $6^\\text {th}$ square. From the $6^\\text {th}$ square to the end, only a Yellow draw will advance the player. Therefore the smallest number of draws is $4$.\n\n-----Input-----\nThe first line of input consists of a single integer $N$ ($1 \\le N \\le 200000$) denoting the number of squares. The next $N$ lines each contain a single string $S_ i \\in \\{ \\text {Blue}, \\text {Orange}, \\text {Pink}, \\text {Green}, \\text {Red}, \\text {Yellow}\\} $ representing the color of the $i^\\text {th}$ square, starting with the first square on the board (not counting the start square).\n\n-----Output-----\nOutput a single integer equal to the minimum number of draws required to move from the start square to square $N$.\n\n-----Examples-----\nSample Input 1:\n6\nBlue\nOrange\nPink\nGreen\nRed\nYellow\nSample Output 1:\n1\n\nSample Input 2:\n12\nBlue\nOrange\nPink\nGreen\nRed\nYellow\nYellow\nRed\nGreen\nPink\nOrange\nBlue\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given a sequence of integers a, satisfying all of the following conditions: - The length of a is N. - Each element in a is an integer between 1 and K, inclusive. - a is a palindrome, that is, reversing the order of elements in a will result in the same sequence as the original. Then, Aoki will perform the following operation an arbitrary number of times: - Move the first element in a to the end of a. How many sequences a can be obtained after this procedure, modulo 10^9+7 \n-----Input----- The input is given from Standard Input in the following format: N K -----Output----- Print the number of the sequences a that can be obtained after the procedure, modulo 10^9+7. -----Sample Input----- 4 2 -----Sample Output----- 6 The following six sequences can be obtained:  - (1, 1, 1, 1)  - (1, 1, 2, 2)  - (1, 2, 2, 1)  - (2, 2, 1, 1)  - (2, 1, 1, 2)  - (2, 2, 2, 2)\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nTakahashi and Aoki are going to together construct a sequence of integers.\nFirst, Takahashi will provide a sequence of integers a, satisfying all of the following conditions:\n - The length of a is N.\n - Each element in a is an integer between 1 and K, inclusive.\n - a is a palindrome, that is, reversing the order of elements in a will result in the same sequence as the original.\nThen, Aoki will perform the following operation an arbitrary number of times:\n - Move the first element in a to the end of a.\nHow many sequences a can be obtained after this procedure, modulo 10^9+7?\n\n-----Constraints-----\n - 1\u2264N\u226410^9\n - 1\u2264K\u226410^9\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of the sequences a that can be obtained after the procedure, modulo 10^9+7.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n6\n\nThe following six sequences can be obtained:\n - (1, 1, 1, 1)\n - (1, 1, 2, 2)\n - (1, 2, 2, 1)\n - (2, 2, 1, 1)\n - (2, 1, 1, 2)\n - (2, 2, 2, 2)\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given a set of Toy Train from Bob. It consists of one train and a connected railway network of $n$ stations, enumerated from $1$ through $n$. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station $i$ is station $i+1$ if $1 \\leq i < n$ or station $1$ if $i = n$. It takes the train $1$ second to travel to its next station as described. Bob gave Alice a fun task before he left: to deliver $m$ candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from $1$ through $m$. Candy $i$ ($1 \\leq i \\leq m$), now at station $a_i$, should be delivered to station $b_i$ ($a_i \\neq b_i$). The blue numbers on the candies correspond to $b_i$ values. The image corresponds to the $1$-st example. The train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible. Now, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from\n-----Input----- The first line contains two space-separated integers $n$ and $m$ ($2 \\leq n \\leq 100$; $1 \\leq m \\leq 200$) \u2014 the number of stations and the number of candies, respectively. The $i$-th of the following $m$ lines contains two space-separated integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n$; $a_i \\neq b_i$) \u2014 the station that initially contains candy $i$ and the destination station of the candy, respectively. -----Output----- In the first and only line, print $n$ space-separated integers, the $i$-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station $i$. -----Examples----- Input 5 7 2 4 5 1 2 3 3 4 4 1 5 3 3 5 Output 10 9 10 10 9  Input 2 3 1 2 1 2 1 2 Output 5 6  -----Note----- Consider the second sample. If the train started at station $1$, the optimal strategy is as follows.  Load the first candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the first candy.  Proceed to station $1$. This step takes $1$ second.  Load the second candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the second candy.  Proceed to station $1$. This step takes $1$ second.  Load the third candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the third candy.  Hence, the train needs $5$ seconds to complete the tasks. If the train were to start at station $2$, however, it would need to move to station $1$ before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is $5+1 = 6$ seconds.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThis is a simplified version of the task Toy Train. These two versions differ only in the constraints. Hacks for this version are disabled.\n\nAlice received a set of Toy Train\u2122 from Bob. It consists of one train and a connected railway network of $n$ stations, enumerated from $1$ through $n$. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station $i$ is station $i+1$ if $1 \\leq i < n$ or station $1$ if $i = n$. It takes the train $1$ second to travel to its next station as described.\n\nBob gave Alice a fun task before he left: to deliver $m$ candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from $1$ through $m$. Candy $i$ ($1 \\leq i \\leq m$), now at station $a_i$, should be delivered to station $b_i$ ($a_i \\neq b_i$). [Image] The blue numbers on the candies correspond to $b_i$ values. The image corresponds to the $1$-st example. \n\nThe train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.\n\nNow, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers $n$ and $m$ ($2 \\leq n \\leq 100$; $1 \\leq m \\leq 200$) \u2014 the number of stations and the number of candies, respectively.\n\nThe $i$-th of the following $m$ lines contains two space-separated integers $a_i$ and $b_i$ ($1 \\leq a_i, b_i \\leq n$; $a_i \\neq b_i$) \u2014 the station that initially contains candy $i$ and the destination station of the candy, respectively.\n\n\n-----Output-----\n\nIn the first and only line, print $n$ space-separated integers, the $i$-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station $i$.\n\n\n-----Examples-----\nInput\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\nOutput\n10 9 10 10 9 \n\nInput\n2 3\n1 2\n1 2\n1 2\n\nOutput\n5 6 \n\n\n\n-----Note-----\n\nConsider the second sample.\n\nIf the train started at station $1$, the optimal strategy is as follows.  Load the first candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the first candy.  Proceed to station $1$. This step takes $1$ second.  Load the second candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the second candy.  Proceed to station $1$. This step takes $1$ second.  Load the third candy onto the train.  Proceed to station $2$. This step takes $1$ second.  Deliver the third candy. \n\nHence, the train needs $5$ seconds to complete the tasks.\n\nIf the train were to start at station $2$, however, it would need to move to station $1$ before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is $5+1 = 6$ seconds.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You have to help L pkass find the shortest path from node $0$ to node $n-1$. The forest is modelled as a graph with $n$ nodes. Nodes are numbered $0, 1, ..., n-1$. L pkass is located in node $0$, and his home is located in node $n-1$. Two nodes $v,w$ are connected if $v+1 = w$. Additionally, two nodes are connected if they are both a multiple of some integer $K$. In this problem, we do not consider $0$ to be a multiple of $K$.\n-----Input----- One line with two integers, the number of nodes $1 \\leq n \\leq 10^{18}$, and the number $1 \\leq K \\leq 10^{18}$. -----Output----- Print a single integer on a single line: the shortest path from node 0 to node $n-1$. -----Examples----- Sample Input: 5 2 Sample Output: 3\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nL\u00f6pkass is out running in the forest again. He loves running in the forest. However, there is a programming competition starting in a couple of hours, and he needs to calculate how long it will take him to get home (so that he can stay in the fresh air as long as possible). You have to help him out.\n\nThe forest is modelled as a graph with $n$ nodes. Nodes are numbered $0, 1, ..., n-1$. L\u00f6pkass is located in node $0$, and his home is located in node $n-1$. Two nodes $v,w$ are connected if $v+1 = w$. Additionally, two nodes are connected if they are both a multiple of some integer $K$. In this problem, we do not consider $0$ to be a multiple of $K$.\n\n-----Input-----\nOne line with two integers, the number of nodes $1 \\leq n \\leq 10^{18}$, and the number $1 \\leq K \\leq 10^{18}$.\n\n-----Output-----\nPrint a single integer on a single line: the shortest path from node 0 to node $n-1$.\n\n-----Examples-----\nSample Input:\n5 2\nSample Output:\n3\n\"\"\"\ndef code():"
}