{
    "0": "Python 3\n\"\"\"\nYou are given a graph with $n$ vertices and $m$ edges.\nYou should find two disjoint subsets of its vertices A and B, such that both A and B are vertex covers or claim it's impossible.\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of vertices and the number of edges in the graph, respectively.\n\nEach of the next m lines contains a pair of integers u_{i} and v_{i} (1  \u2264 u_{i},  v_{i}  \u2264  n), denoting an undirected edge between u_{i} and v_{i}.\n\n-----Output-----\n\nIf it's impossible to split the graph, print \"-1\" (without quotes).\n\nIf there are two disjoint sets of vertices, such that both sets are vertex\ncover, print their descriptions. Each description must contain two lines. The\nfirst line contains a single integer k denoting the number of vertices in that\nvertex cover, and the second line contains k integers\u00a0\u2014 the indices of\nvertices.\n\n\n-----Examples-----\nInput\n4 2\n1 2\n2 3\n\nOutput\n1\n2 \n2\n1 3 \n\nInput\n3 3\n1 2\n2 3\n1 3\n\nOutput\n-1\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nRecently, Pari and Arya did some research about NP-Hard problems and they found the minimum vertex cover problem very interesting.\n\nSuppose the graph G is given. Subset A of its vertices is called a vertex cover of this graph, if for each edge uv there is at least one endpoint of it in this set, i.e. $u \\in A$ or $v \\in A$ (or both).\n\nPari and Arya have won a great undirected graph as an award in a team contest. Now they have to split it in two parts, but both of them want their parts of the graph to be a vertex cover.\n\nThey have agreed to give you their graph and you need to find two disjoint subsets of its vertices A and B, such that both A and B are vertex cover or claim it's impossible. Each vertex should be given to no more than one of the friends (or you can even keep it for yourself).\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of vertices and the number of edges in the prize graph, respectively.\n\nEach of the next m lines contains a pair of integers u_{i} and v_{i} (1  \u2264  u_{i},  v_{i}  \u2264  n), denoting an undirected edge between u_{i} and v_{i}. It's guaranteed the graph won't contain any self-loops or multiple edges.\n\n\n-----Output-----\n\nIf it's impossible to split the graph between Pari and Arya as they expect, print \"-1\" (without quotes).\n\nIf there are two disjoint sets of vertices, such that both sets are vertex cover, print their descriptions. Each description must contain two lines. The first line contains a single integer k denoting the number of vertices in that vertex cover, and the second line contains k integers\u00a0\u2014 the indices of vertices. Note that because of m \u2265 1, vertex cover cannot be empty.\n\n\n-----Examples-----\nInput\n4 2\n1 2\n2 3\n\nOutput\n1\n2 \n2\n1 3 \n\nInput\n3 3\n1 2\n2 3\n1 3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, you can give the vertex number 2 to Arya and vertices numbered 1 and 3 to Pari and keep vertex number 4 for yourself (or give it someone, if you wish).\n\nIn the second sample, there is no way to satisfy both Pari and Arya.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou will have to permutate through a string of lowercase letters, each permutation will start at a and you must calculate how many iterations it takes to reach the current permutation.\n\nExamples:\ninput: 'a'\nresult: 1\n\ninput: 'c'\nresult: 3\n\ninput: 'z'\nresult: 26\n\ninput: 'foo'\nresult: 3759\n\ninput: 'aba'\nresult: 27\n\ninput: 'abb'\nresult: 28\n\n\"\"\"\ndef permutation_position(perm):",
    "3": "Python 3\n\"\"\"\n#Permutation  position\nIn this kata you will have to permutate through a string of lowercase letters, each permutation will start at ```a``` and you must calculate how many iterations it takes to reach the current permutation.\n\n##examples\n```\ninput: 'a'\nresult: 1\n\ninput: 'c'\nresult: 3\n\ninput: 'z'\nresult: 26\n\ninput: 'foo'\nresult: 3759\n\ninput: 'aba'\nresult: 27\n\ninput: 'abb'\nresult: 28\n\n```\n\"\"\"\ndef permutation_position(perm):",
    "4": "Python 3\n\"\"\"\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nGiven an alphanumeric string made up of digits and lower case Latin characters only, find the sum of all the digit characters in the string.\n\n-----Input-----\n- The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n- Each test case is described with a single line containing a string S, the alphanumeric string.\n\n-----Output-----\n- For each test case, output a single line containing the sum of all the digit characters in that string.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 |S| \u2264 1000, where |S| is the length of the string S.\n\n-----Example-----\nInput:\n1\nab1231da\n\nOutput:\n7\n\n-----Explanation-----\nThe digits in this string are 1, 2, 3 and 1. Hence, the sum of all of them is 7.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou have to apply + and - symbol between the given list non-negative integers to achieve the target S.\n\nIn how many ways are there to assign symbols to make sum of integers equal to target S.  \n\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\n\n\n\"\"\"\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:",
    "7": "Python 3\n\"\"\"\nYou are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.\n \n\nFind out how many ways to assign symbols to make sum of integers equal to target S.  \n\n\nExample 1:\n\nInput: nums is [1, 1, 1, 1, 1], S is 3. \nOutput: 5\nExplanation: \n\n-1+1+1+1+1 = 3\n+1-1+1+1+1 = 3\n+1+1-1+1+1 = 3\n+1+1+1-1+1 = 3\n+1+1+1+1-1 = 3\n\nThere are 5 ways to assign symbols to make the sum of nums be target 3.\n\n\n\nNote:\n\nThe length of the given array is positive and will not exceed 20. \nThe sum of elements in the given array will not exceed 1000.\nYour output answer is guaranteed to be fitted in a 32-bit integer.\n\"\"\"\nclass Solution:\n    def findTargetSumWays(self, nums: List[int], S: int) -> int:",
    "8": "Python 3\n\"\"\"\nYou are given an array $a$ of item of size $N$.Only one type of item can be chosen in a day and purchased at most 2 items of that type.Find minimum number of days in which all items are purchased.\n\n-----Input:-----\n- First-line will contain $N$, the number of item.  \n- The next line will contain $N$ space integers denoting the type of item.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nDinesh is very fond of sweets recently his aunt Riya gifted him an array $a$ of sweets of size $N$. The ith sweet is of the type $a[i]$. His mother told him that he can choose one type of sweet in a day and eat at most 2 sweets of that type. Since he has to eat all the sweets as quickly as possible because his cousins are arriving. Find out the minimum number of days in which he can eat all the sweets gifted by his aunt Riya. \n\n-----Input:-----\n- First-line will contain $N$, the number of sweets.  \n- The next line will contain $N$ space integers denoting the type of sweets.\n\n-----Output:-----\nOutput the minimum number of days in which he can eat all the sweets.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- $1 \\leq a[i] \\leq 10^3$\n\n-----Sample Input:-----\n3\n1 2 2\n\n-----Sample Output:-----\n2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nyou are given a list of of integers for every index print the index if there is a smaller value after that index\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of indexes with a bad values in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nPolycarp analyzes the prices of the new berPhone. At his disposal are the prices for $n$ last days: $a_1, a_2, \\dots, a_n$, where $a_i$ is the price of berPhone on the day $i$.\n\nPolycarp considers the price on the day $i$ to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of days with a bad price is $3$ \u2014 these are days $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$).\n\nPrint the number of days with a bad price.\n\nYou have to answer $t$ independent data sets.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer $n$ ($1 \\le n \\le 150000$) \u2014 the number of days. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$), where $a_i$ is the price on the $i$-th day.\n\nIt is guaranteed that the sum of $n$ over all data sets in the test does not exceed $150000$.\n\n\n-----Output-----\n\nPrint $t$ integers, the $j$-th of which should be equal to the number of days with a bad price in the $j$-th input data set.\n\n\n-----Example-----\nInput\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\nOutput\n3\n0\n1\n8\n2\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nThere are n towers in a row. The i-th tower is made of h_{i} identical blocks. \n\nBlock is called internal if all its neighbors has each side adjacent to other block or to the floor. Otherwise, block is boundary. In one operation you can destroy all boundary blocks.\n\nCount how many operations you will take to destroy all towers.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n space-separated integers h_1, h_2, ..., h_{n} (1 \u2264 h_{i} \u2264 10^9) \u2014 sizes of towers.\n\n\n-----Output-----\n\nPrint the number of operations needed to destroy all towers.\n\n\n-----Examples-----\nInput\n6\n2 1 4 6 2 2\n\nOutput\n3\n\nInput\n7\n3 3 3 1 3 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color.  [Image]  After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLimak is a little bear who loves to play. Today he is playing by destroying block towers. He built n towers in a row. The i-th tower is made of h_{i} identical blocks. For clarification see picture for the first sample.\n\nLimak will repeat the following operation till everything is destroyed.\n\nBlock is called internal if it has all four neighbors, i.e. it has each side (top, left, down and right) adjacent to other block or to the floor. Otherwise, block is boundary. In one operation Limak destroys all boundary blocks. His paws are very fast and he destroys all those blocks at the same time.\n\nLimak is ready to start. You task is to count how many operations will it take him to destroy all towers.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n space-separated integers h_1, h_2, ..., h_{n} (1 \u2264 h_{i} \u2264 10^9) \u2014 sizes of towers.\n\n\n-----Output-----\n\nPrint the number of operations needed to destroy all towers.\n\n\n-----Examples-----\nInput\n6\n2 1 4 6 2 2\n\nOutput\n3\n\nInput\n7\n3 3 3 1 3 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe picture below shows all three operations for the first sample test. Each time boundary blocks are marked with red color.  [Image]  After first operation there are four blocks left and only one remains after second operation. This last block is destroyed in third operation.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are at top-left corner of an m X n grid.\nConsidering only down or right actions, how many unique paths are present to reach bottom-right corner.\n\nExample 1:\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n3. Down -> Right -> Right\n\n\nExample 2:\n\n\nInput: m = 7, n = 3\nOutput: 28\n\"\"\"\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:",
    "15": "Python 3\n\"\"\"\nA robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n\nHow many possible unique paths are there?\n\n\nAbove is a 7 x 3 grid. How many possible unique paths are there?\n\nNote: m and n will be at most 100.\n\n\nExample 1:\n\n\nInput: m = 3, n = 2\nOutput: 3\nExplanation:\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Right -> Down\n2. Right -> Down -> Right\n3. Down -> Right -> Right\n\n\nExample 2:\n\n\nInput: m = 7, n = 3\nOutput: 28\n\"\"\"\nclass Solution:\n    def uniquePaths(self, m: int, n: int) -> int:",
    "16": "Python 3\n\"\"\"\nGiven a string and your task is to return the most valuable character. The value of a character is the difference between the index of its last occurrence and the index of its first occurrence. Return the character that has the highest value. If there is a tie, return the alphabetically lowest character. `[For Golang return rune]`\n\nAll inputs will be lower case. \n\n```\nFor example:\nsolve('a') = 'a'\nsolve('ab') = 'a'. Last occurrence is equal to first occurrence of each character. Return lexicographically lowest.\nsolve(\"axyzxyz\") = 'x'\n```\n\n\"\"\"\ndef solve(st):",
    "17": "Python 3\n\"\"\"\nIn this Kata, you will be given a string and your task is to return the most valuable character. The value of a character is the difference between the index of its last occurrence and the index of its first occurrence. Return the character that has the highest value. If there is a tie, return the alphabetically lowest character. `[For Golang return rune]`\n\nAll inputs will be lower case. \n\n```\nFor example:\nsolve('a') = 'a'\nsolve('ab') = 'a'. Last occurrence is equal to first occurrence of each character. Return lexicographically lowest.\nsolve(\"axyzxyz\") = 'x'\n```\n\nMore examples in test cases. Good luck!\n\"\"\"\ndef solve(st):",
    "18": "Python 3\n\"\"\"\n# Task\n The best match is the match \"Zamalek\" lost with the minimum goal difference. If there is more than one match with the same difference, choose the one \"Zamalek\" scored more goals in.\n \n Given the information about all matches \"AL-AHLY\" and \"Zamalek\" played, return the `index` of the best match (`0-based`). If more than one valid result, return the smallest index.\n\n# Example\n\n For `ALAHLYGoals = [6,4] and zamalekGoals = [1,2]`, the output should be 1.\n \n Because `4 - 2` is less than `6 - 1`\n \n For `ALAHLYGoals = [1,2,3,4,5] and zamalekGoals = [0,1,2,3,4]`, the output should be 4.\n \n The goal difference of all matches are 1, but at 4th match \"Zamalek\" scored more goals in. So the result is `4`.\n \n# Input/Output\n\n\n -  `[input]` integer array `ALAHLYGoals`\n\n  The number of goals \"AL-AHLY\" scored in each match.\n\n\n - `[input]` integer array `zamalekGoals`\n\n  The number of goals \"Zamalek\" scored in each match. It is guaranteed that zamalekGoals[i] < ALAHLYGoals[i] for each element.\n\n\n - `[output]` an integer\n\n  Index of the best match.\n\"\"\"\ndef best_match(goals1, goals2):",
    "19": "Python 3\n\"\"\"\n# Task\n \"AL-AHLY\" and \"Zamalek\" are the best teams in Egypt, but \"AL-AHLY\" always wins the matches between them. \"Zamalek\" managers want to know what is the best match they've played so far.\n \n The best match is the match they lost with the minimum goal difference. If there is more than one match with the same difference, choose the one \"Zamalek\" scored more goals in.\n \n Given the information about all matches they played, return the `index` of the best match (`0-based`). If more than one valid result, return the smallest index.\n\n# Example\n\n For `ALAHLYGoals = [6,4] and zamalekGoals = [1,2]`, the output should be 1.\n \n Because `4 - 2` is less than `6 - 1`\n \n For `ALAHLYGoals = [1,2,3,4,5] and zamalekGoals = [0,1,2,3,4]`, the output should be 4.\n \n The goal difference of all matches are 1, but at 4th match \"Zamalek\" scored more goals in. So the result is `4`.\n \n# Input/Output\n\n\n -  `[input]` integer array `ALAHLYGoals`\n\n  The number of goals \"AL-AHLY\" scored in each match.\n\n\n - `[input]` integer array `zamalekGoals`\n\n  The number of goals \"Zamalek\" scored in each match. It is guaranteed that zamalekGoals[i] < ALAHLYGoals[i] for each element.\n\n\n - `[output]` an integer\n\n  Index of the best match.\n\"\"\"\ndef best_match(goals1, goals2):"
}