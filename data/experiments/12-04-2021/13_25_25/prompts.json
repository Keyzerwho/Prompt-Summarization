{
    "0": "Python 3\n\"\"\"\nDisplay whether the number $(N)$ obtained from user is a one digit number, 2 digit number, 3 digit number or more than 3 digit number\n\n-----Input:-----\n- First line will contain the number $N$,\n\n-----Output:-----\nPrint \"1\" if N is a 1 digit number.\nPrint \"2\" if N is a 2 digit number.\nPrint \"3\" if N is a 3 digit number.\nPrint \"More than 3 digits\" if N has more than 3 digits.\n\n-----Constraints-----\n- $0 \\leq N \\leq 1000000$\n\n-----Sample Input:-----\n9\n\n-----Sample Output:-----\n1\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nWrite a program to obtain a number $(N)$ from the user and display whether the number is a one digit number, 2 digit number, 3 digit number or more than 3 digit number\n\n-----Input:-----\n- First line will contain the number $N$,\n\n-----Output:-----\nPrint \"1\" if N is a 1 digit number.\nPrint \"2\" if N is a 2 digit number.\nPrint \"3\" if N is a 3 digit number.\nPrint \"More than 3 digits\" if N has more than 3 digits.\n\n-----Constraints-----\n- $0 \\leq N \\leq 1000000$\n\n-----Sample Input:-----\n9\n\n-----Sample Output:-----\n1\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven an array a with n distinct integers. Construct an array b by permuting a such that for every non-empty subset of indices S = {x_1, x_2, ..., x_{k}} the sums of elements on that positions in a and b are different.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 22)\u00a0\u2014 the size of the array.\n\nThe second line contains n space-separated distinct integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nIf there is no such array b, print -1.\n\nOtherwise in the only line print n space-separated integers b_1, b_2, ..., b_{n}. Note that b must be a permutation of a.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2 1 \n\nInput\n4\n1000 100 10 1\n\nOutput\n100 1 1000 10\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are given an array a with n distinct integers. Construct an array b by permuting a such that for every non-empty subset of indices S = {x_1, x_2, ..., x_{k}} (1 \u2264 x_{i} \u2264 n, 0 < k < n) the sums of elements on that positions in a and b are different, i.\u00a0e. $\\sum_{i = 1}^{k} a_{x_{i}} \\neq \\sum_{i = 1}^{k} b_{x_{i}}$\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 22)\u00a0\u2014 the size of the array.\n\nThe second line contains n space-separated distinct integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nIf there is no such array b, print -1.\n\nOtherwise in the only line print n space-separated integers b_1, b_2, ..., b_{n}. Note that b must be a permutation of a.\n\nIf there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2 1 \n\nInput\n4\n1000 100 10 1\n\nOutput\n100 1 1000 10\n\n\n\n-----Note-----\n\nAn array x is a permutation of y, if we can shuffle elements of y such that it will coincide with x.\n\nNote that the empty subset and the subset containing all indices are not counted.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a permutation $p_1, p_2, \\ldots, p_n$.\n\nIn one move you can swap two adjacent values.\n\nYou want to perform a minimum number of moves, such that in the end there should be an integer $i$, $1 \\leq i \\leq n-k+1$ such that $p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$.\n\nLet $f(k)$ be the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation.\n\nYou need to find $f(1), f(2), \\ldots, f(n)$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $n$ ($1 \\leq n \\leq 200\\,000$): the number of elements in the permutation.\n\nThe next line of input contains $n$ integers $p_1, p_2, \\ldots, p_n$: given permutation ($1 \\leq p_i \\leq n$).\n\n\n-----Output-----\n\nPrint $n$ integers, the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation, for $k=1, 2, \\ldots, n$.\n\n\n-----Examples-----\nInput\n5\n5 4 3 2 1\n\nOutput\n0 1 3 6 10 \n\nInput\n3\n1 2 3\n\nOutput\n0 0 0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a permutation $p_1, p_2, \\ldots, p_n$.\n\nIn one move you can swap two adjacent values.\n\nYou want to perform a minimum number of moves, such that in the end there will exist a subsegment $1,2,\\ldots, k$, in other words in the end there should be an integer $i$, $1 \\leq i \\leq n-k+1$ such that $p_i = 1, p_{i+1} = 2, \\ldots, p_{i+k-1}=k$.\n\nLet $f(k)$ be the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation.\n\nYou need to find $f(1), f(2), \\ldots, f(n)$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $n$ ($1 \\leq n \\leq 200\\,000$): the number of elements in the permutation.\n\nThe next line of input contains $n$ integers $p_1, p_2, \\ldots, p_n$: given permutation ($1 \\leq p_i \\leq n$).\n\n\n-----Output-----\n\nPrint $n$ integers, the minimum number of moves that you need to make a subsegment with values $1,2,\\ldots,k$ appear in the permutation, for $k=1, 2, \\ldots, n$.\n\n\n-----Examples-----\nInput\n5\n5 4 3 2 1\n\nOutput\n0 1 3 6 10 \n\nInput\n3\n1 2 3\n\nOutput\n0 0 0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven a string, return the minimal number of parenthesis reversals needed to make balanced parenthesis.\n\nFor example:\nInput:\nsolve(\")(\")\nOutput:\n2\nExplanation:\nBecause we need to reverse \")\" to \"(\" and \"(\" to \")\". These are 2 reversals.\n\nInput: \nsolve(\"(((())\")\nOutput:\n1\nExplanation:\nWe need to reverse just one \"(\" parenthesis to make it balanced.\n\nInput:\nsolve(\"(((\")\nOutput:\n-1\nExplanation:\nNot possible to form balanced parenthesis. Return -1.\n\"\"\"\ndef solve(s):",
    "7": "Python 3\n\"\"\"\nGiven a string, return the minimal number of parenthesis reversals needed to make balanced parenthesis. \n\nFor example:\n```Javascript\nsolve(\")(\") = 2 Because we need to reverse \")\" to \"(\" and \"(\" to \")\". These are 2 reversals. \nsolve(\"(((())\") = 1 We need to reverse just one \"(\" parenthesis to make it balanced.\nsolve(\"(((\") = -1 Not possible to form balanced parenthesis. Return -1.\n```\n\nParenthesis will be either `\"(\"` or `\")\"`. \n\nMore examples in the test cases. \n\nGood luck.\n\"\"\"\ndef solve(s):",
    "8": "Python 3\n\"\"\"\nYou are given following inputs: original string S, starting index i, source word x and target word y. \n\nIf x starts at position i in S, you need to replace that occurrence of x with y.\n\nConsider:\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "9": "Python 3\n\"\"\"\nTo some string S, we will perform some\u00a0replacement\u00a0operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word\u00a0x\u00a0and a target word\u00a0y.\u00a0 The rule is that if x\u00a0starts at position i\u00a0in the original string S, then we will replace that occurrence of\u00a0x\u00a0with\u00a0y.\u00a0 If not, we do nothing.\nFor example, if we have\u00a0S = \"abcd\"\u00a0and we have some replacement operation\u00a0i = 2, x = \"cd\", y = \"ffff\", then because\u00a0\"cd\"\u00a0starts at position 2\u00a0in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation\u00a0i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string\u00a0S[2] = 'c', which doesn't match\u00a0x[0] = 'e'.\nAll these operations occur simultaneously.\u00a0 It's guaranteed that there won't be any overlap in replacement: for example,\u00a0S = \"abc\", indexes = [0, 1],\u00a0sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <=\u00a0indexes.length =\u00a0sources.length =\u00a0targets.length <= 100\n0\u00a0<\u00a0indexes[i]\u00a0< S.length <= 1000\nAll characters in given inputs are lowercase letters.\n\"\"\"\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:",
    "10": "Python 3\n\"\"\"\nIn your tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost. When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point.\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\\le t \\le 20,000$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers $n, k$ ($1\\le n\\le 100,000$, $0\\le k\\le n$) \u2013 the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string $s$ of length $n$ containing only the characters W and L. If you have won the $i$-th game then $s_i=\\,$W, if you have lost the $i$-th game then $s_i=\\,$L.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\n\n-----Output-----\n\nFor each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou like playing chess tournaments online.\n\nIn your last tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point (since there is not a \"previous game\").\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains an integer $t$ ($1\\le t \\le 20,000$) \u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each testcase contains two integers $n, k$ ($1\\le n\\le 100,000$, $0\\le k\\le n$) \u2013 the number of games played and the number of outcomes that you can change.\n\nThe second line contains a string $s$ of length $n$ containing only the characters W and L. If you have won the $i$-th game then $s_i=\\,$W, if you have lost the $i$-th game then $s_i=\\,$L.\n\nIt is guaranteed that the sum of $n$ over all testcases does not exceed $200,000$.\n\n\n-----Output-----\n\nFor each testcase, print a single integer \u2013 the maximum score you can get by cheating in the optimal way.\n\n\n-----Example-----\nInput\n8\n5 2\nWLWLL\n6 5\nLLLWWL\n7 1\nLWLWLWL\n15 5\nWWWLLLWWWLLLWWW\n40 7\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\n1 0\nL\n1 1\nL\n6 1\nWLLWLW\n\nOutput\n7\n11\n6\n26\n46\n0\n1\n6\n\n\n\n-----Note-----\n\nExplanation of the first testcase. Before changing any outcome, the score is $2$. Indeed, you won the first game, so you got $1$ point, and you won also the third, so you got another $1$ point (and not $2$ because you lost the second game).\n\nAn optimal way to cheat is to change the outcomes of the second and fourth game. Doing so, you end up winning the first four games (the string of the outcomes becomes WWWWL). Hence, the new score is $7=1+2+2+2$: $1$ point for the first game and $2$ points for the second, third and fourth game.\n\nExplanation of the second testcase. Before changing any outcome, the score is $3$. Indeed, you won the fourth game, so you got $1$ point, and you won also the fifth game, so you got $2$ more points (since you won also the previous game).\n\nAn optimal way to cheat is to change the outcomes of the first, second, third and sixth game. Doing so, you end up winning all games (the string of the outcomes becomes WWWWWW). Hence, the new score is $11 = 1+2+2+2+2+2$: $1$ point for the first game and $2$ points for all the other games.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nA game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves:  Take one gold coin from the chest.  Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. \n\nBoth players will try to maximize the number of coins they have. Your need to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 10^5)$ denotes the number of test cases.\n\nThe next $T$ lines each contain a single integer $N$ $(1 \\le N \\le 10^{18})$.\n\n\n-----Output-----\n\n$T$ lines, each line is the answer requested by Mr. Chanek.\n\n\n-----Example-----\nInput\n2\n5\n6\n\nOutput\n2\n4\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLately, Mr. Chanek frequently plays the game Arena of Greed. As the name implies, the game's goal is to find the greediest of them all, who will then be crowned king of Compfestnesia.\n\nThe game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves:  Take one gold coin from the chest.  Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even. \n\nBoth players will try to maximize the number of coins they have. Mr. Chanek asks your help to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 10^5)$ denotes the number of test cases.\n\nThe next $T$ lines each contain a single integer $N$ $(1 \\le N \\le 10^{18})$.\n\n\n-----Output-----\n\n$T$ lines, each line is the answer requested by Mr. Chanek.\n\n\n-----Example-----\nInput\n2\n5\n6\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nFor the first case, the game is as follows:   Mr. Chanek takes one coin.  The opponent takes two coins.  Mr. Chanek takes one coin.  The opponent takes one coin. \n\nFor the second case, the game is as follows:   Mr. Chanek takes three coins.  The opponent takes one coin.  Mr. Chanek takes one coin.  The opponent takes one coin.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYour task is to write a function that does just what the title suggests with an array/list/vector of integers and the expected number n of smallest elements to return.\n\nExamples:\nInput:\nfirst_n_smallest([1,2,3,4,5],3)\nOutput:\n[1,2,3]\n\nInput:\nfirst_n_smallest([5,4,3,2,1],3)\nOutput:\n[3,2,1]\n\nInput:\nfirst_n_smallest([1,2,3,4,1],3)\nOutput:\n[1,2,1]\n\nInput:\nfirst_n_smallest([1,2,3,-4,0],3)\nOutput:\n[1,-4,0]\n\nInput:\nfirst_n_smallest([1,2,3,4,5],0)\nOutput:\n[]\n\n\"\"\"\ndef first_n_smallest(arr, n):",
    "15": "Python 3\n\"\"\"\nYour task is to write a function that does just what the title suggests (so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number `n` of smallest elements to return.\n\nAlso:\n\n* the number of elements to be returned cannot be higher than the array/list/vector length;\n* elements can be duplicated;\n* in case of duplicates, just return them according to the original order (see third example for more clarity).\n\nSame examples and more in the test cases:\n\n```python\nfirst_n_smallest([1,2,3,4,5],3) == [1,2,3]\nfirst_n_smallest([5,4,3,2,1],3) == [3,2,1]\nfirst_n_smallest([1,2,3,4,1],3) == [1,2,1]\nfirst_n_smallest([1,2,3,-4,0],3) == [1,-4,0]\nfirst_n_smallest([1,2,3,4,5],0) == []\n```\n\n[Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077) also available.\n\"\"\"\ndef first_n_smallest(arr, n):",
    "16": "Python 3\n\"\"\"\nYou have to line up $2n$ number of different items which are in $n$ pairs.\n\nFind the minimum number of swaps of adjacent positions which must be performed to make it so that each item pair occupies adjacent positions in the line.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of pairs of different item.\n\nThe second line contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$. For each $i$ with $1 \\le i \\le n$, $i$ appears exactly twice. If $a_j = a_k = i$, that means that the $j$-th and $k$-th itme in the line form a pair.\n\n\n-----Output-----\n\nOutput a single integer, representing the minimum number of adjacent swaps needed to line the item up so that each pair occupies adjacent positions.\n\n\n-----Examples-----\nInput\n4\n1 1 2 3 3 2 4 4\n\nOutput\n2\n\nInput\n3\n1 1 2 2 3 3\n\nOutput\n0\n\nInput\n3\n3 1 2 3 1 2\n\nOutput\n3\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nAllen is hosting a formal dinner party. $2n$ people come to the event in $n$ pairs (couples). After a night of fun, Allen wants to line everyone up for a final picture. The $2n$ people line up, but Allen doesn't like the ordering. Allen prefers if each pair occupies adjacent positions in the line, as this makes the picture more aesthetic.\n\nHelp Allen find the minimum number of swaps of adjacent positions he must perform to make it so that each couple occupies adjacent positions in the line.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of pairs of people.\n\nThe second line contains $2n$ integers $a_1, a_2, \\dots, a_{2n}$. For each $i$ with $1 \\le i \\le n$, $i$ appears exactly twice. If $a_j = a_k = i$, that means that the $j$-th and $k$-th people in the line form a couple.\n\n\n-----Output-----\n\nOutput a single integer, representing the minimum number of adjacent swaps needed to line the people up so that each pair occupies adjacent positions.\n\n\n-----Examples-----\nInput\n4\n1 1 2 3 3 2 4 4\n\nOutput\n2\n\nInput\n3\n1 1 2 2 3 3\n\nOutput\n0\n\nInput\n3\n3 1 2 3 1 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample case, we can transform $1 1 2 3 3 2 4 4 \\rightarrow 1 1 2 3 2 3 4 4 \\rightarrow 1 1 2 2 3 3 4 4$ in two steps. Note that the sequence $1 1 2 3 3 2 4 4 \\rightarrow 1 1 3 2 3 2 4 4 \\rightarrow 1 1 3 3 2 2 4 4$ also works in the same number of steps.\n\nThe second sample case already satisfies the constraints; therefore we need $0$ swaps.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Determine how many submissions received their verdicts after a delay of more than $5$ minutes.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of submissions for which the judging was delayed by more than 5 minutes.\n\n\n\n-----Example Input-----\n1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n\n-----Example Output-----\n2\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou have been recently hired as a developer in CodeChef. Your first mission is to implement a feature that will determine the number of submissions that were judged late in a contest.\nThere are $N$ submissions, numbered $1$ through $N$. For each valid $i$, the $i$-th submission was submitted at time $S_i$ and judged at time $J_i$ (in minutes). Submitting and judging both take zero time. Please determine how many submissions received their verdicts after a delay of more than $5$ minutes.\n\n-----Input-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of the input contains a single integer $N$.\n- $N$ lines follow. For each valid $i$, the $i$-th of these lines contains two space-separated integers $S_i$ and $J_i$.\n\n-----Output-----\nFor each test case, print a single line containing one integer \u2014 the number of submissions for which the judging was delayed by more than 5 minutes.\n\n-----Constraints-----\n- $1 \\le T \\le 100$\n- $1 \\le N \\le 100$\n- $1 \\le S_i \\le J_i \\le 300$ for each valid $i$\n\n-----Subtasks-----\nSubtask #1 (100 points): original constraints\n\n-----Example Input-----\n1\n5\n1 3\n4 4\n4 10\n1 11\n2 7\n\n-----Example Output-----\n2\n\n-----Explanation-----\nExample case 1: The delays of the respective submissions are $2$ minutes, $0$ minutes, $6$ minutes, $10$ minutes and $5$ minutes. Only submissions $3$ and $4$ are delayed by more than $5$ minutes, hence the answer is $2$.\n\"\"\"\ndef code():"
}