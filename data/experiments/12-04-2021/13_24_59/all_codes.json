{
    "0": "\n    n, m = map(int, input().split())\n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n\n    if max(b) > min(g):\n        print(-1)\n        return\n\n    res = 0\n    for i in range(n):\n        res += min([g[j] - b[i] for j in range(m)])\n\n    print(res)",
    "1": "\n    n, m = map(int, input().split())\n    b = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n\n    if min(b) > max(g):\n        print(-1)\n        return\n\n    res = 0\n    for i in range(n):\n        res += min([g[j] for j in range(m) if b[i] <= g[j]])\n\n    print(res)",
    "2": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        l = []\n        for j in s:\n            if j not in l:\n                l.append(j)\n        print(len(l))",
    "3": "\n    t=int(input())\n    for i in range(t):\n        s=input()\n        l=len(s)\n        if l==1:\n            print(1)\n            continue\n        d={}\n        for i in s:\n            if i not in d:\n                d[i]=1\n            else:\n                d[i]+=1\n\n        max_val=0\n\n        for i in d.values():\n            if i>max_val:\n                max_val=i\n\n        print(max_val)",
    "4": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(3):\n        l, r = map(int, input().split())\n        b = list(map(int, input().split()))\n        for j in range(l-1, r):\n            a[j] += b[j-l+1] // (r - l + 1)\n    print(*a)",
    "5": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(3):\n        l, r = map(int, input().split())\n        b = list(map(int, input().split()))\n        for j in range(l-1, r):\n            a[j] += b[j-l+1] // (r - l + 1)\n    print(*a)",
    "6": "\n    t = int(input())\n    for i in range(t):\n        n, k, d = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        count = 0\n        for j in range(n):\n            if a[j] > d:\n                break\n            else:\n                count += 1\n\n        print(k - count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "7": "\n    def min_subscriptions(n, k, d):\n        ",
    "8": "\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        arr = list(map(int, input().split()))\n        arr.sort()\n        count = 0\n        for j in range(n):\n            if arr[j] == arr[j-1]:\n                count += 1\n            else:\n                if count >= k:\n                    print(*([arr[j-1]] * (count - k + 1)), sep=\" \")\n\n                count = 1\n\n        if count >= k:  # last element of array is not printed in loop above so we need to check it here.\n            print(*([arr[n-1]] * (count - k + 1)), sep=\" \")\n\n    return None\n\n\nif __name__ == '__main__':\n    code()",
    "9": "\n    T = int(input())\n    for i in range(T):\n        N, K = map(int, input().split())\n        A = list(map(int, input().split()))\n        count = {}\n        for j in A:\n            if j not in count:\n                count[j] = 1\n            else:\n                count[j] += 1\n\n        ans = []\n\n        for key, value in count.items():\n            if value > K:\n                ans.append(key)\n\n        print(*ans)",
    "10": "\n    t = int(input())\n    for i in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        count = 0\n        for j in range(n):\n            if a[j] * n >= x:\n                count += 1\n                n -= 1\n            else: break\n\n        print(count)\n\n        \n\n        \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n        \nif __name__ == \"__main__\": code()",
    "11": "\n    t = int(input())\n    for i in range(t):\n        n, x = map(int, input().split())\n        a = list(map(int, input().split()))\n        a.sort()\n        teams = 0\n        while len(a) > 0:\n            if a[0] * n >= x:\n                teams += 1\n                n -= 1\n                del a[0]\n            else:  # if the minimum skill is not enough to make a team, delete it and decrease the number of programmers by 1. \n                del a[0]  # This is because we can't use this programmer to make another team. \n                n -= 1\n\n        print(teams)\n\n        \n\n        \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n        ",
    "12": "\n    start = (page_number - 1) * page_size + 1\n    end = start + page_size - 1\n    total = total_products\n    if start == end:\n        return f'Showing {start} of {total} Products.'\n    else:\n        return f'Showing {start} to {end} of {total} Products.'",
    "13": "\n    start_index = (page_number - 1) * page_size + 1\n    end_index = start_index + page_size - 1\n    total_pages = total_products / page_size\n    if total_products % page_size > 0:\n        total_pages += 1\n\n    if start_index == end_index:\n        return 'Showing %d of %d Products.' % (start_index, total_products)\n\n    return 'Showing %d to %d of %d Products.' % (start_index, end_index, total_products)",
    "14": "\n    n, m = len(a), len(b)\n    if n > m:\n        # Make sure n <= m, to use O(min(n,m)) space\n        a,b = b,a\n        n,m = m,n\n\n    current = range(n+1)\n    for i in range(1,m+1):\n        previous, current = current, [i]+[0]*n\n        for j in range(1,n+1):\n            add, delete = previous[j]+1, current[j-1]+1\n            change = previous[j-1]\n            if a[j-1] != b[i-1]:\n                change = change + 1\n            current[j] = min(add, delete, change)\n\n    return current[n]",
    "15": "\n    if len(a) > len(b):\n        a,b = b,a\n    if len(a) == 0:\n        return len(b)\n    previous_row = range(len(b)+1)\n    for i,c1 in enumerate(a):\n        current_row = [i+1]\n        for j,c2 in enumerate(b):\n            insertions = previous_row[j+1] + 1 # j+1 instead of j since previous_row and current_row are one character longer than b\n            deletions = current_row[j] + 1       # than b\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n\n    return previous_row[-1]",
    "16": "\n        # Solution 1: self, slow\n        # if n == 0: return 0\n        # i = 1\n        # while i <= n:\n        #     n -= i\n        #     i += 1\n        # return i-1\n\n        # Solution 2: self, faster\n        return int((2*n+0.25)**0.5 - 0.5)",
    "17": "\n        # Solution 1: self\n        # if n == 0: return 0\n        # i = 1\n        # while n >= i:\n        #     n -= i\n        #     i += 1\n        # return i - 1\n\n        # Solution 2: using math, faster than solution 1 \n        import math \n        \n        return int((math.sqrt(8*n+1)-1)/2)",
    "18": "\n    t = int(input())\n    for i in range(t):\n        n, p = map(int, input().split())\n        k = list(map(int, input().split()))\n        k.sort()\n        if p == 2:\n            print((k[-1] - k[0]) % 1000000007)\n        else:\n            print((k[-1] - k[0]) % 1000000007)\n\n",
    "19": "\n    def solve(n, p, k):\n        k.sort()\n        s = sum(k)\n        if s % 2 == 1:\n            return 0\n\n        s //= 2\n\n        dp = [[0] * (s + 1) for _ in range(n + 1)]\n\n        for i in range(1, n + 1):\n            for j in range(1, s + 1):\n                if j < k[i - 1]:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - k[i - 1]] + k[i - 1])\n\n        return abs((s * p) - (2 * dp[n][s])) % 1000000007\n\n    t = int(input())\n\n    for _ in range(t):\n        n, p = map(int, input().split())\n        k = list(map(int, input().split()))\n\n        print(solve(n, p, k))"
}