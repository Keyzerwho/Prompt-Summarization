{
    "0": "Python 3\n\"\"\"\n Given an integer $n$, find positive integers $a$ and $b$ such that $a + b = n$ and $LCM(a, b)$ is the minimum value possible.\n-----Input----- Each test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10$). Description of the test cases follows. Each test case consists of a single integer $n$ ($2 \\leq n \\leq 10^{9}$). -----Output----- For each test case, output two positive integers $a$ and $b$, such that $a + b = n$ and $LCM(a, b)$ is the minimum possible. -----Example----- Input 3 4 6 9 Output 2 2 3 3 3 6 -----Note----- For the first test case, the numbers we can choose are $1, 3$ or $2, 2$. $LCM(1, 3) = 3$ and $LCM(2, 2) = 2$, so we output $2 \\ 2$. For the second test case, the numbers we can choose are $1, 5$, $2, 4$, or $3, 3$. $LCM(1, 5) = 5$, $LCM(2, 4) = 4$, and $LCM(3, 3) = 3$, so we output $3 \\ 3$. For the third test case, $LCM(3, 6) = 6$. It can be shown that there are no other pairs of numbers which sum to $9$ that have a lower $LCM$.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIn Omkar's last class of math, he learned about the least common multiple, or $LCM$. $LCM(a, b)$ is the smallest positive integer $x$ which is divisible by both $a$ and $b$.\n\nOmkar, having a laudably curious mind, immediately thought of a problem involving the $LCM$ operation: given an integer $n$, find positive integers $a$ and $b$ such that $a + b = n$ and $LCM(a, b)$ is the minimum value possible.\n\nCan you help Omkar solve his ludicrously challenging math problem?\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10$). Description of the test cases follows.\n\nEach test case consists of a single integer $n$ ($2 \\leq n \\leq 10^{9}$).\n\n\n-----Output-----\n\nFor each test case, output two positive integers $a$ and $b$, such that $a + b = n$ and $LCM(a, b)$ is the minimum possible.\n\n\n-----Example-----\nInput\n3\n4\n6\n9\n\nOutput\n2 2\n3 3\n3 6\n\n\n\n-----Note-----\n\nFor the first test case, the numbers we can choose are $1, 3$ or $2, 2$. $LCM(1, 3) = 3$ and $LCM(2, 2) = 2$, so we output $2 \\ 2$.\n\nFor the second test case, the numbers we can choose are $1, 5$, $2, 4$, or $3, 3$. $LCM(1, 5) = 5$, $LCM(2, 4) = 4$, and $LCM(3, 3) = 3$, so we output $3 \\ 3$.\n\nFor the third test case, $LCM(3, 6) = 6$. It can be shown that there are no other pairs of numbers which sum to $9$ that have a lower $LCM$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Your friend Claire has dragged you along to a speedcubing event that is happening in Eindhoven. These events are all about solving the Rubik s cube and similar twisty puzzles as quickly as possible. The attendants of the event can enter into various competitions based on the type and size of the puzzle, and there are even special competitions where the puzzles need to be solved one-handed or blindfolded. Claire is competing in the most popular competition: speedsolving the $3\\times 3\\times 3$ Rubik s cube, pictured on the right. Each contestant needs to solve the cube five times, each time with a different random scramble. After all solves are completed, the best and the worst times are discarded and the final score is the average of the remaining three times. The contestant with the smallest final score wins. Claire has done well in the competition so far and is among the contenders for the overall victory. All the other contestants have already finished their five solves, but Claire has one solve remaining. By looking at the final scores of the other contestants, she has deduced her own target final score. As long as her final score is less than or equal to this target score, she will be declared the overall winner. Is it possible for her to win the competition, and if so, what is the worst time she can have on her last solve in order to do so? \n-----Input----- The input consists of:  - One line with four real numbers $t_1$, $t_2$, $t_3$ and $t_4$, the times Claire got on her first four solves.  - One line with a real number $t$, Claire\u2019s target final score, the worst final score she can have in order to be declared the overall winner. Each number is between $1$ and $20$, inclusive, and is given with exactly two decimal places. -----Output----- If it is not possible for Claire to win the event, output \u201cimpossible\u201d. If she will win regardless of the time she gets on her last solve, output \u201cinfinite\u201d. Otherwise, output the worst time she can have on her last solve in order to be declared the overall winner. Output the number to exactly two decimal places. -----Examples----- Sample Input 1: 6.38 7.20 6.95 8.11 7.53 Sample Output 1: infinite Sample Input 2: 6.38 7.20 6.95 8.11 6.99 Sample Output 2: 6.82\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYour friend Claire has dragged you along to a speedcubing event that is happening in Eindhoven. These events are all about solving the Rubik\u2019s cube and similar twisty puzzles as quickly as possible. The attendants of the event can enter into various competitions based on the type and size of the puzzle, and there are even special competitions where the puzzles need to be solved one-handed or blindfolded. \n\nClaire is competing in the most popular competition: speedsolving the $3\\times 3\\times 3$ Rubik\u2019s cube, pictured on the right. Each contestant needs to solve the cube five times, each time with a different random scramble. After all solves are completed, the best and the worst times are discarded and the final score is the average of the remaining three times. The contestant with the smallest final score wins.\n\nClaire has done well in the competition so far and is among the contenders for the overall victory. All the other contestants have already finished their five solves, but Claire has one solve remaining. By looking at the final scores of the other contestants, she has deduced her own target final score. As long as her final score is less than or equal to this target score, she will be declared the overall winner. Is it possible for her to win the competition, and if so, what is the worst time she can have on her last solve in order to do so?\n\n-----Input-----\nThe input consists of:\n - One line with four real numbers $t_1$, $t_2$, $t_3$ and $t_4$, the times Claire got on her first four solves.\n - One line with a real number $t$, Claire\u2019s target final score, the worst final score she can have in order to be declared the overall winner.\n\nEach number is between $1$ and $20$, inclusive, and is given with exactly two decimal places.\n\n-----Output-----\nIf it is not possible for Claire to win the event, output \u201cimpossible\u201d. If she will win regardless of the time she gets on her last solve, output \u201cinfinite\u201d. Otherwise, output the worst time she can have on her last solve in order to be declared the overall winner. Output the number to exactly two decimal places.\n\n-----Examples-----\nSample Input 1:\n6.38 7.20 6.95 8.11\n7.53\nSample Output 1:\ninfinite\n\nSample Input 2:\n6.38 7.20 6.95 8.11\n6.99\nSample Output 2:\n6.82\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Alex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it. Given a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it a_{k}) and delete it, at that all elements equal to a_{k} + 1 and a_{k} - 1 also must be deleted from the sequence. That step brings a_{k} points to the player.  Alex is a perfectionist, so he decided to get as many points as possible. Help him.\n-----Input----- The first line contains integer n (1 \u2264 n \u2264 10^5) that shows how many numbers are in Alex's sequence.  The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^5). -----Output----- Print a single integer \u2014 the maximum number of points that Alex can earn. -----Examples----- Input 2 1 2 Output 2 Input 3 1 2 3 Output 4 Input 9 1 2 1 3 2 2 2 2 3 Output 10 -----Note----- Consider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nAlex doesn't like boredom. That's why whenever he gets bored, he comes up with games. One long winter evening he came up with a game and decided to play it.\n\nGiven a sequence a consisting of n integers. The player can make several steps. In a single step he can choose an element of the sequence (let's denote it a_{k}) and delete it, at that all elements equal to a_{k} + 1 and a_{k} - 1 also must be deleted from the sequence. That step brings a_{k} points to the player. \n\nAlex is a perfectionist, so he decided to get as many points as possible. Help him.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) that shows how many numbers are in Alex's sequence. \n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^5).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum number of points that Alex can earn.\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n2\n\nInput\n3\n1 2 3\n\nOutput\n4\n\nInput\n9\n1 2 1 3 2 2 2 2 3\n\nOutput\n10\n\n\n\n-----Note-----\n\nConsider the third test example. At first step we need to choose any element equal to 2. After that step our sequence looks like this [2, 2, 2, 2]. Then we do 4 steps, on each step we choose any element equals to 2. In total we earn 10 points.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You need to help Alice determine her optimal outcome. \n-----Input----- The input consists of:  - One line with an integer $n$ ($2 \\leq n \\leq 10^5$), the size of the playing board and the number of valid moves.  - One line with two integers $a_ x$ and $a_ y$ ($1 \\leq a_ x, a_ y \\leq n$), the column and row in which Alice\u2019s piece is currently located.  - One line with two integers $b_ x$ and $b_ y$ ($1 \\leq b_ x, b_ y \\leq n$), the column and row in which Bob\u2019s piece is currently located.  - $n$ lines, the $i$th of which contains two integers $x_ i$ and $y_ i$ ($-n < x_ i, y_ i < n$) representing one of the valid moves. This moves the given piece $x_ i$ columns to the right and $y_ i$ rows up, provided this does not take the piece outside of the board. Columns are numbered $1$ to $n$ from left to right and rows are numbered $1$ to $n$ from bottom to top. All valid moves are distinct. -----Output----- If Alice can capture Bob\u2019s piece in her turn, output \u201cAlice wins\u201d. If Alice can use her turn to force a tie by teleporting her piece to a cell that Bob cannot capture in his turn output \u201ctie\u201d followed by two integers $a\u2019_ x$ and $a\u2019_ y$, the location of any such cell. If there are multiple valid solutions, you may output any one of them. Otherwise, if Bob is able to capture Alice\u2019s piece no matter what she does in her turn, output \u201cBob wins\u201d. -----Examples----- Sample Input 1: 2 2 1 1 2 1 0 0 -1 Sample Output 1: Bob wins Sample Input 2: 3 2 3 1 3 -2 1 1 1 1 0 Sample Output 2: tie 3 1\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThe boardgame Chaos is an exotic variant of Chess, played by two players in alternating turns on an $n\\times n$ playing board. All pieces have the same set of $n$ valid moves which are agreed on ahead of the game. \n\nIn a single turn a player can pick exactly one of their pieces and perform one of the following actions:\n - Perform up to two valid moves using the chosen piece, capturing any piece that the chosen piece lands on along the way.\n - Teleport the chosen piece to any cell on the board that is not already occupied by another piece.\n - Leave the chosen piece untouched in its current cell.\n\nHaving recently discovered Chaos, Alice and Bob are currently in the endgame of a very exciting match. Each player has a single piece left on the board and there are only two turns left, with Alice going next.\n\nHaving analysed the situation, she realises that the only way she can win is to capture Bob\u2019s piece in her turn. If that is not possible, Alice may be able to force a tie if she can teleport her piece to a cell that Bob cannot capture in his turn. Otherwise Bob will be able to win by capturing Alice\u2019s piece, no matter what she does in her turn. Help Alice determine her optimal outcome.\n\n-----Input-----\nThe input consists of:\n - One line with an integer $n$ ($2 \\leq n \\leq 10^5$), the size of the playing board and the number of valid moves.\n - One line with two integers $a_ x$ and $a_ y$ ($1 \\leq a_ x, a_ y \\leq n$), the column and row in which Alice\u2019s piece is currently located.\n - One line with two integers $b_ x$ and $b_ y$ ($1 \\leq b_ x, b_ y \\leq n$), the column and row in which Bob\u2019s piece is currently located.\n - $n$ lines, the $i$th of which contains two integers $x_ i$ and $y_ i$ ($-n < x_ i, y_ i < n$) representing one of the valid moves. This moves the given piece $x_ i$ columns to the right and $y_ i$ rows up, provided this does not take the piece outside of the board.\n\nColumns are numbered $1$ to $n$ from left to right and rows are numbered $1$ to $n$ from bottom to top. All valid moves are distinct.\n\n-----Output-----\nIf Alice can capture Bob\u2019s piece in her turn, output \u201cAlice wins\u201d.\n\nIf Alice can use her turn to force a tie by teleporting her piece to a cell that Bob cannot capture in his turn output \u201ctie\u201d followed by two integers $a\u2019_ x$ and $a\u2019_ y$, the location of any such cell. If there are multiple valid solutions, you may output any one of them.\n\nOtherwise, if Bob is able to capture Alice\u2019s piece no matter what she does in her turn, output \u201cBob wins\u201d.\n\n-----Examples-----\nSample Input 1:\n2\n2 1\n1 2\n1 0\n0 -1\nSample Output 1:\nBob wins\n\nSample Input 2:\n3\n2 3\n1 3\n-2 1\n1 1\n1 0\nSample Output 2:\ntie 3 1\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a string of length N. The string contains only lowercase letters. You are also given a list of M conditions. Each condition is a triplet of integers (x_i, l_i, r_i). The triplet represents the number of lowercase letters in the string that are less than or equal to x_i, the number of lowercase letters in the string that are greater than or equal to l_i, and the number of lowercase letters in the string that are greater than or equal to r_i. Your goal is to find the number of ways to paint the string to satisfy all the conditions. \n-----Input----- Input is given from Standard Input in the following format: N M l_1 r_1 x_1 l_2 r_2 x_2 : l_M r_M x_M -----Output----- Print the number of ways to paint the squares to satisfy all the conditions, modulo 10^9+7. -----Sample Input----- 3 1 1 3 3 -----Sample Output----- 6 The six ways are:  - RGB  - RBG  - GRB  - GBR  - BRG  - BGR where R, G and B correspond to red, green and blue squares, respectively.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThere are N squares arranged in a row.\nThe squares are numbered 1, 2, ..., N, from left to right.\nSnuke is painting each square in red, green or blue.\nAccording to his aesthetic sense, the following M conditions must all be satisfied.\nThe i-th condition is:\n - There are exactly x_i different colors among squares l_i, l_i + 1, ..., r_i.\nIn how many ways can the squares be painted to satisfy all the conditions?\nFind the count modulo 10^9+7.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 300\n - 1 \u2264 M \u2264 300\n - 1 \u2264 l_i \u2264 r_i \u2264 N\n - 1 \u2264 x_i \u2264 3\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nl_1 r_1 x_1\nl_2 r_2 x_2\n:\nl_M r_M x_M\n\n-----Output-----\nPrint the number of ways to paint the squares to satisfy all the conditions, modulo 10^9+7.\n\n-----Sample Input-----\n3 1\n1 3 3\n\n-----Sample Output-----\n6\n\nThe six ways are:\n - RGB\n - RBG\n - GRB\n - GBR\n - BRG\n - BGR\nwhere R, G and B correspond to red, green and blue squares, respectively.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n We have an undirected weighted graph with N vertices and M edges. The i-th edge in the graph connects Vertex U_i and Vertex V_i, and has a weight of W_i. Additionally, you are given an integer X. Find the number of ways to paint each edge in this graph either white or black such that the following condition is met, modulo 10^9 + 7: - The graph has a spanning tree that contains both an edge painted white and an edge painted black. Furthermore, among such spanning trees, the one with the smallest weight has a weight of X. Here, the weight of a spanning tree is the sum of the weights of the edges contained in the spanning tree. -----Constraints----- - 1 \\leq N \\leq 1 000 - 1 \\leq M \\leq 2 000 - 1 \\leq U_i, V_i \\leq N (1 \\leq i \\leq M) - 1 \\leq W_i \\leq 10^9 (1 \\leq i \\leq M) - If i \\neq j, then (U_i, V_i) \\neq (U_j, V_j) and (U_i, V_i) \\neq (V_j, U_j). - U_i \\neq V_i (1 \\leq i \\leq M) - The given graph is connected. - 1 \\leq X \\leq 10^{12} - All input values are integers.\n-----Input----- Input is given from Standard Input in the following format: N M X U_1 V_1 W_1 U_2 V_2 W_2 : U_M V_M W_M -----Output----- Print the answer. -----Sample Input----- 3 3 2 1 2 1 2 3 1 3 1 1 -----Sample Output----- 6\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nWe have an undirected weighted graph with N vertices and M edges.\nThe i-th edge in the graph connects Vertex U_i and Vertex V_i, and has a weight of W_i.\nAdditionally, you are given an integer X.\nFind the number of ways to paint each edge in this graph either white or black such that the following condition is met, modulo 10^9 + 7:\n - The graph has a spanning tree that contains both an edge painted white and an edge painted black. Furthermore, among such spanning trees, the one with the smallest weight has a weight of X.\nHere, the weight of a spanning tree is the sum of the weights of the edges contained in the spanning tree.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1 000\n - 1 \\leq M \\leq 2 000\n - 1 \\leq U_i, V_i \\leq N (1 \\leq i \\leq M)\n - 1 \\leq W_i \\leq 10^9 (1 \\leq i \\leq M)\n - If i \\neq j, then (U_i, V_i) \\neq (U_j, V_j) and (U_i, V_i) \\neq (V_j, U_j).\n - U_i \\neq V_i (1 \\leq i \\leq M)\n - The given graph is connected.\n - 1 \\leq X \\leq 10^{12}\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nX\nU_1 V_1 W_1\nU_2 V_2 W_2\n:\nU_M V_M W_M\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n3 3\n2\n1 2 1\n2 3 1\n3 1 1\n\n-----Sample Output-----\n6\n\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Given an incomplete Sudoku grid, output the solution grid. \n-----Input----- The input consists of a single data set. This data set starts with a line containing the number of rows in the input grid $R$, ($1 \\le R \\le 7$), and the number of columns in the input grid $C$, ($1 \\le C \\le 7$), separated by spaces. The next $R$ lines contain a representation of the incomplete input grid, one row per line. Each row has $C$ characters, representing the digits in each cell. The value in each cell is represented by either the digit already in that cell or a \u2018-\u2019 for an initially empty cell. This grid is followed by a description of the separate regions in the grid. The first of these lines specifies the total number of regions. This is followed by one line for each region that specifies the cells contained in that region. Each region description consists of a decimal number $N$, specifying the number of cells in the region, followed by $N$ cell descriptions separated by spaces. Each cell description consists of a left parenthesis, followed the cell\u2019s row index, followed by a comma, followed by the cell\u2019s row number, followed by a right parenthesis. Regions do not overlap. -----Output----- Output $R$ lines containing $C$ digits (separated by single spaces) showing the solution grid for the corresponding input data set. You are guaranteed that there is a unique solution. -----Examples----- Sample Input: 3 5 - - - - - - - - - - 4 - - - 1 5 1 (1,1) 2 (1,2) (1,3) 5 (2,1) (2,2) (3,1) (3,2) (3,3) 4 (2,3) (2,4) (1,4) (1,5) 3 (3,4) (3,5) (2,5) Sample Output: 1 2 1 2 1 3 5 3 4 3 4 2 1 2 1\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nAt some point or another, most computer science students have written a standard Sudoku solving program. This is yet another \u201cput numbers in a grid\u201d puzzle.\n\nNumbers are placed in the grid so that each outlined region contains the numbers $1$ to $n$, where $n$ is the number of squares in the region. The same number can never touch itself, not even diagonally.\n\n\n\nIncomplete Grid\n\nSolution Grid\n\nFor this problem, you will write a program that takes as input an incomplete puzzle grid and outputs the puzzle solution grid.\n\n-----Input-----\nThe input consists of a single data set. This data set starts with a line containing the number of rows in the input grid $R$, ($1 \\le R \\le 7$), and the number of columns in the input grid $C$, ($1 \\le C \\le 7$), separated by spaces. The next $R$ lines contain a representation of the incomplete input grid, one row per line. Each row has $C$ characters, representing the digits in each cell. The value in each cell is represented by either the digit already in that cell or a \u2018-\u2019 for an initially empty cell.\n\nThis grid is followed by a description of the separate regions in the grid. The first of these lines specifies the total number of regions. This is followed by one line for each region that specifies the cells contained in that region. Each region description consists of a decimal number $N$, specifying the number of cells in the region, followed by $N$ cell descriptions separated by spaces. Each cell description consists of a left parenthesis, followed the cell\u2019s row index, followed by a comma, followed by the cell\u2019s row number, followed by a right parenthesis. Regions do not overlap.\n\n-----Output-----\nOutput $R$ lines containing $C$ digits (separated by single spaces) showing the solution grid for the corresponding input data set. You are guaranteed that there is a unique solution.\n\n-----Examples-----\nSample Input:\n3 5\n- - - - -\n- - - - -\n4 - - - 1\n5\n1 (1,1)\n2 (1,2) (1,3)\n5 (2,1) (2,2) (3,1) (3,2) (3,3)\n4 (2,3) (2,4) (1,4) (1,5)\n3 (3,4) (3,5) (2,5)\nSample Output:\n1 2 1 2 1\n3 5 3 4 3\n4 2 1 2 1\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Alice, Bob, and Clara are eating at a new restaurant today. They re having trouble deciding what to order, so Alice proposes that they each pick some items from the menu, and then they will order the items that everyone picked. The menu has $m$ items, and Alice, Bob, and Clara will order $a$, $b$, and $c$ items respectively. Is it possible for them to pick some items such that no item is picked by everyone \n-----Input----- The input contains a single line with four integers, $m$, $a$, $b$, $c$, where $1\\leq m\\leq 100,000$, and $1\\leq a, b, c\\leq m$. -----Output----- If it\u2019s possible for Alice, Bob, and Clara to pick some item such that no item on the menu is picked by everyone, print \u201cpossible\u201d (without quotes). Otherwise, print \u201cimpossible\u201d. -----Examples----- Sample Input: 6 2 2 2 Sample Output: possible\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAlice, Bob, and Clara are eating at a new restaurant today. They\u2019re having trouble deciding what to order, so Alice proposes that they each pick some items from the menu, and then they will order the items that everyone picked. The menu has $m$ items, and Alice, Bob, and Clara will order $a$, $b$, and $c$ items respectively. Is it possible for them to pick some items such that no item is picked by everyone?\n\n-----Input-----\nThe input contains a single line with four integers, $m$, $a$, $b$, $c$, where $1\\leq m\\leq 100,000$, and $1\\leq a, b, c\\leq m$.\n\n-----Output-----\nIf it\u2019s possible for Alice, Bob, and Clara to pick some item such that no item on the menu is picked by everyone, print \u201cpossible\u201d (without quotes). Otherwise, print \u201cimpossible\u201d.\n\n-----Examples-----\nSample Input:\n6 2 2 2\nSample Output:\npossible\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given a message, determine the number of steps Boris will need to encode it so that he will be happy. \n-----Input----- The first line of the input contains a single integer $O$ ($1 \\le O \\le 25$) that represent the offset used for the rotation cipher. The second line contains the message to encode, which consists entirely of lowercase English characters. The length of the message is between $1$ and $80$ characters. The third line contains an integer $N$ ($1 \\le N \\le 26$), the number of times the cipher must be applied. -----Output----- Output \u2018Boris\u2019 if strictly more steps sound good than bad, and \u2018Colleague\u2019 otherwise. -----Examples----- Sample Input: 1 thequickbrownfoxjumpedoverthelazydog 10 Sample Output: Boris\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nBoris works at a secret communication station for the government training new employees on how to encode messages. Messages at this station are encoded with a rotation (\u201cCaesar\u201d) cipher that replaces each letter with one at a set offset in the alphabet, e.g., for offset $2$ an \u2018a\u2019 is replaced by a \u2018c\u2019 and \u2018y\u2019 is replaced by \u2018a\u2019. In order to encode a message, this cipher may be applied more than once. Each such application counts as a step in the encoding process. Boris teaches the new employees to encode messages by demonstrating each step of the encoding individually. However, Boris does not does not like seeing messages that contain at least half as many vowels as consonants after applying an encoding step. (Boris considers \u2018a\u2019, \u2018e\u2019, \u2018i\u2019, \u2018o\u2019, \u2018u\u2019, and \u2018y\u2019 as vowels.) He grows annoyed and more and more unhappy with each step where this situation occurs.\n\nYour job is to encode a given message and determine whether Boris will see fewer steps that annoy him than ones that don\u2019t. Since Boris wants to be happy in his job he will give a message that annoys him too much to a colleague.\n\n-----Input-----\nThe first line of the input contains a single integer $O$ ($1 \\le O \\le 25$) that represent the offset used for the rotation cipher. The second line contains the message to encode, which consists entirely of lowercase English characters. The length of the message is between $1$ and $80$ characters. The third line contains an integer $N$ ($1 \\le N \\le 26$), the number of times the cipher must be applied.\n\n-----Output-----\nOutput \u2018Boris\u2019 if strictly more steps sound good than bad, and \u2018Colleague\u2019 otherwise.\n\n-----Examples-----\nSample Input:\n1\nthequickbrownfoxjumpedoverthelazydog\n10\nSample Output:\nBoris\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Split all integers into two groups so that the GCD of all integers in the first group is equal to one and the GCD of all integers in the second group is equal to one. Both groups have to be non-empty. \n-----Input----- The first line contains a single integer $n$ ($2 \\leq n \\leq 10^5$). The second line contains $n$ integers $a_1$, $a_2$, $\\ldots$, $a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array. -----Output----- In the first line print \"YES\" (without quotes), if it is possible to split the integers into two groups as required, and \"NO\" (without quotes) otherwise. If it is possible to split the integers, in the second line print $n$ integers, where the $i$-th integer is equal to $1$ if the integer $a_i$ should be in the first group, and $2$ otherwise. If there are multiple solutions, print any. -----Examples----- Input 4 2 3 6 7 Output YES 2 2 1 1  Input 5 6 15 35 77 22 Output YES 2 1 2 1 1  Input 5 6 10 15 1000 75 Output NO\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given an array of $n$ integers. You need to split all integers into two groups so that the GCD of all integers in the first group is equal to one and the GCD of all integers in the second group is equal to one.\n\nThe GCD of a group of integers is the largest non-negative integer that divides all the integers in the group.\n\nBoth groups have to be non-empty.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 10^5$).\n\nThe second line contains $n$ integers $a_1$, $a_2$, $\\ldots$, $a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nIn the first line print \"YES\" (without quotes), if it is possible to split the integers into two groups as required, and \"NO\" (without quotes) otherwise.\n\nIf it is possible to split the integers, in the second line print $n$ integers, where the $i$-th integer is equal to $1$ if the integer $a_i$ should be in the first group, and $2$ otherwise.\n\nIf there are multiple solutions, print any.\n\n\n-----Examples-----\nInput\n4\n2 3 6 7\n\nOutput\nYES\n2 2 1 1 \n\nInput\n5\n6 15 35 77 22\n\nOutput\nYES\n2 1 2 1 1 \n\nInput\n5\n6 10 15 1000 75\n\nOutput\nNO\n\"\"\"\ndef code():"
}