{
    "0": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n % 2 == 0:\n            print(n // 2, n // 2)\n        else:\n            print(n // 2, n // 2 + 1)\n",
    "1": "\n    testCases = int(input())\n    for i in range(testCases):\n        n = int(input())\n        if n % 2 == 0:\n            print(n // 2, n // 2)\n        else:\n            print(n // 2, n // 2 + 1)\n",
    "2": "\n    pass\n\nif __name__ == '__main__':\n    code()",
    "3": "\n    ",
    "4": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(0)\n    ans = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            continue\n        ans += a[i] - a[i+1]\n    print(ans)",
    "5": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(0)\n    ans = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            continue\n        ans += a[i] - a[i+1]\n    print(ans)\n",
    "6": "\n    n = int(input())\n    a_x, a_y = map(int, input().split())\n    b_x, b_y = map(int, input().split())\n    moves = []\n    for i in range(n):\n        moves.append(list(map(int, input().split())))\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x, b_y)\n    #print(moves)\n    #print(n)\n    #print(moves)\n    #print(a_x, a_y, b_x,",
    "7": "\n    n = int(input())\n    a_x, a_y = map(int, input().split())\n    b_x, b_y = map(int, input().split())\n    moves = []\n    for i in range(n):\n        moves.append(list(map(int, input().split())))\n    if a_x == b_x and a_y == b_y:\n        print(\"Alice wins\")\n    elif a_x == b_x or a_y == b_y:\n        print(\"Bob wins\")\n    else:\n        for i in range(n):\n            for j in range(n):\n                if (a_x + moves[i][0], a_y + moves[i][1]) == (b_x, b_y):\n                    print(\"tie\", moves[i][0], moves[i][1])\n                    return\n        print(\"Bob wins\")\n",
    "8": "\n    n, m = map(int, input().split())\n    l = []\n    r = []\n    x = []\n    for i in range(m):\n        l.append(int(input()))\n        r.append(int(input()))\n        x.append(int(input()))\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        for j in range(n+1):\n            if j >= l[i-1]:\n                dp[i][j] += dp[i-1][j-l[i-1]]\n            if j >= r[i-1]:\n                dp[i][j] += dp[i-1][j-r[i-1]]\n            if j >= x[i-1]:\n                dp[i][j] += dp[i-1][j-x[i-1]]\n    print(dp[m][n] % 1000000007)",
    "9": "\n    ",
    "10": "\n    n, m, x = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        graph[u-1].append((v-1, w))\n        graph[v-1].append((u-1, w))\n    # print(graph)\n    # print(graph[0])\n    # print(graph[1])\n    # print(graph[2])\n    # print(graph[0][0])\n    # print(graph[0][0][0])\n    # print(graph[0][0][1])\n    # print(graph[1][0])\n    # print(graph[1][0][0])\n    # print(graph[1][0][1])\n    # print(graph[2][0])\n    # print(graph[2][0][0])\n    # print(graph[2][0][1])\n    # print(graph[0][1])\n    # print(graph[0][1][0])\n    # print(graph[0][1][1])\n    # print(graph[1][1])\n    # print(graph[1][1][0])\n    # print(graph[1][1][1])\n    # print(graph[2][1])\n    # print(graph[2][1][0])\n    # print(graph[2][1][1])\n    # print(graph[0][2])\n    # print(graph[0][2][0])\n    # print(graph[0][2][1])\n    # print(graph[1][2])\n    # print(graph[1][2][0])\n    # print(graph[1][2][1])\n    # print(graph[2][2])\n    # print(graph[2][2][0])\n    # print(graph[2][2][1])\n    # print(graph[0][3])\n    # print(graph[0][3][0])\n    # print(graph[0][3][1])\n    # print(graph[1][3])\n    # print(graph[1][3][0])\n    # print(graph[1][3][1])\n    # print(graph[2][3])\n    # print(graph[2][3][0])\n    # print(graph[2][3][1])\n    # print(graph[0][4])\n    # print(graph[0][4][0])\n    # print(graph[0][4][1])\n    # print(graph[1][4])\n    # print(graph[1][4][0])\n    # print(graph[1][4][1])\n    # print(graph[2][4])\n    # print(graph[2][4][0])\n    # print(graph[2][4][1])\n    # print(graph[0][5])\n    # print(graph[0][5][0])\n    # print(graph[0][5][1])\n    # print(graph[1][5])\n    # print(graph[1][5][0])\n    # print(graph[1][5][1])\n    # print(graph[2][5])\n    # print(graph[2][5][0])\n    # print(graph[2][5][1])\n    # print(graph[0][6])\n    # print(graph[0][6][0])\n    # print(graph[0][6][1])\n    # print(graph[1][6])\n    # print(graph[1][6][0])\n    # print(graph[1][6][1])\n    # print(graph[2][6])\n    # print(graph[2][6][0])\n    # print(graph[2][6][1])\n    # print(graph[0][7])\n    # print(graph[0][7][0])\n    # print(graph[0][7][1])\n    # print(graph[1][7])\n    # print(graph[1][7][0])\n    # print(graph[1][7][1])\n    # print(graph[2][7])\n    # print(graph[2][7][0])\n    # print(graph[2][7][1])\n    # print(graph[0][8])\n    # print(",
    "11": "\n    # Take in the number of vertices and edges\n    n, m = map(int, input().split())\n    # Take in the weight of the spanning tree\n    x = int(input())\n    # Take in the edges\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        edges.append((u, v, w))\n    # Sort the edges by weight\n    edges.sort(key=lambda x: x[2])\n    # Create a dictionary of vertices and their neighbors\n    neighbors = {}\n    for u, v, w in edges:\n        if u not in neighbors:\n            neighbors[u] = [v]\n        else:\n            neighbors[u].append(v)\n        if v not in neighbors:\n            neighbors[v] = [u]\n        else:\n            neighbors[v].append(u)\n    # Create a dictionary of vertices and their colors\n    colors = {}\n    for i in range(1, n+1):\n        colors[i] = 0\n    # Create a list of vertices that have not been colored\n    uncolored = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been colored\n    colored = []\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited\n    visited = []\n    # Create a list of vertices that have not been visited\n    unvisited = [i for i in range(1, n+1)]\n    # Create a list of vertices that have been visited",
    "12": "\n    R, C = map(int, input().split())\n    grid = [list(input()) for _ in range(R)]\n    regions = []\n    for _ in range(int(input())):\n        regions.append(list(map(int, input().split()[1:])))\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '-':\n                for k in range(1, 10):\n                    if k not in grid[i] and k not in [grid[x][j] for x in range(R)] and k not in [grid[x][y] for x, y in regions]:\n                        grid[i][j] = str(k)\n                        break\n    for i in range(R):\n        print(' '.join(grid[i]))\n\nif __name__ == '__main__':\n    code()",
    "13": "\n    R, C = map(int, input().split())\n    grid = [list(input()) for _ in range(R)]\n    regions = []\n    for _ in range(int(input())):\n        regions.append(list(map(int, input().split()[1:])))\n    for i in range(R):\n        for j in range(C):\n            if grid[i][j] == '-':\n                grid[i][j] = '1'\n                for k in range(2, C+1):\n                    if k not in regions[int(grid[i][j])-1]:\n                        grid[i][j] = str(k)\n                        break\n    for i in range(R):\n        print(' '.join(grid[i]))\n\nif __name__ == \"__main__\":\n    code()",
    "14": "\n    m, a, b, c = map(int, input().split())\n    if a+b+c == m:\n        print(\"impossible\")\n    elif a+b+c < m:\n        print(\"impossible\")\n    elif a+b+c > m:\n        print(\"possible\")\n    else:\n        print(\"impossible\")",
    "15": "\n    m, a, b, c = map(int, input().split())\n    if a+b+c == m:\n        print(\"impossible\")\n    elif a+b == m or a+c == m or b+c == m:\n        print(\"impossible\")\n    elif a+b+c < m:\n        print(\"impossible\")\n    else:\n        print(\"possible\")\n",
    "16": "\n    offset = int(input())\n    message = input()\n    n = int(input())\n    good = 0\n    bad = 0\n    for i in range(n):\n        for j in range(len(message)):\n            if (ord(message[j]) + offset) > 122:\n                bad += 1\n            else:\n                good += 1\n        message = message[::-1]\n    if good > bad:\n        print(\"Boris\")\n    else:\n        print(\"Colleague\")",
    "17": "\n    O = int(input())\n    S = input()\n    N = int(input())\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    good = 0\n    bad = 0\n    for i in range(N):\n        for j in range(len(S)):\n            if S[j] in vowels:\n                bad += 1\n            else:\n                good += 1\n            S = S[1:] + S[0]\n    if good > bad:\n        print(\"Boris\")\n    else:\n        print(\"Colleague\")\n",
    "18": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n    if gcd == 1:\n        print(\"YES\")\n        for i in range(n):\n            print(1, end=\" \")\n    else:\n        print(\"NO\")\n",
    "19": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    gcd = a[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, a[i])\n    if gcd == 1:\n        print(\"YES\")\n        for i in range(n):\n            print(1, end=\" \")\n    else:\n        print(\"NO\")\n"
}