{
    "id": "cmpl-4BVoKFI7l1J6LHZ5lPTpjkvG9xbwS",
    "object": "text_completion",
    "created": 1638649236,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    hour = int(angle / 30)\n    minute = int((angle % 30) * 2)\n    return '{:02d}:{:02d}'.format(hour, minute)",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    hour = int(angle / 30)\n    minute = int((angle % 30) * 2)\n    return '{:02d}:{:02d}'.format(hour, minute)",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    for i in range(n):\n        l, r = map(int, input().split())\n        print(popcount(r) - popcount(l-1))\n\n\ndef popcount(x):\n    return bin(x).count('1')\n\n\nif __name__ == '__main__':\n    code()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    for i in range(n):\n        l, r = map(int, input().split())\n        print(popcount(r) - popcount(l-1))\n\n\ndef popcount(x):\n    return bin(x).count('1')\n\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # Get the length of the sequence\n    n = int(input())\n\n    # Get the first sequence\n    a = [int(x) for x in input().split()]\n\n    # Get the second sequence\n    b = [int(x) for x in input().split()]\n\n    # Create a list to store the results\n    result = []\n\n    # Loop through each element in a and b, and add them together. Then append that value to result.\n    for i in range(n):\n        result.append(a[i] + b[i])\n\n    # XOR each element in result together, and print it out.\n    print(result[0] ^ result[1])",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(n):\n            xor_sum ^= (a[i] + b[j])\n\n    print(xor_sum)\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return bin(a & b).count('1') > 1\n\nprint(shared_bits(7, 10))\nprint(shared_bits(7, 15))\nprint(shared_bits(10, 15))",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return len(bin(a ^ b)[2:].split('1')) > 1",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = list(map(float, input().split()))\n    score = 0\n    for i in range(n):\n        if p[i] == 1:\n            score += (i+1)**2\n        else:\n            score += (i+1)*p[i]*2\n\n    print(score)\n\n\nif __name__ == \"__main__\":\n    code()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = list(map(float, input().split()))\n    s = 0\n    for i in range(n):\n        s += (i + 1) * p[i] * (1 - p[i]) ** (n - i - 1)\n    print(\"{:.10f}\".format(s))\n\n\nif __name__ == \"__main__\":\n    code()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    for i in range(m):\n        print('-'*n)\n        print('| o |'*n)\n    print('-'*n)",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    return '\\n'.join([''.join(['o' for x in range(n)]) for y in range(m)])",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    R = int(input())\n    count = 0\n    for a in range(1,R+1):\n        for b in range(a,R+1):\n            c = (a**2 + b**2)**0.5\n            if c == int(c):\n                count += 1\n                print(\"{} {} {}\".format(a,b,int(c)))",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    R = int(input())\n    count = 0\n    for a in range(1,R+1):\n        for b in range(a,R+1):\n            c = (a**2 + b**2)**0.5\n            if c == int(c):\n                c = int(c)\n                if a+b+c <= R:\n                    print(\"{} {} {}\".format(a,b,c))\n                    count += 1",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    \n    result = []\n    \n    for i in range(start, finish+1):\n        temp = [0]*10\n        while i > 0:\n            temp[i%10] += 1\n            i /= 10\n\n        result.append(temp)\n\n    return result",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # your code here\n    pass",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                x += 1\n\n    print(x, 0)",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] ^ x\n\n    print(count_inversions(b), x)\n\n\ndef count_inversions(a):\n    return merge_sort(a)[1]\n\n\ndef merge_sort(a):\n    if len(a) == 1:\n        return a, 0\n\n    mid = len(a) // 2\n\n    left, left_inv = merge_sort(a[:mid])\n    right, right_inv = merge_sort(a[mid:])\n\n    merged, split_inv = merge(left, right)\n\n    return merged, left_inv + right_inv + split_inv\n\n\ndef merge(left, right):\n    merged = []\n    invs = 0\n\n    while left and right:\n        if left[0] <= right[0]:  # no inversion here! yay! :) :) :) :) :) :) :) :) :) :) !!! :D :D :D :D :D :D :D :D !!! !!!!!! YAYYYYYYYY!!!!!!!!!!!!!!11111111111111111!!!!!11111!11111!11111!111111111111111111!!!!!!!1!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1!1!1!1!1!1!1!!!!!! YAYYYYYY!!!!!!!!!!!!! 1111111111 !11111 !11111 !11111 !11111 !11111 !11111 !!!!! 111111111111111111111111111 111 111 111 111 111 111 111 111 11 11 11 11 11 11 11 11 1 1 1 1 1 1 1 1 1 1 !!! YAYYYYYY!!!!!!!!!!!!! 1111   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!!   !!!!! YAYYYYYY!!!!!!!!!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! !!!!!! YAYYYYYY!!!!!!!!!!!!!     :( :( :( :( :( :( :( :( :( :( :( :(:(:(:(:(:(:(:(:(:(:(:(:(((((((((((((((((((((((( (( (( (( (( (( (( (( (( (( (( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) )) )) )) )) )) )) )) )) )) ))))))))))))))))))))))))))     ):)))     ):)))     ):)))     ):)))     ):)))     ):)))     ):)))      )))      )))      )))      )))      )))      )))      )))      )))      )))       \"       \"       \"       \"       \"       \"       \"       \"       \"         \"\"         \"\"         \"\"         \"\"         \"\"         \"\"         \"\"          \"\"          \"\"          \"\"          \"\"          \"\"          \"\"          \"\"           '           '           '           '           '           '           '            ''            ''            ''            ''            ''            ''             ''             ''             ''             ''             ''             ''              `              `              `              `              `              `               ``               ``               ``               ``               ``                / / / / / / / / / / / / / / ///////// ///////// ///////// ///////// ///////// ///////// /////////// /// /// /// /// /// /// /// /// /// /// /// /// /// - - - - - - - - -- -- -- -- -- -- -- -- --- --- --- --- --- --- --- ---- ---- ---- ---- ---- ---- ------- ------- ------- ------- ------- -------- -------- -------- -------- o o o o o o o o o o o o o 8 8 8 8 8 8 8 8 88 88 88 88 88 88 0 0 0 0 0 0 0 00 00 00 00 00 00 555555555555555 555555555 555555 4444444444444444 4444444444 4444 444444444 4444 4444 4444 4444 4444 4444 4444 4444 44444 44 44 44 44 44 44 44 44 44 44 44 4444 4444 44444 44444 444443 43 43 43 43 43 43 43 43 43 43 43 4545 4545 4545 4545 45454 5 5 5 5 5 5 5 5 55 55 55 55 55 6 6 6 6 6 6 6 66 66 66 66 66 7 7 7 7 7 7 77 77 77 77 77 7777777777777777 7777777777 777777000 000000000000000 000 000000 000000 0000000 000000 000000 000000 000000 000 000 000 000 0000 0000 0000 0000 0000 0000 00000000000000 00000000000000 00000000000000 000000000000000 000000000000000 000000000000000 000000000000000 000000000000000 000000000000000 000000000000000 000000000000001000000000000001000000000000001000000000000",
            "index": 17,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    # your code here\n    return -1\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(finding_k([1, 2, 3]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert finding_k([1, 2, 3]) == 1\n    assert finding_k([5, 2, 8]) == 3\n    assert finding_k([5, 2, 8] * 10) == 3",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    for k in range(1, max(arr) + 1):\n        if all(i % k == j % k for i, j in zip(arr, arr[1:])):\n            return k\n    return -1",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}