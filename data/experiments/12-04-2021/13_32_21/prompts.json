{
    "0": "Python 3\n\"\"\"\nYou have an array $a$ with $n$ integers. You need to count the number of funny pairs $(l, r)$ $(l \\leq r)$. To check if a pair $(l, r)$ is a funny pair, take $mid = \\frac{l + r - 1}{2}$, then if $r - l + 1$ is an even number and $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_{mid} = a_{mid + 1} \\oplus a_{mid + 2} \\oplus \\ldots \\oplus a_r$, then the pair is funny. $\\oplus$ denotes the bitwise XOR operation.\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the size of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{20}$)\u00a0\u2014 array itself.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of funny pairs. You should consider only pairs where $r - l + 1$ is even number.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n3 2 2 3 7 6\n\nOutput\n3\n\nInput\n3\n42 4 2\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSasha likes programming. Once, during a very long contest, Sasha decided that he was a bit tired and needed to relax. So he did. But since Sasha isn't an ordinary guy, he prefers to relax unusually. During leisure time Sasha likes to upsolve unsolved problems because upsolving is very useful.\n\nTherefore, Sasha decided to upsolve the following problem:\n\nYou have an array $a$ with $n$ integers. You need to count the number of funny pairs $(l, r)$ $(l \\leq r)$. To check if a pair $(l, r)$ is a funny pair, take $mid = \\frac{l + r - 1}{2}$, then if $r - l + 1$ is an even number and $a_l \\oplus a_{l+1} \\oplus \\ldots \\oplus a_{mid} = a_{mid + 1} \\oplus a_{mid + 2} \\oplus \\ldots \\oplus a_r$, then the pair is funny. In other words, $\\oplus$ of elements of the left half of the subarray from $l$ to $r$ should be equal to $\\oplus$ of elements of the right half. Note that $\\oplus$ denotes the bitwise XOR operation.\n\nIt is time to continue solving the contest, so Sasha asked you to solve this task.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 3 \\cdot 10^5$)\u00a0\u2014 the size of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i < 2^{20}$)\u00a0\u2014 array itself.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of funny pairs. You should consider only pairs where $r - l + 1$ is even number.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n1\n\nInput\n6\n3 2 2 3 7 6\n\nOutput\n3\n\nInput\n3\n42 4 2\n\nOutput\n0\n\n\n\n-----Note-----\n\nBe as cool as Sasha, upsolve problems!\n\nIn the first example, the only funny pair is $(2, 5)$, as $2 \\oplus 3 = 4 \\oplus 5 = 1$.\n\nIn the second example, funny pairs are $(2, 3)$, $(1, 4)$, and $(3, 6)$.\n\nIn the third example, there are no funny pairs.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nMike and Joe take turns chugging beers. Write the function game(A,B) that returns the winner, \"Mike\" or \"Joe\" accordingly. A is the total beers Mike can chug, while B is the total beers Joe can chug. If either A or B is smaller than 1, return the string  \"Non-drinkers can't play\".\n\"\"\"\ndef game(a, b):",
    "3": "Python 3\n\"\"\"\nMike and Joe are fratboys that love beer and games that involve drinking. They play the following game: Mike chugs one beer, then Joe chugs 2 beers, then Mike chugs 3 beers, then Joe chugs 4 beers, and so on. Once someone can't drink what he is supposed to drink, he loses.\n\nMike can chug at most A beers in total (otherwise he would pass out), while Joe can chug at most B beers in total. Who will win the game? \n\nWrite the function ```game(A,B)``` that returns the winner, ```\"Mike\"``` or ```\"Joe\"``` accordingly, for any given integer values of A and B.\n\nNote: If either Mike or Joe cannot drink at least 1 beer, return the string  ```\"Non-drinkers can't play\"```.\n\"\"\"\ndef game(a, b):",
    "4": "Python 3\n\"\"\"\nSkier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to $1$ meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is $5$ seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes $1$ second.\n\nFind the skier's time to roll all the path.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed $10^5$ characters.\n\nThe sum of the lengths of $t$ given lines over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the desired path time in seconds.\n\n\n-----Example-----\nInput\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput\n15\n6\n16\n12\n25\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nSkier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to $1$ meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is $5$ seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes $1$ second.\n\nFind the skier's time to roll all the path.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed $10^5$ characters.\n\nThe sum of the lengths of $t$ given lines over all test cases in the input does not exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, print the desired path time in seconds.\n\n\n-----Example-----\nInput\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\nOutput\n15\n6\n16\n12\n25\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven a binary tree, return the zigzag level order traversal of its nodes' values.\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:",
    "7": "Python 3\n\"\"\"\nGiven a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\n\n\nFor example:\nGiven binary tree [3,9,20,null,null,15,7],\n\n    3\n   / \\\n  9  20\n    /  \\\n   15   7\n\n\n\nreturn its zigzag level order traversal as:\n\n[\n  [3],\n  [20,9],\n  [15,7]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:",
    "8": "Python 3\n\"\"\"\nSolve a given equation and return the value of x in the form of string \"x=#value\". For the equation, if there is no solution, return \"No solution\" or if infinite solutions, return \"Infinite solutions\" or if exactly one solution for the equation, ensure that the value of x is an integer.\n\n\nExample 1:\n\nInput: \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n\n\n\nExample 2:\n\nInput: \"x=x\"\nOutput: \"Infinite solutions\"\n\n\n\nExample 3:\n\nInput: \"2x=x\"\nOutput: \"x=0\"\n\n\n\nExample 4:\n\nInput: \"2x+3x-6x=x+2\"\nOutput: \"x=-1\"\n\n\n\nExample 5:\n\nInput: \"x=x+2\"\nOutput: \"No solution\"\n\"\"\"\nclass Solution:\n    def solveEquation(self, equation: str) -> str:",
    "9": "Python 3\n\"\"\"\nSolve a given equation and return the value of x in the form of string \"x=#value\". The equation contains only '+', '-' operation, the variable x and its coefficient.\n\n\n\nIf there is no solution for the equation, return \"No solution\".\n\n\nIf there are infinite solutions for the equation, return \"Infinite solutions\".\n\n\nIf there is exactly one solution for the equation, we ensure that the value of x is an integer.\n\n\nExample 1:\n\nInput: \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"\n\n\n\nExample 2:\n\nInput: \"x=x\"\nOutput: \"Infinite solutions\"\n\n\n\nExample 3:\n\nInput: \"2x=x\"\nOutput: \"x=0\"\n\n\n\nExample 4:\n\nInput: \"2x+3x-6x=x+2\"\nOutput: \"x=-1\"\n\n\n\nExample 5:\n\nInput: \"x=x+2\"\nOutput: \"No solution\"\n\"\"\"\nclass Solution:\n    def solveEquation(self, equation: str) -> str:",
    "10": "Python 3\n\"\"\"\nYou are given an array $a_1, a_2 \\dots a_n$. Calculate the number of tuples $(i, j, k, l)$ such that:   $1 \\le i < j < k < l \\le n$;  $a_i = a_k$ and $a_j = a_l$; \n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 3000$)\u00a0\u2014 the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the array $a$.\n\nIt's guaranteed that the sum of $n$ in one test doesn't exceed $3000$.\n\n\n-----Output-----\n\nFor each test case, print the number of described tuples.\n\n\n-----Example-----\nInput\n2\n5\n2 2 2 2 2\n6\n1 3 3 1 2 3\n\nOutput\n5\n2\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given an array $a_1, a_2 \\dots a_n$. Calculate the number of tuples $(i, j, k, l)$ such that:   $1 \\le i < j < k < l \\le n$;  $a_i = a_k$ and $a_j = a_l$; \n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($4 \\le n \\le 3000$)\u00a0\u2014 the size of the array $a$.\n\nThe second line of each test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the array $a$.\n\nIt's guaranteed that the sum of $n$ in one test doesn't exceed $3000$.\n\n\n-----Output-----\n\nFor each test case, print the number of described tuples.\n\n\n-----Example-----\nInput\n2\n5\n2 2 2 2 2\n6\n1 3 3 1 2 3\n\nOutput\n5\n2\n\n\n\n-----Note-----\n\nIn the first test case, for any four indices $i < j < k < l$ are valid, so the answer is the number of tuples.\n\nIn the second test case, there are $2$ valid tuples:   $(1, 2, 4, 6)$: $a_1 = a_4$ and $a_2 = a_6$;  $(1, 3, 4, 6)$: $a_1 = a_4$ and $a_3 = a_6$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven an integral number, determine if it's a square number.\n\nExamples:\n\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n\"\"\"\ndef is_square(n):",
    "13": "Python 3\n\"\"\"\n## A square of squares\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\n\nHowever, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain\u2026 Wait! That's it! You just have to check if your number of building blocks is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nThe tests will _always_ use some integral number, so don't worry about that in dynamic typed languages.\n\n### Examples\n\n```\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n```\n\"\"\"\ndef is_square(n):",
    "14": "Python 3\n\"\"\"\nYou are given $n$ different binary words.\n\nYou want to order the words such that the first character of a word matches the last character of the previous word.\n\nIf you cannot put the words in that order then you can reverse some words so that: the final set of $n$ words \nstill contains different words; there is a way to put all words in the order specified.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the\nnumber of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ ($1 \\le n \\le\n2\\cdot10^5$) \u2014 the number of words in the list. Next $n$ lines contain these\nwords. The sum of word lengths doesn't exceed $4\\cdot10^6$. All words are different.\n\n\n-----Output-----\n\nPrint answer for all of $t$ test cases in the order they appear.\n\nIf there is no answer for the test case, print -1. Otherwise, the first line of\nthe output should contain $k$ ($0 \\le k \\le n$) \u2014 the minimal number of words\nin the set which should be reversed. The second line of the output should\ncontain $k$ distinct integers \u2014 the indexes of the words in the set which\nshould be reversed. Words are numerated from $1$ to $n$ in the order they\nappear. If $k=0$ you can skip this line (or you can print an empty line). If\nthere are many answers you can print any of them.\n\n\n-----Example-----\nInput\n4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n0001\n00001\n\nOutput\n1\n3 \n-1\n0\n\n2\n1 2\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPolycarp has $n$ different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: \"0001\", \"11\", \"0\" and \"0011100\".\n\nPolycarp wants to offer his set of $n$ binary words to play a game \"words\". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\".\n\nWord reversal is the operation of reversing the order of the characters. For example, the word \"0111\" after the reversal becomes \"1110\", the word \"11010\" after the reversal becomes \"01011\".\n\nProbably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that:  the final set of $n$ words still contains different words (i.e. all words are unique);  there is a way to put all words of the final set of words in the order so that the final sequence of $n$ words is consistent with the game rules. \n\nPolycarp wants to reverse minimal number of words. Please, help him.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of words in the Polycarp's set. Next $n$ lines contain these words. All of $n$ words aren't empty and contains only characters '0' and '1'. The sum of word lengths doesn't exceed $4\\cdot10^6$. All words are different.\n\nGuaranteed, that the sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$. Also, guaranteed that the sum of word lengths for all test cases in the input doesn't exceed $4\\cdot10^6$.\n\n\n-----Output-----\n\nPrint answer for all of $t$ test cases in the order they appear.\n\nIf there is no answer for the test case, print -1. Otherwise, the first line of the output should contain $k$ ($0 \\le k \\le n$) \u2014 the minimal number of words in the set which should be reversed. The second line of the output should contain $k$ distinct integers \u2014 the indexes of the words in the set which should be reversed. Words are numerated from $1$ to $n$ in the order they appear. If $k=0$ you can skip this line (or you can print an empty line). If there are many answers you can print any of them.\n\n\n-----Example-----\nInput\n4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n0001\n00001\n\nOutput\n1\n3 \n-1\n0\n\n2\n1 2\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou'll be given a string, and have to return the total of all the unicode characters as an int.\n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291\n\"\"\"\ndef uni_total(string):",
    "17": "Python 3\n\"\"\"\nYou'll be given a string, and have to return the total of all the unicode characters as an int. Should be able to handle any characters sent at it. \n\nexamples:\n\nuniTotal(\"a\") == 97\nuniTotal(\"aaa\") == 291\n\"\"\"\ndef uni_total(string):",
    "18": "Python 3\n\"\"\"\nYou are given two numbers X and Y.\n\nIn one step, you can either double the value of X, or decrement X by 1.\n\nReturn the minimum number of steps required before the value of X equals Y.\n\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "19": "Python 3\n\"\"\"\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:"
}