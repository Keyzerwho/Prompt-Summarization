{
    "0": "\n    n = int(input())\n    counter = 0\n    for i in range(n-1, 0, -1):\n        counter += 1\n        if n % i == 0:\n            break\n    print(counter)\n",
    "1": "\n    n = int(input())\n    counter = 0\n    for i in range(n-1, 0, -1):\n        counter += 1\n        if n % i == 0:\n            break\n    print(counter)\n",
    "2": "\n    r, c = [int(x) for x in input().split()]\n    map = []\n    for i in range(r):\n        map.append([int(x) for x in input()])\n    n = int(input())\n    for i in range(n):\n        r1, c1, r2, c2 = [int(x) for x in input().split()]\n        if map[r1-1][c1-1] == 0 and map[r2-1][c2-1] == 0:\n            print(\"neither\")\n        elif map[r1-1][c1-1] == 0 and map[r2-1][c2-1] == 1:\n            print(\"decimal\")\n        elif map[r1-1][c1-1] == 1 and map[r2-1][c2-1] == 0:\n            print(\"binary\")\n        else:\n            print(\"both\")\n",
    "3": "\n    r, c = map(int, input().split())\n    mapa = []\n    for i in range(r):\n        mapa.append(input())\n    n = int(input())\n    for i in range(n):\n        r1, c1, r2, c2 = map(int, input().split())\n        if mapa[r1-1][c1-1] == mapa[r2-1][c2-1]:\n            print(\"neither\")\n        elif mapa[r1-1][c1-1] == \"0\":\n            print(\"binary\")\n        else:\n            print(\"decimal\")",
    "4": "\n    n, k = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    graph = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = [int(s) for s in input().split()]\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    def dfs(node, visited):\n        visited[node] = True\n        for i in graph[node]:\n            if not visited[i]:\n                dfs(i, visited)\n    def preorder(node, visited):\n        visited[node] = True\n        for i in graph[node]:\n            if not visited[i]:\n                preorder(i, visited)\n                a[node] = min(a[node], a[i])\n    visited = [False] * n\n    dfs(0, visited)\n    visited = [False] * n\n    preorder(0, visited)\n    print(a[0])\n",
    "5": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(k):\n        ans = max(ans, a[i])\n    print(ans)\n",
    "6": "\n    N, T = [int(x) for x in input().split()]\n    cash = []\n    time = []\n    for i in range(N):\n        c, t = [int(x) for x in input().split()]\n        cash.append(c)\n        time.append(t)\n    cash.sort(reverse=True)\n    time.sort()\n    total = 0\n    for i in range(N):\n        if time[i] < T:\n            total += cash[i]\n            T -= time[i]\n        else:\n            break\n    print(total)\n\nif __name__ == '__main__':\n    code()",
    "7": "\n    N, T = [int(x) for x in input().split()]\n    cash = []\n    time = []\n    for i in range(N):\n        c, t = [int(x) for x in input().split()]\n        cash.append(c)\n        time.append(t)\n    cash.sort(reverse=True)\n    time.sort()\n    total = 0\n    for i in range(N):\n        if time[i] < T:\n            total += cash[i]\n            T -= time[i]\n        else:\n            break\n    print(total)\n",
    "8": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == 1:\n        print(\"Agasa\")\n    else:\n        print(\"Conan\")\n",
    "9": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    if a[0] == 1:\n        print(\"Agasa\")\n    else:\n        print(\"Conan\")\n",
    "10": "\n    b = int(input())\n    g = int(input())\n    n = int(input())\n    if n == b + g:\n        print(1)\n    elif n > b + g:\n        print(0)\n    else:\n        print(b + g - n)\n",
    "11": "\n    b = int(input())\n    g = int(input())\n    n = int(input())\n    if n == b + g:\n        print(1)\n    elif n < b + g:\n        print(n)\n    else:\n        print(n - (n - b - g) % 2)\n",
    "12": "\n    w, h = [int(x) for x in input().split()]\n    grid = []\n    for i in range(h):\n        grid.append([int(x) for x in input().split()])\n    #print(grid)\n    #print(w,h)\n    #print(grid[0][0])\n    #print(grid[0][1])\n    #print(grid[1][0])\n    #print(grid[1][1])\n    #print(grid[2][0])\n    #print(grid[2][1])\n    #print(grid[3][0])\n    #print(grid[3][1])\n    #print(grid[4][0])\n    #print(grid[4][1])\n    #print(grid[5][0])\n    #print(grid[5][1])\n    #print(grid[6][0])\n    #print(grid[6][1])\n    #print(grid[7][0])\n    #print(grid[7][1])\n    #print(grid[8][0])\n    #print(grid[8][1])\n    #print(grid[9][0])\n    #print(grid[9][1])\n    #print(grid[10][0])\n    #print(grid[10][1])\n    #print(grid[11][0])\n    #print(grid[11][1])\n    #print(grid[12][0])\n    #print(grid[12][1])\n    #print(grid[13][0])\n    #print(grid[13][1])\n    #print(grid[14][0])\n    #print(grid[14][1])\n    #print(grid[15][0])\n    #print(grid[15][1])\n    #print(grid[16][0])\n    #print(grid[16][1])\n    #print(grid[17][0])\n    #print(grid[17][1])\n    #print(grid[18][0])\n    #print(grid[18][1])\n    #print(grid[19][0])\n    #print(grid[19][1])\n    #print(grid[20][0])\n    #print(grid[20][1])\n    #print(grid[21][0])\n    #print(grid[21][1])\n    #print(grid[22][0])\n    #print(grid[22][1])\n    #print(grid[23][0])\n    #print(grid[23][1])\n    #print(grid[24][0])\n    #print(grid[24][1])\n    #print(grid[25][0])\n    #print(grid[25][1])\n    #print(grid[26][0])\n    #print(grid[26][1])\n    #print(grid[27][0])\n    #print(grid[27][1])\n    #print(grid[28][0])\n    #print(grid[28][1])\n    #print(grid[29][0])\n    #print(grid[29][1])\n    #print(grid[30][0])\n    #print(grid[30][1])\n    #print(grid[31][0])\n    #print(grid[31][1])\n    #print(grid[32][0])\n    #print(grid[32][1])\n    #print(grid[33][0])\n    #print(grid[33][1])\n    #print(grid[34][0])\n    #print(grid[34][1])\n    #print(grid[35][0])\n    #print(grid[35][1])\n    #print(grid[36][0])\n    #print(grid[36][1])\n    #print(grid[37][0])\n    #print(grid[37][1])\n    #print(grid[38][0])\n    #print(grid[38][1])\n    #print(grid[39][0])\n    #print(grid[39][1])\n    #print(grid[40][0])\n    #print(grid[40][1])\n    #print(grid[41][0])\n    #print(grid[41][1])\n    #print(grid[42][0])\n    #print(grid[42][1])\n    #print(grid[43][0])",
    "13": "\n    w, h = [int(x) for x in input().split()]\n    grid = []\n    for i in range(h):\n        grid.append(list(input()))\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'A':\n                a = (i, j)\n            elif grid[i][j] == 'B':\n                b = (i, j)\n    #print(a, b)\n    #print(grid)\n    #print(w, h)\n    #print(grid[a[0]][a[1]])\n    #print(grid[b[0]][b[1]])\n    #print(grid[a[0]][a[1]] == 'A')\n    #print(grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B')\n    #print(grid[a[0]][a[1]] == 'A' and grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid[b[0]][b[1]] == 'B' and grid[a[0]][a[1]] == 'A' or grid",
    "14": "\n    n, m, s = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        t, u, v = map(int, input().split())\n        graph[u-1].append((t, v-1))\n        if t == 2:\n            graph[v-1].append((t, u-1))\n    visited = [False] * n\n    visited[s-1] = True\n    stack = [s-1]\n    while stack:\n        v = stack.pop()\n        for t, u in graph[v]:\n            if not visited[u]:\n                visited[u] = True\n                stack.append(u)\n    print(sum(visited), end=' ')\n    for i in range(n):\n        if not visited[i]:\n            print(i+1, end=' ')\n    print()\n    visited = [False] * n\n    visited[s-1] = True\n    stack = [s-1]\n    while stack:\n        v = stack.pop()\n        for t, u in graph[v]:\n            if not visited[u]:\n                visited[u] = True\n                stack.append(u)\n    print(sum(visited), end=' ')\n    for i in range(n):\n        if not visited[i]:\n            print(i+1, end=' ')\n    print()\n    visited = [False] * n\n    visited[s-1] = True\n    stack = [s-1]\n    while stack:\n        v = stack.pop()\n        for t, u in graph[v]:\n            if not visited[u]:\n                visited[u] = True\n                stack.append(u)\n    print(sum(visited), end=' ')\n    for i in range(n):\n        if not visited[i]:\n            print(i+1, end=' ')\n    print()\n    visited = [False] * n\n    visited[s-1] = True\n    stack = [s-1]\n    while stack:\n        v = stack.pop()\n        for t, u in graph[v]:\n            if not visited[u]:\n                visited[u] = True\n                stack.append(u)\n    print(sum(visited), end=' ')\n    for i in range(n):\n        if not visited[i]:\n            print(i+1, end=' ')\n    print()\n",
    "15": "\n    n, m, s = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        t, u, v = map(int, input().split())\n        graph[u-1].append((t, v-1))\n        if t == 2:\n            graph[v-1].append((t, u-1))\n    visited = [False] * n\n    visited[s-1] = True\n    stack = [s-1]\n    while stack:\n        v = stack.pop()\n        for t, u in graph[v]:\n            if t == 2 and not visited[u]:\n                visited[u] = True\n                stack.append(u)\n    print(sum(visited))\n    for t, u in graph[s-1]:\n        if t == 2:\n            print('+' if visited[u] else '-')\n\nif __name__ == '__main__':\n    code()",
    "16": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    k = int(n/2)\n    for i in range(k):\n        print(a[i], end=\" \")\n",
    "17": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    k = int(n/2)\n    for i in range(k):\n        print(i, end=\" \")\n",
    "18": "\n        if len(intervals) == 0:\n            return []\n        intervals.sort(key=lambda x: x[0])\n        res = [intervals[0]]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] <= res[-1][1]:\n                res[-1][1] = max(intervals[i][1], res[-1][1])\n            else:\n                res.append(intervals[i])\n        return res",
    "19": "\n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged"
}