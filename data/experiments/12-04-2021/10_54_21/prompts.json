{
    "0": "Python 3\n\"\"\"\n Little Frane is already in tenth grade, but is still struggling with Pascal in computer class. For homework, his teacher wrote the following program into his notebook, and he needs to determine the output, given the integer $N$. readln(N); counter := 0; for i := N - 1 downto 1 do begin   counter := counter + 1;   if N mod i = 0 then break; end; writeln(counter); Write a program which solves Frane s problem. \n-----Input----- The first and only line of input contains the integer $1 \\le N \\le 10^9$. -----Output----- Output the result from Frane\u2019s program on a single line. -----Examples----- Sample Input 1: 1 Sample Output 1: 0 Sample Input 2: 10 Sample Output 2: 5\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nLittle Frane is already in tenth grade, but is still struggling with Pascal in computer class. For homework, his teacher wrote the following program into his notebook, and he needs to determine the output, given the integer $N$.\n\nreadln(N);\ncounter := 0;\nfor i := N - 1 downto 1 do begin\n  counter := counter + 1;\n  if N mod i = 0 then break;\nend;\nwriteln(counter);\n\nWrite a program which solves Frane\u2019s problem.\n\n-----Input-----\nThe first and only line of input contains the integer $1 \\le N \\le 10^9$.\n\n-----Output-----\nOutput the result from Frane\u2019s program on a single line.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n0\n\nSample Input 2:\n10\nSample Output 2:\n5\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You have to figure out if it is possible for either type of person to get between various locations of interest. People can move north, south, east or west, but cannot move diagonally.\n-----Input----- Input starts with a line containing two positive integers, $1 \\le r \\le 1000$ and $1 \\le c \\le 1000$. The next $r$ input lines give the contents of the map, each line containing exactly $c$ characters (which are all chosen from $0$ or $1$). The next line has an integer $0 \\le n \\le 1000$. The following $n$ lines each contain one query, given as four integers: $r_1,c_1$ and $r_2,c_2$. These two pairs indicate two locations on the map, and their limits are $1 \\le r_1, r_2 \\le r$ and $1 \\le c_1, c_2 \\le c$. -----Output----- For each query, output binary if a binary user can start from location $r_1, c_1$ and move to location $r_2, c_2$. Output decimal if a decimal user can move between the two locations. Otherwise, output neither. -----Examples----- Sample Input: 1 4 1100 2 1 1 1 4 1 1 1 1 Sample Output: neither decimal\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe world is made up of $10$ kinds of people, those who understand binary and those who do not. These different kinds of people do not always get along so well. Bob might ask for a $10000$ ounce coffee (meaning binary) and Alice might make misinterpret his request as being in decimal and give him a $10011100010000$ ounce coffee (binary). After Sue explains that this much coffee costs $100$ dollars (decimal), Bob might assume he only has to pay $4$ dollars (interpreting the price as being in binary). In response to these differences that are difficult to resolve, these two groups have divided the world into two regions, the binary-friendly zones and the decimal-friendly zones. They have even published a map like the following to help people keep up with where the areas are (they have used ones and zeros so nobody would have trouble reading it).1111100000\n\n1111000000\n\n1110000011\n\n0111100111\n\n0011111111\n\nUsers of binary have to stay in the zones marked with a zero. Users of decimal have to stay in the zones marked with a one. You have to figure out if it is possible for either type of person to get between various locations of interest. People can move north, south, east or west, but cannot move diagonally.\n\n-----Input-----\nInput starts with a line containing two positive integers, $1 \\le r \\le 1000$ and $1 \\le c \\le 1000$. The next $r$ input lines give the contents of the map, each line containing exactly $c$ characters (which are all chosen from $0$ or $1$).\n\nThe next line has an integer $0 \\le n \\le 1000$. The following $n$ lines each contain one query, given as four integers: $r_1,c_1$ and $r_2,c_2$. These two pairs indicate two locations on the map, and their limits are $1 \\le r_1, r_2 \\le r$ and $1 \\le c_1, c_2 \\le c$.\n\n-----Output-----\nFor each query, output binary if a binary user can start from location $r_1, c_1$ and move to location $r_2, c_2$. Output decimal if a decimal user can move between the two locations. Otherwise, output neither.\n\n-----Examples-----\nSample Input:\n1 4\n1100\n2\n1 1 1 4\n1 1 1 1\nSample Output:\nneither\ndecimal\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a tree. The teacher will start from the first k nodes in a DFS-order traversal of the tree. She will then assign you a grade equal to the minimum a_{i} she finds among those k nodes. You can choose the root node that your teacher starts from. You can also rearrange the list of neighbors of each node in any order you like. Help you find the best grade you can get on this assignment. \n-----Input----- The first line of the input contains two positive integers, n and k (2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of balls in Jacob's tree and the number of balls the teacher will inspect. The second line contains n integers, a_{i} (1 \u2264 a_{i} \u2264 1 000 000), the time Jacob used to build the i-th ball. Each of the next n - 1 lines contains two integers u_{i}, v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) representing a connection in Jacob's tree between balls u_{i} and v_{i}. -----Output----- Print a single integer\u00a0\u2014 the maximum grade Jacob can get by picking the right root of the tree and rearranging the list of neighbors. -----Examples----- Input 5 3 3 6 1 4 2 1 2 2 4 2 5 1 3 Output 3 Input 4 2 1 5 5 5 1 2 1 3 1 4 Output 1 -----Note----- In the first sample, Jacob can root the tree at node 2 and order 2's neighbors in the order 4, 1, 5 (all other nodes have at most two neighbors). The resulting preorder traversal is 2, 4, 1, 3, 5, and the minimum a_{i} of the first 3 nodes is 3. In the second sample, it is clear that any preorder traversal will contain node 1 as either its first or second node, so Jacob cannot do better than a grade of 1.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nFor his computer science class, Jacob builds a model tree with sticks and balls containing n nodes in the shape of a tree. Jacob has spent a_{i} minutes building the i-th ball in the tree.\n\nJacob's teacher will evaluate his model and grade Jacob based on the effort he has put in. However, she does not have enough time to search his whole tree to determine this; Jacob knows that she will examine the first k nodes in a DFS-order traversal of the tree. She will then assign Jacob a grade equal to the minimum a_{i} she finds among those k nodes.\n\nThough Jacob does not have enough time to rebuild his model, he can choose the root node that his teacher starts from. Furthermore, he can rearrange the list of neighbors of each node in any order he likes. Help Jacob find the best grade he can get on this assignment.\n\nA DFS-order traversal is an ordering of the nodes of a rooted tree, built by a recursive DFS-procedure initially called on the root of the tree. When called on a given node v, the procedure does the following:   Print v.  Traverse the list of neighbors of the node v in order and iteratively call DFS-procedure on each one. Do not call DFS-procedure on node u if you came to node v directly from u. \n\n\n-----Input-----\n\nThe first line of the input contains two positive integers, n and k (2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of balls in Jacob's tree and the number of balls the teacher will inspect.\n\nThe second line contains n integers, a_{i} (1 \u2264 a_{i} \u2264 1 000 000), the time Jacob used to build the i-th ball.\n\nEach of the next n - 1 lines contains two integers u_{i}, v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) representing a connection in Jacob's tree between balls u_{i} and v_{i}.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum grade Jacob can get by picking the right root of the tree and rearranging the list of neighbors.\n\n\n-----Examples-----\nInput\n5 3\n3 6 1 4 2\n1 2\n2 4\n2 5\n1 3\n\nOutput\n3\n\nInput\n4 2\n1 5 5 5\n1 2\n1 3\n1 4\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample, Jacob can root the tree at node 2 and order 2's neighbors in the order 4, 1, 5 (all other nodes have at most two neighbors). The resulting preorder traversal is 2, 4, 1, 3, 5, and the minimum a_{i} of the first 3 nodes is 3.\n\nIn the second sample, it is clear that any preorder traversal will contain node 1 as either its first or second node, so Jacob cannot do better than a grade of 1.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Oliver is a manager of a bank near KTH and wants to close soon. There are many people standing in the queue wanting to put cash into their accounts after they heard that the bank increased the interest rates by $42\\% $ (from $0.01\\% $ per year to $0.0142\\% $ per year). However, there are too many people and only one counter is open which can serve one person per minute. Greedy as Oliver is, he would like to select some people in the queue, so that the total amount of cash stored by these people is as big as possible and that money then can work for the bank overnight. There is a problem, though. Some people don t have the time to wait until the bank closes because they have to run somewhere else, so they have to be served before a certain time, after which they just leave. Oliver also turned off the infrared door sensor outside the bank, so that no more people can enter, because it s already too crowded in the hall. Help Oliver calculate how much cash he can get from the people currently standing in the queue before the bank closes by serving at most one person per minute.\n-----Input----- The first line of input contains two integers $N$ $(1\\leq N\\leq 10000)$ and $T$ $(1\\le T \\le 47)$, the number of people in the queue and the time in minutes until Oliver closes the bank. Then follow $N$ lines, each with 2 integers $c_ i$ and $t_ i$, denoting the amount of cash in Swedish crowns person $i$ has and the time in minutes from now after which person $i$ leaves if not served. Note that it takes one minute to serve a person and you must begin serving a person at time $t_ i$ at the latest. You can assume that $1\\le c_ i \\le 100000$ and $0 \\le t_ i < T$. -----Output----- Output one line with the maximum amount of money you can get from the people in the queue before the bank closes. -----Examples----- Sample Input: 4 4 1000 1 2000 2 500 2 1200 0 Sample Output: 4200\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nOliver is a manager of a bank near KTH and wants to close soon. There are many people standing in the queue wanting to put cash into their accounts after they heard that the bank increased the interest rates by $42\\% $ (from $0.01\\% $ per year to $0.0142\\% $ per year). \n\nHowever, there are too many people and only one counter is open which can serve one person per minute. Greedy as Oliver is, he would like to select some people in the queue, so that the total amount of cash stored by these people is as big as possible and that money then can work for the bank overnight.\n\nThere is a problem, though. Some people don\u2019t have the time to wait until the bank closes because they have to run somewhere else, so they have to be served before a certain time, after which they just leave. Oliver also turned off the infrared door sensor outside the bank, so that no more people can enter, because it\u2019s already too crowded in the hall.\n\n-----Task-----\nHelp Oliver calculate how much cash he can get from the people currently standing in the queue before the bank closes by serving at most one person per minute.\n\n-----Input-----\nThe first line of input contains two integers $N$ $(1\\leq N\\leq 10000)$ and $T$ $(1\\le T \\le 47)$, the number of people in the queue and the time in minutes until Oliver closes the bank. Then follow $N$ lines, each with 2 integers $c_ i$ and $t_ i$, denoting the amount of cash in Swedish crowns person $i$ has and the time in minutes from now after which person $i$ leaves if not served. Note that it takes one minute to serve a person and you must begin serving a person at time $t_ i$ at the latest. You can assume that $1\\le c_ i \\le 100000$ and $0 \\le t_ i < T$.\n\n-----Output-----\nOutput one line with the maximum amount of money you can get from the people in the queue before the bank closes.\n\n-----Examples-----\nSample Input:\n4 4\n1000 1\n2000 2\n500 2\n1200 0\nSample Output:\n4200\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You have n cards, and the i-th card has a number a_{i} written on it. You take turns playing, starting with Conan. In each turn, the player chooses a card and removes it. Also, he removes all cards having a number strictly lesser than the number on the chosen card. Predict the outcome of the game, assuming both players play optimally. \n-----Input----- The first line contains an integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of cards Conan has.  The next line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^5), where a_{i} is the number on the i-th card. -----Output----- If Conan wins, print \"Conan\" (without quotes), otherwise print \"Agasa\" (without quotes). -----Examples----- Input 3 4 5 7 Output Conan Input 2 1 1 Output Agasa -----Note----- In the first example, Conan can just choose the card having number 7 on it and hence remove all the cards. After that, there are no cards left on Agasa's turn. In the second example, no matter which card Conan chooses, there will be one one card left, which Agasa can choose. After that, there are no cards left when it becomes Conan's turn again.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nEdogawa Conan got tired of solving cases, and invited his friend, Professor Agasa, over. They decided to play a game of cards. Conan has n cards, and the i-th card has a number a_{i} written on it.\n\nThey take turns playing, starting with Conan. In each turn, the player chooses a card and removes it. Also, he removes all cards having a number strictly lesser than the number on the chosen card. Formally, if the player chooses the i-th card, he removes that card and removes the j-th card for all j such that a_{j} < a_{i}.\n\nA player loses if he cannot make a move on his turn, that is, he loses if there are no cards left. Predict the outcome of the game, assuming both players play optimally.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of cards Conan has. \n\nThe next line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^5), where a_{i} is the number on the i-th card.\n\n\n-----Output-----\n\nIf Conan wins, print \"Conan\" (without quotes), otherwise print \"Agasa\" (without quotes).\n\n\n-----Examples-----\nInput\n3\n4 5 7\n\nOutput\nConan\n\nInput\n2\n1 1\n\nOutput\nAgasa\n\n\n\n-----Note-----\n\nIn the first example, Conan can just choose the card having number 7 on it and hence remove all the cards. After that, there are no cards left on Agasa's turn.\n\nIn the second example, no matter which card Conan chooses, there will be one one card left, which Agasa can choose. After that, there are no cards left when it becomes Conan's turn again.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n There are $b$ boys and $g$ girls participating in Olympiad of Metropolises. There will be a board games tournament in the evening and $n$ participants have accepted the invitation. The organizers do not know how many boys and girls are among them. Organizers are preparing red badges for girls and blue ones for boys. Vasya prepared $n+1$ decks of badges. The $i$-th (where $i$ is from $0$ to $n$, inclusive) deck contains $i$ blue badges and $n-i$ red ones. The total number of badges in any deck is exactly $n$. Determine the minimum number of decks among these $n+1$ that Vasya should take, so that there will be a suitable deck no matter how many girls and boys there will be among the participants of the tournament.\n-----Input----- The first line contains an integer $b$ ($1 \\le b \\le 300$), the number of boys.  The second line contains an integer $g$ ($1 \\le g \\le 300$), the number of girls.  The third line contains an integer $n$ ($1 \\le n \\le b + g$), the number of the board games tournament participants. -----Output----- Output the only integer, the minimum number of badge decks that Vasya could take. -----Examples----- Input 5 6 3 Output 4 Input 5 3 5 Output 4 -----Note----- In the first example, each of 4 decks should be taken: (0 blue, 3 red), (1 blue, 2 red), (2 blue, 1 red), (3 blue, 0 red). In the second example, 4 decks should be taken: (2 blue, 3 red), (3 blue, 2 red), (4 blue, 1 red), (5 blue, 0 red). Piles (0 blue, 5 red) and (1 blue, 4 red) can not be used.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere are $b$ boys and $g$ girls participating in Olympiad of Metropolises. There will be a board games tournament in the evening and $n$ participants have accepted the invitation. The organizers do not know how many boys and girls are among them.\n\nOrganizers are preparing red badges for girls and blue ones for boys.\n\nVasya prepared $n+1$ decks of badges. The $i$-th (where $i$ is from $0$ to $n$, inclusive) deck contains $i$ blue badges and $n-i$ red ones. The total number of badges in any deck is exactly $n$.\n\nDetermine the minimum number of decks among these $n+1$ that Vasya should take, so that there will be a suitable deck no matter how many girls and boys there will be among the participants of the tournament.\n\n\n-----Input-----\n\nThe first line contains an integer $b$ ($1 \\le b \\le 300$), the number of boys. \n\nThe second line contains an integer $g$ ($1 \\le g \\le 300$), the number of girls. \n\nThe third line contains an integer $n$ ($1 \\le n \\le b + g$), the number of the board games tournament participants.\n\n\n-----Output-----\n\nOutput the only integer, the minimum number of badge decks that Vasya could take.\n\n\n-----Examples-----\nInput\n5\n6\n3\n\nOutput\n4\n\nInput\n5\n3\n5\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example, each of 4 decks should be taken: (0 blue, 3 red), (1 blue, 2 red), (2 blue, 1 red), (3 blue, 0 red).\n\nIn the second example, 4 decks should be taken: (2 blue, 3 red), (3 blue, 2 red), (4 blue, 1 red), (5 blue, 0 red). Piles (0 blue, 5 red) and (1 blue, 4 red) can not be used.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Two kingdoms had been at war for a long time, until the emperor intervened to bring an end to the conflict. The territory in question comprises an $M$ by $N$ rectangular grid. At the emperor s insistence, the two kings have withdrawn their troops until no two opposing troops are in adjacent squares of the map (adjacent being horizontal or vertical   diagonal is not considered). The emperor proposes to designate certain squares of the map as neutral territory. Neither king will be allowed to move troops into those squares, and the emperor s own forces will patrol them to be sure that both kings observe these rules. The emperor is frugal and does not want to commit more soldiers to this effort than absolutely necessary. His generals have marked each square of the map with the number of soldiers required to secure that square. What remains is to choose which of those squares should be patrolled. Write a program to determine the minimum number of soldiers that the emperor will need to be deploy to guarantee that the troops of one kingdom cannot move, in one or more steps, into squares occupied by the troops of the second kingdom (moving horizontally or vertically) without encountering the emperor s own soldiers.\n-----Input----- Input begins with a line containing $2$ integers, $w$ and $h$, denoting the width and height of the map, where $1 \\leq w, h \\leq 40$. This is followed by $h$ lines. Each line contains $w$ characters, left justified. These characters will be \u2018A\u2019 or \u2018B\u2019, designating a position held by king A or king B, or a single numeric digit, designating a currently unoccupied position that can be secured by the use of that number of soldiers. For example, a \u20182\u2019 would indicate that two soldiers must be deployed to that square to secure it against passage of other troops. A \u20180\u2019 indicates terrain that is impassible \u2013 the emperor need not commit soldiers there because the kingdom troops cannot pass through that square. No \u2018A\u2019 will be adjacent, horizontally or vertically, to any \u2018B\u2019. There will be at least one \u2018A\u2019 and one \u2018B\u2019 in the input. -----Output----- Print a single line containing an integer denoting the minimum number of soldiers that the emperor must deploy to guarantee that there is no open path between any \u2018A\u2019 position and any \u2018B\u2019 position, using any combination of horizontal or vertical moves. -----Examples----- Sample Input: 8 5 A11111AA AA7B111A 111BB111 11BBB111 11BBB11B Sample Output: 13\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nTwo kingdoms had been at war for a long time, until the emperor intervened to bring an end to the conflict. The territory in question comprises an $M$ by $N$ rectangular grid. At the emperor\u2019s insistence, the two kings have withdrawn their troops until no two opposing troops are in adjacent squares of the map (adjacent being horizontal or vertical \u2013 diagonal is not considered).\n\nThe emperor proposes to designate certain squares of the map as neutral territory. Neither king will be allowed to move troops into those squares, and the emperor\u2019s own forces will patrol them to be sure that both kings observe these rules.\n\nThe emperor is frugal and does not want to commit more soldiers to this effort than absolutely necessary. His generals have marked each square of the map with the number of soldiers required to secure that square. What remains is to choose which of those squares should be patrolled.\n\nWrite a program to determine the minimum number of soldiers that the emperor will need to be deploy to guarantee that the troops of one kingdom cannot move, in one or more steps, into squares occupied by the troops of the second kingdom (moving horizontally or vertically) without encountering the emperor\u2019s own soldiers.\n\n-----Input-----\nInput begins with a line containing $2$ integers, $w$ and $h$, denoting the width and height of the map, where $1 \\leq w, h \\leq 40$.\n\nThis is followed by $h$ lines. Each line contains $w$ characters, left justified. These characters will be \u2018A\u2019 or \u2018B\u2019, designating a position held by king A or king B, or a single numeric digit, designating a currently unoccupied position that can be secured by the use of that number of soldiers. For example, a \u20182\u2019 would indicate that two soldiers must be deployed to that square to secure it against passage of other troops. A \u20180\u2019 indicates terrain that is impassible \u2013 the emperor need not commit soldiers there because the kingdom troops cannot pass through that square.\n\nNo \u2018A\u2019 will be adjacent, horizontally or vertically, to any \u2018B\u2019.\n\nThere will be at least one \u2018A\u2019 and one \u2018B\u2019 in the input.\n\n-----Output-----\nPrint a single line containing an integer denoting the minimum number of soldiers that the emperor must deploy to guarantee that there is no open path between any \u2018A\u2019 position and any \u2018B\u2019 position, using any combination of horizontal or vertical moves.\n\n-----Examples-----\nSample Input:\n8 5\nA11111AA\nAA7B111A\n111BB111\n11BBB111\n11BBB11B\nSample Output:\n13\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n you are given a graph. Each edge can be directed or undirected. You are given a vertex. Create two plans to orient edges in two directions. Each edge must be directed in both plans. \n-----Input----- The first line contains three integers n, m and s (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 m \u2264 3\u00b710^5, 1 \u2264 s \u2264 n) \u2014 number of vertices and edges in the graph, and the vertex Vasya has picked. The following m lines contain information about the graph edges. Each line contains three integers t_{i}, u_{i} and v_{i} (1 \u2264 t_{i} \u2264 2, 1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) \u2014 edge type and vertices connected by the edge. If t_{i} = 1 then the edge is directed and goes from the vertex u_{i} to the vertex v_{i}. If t_{i} = 2 then the edge is undirected and it connects the vertices u_{i} and v_{i}. It is guaranteed that there is at least one undirected edge in the graph. -----Output----- The first two lines should describe the plan which maximizes the number of reachable vertices. The lines three and four should describe the plan which minimizes the number of reachable vertices. A description of each plan should start with a line containing the number of reachable vertices. The second line of a plan should consist of f symbols '+' and '-', where f is the number of undirected edges in the initial graph. Print '+' as the j-th symbol of the string if the j-th undirected edge (u, v) from the input should be oriented from u to v. Print '-' to signify the opposite direction (from v to u). Consider undirected edges to be numbered in the same order they are given in the input. If there are multiple solutions, print any of them. -----Examples----- Input 2 2 1 1 1 2 2 2 1 Output 2 - 2 + Input 6 6 3 2 2 6 1 4 5 2 3 4 1 4 1 1 3 1 2 2 3 Output 6 ++- 2 +-+\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nVasya has a graph containing both directed (oriented) and undirected (non-oriented) edges. There can be multiple edges between a pair of vertices.\n\nVasya has picked a vertex s from the graph. Now Vasya wants to create two separate plans:\n\n  to orient each undirected edge in one of two possible directions to maximize number of vertices reachable from vertex s;  to orient each undirected edge in one of two possible directions to minimize number of vertices reachable from vertex s. \n\nIn each of two plans each undirected edge must become directed. For an edge chosen directions can differ in two plans.\n\nHelp Vasya find the plans.\n\n\n-----Input-----\n\nThe first line contains three integers n, m and s (2 \u2264 n \u2264 3\u00b710^5, 1 \u2264 m \u2264 3\u00b710^5, 1 \u2264 s \u2264 n) \u2014 number of vertices and edges in the graph, and the vertex Vasya has picked.\n\nThe following m lines contain information about the graph edges. Each line contains three integers t_{i}, u_{i} and v_{i} (1 \u2264 t_{i} \u2264 2, 1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) \u2014 edge type and vertices connected by the edge. If t_{i} = 1 then the edge is directed and goes from the vertex u_{i} to the vertex v_{i}. If t_{i} = 2 then the edge is undirected and it connects the vertices u_{i} and v_{i}.\n\nIt is guaranteed that there is at least one undirected edge in the graph.\n\n\n-----Output-----\n\nThe first two lines should describe the plan which maximizes the number of reachable vertices. The lines three and four should describe the plan which minimizes the number of reachable vertices.\n\nA description of each plan should start with a line containing the number of reachable vertices. The second line of a plan should consist of f symbols '+' and '-', where f is the number of undirected edges in the initial graph. Print '+' as the j-th symbol of the string if the j-th undirected edge (u, v) from the input should be oriented from u to v. Print '-' to signify the opposite direction (from v to u). Consider undirected edges to be numbered in the same order they are given in the input.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n2 2 1\n1 1 2\n2 2 1\n\nOutput\n2\n-\n2\n+\n\nInput\n6 6 3\n2 2 6\n1 4 5\n2 3 4\n1 4 1\n1 3 1\n2 2 3\n\nOutput\n6\n++-\n2\n+-+\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n The city administration wants to build k houses, so there must be at least k hills that satisfy the condition above. What is the minimum time required to adjust the hills to achieve the administration's plan? However, the exact value of k is not yet determined, so could you please calculate answers for all k in range $1 \\leq k \\leq \\lceil \\frac{n}{2} \\rceil$? Here $\\lceil \\frac{n}{2} \\rceil$ denotes n divided by two, rounded up. \n-----Input----- The first line of input contains the only integer n (1 \u2264 n \u2264 5000)\u2014the number of the hills in the sequence. Second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000)\u2014the heights of the hills in the sequence. -----Output----- Print exactly $\\lceil \\frac{n}{2} \\rceil$ numbers separated by spaces. The i-th printed number should be equal to the minimum number of hours required to level hills so it becomes possible to build i houses. -----Examples----- Input 5 1 1 1 1 1 Output 1 2 2  Input 3 1 2 3 Output 0 2  Input 5 1 2 3 2 2 Output 0 1 3  -----Note----- In the first example, to get at least one hill suitable for construction, one can decrease the second hill by one in one hour, then the sequence of heights becomes 1, 0, 1, 1, 1 and the first hill becomes suitable for construction. In the first example, to get at least two or at least three suitable hills, one can decrease the second and the fourth hills, then the sequence of heights becomes 1, 0, 1, 0, 1, and hills 1, 3, 5 become suitable for construction.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nWelcome to Innopolis city. Throughout the whole year, Innopolis citizens suffer from everlasting city construction. \n\nFrom the window in your room, you see the sequence of n hills, where i-th of them has height a_{i}. The Innopolis administration wants to build some houses on the hills. However, for the sake of city appearance, a house can be only built on the hill, which is strictly higher than neighbouring hills (if they are present). For example, if the sequence of heights is 5, 4, 6, 2, then houses could be built on hills with heights 5 and 6 only.\n\nThe Innopolis administration has an excavator, that can decrease the height of an arbitrary hill by one in one hour. The excavator can only work on one hill at a time. It is allowed to decrease hills up to zero height, or even to negative values. Increasing height of any hill is impossible. The city administration wants to build k houses, so there must be at least k hills that satisfy the condition above. What is the minimum time required to adjust the hills to achieve the administration's plan?\n\nHowever, the exact value of k is not yet determined, so could you please calculate answers for all k in range $1 \\leq k \\leq \\lceil \\frac{n}{2} \\rceil$? Here $\\lceil \\frac{n}{2} \\rceil$ denotes n divided by two, rounded up.\n\n\n-----Input-----\n\nThe first line of input contains the only integer n (1 \u2264 n \u2264 5000)\u2014the number of the hills in the sequence.\n\nSecond line contains n integers a_{i} (1 \u2264 a_{i} \u2264 100 000)\u2014the heights of the hills in the sequence.\n\n\n-----Output-----\n\nPrint exactly $\\lceil \\frac{n}{2} \\rceil$ numbers separated by spaces. The i-th printed number should be equal to the minimum number of hours required to level hills so it becomes possible to build i houses.\n\n\n-----Examples-----\nInput\n5\n1 1 1 1 1\n\nOutput\n1 2 2 \n\nInput\n3\n1 2 3\n\nOutput\n0 2 \n\nInput\n5\n1 2 3 2 2\n\nOutput\n0 1 3 \n\n\n\n-----Note-----\n\nIn the first example, to get at least one hill suitable for construction, one can decrease the second hill by one in one hour, then the sequence of heights becomes 1, 0, 1, 1, 1 and the first hill becomes suitable for construction.\n\nIn the first example, to get at least two or at least three suitable hills, one can decrease the second and the fourth hills, then the sequence of heights becomes 1, 0, 1, 0, 1, and hills 1, 3, 5 become suitable for construction.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given a collection of intervals, merge all overlapping intervals. \nExample 1: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. Example 2: Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considerred overlapping.\n\"\"\"\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:",
    "19": "Python 3\n\"\"\"\nGiven a collection of intervals, merge all overlapping intervals.\n\nExample 1:\n\n\nInput: [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n\n\nExample 2:\n\n\nInput: [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considerred overlapping.\n\"\"\"\nclass Solution:\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:"
}