{
    "0": "Python 3\n\"\"\"\nCharacters of a string is decoded using mapping as 'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nDetermine the total number of ways to decode it.  There should be no leading \"0\"s, but can contain trailing \"0\"s.Print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nDhruvil has always been a studious person and will be completing his Engineering soon. He is always kneen about solving problems and is preparing hard for his next interview at Hackerrank. He has practiced lots of problems and now he came across this problem.\nGiven a message containing English letters(A-Z), it is being encoded to numbers using the following mapping:\n'A' -> 1,'B' -> 2 \u2026\u2026\u2026\u2026\u2026\u2026 'Z' -> 26.\nNow, given a non-empty string containing only digits, help Dhruvil determine the total number of ways to decode it.\nWhile decoding you need to choose a substring of charachters and not a subsequence. Also a chosen substring should not contain any leading \"0\"s, but can contain trailing \"0\"s. Since the output can be very large print the answer as modulo 10^9 + 7 i.e 1000000007.\n\n-----Input:-----\nThe first line of the input consists of single integer T, the number of test cases.\nEach test case consists of a string.\n\n-----Output:-----\nFor each test case print a single integer - the total number of ways to decode the digit string.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq S \\leq 10^9$\n\n-----Sample Input:-----\n2\n12\n\n226\n\n-----Sample Output:-----\n2\n\n3\n\n-----EXPLANATION:-----\nThere are 2 possible ways. It could be decoded as \"AB\" {1,2} or \"L\" {12}.\nThere are 3 possible ways. It could be decoded as \"BZ\" {2,26}, \"VF\" {22,6}, or \"BBF\" {2,2,6}.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nObtain the solutions to 2^n for a given n and display their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe chef won a duet singing award at Techsurge & Mridang 2012. From that time he is obsessed with the number 2.\n\nHe just started calculating the powers of two. And adding the digits of the results.\n\nBut he got puzzled after a few calculations. So gave you the job to generate the solutions to 2^n and find their sum of digits.\n\n-----Input-----\nN : number of inputs N<=100\n\nthen N lines with input T<=2000\n\n-----Output-----\nThe output for the corresponding input T\n\n-----Example-----\nInput:\n3\n5\n10\n4\n\nOutput:\n5\n7\n7\n\nExplanation:\n2^5=32\n3+2=5\n2^10=1024\n1+0+2+4=7\n2^4=16\n1+6=7\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a string $s$ of length $n$ consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases. $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length of a string $s$.\n\nThe second line of a test case description contains string $s$ of length $n$ consisting of lowercase English letters and question marks.\n\n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if there is no way to replace question marks in string $s$ with a lowercase English letters in such a way that there is exactly one occurrence of a string \"abacaba\" in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\" and in the next line output a resulting string consisting of $n$ lowercase English letters. If there are multiple possible strings, output any.\n\nYou may print every letter in \"Yes\" and \"No\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nAcacius is studying strings theory. Today he came with the following problem.\n\nYou are given a string $s$ of length $n$ consisting of lowercase English letters and question marks. It is possible to replace question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once?\n\nEach question mark should be replaced with exactly one lowercase English letter. For example, string \"a?b?c\" can be transformed into strings \"aabbc\" and \"azbzc\", but can't be transformed into strings \"aabc\", \"a?bbc\" and \"babbc\".\n\nOccurrence of a string $t$ of length $m$ in the string $s$ of length $n$ as a substring is a index $i$ ($1 \\leq i \\leq n - m + 1$) such that string $s[i..i+m-1]$ consisting of $m$ consecutive symbols of $s$ starting from $i$-th equals to string $t$. For example string \"ababa\" has two occurrences of a string \"aba\" as a substring with $i = 1$ and $i = 3$, but there are no occurrences of a string \"aba\" in the string \"acba\" as a substring.\n\nPlease help Acacius to check if it is possible to replace all question marks with lowercase English letters in such a way that a string \"abacaba\" occurs as a substring in a resulting string exactly once.\n\n\n-----Input-----\n\nFirst line of input contains an integer $T$ ($1 \\leq T \\leq 5000$), number of test cases. $T$ pairs of lines with test case descriptions follow.\n\nThe first line of a test case description contains a single integer $n$ ($7 \\leq n \\leq 50$), length of a string $s$.\n\nThe second line of a test case description contains string $s$ of length $n$ consisting of lowercase English letters and question marks.\n\n\n-----Output-----\n\nFor each test case output an answer for it.\n\nIn case if there is no way to replace question marks in string $s$ with a lowercase English letters in such a way that there is exactly one occurrence of a string \"abacaba\" in the resulting string as a substring output \"No\".\n\nOtherwise output \"Yes\" and in the next line output a resulting string consisting of $n$ lowercase English letters. If there are multiple possible strings, output any.\n\nYou may print every letter in \"Yes\" and \"No\" in any case you want (so, for example, the strings yEs, yes, Yes, and YES will all be recognized as positive answer).\n\n\n-----Example-----\nInput\n6\n7\nabacaba\n7\n???????\n11\naba?abacaba\n11\nabacaba?aba\n15\nasdf???f???qwer\n11\nabacabacaba\n\nOutput\nYes\nabacaba\nYes\nabacaba\nYes\nabadabacaba\nYes\nabacabadaba\nNo\nNo\n\n\n\n-----Note-----\n\nIn first example there is exactly one occurrence of a string \"abacaba\" in the string \"abacaba\" as a substring.\n\nIn second example seven question marks can be replaced with any seven lowercase English letters and with \"abacaba\" in particular.\n\nIn sixth example there are two occurrences of a string \"abacaba\" as a substring.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a method that, given the correct word and the player's guess, returns this number. The guessed word should be the same length as the correct word.\n\nExamples:\n\nCountCorrectCharacters(\"dog\", \"car\"); //0 (No letters are in the correct position)\nCountCorrectCharacters(\"dog\", \"god\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"cog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"cod\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"bog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"dog\"); //3 (Correct!)\ncount_correct_characters(\"dog\", \"car\"); #0 (No letters are in the correct position)\ncount_correct_characters(\"dog\", \"god\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"cog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"cod\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"bog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"dog\"); #3 (Correct!)\n\"\"\"\ndef count_correct_characters(correct, guess):",
    "7": "Python 3\n\"\"\"\nConsider a game, wherein the player has to guess a target word. All the player knows is the length of the target word.\n\nTo help them in their goal, the game will accept guesses, and return the number of letters that are in the correct position.\n\nWrite a method that, given the correct word and the player's guess, returns this number.\n\nFor example, here's a possible thought process for someone trying to guess the word \"dog\":\n\n```cs\nCountCorrectCharacters(\"dog\", \"car\"); //0 (No letters are in the correct position)\nCountCorrectCharacters(\"dog\", \"god\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"cog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"cod\"); //1 (\"o\")\nCountCorrectCharacters(\"dog\", \"bog\"); //2 (\"o\" and \"g\")\nCountCorrectCharacters(\"dog\", \"dog\"); //3 (Correct!)\n```\n```python\ncount_correct_characters(\"dog\", \"car\"); #0 (No letters are in the correct position)\ncount_correct_characters(\"dog\", \"god\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"cog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"cod\"); #1 (\"o\")\ncount_correct_characters(\"dog\", \"bog\"); #2 (\"o\" and \"g\")\ncount_correct_characters(\"dog\", \"dog\"); #3 (Correct!)\n```\n\nThe caller should ensure that the guessed word is always the same length as the correct word, but since it could cause problems if this were not the case, you need to check for this eventuality:\n\n```cs\n//Throw an InvalidOperationException if the two parameters are of different lengths.\n```\n```python\n#Raise an exception if the two parameters are of different lengths.\n```\n\nYou may assume, however, that the two parameters will always be in the same case.\n\"\"\"\ndef count_correct_characters(correct, guess):",
    "8": "Python 3\n\"\"\"\nYou are given a string s of length n.\nDoes a tree with n vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., n.\n - The edges are numbered 1,2,..., n-1, and Edge i connects Vertex u_i and v_i.\n - If the i-th character in s is 1, we can have a connected component of size i by removing one edge from the tree.\n - If the i-th character in s is 0, we cannot have a connected component of size i by removing any one edge from the tree.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - s is a string of length n consisting of 0 and 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n1111\n\n-----Sample Output-----\n-1\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given a string s of length n.\nDoes a tree with n vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., n.\n - The edges are numbered 1,2,..., n-1, and Edge i connects Vertex u_i and v_i.\n - If the i-th character in s is 1, we can have a connected component of size i by removing one edge from the tree.\n - If the i-th character in s is 0, we cannot have a connected component of size i by removing any one edge from the tree.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - s is a string of length n consisting of 0 and 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n1111\n\n-----Sample Output-----\n-1\n\nIt is impossible to have a connected component of size n after removing one edge from a tree with n vertices.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ positive integers.\n\nYou can use the following operation as many times as you like: select any integer $1 \\le k \\le n$ and do one of two things:   decrement by one $k$ of the first elements of the array.  decrement by one $k$ of the last elements of the array. \n\nDetermine if it is possible to make all the elements of the array equal to zero by applying a certain number of operations.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 30000$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing one integer $n$ ($1 \\le n \\le 30000$)\u00a0\u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1 \\ldots a_n$ ($1 \\le a_i \\le 10^6$).\n\nThe sum of $n$ over all test cases does not exceed $30000$.\n\n\n-----Output-----\n\nFor each test case, output on a separate line:   YES, if it is possible to make all elements of the array equal to zero by applying a certain number of operations.  NO, otherwise. \n\nThe letters in the words YES and NO can be outputed in any case.\n\n\n-----Example-----\nInput\n4\n3\n1 2 1\n5\n11 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n\nOutput\nYES\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ positive integers.\n\nYou can use the following operation as many times as you like: select any integer $1 \\le k \\le n$ and do one of two things:   decrement by one $k$ of the first elements of the array.  decrement by one $k$ of the last elements of the array. \n\nFor example, if $n=5$ and $a=[3,2,2,1,4]$, then you can apply one of the following operations to it (not all possible options are listed below):   decrement from the first two elements of the array. After this operation $a=[2, 1, 2, 1, 4]$;  decrement from the last three elements of the array. After this operation $a=[3, 2, 1, 0, 3]$;  decrement from the first five elements of the array. After this operation $a=[2, 1, 1, 0, 3]$; \n\nDetermine if it is possible to make all the elements of the array equal to zero by applying a certain number of operations.\n\n\n-----Input-----\n\nThe first line contains one positive integer $t$ ($1 \\le t \\le 30000$)\u00a0\u2014 the number of test cases. Then $t$ test cases follow.\n\nEach test case begins with a line containing one integer $n$ ($1 \\le n \\le 30000$)\u00a0\u2014 the number of elements in the array.\n\nThe second line of each test case contains $n$ integers $a_1 \\ldots a_n$ ($1 \\le a_i \\le 10^6$).\n\nThe sum of $n$ over all test cases does not exceed $30000$.\n\n\n-----Output-----\n\nFor each test case, output on a separate line:   YES, if it is possible to make all elements of the array equal to zero by applying a certain number of operations.  NO, otherwise. \n\nThe letters in the words YES and NO can be outputed in any case.\n\n\n-----Example-----\nInput\n4\n3\n1 2 1\n5\n11 7 9 6 8\n5\n1 3 1 3 1\n4\n5 2 1 10\n\nOutput\nYES\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven a string of lowercase words, You need to return the highest scoring word as a string. If two words score the same, return the word that appears earliest in the original string.\n\n\"\"\"\ndef high(x):",
    "13": "Python 3\n\"\"\"\nGiven a string of words, you need to find the highest scoring word.\n\nEach letter of a word scores points according to its position in the alphabet: `a = 1, b = 2, c = 3` etc.\n\nYou need to return the highest scoring word as a string.\n\nIf two words score the same, return the word that appears earliest in the original string.\n\nAll letters will be lowercase and all inputs will be valid.\n\"\"\"\ndef high(x):",
    "14": "Python 3\n\"\"\"\nYou are given n cards with numbers. The i-th card has the number a_{i} written on it. You have to put cards in a row to get one greater number.\n\nThere are n! ways to put his cards in a row. The resulting big number is divisible by eleven.\n\nFind out how many  ways are there to put the cards.\n\nConsiders all cards different, even if some of them contain the same number. \n\n\n-----Input-----\n\nThe first line of the input data contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100). \nEach test is described by two lines.\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000)\u00a0\u2014 the number of cards.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers written on the cards.\n\nThe total number of cards in all tests of one input data doesn't exceed 2000.\n\n\n-----Output-----\n\nFor each test case output one line: the number of ways to put the cards to the table. so that the resulting big number was divisible by 11, print the number modulo 998244353.\n\n\n-----Example-----\nInput\n4\n2\n1 1\n3\n1 31 12\n3\n12345 67 84\n9\n1 2 3 4 5 6 7 8 9\n\nOutput\n2\n2\n2\n31680\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nIt is Borya's eleventh birthday, and he has got a great present: n cards with numbers. The i-th card has the number a_{i} written on it. Borya wants to put his cards in a row to get one greater number. For example, if Borya has cards with numbers 1, 31, and 12, and he puts them in a row in this order, he would get a number 13112.\n\nHe is only 11, but he already knows that there are n! ways to put his cards in a row. But today is a special day, so he is only interested in such ways that the resulting big number is divisible by eleven. So, the way from the previous paragraph is good, because 13112 = 1192 \u00d7 11, but if he puts the cards in the following order: 31, 1, 12, he would get a number 31112, it is not divisible by 11, so this way is not good for Borya. Help Borya to find out how many good ways to put the cards are there.\n\nBorya considers all cards different, even if some of them contain the same number. For example, if Borya has two cards with 1 on it, there are two good ways.\n\nHelp Borya, find the number of good ways to put the cards. This number can be large, so output it modulo 998244353.\n\n\n-----Input-----\n\nInput data contains multiple test cases. The first line of the input data contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100). The descriptions of test cases follow.\n\nEach test is described by two lines.\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000)\u00a0\u2014 the number of cards in Borya's present.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers written on the cards.\n\nIt is guaranteed that the total number of cards in all tests of one input data doesn't exceed 2000.\n\n\n-----Output-----\n\nFor each test case output one line: the number of ways to put the cards to the table so that the resulting big number was divisible by 11, print the number modulo 998244353.\n\n\n-----Example-----\nInput\n4\n2\n1 1\n3\n1 31 12\n3\n12345 67 84\n9\n1 2 3 4 5 6 7 8 9\n\nOutput\n2\n2\n2\n31680\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven an array of numbers t to represent baby's gums, you need to return the index of the lump that is most pronounced. The most pronounced lump is the one that has the biggest differential to its surrounding values. If there is no distinct highest value, return -1.\n\nExamples:\nInput:\n[1, 2, 4]\nOutput:\n2\nExplanation:\nindex 0 has a differential of -1 to its right.\nindex 1 has a differential of +1 to its left, and -2 to its right. Total is -1.\nindex 2 has a differential of +2 to its left, and nothing to its right, \n\"\"\"\ndef first_tooth(array):",
    "17": "Python 3\n\"\"\"\nBaby is getting his frst tooth. This means more sleepless nights, but with the fun of feeling round his gums and trying to guess which will be first out! \n\nProbably best have a sweepstake with your friends - because you have the best chance of knowing. You can feel the gums and see where the raised bits are - most raised, most likely tooth to come through first!\n\nGiven an array of numbers (t) to represent baby's gums, you need to return the index of the lump that is most pronounced. \n\nThe most pronounced lump is the one that has the biggest differential to its surrounding values. e.g.:\n\n```\n[1, 2, 4] = 2\n\nindex 0 has a differential of -1 to its right (it is lower so the figure is negative)\n\nindex 1 has a differential of +1 to its left, and -2 to its right. Total is -1.\n\nindex 2 has a differential of +2 to its left, and nothing to its right, \n```\n\nIf there is no distinct highest value (more than one occurence of the largest differential), return -1.\n\"\"\"\ndef first_tooth(array):",
    "18": "Python 3\n\"\"\"\nYou are given a positive integer N.Find how many distinct ordered pairs (p, q) are there such that N = p + 2q, where p and q are primes.\n\n-----Input-----\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow.\n\nEach test case consists of exactly one line containing an integer N.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000 (105)\n- 1 \u2264 N \u2264 10000 (104)\n\n-----Output-----\nFor each test case, output the number of ordered pairs (p, q) of primes such that N = p + 2q.\n\n-----Example-----\nInput:\n3\n2\n7\n11\n\nOutput:\n0\n1\n2\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\n-----Problem Statement-----\nLevy's conjecture, named after Hyman Levy, states that all odd integers greater than 5 can be represented as the sum of an odd prime number and an even semiprime. To put it algebraically, 2n + 1 = p + 2q always has a solution in primes p and q (not necessary to be distinct) for n > 2. (Source: Wikipedia)\nIn this problem, given a positive integer N (not necessary to be odd integer greater than 5). Your task is to calculate how many distinct ordered pairs (p, q) such that N = p + 2q, where p and q are primes.\n\n-----Input-----\nThe first line of input contains an integer T, denoting the number of test cases. Then T test cases follow.\n\nEach test case consists of exactly one line containing an integer N.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100000 (105)\n- 1 \u2264 N \u2264 10000 (104)\n\n-----Output-----\nFor each test case, output the number of ordered pairs (p, q) of primes such that N = p + 2q.\n\n-----Example-----\nInput:\n3\n2\n7\n11\n\nOutput:\n0\n1\n2\n\n-----Explanation-----\nCase #1: There are no ordered pairs (p, q) such that p + 2q = 2.\nCase #2: There is only one ordered pair (p, q) = (3, 2) such that p + 2q = 7.\nCase #3: There are two ordered pairs (p, q) = (7, 2), (5, 3) such that p + 2q = 11.\n\"\"\"\ndef code():"
}