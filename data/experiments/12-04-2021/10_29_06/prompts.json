{
    "0": "Python 3\n\"\"\"\n Your task is to write a function that does just what the title suggests with an array/list/vector of integers and the expected number n of smallest elements to return. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$)\u00a0\u2014 the number of streets going in the Eastern direction and the number of the streets going in Southern direction. Each of the following $n$ lines contains $m$ integers $a_{i,1}$, $a_{i,2}$, ..., $a_{i,m}$ ($1 \\le a_{i,j} \\le 10^9$). The integer $a_{i,j}$, located on $j$-th position in the $i$-th line denotes the height of the skyscraper at the intersection of the $i$-th Eastern street and $j$-th Southern direction. -----Output----- Print $n$ lines containing $m$ integers each. The integer $x_{i,j}$, located on $j$-th position inside the $i$-th line is an answer for the problem at the intersection of $i$-th Eastern street and $j$-th Southern street. -----Examples----- Input 2 3 1 2 1 2 1 2 Output 2 2 2  2 2 2  Input 2 2 1 2 3 4 Output 2 3  3 2  -----Note----- In the first example, it's not possible to decrease the maximum used height for the problem at any intersection, hence we don't have to change any heights. In the second example, the answers are as follows:   For the intersection of the first line and the first column [Image] For the intersection of the first line and the second column [Image] For the intersection of the second line and the first column [Image] For the intersection of the second line and the second column [Image]\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nDora loves adventures quite a lot. During some journey she encountered an amazing city, which is formed by $n$ streets along the Eastern direction and $m$ streets across the Southern direction. Naturally, this city has $nm$ intersections. At any intersection of $i$-th Eastern street and $j$-th Southern street there is a monumental skyscraper. Dora instantly became curious and decided to explore the heights of the city buildings.\n\nWhen Dora passes through the intersection of the $i$-th Eastern and $j$-th Southern street she examines those two streets. After Dora learns the heights of all the skyscrapers on those two streets she wonders: how one should reassign heights to the skyscrapers on those two streets, so that the maximum height would be as small as possible and the result of comparing the heights of any two skyscrapers on one street wouldn't change.\n\nFormally, on every of $nm$ intersections Dora solves an independent problem. She sees $n + m - 1$ skyscrapers and for each of them she knows its real height. Moreover, any two heights can be compared to get a result \"greater\", \"smaller\" or \"equal\". Now Dora wants to select some integer $x$ and assign every skyscraper a height from $1$ to $x$. When assigning heights, Dora wants to preserve the relative order of the skyscrapers in both streets. That is, the result of any comparison of heights of two skyscrapers in the current Eastern street shouldn't change and the result of any comparison of heights of two skyscrapers in current Southern street shouldn't change as well. Note that skyscrapers located on the Southern street are not compared with skyscrapers located on the Eastern street only. However, the skyscraper located at the streets intersection can be compared with both Southern and Eastern skyscrapers. For every intersection Dora wants to independently calculate the minimum possible $x$.\n\nFor example, if the intersection and the two streets corresponding to it look as follows: [Image] \n\nThen it is optimal to replace the heights of the skyscrapers as follows (note that all comparisons \"less\", \"equal\", \"greater\" inside the Eastern street and inside the Southern street are preserved) [Image] \n\nThe largest used number is $5$, hence the answer for this intersection would be $5$.\n\nHelp Dora to compute the answers for each intersection.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$)\u00a0\u2014 the number of streets going in the Eastern direction and the number of the streets going in Southern direction.\n\nEach of the following $n$ lines contains $m$ integers $a_{i,1}$, $a_{i,2}$, ..., $a_{i,m}$ ($1 \\le a_{i,j} \\le 10^9$). The integer $a_{i,j}$, located on $j$-th position in the $i$-th line denotes the height of the skyscraper at the intersection of the $i$-th Eastern street and $j$-th Southern direction.\n\n\n-----Output-----\n\nPrint $n$ lines containing $m$ integers each. The integer $x_{i,j}$, located on $j$-th position inside the $i$-th line is an answer for the problem at the intersection of $i$-th Eastern street and $j$-th Southern street.\n\n\n-----Examples-----\nInput\n2 3\n1 2 1\n2 1 2\n\nOutput\n2 2 2 \n2 2 2 \n\nInput\n2 2\n1 2\n3 4\n\nOutput\n2 3 \n3 2 \n\n\n\n-----Note-----\n\nIn the first example, it's not possible to decrease the maximum used height for the problem at any intersection, hence we don't have to change any heights.\n\nIn the second example, the answers are as follows:   For the intersection of the first line and the first column [Image] For the intersection of the first line and the second column [Image] For the intersection of the second line and the first column [Image] For the intersection of the second line and the second column [Image]\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Emma and Marcos are two friends who love horror films. This year, and possibly the years hereafter, they want to watch as many films together as possible. Unfortunately, they do not exactly have the same taste in films. So, inevitably, every now and then either Emma or Marcos has to watch a film she or he dislikes. When neither of them likes a film, they will not watch it. To make things fair they thought of the following rule: They can not watch two films in a row which are disliked by the same person. In other words, if one of them does not like the current film, then they are reassured they will like the next one. They open the TV guide and mark their preferred films. They only receive one channel which shows one film per day. Luckily, the TV guide has already been determined for the next $1$ million days. Can you determine the maximal number of films they can watch in a fair way? \n-----Input----- The input consists of two lines, one for each person. Each of these lines is of the following form:  - One integer $0 \\leq k \\leq 1000000$ for the number of films this person likes;  - followed by $k$ integers indicating all days (numbered by $0, \\dots , 999999$) with a film this person likes. -----Output----- Output a single line containing a single integer, the maximal number of films they can watch together in a fair way. -----Examples----- Sample Input 1: 1 40 2 37 42 Sample Output 1: 3 Sample Input 2: 1 1 3 1 3 2 Sample Output 2: 2\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nEmma and Marcos are two friends who love horror films. This year, and possibly the years hereafter, they want to watch as many films together as possible. Unfortunately, they do not exactly have the same taste in films. So, inevitably, every now and then either Emma or Marcos has to watch a film she or he dislikes. When neither of them likes a film, they will not watch it. To make things fair they thought of the following rule: They can not watch two films in a row which are disliked by the same person. In other words, if one of them does not like the current film, then they are reassured they will like the next one. They open the TV guide and mark their preferred films. They only receive one channel which shows one film per day. Luckily, the TV guide has already been determined for the next $1$ million days.\n\nCan you determine the maximal number of films they can watch in a fair way?\n\n-----Input-----\nThe input consists of two lines, one for each person. Each of these lines is of the following form:\n - One integer $0 \\leq k \\leq 1000000$ for the number of films this person likes;\n - followed by $k$ integers indicating all days (numbered by $0, \\dots , 999999$) with a film this person likes.\n\n-----Output-----\nOutput a single line containing a single integer, the maximal number of films they can watch together in a fair way.\n\n-----Examples-----\nSample Input 1:\n1 40\n2 37 42\nSample Output 1:\n3\n\nSample Input 2:\n1 1\n3 1 3 2\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Count the number of substrings of $s$ that contain $t$ as a subsequence at least once. \n-----Input----- Each test case will consist of exactly two lines. The first line will contain string $s$ ($1\\! \\le \\! |s|\\! \\le \\! 10^5, s\\! \\in \\! [a{-}z]^*$), with no other characters. The second line will contain string $t$ ($1\\! \\le \\! |t|\\! \\le \\! 100, |t|\\! \\le \\! |s|, t\\! \\in \\! [a{-}z]^*$), with no other characters. -----Output----- Output a single integer, which is the number of substrings of $s$ that contain $t$ as a subsequence at least once. -----Examples----- Sample Input 1: abcdefghijklmnopqrstuvwxyz a Sample Output 1: 26 Sample Input 2: abcdefghijklmnopqrstuvwxyz m Sample Output 2: 182\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given two strings $s$, and $t$. Count the number of substrings of $s$ that contain $t$ as a subsequence at least once.\n\nNote that a $substring$ and a $subsequence$ both consist of characters from the original string, in order. In a $substring$, the characters must be contiguous in the original string, but in a $subsequence$, they are not required to be contiguous. In the string abcde, ace is a subsequence but not a substring.\n\nIf $s$ is aa and $t$ is a, then the answer is $3$: [a]a, [aa], and a[a].\n\n-----Input-----\nEach test case will consist of exactly two lines.\n\nThe first line will contain string $s$ ($1\\! \\le \\! |s|\\! \\le \\! 10^5, s\\! \\in \\! [a{-}z]^*$), with no other characters.\n\nThe second line will contain string $t$ ($1\\! \\le \\! |t|\\! \\le \\! 100, |t|\\! \\le \\! |s|, t\\! \\in \\! [a{-}z]^*$), with no other characters.\n\n-----Output-----\nOutput a single integer, which is the number of substrings of $s$ that contain $t$ as a subsequence at least once.\n\n-----Examples-----\nSample Input 1:\nabcdefghijklmnopqrstuvwxyz\na\nSample Output 1:\n26\n\nSample Input 2:\nabcdefghijklmnopqrstuvwxyz\nm\nSample Output 2:\n182\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given a number written in roman numerals. Rearrange its characters so that you create the smallest possible number, written in roman numerals. \n-----Input----- The first and only line of input contains one integer $B$ ($1 \\leq B < 100 $), written using roman numerals. -----Output----- The first and only line of output should contain a rearrangement of input characters so that it represents the smallest possible number, written in roman numerals. -----Examples----- Sample Input 1: VII Sample Output 1: VII Sample Input 2: VI Sample Output 2: IV\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nUsing roman numerals the numbers $1, 2, 3, 4, 5, 6, 7, 8, 9$ are written as \u2018I\u2019, \u2018II\u2019, \u2018III\u2019, \u2018IV\u2019, \u2018V\u2019, \u2018VI\u2019, \u2018VII\u2019, \u2018VIII\u2019, \u2018IX\u2019. The numbers $10, 20, 30, 40, 50, 60, 70, 80, 90$ are written as \u2018X\u2019, \u2018XX\u2019, \u2018XXX\u2019, \u2018XL\u2019, \u2018L\u2019, \u2018LX\u2019, \u2018LXX\u2019, \u2018LXXX\u2019, \u2018XC\u2019. Any number smaller than $100$ can be written by converting tens and ones separately and concatenating the results. So, for example, the number $48$ would be written as XLVIII, XL for $40$ and VIII for $8$. Given a number written in roman numerals, rearrange its characters so that you create the smallest possible number, written in roman numerals.\n\n-----Input-----\nThe first and only line of input contains one integer $B$ ($1 \\leq B < 100 $), written using roman numerals.\n\n-----Output-----\nThe first and only line of output should contain a rearrangement of input characters so that it represents the smallest possible number, written in roman numerals.\n\n-----Examples-----\nSample Input 1:\nVII\nSample Output 1:\nVII\n\nSample Input 2:\nVI\nSample Output 2:\nIV\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a list. Each element represent a 2D point. Return the time needed to move all points in front of points. \n-----Input----- The first line contains a sequence of letters without spaces s_1s_2... s_{n} (1 \u2264 n \u2264 10^6), consisting of capital English letters M and F. If letter s_{i} equals M, that means that initially, the line had a boy on the i-th position. If letter s_{i} equals F, then initially the line had a girl on the i-th position. -----Output----- Print a single integer \u2014 the number of seconds needed to move all the girls in the line in front of the boys. If the line has only boys or only girls, print 0. -----Examples----- Input MFM Output 1 Input MMFF Output 3 Input FFMMM Output 0 -----Note----- In the first test case the sequence of changes looks as follows: MFM  \u2192  FMM. The second test sample corresponds to the sample from the statement. The sequence of changes is: MMFF  \u2192  MFMF  \u2192  FMFM  \u2192  FFMM.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThere are n schoolchildren, boys and girls, lined up in the school canteen in front of the bun stall. The buns aren't ready yet and the line is undergoing some changes.\n\nEach second all boys that stand right in front of girls, simultaneously swap places with the girls (so that the girls could go closer to the beginning of the line). In other words, if at some time the i-th position has a boy and the (i + 1)-th position has a girl, then in a second, the i-th position will have a girl and the (i + 1)-th one will have a boy.\n\nLet's take an example of a line of four people: a boy, a boy, a girl, a girl (from the beginning to the end of the line). Next second the line will look like that: a boy, a girl, a boy, a girl. Next second it will be a girl, a boy, a girl, a boy. Next second it will be a girl, a girl, a boy, a boy. The line won't change any more.\n\nYour task is: given the arrangement of the children in the line to determine the time needed to move all girls in front of boys (in the example above it takes 3 seconds). Baking buns takes a lot of time, so no one leaves the line until the line stops changing.\n\n\n-----Input-----\n\nThe first line contains a sequence of letters without spaces s_1s_2... s_{n} (1 \u2264 n \u2264 10^6), consisting of capital English letters M and F. If letter s_{i} equals M, that means that initially, the line had a boy on the i-th position. If letter s_{i} equals F, then initially the line had a girl on the i-th position.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of seconds needed to move all the girls in the line in front of the boys. If the line has only boys or only girls, print 0.\n\n\n-----Examples-----\nInput\nMFM\n\nOutput\n1\n\nInput\nMMFF\n\nOutput\n3\n\nInput\nFFMMM\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case the sequence of changes looks as follows: MFM  \u2192  FMM.\n\nThe second test sample corresponds to the sample from the statement. The sequence of changes is: MMFF  \u2192  MFMF  \u2192  FMFM  \u2192  FFMM.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given a text consisting of n lines. Each line contains some space-separated words, consisting of lowercase English letters. We define a syllable as a string that contains exactly one vowel and any arbitrary number (possibly none) of consonants. In English alphabet following letters are considered to be vowels: 'a', 'e', 'i', 'o', 'u' and 'y'. Each word of the text that contains at least one vowel can be divided into syllables. Each character should be a part of exactly one syllable. For example, the word \"mamma\" can be divided into syllables as \"ma\" and \"mma\", \"mam\" and \"ma\", and \"mamm\" and \"a\". Words that consist of only consonants should be ignored. The verse patterns for the given text is a sequence of n integers p_1, p_2, ..., p_{n}. Text matches the given verse pattern if for each i from 1 to n one can divide words of the i-th line in syllables in such a way that the total number of syllables is equal to p_{i}. You are given the text and the verse pattern. Check, if the given text matches the given verse pattern. \n-----Input----- The first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of lines in the text. The second line contains integers p_1, ..., p_{n} (0 \u2264 p_{i} \u2264 100)\u00a0\u2014 the verse pattern. Next n lines contain the text itself. Text consists of lowercase English letters and spaces. It's guaranteed that all lines are non-empty, each line starts and ends with a letter and words are separated by exactly one space. The length of each line doesn't exceed 100 characters. -----Output----- If the given text matches the given verse pattern, then print \"YES\" (without quotes) in the only line of the output. Otherwise, print \"NO\" (without quotes). -----Examples----- Input 3 2 2 3 intel code ch allenge Output YES Input 4 1 2 3 1 a bcdefghi jklmnopqrstu vwxyz Output NO Input 4 13 11 15 15 to be or not to be that is the question whether tis nobler in the mind to suffer the slings and arrows of outrageous fortune or to take arms against a sea of troubles Output YES -----Note----- In the first sample, one can split words into syllables in the following way: in-tel co-de ch al-len-ge Since the word \"ch\" in the third line doesn't contain vowels, we can ignore it. As the result we get 2 syllabels in first two lines and 3 syllables in the third one.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a text consisting of n lines. Each line contains some space-separated words, consisting of lowercase English letters.\n\nWe define a syllable as a string that contains exactly one vowel and any arbitrary number (possibly none) of consonants. In English alphabet following letters are considered to be vowels: 'a', 'e', 'i', 'o', 'u' and 'y'.\n\nEach word of the text that contains at least one vowel can be divided into syllables. Each character should be a part of exactly one syllable. For example, the word \"mamma\" can be divided into syllables as \"ma\" and \"mma\", \"mam\" and \"ma\", and \"mamm\" and \"a\". Words that consist of only consonants should be ignored.\n\nThe verse patterns for the given text is a sequence of n integers p_1, p_2, ..., p_{n}. Text matches the given verse pattern if for each i from 1 to n one can divide words of the i-th line in syllables in such a way that the total number of syllables is equal to p_{i}.\n\nYou are given the text and the verse pattern. Check, if the given text matches the given verse pattern.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of lines in the text.\n\nThe second line contains integers p_1, ..., p_{n} (0 \u2264 p_{i} \u2264 100)\u00a0\u2014 the verse pattern.\n\nNext n lines contain the text itself. Text consists of lowercase English letters and spaces. It's guaranteed that all lines are non-empty, each line starts and ends with a letter and words are separated by exactly one space. The length of each line doesn't exceed 100 characters.\n\n\n-----Output-----\n\nIf the given text matches the given verse pattern, then print \"YES\" (without quotes) in the only line of the output. Otherwise, print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n3\n2 2 3\nintel\ncode\nch allenge\n\nOutput\nYES\n\nInput\n4\n1 2 3 1\na\nbcdefghi\njklmnopqrstu\nvwxyz\n\nOutput\nNO\n\nInput\n4\n13 11 15 15\nto be or not to be that is the question\nwhether tis nobler in the mind to suffer\nthe slings and arrows of outrageous fortune\nor to take arms against a sea of troubles\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first sample, one can split words into syllables in the following way: in-tel\n\nco-de\n\nch al-len-ge\n\n\n\nSince the word \"ch\" in the third line doesn't contain vowels, we can ignore it. As the result we get 2 syllabels in first two lines and 3 syllables in the third one.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Margriet A. is in pizza heaven! She has bought a one-day access pass to Pizza World. Pizza World is a food festival, where all stands have their own special type of pizza. Margriet would really like to try many different types of pizza, but she thinks that she can only eat two pizzas in total. Therefore, she has come up with a cunning plan: at each stall she visits she decides whether she wants to buy this pizza or not. At the first stall where she decides to make a purchase, she buys and eats exactly one pizza. At the second one, she buys and eats half a pizza, and at the third she eats one quarter of a pizza, etc. Therefore, at the $k^\\textrm {th}$ stall where she decides to buy some pizza, she eats $\\frac1{2^{k-1}}^\\textrm {th}$ part of a pizza. This way she makes sure that she never gets full! In order to ensure that the flow of people in the park is adequate, the pizza stalls are connected by one-way paths, and to make sure that everyone eventually leaves the festival, it is impossible to visit a pizza stall more than once. However, every stall is reachable from the stall at the entrance, which is the stall with number $0$. Of course, Margriet has her own taste: she likes some pizzas more than others. Eating pizza from a stall gives her a certain amount of satisfaction which is equal to Margriet s personal stall satisfaction number multiplied by the fraction of a whole pizza she eats there. Her total satisfaction is the sum of satisfactions of every stall she visits. Can you help Margriet plot\n-----Input-----  - The first line has two integers, $1\\leq n \\leq 5 \\cdot 10^5$ and $0\\leq m \\leq 5 \\cdot 10^5$, the number of pizza stalls and the number of one way connections.  - The second line has $n$ integers $c_0, \\dots , c_{n-1}$, where each $0\\leq c_ i \\leq 10^9$, the amount of satisfaction Margriet gets from eating one pizza at stall $i$.  - The next $m$ lines each contain $2$ integers, $0\\leq s<n$ and $0\\leq t<n$, indicating a one way path from stall $s$ to stall $t$. No connection appears twice in the input. -----Output-----  - Print the maximal amount of satisfaction Margriet can reach at the pizza festival. Your answer is considered correct if it has absolute or relative error of at most $10^{-6}$. -----Examples----- Sample Input 1: 5 5 1 4 6 2 100 0 1 1 2 0 3 2 4 3 4 Sample Output 1: 100 Sample Input 2: 3 2 1 0 1 0 1 1 2 Sample Output 2: 1.5\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nMargriet A. is in pizza heaven! She has bought a one-day access pass to Pizza World. Pizza World is a food festival, where all stands have their own special type of pizza. Margriet would really like to try many different types of pizza, but she thinks that she can only eat two pizzas in total. Therefore, she has come up with a cunning plan: at each stall she visits she decides whether she wants to buy this pizza or not. At the first stall where she decides to make a purchase, she buys and eats exactly one pizza. At the second one, she buys and eats half a pizza, and at the third she eats one quarter of a pizza, etc. \u2026Therefore, at the $k^\\textrm {th}$ stall where she decides to buy some pizza, she eats $\\frac1{2^{k-1}}^\\textrm {th}$ part of a pizza. This way she makes sure that she never gets full!\n\nIn order to ensure that the flow of people in the park is adequate, the pizza stalls are connected by one-way paths, and to make sure that everyone eventually leaves the festival, it is impossible to visit a pizza stall more than once. However, every stall is reachable from the stall at the entrance, which is the stall with number $0$.\n\nOf course, Margriet has her own taste: she likes some pizzas more than others. Eating pizza from a stall gives her a certain amount of satisfaction which is equal to Margriet\u2019s personal stall satisfaction number multiplied by the fraction of a whole pizza she eats there. Her total satisfaction is the sum of satisfactions of every stall she visits. Can you help Margriet plot a route between the pizza stalls that satisfies her the most?\n\n-----Input-----\n - The first line has two integers, $1\\leq n \\leq 5 \\cdot 10^5$ and $0\\leq m \\leq 5 \\cdot 10^5$, the number of pizza stalls and the number of one way connections.\n - The second line has $n$ integers $c_0, \\dots , c_{n-1}$, where each $0\\leq c_ i \\leq 10^9$, the amount of satisfaction Margriet gets from eating one pizza at stall $i$.\n - The next $m$ lines each contain $2$ integers, $0\\leq s<n$ and $0\\leq t<n$, indicating a one way path from stall $s$ to stall $t$. No connection appears twice in the input.\n\n-----Output-----\n - Print the maximal amount of satisfaction Margriet can reach at the pizza festival. Your answer is considered correct if it has absolute or relative error of at most $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n5 5\n1 4 6 2 100\n0 1\n1 2\n0 3\n2 4\n3 4\nSample Output 1:\n100\n\nSample Input 2:\n3 2\n1 0 1\n0 1\n1 2\nSample Output 2:\n1.5\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Alyona has a tree with n vertices. The root of the tree is the vertex 1. In each vertex Alyona wrote an positive integer, in the vertex i she wrote a_{i}. Moreover, the girl wrote a positive integer to every edge of the tree (possibly, different integers on different edges). Let's define dist(v, u) as the sum of the integers written on the edges of the simple path from v to u. The vertex v controls the vertex u (v   u) if and only if u is in the subtree of v and dist(v, u)   a_{u}. Alyona wants to settle in some vertex. In order to do this, she wants to know for each vertex v what is the number of vertices u such that v controls u. \n\n-----Input----- The first line contains single integer n (1 \u2264 n \u2264 2\u00b710^5). The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the integers written in the vertices. The next (n - 1) lines contain two integers each. The i-th of these lines contains integers p_{i} and w_{i} (1 \u2264 p_{i} \u2264 n, 1 \u2264 w_{i} \u2264 10^9)\u00a0\u2014 the parent of the (i + 1)-th vertex in the tree and the number written on the edge between p_{i} and (i + 1). It is guaranteed that the given graph is a tree. -----Output----- Print n integers\u00a0\u2014 the i-th of these numbers should be equal to the number of vertices that the i-th vertex controls. -----Examples----- Input 5 2 5 1 4 6 1 7 1 1 3 5 3 6 Output 1 0 1 0 0 Input 5 9 7 8 6 5 1 1 2 1 3 1 4 1 Output 4 3 2 1 0 -----Note----- In the example test case the vertex 1 controls the vertex 3, the vertex 3 controls the vertex 5 (note that is doesn't mean the vertex 1 controls the vertex 5).\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAlyona has a tree with n vertices. The root of the tree is the vertex 1. In each vertex Alyona wrote an positive integer, in the vertex i she wrote a_{i}. Moreover, the girl wrote a positive integer to every edge of the tree (possibly, different integers on different edges).\n\nLet's define dist(v, u) as the sum of the integers written on the edges of the simple path from v to u.\n\nThe vertex v controls the vertex u (v \u2260 u) if and only if u is in the subtree of v and dist(v, u) \u2264 a_{u}.\n\nAlyona wants to settle in some vertex. In order to do this, she wants to know for each vertex v what is the number of vertices u such that v controls u.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 2\u00b710^5).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the integers written in the vertices.\n\nThe next (n - 1) lines contain two integers each. The i-th of these lines contains integers p_{i} and w_{i} (1 \u2264 p_{i} \u2264 n, 1 \u2264 w_{i} \u2264 10^9)\u00a0\u2014 the parent of the (i + 1)-th vertex in the tree and the number written on the edge between p_{i} and (i + 1).\n\nIt is guaranteed that the given graph is a tree.\n\n\n-----Output-----\n\nPrint n integers\u00a0\u2014 the i-th of these numbers should be equal to the number of vertices that the i-th vertex controls.\n\n\n-----Examples-----\nInput\n5\n2 5 1 4 6\n1 7\n1 1\n3 5\n3 6\n\nOutput\n1 0 1 0 0\n\nInput\n5\n9 7 8 6 5\n1 1\n2 1\n3 1\n4 1\n\nOutput\n4 3 2 1 0\n\n\n\n-----Note-----\n\nIn the example test case the vertex 1 controls the vertex 3, the vertex 3 controls the vertex 5 (note that is doesn't mean the vertex 1 controls the vertex 5).\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n George has won the lottery and, being a nice guy, has decided to spread the wealth around. However, monetary gifts can be taxed once they get over a certain size the amount of tax depends on how much his friends have earned that year. The amount of tax paid depends on tax bands. The bands start at zero. Each one takes a certain cut of income from the range of pre-tax income it covers. The final tax band applies to all income above its lower bound. George is a savvy fellow and knows the number of tax bands, the amount of money each friend has earned and the amount he wants each friend to walk away with. How much should George give to each friend before tax? \n\n-----Input-----  - One line containing an integer $B$ ($1 \\le B \\le 20$): the number of tax bands.  - $B$ further lines, each containing two real numbers: $s_ i$ ($0 < s_ i \\le 10^6$): the size in pounds of the $i^{th}$ tax band, and $p_ i$ ($0 \\le p_ i \\le 100$): the percentage taxation for that band.  - One line containing a real number $P$ ($0 \\le P \\le 99.999$): the percentage tax on all income above other bands.  - One line containing an integer $F$, ($0 < F \\le 20$): the number of friends George wants to pay.  - $F$ further lines, each containing two real numbers $e_ j$ and $m_ j$ ($0 \\le e_ j \\le 10^6$, $0 < m_ j \\le 10^6$): the amount of money the $j^{th}$ friend has earned, and the amount of money they should receive after tax respectively. Tax bands will be given in increasing order. All real numbers have at most $6$ decimals after the decimal point. -----Output-----  - $F$ lines, one for each friend specified in the input and in the same order. Each line should contain one real number: the amount of money George will give to his friend, in order to arrive at the correct amount after they have paid tax. All output must be accurate to an absolute or relative error of at most $10^{-6}$. -----Examples----- Sample Input: 1 1000 0 20 3 0.0 500 999.5 500 1000.0 500 Sample Output: 500.000000 624.875000 625.000000\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nGeorge has won the lottery and, being a nice guy, has decided to spread the wealth around. However, monetary gifts can be taxed once they get over a certain size\u2014the amount of tax depends on how much his friends have earned that year.\n\nThe amount of tax paid depends on tax bands. The bands start at zero. Each one takes a certain cut of income from the range of pre-tax income it covers. The final tax band applies to all income above its lower bound.\n\nGeorge is a savvy fellow and knows the number of tax bands, the amount of money each friend has earned and the amount he wants each friend to walk away with.\n\nHow much should George give to each friend before tax?\n\n-----Input-----\n - One line containing an integer $B$ ($1 \\le B \\le 20$): the number of tax bands.\n - $B$ further lines, each containing two real numbers: $s_ i$ ($0 < s_ i \\le 10^6$): the size in pounds of the $i^{th}$ tax band, and $p_ i$ ($0 \\le p_ i \\le 100$): the percentage taxation for that band.\n - One line containing a real number $P$ ($0 \\le P \\le 99.999$): the percentage tax on all income above other bands.\n - One line containing an integer $F$, ($0 < F \\le 20$): the number of friends George wants to pay.\n - $F$ further lines, each containing two real numbers $e_ j$ and $m_ j$ ($0 \\le e_ j \\le 10^6$, $0 < m_ j \\le 10^6$): the amount of money the $j^{th}$ friend has earned, and the amount of money they should receive after tax respectively.\n\nTax bands will be given in increasing order. All real numbers have at most $6$ decimals after the decimal point.\n\n-----Output-----\n - $F$ lines, one for each friend specified in the input and in the same order.\n\nEach line should contain one real number: the amount of money George will give to his friend, in order to arrive at the correct amount after they have paid tax.\n\nAll output must be accurate to an absolute or relative error of at most $10^{-6}$.\n\n-----Examples-----\nSample Input:\n1\n1000 0\n20\n3\n0.0 500\n999.5 500\n1000.0 500\nSample Output:\n500.000000\n624.875000\n625.000000\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You work at a clinic. The clinic factors in the waiting time when selecting patients to treat next. This approach was adopted to prevent patients from having to wait too long before being treated. Your task is to help the clinic perform $3$ types of queries: - Process a patient arrival to the clinic. The patient will have an arrival time $T$, a name $M$, and a severity $S$ that is accessed automatically by scanners at the entrance. - At time $T$, the doctor is ready to treat a patient. Every time this happens, the clinic will calculate priority values for every patient waiting in the clinic, and the patient with the highest priority value will be treated first. The priority value is computed as the following sum\\[ S + K \\cdot W \\] where $S$ is the severity value of the patient, $K$ is the constant that the clinic uses, and $W$ is the total time the patient has been waiting in the clinic. If there are multiple patients with that value, the patient with the lexicographically smallest name is treated next. Your program will announce the name of that patient. - At time $T$, the clinic receives a notification stating that, due to unfortunate circumstances, a patient with name $M$ has left the queue permanently. If no patient with name $M$ exists in the queue, it is always a false alarm and will be ignored by the clinic. Otherwise, the notification is guaranteed to be valid and should be processed accordingly.\n-----Input----- The first line of the input contains $2$ integers, $1 \\leq N \\leq 200000$, the number of queries to be processed, and $0 \\leq K \\leq 10000000$, the constant for the clinic. $N$ lines follow, each line beginning with an integer $Q$ where $Q$ = $1$, $2$ or $3$. $Q = 1$ denotes a query of the first type and will be followed by an integer $T$, a string $M$ and an integer $S$. $Q = 2$ denotes a query of the second type and will be followed by an integer $T$. $Q = 3$ denotes a query of the third type and will be followed by an integer $T$ and a string $M$. For all queries, $0 \\leq T,S \\leq 10000000$, and $T$ values are strictly increasing. $M$ is a non-empty alphanumeric string containing no spaces, and contains at most $10$ characters. All patients have unique names. There is at least one query of the second type. -----Output----- For each query of the second type, output the name of the patient who will be treated on a new line. If the clinic is empty, print the string \u201cdoctor takes a break\u201d (without quotes) on a new line instead. -----Subtasks-----  - (28 Points): $1 \\leq N \\leq 10,000$. There is no query of type $3$. You can assume that $K = 0$.  - (32 Points): $1 \\leq N \\leq 10,000$. There is no query of type $3$.  - (20 Points): There is no query of type $3$.  - (20 Points): No additional constraints. -----Warning----- The I/O files are large. Please use fast I/O methods. -----Examples----- Sample Input: 5 1 1 10 Alice 5 1 15 Bob 15 2 20 2 25 2 30 Sample Output: Bob Alice doctor takes a break\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou work at a clinic. The clinic factors in the waiting time when selecting patients to treat next. This approach was adopted to prevent patients from having to wait too long before being treated. Your task is to help the clinic perform $3$ types of queries:\n - Process a patient arrival to the clinic. The patient will have an arrival time $T$, a name $M$, and a severity $S$ that is accessed automatically by scanners at the entrance.\n - At time $T$, the doctor is ready to treat a patient. Every time this happens, the clinic will calculate priority values for every patient waiting in the clinic, and the patient with the highest priority value will be treated first. The priority value is computed as the following sum\\[ S + K \\cdot W \\]\n\nwhere $S$ is the severity value of the patient, $K$ is the constant that the clinic uses, and $W$ is the total time the patient has been waiting in the clinic. If there are multiple patients with that value, the patient with the lexicographically smallest name is treated next. Your program will announce the name of that patient.\n - At time $T$, the clinic receives a notification stating that, due to unfortunate circumstances, a patient with name $M$ has left the queue permanently. If no patient with name $M$ exists in the queue, it is always a false alarm and will be ignored by the clinic. Otherwise, the notification is guaranteed to be valid and should be processed accordingly.\n\n-----Input-----\nThe first line of the input contains $2$ integers, $1 \\leq N \\leq 200000$, the number of queries to be processed, and $0 \\leq K \\leq 10000000$, the constant for the clinic. $N$ lines follow, each line beginning with an integer $Q$ where $Q$ = $1$, $2$ or $3$. $Q = 1$ denotes a query of the first type and will be followed by an integer $T$, a string $M$ and an integer $S$. $Q = 2$ denotes a query of the second type and will be followed by an integer $T$. $Q = 3$ denotes a query of the third type and will be followed by an integer $T$ and a string $M$. For all queries, $0 \\leq T,S \\leq 10000000$, and $T$ values are strictly increasing. $M$ is a non-empty alphanumeric string containing no spaces, and contains at most $10$ characters. All patients have unique names. There is at least one query of the second type.\n\n-----Output-----\nFor each query of the second type, output the name of the patient who will be treated on a new line. If the clinic is empty, print the string \u201cdoctor takes a break\u201d (without quotes) on a new line instead.\n\n-----Subtasks-----\n - (28 Points): $1 \\leq N \\leq 10,000$. There is no query of type $3$. You can assume that $K = 0$.\n - (32 Points): $1 \\leq N \\leq 10,000$. There is no query of type $3$.\n - (20 Points): There is no query of type $3$.\n - (20 Points): No additional constraints.\n\n-----Warning-----\nThe I/O files are large. Please use fast I/O methods.\n\n-----Examples-----\nSample Input:\n5 1\n1 10 Alice 5\n1 15 Bob 15\n2 20\n2 25\n2 30\nSample Output:\nBob\nAlice\ndoctor takes a break\n\"\"\"\ndef code():"
}