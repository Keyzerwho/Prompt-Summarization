{
    "id": "cmpl-4BT8DFgVcTXjNG4aqdiqrA2U3Dgh6",
    "object": "text_completion",
    "created": 1638638937,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n, m = [int(x) for x in input().split()]\n    a = [[int(x) for x in input().split()] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                a[i][j] = min(a[i][j], a[i][j-1])\n            elif j == 0:\n                a[i][j] = min(a[i][j], a[i-1][j])\n            else:\n                a[i][j] = min(a[i][j], max(a[i-1][j], a[i][j-1]))\n    for i in range(n):\n        for j in range(m):\n            print(a[i][j], end=' ')\n        print()\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    a = [[0] * m for i in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, input().split()))\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                a[i][j] = min(a[i][j], a[i][j - 1])\n            elif j == 0:\n                a[i][j] = min(a[i][j], a[i - 1][j])\n            else:\n                a[i][j] = min(a[i][j], max(a[i - 1][j], a[i][j - 1]))\n    for i in range(n):\n        for j in range(m):\n            print(a[i][j], end=' ')\n        print()\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][m]\n\nprint(code())",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    t = input()\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j+1].find(t) != -1:\n                count += 1\n    print(count)\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    roman = input()\n    roman = roman.replace(\"IV\", \"IIII\")\n    roman = roman.replace(\"IX\", \"VIIII\")\n    roman = roman.replace(\"XL\", \"XXXX\")\n    roman = roman.replace(\"XC\", \"LXXXX\")\n    roman = roman.replace(\"CD\", \"CCCC\")\n    roman = roman.replace(\"CM\", \"DCCCC\")\n    print(roman)\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    boys = 0\n    girls = 0\n    for i in range(len(s)):\n        if s[i] == 'M':\n            boys += 1\n        else:\n            girls += 1\n    if boys == 0 or girls == 0:\n        print(0)\n    else:\n        print(girls)\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    verse_pattern = list(map(int, input().split()))\n    text = []\n    for i in range(n):\n        text.append(input())\n    syllables = []\n    for i in range(n):\n        syllables.append(0)\n        for j in range(len(text[i])):\n            if text[i][j] == ' ':\n                syllables[i] += 1\n    if syllables == verse_pattern:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    pattern = list(map(int, input().split()))\n    text = []\n    for i in range(n):\n        text.append(input())\n    syllables = 0\n    for i in range(n):\n        syllables += len(text[i].split())\n    if syllables == sum(pattern):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        s, t = map(int, input().split())\n        graph[s].append(t)\n    visited = [False] * n\n    visited[0] = True\n    stack = [0]\n    ans = 0\n    while stack:\n        node = stack.pop()\n        for i in graph[node]:\n            if not visited[i]:\n                visited[i] = True\n                stack.append(i)\n                ans += c[i] / (2 ** (i - node))\n    print(ans)\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    c = list(map(int, input().split()))\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        s, t = map(int, input().split())\n        graph[s].append(t)\n    visited = [False] * n\n    visited[0] = True\n    stack = [0]\n    ans = 0\n    while len(stack) > 0:\n        node = stack.pop()\n        for i in graph[node]:\n            if not visited[i]:\n                visited[i] = True\n                stack.append(i)\n                ans += c[i] / (2 ** (len(stack) - 1))\n    print(ans)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    p = [int(x) for x in input().split()]\n    w = [int(x) for x in input().split()]\n    d = [0] * n\n    for i in range(n):\n        d[i] = a[i]\n    for i in range(n - 1):\n        d[p[i] - 1] += d[i] * w[i]\n    print(*d)\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    w = [int(i) for i in input().split()]\n    d = [0] * n\n    for i in range(n):\n        d[i] = a[i]\n        if p[i] != 0:\n            d[i] += d[p[i] - 1]\n    print(*d)\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    B = int(input())\n    bands = []\n    for i in range(B):\n        s, p = map(float, input().split())\n        bands.append((s, p))\n    P = float(input())\n    F = int(input())\n    friends = []\n    for i in range(F):\n        e, m = map(float, input().split())\n        friends.append((e, m))\n    for i in range(F):\n        e, m = friends[i]\n        tax = 0\n        for s, p in bands:\n            if e > s:\n                tax += (e - s) * p / 100\n                e = s\n        tax += (e - bands[-1][0]) * P / 100\n        m -= tax\n        friends[i] = (e, m)\n    for e, m in friends:\n        print(m)\n\nif __name__ == '__main__':\n    code()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    B = int(input())\n    bands = []\n    for i in range(B):\n        bands.append(list(map(float, input().split())))\n    P = float(input())\n    F = int(input())\n    friends = []\n    for i in range(F):\n        friends.append(list(map(float, input().split())))\n    for i in range(F):\n        friends[i][1] = friends[i][1] - friends[i][1] * P / 100\n        for j in range(B):\n            if bands[j][0] <= friends[i][0] < bands[j][0] + bands[j][1]:\n                friends[i][1] = friends[i][1] - friends[i][1] * bands[j][2] / 100\n    for i in range(F):\n        print(friends[i][1])\n\nif __name__ == '__main__':\n    code()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    patients = []\n    for i in range(n):\n        q, t = map(int, input().split())\n        if q == 1:\n            patients.append((t, t + k * int(input()), input()))\n        elif q == 2:\n            patients.sort(key=lambda x: (x[1], x[2]))\n            print(patients[0][2])\n        else:\n            patients = list(filter(lambda x: x[2] != input(), patients))\n\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    patients = []\n    for i in range(n):\n        q, t, m, s = input().split()\n        t = int(t)\n        s = int(s)\n        if q == \"1\":\n            patients.append((t, m, s))\n        elif q == \"2\":\n            patients.sort(key=lambda x: (x[2] + k * (t - x[0]), x[1]))\n            print(patients[0][1])\n        else:\n            patients = list(filter(lambda x: x[1] != m, patients))\n    if patients:\n        patients.sort(key=lambda x: (x[2] + k * (t - x[0]), x[1]))\n        print(patients[0][1])\n    else:\n        print(\"doctor takes a break\")\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}