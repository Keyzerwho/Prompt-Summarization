{
    "0": "Python 3\n\"\"\"\nYou have a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) where l, r are integer, 1 \u2264 l \u2264 r \u2264 n for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r.\n\nCount the number of distinct values of function f(l, r) for the given sequence a.\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nPolycarpus has a sequence, consisting of n non-negative integers: a_1, a_2, ..., a_{n}.\n\nLet's define function f(l, r) (l, r are integer, 1 \u2264 l \u2264 r \u2264 n) for sequence a as an operation of bitwise OR of all the sequence elements with indexes from l to r. Formally: f(l, r) = a_{l}\u00a0|\u00a0a_{l} + 1\u00a0|\u00a0... \u00a0|\u00a0a_{r}. \n\nPolycarpus took a piece of paper and wrote out the values of function f(l, r) for all l, r (l, r are integer, 1 \u2264 l \u2264 r \u2264 n). Now he wants to know, how many distinct values he's got in the end. \n\nHelp Polycarpus, count the number of distinct values of function f(l, r) for the given sequence a.\n\nExpression x\u00a0|\u00a0y means applying the operation of bitwise OR to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is marked as \"|\", in Pascal \u2014 as \"or\".\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of elements of sequence a. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^6) \u2014 the elements of sequence a.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of distinct values of function f(l, r) for the given sequence a.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2 0\n\nOutput\n4\nInput\n10\n1 2 3 4 5 6 1 2 9 10\n\nOutput\n11\n\n\n-----Note-----\n\nIn the first test case Polycarpus will have 6 numbers written on the paper: f(1, 1) = 1, f(1, 2) = 3, f(1, 3) = 3, f(2, 2) = 2, f(2, 3) = 2, f(3, 3) = 0. There are exactly 4 distinct numbers among them: 0, 1, 2, 3.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nFind the sum of the first n elements in the Recam\u00e1n Sequence. 0 <= n <= 2,500,000.\n\nThe Recam\u00e1n sequence is formed using the next formula:\n* We start with `0`\n* At each step `i`, we subtract `i` from the previous number\n* If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence\n* Otherwise the `i`th element of the sequence will be previous number plus `i`\n\nThe beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:  \n0) `0` <- we start with `0`  \n1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`  \n2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`  \n3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`  \n4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it\n\nExamples:\nrec(0) == 0\nrec(1) == 0\nrec(2) == 1\nrec(3) == 4\nrec(4) == 10\nrec(5) == 12\n\"\"\"\ndef rec(x):",
    "3": "Python 3\n\"\"\"\n## Task\n\nFind the sum of the first `n` elements in the Recam\u00e1n Sequence.\n\nInput range:\n\n```python\n1000 tests\n0 <= n <= 2,500,000\n```\n\n___\n\n## Sequence\n\nThe sequence is formed using the next formula:\n* We start with `0`\n* At each step `i`, we subtract `i` from the previous number\n* If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence\n* Otherwise the `i`th element of the sequence will be previous number plus `i`\n\nThe beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:  \n0) `0` <- we start with `0`  \n1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`  \n2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`  \n3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`  \n4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it\n\n___\n\n## Examples\n\n```\nrec(0) == 0\nrec(1) == 0\nrec(2) == 1\nrec(3) == 4\nrec(4) == 10\nrec(5) == 12\n```\n\"\"\"\ndef rec(x):",
    "4": "Python 3\n\"\"\"\n\nPrint the reverse of the given integer.(0 is not allowed in starting).\n\n-----Input-----\n- The first line of each test case contains an integer T .\n\n- following T lines contains distinct integers N .\n\n\n\n-----Output-----\n- Output should contain T line , each line with the distinct integer as asked in question . \n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n\n- 1 \u2264 N \u2264 1018\n\nSubtask 1 :  N \u2264 105\nSubtask 2 :  N \u2264 109\nSubtask 3 :  N \u2264 1018\n\n\n\n-----Example-----\nInput:\n3\n1234\n4567\n1\n\nOutput:\n4321\n7654\n1\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\n-----Problem description.-----\nThis problem deals with the I/O methods used in codechef. \nYou are supposed to print the integer in its reverse form , or in simple words, print the reverse of the given integer . For instance , reverse of  120 is 21  (not 021)  .\n\n-----Input-----\n- The first line of each test case contains an integer T .\n\n- following T lines contains distinct integers N .\n\n\n\n-----Output-----\n- Output should contain T line , each line with the distinct integer as asked in question . \n\n-----Constraints-----\n- 1 \u2264 T \u2264 105\n\n- 1 \u2264 N \u2264 1018\n\nSubtask 1 :  N \u2264 105\nSubtask 2 :  N \u2264 109\nSubtask 3 :  N \u2264 1018\n\n\n\n-----Example-----\nInput:\n3\n1234\n4567\n1\n\nOutput:\n4321\n7654\n1\n\n-----Explanation-----\nreverse of 1234 is 4321 , 4567 is 7654 & of 1 is 1 \n\nNOTE: testcases may contain large range of data, use datatypes accordingly .\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a function that when given a number n, returns the nth number in the Fibonacci Sequence.\n\nExamples:\nInput:\nnth_fib(4)\nOutput:\n2\nExplanation:\nBecause 2 is the 4th number in the Fibonacci Sequence.\n\"\"\"\ndef nth_fib(n):",
    "7": "Python 3\n\"\"\"\nI love Fibonacci numbers in general, but I must admit I love some more than others. \n\nI would like for you to write me a function that when given a number (n)  returns the n-th number in the Fibonacci Sequence.\n\nFor example:\n\n```python\n   nth_fib(4) == 2\n```\n\nBecause 2 is the 4th number in the Fibonacci Sequence.\n\nFor reference, the first two numbers in the Fibonacci sequence are 0 and 1, and each subsequent number is the sum of the previous two.\n\"\"\"\ndef nth_fib(n):",
    "8": "Python 3\n\"\"\"\n# Description\n\nGiven a current position of a knight in a chess board, find the possible positions that it will end up after 1 move.\n\n# Example\n\nInput: \"a1\"\nOutput: [\"b3\", \"c2\"]\n\"\"\"\ndef possible_positions(pos):",
    "9": "Python 3\n\"\"\"\n# Description\n\nWrite a function that accepts the current position of a knight in a chess board, it returns the possible positions that it will end up after 1 move. The resulted should be sorted. \n\n## Example\n\n\"a1\" -> [\"b3\", \"c2\"]\n\"\"\"\ndef possible_positions(pos):",
    "10": "Python 3\n\"\"\"\nYou are given an array which will have a length of at least 3 containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. Write a method that takes the array as an argument and returns this N.\n\nExamples:\nInput:\n[2, 4, 0, 100, 4, 11, 2602, 36]\nOutput:\n11\n\nInput:\n[160, 3, 1719, 19, 11, 13, -21]\nOutput:\n160\n\"\"\"\ndef find_outlier(integers):",
    "11": "Python 3\n\"\"\"\nYou are given an array (which will have a length of at least 3, but could be very large) containing integers. The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer `N`. Write a method that takes the array as an argument and returns this \"outlier\" `N`.\n\n## Examples\n\n```python\n[2, 4, 0, 100, 4, 11, 2602, 36]\nShould return: 11 (the only odd number)\n\n[160, 3, 1719, 19, 11, 13, -21]\nShould return: 160 (the only even number)\n```\n\"\"\"\ndef find_outlier(integers):",
    "12": "Python 3\n\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nExamples:\nInput:\nD=1\nN=10\nOutput:\n45\n\nInput:\nD=2\nN=3\nOutput:\n18\n\"\"\"\ndef super_sum(D, N):",
    "13": "Python 3\n\"\"\"\nGiven an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0.\n\nFor Example if D=1 and N=10 then the answer would be 45 ([0,1,2,3,4,5,6,7,8,9])\nIf D=2 and N = 3 the answer is 18 which would be the sum of every number in the following:\n```python\n[\n[(0,0), (0,1), (0,2)],\n[(1,0), (1,1), (1,2)],\n[(2,0), (2,1), (2,2)]\n]\n```\n\nA naive solution could be to loop over every index in every dimension and add to a global sum. This won't work as the number of dimension is expected to be quite large.\n\nHint: A formulaic approach would be best\nHint 2: Gauss could solve the one dimensional case in his earliest of years, This is just a generalization.\n\n~~~if:javascript\nNote for JS version: Because the results will exceed the maximum safe integer easily, for such values you're only required to have a precision of at least `1 in 1e-9` to the actual answer.\n~~~\n\"\"\"\ndef super_sum(D, N):",
    "14": "Python 3\n\"\"\"\nIt takes the object or hash passed in and generates a human readable string from its key/value pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```\n\"\"\"\ndef solution(pairs):",
    "15": "Python 3\n\"\"\"\nComplete the solution so that it takes the object (JavaScript/CoffeeScript) or hash (ruby) passed in and generates a human readable string from its key/value pairs. \n\nThe format should be \"KEY = VALUE\". Each key/value pair should be separated by a comma except for the last pair.\n\n**Example:**\n```python\nsolution({\"a\": 1, \"b\": '2'}) # should return \"a = 1,b = 2\"\n```\n\"\"\"\ndef solution(pairs):",
    "16": "Python 3\n\"\"\"\nCreate a function that takes any number and returns the number that it is a factorial of. If the number is not a factorial of another, returns \"None\". \n\nExamples:\nInput:\n120\nOutput:\n\"5!\"\nExplanation:\n5! = 5 * 4 * 3 * 2 * 1 = 120\n\nInput:\n24\nOutput:\n\"4!\"\n\nInput:\n150\nOutput:\n\"None\"\n\"\"\"\ndef reverse_factorial(num):",
    "17": "Python 3\n\"\"\"\nI'm sure you're familiar with factorials \u2013 that is, the product of an integer and all the integers below it. \n\nFor example, `5! = 120`, as `5 * 4 * 3 * 2 * 1 = 120`\n\nYour challenge is to create a function that takes any number and returns the number that it is a factorial of. So, if your function receives `120`, it should return `\"5!\"` (as a string).\n\nOf course, not every number is a factorial of another. In this case, your function would return `\"None\"` (as a string).\n\n### Examples\n\n* `120` will return `\"5!\"`\n* `24` will return `\"4!\"`\n* `150` will return `\"None\"`\n\"\"\"\ndef reverse_factorial(num):",
    "18": "Python 3\n\"\"\"\nYou are given a positive number, find if it is strong or not.\n\nExample 1:\nInput: strong_num(1)\nOutput: \"STRONG!!!!\"\nExplanation: Since the sum of its digits' factorial of 1 is equal to number itself, then it's a Strong.  \n\nExample 2:\nInput: strong_num(123)\nOutput: \"Not Strong !!\"\nExplanation: Since the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself, then it's Not Strong. \n\nExample 3:\nInput: strong_num(2)\nOutput: \"STRONG!!!!\"\nExplanation: Since **_the sum of its digits' factorial of 2! = 2 is equal to number itself, then it's a Strong.  \n\nExample 4:\nInput: strong_num(150)\nOutput: \"Not Strong !!\"\nExplanation: Since the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself, then it's Not Strong.\n\"\"\"\ndef strong_num(number):",
    "19": "Python 3\n\"\"\"\n# Definition\n\n**_Strong number_** is the number that *the sum of the factorial of its digits is equal to number itself*.\n\n## **_For example_**:  **_145_**, since \n```\n1! + 4! + 5! = 1 + 24 + 120 = 145\n```\nSo, **_145_** is a **_Strong number_**. \n____\n\n# Task\n\n**_Given_** a number, **_Find if it is Strong or not_**.\n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_Number_** *passed is always*  **_Positive_**.\n* **_Return_** *the result as* **_String_**\n___\n\n# Input >> Output Examples\n\n\n```\nstrong_num(1) ==> return \"STRONG!!!!\"\n```\n\n## **_Explanation_**:\n\nSince , **_the sum of its digits' factorial of (1) is equal to number itself (1)_** , **_Then_** its a **_Strong_** .  \n____\n\n```\nstrong_num(123) ==> return \"Not Strong !!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 1! + 2! + 3! = 9 is not equal to number itself (123)_** , **_Then_** it's  **_Not Strong_** . \n___\n\n```\nstrong_num(2)  ==>  return \"STRONG!!!!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 2! = 2 is equal to number itself (2)_** , **_Then_** its a **_Strong_** .  \n____\n\n```\nstrong_num(150) ==> return \"Not Strong !!\"\n```\n\n## **_Explanation_**:\n\nSince **_the sum of its digits' factorial of 1! + 5! + 0! = 122 is not equal to number itself (150)_**, **_Then_** it's **_Not Strong_** . \n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef strong_num(number):"
}