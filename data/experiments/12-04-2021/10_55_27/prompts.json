{
    "0": "Python 3\n\"\"\"\n You have a string $s$ and you may modify it by making long swaps of its letters. Two letters can be swapped if their positions differ by at least $k$. That is, you may swap the $i$-th letter with the $j$-th letter in $s$ if $|i - j| \\geq k$. Is it possible to sort all the letters in $s$ increasingly, if you are allowed to swap any number of times (possibly zero) \n-----Input----- The first line has a string $s$ ($2 \\leq |s| \\leq 100$) and an integer $k$ ($1 \\leq k \\leq |s| - 1$), separated by a single space. The string $s$ consists of only lowercase letters. -----Output----- If it is possible to sort the letters increasingly, output \u201cYes\u201d. Otherwise output \u201cNo\u201d. -----Examples----- Sample Input: prognova 4 Sample Output: Yes\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou have a string $s$ and you may modify it by making long swaps of its letters. Two letters can be swapped if their positions differ by at least $k$. That is, you may swap the $i$-th letter with the $j$-th letter in $s$ if $|i - j| \\geq k$. Is it possible to sort all the letters in $s$ increasingly, if you are allowed to swap any number of times (possibly zero)?\n\n-----Input-----\nThe first line has a string $s$ ($2 \\leq |s| \\leq 100$) and an integer $k$ ($1 \\leq k \\leq |s| - 1$), separated by a single space. The string $s$ consists of only lowercase letters.\n\n-----Output-----\nIf it is possible to sort the letters increasingly, output \u201cYes\u201d. Otherwise output \u201cNo\u201d.\n\n-----Examples-----\nSample Input:\nprognova 4\nSample Output:\nYes\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You will be given five photographs of MPs arguing. Your task is to estimate which MP belongs to which party, so that the following holds for your estimation: each MP argued with at most two distinct members of their own party.\n\n-----Input----- The first line of input contains an integer $N$ ($2 \\leq N \\leq 200000$), the number of MPs. MPs are denoted with numbers from $1$ to $N$. The following five lines describe the photographs taken from Monday to Friday. Each of the five lines contains the list of pairs of MPs that are arguing on the photograph that day (scowling at each other). Stated first is the number of pairs $P$ ($1 \\leq P \\leq N/2$), followed by $P$ pairs in the form \u201c$K$ $L$\u201d, where $K$ and $L$ are labels of MPs scowling at each other. Before each pair there is a double space. Of course, each MP is stated at most once per line, and no MP ever argues with herself. -----Output----- The first and only line of output must contain an array consisting of only characters A and B, so that the $K$-th character denotes the party of $K$-th MP in a division that satisfies the given conditions. Since the solution isn\u2019t going to be unique, output any. -----Examples----- Sample Input: 7 2  1 2  7 3 2  1 3  7 4 2  1 4  7 5 2  1 5  7 6 2  1 6  7 2 Sample Output: ABBBBBA\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nA land far, far away has N Members of Parliament (MP). They had a turbulent and passionate debate on the law on amendments to the law on a new referendum on referendums. From Monday to Friday, all MPs joyfully came to work and argued all day.\n\nA diligent news reporter photographed MPs at their workplace in the heat of the argument every working day of the week. What she captured on the photos are pairs of MPs fighting and scowling at each other. The five photographs have been forwarded to you for thorough analysis.\n\nIt is a fact that each MP belongs to one of the two political parties. Let\u2019s denote them with letters A and B. Your task is to estimate which MP belongs to which party, so that the following holds for your estimation: each MP argued with at most two distinct members of their own party.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($2 \\leq N \\leq 200000$), the number of MPs. MPs are denoted with numbers from $1$ to $N$.\n\nThe following five lines describe the photographs taken from Monday to Friday. Each of the five lines contains the list of pairs of MPs that are arguing on the photograph that day (scowling at each other). Stated first is the number of pairs $P$ ($1 \\leq P \\leq N/2$), followed by $P$ pairs in the form \u201c$K$ $L$\u201d, where $K$ and $L$ are labels of MPs scowling at each other. Before each pair there is a double space.\n\nOf course, each MP is stated at most once per line, and no MP ever argues with herself.\n\n-----Output-----\nThe first and only line of output must contain an array consisting of only characters A and B, so that the $K$-th character denotes the party of $K$-th MP in a division that satisfies the given conditions.\n\nSince the solution isn\u2019t going to be unique, output any.\n\n-----Examples-----\nSample Input:\n7\n2  1 2  7 3\n2  1 3  7 4\n2  1 4  7 5\n2  1 5  7 6\n2  1 6  7 2\nSample Output:\nABBBBBA\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given a graph, count the number of non-similar worlds that can be built under the constraints, modulo 10^9 + 7.                                                                                                                                                                                                                                                                      l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l l\n-----Input----- The first and only line of input contains two space-separated integers n, m (1 \u2264 n, m \u2264 50) \u2014 the number of operations performed and the minimum cut, respectively. -----Output----- Output one integer \u2014 the number of non-similar worlds that can be built, modulo 10^9 + 7. -----Examples----- Input 3 2 Output 6 Input 4 4 Output 3 Input 7 3 Output 1196 Input 31 8 Output 64921457 -----Note----- In the first example, the following 6 worlds are pairwise non-similar and satisfy the constraints, with s(G) marked in green, t(G) marked in blue, and one of their minimum cuts in light blue.  [Image]  In the second example, the following 3 worlds satisfy the constraints.  [Image]\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nA never-ending, fast-changing and dream-like world unfolds, as the secret door opens.\n\nA world is an unordered graph G, in whose vertex set V(G) there are two special vertices s(G) and t(G). An initial world has vertex set {s(G), t(G)} and an edge between them.\n\nA total of n changes took place in an initial world. In each change, a new vertex w is added into V(G), an existing edge (u, v) is chosen, and two edges (u, w) and (v, w) are added into E(G). Note that it's possible that some edges are chosen in more than one change.\n\nIt's known that the capacity of the minimum s-t cut of the resulting graph is m, that is, at least m edges need to be removed in order to make s(G) and t(G) disconnected.\n\nCount the number of non-similar worlds that can be built under the constraints, modulo 10^9 + 7. We define two worlds similar, if they are isomorphic and there is isomorphism in which the s and t vertices are not relabelled. Formally, two worlds G and H are considered similar, if there is a bijection between their vertex sets $f : V(G) \\rightarrow V(H)$, such that:   f(s(G)) = s(H);  f(t(G)) = t(H);  Two vertices u and v of G are adjacent in G if and only if f(u) and f(v) are adjacent in H. \n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers n, m (1 \u2264 n, m \u2264 50) \u2014 the number of operations performed and the minimum cut, respectively.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of non-similar worlds that can be built, modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n6\n\nInput\n4 4\n\nOutput\n3\n\nInput\n7 3\n\nOutput\n1196\n\nInput\n31 8\n\nOutput\n64921457\n\n\n\n-----Note-----\n\nIn the first example, the following 6 worlds are pairwise non-similar and satisfy the constraints, with s(G) marked in green, t(G) marked in blue, and one of their minimum cuts in light blue.\n\n [Image] \n\nIn the second example, the following 3 worlds satisfy the constraints.\n\n [Image]\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Write a function that when given a number n, returns the nth number in the Fibonacci Sequence. \n-----Input----- The first line contains five integers n, a, b, k, f (1 \u2264 n \u2264 300, 1 \u2264 b < a \u2264 100, 0 \u2264 k \u2264 300, 1 \u2264 f \u2264 1000) where:  n \u2014 the number of Polycarp trips,  a \u2014 the cost of a regualar single trip,  b \u2014 the cost of a trip after a transshipment,  k \u2014 the maximum number of travel cards Polycarp can buy,  f \u2014 the cost of a single travel card.  The following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space \u2014 the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different. -----Output----- Print the smallest amount of money Polycarp could have spent today, if he can purchase no more than k travel cards. -----Examples----- Input 3 5 3 1 8 BerBank University University BerMall University BerBank Output 11 Input 4 2 1 300 1000 a A A aa aa AA AA a Output 5 -----Note----- In the first example Polycarp can buy travel card for the route \"BerBank $\\leftrightarrow$ University\" and spend 8 burles. Note that his second trip \"University\" $\\rightarrow$ \"BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles. In the second example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIn the evening Polycarp decided to analyze his today's travel expenses on public transport.\n\nThe bus system in the capital of Berland is arranged in such a way that each bus runs along the route between two stops. Each bus has no intermediate stops. So each of the buses continuously runs along the route from one stop to the other and back. There is at most one bus running between a pair of stops.\n\nPolycarp made n trips on buses. About each trip the stop where he started the trip and the the stop where he finished are known. The trips follow in the chronological order in Polycarp's notes.\n\nIt is known that one trip on any bus costs a burles. In case when passenger makes a transshipment the cost of trip decreases to b burles (b < a). A passenger makes a transshipment if the stop on which he boards the bus coincides with the stop where he left the previous bus. Obviously, the first trip can not be made with transshipment.\n\nFor example, if Polycarp made three consecutive trips: \"BerBank\" $\\rightarrow$ \"University\", \"University\" $\\rightarrow$ \"BerMall\", \"University\" $\\rightarrow$ \"BerBank\", then he payed a + b + a = 2a + b burles. From the BerBank he arrived to the University, where he made transshipment to the other bus and departed to the BerMall. Then he walked to the University and returned to the BerBank by bus.\n\nAlso Polycarp can buy no more than k travel cards. Each travel card costs f burles. The travel card for a single bus route makes free of charge any trip by this route (in both directions). Once purchased, a travel card can be used any number of times in any direction.\n\nWhat is the smallest amount of money Polycarp could have spent today if he can buy no more than k travel cards?\n\n\n-----Input-----\n\nThe first line contains five integers n, a, b, k, f (1 \u2264 n \u2264 300, 1 \u2264 b < a \u2264 100, 0 \u2264 k \u2264 300, 1 \u2264 f \u2264 1000) where:  n \u2014 the number of Polycarp trips,  a \u2014 the cost of a regualar single trip,  b \u2014 the cost of a trip after a transshipment,  k \u2014 the maximum number of travel cards Polycarp can buy,  f \u2014 the cost of a single travel card. \n\nThe following n lines describe the trips in the chronological order. Each line contains exactly two different words separated by a single space \u2014 the name of the start stop and the name of the finish stop of the trip. All names consist of uppercase and lowercase English letters and have lengths between 1 to 20 letters inclusive. Uppercase and lowercase letters should be considered different.\n\n\n-----Output-----\n\nPrint the smallest amount of money Polycarp could have spent today, if he can purchase no more than k travel cards.\n\n\n-----Examples-----\nInput\n3 5 3 1 8\nBerBank University\nUniversity BerMall\nUniversity BerBank\n\nOutput\n11\n\nInput\n4 2 1 300 1000\na A\nA aa\naa AA\nAA a\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example Polycarp can buy travel card for the route \"BerBank $\\leftrightarrow$ University\" and spend 8 burles. Note that his second trip \"University\" $\\rightarrow$ \"BerMall\" was made after transshipment, so for this trip Polycarp payed 3 burles. So the minimum total sum equals to 8 + 3 = 11 burles.\n\nIn the second example it doesn't make sense to buy travel cards. Note that each of Polycarp trip (except the first) was made with transshipment. So the minimum total sum equals to 2 + 1 + 1 + 1 = 5 burles.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a DNA molecule consisting of $N$ characters from the set $\\{ A, B\\} $. An unlikely sequence of mutations has resulted in a DNA strand consisting only of $A$ s. Biologists found that very odd, so they began studying the mutations in greater detail. They discovered two types of mutations. One type results in changing any single character of the sequence ($A \\rightarrow B$ or $B \\rightarrow A$). The second type changes a whole prefix of the sequence, specifically replacing all characters in positions from $1$ to $K$ (for some $K$ between $1$ and $N$, inclusive) with the other character ($A$ with $B$, $B$ with $A$). Compute the least possible number of mutations that could convert the starting molecule to its end state (containing only $A$ characters). Mutations can occur in any order.\n-----Input----- The first line of input contains the positive integer $N$ ($1 \\le N \\le 1000000$), the length of the molecule. The second line of input contains a string with $N$ characters, with each character being either $A$ or $B$. This string represents the starting state of the molecule. -----Output----- The first and only line of output must contain the required minimum number of mutations. -----Examples----- Sample Input 1: 4 ABBA Sample Output 1: 2 Sample Input 2: 5 BBABB Sample Output 2: 2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nBiologists have discovered a strange DNA molecule, best described as a sequence of $N$ characters from the set $\\{ A, B\\} $. An unlikely sequence of mutations has resulted in a DNA strand consisting only of $A$\u2019s. Biologists found that very odd, so they began studying the mutations in greater detail.\n\nThey discovered two types of mutations. One type results in changing any single character of the sequence ($A \\rightarrow B$ or $B \\rightarrow A$). The second type changes a whole prefix of the sequence, specifically replacing all characters in positions from $1$ to $K$ (for some $K$ between $1$ and $N$, inclusive) with the other character ($A$ with $B$, $B$ with $A$).\n\nCompute the least possible number of mutations that could convert the starting molecule to its end state (containing only $A$ characters). Mutations can occur in any order.\n\n-----Input-----\nThe first line of input contains the positive integer $N$ ($1 \\le N \\le 1000000$), the length of the molecule. The second line of input contains a string with $N$ characters, with each character being either $A$ or $B$. This string represents the starting state of the molecule.\n\n-----Output-----\nThe first and only line of output must contain the required minimum number of mutations.\n\n-----Examples-----\nSample Input 1:\n4\nABBA\nSample Output 1:\n2\n\nSample Input 2:\n5\nBBABB\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Angela is a new PhD student and she is nervous about the upcoming paper submission deadline of this year's research conference. She has been working on multiple projects throughout the past year. Luckily most of the projects concluded successfully, and she came up with $n$ candidate papers. However not all of the papers were born equal some have better results than others. Her advisor believes she should only submit the papers with good enough results so they have a high chance of getting accepted. Angela's research group has a unique way of evaluating the success of paper submissions. They use the research productivity index, defined as $a^{a/s}$, where $s$ is the total number of papers submitted, and $a$ is the number of papers that are accepted by the conference. When $a = 0$, the index is defined to be zero. For example: - if one paper is submitted and it gets accepted, the index is $1^{1/1} = 1$; - if $4$ papers are submitted and all get accepted, the index is $4^{4/4} = 4$; - if $10$ papers are submitted and $3$ get accepted, the index is $3^{3/10} \\approx 1.390389$; - if $5$ papers are submitted and $4$ get accepted, the index is $4^{4/5} \\approx 3.031433$; - if $3$ papers are submitted and all get rejected ($a=0$), the index is $0$. Intuitively, to get a high research productivity index one wants to get as many papers accepted as possible while keeping the acceptance rate high. For each of her\n-----Input----- The first line of the input has a single integer $n$ ($1 \\leq n \\leq 100$), the number of Angela\u2019s candidate papers. The next line has $n$ space-separated integers giving the probability of each paper getting accepted. Each probability value is given as an integer percentage between $1$ and $100$, inclusive. -----Output----- Output the maximum expected value of Angela\u2019s research productivity index. Your answer is considered correct if it has an absolute or relative error of no more than $10^{-6}$. -----Examples----- Sample Input 1: 5 30 50 70 60 90 Sample Output 1: 2.220889579 Sample Input 2: 6 30 90 30 90 30 90 Sample Output 2: 2.599738456\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nAngela is a new PhD student and she is nervous about the upcoming paper submission deadline of this year\u2019s research conference. She has been working on multiple projects throughout the past year. Luckily most of the projects concluded successfully, and she came up with $n$ candidate papers. However not all of the papers were born equal\u2014some have better results than others. Her advisor believes she should only submit the papers with \u201cgood enough\u201d results so they have a high chance of getting accepted. \n\nAngela\u2019s research group has a unique way of evaluating the success of paper submissions. They use the research productivity index, defined as $a^{a/s}$, where $s$ is the total number of papers submitted, and $a$ is the number of papers that are accepted by the conference. When $a = 0$, the index is defined to be zero. For example:\n - if one paper is submitted and it gets accepted, the index is $1^{1/1} = 1$;\n - if $4$ papers are submitted and all get accepted, the index is $4^{4/4} = 4$;\n - if $10$ papers are submitted and $3$ get accepted, the index is $3^{3/10} \\approx 1.390389$;\n - if $5$ papers are submitted and $4$ get accepted, the index is $4^{4/5} \\approx 3.031433$;\n - if $3$ papers are submitted and all get rejected ($a=0$), the index is $0$.\n\nIntuitively, to get a high research productivity index one wants to get as many papers accepted as possible while keeping the acceptance rate high.\n\nFor each of her $n$ papers, Angela knows exactly how likely it is that the conference would accept the paper. If she chooses wisely which papers to submit, what is the maximum expected value of her research productivity index?\n\n-----Input-----\nThe first line of the input has a single integer $n$ ($1 \\leq n \\leq 100$), the number of Angela\u2019s candidate papers. The next line has $n$ space-separated integers giving the probability of each paper getting accepted. Each probability value is given as an integer percentage between $1$ and $100$, inclusive.\n\n-----Output-----\nOutput the maximum expected value of Angela\u2019s research productivity index. Your answer is considered correct if it has an absolute or relative error of no more than $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n5\n30 50 70 60 90\nSample Output 1:\n2.220889579\n\nSample Input 2:\n6\n30 90 30 90 30 90\nSample Output 2:\n2.599738456\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You have a set of syllables. A haiku is a Japanese form of poetry. It consists of three phrases of $5$, $7$ and $5$ syllables each. You need to determine whether a submitted poem is a haiku, given a set of syllables. \n-----Input----- The first line of input contains a single integer $1 \\le S \\le 100$, the number of syllables. The next line contains $S$ words separated by spaces (the syllables). Each syllable contains at most $7$ lowercase letters a-z. Then, three lines containing the poem follow. Each line contains a (non-empty) list of words separated by spaces, representing a phrase. The words contain only lowercase letters a-z. The length of each line is at most $100$ characters (including spaces). It is guaranteed that there exists at least one decomposition of the poem into the given syllables. -----Output----- Output \u201chaiku\u201d if the given poem is a haiku, and \u201ccome back next year\u201d otherwise (without the quotes). -----Explanation of Sample Input 1----- One possible decomposition into a haiku is: spe-lling ve-ry hard ear-ly in mor-ning ti-red i need cov-fe-fe -----Explanation of Sample Input 3----- No matter how the third line is decomposed, it contains $8$ syllables instead of $5$, so it can not be a haiku. -----Examples----- Sample Input 1: 20 va fi ve mor lling spe in i sh ti hard cov ear fe red ja ry need ly ning spelling very hard early in morning tired i need covfefe Sample Output 1: haiku Sample Input 2: 22 q c da plus to the e thee un late ci a shall by com i ru pare temp ble hi de shall i compare thee to a c plus plus template undecidable Sample Output 2: haiku\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nA haiku is a Japanese form of poetry. It consists of three phrases of $5$, $7$ and $5$ syllables each.\n\nOnce a year, HiQ has a haiku contest, where employees submit their best poems. The poems are then judged based on a wide range of aspects, such as\n - creativity\n - simplicity\n - beauty\n - whether the poem is actually a haiku\n\nThis last point turned out to be quite a challenge for the judges (many problems arose when half the judges indexed syllables starting at $0$ and the other half at $1$).\n\nCan you help the judges to determine whether a submitted poem is a haiku, given a set of syllables? Note that there may exist multiple decompositions of a single word in the poem into syllables. In this case, you should determine whether some decomposition is a haiku.\n\n-----Input-----\nThe first line of input contains a single integer $1 \\le S \\le 100$, the number of syllables. The next line contains $S$ words separated by spaces (the syllables). Each syllable contains at most $7$ lowercase letters a-z.\n\nThen, three lines containing the poem follow. Each line contains a (non-empty) list of words separated by spaces, representing a phrase. The words contain only lowercase letters a-z. The length of each line is at most $100$ characters (including spaces).\n\nIt is guaranteed that there exists at least one decomposition of the poem into the given syllables.\n\n-----Output-----\nOutput \u201chaiku\u201d if the given poem is a haiku, and \u201ccome back next year\u201d otherwise (without the quotes).\n\n-----Explanation of Sample Input 1-----\nOne possible decomposition into a haiku is:\n\nspe-lling ve-ry hard\near-ly in mor-ning ti-red\ni need cov-fe-fe\n\n\n-----Explanation of Sample Input 3-----\nNo matter how the third line is decomposed, it contains $8$ syllables instead of $5$, so it can not be a haiku.\n\n-----Examples-----\nSample Input 1:\n20\nva\nfi\nve\nmor\nlling\nspe\nin\ni\nsh\nti\nhard\ncov\near\nfe\nred\nja\nry\nneed\nly\nning\nspelling very hard\nearly in morning tired\ni need covfefe\nSample Output 1:\nhaiku\n\nSample Input 2:\n22\nq\nc\nda\nplus\nto\nthe\ne\nthee\nun\nlate\nci\na\nshall\nby\ncom\ni\nru\npare\ntemp\nble\nhi\nde\nshall i compare thee\nto a c plus plus template\nundecidable\nSample Output 2:\nhaiku\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Tokitsukaze had $n$ items at the beginning of this game. However, she thought there were too many items, so now she wants to discard $m$ ($1 \\le m \\le n$) special items of them. These $n$ items are marked with indices from $1$ to $n$. In the beginning, the item with index $i$ is placed on the $i$-th position. Items are divided into several pages orderly, such that each page contains exactly $k$ positions and the last positions on the last page may be left empty. Tokitsukaze would do the following operation: focus on the first special page that contains at least one special item, and at one time, Tokitsukaze would discard all special items on this page. After an item is discarded or moved, its old position would be empty, and then the item below it, if exists, would move up to this empty position. The movement may bring many items forward and even into previous pages, so Tokitsukaze would keep waiting until all the items stop moving, and then do the operation (i.e. check the special page and discard the special items) repeatedly until there is no item need to be discarded. \n-----Input----- The first line contains three integers $n$, $m$ and $k$ ($1 \\le n \\le 10^{18}$, $1 \\le m \\le 10^5$, $1 \\le m, k \\le n$)\u00a0\u2014 the number of items, the number of special items to be discarded and the number of positions in each page. The second line contains $m$ distinct integers $p_1, p_2, \\ldots, p_m$ ($1 \\le p_1 < p_2 < \\ldots < p_m \\le n$)\u00a0\u2014 the indices of special items which should be discarded. -----Output----- Print a single integer\u00a0\u2014 the number of operations that Tokitsukaze would do in total. -----Examples----- Input 10 4 5 3 5 7 10 Output 3 Input 13 4 5 7 8 9 10 Output 1 -----Note----- For the first example:   In the first operation, Tokitsukaze would focus on the first page $[1, 2, 3, 4, 5]$ and discard items with indices $3$ and $5$;  In the second operation, Tokitsukaze would focus on the first page $[1, 2, 4, 6, 7]$ and discard item with index $7$;  In the third operation, Tokitsukaze would focus on the second page $[9, 10]$ and discard item with index $10$.  For the second example, Tokitsukaze would focus on the second page $[6, 7, 8, 9, 10]$ and discard all special items at once.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nRecently, Tokitsukaze found an interesting game. Tokitsukaze had $n$ items at the beginning of this game. However, she thought there were too many items, so now she wants to discard $m$ ($1 \\le m \\le n$) special items of them.\n\nThese $n$ items are marked with indices from $1$ to $n$. In the beginning, the item with index $i$ is placed on the $i$-th position. Items are divided into several pages orderly, such that each page contains exactly $k$ positions and the last positions on the last page may be left empty.\n\nTokitsukaze would do the following operation: focus on the first special page that contains at least one special item, and at one time, Tokitsukaze would discard all special items on this page. After an item is discarded or moved, its old position would be empty, and then the item below it, if exists, would move up to this empty position. The movement may bring many items forward and even into previous pages, so Tokitsukaze would keep waiting until all the items stop moving, and then do the operation (i.e. check the special page and discard the special items) repeatedly until there is no item need to be discarded.\n\n [Image] Consider the first example from the statement: $n=10$, $m=4$, $k=5$, $p=[3, 5, 7, 10]$. The are two pages. Initially, the first page is special (since it is the first page containing a special item). So Tokitsukaze discards the special items with indices $3$ and $5$. After, the first page remains to be special. It contains $[1, 2, 4, 6, 7]$, Tokitsukaze discards the special item with index $7$. After, the second page is special (since it is the first page containing a special item). It contains $[9, 10]$, Tokitsukaze discards the special item with index $10$. \n\nTokitsukaze wants to know the number of operations she would do in total.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $k$ ($1 \\le n \\le 10^{18}$, $1 \\le m \\le 10^5$, $1 \\le m, k \\le n$)\u00a0\u2014 the number of items, the number of special items to be discarded and the number of positions in each page.\n\nThe second line contains $m$ distinct integers $p_1, p_2, \\ldots, p_m$ ($1 \\le p_1 < p_2 < \\ldots < p_m \\le n$)\u00a0\u2014 the indices of special items which should be discarded.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of operations that Tokitsukaze would do in total.\n\n\n-----Examples-----\nInput\n10 4 5\n3 5 7 10\n\nOutput\n3\n\nInput\n13 4 5\n7 8 9 10\n\nOutput\n1\n\n\n\n-----Note-----\n\nFor the first example:\n\n  In the first operation, Tokitsukaze would focus on the first page $[1, 2, 3, 4, 5]$ and discard items with indices $3$ and $5$;  In the second operation, Tokitsukaze would focus on the first page $[1, 2, 4, 6, 7]$ and discard item with index $7$;  In the third operation, Tokitsukaze would focus on the second page $[9, 10]$ and discard item with index $10$. \n\nFor the second example, Tokitsukaze would focus on the second page $[6, 7, 8, 9, 10]$ and discard all special items at once.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given a cake with a rectangular surface, partition it into stripes of width A and height B. The intersection of vertical stripe i and horizontal stripe j has color number (i+j) mod 3 for all 1<=i,j<=n. The output should consist of three integers separated with single spaces, representing the total area for each color 0, 1, and 2. \nExamples----- Sample Input: 3 1 1 1 1 1 1 Sample Output: 3 3 3\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nIskander the Baker is decorating a huge cake, covering the rectangular surface of the cake with frosting. For this purpose, he mixes frosting sugar with lemon juice and food coloring, in order to produce three kinds of frosting: yellow, pink, and white. These colors are identified by the numbers $0$ for yellow, $1$\u00a0for pink, and $2$ for white.\n\nTo obtain a nice pattern, he partitions the cake surface into vertical stripes of width $A_1, A_2, \\dots , A_ n$ centimeters, and horizontal stripes of height $B_1, B_2, \\dots , B_ n$ centimeters, for some positive integer\u00a0$n$. These stripes split the cake surface into $n\\times n$ rectangles. The intersection of vertical stripe\u00a0$i$ and horizontal stripe\u00a0$j$ has color number $(i+j) \\bmod 3$ for all $1 \\leq i,j \\leq n$. To prepare the frosting, Iskander wants to know the total surface in square centimeters to be colored for each of the three colors, and asks for your help.Input\n\nThe input consists of the following integers:\n - on the first line: the integer $n$,\n - on the second line: the values of $A_1,\\dots ,A_ n$, $n$ integers separated with single spaces,\n - on the third line: the values of $B_1,\\dots ,B_ n$, $n$ integers separated with single spaces.Limits\n\nThe input satisfies $3\\leq n \\leq 100000$ and $1 \\leq A_1,\\ldots ,A_ n,B_1,\\ldots ,B_ n \\leq 10000$.Output\n\nThe output should consist of three integers separated with single spaces, representing the total area for each color $0$, $1$, and $2$.\n\n-----Examples-----\nSample Input:\n3\n1 1 1\n1 1 1\nSample Output:\n3 3 3\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given the lines and two points, can you decide whether or not they must get different designations,  commercial  or  residential  \n-----Input----- Input begins with an integer $S$ on a single line, giving the number of streets ($1 \\le S \\le 10000$). The next $S$ lines of input each contain four integers $x_1$, $y_1$, $x_2$, and $y_2$, specifying the coordinates of two distinct points $(x_1, y_1)$ and $(x_2, y_2)$. The unique line through these two points gives one of the streets. Each coordinate is in the range $[0, 10000]$, and no two lines will be identical. That is, the town will have $S$ distinct streets. The next line contains an integer $T$, the number of pairs of properties to test ($ 1 \\le T \\le 1000$). This is followed by $T$ lines of input, each containing four integers $x_3$, $y_3$, $x_4$, and $y_4$, representing two distinct points $(x_3, y_3)$ and $(x_4, y_4)$, where each point lies within one of the two properties to test. None of these points will lie on any of the streets, nor will both points lie within the same property. Again, each coordinate is in the range $[0, 10000]$. -----Output----- For each of the $T$ pairs of properties to be tested, output either \u201csame\u201d if the properties are guaranteed to receive the same designation or \u201cdifferent\u201d if they are guaranteed to receive different designations. -----Examples----- Sample Input: 2 1 1 2 1 1 1 1 2 3 2 0 2 2 2 0 0 3 0 0 2 2 Sample Output: different same same\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nA new town is being planned, and the designers have some very specific ideas about how things should be laid out. First, they lay out the streets. Each street is perfectly straight and passes completely from one end of the town to the other. These streets divide the town into regions, and each region is to be designated either \u201cresidential\u201d or \u201ccommercial.\u201d The town planners require that any two regions directly across the street from one another must have different designations. On this one particular day, all of the streets have been planned, but none of the regions have been designated. One town planner wishes to purchase two properties, and it is important to him that the properties eventually have different designations. For this problem, the streets can be modeled by lines in the plane that extend forever in both directions and have no width, and properties may be modeled by points. Given the lines and two points, can you decide whether or not they must get different designations, \u201ccommercial\u201d or \u201cresidential?\u201d \n\n-----Input-----\nInput begins with an integer $S$ on a single line, giving the number of streets ($1 \\le S \\le 10000$). The next $S$ lines of input each contain four integers $x_1$, $y_1$, $x_2$, and $y_2$, specifying the coordinates of two distinct points $(x_1, y_1)$ and $(x_2, y_2)$. The unique line through these two points gives one of the streets. Each coordinate is in the range $[0, 10000]$, and no two lines will be identical. That is, the town will have $S$ distinct streets. The next line contains an integer $T$, the number of pairs of properties to test ($ 1 \\le T \\le 1000$). This is followed by $T$ lines of input, each containing four integers $x_3$, $y_3$, $x_4$, and $y_4$, representing two distinct points $(x_3, y_3)$ and $(x_4, y_4)$, where each point lies within one of the two properties to test. None of these points will lie on any of the streets, nor will both points lie within the same property. Again, each coordinate is in the range $[0, 10000]$.\n\n-----Output-----\nFor each of the $T$ pairs of properties to be tested, output either \u201csame\u201d if the properties are guaranteed to receive the same designation or \u201cdifferent\u201d if they are guaranteed to receive different designations.\n\n-----Examples-----\nSample Input:\n2\n1 1 2 1\n1 1 1 2\n3\n2 0 2 2\n2 0 0 3\n0 0 2 2\nSample Output:\ndifferent\nsame\nsame\n\"\"\"\ndef code():"
}