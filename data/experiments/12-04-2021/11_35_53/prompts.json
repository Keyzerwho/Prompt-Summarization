{
    "0": "Python 3\n\"\"\"\n You are given two integers A and B. Print a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section: - Let the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100. - The set of the squares painted white is divided into exactly A connected components. - The set of the squares painted black is divided into exactly B connected components. It can be proved that there always exist one or more solutions under the conditions specified in Constraints section. If there are multiple solutions, any of them may be printed. \n\n-----Input----- Input is given from Standard Input in the following format: A B -----Output----- Output should be in the following format:  - In the first line, print integers h and w representing the size of the grid you constructed, with a space in between.  - Then, print h more lines. The i-th (1 \\leq i \\leq h) of these lines should contain a string s_i as follows:  - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted white, the j-th character in s_i should be ..  - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted black, the j-th character in s_i should be #. -----Sample Input----- 2 3 -----Sample Output----- 3 3 ##. ..# #.# This output corresponds to the grid below:\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n - Let the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\n - The set of the squares painted white is divided into exactly A connected components.\n - The set of the squares painted black is divided into exactly B connected components.\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.\n\n-----Notes-----\nTwo squares painted white, c_1 and c_2, are called connected when the square c_2 can be reached from the square c_1 passing only white squares by repeatedly moving up, down, left or right to an adjacent square.\nA set of squares painted white, S, forms a connected component when the following conditions are met:\n - Any two squares in S are connected.\n - No pair of a square painted white that is not included in S and a square included in S is connected.\nA connected component of squares painted black is defined similarly.\n\n-----Constraints-----\n - 1 \\leq A \\leq 500\n - 1 \\leq B \\leq 500\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nOutput should be in the following format:\n - In the first line, print integers h and w representing the size of the grid you constructed, with a space in between.\n - Then, print h more lines. The i-th (1 \\leq i \\leq h) of these lines should contain a string s_i as follows:\n - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted white, the j-th character in s_i should be ..\n - If the square at the i-th row and j-th column (1 \\leq j \\leq w) in the grid is painted black, the j-th character in s_i should be #.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n3 3\n##.\n..#\n#.#\n\nThis output corresponds to the grid below:\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given the average temperature for each of the last n days, determine whether the average temperature for the next day will be the same as the average temperature for the n-th day or the next term of the arithmetic progression. \n-----Input----- The first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of days for which the average air temperature is known. The second line contains a sequence of integers t_1, t_2, ..., t_{n} ( - 1000 \u2264 t_{i} \u2264 1000)\u00a0\u2014 where t_{i} is the average temperature in the i-th day. -----Output----- Print the average air temperature in the (n + 1)-th day, which Vasya predicts according to his method. Note that the absolute value of the predicted temperature can exceed 1000. -----Examples----- Input 5 10 5 0 -5 -10 Output -15 Input 4 1 1 1 1 Output 1 Input 3 5 1 -5 Output -5 Input 2 900 1000 Output 1100 -----Note----- In the first example the sequence of the average temperatures is an arithmetic progression where the first term is 10 and each following terms decreases by 5. So the predicted average temperature for the sixth day is  - 10 - 5 =  - 15. In the second example the sequence of the average temperatures is an arithmetic progression where the first term is 1 and each following terms equals to the previous one. So the predicted average temperature in the fifth day is 1. In the third example the average temperatures do not form an arithmetic progression, so the average temperature of the fourth day equals to the temperature of the third day and equals to  - 5. In the fourth example the sequence of the average temperatures is an arithmetic progression where the first term is 900 and each the following terms increase by 100. So predicted average temperature in the third day is 1000 + 100 = 1100.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nVasya came up with his own weather forecasting method. He knows the information about the average air temperature for each of the last n days. Assume that the average air temperature for each day is integral.\n\nVasya believes that if the average temperatures over the last n days form an arithmetic progression, where the first term equals to the average temperature on the first day, the second term equals to the average temperature on the second day and so on, then the average temperature of the next (n + 1)-th day will be equal to the next term of the arithmetic progression. Otherwise, according to Vasya's method, the temperature of the (n + 1)-th day will be equal to the temperature of the n-th day.\n\nYour task is to help Vasya predict the average temperature for tomorrow, i. e. for the (n + 1)-th day.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of days for which the average air temperature is known.\n\nThe second line contains a sequence of integers t_1, t_2, ..., t_{n} ( - 1000 \u2264 t_{i} \u2264 1000)\u00a0\u2014 where t_{i} is the average temperature in the i-th day.\n\n\n-----Output-----\n\nPrint the average air temperature in the (n + 1)-th day, which Vasya predicts according to his method. Note that the absolute value of the predicted temperature can exceed 1000.\n\n\n-----Examples-----\nInput\n5\n10 5 0 -5 -10\n\nOutput\n-15\n\nInput\n4\n1 1 1 1\n\nOutput\n1\n\nInput\n3\n5 1 -5\n\nOutput\n-5\n\nInput\n2\n900 1000\n\nOutput\n1100\n\n\n\n-----Note-----\n\nIn the first example the sequence of the average temperatures is an arithmetic progression where the first term is 10 and each following terms decreases by 5. So the predicted average temperature for the sixth day is  - 10 - 5 =  - 15.\n\nIn the second example the sequence of the average temperatures is an arithmetic progression where the first term is 1 and each following terms equals to the previous one. So the predicted average temperature in the fifth day is 1.\n\nIn the third example the average temperatures do not form an arithmetic progression, so the average temperature of the fourth day equals to the temperature of the third day and equals to  - 5.\n\nIn the fourth example the sequence of the average temperatures is an arithmetic progression where the first term is 900 and each the following terms increase by 100. So predicted average temperature in the third day is 1000 + 100 = 1100.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Restore the array $a_1, \\dots, a_n$ from the information that is given. \n-----Input----- The first line contains a single integer $n$ ($3 \\leqslant n \\leqslant 10^3$), the size of the table.  The next $n$ lines contain $n$ integers each. The $j$-th number of the $i$-th line contains the number $M_{ij}$ ($1 \\leq M_{ij} \\leq 10^9$). The table has zeroes on the main diagonal, that is, $M_{ii}=0$. -----Output----- In a single line print $n$ integers, the original array $a_1, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$). It is guaranteed that an answer exists. If there are multiple answers, print any. -----Examples----- Input 5 0 4 6 2 4 4 0 6 2 4 6 6 0 3 6 2 2 3 0 2 4 4 6 2 0 Output 2 2 3 1 2  Input 3 0 99990000 99970002 99990000 0 99980000 99970002 99980000 0 Output 9999 10000 9998\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nSasha grew up and went to first grade. To celebrate this event her mother bought her a multiplication table $M$ with $n$ rows and $n$ columns such that $M_{ij}=a_i \\cdot a_j$ where $a_1, \\dots, a_n$ is some sequence of positive integers.\n\nOf course, the girl decided to take it to school with her. But while she was having lunch, hooligan Grisha erased numbers on the main diagonal and threw away the array $a_1, \\dots, a_n$. Help Sasha restore the array!\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leqslant n \\leqslant 10^3$), the size of the table. \n\nThe next $n$ lines contain $n$ integers each. The $j$-th number of the $i$-th line contains the number $M_{ij}$ ($1 \\leq M_{ij} \\leq 10^9$). The table has zeroes on the main diagonal, that is, $M_{ii}=0$.\n\n\n-----Output-----\n\nIn a single line print $n$ integers, the original array $a_1, \\dots, a_n$ ($1 \\leq a_i \\leq 10^9$). It is guaranteed that an answer exists. If there are multiple answers, print any.\n\n\n-----Examples-----\nInput\n5\n0 4 6 2 4\n4 0 6 2 4\n6 6 0 3 6\n2 2 3 0 2\n4 4 6 2 0\n\nOutput\n2 2 3 1 2 \nInput\n3\n0 99990000 99970002\n99990000 0 99980000\n99970002 99980000 0\n\nOutput\n9999 10000 9998\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given a string of messages. You need to find the person who is present at any conversation during a chat meeting. \n-----Input----- The first line contains integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of team participants and the number of messages. Each of the next m lines contains a message in the format:  '+ id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged on to the meeting.  '- id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged off from the meeting.  Assume that all the people of the team are numbered from 1 to n and the messages are given in the chronological order. It is guaranteed that the given sequence is the correct record of a continuous part of the meeting. It is guaranteed that no two log on/log off events occurred simultaneously. -----Output----- In the first line print integer k (0 \u2264 k \u2264 n) \u2014 how many people can be leaders. In the next line, print k integers in the increasing order \u2014 the numbers of the people who can be leaders. If the data is such that no member of the team can be a leader, print a single number 0. -----Examples----- Input 5 4 + 1 + 2 - 2 - 1 Output 4 1 3 4 5  Input 3 2 + 1 - 2 Output 1 3  Input 2 4 + 1 - 1 + 2 - 2 Output 0 Input 5 6 + 1 - 1 - 3 + 3 + 4 - 4 Output 3 2 3 5  Input 2 4 + 1 - 2 + 2 - 1 Output 0\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nNearly each project of the F company has a whole team of developers working on it. They often are in different rooms of the office in different cities and even countries. To keep in touch and track the results of the project, the F company conducts shared online meetings in a Spyke chat.\n\nOne day the director of the F company got hold of the records of a part of an online meeting of one successful team. The director watched the record and wanted to talk to the team leader. But how can he tell who the leader is? The director logically supposed that the leader is the person who is present at any conversation during a chat meeting. In other words, if at some moment of time at least one person is present on the meeting, then the leader is present on the meeting.\n\nYou are the assistant director. Given the 'user logged on'/'user logged off' messages of the meeting in the chronological order, help the director determine who can be the leader. Note that the director has the record of only a continuous part of the meeting (probably, it's not the whole meeting).\n\n\n-----Input-----\n\nThe first line contains integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of team participants and the number of messages. Each of the next m lines contains a message in the format:  '+ id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged on to the meeting.  '- id': the record means that the person with number id (1 \u2264 id \u2264 n) has logged off from the meeting. \n\nAssume that all the people of the team are numbered from 1 to n and the messages are given in the chronological order. It is guaranteed that the given sequence is the correct record of a continuous part of the meeting. It is guaranteed that no two log on/log off events occurred simultaneously.\n\n\n-----Output-----\n\nIn the first line print integer k (0 \u2264 k \u2264 n) \u2014 how many people can be leaders. In the next line, print k integers in the increasing order \u2014 the numbers of the people who can be leaders.\n\nIf the data is such that no member of the team can be a leader, print a single number 0.\n\n\n-----Examples-----\nInput\n5 4\n+ 1\n+ 2\n- 2\n- 1\n\nOutput\n4\n1 3 4 5 \nInput\n3 2\n+ 1\n- 2\n\nOutput\n1\n3 \nInput\n2 4\n+ 1\n- 1\n+ 2\n- 2\n\nOutput\n0\n\nInput\n5 6\n+ 1\n- 1\n- 3\n+ 3\n+ 4\n- 4\n\nOutput\n3\n2 3 5 \nInput\n2 4\n+ 1\n- 2\n+ 2\n- 1\n\nOutput\n0\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a rooted tree with $n$ nodes. The nodes are numbered $1..n$. The root is node $1$. $m$ of the nodes are colored red, the rest are black. You would like to choose a subset of nodes such that there is no node in your subset which is an ancestor of any other node in your subset. For example, if A is the parent of B and B is the parent of C, then you could have at most one of A, B or C in your subset. In addition, you would like exactly $k$ of your chosen nodes to be red. If exactly $m$ of the nodes are red, then for all $k=0..m$, figure out how many ways you can choose subsets with $k$ red nodes, and no node is an ancestor of any other node.\n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers $n$ ($1 \\le n \\le 2 \\times 10^5$) and $m$ ($0 \\le m \\le min(10^3,\\ n)$), where $n$ is the number of nodes in the tree, and $m$ is the number of nodes which are red. The nodes are numbered $1..n$. Each of the next $n-1$ lines will contain a single integer $p$ ($1 \\le p \\le n$), which is the number of the parent of this node. The nodes are listed in order, starting with node $2$, then node $3$, and so on. Node $1$ is skipped, since it is the root. It is guaranteed that the nodes form a single tree, with a single root at node $1$ and no cycles. Each of the next $m$ lines will contain single integer $r$ ($1 \\le r \\le n$). These are the numbers of the red nodes. No value of $r$ will be repeated. -----Output----- Output $m+1$ lines, corresponding to the number of subsets satisfying the given criteria with a number of red nodes equal to $k=0..m$, in that order. Output this number modulo $10^9+7$. -----Examples----- Sample Input 1: 4 1 1 1 1 3 Sample Output 1: 5 4 Sample Input 2: 4 4 1 1 1 1 2 3 4 Sample Output 2: 1 4 3 1 0\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given a rooted tree with $n$ nodes. The nodes are numbered $1..n$. The root is node $1$, and $m$ of the nodes are colored red, the rest are black.\n\nYou would like to choose a subset of nodes such that there is no node in your subset which is an ancestor of any other node in your subset. For example, if A is the parent of B and B is the parent of C, then you could have at most one of A, B or C in your subset. In addition, you would like exactly $k$ of your chosen nodes to be red.\n\nIf exactly $m$ of the nodes are red, then for all $k=0..m$, figure out how many ways you can choose subsets with $k$ red nodes, and no node is an ancestor of any other node.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers $n$ ($1 \\le n \\le 2 \\times 10^5$) and $m$ ($0 \\le m \\le min(10^3,\\ n)$), where $n$ is the number of nodes in the tree, and $m$ is the number of nodes which are red. The nodes are numbered $1..n$.\n\nEach of the next $n-1$ lines will contain a single integer $p$ ($1 \\le p \\le n$), which is the number of the parent of this node. The nodes are listed in order, starting with node $2$, then node $3$, and so on. Node $1$ is skipped, since it is the root. It is guaranteed that the nodes form a single tree, with a single root at node $1$ and no cycles.\n\nEach of the next $m$ lines will contain single integer $r$ ($1 \\le r \\le n$). These are the numbers of the red nodes. No value of $r$ will be repeated.\n\n-----Output-----\nOutput $m+1$ lines, corresponding to the number of subsets satisfying the given criteria with a number of red nodes equal to $k=0..m$, in that order. Output this number modulo $10^9+7$.\n\n-----Examples-----\nSample Input 1:\n4 1\n1\n1\n1\n3\nSample Output 1:\n5\n4\n\nSample Input 2:\n4 4\n1\n1\n1\n1\n2\n3\n4\nSample Output 2:\n1\n4\n3\n1\n0\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Little penguin Polo adores strings. But most of all he adores strings of length n. One day he wanted to find a string that meets the following conditions:  The string consists of n lowercase English letters (that is, the string's length equals n), exactly k of these letters are distinct.  No two neighbouring letters of a string coincide; that is, if we represent a string as s = s_1s_2... s_{n}, then the following inequality holds, s_{i}   s_{i} + 1(1   i < n).  Among all strings that meet points 1 and 2, the required string is lexicographically smallest.  Help him find such string or state that such string doesn't exist. \n-----Input----- A single line contains two positive integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 26) \u2014 the string's length and the number of distinct letters. -----Output----- In a single line print the required string. If there isn't such string, print \"-1\" (without the quotes). -----Examples----- Input 7 4 Output ababacd Input 4 7 Output -1\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nLittle penguin Polo adores strings. But most of all he adores strings of length n.\n\nOne day he wanted to find a string that meets the following conditions:  The string consists of n lowercase English letters (that is, the string's length equals n), exactly k of these letters are distinct.  No two neighbouring letters of a string coincide; that is, if we represent a string as s = s_1s_2... s_{n}, then the following inequality holds, s_{i} \u2260 s_{i} + 1(1 \u2264 i < n).  Among all strings that meet points 1 and 2, the required string is lexicographically smallest. \n\nHelp him find such string or state that such string doesn't exist.\n\nString x = x_1x_2... x_{p} is lexicographically less than string y = y_1y_2... y_{q}, if either p < q and x_1 = y_1, x_2 = y_2, ... , x_{p} = y_{p}, or there is such number r (r < p, r < q), that x_1 = y_1, x_2 = y_2, ... , x_{r} = y_{r} and x_{r} + 1 < y_{r} + 1. The characters of the strings are compared by their ASCII codes.\n\n\n-----Input-----\n\nA single line contains two positive integers n and k (1 \u2264 n \u2264 10^6, 1 \u2264 k \u2264 26) \u2014 the string's length and the number of distinct letters.\n\n\n-----Output-----\n\nIn a single line print the required string. If there isn't such string, print \"-1\" (without the quotes).\n\n\n-----Examples-----\nInput\n7 4\n\nOutput\nababacd\n\nInput\n4 7\n\nOutput\n-1\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Sasha and Kolya decided to get drunk with Coke, again. This time they have k types of Coke. i-th type is characterised by its carbon dioxide concentration $\\frac{a_{i}}{1000}$. Today, on the party in honour of Sergiy of Vancouver they decided to prepare a glass of Coke with carbon dioxide concentration $\\frac{n}{1000}$. The drink should also be tasty, so the glass can contain only integer number of liters of each Coke type (some types can be not presented in the glass). Also, they want to minimize the total volume of Coke in the glass. Carbon dioxide concentration is defined as the volume of carbone dioxide in the Coke divided by the total volume of Coke. When you mix two Cokes, the volume of carbon dioxide sums up, and the total volume of Coke sums up as well. Help them, find the minimal natural number of liters needed to create a glass with carbon dioxide concentration $\\frac{n}{1000}$. Assume that the friends have unlimited amount of each Coke type.\n-----Input----- The first line contains two integers n, k (0 \u2264 n \u2264 1000, 1 \u2264 k \u2264 10^6)\u00a0\u2014 carbon dioxide concentration the friends want and the number of Coke types. The second line contains k integers a_1, a_2, ..., a_{k} (0 \u2264 a_{i} \u2264 1000)\u00a0\u2014 carbon dioxide concentration of each type of Coke. Some Coke types can have same concentration. -----Output----- Print the minimal natural number of liter needed to prepare a glass with carbon dioxide concentration $\\frac{n}{1000}$, or -1 if it is impossible. -----Examples----- Input 400 4 100 300 450 500 Output 2 Input 50 2 100 25 Output 3 -----Note----- In the first sample case, we can achieve concentration $\\frac{400}{1000}$ using one liter of Coke of types $\\frac{300}{1000}$ and $\\frac{500}{1000}$: $\\frac{300 + 500}{1000 + 1000} = \\frac{400}{1000}$. In the second case, we can achieve concentration $\\frac{50}{1000}$ using two liters of $\\frac{25}{1000}$ type and one liter of $\\frac{100}{1000}$ type: $\\frac{25 + 25 + 100}{3 \\cdot 1000} = \\frac{50}{1000}$.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nSasha and Kolya decided to get drunk with Coke, again. This time they have k types of Coke. i-th type is characterised by its carbon dioxide concentration $\\frac{a_{i}}{1000}$. Today, on the party in honour of Sergiy of Vancouver they decided to prepare a glass of Coke with carbon dioxide concentration $\\frac{n}{1000}$. The drink should also be tasty, so the glass can contain only integer number of liters of each Coke type (some types can be not presented in the glass). Also, they want to minimize the total volume of Coke in the glass.\n\nCarbon dioxide concentration is defined as the volume of carbone dioxide in the Coke divided by the total volume of Coke. When you mix two Cokes, the volume of carbon dioxide sums up, and the total volume of Coke sums up as well.\n\nHelp them, find the minimal natural number of liters needed to create a glass with carbon dioxide concentration $\\frac{n}{1000}$. Assume that the friends have unlimited amount of each Coke type.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (0 \u2264 n \u2264 1000, 1 \u2264 k \u2264 10^6)\u00a0\u2014 carbon dioxide concentration the friends want and the number of Coke types.\n\nThe second line contains k integers a_1, a_2, ..., a_{k} (0 \u2264 a_{i} \u2264 1000)\u00a0\u2014 carbon dioxide concentration of each type of Coke. Some Coke types can have same concentration.\n\n\n-----Output-----\n\nPrint the minimal natural number of liter needed to prepare a glass with carbon dioxide concentration $\\frac{n}{1000}$, or -1 if it is impossible.\n\n\n-----Examples-----\nInput\n400 4\n100 300 450 500\n\nOutput\n2\n\nInput\n50 2\n100 25\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample case, we can achieve concentration $\\frac{400}{1000}$ using one liter of Coke of types $\\frac{300}{1000}$ and $\\frac{500}{1000}$: $\\frac{300 + 500}{1000 + 1000} = \\frac{400}{1000}$.\n\nIn the second case, we can achieve concentration $\\frac{50}{1000}$ using two liters of $\\frac{25}{1000}$ type and one liter of $\\frac{100}{1000}$ type: $\\frac{25 + 25 + 100}{3 \\cdot 1000} = \\frac{50}{1000}$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are on an $n \\times m$ grid where each square on the grid has a digit on it. From a given square that has digit $k$ on it, a Move consists of jumping exactly $k$ squares in one of the four cardinal directions. A move cannot go beyond the edges of the grid; it does not wrap. What is the minimum number of moves required to get from the top-left corner to the bottom-right corner? \n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains two space-separated integers $n$ and $m$ ($1 \\le n, m \\le 500$), indicating the size of the grid. It is guaranteed that at least one of $n$ and $m$ is greater than $1$. The next $n$ lines will each consist of $m$ digits, with no spaces, indicating the $n \\times m$ grid. Each digit is between 0 and 9, inclusive. The top-left corner of the grid will be the square corresponding to the first character in the first line of the test case. The bottom-right corner of the grid will be the square corresponding to the last character in the last line of the test case. -----Output----- Output a single integer on a line by itself representing the minimum number of moves required to get from the top-left corner of the grid to the bottom-right. If it isn\u2019t possible, output -1. -----Examples----- Sample Input 1: 2 2 11 11 Sample Output 1: 2 Sample Input 2: 2 2 22 22 Sample Output 2: -1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are on an $n \\times m$ grid where each square on the grid has a digit on it. From a given square that has digit $k$ on it, a Move consists of jumping exactly $k$ squares in one of the four cardinal directions. A move cannot go beyond the edges of the grid; it does not wrap. What is the minimum number of moves required to get from the top-left corner to the bottom-right corner?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains two space-separated integers $n$ and $m$ ($1 \\le n, m \\le 500$), indicating the size of the grid. It is guaranteed that at least one of $n$ and $m$ is greater than $1$.\n\nThe next $n$ lines will each consist of $m$ digits, with no spaces, indicating the $n \\times m$ grid. Each digit is between 0 and 9, inclusive.\n\nThe top-left corner of the grid will be the square corresponding to the first character in the first line of the test case. The bottom-right corner of the grid will be the square corresponding to the last character in the last line of the test case.\n\n-----Output-----\nOutput a single integer on a line by itself representing the minimum number of moves required to get from the top-left corner of the grid to the bottom-right. If it isn\u2019t possible, output -1.\n\n-----Examples-----\nSample Input 1:\n2 2\n11\n11\nSample Output 1:\n2\n\nSample Input 2:\n2 2\n22\n22\nSample Output 2:\n-1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Simone is learning to trade crypto currencies. Right now, she is looking into a new currency called CryptoKattis. A CryptoKattis can be used to improve your Kattis ranklist score without having to solve problems. Simone, unlike most competitive programmers, is very perceptive of competition trends. She has lately noticed many coders talking about a new online judge called Doggo, and suspect that using the Kattis judge will soon fall out of fashion. This, of course, will cause the CryptoKattis to rapidly fall in value once demand fades. To take advantage of this, Simone has performed very careful market research. This has allowed her to estimate the price of a CryptoKattis in dollars during the next $N$ days. She intends to use this data to perform a short sell. This means she will at some day borrow $100$ CryptoKattis from a bank, immediately selling the currency. At some other day, she must purchase the same amount of CryptoKattis to repay her loan. For every day between (and including) these two days, she must pay $K$ dollars in interest. What is the maximum profit Simone can make by carefully choosing when to borrow and repay the $100$ CryptoKattis\n-----Input----- The first line of the input contains two integers $1 \\le N \\le 100000$ and $1 \\le K \\le 100$. $N$ is the number of days you know the CryptoKattis price of, and $K$ is the cost in dollars of borrowing CryptoKattis per day. The next line contains $N$ integers separated by spaces. These are the CryptoKattis prices during the $N$ days. Each CryptoKattis price is between $1$ and $100000$ dollars. -----Output----- Output a single decimal number; the maximum profit you can make performing a short sell. If you cannot make a profit no matter what short sell you make, output $0$. -----Examples----- Sample Input: 5 10 1000 980 960 940 10 Sample Output: 98950\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nSimone is learning to trade crypto currencies. Right now, she is looking into a new currency called CryptoKattis. A CryptoKattis can be used to improve your Kattis ranklist score without having to solve problems.\n\nSimone, unlike most competitive programmers, is very perceptive of competition trends. She has lately noticed many coders talking about a new online judge called Doggo, and suspect that using the Kattis judge will soon fall out of fashion. This, of course, will cause the CryptoKattis to rapidly fall in value once demand fades.\n\nTo take advantage of this, Simone has performed very careful market research. This has allowed her to estimate the price of a CryptoKattis in dollars during the next $N$ days. She intends to use this data to perform a short sell. This means she will at some day borrow $100$ CryptoKattis from a bank, immediately selling the currency. At some other day, she must purchase the same amount of CryptoKattis to repay her loan. For every day between (and including) these two days, she must pay $K$ dollars in interest. What is the maximum profit Simone can make by carefully choosing when to borrow and repay the $100$ CryptoKattis?\n\n-----Input-----\nThe first line of the input contains two integers $1 \\le N \\le 100000$ and $1 \\le K \\le 100$. $N$ is the number of days you know the CryptoKattis price of, and $K$ is the cost in dollars of borrowing CryptoKattis per day.\n\nThe next line contains $N$ integers separated by spaces. These are the CryptoKattis prices during the $N$ days. Each CryptoKattis price is between $1$ and $100000$ dollars.\n\n-----Output-----\nOutput a single decimal number; the maximum profit you can make performing a short sell. If you cannot make a profit no matter what short sell you make, output $0$.\n\n-----Examples-----\nSample Input:\n5 10\n1000 980 960 940 10\nSample Output:\n98950\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You have $n$ coins, each of the same value of $1$. Distribute them into packets such that any amount $x$ ($1 \\leq x \\leq n$) can be formed using some (possibly one or all) number of these packets. Each packet may only be used entirely or not used at all. No packet may be used more than once in the formation of the single $x$, however it may be reused for the formation of other $x$'s. Find the minimum number of packets in such a distribution.\n-----Input----- The only line contains a single integer $n$ ($1 \\leq n \\leq 10^9$)\u00a0\u2014 the number of coins you have. -----Output----- Output a single integer\u00a0\u2014 the minimum possible number of packets, satisfying the condition above. -----Examples----- Input 6 Output 3 Input 2 Output 2 -----Note----- In the first example, three packets with $1$, $2$ and $3$ coins can be made to get any amount $x$ ($1\\leq x\\leq 6$).  To get $1$ use the packet with $1$ coin.  To get $2$ use the packet with $2$ coins.  To get $3$ use the packet with $3$ coins.  To get $4$ use packets with $1$ and $3$ coins.  To get $5$ use packets with $2$ and $3$ coins  To get $6$ use all packets.  In the second example, two packets with $1$ and $1$ coins can be made to get any amount $x$ ($1\\leq x\\leq 2$).\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou have $n$ coins, each of the same value of $1$.\n\nDistribute them into packets such that any amount $x$ ($1 \\leq x \\leq n$) can be formed using some (possibly one or all) number of these packets.\n\nEach packet may only be used entirely or not used at all. No packet may be used more than once in the formation of the single $x$, however it may be reused for the formation of other $x$'s.\n\nFind the minimum number of packets in such a distribution.\n\n\n-----Input-----\n\nThe only line contains a single integer $n$ ($1 \\leq n \\leq 10^9$)\u00a0\u2014 the number of coins you have.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum possible number of packets, satisfying the condition above.\n\n\n-----Examples-----\nInput\n6\n\nOutput\n3\nInput\n2\n\nOutput\n2\n\n\n-----Note-----\n\nIn the first example, three packets with $1$, $2$ and $3$ coins can be made to get any amount $x$ ($1\\leq x\\leq 6$).  To get $1$ use the packet with $1$ coin.  To get $2$ use the packet with $2$ coins.  To get $3$ use the packet with $3$ coins.  To get $4$ use packets with $1$ and $3$ coins.  To get $5$ use packets with $2$ and $3$ coins  To get $6$ use all packets. \n\nIn the second example, two packets with $1$ and $1$ coins can be made to get any amount $x$ ($1\\leq x\\leq 2$).\n\"\"\"\ndef code():"
}