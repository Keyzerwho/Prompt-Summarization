{
    "0": "Python 3\n\"\"\"\nCreate a function that returns a sorted list of (key, value) tuples. The list must be sorted by the value from largest to smallest.\n\nExamples:\nInput:\nsort_dict({3:1, 2:2, 1:3})\nOutput:\n[(1,3), (2,2), (3,1)]\n\nInput:\nsort_dict({1:2, 2:4, 3:6})\nOutput:\n[(3,6), (2,4), (1,2)]\n\"\"\"\ndef sort_dict(d):",
    "1": "Python 3\n\"\"\"\nPython dictionaries are inherently unsorted. So what do you do if you need to sort the contents of a dictionary?\n\nCreate a function that returns a sorted list of `(key, value)` tuples (Javascript: arrays of 2 items).\n\nThe list must be sorted by the `value` and be sorted **largest to smallest**.\n\n## Examples\n\n```python\nsort_dict({3:1, 2:2, 1:3}) == [(1,3), (2,2), (3,1)]\nsort_dict({1:2, 2:4, 3:6}) == [(3,6), (2,4), (1,2)]\n```\n\"\"\"\ndef sort_dict(d):",
    "2": "Python 3\n\"\"\"\n=====Problem Statement=====\nYou are given a string\n\nA valid string must follow the conditions below:\n\nIt must contain at least 2 uppercase English alphabet characters.\nIt must contain at least 3 digits 0 to 9.\nIt should only contain alphanumeric characters a-z, A-Z & 0-9.\nNo character should repeat.\nThere must be exactly 10 characters in a valid string.\n\n\n\n=====Input Format=====\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains a string.\n\n=====Output Format=====\nFor each test case, print 'Valid' if the string is valid. Otherwise, print 'Invalid', on separate lines. Do not print the quotation marks.\n\n\"\"\"\n# Enter your code here. Read input from STDIN. Print output to STDOUT",
    "3": "Python 3\n\"\"\"\n=====Problem Statement=====\nABCXYZ company has up to 100 employees.\nThe company decides to create a unique identification number (UID) for each of its employees.\nThe company has assigned you the task of validating all the randomly generated UIDs.\n\nA valid UID must follow the rules below:\n\nIt must contain at least 2 uppercase English alphabet characters.\nIt must contain at least 3 digits (0-9).\nIt should only contain alphanumeric characters (a-z, A-Z & 0-9).\nNo character should repeat.\nThere must be exactly 10 characters in a valid UID.\n\n\n\n=====Input Format=====\nThe first line contains an integer T, the number of test cases.\nThe next T lines contains an employee's UID.\n\n=====Output Format=====\nFor each test case, print 'Valid' if the UID is valid. Otherwise, print 'Invalid', on separate lines. Do not print the quotation marks.\n\n\"\"\"\n# Enter your code here. Read input from STDIN. Print output to STDOUT",
    "4": "Python 3\n\"\"\"\nFind the number of ways in which a stack of circular disk can be arranged in such a way that radius of\ndisk on the top of the stack should not exceed the radius of the largest disk in the stack by more than 1. \nThe bottom most disk should have its radius as 1.\n\n\n\nInput\nFirst line of the input contains T (T <= 1000) denoting the number of test cases.\nT lines follow each containing a single integer N (1 <= N <= 1000) denoting the size of the required stack.\n\nOutput\nFor each case the output should be a single integer representing the number of ways a stack of size N can be created. As the answer can be large print it modulo 1000000007.\n\nExample\n\nInput\n2\n1\n2\n\nOutput\n1\n2\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nChef is good at making pancakes. Generally he gets requests to serve N pancakes at once.\nHe serves them in the form of a stack.\nA pancake can be treated as a circular disk with some radius.\nChef needs to take care that when he places a pancake on the top of the stack the radius of the pancake should not exceed the radius of the largest pancake in the stack by more than 1. \nAdditionally all radii should be positive integers, and the bottom most pancake should have its radius as 1.\nChef wants you to find out in how many ways can he create a stack containing N pancakes.\nInput\nFirst line of the input contains T (T <= 1000) denoting the number of test cases.\nT lines follow each containing a single integer N (1 <= N <= 1000) denoting the size of the required stack.\nOutput\nFor each case the output should be a single integer representing the number of ways a stack of size N can be created. As the answer can be large print it modulo 1000000007.\nExample\nInput\n2\n1\n2\n\nOutput\n1\n2\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou have unweighted tree of $n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\nFor every two different leaves $v_{1}$ and $v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between $v_{1}$ and $v_{2}$ has to be equal to $0$. \n\nYou can put very large positive integers like $10^{(10^{10})}$.\n\nLet $f$ be the number of distinct weights in assignment.\n\nWhat are the minimum and the maximum possible values of $f$ for the given tree? Find and print both.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the number of vertices in given tree.\n\nThe $i$-th of the next $n-1$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. It is guaranteed that given graph forms tree of $n$ vertices.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum and maximum possible value of $f$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\n\n-----Examples-----\nInput\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\nOutput\n1 4\n\nInput\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\nOutput\n3 3\n\nInput\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\nOutput\n1 6\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou have unweighted tree of $n$ vertices. You have to assign a positive weight to each edge so that the following condition would hold:\n\n  For every two different leaves $v_{1}$ and $v_{2}$ of this tree, bitwise XOR of weights of all edges on the simple path between $v_{1}$ and $v_{2}$ has to be equal to $0$. \n\nNote that you can put very large positive integers (like $10^{(10^{10})}$).\n\nIt's guaranteed that such assignment always exists under given constraints. Now let's define $f$ as the number of distinct weights in assignment.\n\n [Image] In this example, assignment is valid, because bitwise XOR of all edge weights between every pair of leaves is $0$. $f$ value is $2$ here, because there are $2$ distinct edge weights($4$ and $5$).\n\n[Image] In this example, assignment is invalid, because bitwise XOR of all edge weights between vertex $1$ and vertex $6$ ($3, 4, 5, 4$) is not $0$. \n\nWhat are the minimum and the maximum possible values of $f$ for the given tree? Find and print both.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($3 \\le n \\le 10^{5}$)\u00a0\u2014 the number of vertices in given tree.\n\nThe $i$-th of the next $n-1$ lines contains two integers $a_{i}$ and $b_{i}$ ($1 \\le a_{i} \\lt b_{i} \\le n$)\u00a0\u2014 it means there is an edge between $a_{i}$ and $b_{i}$. It is guaranteed that given graph forms tree of $n$ vertices.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum and maximum possible value of $f$ can be made from valid assignment of given tree. Note that it's always possible to make an assignment under given constraints.\n\n\n-----Examples-----\nInput\n6\n1 3\n2 3\n3 4\n4 5\n5 6\n\nOutput\n1 4\n\nInput\n6\n1 3\n2 3\n3 4\n4 5\n4 6\n\nOutput\n3 3\n\nInput\n7\n1 2\n2 7\n3 4\n4 7\n5 6\n6 7\n\nOutput\n1 6\n\n\n\n-----Note-----\n\nIn the first example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.  [Image] \n\nIn the second example, possible assignments for each minimum and maximum are described in picture below. The $f$ value of valid assignment of this tree is always $3$.  [Image] \n\nIn the third example, possible assignments for each minimum and maximum are described in picture below. Of course, there are multiple possible assignments for each minimum and maximum.  [Image]\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nOnly N items can be chosen randomly from a total of S items.\nYou need M item including your one personal item. If there are atleast K item which are required and one your own item. What is the probability that you will purchase your K item with your one personal item.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nAlice's school is planning to take some students from her class on a field trip. Alice is really excited about it. There are a total of S students in her class. But due to budget constraints, the school is planning to take only N students for the trip. These students will be picked randomly. And each student has equal chance of being picked.\nAlice's friend circle has M students including her. Though she is excited about the field trip, she will enjoy it only if there are atleast K of her friends with her on the trip. She is wondering what are the chances of that happening. She needs your help. Tell her the probability that she will enjoy given that she goes on the trip.\n\n-----Input:-----\nFirst line of input contains a single integer T, the number of test cases.\n\nEach test starts with a single line having 4 space separated integers, S, N, M and K.\n\n-----Output:-----\nFor each test case, output a line containing the required probability. The answer will be accepted if the relative error is not more than 10-6.\n\n-----Constraints:-----\n1 \u2264 T \u2264 100\n1 \u2264 S \u2264 1000\n1 \u2264 N \u2264 S\n1 \u2264 M \u2264 S\n0 \u2264 K < M\n\n-----Example:-----Input:\n3\n10 10 5 3\n10 4 6 4\n3 2 2 1\n\nOutput:\n1.000000\n0.000000\n0.500000\n\n-----Explanation:-----Case #1:\nEvery student will be taken to the trip. So all her 4 friends will accompany her to the trip no matter what. \nCase #2:\nAlice wants 4 out of her 5 friends to come along with her which isn't possible because the school is willing to pick only 4 students for the trip.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nyou are given an array of numbers. Find the minimum number of indexes in the array need to be reordered such that all the elements in array are in non-decreasing order \n\nExample 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 we have 4 vs 1 so we have to move this element.\nOn index 4 we have 1 vs 3 so we have to move this element.\nOn index 5 we have 3 vs 4 so we have to move this element.\n\nExample 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\n\nExample 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n\"\"\"\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:",
    "11": "Python 3\n\"\"\"\nStudents are asked to stand in non-decreasing order of heights for an annual photo.\nReturn the minimum number of students that must move in order for all students to be standing in non-decreasing order of height.\nNotice that when a group of students is selected they can reorder in any possible way between themselves and the non selected students\u00a0remain on their seats.\n\u00a0\nExample 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation: \nCurrent array : [1,1,4,2,1,3]\nTarget array  : [1,1,1,2,3,4]\nOn index 2 (0-based) we have 4 vs 1 so we have to move this student.\nOn index 4 (0-based) we have 1 vs 3 so we have to move this student.\nOn index 5 (0-based) we have 3 vs 4 so we have to move this student.\n\nExample 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\n\nExample 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\n\n\u00a0\nConstraints:\n\n1 <= heights.length <= 100\n1 <= heights[i] <= 100\n\n\"\"\"\nclass Solution:\n    def heightChecker(self, heights: List[int]) -> int:",
    "12": "Python 3\n\"\"\"\nYou are given n students with their name, parent's phonenumber and marks of a class.Find all the students who scored lower than average marks for the class. \n\n-----Input:-----\n- First line contains $T$ no. of test cases\n- for every test case, first line contains an integer $N$, no. of students of his class \n- Next $N$ lines contain $X$, $P$ , and $M$ separated by space\n\n-----Output:-----\nFor every test case, find details of the students who scored below average, then print $X, P, M$  separated by space on a new line as per the increasing order of their marks. In case there are multiple students with the same marks, print them as per the order of their occurrence in the input\n\n\n\n-----Sample Input:-----\n2  \n3\nRahul 1345964789 47\nRupendra 1457856987 58\nPriya 1478569820 45\n2\nTanuja 4310779415 97\nAkash 3689781245 43\n\n-----Sample Output:-----\nPriya 1478569820 45\nRahul 1345964789 47\nAkash 3689781245 43\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nMr. Das is a teacher teaching for several years in a school. He is not computer savvy. Due to lockdown, now he has to take classes online. Recently he took an online exam for students of different classes. Now, he will call parents of all the students who scored lower than average marks for the class. He has requested you to give the name $X$, parent's phone number $P$, and marks obtained $M$ to him.\n\n-----Input:-----\n- First line contains $T$ no. of test cases\n- for every test case, first line contains an integer $N$, no. of students of his class \n- Next $N$ lines contain $X$, $P$ , and $M$ separated by space\n\n-----Output:-----\nFor every test case, find details of the students who scored below average, then print $X, P, M$  separated by space on a new line as per the increasing order of their marks. In case there are multiple students with the same marks, print them as per the order of their occurrence in the input\n\n-----Constraints-----\n- $1 \\leq T \\leq 20$\n- X contains characters between a-z and A-Z  with a maximum length of 20\n- $1 \\leq N \\leq 100$\n- P is 10 digits\n- $0 \\leq M \\leq 100$\n\n-----Sample Input:-----\n2  \n3\nRahul 1345964789 47\nRupendra 1457856987 58\nPriya 1478569820 45\n2\nTanuja 4310779415 97\nAkash 3689781245 43\n\n-----Sample Output:-----\nPriya 1478569820 45\nRahul 1345964789 47\nAkash 3689781245 43\n\n-----EXPLANATION:-----\nIn #1, Priya and Rahul's number was lower than average.\nIn #2, Akash's number was lower than average\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 5000$) \u2014 the number of voters.\n\nThe next $n$ lines contains the description of voters. $i$-th line contains two integers $m_i$ and $p_i$ ($1 \\le p_i \\le 10^9, 0 \\le m_i < n$).\n\nIt is guaranteed that the sum of all $n$ over all test cases does not exceed $5000$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Example-----\nInput\n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput\n8\n0\n7\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe only difference between easy and hard versions is constraints.\n\nNow elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.\n\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 5000$) \u2014 the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 5000$) \u2014 the number of voters.\n\nThe next $n$ lines contains the description of voters. $i$-th line contains two integers $m_i$ and $p_i$ ($1 \\le p_i \\le 10^9, 0 \\le m_i < n$).\n\nIt is guaranteed that the sum of all $n$ over all test cases does not exceed $5000$.\n\n\n-----Output-----\n\nFor each test case print one integer \u2014 the minimum number of coins you have to spend so that everyone votes for you.\n\n\n-----Example-----\nInput\n3\n3\n1 5\n2 10\n2 8\n7\n0 1\n3 1\n1 1\n6 1\n1 1\n4 1\n4 1\n6\n2 6\n2 3\n2 8\n2 7\n4 4\n5 5\n\nOutput\n8\n0\n7\n\n\n\n-----Note-----\n\nIn the first test case you have to buy vote of the third voter. Then the set of people voting for you will change as follows: ${3} \\rightarrow {1, 3} \\rightarrow {1, 2, 3}$.\n\nIn the second example you don't need to buy votes. The set of people voting for you will change as follows: ${1} \\rightarrow {1, 3, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 5, 6, 7} \\rightarrow {1, 2, 3, 4, 5, 6, 7}$.\n\nIn the third test case you have to buy votes of the second and the fifth voters. Then the set of people voting for you will change as follows: ${2, 5} \\rightarrow {1, 2, 3, 4, 5} \\rightarrow {1, 2, 3, 4, 5, 6}$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given a rectangular board of dimensions R \u00d7 C, filled with numbers. Each integer i from 1 through N is written twice, at the coordinates (x_{i,1},y_{i,1}) and (x_{i,2},y_{i,2}).\nThe objective is to draw a curve connecting the pair of points where the same integer is written, for every integer from 1 through N.\nCurves may not go outside the board or cross each other.\nDetermine whether this is possible.\n\n-----Constraints-----\n - 1 \u2264 R,C \u2264 10^8\n - 1 \u2264 N \u2264 10^5\n - 0 \u2264 x_{i,1},x_{i,2} \u2264 R(1 \u2264 i \u2264 N)\n - 0 \u2264 y_{i,1},y_{i,2} \u2264 C(1 \u2264 i \u2264 N)\n - All given points are distinct.\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nR C N\nx_{1,1} y_{1,1} x_{1,2} y_{1,2}\n:\nx_{N,1} y_{N,1} x_{N,2} y_{N,2}\n\n-----Output-----\nPrint YES if the objective is achievable; print NO otherwise.\n\n-----Sample Input-----\n4 2 3\n0 1 3 1\n1 1 4 1\n2 0 2 2\n\n-----Sample Output-----\nYES\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nSnuke is playing a puzzle game.\nIn this game, you are given a rectangular board of dimensions R \u00d7 C, filled with numbers. Each integer i from 1 through N is written twice, at the coordinates (x_{i,1},y_{i,1}) and (x_{i,2},y_{i,2}).\nThe objective is to draw a curve connecting the pair of points where the same integer is written, for every integer from 1 through N.\nHere, the curves may not go outside the board or cross each other.\nDetermine whether this is possible.\n\n-----Constraints-----\n - 1 \u2264 R,C \u2264 10^8\n - 1 \u2264 N \u2264 10^5\n - 0 \u2264 x_{i,1},x_{i,2} \u2264 R(1 \u2264 i \u2264 N)\n - 0 \u2264 y_{i,1},y_{i,2} \u2264 C(1 \u2264 i \u2264 N)\n - All given points are distinct.\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nR C N\nx_{1,1} y_{1,1} x_{1,2} y_{1,2}\n:\nx_{N,1} y_{N,1} x_{N,2} y_{N,2}\n\n-----Output-----\nPrint YES if the objective is achievable; print NO otherwise.\n\n-----Sample Input-----\n4 2 3\n0 1 3 1\n1 1 4 1\n2 0 2 2\n\n-----Sample Output-----\nYES\n\n\nThe above figure shows a possible solution.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven a string, determine if given string is minor or major or not a chord.\n\n_____________________________________________________________\nRules:\n\n1. Basic chord have three elements.\n\n2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4.\n\n3. Chord is major when interval between first and second element equals 4 and between second and third -> 3.\n\n4. In minor/major chord interval between first and third element equals... 7.\n\n_______________________________________________________________\n\nnotes = \n['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\nInput:\nString of notes separated by whitespace, e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'.\n\"\"\"\ndef minor_or_major(chord):",
    "19": "Python 3\n\"\"\"\nCheck if given chord is minor or major.\n\n_____________________________________________________________\nRules:\n\n1. Basic minor/major chord have three elements.\n\n2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4.\n\n3. Chord is major when interval between first and second element equals 4 and between second and third -> 3.\n\n4. In minor/major chord interval between first and third element equals... 7.\n\n_______________________________________________________________\nThere is a preloaded list of the 12 notes of a chromatic scale built on C. This means that there are (almost) all allowed note' s names in music.\n\nnotes = \n['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B']\n\nNote that e. g. 'C#' - 'C' = 1, 'C' - 'C#' = 1, 'Db' - 'C' = 1 and 'B' - 'C' = 1. \n\nInput:\nString of notes separated by whitespace, e. g. 'A C# E'\n\nOutput:\nString message: 'Minor', 'Major' or 'Not a chord'.\n\"\"\"\ndef minor_or_major(chord):"
}