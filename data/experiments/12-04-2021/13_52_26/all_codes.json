{
    "0": "\n        if not head:\n            return None\n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n\n        return head",
    "1": "\n        if not head:\n            return None\n        dummy = ListNode(0)\n        dummy.next = head\n        prev, curr = dummy, head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                val = curr.val\n                while curr and val == curr.val:\n                    curr = curr.next  # skip duplicated nodes\n\n            else:  # move to next node (or prev if no duplicates)\n                prev.next = curr  # connect prev to current node (or next if no duplicates)\n                prev = prev.next  # move to next node\n\n        return dummy.next",
    "2": "\n    return [[x, n - x] for x in range(1, n // 2 + 1) if n % x == 0]\n\n# Test.describe(\"Basic tests\")\n# Test.assert_equals(combos(15), [[1,14],[2,13],[3,12],[4,11],[5,10],[6,9],[7,8]])\n# Test.assert_equals(combos(25), [[1,24],[2,23],[3,22],[4,21],[5,20],[6,19], [7 ,18], [8 ,17], [9 ,16], [10 ,15], [11 ,14], [12 ,13], [13 ,12], [14 ,11], [15 ,10], [16 ,9 ],[17 ,8 ],[18 ,7 ],[19 ,6 ],[20 ,5 ],[21 ,4 ],[22 ,3 ],[23 ,2 ],[24 ,1 ]])\n# Test.assert_equals(combos(50), [[1,49],[2,48],[3,47],[4,46],[5,45]])\n# Test.assert_equals(combos(51), [[1,-50]])",
    "3": "\n    return [[i, n - i] for i in range(1, n // 2 + 1)]\n\nprint(combos(10))",
    "4": "\n    return sum(x for x in arr if '3' in str(x) and x % 2 == 1)",
    "5": "\n    return sum(x for x in arr if '3' in str(x) and x % 2 != 0)",
    "6": "\n    # your code here\n    return 0",
    "7": "\n    if len(urinals) > 20:\n        return -1\n    urinals = list(urinals)\n    count = 0\n    for i in range(len(urinals)):\n        if urinals[i] == '0':\n            count += 1\n        else:\n            count = 0\n\n        if count == 3:\n            return 3\n\n    return count",
    "8": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        arr.sort()\n        print(arr[0] + arr[1])",
    "9": "\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        arr = list(map(int, input().split()))\n        arr.sort()\n        print(arr[0] + arr[1])",
    "10": "\n    n, w = [int(x) for x in input().split()]\n    arr = []\n    for i in range(n):\n        l = int(input())\n        a = [int(x) for x in input().split()]\n        arr.append([l, a])\n\n    # print(arr)\n\n    dp = [[0] * w for _ in range(n)]\n\n    # print(dp)\n\n    for i in range(n):\n        l, a = arr[i]\n        if i == 0:\n            dp[i][0:l] = a[0:l]\n            continue\n\n        for j in range(w):\n            if j < l:  # add the first element of the array to the column j and update the dp table. \n                dp[i][j] = max([dp[i-1][j], sum([a[j], dp[i-1][j-1]])])  # compare with previous row's last element and current row's first element. \n\n            elif j >= l and j < w - 1:  # add the last element of the array to the column j and update the dp table. \n                dp[i][j] = max([dp[i-1][j], sum([a[l-1], dp[i-1][j-l]])])   # compare with previous row's last element and current row's last element. \n\n            else:   # add zero to column j since it is out of window. \n                dp[i][j] = max([dp[i-1][j], 0])   # compare with previous row's last element and current row's zero. \n\n    print(*dp[n - 1])",
    "11": "\n    n, w = [int(i) for i in input().split()]\n    arr = []\n    for i in range(n):\n        l = int(input())\n        a = [int(i) for i in input().split()]\n        arr.append([l, a])\n\n    dp = [[0] * w for _ in range(n)]\n\n    # dp[i][j] is the maximum sum of the integers in column j from row i to the end of the window.\n\n    # Base case: dp[0][j] is the maximum sum of the integers in column j from row 0 to row 0.\n    for j in range(w):\n        dp[0][j] = sum([arr[0][1][k] for k in range(arr[0][0]) if k == j or k == j - 1 or k == j + 1])\n\n    # Recurrence relation: dp[i][j] is equal to max{dp[i-1][k]} + sum{arr[i][1]} where k is equal to j - 1, j or j + 1.\n    for i in range(1, n):\n        l, a = arr[i]\n        for j in range(w):  # Column index.\n            s = 0  # Sum of elements of array i that are placed horizontally and lie within the window.\n\n            if (j - 1 >= 0 and (j - 1) < l) and (j - 1 == 0 or (j - 1) == arr[i-1][0]-1):  # Check if element at index j-1 lies within array i and lies on the left edge of array i. If so, add it to s.\n                s += a[j-1]\n\n            if (j >= 0 and (j) < l) and ((j) == 0 or (j) == arr[i-1][0]-1):  # Check if element at index j lies within array i and lies on the right edge of array i. If so, add it to s.\n                s += a[j]\n\n            if (j - 2 >= 0 and (j - 2) < l):  # Check if element at index j-2 lies within array i. If so, add it to s.\n                s += a[j-2]\n\n            if (l > 3 and ((l + j - 2) % 2 != 0)) or ((l > 3 and ((l + j - 2)) % 2 != 0)) or ((l > 3 and ((l + j - 2)) % 2 != 0)) :  # Check if there are three consecutive elements that can be added together without exceeding bounds of array i. If so, add them together to s. This condition is true when there are three consecutive elements that can be added together without exceeding bounds of array i because when we slide an array horizontally by one cell each time we remove one element from its left edge and add one element from its right edge such that its length remains unchanged but its right edge moves forward by one cell each time we slide it horizontally by one cell each time we remove one element from its left edge and add one element from its right edge such that its length remains unchanged but its right edge moves forward by one cell each time we slide it horizontally by one cell each time we remove one element from its left edge and add one element from its right edge suchthatitslengthremainsunchangedbutitsrightedgemovesforwardbyonecelleachtimewemoveithorizontallybyonecellandthentheleftedgemovesbackwardbyonecelleachtimewemoveithorizontallybyonecellandthentheleftedgemovesbackwardbyonecelleachtimewemoveithorizontallybyonecellandthentheleftedgemovesbackwardbyonecelleachtimewemoveithorizontallybyonecellandthentheleftedgemovesbackwardbyonecelleachtimewemoveithorizontallybyonecellandthentheleftedgemovesbackwardbyonecelleachtimewemoveithorizontallybyonecelleachtimeiwemoveithorizontallybyonecelleachtimeiwemoveithorizontallybyonecelleachtimeiwemoveithorizontallybtyoucantaddthreeelementswithoutexceedingboundsofarrayiatindexijiftherearethreeelementsthatcanbeaddedtogethroughoutarrayiatindexijwithoutexceedingboundsofarrayiatindexijiftherearethreeelementsthatcanbeaddedtogethroughoutarrayiatindexijwithoutexceedingboundsofarrayiatindexijiftherearethreeelementsthatcanbeaddedtogeth",
    "12": "\n    max_votes = max(votes)\n    if k == 0:\n        return int(votes.count(max_votes) == 1)\n    return sum([1 for vote in votes if vote + k > max_votes])",
    "13": "\n    if k == 0:\n        return 1 if votes.count(max(votes)) == 1 else 0\n    return sum([1 for v in votes if v + k > max(votes)])",
    "14": "\n    t = int(input())\n    for i in range(t):\n        x, r, a, b = map(int, input().split())\n        if (a-b)%(2*r) == 0:\n            print((a-b)//(2*r))\n        else:\n            print((a-b)//(2*r)+1)",
    "15": "\n    ",
    "16": "\n    T = int(input())\n    for i in range(T):\n        s = input()\n        cnt = 0\n        for j in range(len(s)):\n            if s[j] == 'M':\n                cnt += 3\n            else:\n                cnt += 4\n\n            if j >= 5 and s[j-5] == 'M' and s[j-4] == 'L' and s[j-3] == 'L' and s[j-2] == 'M' and s[j-1] == 'L' and s[j] == 'M':\n                cnt -= 3\n\n        print(cnt)",
    "17": "\n    T = int(input())\n    for i in range(T):\n        stamps = 0\n        total = 0\n        for j in input():\n            if j == 'M':\n                total += 3\n            else:\n                total += 4\n\n            stamps += 1\n\n            if stamps == 6:\n                total -= 6\n                stamps = 0\n\n        print(total)",
    "18": "\n    n, m = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m > n:\n        print(-1)\n        return\n\n    p = [0] * m\n    for i in range(m):\n        if l[i] > n:\n            print(-1)\n            return\n\n        if i == 0:\n            p[i] = 1 + (n - l[i]) // 2\n\n        else:\n            if p[i - 1] + l[i - 1] < p[i]:\n                print(-1)\n                return\n\n            else:\n                p[i] = p[i - 1] + l[i - 1]\n\n    print(*p)",
    "19": "\n    n, m = map(int, input().split())\n    l = list(map(int, input().split()))\n    if m > n:\n        print(\"-1\")\n        return\n\n    p = [0] * m\n    for i in range(m):\n        p[i] = 1 + (n - l[i]) // (m - i)\n\n    for i in range(m):\n        if p[i] < 1 or p[i] > n - l[i]:\n            print(\"-1\")\n            return\n\n    print(*p)"
}