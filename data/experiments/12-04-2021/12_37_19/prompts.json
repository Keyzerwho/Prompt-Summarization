{
    "0": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array.\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$, what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array (after the removal, the remaining parts are concatenated).\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$ (making them impossible to remove), what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\n-----Note-----\n\nExplanation of the first query:\n\nAfter making first $x = 3$ and last $y = 1$ elements impossible to remove, $a$ becomes $[\\times, \\times, \\times, 9, 5, 4, 6, 5, 7, 8, 3, 11, \\times]$ (we represent $14$ as $\\times$ for clarity).\n\nHere is a strategy that removes $5$ elements (the element removed is colored in red):  $[\\times, \\times, \\times, 9, \\color{red}{5}, 4, 6, 5, 7, 8, 3, 11, \\times]$  $[\\times, \\times, \\times, 9, 4, 6, 5, 7, 8, 3, \\color{red}{11}, \\times]$  $[\\times, \\times, \\times, 9, 4, \\color{red}{6}, 5, 7, 8, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 7, \\color{red}{8}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, \\color{red}{7}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 3, \\times]$ (final state) \n\nIt is impossible to remove more than $5$ elements, hence the weight is $5$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou have n distinct integers: p_1, p_2, ..., p_{n}. You want to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nDivide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\n\nLittle X has n distinct integers: p_1, p_2, ..., p_{n}. He wants to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nHelp Little X divide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIt's OK if all the numbers are in the same set, and the other one is empty.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nA tree having n nodes, numbered from 1 to n. Each node i has an initial value init_{i}, which is either 0 or 1. The root of the tree is node 1.\n\nOne can perform several operations on the tree and available type of operation is to pick a node x.\nRight after picking node x, the value of node x flips, the values of sons of x remain the same, the values of sons of sons of x flips, the values of sons of sons of sons of x remain the same and so on.\n\nThe goal is to get each node i to have value goal_{i}, which can also be only 0 or 1 by using minimum number of operations. \n\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; u_{i} \u2260 v_{i}) meaning there is an edge between nodes u_{i} and v_{i}. \n\nThe next line contains n integer numbers, the i-th of them corresponds to init_{i} (init_{i} is either 0 or 1). The following line also contains n integer numbers, the i-th number corresponds to goal_{i} (goal_{i} is either 0 or 1).\n\n\n-----Output-----\n\nIn the first line output an integer number cnt, representing the minimal number of operations you perform. Each of the next cnt lines should contain an integer x_{i}, representing that you pick a node x_{i}.\n\n\n-----Examples-----\nInput\n10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n\nOutput\n2\n4\n7\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nIahub is very proud of his recent discovery, propagating trees. Right now, he invented a new tree, called xor-tree. After this new revolutionary discovery, he invented a game for kids which uses xor-trees.\n\nThe game is played on a tree having n nodes, numbered from 1 to n. Each node i has an initial value init_{i}, which is either 0 or 1. The root of the tree is node 1.\n\nOne can perform several (possibly, zero) operations on the tree during the game. The only available type of operation is to pick a node x. Right after someone has picked node x, the value of node x flips, the values of sons of x remain the same, the values of sons of sons of x flips, the values of sons of sons of sons of x remain the same and so on.\n\nThe goal of the game is to get each node i to have value goal_{i}, which can also be only 0 or 1. You need to reach the goal of the game by using minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; u_{i} \u2260 v_{i}) meaning there is an edge between nodes u_{i} and v_{i}. \n\nThe next line contains n integer numbers, the i-th of them corresponds to init_{i} (init_{i} is either 0 or 1). The following line also contains n integer numbers, the i-th number corresponds to goal_{i} (goal_{i} is either 0 or 1).\n\n\n-----Output-----\n\nIn the first line output an integer number cnt, representing the minimal number of operations you perform. Each of the next cnt lines should contain an integer x_{i}, representing that you pick a node x_{i}.\n\n\n-----Examples-----\nInput\n10\n2 1\n3 1\n4 2\n5 1\n6 2\n7 5\n8 6\n9 8\n10 5\n1 0 1 1 0 1 0 1 0 1\n1 0 1 0 0 1 1 1 0 1\n\nOutput\n2\n4\n7\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYour need to create a function `combos` that accepts `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\nFor an optimal solution, the following operation should complete within 6000ms.\n\"\"\"\ndef combos(n):",
    "7": "Python 3\n\"\"\"\nJon and Joe have received equal marks in the school examination. \nBut, they won't reconcile in peace when equated with each other. \nTo prove his might, Jon challenges Joe to write a program to find all possible number combos that sum to a given number. \nWhile unsure whether he would be able to accomplish this feat or not, Joe accpets the challenge. \nBeing Joe's friend, your task is to help him out.\n\n# Task\n\nCreate a function `combos`, that accepts a single positive integer `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\n# Notes\n1. Sub-arrays may or may not have their elements sorted.\n2. The order of sub-arrays inside the main array does not matter.\n3. For an optimal solution, the following operation should complete within 6000ms.\n\n# Sample\n\"\"\"\ndef combos(n):",
    "8": "Python 3\n\"\"\"\nYou are given two numbers X and Y.\n\nIn one step, you can either double the value of X, or decrement X by 1.\n\nReturn the minimum number of steps required before the value of X equals Y.\n\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "9": "Python 3\n\"\"\"\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "10": "Python 3\n\"\"\"\nYou are given $n$ points on the plane. The polygon formed from all the $n$ points is strictly convex, and there are no three collinear points. The points are numbered from $1$ to $n$, in clockwise order.\n\nFind the maximum possible perimeter for each possible number of points (i.e. $3$ to $n$).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 3\\cdot 10^5$)\u00a0\u2014 the number of points. \n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^8 \\leq x_i, y_i \\leq 10^8$)\u00a0\u2014 the coordinates of point $p_i$.\n\nThe set of points is guaranteed to be convex, all points are distinct, the points are ordered in clockwise order, and there will be no three collinear points.\n\n\n-----Output-----\n\nFor each $i$ ($3\\leq i\\leq n$), output $f(i)$.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 3\n3 0\n1 3\n\nOutput\n12 14 \nInput\n3\n0 0\n0 2\n2 0\n\nOutput\n8 \n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given $n$ points on the plane. The polygon formed from all the $n$ points is strictly convex, that is, the polygon is convex, and there are no three collinear points (i.e. lying in the same straight line). The points are numbered from $1$ to $n$, in clockwise order.\n\nWe define the distance between two points $p_1 = (x_1, y_1)$ and $p_2 = (x_2, y_2)$ as their Manhattan distance: $$d(p_1, p_2) = |x_1 - x_2| + |y_1 - y_2|.$$\n\nFurthermore, we define the perimeter of a polygon, as the sum of Manhattan distances between all adjacent pairs of points on it; if the points on the polygon are ordered as $p_1, p_2, \\ldots, p_k$ $(k \\geq 3)$, then the perimeter of the polygon is $d(p_1, p_2) + d(p_2, p_3) + \\ldots + d(p_k, p_1)$.\n\nFor some parameter $k$, let's consider all the polygons that can be formed from the given set of points, having any $k$ vertices, such that the polygon is not self-intersecting. For each such polygon, let's consider its perimeter. Over all such perimeters, we define $f(k)$ to be the maximal perimeter.\n\nPlease note, when checking whether a polygon is self-intersecting, that the edges of a polygon are still drawn as straight lines. For instance, in the following pictures:\n\n [Image] \n\nIn the middle polygon, the order of points ($p_1, p_3, p_2, p_4$) is not valid, since it is a self-intersecting polygon. The right polygon (whose edges resemble the Manhattan distance) has the same order and is not self-intersecting, but we consider edges as straight lines. The correct way to draw this polygon is ($p_1, p_2, p_3, p_4$), which is the left polygon.\n\nYour task is to compute $f(3), f(4), \\ldots, f(n)$. In other words, find the maximum possible perimeter for each possible number of points (i.e. $3$ to $n$).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 3\\cdot 10^5$)\u00a0\u2014 the number of points. \n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^8 \\leq x_i, y_i \\leq 10^8$)\u00a0\u2014 the coordinates of point $p_i$.\n\nThe set of points is guaranteed to be convex, all points are distinct, the points are ordered in clockwise order, and there will be no three collinear points.\n\n\n-----Output-----\n\nFor each $i$ ($3\\leq i\\leq n$), output $f(i)$.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 3\n3 0\n1 3\n\nOutput\n12 14 \nInput\n3\n0 0\n0 2\n2 0\n\nOutput\n8 \n\n\n-----Note-----\n\nIn the first example, for $f(3)$, we consider four possible polygons:   ($p_1, p_2, p_3$), with perimeter $12$.  ($p_1, p_2, p_4$), with perimeter $8$.  ($p_1, p_3, p_4$), with perimeter $12$.  ($p_2, p_3, p_4$), with perimeter $12$. \n\nFor $f(4)$, there is only one option, taking all the given points. Its perimeter $14$.\n\nIn the second example, there is only one possible polygon. Its perimeter is $8$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given $a$, the total minutes taken to bake the whole cake and in each minute the size of cake doubles as compared to its previous size.\nLet cake be half baked at $k^{th}$ minute. \nFind the value of $k+2$.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of T test cases follows.               \n- The first and only line of each test case contains a single integer $a$.\n\n-----Output:-----\nFor each testcase , print one line, the value of $k+2$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 8 $\n- $2 \\leq a \\leq 10^{128}$\n\n-----Sample Input:-----\n1\n\n2\n\n-----Sample Output:-----\n3\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nChef is baking a cake.\n\nWhile baking, in each minute the size of cake doubles as compared to its previous size.\n\nIn this cake, baking of cake is directly proportional to its size.\nYou are given $a$, the total time taken(in minutes) to bake the whole cake.\n\nLet cake be half baked at $k^{th}$ minute.         \nYour task is to find the value of $k+2$.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of T test cases follows.               \n- The first and only line of each test case contains a single integer $a$.\n\n-----Output:-----\nFor each testcase , print one line, the value of $k+2$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 8 $\n- $2 \\leq a \\leq 10^{128}$\n\n-----Sample Input:-----\n1\n\n2\n\n-----Sample Output:-----\n3\n\n-----Explaination-----\nTime was 1 min when cake was half baked by chef so answer is 1+2=3\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given an array of integers. You can permute its integers. You want to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Find the maximal number of such integers.\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given an array of integers. Vasya can permute (change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers.\n\nFor instance, if we are given an array $[10, 20, 30, 40]$, we can permute it so that it becomes $[20, 40, 10, 30]$. Then on the first and the second positions the integers became larger ($20>10$, $40>20$) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals $2$. Read the note for the first example, there is one more demonstrative test case.\n\nHelp Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, one of the best permutations is $[1, 5, 5, 3, 10, 1, 1]$. On the positions from second to fifth the elements became larger, so the answer for this permutation is 4.\n\nIn the second sample, there is no way to increase any element with a permutation, so the answer is 0.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA permutation p of size n is the sequence p_1, p_2, ..., p_{n}, consisting of n distinct integers, each of them is from 1 to n (1 \u2264 p_{i} \u2264 n).\n\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\n\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\n-----General Statement:-----\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Discussion:-----\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():"
}