{
    "0": "Python 3\n\"\"\"\n You are given a number of atoms with different number of neutrons. You need to find minimum amount of energy that can be released upon explodification of these atoms. \n-----Input----- The input consists of:  - One line with two integers $n$ and $q$ ($1 \\leq n \\leq 100$, $1 \\leq q \\leq 10^5$), the neutron threshold and the number of experiments.  - One line with $n$ integers $a_1,\\ldots ,a_ n$ ($1 \\leq a_ i \\leq 10^9$ for each $i$), where $a_ i$ is the amount of energy released when an atom with $i$ neutrons is explodificated.  - Then $q$ lines follow, each with an integer $k$ ($1 \\leq k \\leq 10^9$), asking for the minimum energy released when an atom with $k$ neutrons is explodificated. -----Output----- For each query $k$, output the minimum energy released when an atom with $k$ neutrons is explodificated. -----Examples----- Sample Input: 4 5 2 3 5 7 2 3 5 6 8 Sample Output: 3 5 8 10 13\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe Next Wave Energy Research Club is looking at several atoms as potential energy sources, and has asked you to do some computations to see which are the most promising. \n\nAlthough an atom is composed of various parts, for the purposes of this method only the number of neutrons in the atom is relevant1. In the method, a laser charge is fired at the atom, which then releases energy in a process formally called explodification. Exactly how this process proceeds depends on the number of neutrons $k$:\n - If the atom contains $k \\leq n$ neutrons, it will be converted into $a_ k$ joules of energy.\n - If the atom contains $k > n$ neutrons, it will decompose into two atoms with $i$ and $j$ neutrons respectively, satisfying $i,j \\geq 1$ and $i+j=k$. These two atoms will then themselves explodificate.\n\nWhen an atom with $k$ neutrons is explodificated, the total energy that is released depends on the exact sequence of decompositions that occurs in the explodification process. Modern physics is not powerful enough to predict exactly how an atom will decompose\u2014however, for explodification to be a reliable energy source, we need to know the minimum amount of energy that it can release upon explodification. You have been tasked with computing this quantity.\n\n-----Input-----\nThe input consists of:\n - One line with two integers $n$ and $q$ ($1 \\leq n \\leq 100$, $1 \\leq q \\leq 10^5$), the neutron threshold and the number of experiments.\n - One line with $n$ integers $a_1,\\ldots ,a_ n$ ($1 \\leq a_ i \\leq 10^9$ for each $i$), where $a_ i$ is the amount of energy released when an atom with $i$ neutrons is explodificated.\n - Then $q$ lines follow, each with an integer $k$ ($1 \\leq k \\leq 10^9$), asking for the minimum energy released when an atom with $k$ neutrons is explodificated.\n\n-----Output-----\nFor each query $k$, output the minimum energy released when an atom with $k$ neutrons is explodificated.\n\n-----Examples-----\nSample Input:\n4 5\n2 3 5 7\n2\n3\n5\n6\n8\nSample Output:\n3\n5\n8\n10\n13\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given the description of a molecule, each chemical bond connects two distinct atoms, and there is at most one bond between each pair of atoms. The coordinates of some of the atoms are known and fixed, and the remaining atoms naturally move to the locations such that each atom is at the average of the locations of the connected neighboring atoms via chemical bonds. For simplicity, the atoms in the molecule are on the Cartesian $xy$-plane. \n-----Input----- The first line of input consists of two integers $n$ ($2 \\leq n \\leq 100$), the number of atoms, and $m$ ($n-1 \\leq m \\leq \\frac{n(n-1)}{2}$), the number of chemical bonds. The next $n$ lines describe the location of the atoms. The $i^\\textrm {th}$ of which contains two integers $x, y$ ($0 \\leq x,y \\leq 1000$ or $x = y = -1$), which are the $x$ and $y$ coordinates of the $i^\\textrm {th}$ atom. If both coordinates are $-1$, however, the location of this atom is not known. The next $m$ lines describe the chemical bonds. The $i^\\textrm {th}$ of which contains two integers $a$ and $b$ ($1 \\leq a < b \\leq n$) indicating that there is a chemical bond between atom $a$ and atom $b$. It is guaranteed that at least one atom has its location fixed. -----Output----- Display $n$ lines that describe the final location of each atom. Specifically, on the $i^\\textrm {th}$ such line, display two numbers $x$ and $y$, the final coordinates of the $i^\\textrm {th}$ atom. If there are multiple solutions, any of them is accepted. A solution is accepted if the coordinates of each unknown atom and the average coordinates of all its neighboring atoms via chemical bonds differ by at most $10^{-3}$. Note that it is acceptable for multiple atoms to share the same coordinates. -----Examples----- Sample Input 1: 3 2 0 0 -1 -1 2 0 1 2 2 3 Sample Output 1: 0 0 1 0 2 0 Sample Input 2: 5 4 0 0 -1 -1 -1 -1 -1 -1 4 0 1 2 2 3 3 4 4 5 Sample Output 2: 0 0 1 0 2 0 3 0 4 0\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nA molecule consists of atoms that are held together by chemical bonds. Each bond links two atoms together. Each atom may be linked to multiple other atoms, each with a separate chemical bond. All atoms in a molecule are connected to each other via chemical bonds, directly or indirectly.\n\nThe chemical properties of a molecule is determined by not only how pairs of atoms are connected by chemical bonds, but also the physical locations of the atoms within the molecule. Chemical bonds can pull atoms toward each other, so it is sometimes difficult to determine the location of the atoms given the complex interactions of all the chemical bonds in a molecule.\n\nYou are given the description of a molecule. Each chemical bond connects two distinct atoms, and there is at most one bond between each pair of atoms. The coordinates of some of the atoms are known and fixed, and the remaining atoms naturally move to the locations such that each atom is at the average of the locations of the connected neighboring atoms via chemical bonds. For simplicity, the atoms in the molecule are on the Cartesian $xy$-plane.\n\n-----Input-----\nThe first line of input consists of two integers $n$ ($2 \\leq n \\leq 100$), the number of atoms, and $m$ ($n-1 \\leq m \\leq \\frac{n(n-1)}{2}$), the number of chemical bonds.\n\nThe next $n$ lines describe the location of the atoms. The $i^\\textrm {th}$ of which contains two integers $x, y$ ($0 \\leq x,y \\leq 1000$ or $x = y = -1$), which are the $x$ and $y$ coordinates of the $i^\\textrm {th}$ atom. If both coordinates are $-1$, however, the location of this atom is not known.\n\nThe next $m$ lines describe the chemical bonds. The $i^\\textrm {th}$ of which contains two integers $a$ and $b$ ($1 \\leq a < b \\leq n$) indicating that there is a chemical bond between atom $a$ and atom $b$.\n\nIt is guaranteed that at least one atom has its location fixed.\n\n-----Output-----\nDisplay $n$ lines that describe the final location of each atom. Specifically, on the $i^\\textrm {th}$ such line, display two numbers $x$ and $y$, the final coordinates of the $i^\\textrm {th}$ atom. If there are multiple solutions, any of them is accepted. A solution is accepted if the coordinates of each unknown atom and the average coordinates of all its neighboring atoms via chemical bonds differ by at most $10^{-3}$. Note that it is acceptable for multiple atoms to share the same coordinates.\n\n-----Examples-----\nSample Input 1:\n3 2\n0 0\n-1 -1\n2 0\n1 2\n2 3\nSample Output 1:\n0 0\n1 0\n2 0\n\nSample Input 2:\n5 4\n0 0\n-1 -1\n-1 -1\n-1 -1\n4 0\n1 2\n2 3\n3 4\n4 5\nSample Output 2:\n0 0\n1 0\n2 0\n3 0\n4 0\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given the locations of passengers and the train, find the longest distance any passenger has to walk and the maximum number of passengers boarding any single car.\n\n-----Input----- The first line of input contains three integers $N$ ($1 \\leq N \\leq 100$), which is the number of cars of the train, $L$ ($2 \\leq L \\leq 100$), which is the length of each car, and $P$ ($1 \\leq P \\leq 1000$), which is the number of passengers waiting for the train. It is guaranteed that $L$ is an even number. The next $P$ lines describe the location of the passengers relative to the train. Each line contains a single integer $x$ ($0 \\leq x \\leq 10000$), which is the distance the passenger is behind the front-end of the train. -----Output----- Display the longest distance that any passenger has to walk on one line. On the next line, display the maximum number of passengers boarding any single car. -----Examples----- Sample Input: 68 90 6 3809 288 2306 2215 4211 379 Sample Output: 27 1\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nPunctual City is well known for the punctuality of its citizens and its public transportation system. It is particularly famous for its train system. It is always on time, and never too late (or even too early). Statistics about train boarding is regularly collected to keep things running smoothly.\n\nA train has cars numbered $1$ to $N$ (from front to back), each of length $L$ meters. Each car has exactly one door for boarding located at the center ($L/2$ meters from each end of the car). There are no gaps between cars.\n\nWhen the train stops at the boarding platform, each passenger waiting for the train walks to the door of the car which is closest to them, taking the higher numbered car in the case of a tie.\n\nGiven the location of the passengers relative to the train, help the city by reporting the longest distance that any passenger has to walk and the maximum number of passengers boarding any single car.\n\n-----Input-----\nThe first line of input contains three integers $N$ ($1 \\leq N \\leq 100$), which is the number of cars of the train, $L$ ($2 \\leq L \\leq 100$), which is the length of each car, and $P$ ($1 \\leq P \\leq 1000$), which is the number of passengers waiting for the train. It is guaranteed that $L$ is an even number.\n\nThe next $P$ lines describe the location of the passengers relative to the train. Each line contains a single integer $x$ ($0 \\leq x \\leq 10000$), which is the distance the passenger is behind the front-end of the train.\n\n-----Output-----\nDisplay the longest distance that any passenger has to walk on one line. On the next line, display the maximum number of passengers boarding any single car.\n\n-----Examples-----\nSample Input:\n68 90 6\n3809\n288\n2306\n2215\n4211\n379\nSample Output:\n27\n1\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given a list of boxes of chocolate, return YES if it is possible to split the boxes between John and Sam such that both get the same number of pieces of chocolate, and such that all boxes of chocolate are used.\n-----Input----- The input consists of a single test case. The first line contains an integer $n$ ($1 \\le n \\le 1000$), the number of boxes of chocolate Bob bought. The next line contains $n$ integers $a_ i$ representing the number of pieces of chocolate in the $i^{\\text {th}}$ box ($1\\le a_ i \\le 100$). -----Output----- If it is possible for Bob to split the boxes such that John and Sam get the same number of pieces of chocolate, output YES. Otherwise, output NO. -----Examples----- Sample Input: 6 1 4 3 12 13 1 Sample Output: YES\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nCady\u2019s Chocolate Company just opened down the street! Cady\u2019s chocolate is world famous, and her recipe is top secret. But the company is more renowned for the fact that they sell the chocolate in random quantities. Each box of chocolate may contain anywhere from $1$ to $100$ pieces.\n\nBob\u2019s nephews, John and Sam, love Cady\u2019s Chocolate, but Bob has a dilemma. John will get jealous of Sam if he gets more pieces of chocolate, and vice versa. Bob knows how many pieces of chocolate are in each box.\n\nWrite a program to help him determine if it is possible to split the boxes between John and Sam such that both get the same number of pieces of chocolate, and such that all boxes of chocolate are used.\n\n-----Input-----\nThe input consists of a single test case. The first line contains an integer $n$ ($1 \\le n \\le 1000$), the number of boxes of chocolate Bob bought. The next line contains $n$ integers $a_ i$ representing the number of pieces of chocolate in the $i^{\\text {th}}$ box ($1\\le a_ i \\le 100$).\n\n-----Output-----\nIf it is possible for Bob to split the boxes such that John and Sam get the same number of pieces of chocolate, output YES. Otherwise, output NO.\n\n-----Examples-----\nSample Input:\n6\n1 4 3 12 13 1\nSample Output:\nYES\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n In Morse code, an letter of English alphabet is represented as a string of some length from $1$ to $4$. Moreover, each Morse code representation of an English letter contains only dots and dashes. In this task, we will represent a dot with a \"0\" and a dash with a \"1\". Because there are $2^1+2^2+2^3+2^4 = 30$ strings with length $1$ to $4$ containing only \"0\" and/or \"1\", not all of them correspond to one of the $26$ English letters. In particular, each string of \"0\" and/or \"1\" of length at most $4$ translates into a distinct English letter, except the following four strings that do not correspond to any English alphabet: \"0011\", \"0101\", \"1110\", and \"1111\". You will work with a string $S$, which is initially empty. For $m$ times, either a dot or a dash will be appended to $S$, one at a time. Your task is to find and report, after each of these modifications to string $S$, the number of non-empty sequences of English letters that are represented with some substring of $S$ in Morse code. Since the answers can be incredibly tremendous, print them modulo $10^9 + 7$. \n-----Input----- The first line contains an integer $m$ ($1 \\leq m \\leq 3\\,000$)\u00a0\u2014 the number of modifications to $S$.  Each of the next $m$ lines contains either a \"0\" (representing a dot) or a \"1\" (representing a dash), specifying which character should be appended to $S$. -----Output----- Print $m$ lines, the $i$-th of which being the answer after the $i$-th modification to $S$. -----Examples----- Input 3 1 1 1 Output 1 3 7 Input 5 1 0 1 0 1 Output 1 4 10 22 43 Input 9 1 1 0 0 0 1 1 0 1 Output 1 3 10 24 51 109 213 421 833 -----Note----- Let us consider the first sample after all characters have been appended to $S$, so S is \"111\". As you can see, \"1\", \"11\", and \"111\" all correspond to some distinct English letter. In fact, they are translated into a 'T', an 'M', and an 'O', respectively. All non-empty sequences of English letters that are represented with some substring of $S$ in Morse code, therefore, are as follows.  \"T\" (translates into \"1\")  \"M\" (translates into \"11\")  \"O\" (translates into \"111\")  \"TT\" (translates into \"11\")  \"TM\" (translates into \"111\")  \"MT\" (translates into \"111\")  \"TTT\" (translates into \"111\")  Although unnecessary for this task, a conversion table from English alphabets into Morse code can be found here.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nIn Morse code, an letter of English alphabet is represented as a string of some length from $1$ to $4$. Moreover, each Morse code representation of an English letter contains only dots and dashes. In this task, we will represent a dot with a \"0\" and a dash with a \"1\".\n\nBecause there are $2^1+2^2+2^3+2^4 = 30$ strings with length $1$ to $4$ containing only \"0\" and/or \"1\", not all of them correspond to one of the $26$ English letters. In particular, each string of \"0\" and/or \"1\" of length at most $4$ translates into a distinct English letter, except the following four strings that do not correspond to any English alphabet: \"0011\", \"0101\", \"1110\", and \"1111\".\n\nYou will work with a string $S$, which is initially empty. For $m$ times, either a dot or a dash will be appended to $S$, one at a time. Your task is to find and report, after each of these modifications to string $S$, the number of non-empty sequences of English letters that are represented with some substring of $S$ in Morse code.\n\nSince the answers can be incredibly tremendous, print them modulo $10^9 + 7$.\n\n\n-----Input-----\n\nThe first line contains an integer $m$ ($1 \\leq m \\leq 3\\,000$)\u00a0\u2014 the number of modifications to $S$. \n\nEach of the next $m$ lines contains either a \"0\" (representing a dot) or a \"1\" (representing a dash), specifying which character should be appended to $S$.\n\n\n-----Output-----\n\nPrint $m$ lines, the $i$-th of which being the answer after the $i$-th modification to $S$.\n\n\n-----Examples-----\nInput\n3\n1\n1\n1\n\nOutput\n1\n3\n7\n\nInput\n5\n1\n0\n1\n0\n1\n\nOutput\n1\n4\n10\n22\n43\n\nInput\n9\n1\n1\n0\n0\n0\n1\n1\n0\n1\n\nOutput\n1\n3\n10\n24\n51\n109\n213\n421\n833\n\n\n\n-----Note-----\n\nLet us consider the first sample after all characters have been appended to $S$, so S is \"111\".\n\nAs you can see, \"1\", \"11\", and \"111\" all correspond to some distinct English letter. In fact, they are translated into a 'T', an 'M', and an 'O', respectively. All non-empty sequences of English letters that are represented with some substring of $S$ in Morse code, therefore, are as follows.  \"T\" (translates into \"1\")  \"M\" (translates into \"11\")  \"O\" (translates into \"111\")  \"TT\" (translates into \"11\")  \"TM\" (translates into \"111\")  \"MT\" (translates into \"111\")  \"TTT\" (translates into \"111\") \n\nAlthough unnecessary for this task, a conversion table from English alphabets into Morse code can be found here.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Bike is interested in permutations. A permutation of length n is an integer sequence such that each integer from 0 to (n - 1) appears exactly once in it. For example, [0, 2, 1] is a permutation of length 3 while both [0, 2, 2] and [1, 2, 3] is not. A permutation triple of permutations of length n (a, b, c) is called a Lucky Permutation Triple if and only if $\\forall i(1 \\leq i \\leq n), a_{i} + b_{i} \\equiv c_{i} \\operatorname{mod} n$. The sign a_{i} denotes the i-th element of permutation a. The modular equality described above denotes that the remainders after dividing a_{i} + b_{i} by n and dividing c_{i} by n are equal. Now, he has an integer n and wants to find a Lucky Permutation Triple. Could you please help him \n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 10^5). -----Output----- If no Lucky Permutation Triple of length n exists print -1. Otherwise, you need to print three lines. Each line contains n space-seperated integers. The first line must contain permutation a, the second line \u2014 permutation b, the third \u2014 permutation c. If there are multiple solutions, print any of them. -----Examples----- Input 5 Output 1 4 3 2 0 1 0 2 4 3 2 4 0 1 3 Input 2 Output -1 -----Note----- In Sample 1, the permutation triple ([1, 4, 3, 2, 0], [1, 0, 2, 4, 3], [2, 4, 0, 1, 3]) is Lucky Permutation Triple, as following holds:  $1 + 1 \\equiv 2 \\equiv 2 \\operatorname{mod} 5$;  $4 + 0 \\equiv 4 \\equiv 4 \\operatorname{mod} 5$;  $3 + 2 \\equiv 0 \\equiv 0 \\operatorname{mod} 5$;  $2 + 4 \\equiv 6 \\equiv 1 \\operatorname{mod} 5$;  $0 + 3 \\equiv 3 \\equiv 3 \\operatorname{mod} 5$.  In Sample 2, you can easily notice that no lucky permutation triple exists.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nBike is interested in permutations. A permutation of length n is an integer sequence such that each integer from 0 to (n - 1) appears exactly once in it. For example, [0, 2, 1] is a permutation of length 3 while both [0, 2, 2] and [1, 2, 3] is not.\n\nA permutation triple of permutations of length n (a, b, c) is called a Lucky Permutation Triple if and only if $\\forall i(1 \\leq i \\leq n), a_{i} + b_{i} \\equiv c_{i} \\operatorname{mod} n$. The sign a_{i} denotes the i-th element of permutation a. The modular equality described above denotes that the remainders after dividing a_{i} + b_{i} by n and dividing c_{i} by n are equal.\n\nNow, he has an integer n and wants to find a Lucky Permutation Triple. Could you please help him?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\n\n-----Output-----\n\nIf no Lucky Permutation Triple of length n exists print -1.\n\nOtherwise, you need to print three lines. Each line contains n space-seperated integers. The first line must contain permutation a, the second line \u2014 permutation b, the third \u2014 permutation c.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5\n\nOutput\n1 4 3 2 0\n1 0 2 4 3\n2 4 0 1 3\n\nInput\n2\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn Sample 1, the permutation triple ([1, 4, 3, 2, 0], [1, 0, 2, 4, 3], [2, 4, 0, 1, 3]) is Lucky Permutation Triple, as following holds:  $1 + 1 \\equiv 2 \\equiv 2 \\operatorname{mod} 5$;  $4 + 0 \\equiv 4 \\equiv 4 \\operatorname{mod} 5$;  $3 + 2 \\equiv 0 \\equiv 0 \\operatorname{mod} 5$;  $2 + 4 \\equiv 6 \\equiv 1 \\operatorname{mod} 5$;  $0 + 3 \\equiv 3 \\equiv 3 \\operatorname{mod} 5$. \n\nIn Sample 2, you can easily notice that no lucky permutation triple exists.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Initially Sam has a list with a single element n. Then he has to perform certain operations on this list. In each operation Sam must remove any element x, such that x > 1, from the list and insert at the same position $\\lfloor \\frac{x}{2} \\rfloor$, $x \\operatorname{mod} 2$, $\\lfloor \\frac{x}{2} \\rfloor$ sequentially. He must continue with these operations until all the elements in the list are either 0 or 1. Now the masters want the total number of 1s in the range l to r (1-indexed). Sam wants to become a maester but unfortunately he cannot solve this problem. Can you help Sam to pass the eligibility test? summary :  \n-----Input----- The first line contains three integers n, l, r (0 \u2264 n < 2^50, 0 \u2264 r - l \u2264 10^5, r \u2265 1, l \u2265 1) \u2013 initial element and the range l to r. It is guaranteed that r is not greater than the length of the final list. -----Output----- Output the total number of 1s in the range l to r in the final sequence. -----Examples----- Input 7 2 5 Output 4 Input 10 3 10 Output 5 -----Note----- Consider first example: $[ 7 ] \\rightarrow [ 3,1,3 ] \\rightarrow [ 1,1,1,1,3 ] \\rightarrow [ 1,1,1,1,1,1,1 ] \\rightarrow [ 1,1,1,1,1,1,1 ]$ Elements on positions from 2-nd to 5-th in list is [1, 1, 1, 1]. The number of ones is 4. For the second example: $[ 10 ] \\rightarrow [ 1,0,1,1,1,0,1,0,1,0,1,1,1,0,1 ]$ Elements on positions from 3-rd to 10-th in list is [1, 1, 1, 0, 1, 0, 1, 0]. The number of ones is 5.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nJon fought bravely to rescue the wildlings who were attacked by the white-walkers at Hardhome. On his arrival, Sam tells him that he wants to go to Oldtown to train at the Citadel to become a maester, so he can return and take the deceased Aemon's place as maester of Castle Black. Jon agrees to Sam's proposal and Sam sets off his journey to the Citadel. However becoming a trainee at the Citadel is not a cakewalk and hence the maesters at the Citadel gave Sam a problem to test his eligibility. \n\nInitially Sam has a list with a single element n. Then he has to perform certain operations on this list. In each operation Sam must remove any element x, such that x > 1, from the list and insert at the same position $\\lfloor \\frac{x}{2} \\rfloor$, $x \\operatorname{mod} 2$, $\\lfloor \\frac{x}{2} \\rfloor$ sequentially. He must continue with these operations until all the elements in the list are either 0 or 1.\n\nNow the masters want the total number of 1s in the range l to r (1-indexed). Sam wants to become a maester but unfortunately he cannot solve this problem. Can you help Sam to pass the eligibility test?\n\n\n-----Input-----\n\nThe first line contains three integers n, l, r (0 \u2264 n < 2^50, 0 \u2264 r - l \u2264 10^5, r \u2265 1, l \u2265 1) \u2013 initial element and the range l to r.\n\nIt is guaranteed that r is not greater than the length of the final list.\n\n\n-----Output-----\n\nOutput the total number of 1s in the range l to r in the final sequence.\n\n\n-----Examples-----\nInput\n7 2 5\n\nOutput\n4\n\nInput\n10 3 10\n\nOutput\n5\n\n\n\n-----Note-----\n\nConsider first example:\n\n$[ 7 ] \\rightarrow [ 3,1,3 ] \\rightarrow [ 1,1,1,1,3 ] \\rightarrow [ 1,1,1,1,1,1,1 ] \\rightarrow [ 1,1,1,1,1,1,1 ]$\n\nElements on positions from 2-nd to 5-th in list is [1, 1, 1, 1]. The number of ones is 4.\n\nFor the second example:\n\n$[ 10 ] \\rightarrow [ 1,0,1,1,1,0,1,0,1,0,1,1,1,0,1 ]$\n\nElements on positions from 3-rd to 10-th in list is [1, 1, 1, 0, 1, 0, 1, 0]. The number of ones is 5.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n In 1978 AD the great Sir Isaac Newton, whilst proving that $\\mathcal{P}$ is a strict superset of $\\mathcal{NP}$, defined the Beta Alpha Pi Zeta function $f$ as follows over any sequence of positive integers $a_1, \\dots , a_ n$. Given integers $1\\leq i\\leq j\\leq n$, we define $f(i, j)$ as $\\gcd (a_ i, a_{i+1}, \\dots , a_{j-1}, a_ j)$. About a century later Lothar Collatz applied this function to the sequence $1, 1, 1, \\dots , 1$, and observed that $f$ always equalled $1$. Based on this, he conjectured that $f$ is always a constant function, no matter what the sequence $a_ i$ is. This conjecture, now widely known as the Collatz Conjecture, is one of the major open problems in botanical studies. (The Strong Collatz Conjecture claims that however many values $f$ takes on, the real part is always $\\frac{1}{2}$.) You, a budding young cultural anthropologist, have decided to disprove this conjecture. Given a sequence $a_ i$, calculate how many different values $f$ takes on.\n-----Input----- The input consists of two lines.  - A single integer $1 \\leq n \\leq 5 \\cdot 10^5$, the length of the sequence.  - The sequence of integers $a_1, a_2, \\dots , a_ n$. It is given that $1 \\leq a_ i \\leq 10^{18}$. -----Output----- Output a single line containing a single integer, the number of distinct values $f$ takes on over the given sequence. -----Examples----- Sample Input: 4 9 6 2 4 Sample Output: 6\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nIn 1978 AD the great Sir Isaac Newton, whilst proving that $\\mathcal{P}$ is a strict superset of $\\mathcal{NP}$, defined the Beta Alpha Pi Zeta function $f$ as follows over any sequence of positive integers $a_1, \\dots , a_ n$. Given integers $1\\leq i\\leq j\\leq n$, we define $f(i, j)$ as $\\gcd (a_ i, a_{i+1}, \\dots , a_{j-1}, a_ j)$. \n\nAbout a century later Lothar Collatz applied this function to the sequence $1, 1, 1, \\dots , 1$, and observed that $f$ always equalled $1$. Based on this, he conjectured that $f$ is always a constant function, no matter what the sequence $a_ i$ is. This conjecture, now widely known as the Collatz Conjecture, is one of the major open problems in botanical studies. (The Strong Collatz Conjecture claims that however many values $f$ takes on, the real part is always $\\frac{1}{2}$.)\n\nYou, a budding young cultural anthropologist, have decided to disprove this conjecture. Given a sequence $a_ i$, calculate how many different values $f$ takes on.\n\n-----Input-----\nThe input consists of two lines.\n - A single integer $1 \\leq n \\leq 5 \\cdot 10^5$, the length of the sequence.\n - The sequence of integers $a_1, a_2, \\dots , a_ n$. It is given that $1 \\leq a_ i \\leq 10^{18}$.\n\n-----Output-----\nOutput a single line containing a single integer, the number of distinct values $f$ takes on over the given sequence.\n\n-----Examples-----\nSample Input:\n4\n9 6 2 4\nSample Output:\n6\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n There are n friends playing popular video game Toda 2. There is a rating system describing skill level of each player, initially the rating of the i-th friend is r_{i}. The friends decided to take part in the championship as a team. But they should have equal ratings to be allowed to compose a single team consisting of all n friends. So the friends are faced with the problem: how to make all their ratings equal. One way to change ratings is to willingly lose in some matches. Friends can form a party consisting of two to five (but not more than n) friends and play a match in the game. When the party loses, the rating of each of its members decreases by 1. A rating can't become negative, so r_{i} = 0 doesn't change after losing. The friends can take part in multiple matches, each time making a party from any subset of friends (but remember about constraints on party size: from 2 to 5 members). The friends want to make their ratings equal but as high as possible. Help the friends develop a strategy of losing the matches so that all their ratings become equal and the resulting rating is maximum possible.\n-----Input----- The first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of friends. The second line contains n non-negative integers r_1, r_2, ..., r_{n} (0 \u2264 r_{i} \u2264 100), where r_{i} is the initial rating of the i-th friend. -----Output----- In the first line, print a single integer R \u2014 the final rating of each of the friends. In the second line, print integer t \u2014 the number of matches the friends have to play. Each of the following t lines should contain n characters '0' or '1', where the j-th character of the i-th line is equal to:   '0', if friend j should not play in match i,  '1', if friend j should play in match i.  Each line should contain between two and five characters '1', inclusive. The value t should not exceed 10^4, it is guaranteed that such solution exists.  Remember that you shouldn't minimize the value t, but you should maximize R. If there are multiple solutions, print any of them. -----Examples----- Input 5 4 5 1 7 4 Output 1 8 01010 00011 01010 10010 00011 11000 00011 11000 Input 2 1 2 Output 0 2 11 11 Input 3 1 1 1 Output 1 0\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA group of n friends enjoys playing popular video game Toda 2. There is a rating system describing skill level of each player, initially the rating of the i-th friend is r_{i}.\n\nThe friends decided to take part in the championship as a team. But they should have equal ratings to be allowed to compose a single team consisting of all n friends. So the friends are faced with the problem: how to make all their ratings equal.\n\nOne way to change ratings is to willingly lose in some matches. Friends can form a party consisting of two to five (but not more than n) friends and play a match in the game. When the party loses, the rating of each of its members decreases by 1. A rating can't become negative, so r_{i} = 0 doesn't change after losing.\n\nThe friends can take part in multiple matches, each time making a party from any subset of friends (but remember about constraints on party size: from 2 to 5 members).\n\nThe friends want to make their ratings equal but as high as possible.\n\nHelp the friends develop a strategy of losing the matches so that all their ratings become equal and the resulting rating is maximum possible.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of friends.\n\nThe second line contains n non-negative integers r_1, r_2, ..., r_{n} (0 \u2264 r_{i} \u2264 100), where r_{i} is the initial rating of the i-th friend.\n\n\n-----Output-----\n\nIn the first line, print a single integer R \u2014 the final rating of each of the friends.\n\nIn the second line, print integer t \u2014 the number of matches the friends have to play. Each of the following t lines should contain n characters '0' or '1', where the j-th character of the i-th line is equal to:\n\n  '0', if friend j should not play in match i,  '1', if friend j should play in match i. \n\nEach line should contain between two and five characters '1', inclusive.\n\nThe value t should not exceed 10^4, it is guaranteed that such solution exists. \n\nRemember that you shouldn't minimize the value t, but you should maximize R. If there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5\n4 5 1 7 4\n\nOutput\n1\n8\n01010\n00011\n01010\n10010\n00011\n11000\n00011\n11000\n\nInput\n2\n1 2\n\nOutput\n0\n2\n11\n11\n\nInput\n3\n1 1 1\n\nOutput\n1\n0\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Petya has n different souvenirs to sell; ith souvenir is characterised by its weight w_{i} and cost c_{i}. Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible. Help Petya to determine maximum possible total cost. \n-----Input----- The first line contains two integers n and m (1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 300000) \u2014 the number of Petya's souvenirs and total weight that he can carry to the market. Then n lines follow. ith line contains two integers w_{i} and c_{i} (1 \u2264 w_{i} \u2264 3, 1 \u2264 c_{i} \u2264 10^9) \u2014 the weight and the cost of ith souvenir. -----Output----- Print one number \u2014 maximum possible total cost of souvenirs that Petya can carry to the market. -----Examples----- Input 1 1 2 1 Output 0 Input 2 2 1 3 2 2 Output 3 Input 4 3 3 10 2 7 2 8 1 1 Output 10\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nAfter several latest reforms many tourists are planning to visit Berland, and Berland people understood that it's an opportunity to earn money and changed their jobs to attract tourists. Petya, for example, left the IT corporation he had been working for and started to sell souvenirs at the market.\n\nThis morning, as usual, Petya will come to the market. Petya has n different souvenirs to sell; ith souvenir is characterised by its weight w_{i} and cost c_{i}. Petya knows that he might not be able to carry all the souvenirs to the market. So Petya wants to choose a subset of souvenirs such that its total weight is not greater than m, and total cost is maximum possible.\n\nHelp Petya to determine maximum possible total cost.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100000, 1 \u2264 m \u2264 300000) \u2014 the number of Petya's souvenirs and total weight that he can carry to the market.\n\nThen n lines follow. ith line contains two integers w_{i} and c_{i} (1 \u2264 w_{i} \u2264 3, 1 \u2264 c_{i} \u2264 10^9) \u2014 the weight and the cost of ith souvenir.\n\n\n-----Output-----\n\nPrint one number \u2014 maximum possible total cost of souvenirs that Petya can carry to the market.\n\n\n-----Examples-----\nInput\n1 1\n2 1\n\nOutput\n0\n\nInput\n2 2\n1 3\n2 2\n\nOutput\n3\n\nInput\n4 3\n3 10\n2 7\n2 8\n1 1\n\nOutput\n10\n\"\"\"\ndef code():"
}