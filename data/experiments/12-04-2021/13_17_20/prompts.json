{
    "0": "Python 3\n\"\"\"\nFind maximum possible value of A[i]%A[j] where 1<=i,j<=N for a given array A of size N containing positive numbers. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou have an array A of size N containing only positive numbers. You have to output the maximum possible value of A[i]%A[j] where 1<=i,j<=N. \n\n-----Input-----\nThe first line of each test case contains a single integer N denoting the size of the array. The next N lines contains integers A1, A2, ..., AN denoting the numbers\n\n-----Output-----\nOutput a single integer answering what is asked in the problem.\n\n-----Subtask 1 (20 points)-----\n- 1 \u2264 N \u2264 5000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Subtask 2 (80 points)-----\n- 1 \u2264 N \u2264 1000000\n- 1 \u2264 A[i] \u2264 2*(10^9)\n\n-----Example-----\nInput:\n2\n1\n2\n\nOutput:\n1\n\n-----Explanation-----\nThere will be four values, A[0]%A[0] = 0, A[0]%A[1]=1, A[1]%A[0]=0, A[1]%A[1]=0, and hence the output will be the maximum among them all, that is 1.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven a string s, write a method that will return true if it is a valid single integer or floating number or false if it is not.\n\"\"\"\ndef isDigit(string):",
    "3": "Python 3\n\"\"\"\nGiven a string s, write a method (function) that will return true if its a valid single integer or floating number or false if its not.\n\nValid examples, should return true:\n\nshould return false:\n\"\"\"\ndef isDigit(string):",
    "4": "Python 3\n\"\"\"\nComplete the function that determines the score of a hand in the card game Blackjack and return the highest score of the cards that is less than or equal to 21. If there is no score less than or equal to 21 return the smallest score more than 21.\n\nNumber cards count as their face value. Jack, Queen and King count as 10. An Ace can be counted as either 1 or 11.\n\nExamples:\nInput:\n[\"A\"]\nOutput:\n11\n\nInput:\n[\"A\", \"J\"]\nOutput:\n21\n\nInput:\n[\"A\", \"10\", \"A\"]\nOutput:\n12\n\nInput:\n[\"5\", \"3\", \"7\"]\nOutput:\n15\n\nInput:\n[\"5\", \"4\", \"3\", \"2\", \"A\", \"K\"]\nOutput:\n25\n\"\"\"\ndef score_hand(cards):",
    "5": "Python 3\n\"\"\"\nComplete the function that determines the score of a hand in the card game [Blackjack](https://en.wikipedia.org/wiki/Blackjack) (aka 21).\n\nThe function receives an array of strings that represent each card in the hand (`\"2\"`, `\"3\",` ..., `\"10\"`, `\"J\"`, `\"Q\"`, `\"K\"` or `\"A\"`) and should return the score of the hand (integer).\n\n~~~if:c\nNote: in C the function receives a character array with the card `10` represented by the character `T`.\n~~~\n\n\n### Scoring rules:\n\nNumber cards count as their face value (2 through 10). Jack, Queen and King count as 10. An Ace can be counted as either 1 or 11.\n\nReturn the highest score of the cards that is less than or equal to 21. If there is no score less than or equal to 21 return the smallest score more than 21.\n\n\n## Examples\n\n```\n[\"A\"]                           ==>  11\n[\"A\", \"J\"]                      ==>  21\n[\"A\", \"10\", \"A\"]                ==>  12\n[\"5\", \"3\", \"7\"]                 ==>  15\n[\"5\", \"4\", \"3\", \"2\", \"A\", \"K\"]  ==>  25\n```\n\"\"\"\ndef score_hand(cards):",
    "6": "Python 3\n\"\"\"\nWrite a function that checks if all the letters in the second string are present in the first one at least once, regardless of how many times they appear. Function should not be case sensitive.\n\nExamples:\n\n[\"ab\", \"aaa\"]    =>  true\n[\"trances\", \"nectar\"]    =>  true\n[\"compadres\", \"DRAPES\"]  =>  true\n[\"parses\", \"parsecs\"]    =>  false\n\"\"\"\ndef letter_check(arr):",
    "7": "Python 3\n\"\"\"\nWrite a function that checks if all the letters in the second string are present in the first one at least once, regardless of how many times they appear:\n\n```\n[\"ab\", \"aaa\"]    =>  true\n[\"trances\", \"nectar\"]    =>  true\n[\"compadres\", \"DRAPES\"]  =>  true\n[\"parses\", \"parsecs\"]    =>  false\n```\n\nFunction should not be case sensitive, as indicated in example #2. Note: both strings are presented as a **single argument** in the form of an array.\n\"\"\"\ndef letter_check(arr):",
    "8": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers and an integer $s$. It is guaranteed that $n$ is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to $s$.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1\\le n\\le 2\\cdot 10^5-1$, $1\\le s\\le 10^9$)\u00a0\u2014 the length of the array and the required value of median.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\n\nIt is guaranteed that $n$ is odd.\n\n\n-----Output-----\n\nIn a single line output the minimum number of operations to make the median being equal to $s$.\n\n\n-----Examples-----\nInput\n3 8\n6 5 8\n\nOutput\n2\nInput\n7 20\n21 15 12 11 20 19 12\n\nOutput\n6\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given an array $a$ of $n$ integers and an integer $s$. It is guaranteed that $n$ is odd.\n\nIn one operation you can either increase or decrease any single element by one. Calculate the minimum number of operations required to make the median of the array being equal to $s$.\n\nThe median of the array with odd length is the value of the element which is located on the middle position after the array is sorted. For example, the median of the array $6, 5, 8$ is equal to $6$, since if we sort this array we will get $5, 6, 8$, and $6$ is located on the middle position.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $s$ ($1\\le n\\le 2\\cdot 10^5-1$, $1\\le s\\le 10^9$)\u00a0\u2014 the length of the array and the required value of median.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1\\le a_i \\le 10^9$)\u00a0\u2014 the elements of the array $a$.\n\nIt is guaranteed that $n$ is odd.\n\n\n-----Output-----\n\nIn a single line output the minimum number of operations to make the median being equal to $s$.\n\n\n-----Examples-----\nInput\n3 8\n6 5 8\n\nOutput\n2\nInput\n7 20\n21 15 12 11 20 19 12\n\nOutput\n6\n\n\n-----Note-----\n\nIn the first sample, $6$ can be increased twice. The array will transform to $8, 5, 8$, which becomes $5, 8, 8$ after sorting, hence the median is equal to $8$.\n\nIn the second sample, $19$ can be increased once and $15$ can be increased five times. The array will become equal to $21, 20, 12, 11, 20, 20, 12$. If we sort this array we get $11, 12, 12, 20, 20, 20, 21$, this way the median is $20$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYour job is to return the two distinct highest values in a list. If there're less than 2 unique values, return as many of them as possible.\n\nThe result should also be ordered from highest to lowest.\n\nExamples:\n\n```\n[4, 10, 10, 9]  =>  [10, 9]\n[1, 1, 1]  =>  [1]\n[]  =>  []\n```\n\"\"\"\ndef two_highest(arg1):",
    "11": "Python 3\n\"\"\"\nIn this kata, your job is to return the two distinct highest values in a list. If there're less than 2 unique values, return as many of them, as possible.\n\nThe result should also be ordered from highest to lowest.\n\nExamples:\n\n```\n[4, 10, 10, 9]  =>  [10, 9]\n[1, 1, 1]  =>  [1]\n[]  =>  []\n```\n\"\"\"\ndef two_highest(arg1):",
    "12": "Python 3\n\"\"\"\nYou have an array of integers, each integer is between $0$ and $m-1$ inclusive. The integers are $a_1, a_2, \\ldots, a_n$.\n\nIn one operation you can choose an integer $k$ and $k$ indices $i_1, i_2, \\ldots, i_k$ such that $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$. You should then change $a_{i_j}$ to $((a_{i_j}+1) \\bmod m)$ for each chosen integer $i_j$. The integer $m$ is fixed for all operations and indices.\n\nYou wants to make this array non-decreasing with the minimum number of such operations. Find this minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the parameter $m$.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < m$)\u00a0\u2014 the given array.\n\n\n-----Output-----\n\nOutput one integer: the minimum number of described operations Zitz needs to make his array non-decreasing. If no operations required, print $0$.\n\nIt is easy to see that with enough operations Zitz can always make his array non-decreasing.\n\n\n-----Examples-----\nInput\n5 3\n0 0 0 1 2\n\nOutput\n0\n\nInput\n5 7\n0 6 1 3 2\n\nOutput\n1\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nToad Zitz has an array of integers, each integer is between $0$ and $m-1$ inclusive. The integers are $a_1, a_2, \\ldots, a_n$.\n\nIn one operation Zitz can choose an integer $k$ and $k$ indices $i_1, i_2, \\ldots, i_k$ such that $1 \\leq i_1 < i_2 < \\ldots < i_k \\leq n$. He should then change $a_{i_j}$ to $((a_{i_j}+1) \\bmod m)$ for each chosen integer $i_j$. The integer $m$ is fixed for all operations and indices.\n\nHere $x \\bmod y$ denotes the remainder of the division of $x$ by $y$.\n\nZitz wants to make his array non-decreasing with the minimum number of such operations. Find this minimum number of operations.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the parameter $m$.\n\nThe next line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i < m$)\u00a0\u2014 the given array.\n\n\n-----Output-----\n\nOutput one integer: the minimum number of described operations Zitz needs to make his array non-decreasing. If no operations required, print $0$.\n\nIt is easy to see that with enough operations Zitz can always make his array non-decreasing.\n\n\n-----Examples-----\nInput\n5 3\n0 0 0 1 2\n\nOutput\n0\n\nInput\n5 7\n0 6 1 3 2\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, the array is already non-decreasing, so the answer is $0$.\n\nIn the second example, you can choose $k=2$, $i_1 = 2$, $i_2 = 5$, the array becomes $[0,0,1,3,3]$. It is non-decreasing, so the answer is $1$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak. Consider only uppercase letters and spaces.\n\nExamples:\nInput:\ntoLeetSpeak(\"LEET\")\nOutput:\n\"1337\"\n\nInput:\nto_leet_speak(\"LEET\")\nOutput:\n\"1337\"\n\"\"\"\ndef to_leet_speak(str):",
    "15": "Python 3\n\"\"\"\n```if-not:rust\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak.\n```\n```if:rust\nYour task is to write a function `to_leet_speak` that converts a regular english sentence to Leetspeak.\n```\n\nMore about LeetSpeak You can read at wiki -> https://en.wikipedia.org/wiki/Leet\n\nConsider only uppercase letters (no lowercase letters, no numbers) and spaces.\n\nFor example:\n\n```if-not:rust\n~~~\ntoLeetSpeak(\"LEET\") returns \"1337\"\n~~~\n```\n```if:rust\n~~~\nto_leet_speak(\"LEET\") returns \"1337\"\n~~~\n```\n\nIn this kata we use a simple LeetSpeak dialect. Use this alphabet:\n\n```\n{\n  A : '@',\n  B : '8',\n  C : '(',\n  D : 'D',\n  E : '3',\n  F : 'F',\n  G : '6',\n  H : '#',\n  I : '!',\n  J : 'J',\n  K : 'K',\n  L : '1',\n  M : 'M',\n  N : 'N',\n  O : '0',\n  P : 'P',\n  Q : 'Q',\n  R : 'R',\n  S : '$',\n  T : '7',\n  U : 'U',\n  V : 'V',\n  W : 'W',\n  X : 'X',\n  Y : 'Y',\n  Z : '2'\n}\n```\n\"\"\"\ndef to_leet_speak(str):",
    "16": "Python 3\n\"\"\"\nThere are $n$ positive integers $a_1, a_2, \\dots, a_n$. For the one move you can choose any even value $c$ and divide by two all elements that equal $c$.\n\nFor example, if $a=[6,8,12,6,3,12]$ and you choose $c=6$, and $a$ is transformed into $a=[3,8,12,3,3,12]$ after the move.\n\nYou need to find the minimal number of moves for transforming $a$ to an array of only odd integers (each element shouldn't be divisible by $2$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of integers in the sequence $a$. The second line contains positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor $t$ test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd (i.e. not divisible by $2$).\n\n\n-----Example-----\nInput\n4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput\n4\n10\n4\n0\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are $n$ positive integers $a_1, a_2, \\dots, a_n$. For the one move you can choose any even value $c$ and divide by two all elements that equal $c$.\n\nFor example, if $a=[6,8,12,6,3,12]$ and you choose $c=6$, and $a$ is transformed into $a=[3,8,12,3,3,12]$ after the move.\n\nYou need to find the minimal number of moves for transforming $a$ to an array of only odd integers (each element shouldn't be divisible by $2$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of integers in the sequence $a$. The second line contains positive integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$).\n\nThe sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nFor $t$ test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd (i.e. not divisible by $2$).\n\n\n-----Example-----\nInput\n4\n6\n40 6 40 3 20 1\n1\n1024\n4\n2 4 8 16\n3\n3 1 7\n\nOutput\n4\n10\n4\n0\n\n\n\n-----Note-----\n\nIn the first test case of the example, the optimal sequence of moves can be as follows:\n\n  before making moves $a=[40, 6, 40, 3, 20, 1]$;  choose $c=6$;  now $a=[40, 3, 40, 3, 20, 1]$;  choose $c=40$;  now $a=[20, 3, 20, 3, 20, 1]$;  choose $c=20$;  now $a=[10, 3, 10, 3, 10, 1]$;  choose $c=10$;  now $a=[5, 3, 5, 3, 5, 1]$ \u2014 all numbers are odd. \n\nThus, all numbers became odd after $4$ moves. In $3$ or fewer moves, you cannot make them all odd.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array.\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$, what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLet $a_1, \\ldots, a_n$ be an array of $n$ positive integers. In one operation, you can choose an index $i$ such that $a_i = i$, and remove $a_i$ from the array (after the removal, the remaining parts are concatenated).\n\nThe weight of $a$ is defined as the maximum number of elements you can remove.\n\nYou must answer $q$ independent queries $(x, y)$: after replacing the $x$ first elements of $a$ and the $y$ last elements of $a$ by $n+1$ (making them impossible to remove), what would be the weight of $a$?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 3 \\cdot 10^5$) \u00a0\u2014 the length of the array and the number of queries.\n\nThe second line contains $n$ integers $a_1$, $a_2$, ..., $a_n$ ($1 \\leq a_i \\leq n$)\u00a0\u2014 elements of the array.\n\nThe $i$-th of the next $q$ lines contains two integers $x$ and $y$ ($x, y \\ge 0$ and $x+y < n$).\n\n\n-----Output-----\n\nPrint $q$ lines, $i$-th line should contain a single integer \u00a0\u2014 the answer to the $i$-th query.\n\n\n-----Examples-----\nInput\n13 5\n2 2 3 9 5 4 6 5 7 8 3 11 13\n3 1\n0 0\n2 4\n5 0\n0 12\n\nOutput\n5\n11\n6\n1\n0\n\nInput\n5 2\n1 4 1 2 4\n0 0\n1 0\n\nOutput\n2\n0\n\n\n\n-----Note-----\n\nExplanation of the first query:\n\nAfter making first $x = 3$ and last $y = 1$ elements impossible to remove, $a$ becomes $[\\times, \\times, \\times, 9, 5, 4, 6, 5, 7, 8, 3, 11, \\times]$ (we represent $14$ as $\\times$ for clarity).\n\nHere is a strategy that removes $5$ elements (the element removed is colored in red):  $[\\times, \\times, \\times, 9, \\color{red}{5}, 4, 6, 5, 7, 8, 3, 11, \\times]$  $[\\times, \\times, \\times, 9, 4, 6, 5, 7, 8, 3, \\color{red}{11}, \\times]$  $[\\times, \\times, \\times, 9, 4, \\color{red}{6}, 5, 7, 8, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 7, \\color{red}{8}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, \\color{red}{7}, 3, \\times]$  $[\\times, \\times, \\times, 9, 4, 5, 3, \\times]$ (final state) \n\nIt is impossible to remove more than $5$ elements, hence the weight is $5$.\n\"\"\"\ndef code():"
}