{
    "0": "Python 3\n\"\"\"\n Jack, na ve fellow that he is, has fallen into the clutches of a dastardly and sophisticated multi-level marketing scheme. It all started when a mysterious stranger pushed upon young Jack a bag of ordinary beans, promising that if only he could amass the right quantities of each kind of bean, he could grow a mighty beanstalk and climb it to the unimaginable wealth at its top. This all sounds very sensible to Jack... But there is one catch. He must acquire the extra beans from other farmers, who as one might expect are not too keen to give away the fruits (nor the seeds) of their labour. Each time Jack comes to ask for a bean, they will give him exactly one from their farm, but since he is not a paying customer the exact species may vary between farmers and between visits. There is another option, but it is expensive. Jack can give up some of his cows to the mysterious stranger in exchange for one additional bean per cow. Of course, this is a drastic measure. We would like to help Jack keep as many of his cows as possible, while still achieving his goals. How many cows will Jack need to budget for to have $100\\% $ certainty of success\n-----Input-----  - One line containing an integer $B$, ($1 \\le B \\le 20$), the number of types of beans available.  - One line containing $B$ integers, $V_1 \\ldots V_ B$, ($0 \\le V_1 \\ldots V_ B \\le 100$), the number of each kind of bean required.  - One line containing $T$ ($1 \\le T \\le 100$), the number of other farms in Jack\u2019s small village.  - $T$ more lines, each beginning with an integer $M$ ($1 \\le M \\le B$) giving the number of kinds of bean this farmer grows. This is followed by $M$ more distinct integers $T_1 \\ldots T_ M$ ($1 \\le T_1 \\ldots T_ M \\le B$), each corresponding to one kind of bean. -----Output-----  - One line containing one integer: the number of cows Jack must bring with him in order to be $100\\% $ sure of ending the day with enough beans to grow a magical beanstalk. -----Examples----- Sample Input 1: 1 5 1 1 1 Sample Output 1: 0 Sample Input 2: 3 5 5 5 2 2 1 2 2 2 3 Sample Output 2: 10\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nJack, na\u00efve fellow that he is, has fallen into the clutches of a dastardly and sophisticated multi-level marketing scheme.\n\nIt all started when a mysterious stranger pushed upon young Jack a bag of ordinary beans, promising that if only he could amass the right quantities of each kind of bean, he could grow a mighty beanstalk and climb it to the unimaginable wealth at its top.\n\nThis all sounds very sensible to Jack... But there is one catch. He must acquire the extra beans from other farmers, who as one might expect are not too keen to give away the fruits (nor the seeds) of their labour. Each time Jack comes to ask for a bean, they will give him exactly one from their farm, but since he is not a paying customer the exact species may vary between farmers and between visits.\n\nThere is another option, but it is expensive. Jack can give up some of his cows to the mysterious stranger in exchange for one additional bean per cow. Of course, this is a drastic measure. We would like to help Jack keep as many of his cows as possible, while still achieving his goals.\n\nHow many cows will Jack need to budget for to have $100\\% $ certainty of success?\n\n-----Input-----\n - One line containing an integer $B$, ($1 \\le B \\le 20$), the number of types of beans available.\n - One line containing $B$ integers, $V_1 \\ldots V_ B$, ($0 \\le V_1 \\ldots V_ B \\le 100$), the number of each kind of bean required.\n - One line containing $T$ ($1 \\le T \\le 100$), the number of other farms in Jack\u2019s small village.\n - $T$ more lines, each beginning with an integer $M$ ($1 \\le M \\le B$) giving the number of kinds of bean this farmer grows. This is followed by $M$ more distinct integers $T_1 \\ldots T_ M$ ($1 \\le T_1 \\ldots T_ M \\le B$), each corresponding to one kind of bean.\n\n-----Output-----\n - One line containing one integer: the number of cows Jack must bring with him in order to be $100\\% $ sure of ending the day with enough beans to grow a magical beanstalk.\n\n-----Examples-----\nSample Input 1:\n1\n5\n1\n1 1\nSample Output 1:\n0\n\nSample Input 2:\n3\n5 5 5\n2\n2 1 2\n2 2 3\nSample Output 2:\n10\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given a number of Pokemon in each gym, and a number of Pokemon of each type.   You need to output the number of distinct evolution plans that satisfy the protocol. \n-----Input----- The first line contains two integers n and m (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^6)\u00a0\u2014 the number of gyms and the number of Pokemon types. The next n lines contain the description of Pokemons in the gyms. The i-th of these lines begins with the integer g_{i} (1 \u2264 g_{i} \u2264 10^5)\u00a0\u2014 the number of Pokemon in the i-th gym. After that g_{i} integers follow, denoting types of the Pokemons in the i-th gym. Each of these integers is between 1 and m. The total number of Pokemons (the sum of all g_{i}) does not exceed 5\u00b710^5. -----Output----- Output the number of valid evolution plans modulo 10^9 + 7. -----Examples----- Input 2 3 2 1 2 2 2 3 Output 1 Input 1 3 3 1 2 3 Output 6 Input 2 4 2 1 2 3 2 3 4 Output 2 Input 2 2 3 2 2 1 2 1 2 Output 1 Input 3 7 2 1 2 2 3 4 3 5 6 7 Output 24 -----Note----- In the first case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3$ In the second case, any permutation of (1,  2,  3) is valid. In the third case, there are two possible plans: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 4,4 \\rightarrow 3$ $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3,4 \\rightarrow 4$ In the fourth case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2$\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIt's that time of the year, Felicity is around the corner and you can see people celebrating all around the Himalayan region. The Himalayan region has n gyms. The i-th gym has g_{i} Pokemon in it. There are m distinct Pokemon types in the Himalayan region numbered from 1 to m. There is a special evolution camp set up in the fest which claims to evolve any Pokemon. The type of a Pokemon could change after evolving, subject to the constraint that if two Pokemon have the same type before evolving, they will have the same type after evolving. Also, if two Pokemon have different types before evolving, they will have different types after evolving. It is also possible that a Pokemon has the same type before and after evolving. \n\nFormally, an evolution plan is a permutation f of {1, 2, ..., m}, such that f(x) = y means that a Pokemon of type x evolves into a Pokemon of type y.\n\nThe gym leaders are intrigued by the special evolution camp and all of them plan to evolve their Pokemons. The protocol of the mountain states that in each gym, for every type of Pokemon, the number of Pokemon of that type before evolving any Pokemon should be equal the number of Pokemon of that type after evolving all the Pokemons according to the evolution plan. They now want to find out how many distinct evolution plans exist which satisfy the protocol.\n\nTwo evolution plans f_1 and f_2 are distinct, if they have at least one Pokemon type evolving into a different Pokemon type in the two plans, i. e. there exists an i such that f_1(i) \u2260 f_2(i).\n\nYour task is to find how many distinct evolution plans are possible such that if all Pokemon in all the gyms are evolved, the number of Pokemon of each type in each of the gyms remains the same. As the answer can be large, output it modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^6)\u00a0\u2014 the number of gyms and the number of Pokemon types.\n\nThe next n lines contain the description of Pokemons in the gyms. The i-th of these lines begins with the integer g_{i} (1 \u2264 g_{i} \u2264 10^5)\u00a0\u2014 the number of Pokemon in the i-th gym. After that g_{i} integers follow, denoting types of the Pokemons in the i-th gym. Each of these integers is between 1 and m.\n\nThe total number of Pokemons (the sum of all g_{i}) does not exceed 5\u00b710^5.\n\n\n-----Output-----\n\nOutput the number of valid evolution plans modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n2 3\n2 1 2\n2 2 3\n\nOutput\n1\n\nInput\n1 3\n3 1 2 3\n\nOutput\n6\n\nInput\n2 4\n2 1 2\n3 2 3 4\n\nOutput\n2\n\nInput\n2 2\n3 2 2 1\n2 1 2\n\nOutput\n1\n\nInput\n3 7\n2 1 2\n2 3 4\n3 5 6 7\n\nOutput\n24\n\n\n\n-----Note-----\n\nIn the first case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3$\n\nIn the second case, any permutation of (1,  2,  3) is valid.\n\nIn the third case, there are two possible plans: $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 4,4 \\rightarrow 3$ $1 \\rightarrow 1,2 \\rightarrow 2,3 \\rightarrow 3,4 \\rightarrow 4$\n\nIn the fourth case, the only possible evolution plan is: $1 \\rightarrow 1,2 \\rightarrow 2$\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a line of length $n$ and you want to divide it into several non-empty sections. The value of $i$-th element is $a_i$. You want to generate the maximum number of sections from the list. There is a restriction for each section: the number of values in the section multiplied by the minimum value among all values in the section must be at least $x$. Each value should belong to at most one section. Some value may be left without being part of any section. \n-----Input----- The first line of input contains two space-separated integers n and m (1 \u2264 n, m \u2264 5000, n \u2265 m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number s_{i} (1 \u2264 s_{i} \u2264 m), and one real number x_{i} (0 \u2264 x_{i} \u2264 10^9), the species and position of the i-th plant. Each x_{i} will contain no more than 6 digits after the decimal point. It is guaranteed that all x_{i} are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their x_{i} coordinates (x_{i} < x_{i} + 1, 1 \u2264 i < n). -----Output----- Output a single integer \u2014 the minimum number of plants to be replanted. -----Examples----- Input 3 2 2 1 1 2.0 1 3.100 Output 1 Input 3 3 1 5.0 2 5.5 3 6.0 Output 0 Input 6 3 1 14.284235 2 17.921382 1 20.328172 3 20.842331 1 25.790145 1 27.204125 Output 2 -----Note----- In the first test case, Emuskald can replant the first plant to the right of the last plant, so the answer is 1. In the second test case, the species are already in the correct order, so no replanting is needed.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nEmuskald is an avid horticulturist and owns the world's longest greenhouse \u2014 it is effectively infinite in length.\n\nOver the years Emuskald has cultivated n plants in his greenhouse, of m different plant species numbered from 1 to m. His greenhouse is very narrow and can be viewed as an infinite line, with each plant occupying a single point on that line.\n\nEmuskald has discovered that each species thrives at a different temperature, so he wants to arrange m - 1 borders that would divide the greenhouse into m sections numbered from 1 to m from left to right with each section housing a single species. He is free to place the borders, but in the end all of the i-th species plants must reside in i-th section from the left.\n\nOf course, it is not always possible to place the borders in such way, so Emuskald needs to replant some of his plants. He can remove each plant from its position and place it anywhere in the greenhouse (at any real coordinate) with no plant already in it. Since replanting is a lot of stress for the plants, help Emuskald find the minimum number of plants he has to replant to be able to place the borders.\n\n\n-----Input-----\n\nThe first line of input contains two space-separated integers n and m (1 \u2264 n, m \u2264 5000, n \u2265 m), the number of plants and the number of different species. Each of the following n lines contain two space-separated numbers: one integer number s_{i} (1 \u2264 s_{i} \u2264 m), and one real number x_{i} (0 \u2264 x_{i} \u2264 10^9), the species and position of the i-th plant. Each x_{i} will contain no more than 6 digits after the decimal point.\n\nIt is guaranteed that all x_{i} are different; there is at least one plant of each species; the plants are given in order \"from left to the right\", that is in the ascending order of their x_{i} coordinates (x_{i} < x_{i} + 1, 1 \u2264 i < n).\n\n\n-----Output-----\n\nOutput a single integer \u2014 the minimum number of plants to be replanted.\n\n\n-----Examples-----\nInput\n3 2\n2 1\n1 2.0\n1 3.100\n\nOutput\n1\n\nInput\n3 3\n1 5.0\n2 5.5\n3 6.0\n\nOutput\n0\n\nInput\n6 3\n1 14.284235\n2 17.921382\n1 20.328172\n3 20.842331\n1 25.790145\n1 27.204125\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first test case, Emuskald can replant the first plant to the right of the last plant, so the answer is 1.\n\nIn the second test case, the species are already in the correct order, so no replanting is needed.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n A Fenwick Tree (also known as a Binary Indexed Tree) is a data structure on an array which enables fast ($O(\\log n)$) updates and prefix sum queries on the underlying data. For this problem, implement a Fenwick Tree to support operations of two types: (a) increment an element in the array or (b) query the prefix sum of a portion of the array. \n-----Input----- The first line of input contains two integers $N$, $Q$, where $1 \\le N \\le 5000000$ is the length of the array and $0 \\le Q \\le 5000000$ is the number of operations. Then follow $Q$ lines giving the operations. There are two types of operations:  - \u201c+ $i$ $\\delta $\u201d indicates that $a[i]$ is incremented by $\\delta $, where $0 \\le i < N$ and $-10^9 \\le \\delta \\le 10^9$ (both are integers)  - \u201c? $i$\u201d is a query for the value of $a[0] + a[1] + \\ldots + a[i-1]$, where $0 \\le i \\le N$ (for $i = 0$ this is interpreted as an empty sum) You should assume that every array entry is initially $0$. -----Output----- For each query in the input, output one line giving the answer to that query. -----Examples----- Sample Input: 10 4 + 7 23 ? 8 + 3 17 ? 8 Sample Output: 23 40\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA Fenwick Tree (also known as a Binary Indexed Tree) is a data structure on an array which enables fast ($O(\\log n)$) updates and prefix sum queries on the underlying data.\n\nFor this problem, implement a Fenwick Tree to support operations of two types: (a) increment an element in the array or (b) query the prefix sum of a portion of the array.\n\n-----Input-----\nThe first line of input contains two integers $N$, $Q$, where $1 \\le N \\le 5000000$ is the length of the array and $0 \\le Q \\le 5000000$ is the number of operations. Then follow $Q$ lines giving the operations. There are two types of operations:\n - \u201c+ $i$ $\\delta $\u201d indicates that $a[i]$ is incremented by $\\delta $, where $0 \\le i < N$ and $-10^9 \\le \\delta \\le 10^9$ (both are integers)\n - \u201c? $i$\u201d is a query for the value of $a[0] + a[1] + \\ldots + a[i-1]$, where $0 \\le i \\le N$ (for $i = 0$ this is interpreted as an empty sum)\n\nYou should assume that every array entry is initially $0$.\n\n-----Output-----\nFor each query in the input, output one line giving the answer to that query.\n\n-----Examples-----\nSample Input:\n10 4\n+ 7 23\n? 8\n+ 3 17\n? 8\nSample Output:\n23\n40\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Vladimir wants to modernize partitions in his office. To make the office more comfortable he decided to remove a partition and plant several bamboos in a row. He thinks it would be nice if there are n bamboos in a row, and the i-th from the left is a_{i} meters high.  Vladimir has just planted n bamboos in a row, each of which has height 0 meters right now, but they grow 1 meter each day. In order to make the partition nice Vladimir can cut each bamboo once at any height (no greater that the height of the bamboo), and then the bamboo will stop growing. Vladimir wants to check the bamboos each d days (i.e. d days after he planted, then after 2d days and so on), and cut the bamboos that reached the required height. Vladimir wants the total length of bamboo parts he will cut off to be no greater than k meters. What is the maximum value d he can choose so that he can achieve what he wants without cutting off more than k meters of bamboo \n-----Input----- The first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^11)\u00a0\u2014 the number of bamboos and the maximum total length of cut parts, in meters. The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the required heights of bamboos, in meters. -----Output----- Print a single integer\u00a0\u2014 the maximum value of d such that Vladimir can reach his goal. -----Examples----- Input 3 4 1 3 5 Output 3 Input 3 40 10 30 50 Output 32 -----Note----- In the first example Vladimir can check bamboos each 3 days. Then he will cut the first and the second bamboos after 3 days, and the third bamboo after 6 days. The total length of cut parts is 2 + 0 + 1 = 3 meters.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nVladimir wants to modernize partitions in his office. To make the office more comfortable he decided to remove a partition and plant several bamboos in a row. He thinks it would be nice if there are n bamboos in a row, and the i-th from the left is a_{i} meters high. \n\nVladimir has just planted n bamboos in a row, each of which has height 0 meters right now, but they grow 1 meter each day. In order to make the partition nice Vladimir can cut each bamboo once at any height (no greater that the height of the bamboo), and then the bamboo will stop growing.\n\nVladimir wants to check the bamboos each d days (i.e. d days after he planted, then after 2d days and so on), and cut the bamboos that reached the required height. Vladimir wants the total length of bamboo parts he will cut off to be no greater than k meters.\n\nWhat is the maximum value d he can choose so that he can achieve what he wants without cutting off more than k meters of bamboo?\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^11)\u00a0\u2014 the number of bamboos and the maximum total length of cut parts, in meters.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the required heights of bamboos, in meters.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum value of d such that Vladimir can reach his goal.\n\n\n-----Examples-----\nInput\n3 4\n1 3 5\n\nOutput\n3\n\nInput\n3 40\n10 30 50\n\nOutput\n32\n\n\n\n-----Note-----\n\nIn the first example Vladimir can check bamboos each 3 days. Then he will cut the first and the second bamboos after 3 days, and the third bamboo after 6 days. The total length of cut parts is 2 + 0 + 1 = 3 meters.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Gerald got a very curious hexagon for his birthday. The boy found out that all the angles of the hexagon are equal to $120^{\\circ}$. Then he measured the length of its sides, and found that each of them is equal to an integer number of centimeters. There the properties of the hexagon ended and Gerald decided to draw on it. He painted a few lines, parallel to the sides of the hexagon. The lines split the hexagon into regular triangles with sides of 1 centimeter. Now Gerald wonders how many triangles he has got. But there were so many of them that Gerald lost the track of his counting. Help the boy count the triangles. \n\n-----Input----- The first and the single line of the input contains 6 space-separated integers a_1, a_2, a_3, a_4, a_5 and a_6 (1 \u2264 a_{i} \u2264 1000) \u2014 the lengths of the sides of the hexagons in centimeters in the clockwise order. It is guaranteed that the hexagon with the indicated properties and the exactly such sides exists. -----Output----- Print a single integer \u2014 the number of triangles with the sides of one 1 centimeter, into which the hexagon is split. -----Examples----- Input 1 1 1 1 1 1 Output 6 Input 1 2 1 2 1 2 Output 13 -----Note----- This is what Gerald's hexagon looks like in the first sample: $\\theta$ And that's what it looks like in the second sample: $A$\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nGerald got a very curious hexagon for his birthday. The boy found out that all the angles of the hexagon are equal to $120^{\\circ}$. Then he measured the length of its sides, and found that each of them is equal to an integer number of centimeters. There the properties of the hexagon ended and Gerald decided to draw on it.\n\nHe painted a few lines, parallel to the sides of the hexagon. The lines split the hexagon into regular triangles with sides of 1 centimeter. Now Gerald wonders how many triangles he has got. But there were so many of them that Gerald lost the track of his counting. Help the boy count the triangles.\n\n\n-----Input-----\n\nThe first and the single line of the input contains 6 space-separated integers a_1, a_2, a_3, a_4, a_5 and a_6 (1 \u2264 a_{i} \u2264 1000) \u2014 the lengths of the sides of the hexagons in centimeters in the clockwise order. It is guaranteed that the hexagon with the indicated properties and the exactly such sides exists.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of triangles with the sides of one 1 centimeter, into which the hexagon is split.\n\n\n-----Examples-----\nInput\n1 1 1 1 1 1\n\nOutput\n6\n\nInput\n1 2 1 2 1 2\n\nOutput\n13\n\n\n\n-----Note-----\n\nThis is what Gerald's hexagon looks like in the first sample:\n\n$\\theta$\n\nAnd that's what it looks like in the second sample:\n\n$A$\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Seyyed and MoJaK are friends of Sajjad. Sajjad likes a permutation. Seyyed wants to change the permutation in a way that Sajjad won't like it. Seyyed thinks more swaps yield more probability to do that, so he makes MoJaK to perform a swap between every pair of positions (i, j), where i < j, exactly once. MoJaK doesn't like to upset Sajjad. Given the permutation, determine whether it is possible to swap all pairs of positions so that the permutation stays the same. If it is possible find how to do that.\n-----Input----- The first line contains single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the size of the permutation. As the permutation is not important, you can consider a_{i} = i, where the permutation is a_1, a_2, ..., a_{n}. -----Output----- If it is not possible to swap all pairs of positions so that the permutation stays the same, print \"NO\", Otherwise print \"YES\", then print $\\frac{n(n - 1)}{2}$ lines: the i-th of these lines should contain two integers a and b (a < b)\u00a0\u2014 the positions where the i-th swap is performed. -----Examples----- Input 3 Output NO Input 1 Output YES\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nSeyyed and MoJaK are friends of Sajjad. Sajjad likes a permutation. Seyyed wants to change the permutation in a way that Sajjad won't like it. Seyyed thinks more swaps yield more probability to do that, so he makes MoJaK to perform a swap between every pair of positions (i, j), where i < j, exactly once. MoJaK doesn't like to upset Sajjad.\n\nGiven the permutation, determine whether it is possible to swap all pairs of positions so that the permutation stays the same. If it is possible find how to do that. \n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the size of the permutation.\n\nAs the permutation is not important, you can consider a_{i} = i, where the permutation is a_1, a_2, ..., a_{n}.\n\n\n-----Output-----\n\nIf it is not possible to swap all pairs of positions so that the permutation stays the same, print \"NO\",\n\nOtherwise print \"YES\", then print $\\frac{n(n - 1)}{2}$ lines: the i-th of these lines should contain two integers a and b (a < b)\u00a0\u2014 the positions where the i-th swap is performed.\n\n\n-----Examples-----\nInput\n3\n\nOutput\nNO\n\nInput\n1\n\nOutput\nYES\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given a list of drives and their capacities. Find the minimum capacity of an extra drive needed to reformat all the drives.\n-----Input----- The input begins with a line containing one integer $n$ ($1 \\le n \\le 10^6$), which is the number of drives in your cluster. Following this are $n$ lines, each describing a drive as two integers $a$ and $b$, where $a$ is the capacity with the old file system and $b$ is the capacity with the new file system. All capacities are given in gigabytes and satisfy $1 \\le a,b \\le 10^9$. (One thousand petabytes should be enough for everyone, right?) -----Output----- Display the total extra capacity in gigabytes you must buy to reformat the drives. -----Examples----- Sample Input: 4 6 6 1 7 3 5 3 5 Sample Output: 1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou administer a large cluster of computers with hard drives that use various file system types to store data. You recently decided to unify the file systems to the same type. That is quite a challenge since all the drives are currently in use, all of them are filled with important data to the limits of their capacities, and you cannot afford to lose any of the data. Moreover, reformatting a drive to use a new file system may significantly change the drive\u2019s capacity. To make the reformat possible, you will have to buy an extra hard drive. Obviously, you want to save money by minimizing the size of such extra storage.\n\nYou can reformat the drives in any order. Prior to reformatting a drive, you must move all data from that drive to one or more other drives, splitting the data if necessary. After a drive is reformatted, you can immediately start using it to store data from other drives. It is not necessary to put all the data on the same drives they originally started on \u2013 in fact, this might even be impossible if some of the drives have smaller capacity with the new file system. It is also allowed for some data to end up on the extra drive.\n\nAs an example, suppose you have four drives $A$, $B$, $C$, and $D$ with drive capacities $6$, $1$, $3$, and $3$ GB. Under the new file system, the capacities become $6$, $7$, $5$, and $5$\u00a0GB, respectively. If you buy only $1$ GB of extra space, you can move the data from drive $B$ there and then reformat drive $B$. Now you have $7$ GB free on drive $B$, so you can move the $6$ GB from drive $A$ there and reformat drive $A$. Finally, you move the six total gigabytes from drives $C$ and $D$ to drive $A$, and reformat $C$ and $D$.\n\n-----Input-----\nThe input begins with a line containing one integer $n$ ($1 \\le n \\le 10^6$), which is the number of drives in your cluster. Following this are $n$ lines, each describing a drive as two integers $a$ and $b$, where $a$ is the capacity with the old file system and $b$ is the capacity with the new file system.\n\nAll capacities are given in gigabytes and satisfy $1 \\le a,b \\le 10^9$. (One thousand petabytes should be enough for everyone, right?)\n\n-----Output-----\nDisplay the total extra capacity in gigabytes you must buy to reformat the drives.\n\n-----Examples-----\nSample Input:\n4\n6 6\n1 7\n3 5\n3 5\nSample Output:\n1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given an array of numbers, return the difference between the largest and smallest values. The array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow. \n-----Input----- The first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$). The second line contains a single string of length $n$ that only consists of $0$ and $1$, representing the situation of these $n$ cards, where the color side of the $i$-th card faces up if the $i$-th character is $1$, or otherwise, it faces down and the $i$-th character is $0$. -----Output----- Print \"once again\" (without quotes) if the total number of their moves can exceed $10^9$, which is considered a draw. In other cases, print \"tokitsukaze\" (without quotes) if Tokitsukaze will win, or \"quailty\" (without quotes) if Quailty will win. Note that the output characters are case-sensitive, and any wrong spelling would be rejected. -----Examples----- Input 4 2 0101 Output quailty Input 6 1 010101 Output once again Input 6 5 010101 Output tokitsukaze Input 4 1 0011 Output once again -----Note----- In the first example, no matter how Tokitsukaze moves, there would be three cards with color sides facing the same direction after her move, and Quailty can flip the last card to this direction and win. In the second example, no matter how Tokitsukaze moves, Quailty can choose the same card and flip back to the initial situation, which can allow the game to end in a draw. In the third example, Tokitsukaze can win by flipping the leftmost five cards up or flipping the rightmost five cards down. The fourth example can be explained in the same way as the second example does.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\n\"Duel!\"\n\nBetting on the lovely princess Claris, the duel between Tokitsukaze and Quailty has started.\n\nThere are $n$ cards in a row. Each card has two sides, one of which has color. At first, some of these cards are with color sides facing up and others are with color sides facing down. Then they take turns flipping cards, in which Tokitsukaze moves first. In each move, one should choose exactly $k$ consecutive cards and flip them to the same side, which means to make their color sides all face up or all face down. If all the color sides of these $n$ cards face the same direction after one's move, the one who takes this move will win.\n\nPrincess Claris wants to know who will win the game if Tokitsukaze and Quailty are so clever that they won't make mistakes.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^5$).\n\nThe second line contains a single string of length $n$ that only consists of $0$ and $1$, representing the situation of these $n$ cards, where the color side of the $i$-th card faces up if the $i$-th character is $1$, or otherwise, it faces down and the $i$-th character is $0$.\n\n\n-----Output-----\n\nPrint \"once again\" (without quotes) if the total number of their moves can exceed $10^9$, which is considered a draw.\n\nIn other cases, print \"tokitsukaze\" (without quotes) if Tokitsukaze will win, or \"quailty\" (without quotes) if Quailty will win.\n\nNote that the output characters are case-sensitive, and any wrong spelling would be rejected.\n\n\n-----Examples-----\nInput\n4 2\n0101\n\nOutput\nquailty\n\nInput\n6 1\n010101\n\nOutput\nonce again\n\nInput\n6 5\n010101\n\nOutput\ntokitsukaze\n\nInput\n4 1\n0011\n\nOutput\nonce again\n\n\n\n-----Note-----\n\nIn the first example, no matter how Tokitsukaze moves, there would be three cards with color sides facing the same direction after her move, and Quailty can flip the last card to this direction and win.\n\nIn the second example, no matter how Tokitsukaze moves, Quailty can choose the same card and flip back to the initial situation, which can allow the game to end in a draw.\n\nIn the third example, Tokitsukaze can win by flipping the leftmost five cards up or flipping the rightmost five cards down.\n\nThe fourth example can be explained in the same way as the second example does.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a sequence of black and white stripes. You can split the sequence in some place into two parts, then reverses each of them and sticks them together again. Determine the maximum possible length of the zebra that you can produce. \n-----Input----- The only line contains a string $s$ ($1 \\le |s| \\le 10^5$, where $|s|$ denotes the length of the string $s$) comprised of lowercase English letters 'b' and 'w' only, where 'w' denotes a white piece and 'b' denotes a black piece. -----Output----- Print a single integer\u00a0\u2014 the maximum possible zebra length. -----Examples----- Input bwwwbwwbw Output 5 Input bwwbwwb Output 3 -----Note----- In the first example one of the possible sequence of operations is bwwwbww|bw $\\to$ w|wbwwwbwb $\\to$ wbwbwwwbw, that gives the answer equal to $5$. In the second example no operation can increase the answer.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nIs there anything better than going to the zoo after a tiresome week at work? No wonder Grisha feels the same while spending the entire weekend accompanied by pretty striped zebras. \n\nInspired by this adventure and an accidentally found plasticine pack (represented as a sequence of black and white stripes), Grisha now wants to select several consequent (contiguous) pieces of alternating colors to create a zebra. Let's call the number of selected pieces the length of the zebra.\n\nBefore assembling the zebra Grisha can make the following operation $0$ or more times. He splits the sequence in some place into two parts, then reverses each of them and sticks them together again. For example, if Grisha has pieces in the order \"bwbbw\" (here 'b' denotes a black strip, and 'w' denotes a white strip), then he can split the sequence as bw|bbw (here the vertical bar represents the cut), reverse both parts and obtain \"wbwbb\".\n\nDetermine the maximum possible length of the zebra that Grisha can produce.\n\n\n-----Input-----\n\nThe only line contains a string $s$ ($1 \\le |s| \\le 10^5$, where $|s|$ denotes the length of the string $s$) comprised of lowercase English letters 'b' and 'w' only, where 'w' denotes a white piece and 'b' denotes a black piece.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum possible zebra length.\n\n\n-----Examples-----\nInput\nbwwwbwwbw\n\nOutput\n5\n\nInput\nbwwbwwb\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example one of the possible sequence of operations is bwwwbww|bw $\\to$ w|wbwwwbwb $\\to$ wbwbwwwbw, that gives the answer equal to $5$.\n\nIn the second example no operation can increase the answer.\n\"\"\"\ndef code():"
}