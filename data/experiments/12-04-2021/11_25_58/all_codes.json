{
    "0": "\n    n, r, k, x0 = map(int, input().split())\n    buckets = [0] * n\n    buckets[x0] = 1\n    a = 0\n    for i in range(r):\n        x = (53 * a + buckets[i % n]) % 199933\n        if buckets[x] == k:\n            print(\"OVERFLOW\")\n            return\n        buckets[x] += 1\n        a = x\n    print(a)\n",
    "1": "\n    N, R, K, X0, A, B = map(int, input().split())\n    X = [X0]\n    for i in range(R):\n        X.append((A * X[-1] + B) % N)\n    X = sorted(set(X))\n    X = [X[i] for i in range(len(X)) if i == 0 or X[i] != X[i-1]]\n    if X[0] == 0:\n        X = X[1:]\n    if len(X) == 1:\n        print(\"OVERFLOW\")\n    else:\n        a = 0\n        for i in range(R):\n            a = (53 * a + X[i]) % 199933\n        print(a)\n",
    "2": "\n    n = int(input())\n    x = []\n    z = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        x.append(a)\n        z.append(b)\n    x.sort()\n    z.sort()\n    print(z[-1] - z[0])\n",
    "3": "\n    n = int(input())\n    x = []\n    z = []\n    for i in range(n):\n        x_i, z_i = map(int, input().split())\n        x.append(x_i)\n        z.append(z_i)\n    x_max = max(x)\n    x_min = min(x)\n    z_max = max(z)\n    z_min = min(z)\n    L = max(z_max - z_min, x_max - x_min)\n    print(L)\n",
    "4": "\n    ",
    "5": "\n    ",
    "6": "\n    S = list(map(int, input().split()))\n    m = int(input())\n    for i in range(m):\n        H = list(map(int, input().split()))\n        H = H[1:]\n        if sum(H) == 0:\n            print(\"L\")\n        else:\n            print(\"W\")",
    "7": "\n    S = [int(x) for x in input().split()]\n    m = int(input())\n    for i in range(m):\n        H = [int(x) for x in input().split()]\n        H = H[1:]\n        if sum(H) % 2 == 0:\n            print(\"W\", end=\"\")\n        else:\n            print(\"L\", end=\"\")\n",
    "8": "\n    n, m = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    roads.sort(key=lambda x: x[2])\n    cities = [0] * n\n    for i in range(n):\n        cities[i] = [0] * n\n    for i in range(n):\n        for j in range(n):\n            cities[i][j] = [0] * (n + 1)\n    for i in range(n):\n        for j in range(n):\n            cities[i][j][0] = [0] * (n + 1)\n    for i in range(n):\n        for j in range(n):\n            cities[i][j][0][0] = i\n            cities[i][j][0][1] = j\n    for i in range(m):\n        cities[roads[i][0]][roads[i][1]][0][roads[i][2]] = 1\n        cities[roads[i][1]][roads[i][0]][0][roads[i][2]] = 1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n + 1):\n                for l in range(n + 1):\n                    if cities[i][j][k][l] == 1:\n                        for m in range(n + 1):\n                            if cities[i][j][k][m] == 0:\n                                cities[i][j][k][m] = 1\n                            if cities[i][j][m][l] == 0:\n                                cities[i][j][m][l] = 1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n + 1):\n                for l in range(n + 1):\n                    if cities[i][j][k][l] == 0:\n                        cities[i][j][k][l] = -1\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == -1:\n                cities[i][j][n][n] = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n + 1):\n                for l in range(n + 1):\n                    if cities[i][j][k][l] == 1:\n                        for m in range(n + 1):\n                            if cities[i][j][k][m] == 1:\n                                cities[i][j][k][n] = 1\n                            if cities[i][j][m][l] == 1:\n                                cities[i][j][n][l] = 1\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == 0:\n                cities[i][j][n][n] = 1\n    for i in range(n):\n        for j in range(n):\n            for k in range(n + 1):\n                for l in range(n + 1):\n                    if cities[i][j][k][l] == -1:\n                        cities[i][j][k][l] = 0\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == 1:\n                cities[i][j][n][n] = 0\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == 0:\n                cities[i][j][n][n] = -1\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == -1:\n                cities[i][j][n][n] = 1\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == 1:\n                cities[i][j][n][n] = 0\n    for i in range(n):\n        for j in range(n):\n            if cities[i][j][n][n] == 0:\n                cities[i][j][n][n] = -1\n    for i in",
    "9": "\n    n, m = map(int, input().split())\n    roads = [list(map(int, input().split())) for _ in range(m)]\n    roads.sort(key=lambda x: x[2])\n    cities = [[] for _ in range(n)]\n    for road in roads:\n        cities[road[0]].append(road[1])\n        cities[road[1]].append(road[0])\n    for i in range(n):\n        cities[i].sort()\n    visited = [False] * n\n    def dfs(city, visited, cities, current_range):\n        if visited[city]:\n            return\n        visited[city] = True\n        for next_city in cities[city]:\n            dfs(next_city, visited, cities, current_range + roads[city][2])\n    dfs(0, visited, cities, 0)\n    if False in visited:\n        print(\"IMPOSSIBLE\")\n    else:\n        print(current_range)\n",
    "10": "\n    n = int(input())\n    s = input()\n    if s.count('C') == 0 or s.count('M') == 0 or s.count('Y') == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")",
    "11": "\n    n = int(input())\n    s = input()\n    if n == 1:\n        if s == '?':\n            print('Yes')\n        else:\n            print('No')\n    else:\n        if s[0] == '?':\n            if s[1] == '?':\n                print('Yes')\n            else:\n                if s[1] == 'C' or s[1] == 'M':\n                    print('Yes')\n                else:\n                    print('No')\n        else:\n            if s[0] == 'C' or s[0] == 'M':\n                if s[1] == '?':\n                    print('Yes')\n                else:\n                    if s[1] == 'C' or s[1] == 'M':\n                        print('No')\n                    else:\n                        print('Yes')\n            else:\n                if s[1] == '?':\n                    print('Yes')\n                else:\n                    if s[1] == 'C' or s[1] == 'M':\n                        print('No')\n                    else:\n                        print('Yes')\n",
    "12": "\n    n = int(input())\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = []\n    for i in range(1, n + 1):\n        line = input().split()\n        if line[0] == \"IN\":\n            graph[i].append(int(line[1]))\n        else:\n            for j in line[1:]:\n                graph[i].append(int(j))\n    for i in range(1, n + 1):\n        if len(graph[i]) == 1:\n            start = i\n            break\n    queue = [start]\n    visited = [False] * (n + 1)\n    visited[start] = True\n    while queue:\n        current = queue.pop(0)\n        for i in graph[current]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n    for i in range(1, n + 1):\n        if not visited[i]:\n            end = i\n            break\n    queue = [end]\n    visited = [False] * (n + 1)\n    visited[end] = True\n    while queue:\n        current = queue.pop(0)\n        for i in graph[current]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n    for i in range(1, n + 1):\n        if not visited[i]:\n            middle = i\n            break\n    queue = [middle]\n    visited = [False] * (n + 1)\n    visited[middle] = True\n    while queue:\n        current = queue.pop(0)\n        for i in graph[current]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n    queue = [start]\n    visited = [False] * (n + 1)\n    visited[start] = True\n    while queue:\n        current = queue.pop(0)\n        for i in graph[current]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n    for i in range(1, n + 1):\n        if not visited[i]:\n            broken = i\n            break\n    print(broken)\n    queue = [broken]\n    visited = [False] * (n + 1)\n    visited[broken] = True\n    while queue:\n        current = queue.pop(0)\n        for i in graph[current]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n    for i in range(1, n + 1):\n        if not visited[i]:\n            output = i\n            break\n    print(output)\n\nif __name__ == \"__main__\":\n    code()",
    "13": "\n    n = int(input())\n    vertices = []\n    for i in range(n):\n        vertices.append(input().split())\n    for i in range(n):\n        if vertices[i][0] == 'IN':\n            vertices[i][0] = int(vertices[i][1])\n        else:\n            for j in range(len(vertices[i])):\n                vertices[i][j] = int(vertices[i][j])\n    for i in range(n):\n        if vertices[i][0] == 'IN':\n            vertices[i][0] = vertices[i][0] ^ 1\n    for i in range(n):\n        if vertices[i][0] == 'AND':\n            vertices[i][0] = vertices[i][1] & vertices[i][2]\n        elif vertices[i][0] == 'OR':\n            vertices[i][0] = vertices[i][1] | vertices[i][2]\n        elif vertices[i][0] == 'XOR':\n            vertices[i][0] = vertices[i][1] ^ vertices[i][2]\n        elif vertices[i][0] == 'NOT':\n            vertices[i][0] = ~vertices[i][1]\n    print(bin(vertices[0][0])[2:])\n",
    "14": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    recipes = []\n    for i in range(m):\n        recipes.append(list(map(int, input().split())))\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    for i in range(n):\n        for j in range(m):\n            if i == recipes[j][1]:\n                d[i] += recipes[j][2]\n    for i in range(n):\n        for j in range(m):\n            if i == recipes[j][0]:\n                d[i] += a[recipes[j][1]] * recipes[j][2]\n    for i in range(n):\n        print(d[i], end=' ')",
    "15": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        d[u].append((v, w))\n    for i in range(n):\n        for j in range(len(d[i])):\n            v, w = d[i][j]\n            d[i][j] = (v, w * a[i])\n    for i in range(n):\n        for j in range(len(d[i])):\n            v, w = d[i][j]\n            for k in range(len(d[v])):\n                u, x = d[v][k]\n                d[v][k] = (u, w + x)\n    for i in range(n):\n        a[i] = sum(x for _, x in d[i])\n    print(*a)\n",
    "16": "\n    n, k = map(int, input().split())\n    pref = []\n    for i in range(n):\n        q = int(input())\n        pref.append(input().split())\n    p = int(input())\n    players = input().split()\n    for i in range(n):\n        for j in range(k):\n            print(pref[i][j], end = \" \")\n        print()",
    "17": "\n    n, k = map(int, input().split())\n    pref = [input().split() for _ in range(n)]\n    p = int(input())\n    players = input().split()\n    for i in range(n):\n        for j in range(k):\n            if len(pref[i]) == 0:\n                break\n            if pref[i][0] in players:\n                print(pref[i][0], end=\" \")\n                pref[i].pop(0)\n                players.remove(pref[i][0])",
    "18": "\n    s = input()\n    s = s.replace(\" \",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\".\",\"\")\n    s = s.replace(\"!\",\"\")\n    s = s.replace(\"?\",\"\")\n    s = s.replace(\"'\",\"\")\n    s = s.replace(\"-\",\"\")\n    s = s.replace(\"_\",\"\")\n    s = s.replace(\"(\",\"\")\n    s = s.replace(\")\",\"\")\n    s = s.replace(\"[\",\"\")\n    s = s.replace(\"]\",\"\")\n    s = s.replace(\";\",\"\")\n    s = s.replace(\"/\",\"\")\n    s = s.replace(\"$\",\"\")\n    s = s.replace(\"&\",\"\")\n    s = s.replace(\"@\",\"\")\n    s = s.replace(\"#\",\"\")\n    s = s.replace(\"%\",\"\")\n    s = s.replace(\"^\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"+\",\"\")\n    s = s.replace(\"=\",\"\")\n    s = s.replace(\"|\",\"\")\n    s = s.replace(\"~\",\"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"<\",\"\")\n    s = s.replace(\">\",\"\")\n    s = s.replace(\"0\",\"\")\n    s = s.replace(\"1\",\"\")\n    s = s.replace(\"2\",\"\")\n    s = s.replace(\"3\",\"\")\n    s = s.replace(\"4\",\"\")\n    s = s.replace(\"5\",\"\")\n    s = s.replace(\"6\",\"\")\n    s = s.replace(\"7\",\"\")\n    s = s.replace(\"8\",\"\")\n    s = s.replace(\"9\",\"\")\n    s = s.replace(\"a\",\"\")\n    s = s.replace(\"b\",\"\")\n    s = s.replace(\"c\",\"\")\n    s = s.replace(\"d\",\"\")\n    s = s.replace(\"e\",\"\")\n    s = s.replace(\"f\",\"\")\n    s = s.replace(\"g\",\"\")\n    s = s.replace(\"h\",\"\")\n    s = s.replace(\"i\",\"\")\n    s = s.replace(\"j\",\"\")\n    s = s.replace(\"k\",\"\")\n    s = s.replace(\"l\",\"\")\n    s = s.replace(\"m\",\"\")\n    s = s.replace(\"n\",\"\")\n    s = s.replace(\"o\",\"\")\n    s = s.replace(\"p\",\"\")\n    s = s.replace(\"q\",\"\")\n    s = s.replace(\"r\",\"\")\n    s = s.replace(\"s\",\"\")\n    s = s.replace(\"t\",\"\")\n    s = s.replace(\"u\",\"\")\n    s = s.replace(\"v\",\"\")\n    s = s.replace(\"w\",\"\")\n    s = s.replace(\"x\",\"\")\n    s = s.replace(\"y\",\"\")\n    s = s.replace(\"z\",\"\")\n    s = s.replace(\"A\",\"\")\n    s = s.replace(\"B\",\"\")\n    s = s.replace(\"C\",\"\")\n    s = s.replace(\"D\",\"\")\n    s = s.replace(\"E\",\"\")\n    s = s.replace(\"F\",\"\")\n    s = s.replace(\"G\",\"\")\n    s = s.replace(\"H\",\"\")\n    s = s.replace(\"I\",\"\")\n    s = s.replace(\"J\",\"\")\n    s = s.replace(\"K\",\"\")\n    s = s.replace(\"L\",\"\")\n    s = s.replace(\"M\",\"\")\n    s = s.replace(\"N\",\"\")\n    s = s.replace(\"O\",\"\")\n    s = s.replace(\"P\",\"\")\n    s = s.replace(\"Q\",\"\")\n    s = s.replace(\"R\",\"\")\n    s = s.replace(\"S\",\"\")\n    s = s.replace(\"T\",\"\")\n    s = s.replace(\"U\",\"\")\n    s = s.replace(\"V\",\"\")\n    s = s.replace(\"W\",\"\")\n    s = s.replace(\"X\",\"\")\n    s = s.replace(\"Y\",\"\")\n    s = s.replace(\"Z\",\"\")\n    s = s.replace(\" \",\"\")\n    s = s.replace(\"!\",\"\")\n    s = s.replace",
    "19": "\n    s = input()\n    s = s.replace(\" \",\"\")\n    s = s.replace(\",\",\"\")\n    s = s.replace(\".\",\"\")\n    s = s.replace(\"!\",\"\")\n    s = s.replace(\"?\",\"\")\n    s = s.replace(\"'\",\"\")\n    s = s.replace(\"-\",\"\")\n    s = s.replace(\"_\",\"\")\n    s = s.replace(\"/\",\"\")\n    s = s.replace(\"(\",\"\")\n    s = s.replace(\")\",\"\")\n    s = s.replace(\";\",\"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"*\",\"\")\n    s = s.replace(\"+\",\"\")\n    s = s.replace(\"=\",\"\")\n    s = s.replace(\"[\",\"\")\n    s = s.replace(\"]\",\"\")\n    s = s.replace(\"{\",\"\")\n    s = s.replace(\"}\",\"\")\n    s = s.replace(\"<\",\"\")\n    s = s.replace(\">\",\"\")\n    s = s.replace(\"~\",\"\")\n    s = s.replace(\"`\",\"\")\n    s = s.replace(\"|\",\"\")\n    s = s.replace(\"$\",\"\")\n    s = s.replace(\"%\",\"\")\n    s = s.replace(\"^\",\"\")\n    s = s.replace(\"&\",\"\")\n    s = s.replace(\"0\",\"\")\n    s = s.replace(\"1\",\"\")\n    s = s.replace(\"2\",\"\")\n    s = s.replace(\"3\",\"\")\n    s = s.replace(\"4\",\"\")\n    s = s.replace(\"5\",\"\")\n    s = s.replace(\"6\",\"\")\n    s = s.replace(\"7\",\"\")\n    s = s.replace(\"8\",\"\")\n    s = s.replace(\"9\",\"\")\n    s = s.replace(\"a\",\".-\")\n    s = s.replace(\"b\",\"-...\")\n    s = s.replace(\"c\",\"-.-.\")\n    s = s.replace(\"d\",\"-..\")\n    s = s.replace(\"e\",\".\")\n    s = s.replace(\"f\",\"..-.\")\n    s = s.replace(\"g\",\"--.\")\n    s = s.replace(\"h\",\"....\")\n    s = s.replace(\"i\",\"..\")\n    s = s.replace(\"j\",\".---\")\n    s = s.replace(\"k\",\"-.-\")\n    s = s.replace(\"l\",\".-..\")\n    s = s.replace(\"m\",\"--\")\n    s = s.replace(\"n\",\"-.\")\n    s = s.replace(\"o\",\"---\")\n    s = s.replace(\"p\",\".--.\")\n    s = s.replace(\"q\",\"--.-\")\n    s = s.replace(\"r\",\".-.\")\n    s = s.replace(\"s\",\"...\")\n    s = s.replace(\"t\",\"-\")\n    s = s.replace(\"u\",\"..-\")\n    s = s.replace(\"v\",\"...-\")\n    s = s.replace(\"w\",\".--\")\n    s = s.replace(\"x\",\"-..-\")\n    s = s.replace(\"y\",\"-.--\")\n    s = s.replace(\"z\",\"--..\")\n    s = s.replace(\"A\",\".-\")\n    s = s.replace(\"B\",\"-...\")\n    s = s.replace(\"C\",\"-.-.\")\n    s = s.replace(\"D\",\"-..\")\n    s = s.replace(\"E\",\".\")\n    s = s.replace(\"F\",\"..-.\")\n    s = s.replace(\"G\",\"--.\")\n    s = s.replace(\"H\",\"....\")\n    s = s.replace(\"I\",\"..\")\n    s = s.replace(\"J\",\".---\")\n    s = s.replace(\"K\",\"-.-\")\n    s = s.replace(\"L\",\".-..\")\n    s = s.replace(\"M\",\"--\")\n    s = s.replace(\"N\",\"-.\")\n    s = s.replace(\"O\",\"---\")\n    s = s.replace(\"P\",\".--.\")\n    s = s.replace(\"Q\",\"--.-\")\n    s = s.replace(\"R\",\".-.\")\n    s = s.replace(\"S\",\"...\")\n    s = s.replace(\"T\",\"-\")\n    s = s.replace(\"U\",\"..-\")\n    s = s"
}