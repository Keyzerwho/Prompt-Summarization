{
    "0": "Python 3\n\"\"\"\n You are given a graph which might have undirected edges. You need to direct undirected edges in such a way that the resulting graph is directed and acyclic. \n-----Input----- Input consists of the space-separated integers $1 \\le N \\le 10^6$, $1 \\le R \\le 10^7$, $1 \\le K \\le 10$, $0 \\le X_0, A, B \\le 2^{31} - 1$. -----Output----- If the leftmost bucket overflows, output \u201cOVERFLOW\u201d. Otherwise, the output should be calculated as follows: Let $O_ i$ be the bucket which the $i$:th rain drop ended up in, and let $a = 0$. Then, for every $i$ from $1$ to $R$, set $a := (53 \\cdot a + O_ i) \\mod 199933$. The output should then be a line with the integer $a$. -----Examples----- Sample Input 1: 10 6 1 2 1 8 Sample Output 1: OVERFLOW Sample Input 2: 10 6 1 4 1 8 Sample Output 2: 79732\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThere is a heavy rainfall over the Antique Cultural Museum, and the roof has sprung a leak! All the beautiful paintings risk destruction, if it weren\u2019t for one brave night watchman standing in the water\u2019s way \u2013 Klunkas Plaskocek.\n\nTo protect all of the paintings, Klunkas has brought $N$ buckets and placed them in a long row to catch the water falling from the ceiling. Each bucket can hold exactly $K$ drops of water. If a drop falls into a bucket which is full, the water drop will overflow to the bucket standing to the left. If that bucket is full as well, the drop will keep flowing left until there is a non-full bucket.\n\nKlunkas needs your help to prevent the leftmost bucket overflowing. After every drop of water falls, Klunkas wants to know which bucket it ended up in, so that he can keep track of the water levels of the buckets.\n\nDue to the very regular nature of rain, Klunkas figured that the $R$ rain drops fall in a very nice pattern. Given constants $X_0, A, B$, we define the sequence $X_ i$ as\\[ X_ i = (A \\cdot X_{i-1} + B) \\mod N \\]\n\nThe bucket which the $i$-th rain drop falls into, is then $X_ i$ for $i = 1, \\dots , R$. The leftmost bucket has the number $0$, and the rightmost bucket has the number $N-1$.\n\n-----Input-----\nInput consists of the space-separated integers $1 \\le N \\le 10^6$, $1 \\le R \\le 10^7$, $1 \\le K \\le 10$, $0 \\le X_0, A, B \\le 2^{31} - 1$.\n\n-----Output-----\nIf the leftmost bucket overflows, output \u201cOVERFLOW\u201d.\n\nOtherwise, the output should be calculated as follows:\n\nLet $O_ i$ be the bucket which the $i$:th rain drop ended up in, and let $a = 0$.\n\nThen, for every $i$ from $1$ to $R$, set $a := (53 \\cdot a + O_ i) \\mod 199933$.\n\nThe output should then be a line with the integer $a$.\n\n-----Examples-----\nSample Input 1:\n10 6 1 2 1 8\nSample Output 1:\nOVERFLOW\n\nSample Input 2:\n10 6 1 4 1 8\nSample Output 2:\n79732\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given a function f(x) that takes in $N$ integers and produces real values, find the Lipschitz constant for it. \n-----Input----- The first line contains $N$ \u2013 the number of points for which f is defined. The next $N$ lines each contain an integer $x$ and a real number $z$, which mean that $f(x) = z$. Input satisfies the following constraints:  - $2 \\leq N \\leq 200000$.  - All $x$ and $z$ are in the range $-10^9 \\leq x,z \\leq 10^9$.  - All $x$ in the input are distinct. -----Output----- Print one number \u2013 the Lipschitz constant. The result will be considered correct if it is within an absolute error of $10^{-4}$ from the jury\u2019s answer. -----Examples----- Sample Input 1: 3 1 1 2 2 3 4 Sample Output 1: 2 Sample Input 2: 2 1 4 2 2 Sample Output 2: 2\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nToday you are doing your calculus homework, and you are tasked with finding a Lipschitz constant for a function f(x), which is defined for $N$ integer numbers $x$ and produces real values. Formally, the Lipschitz constant for a function f is the smallest real number $L$ such that for any $x$ and $y$ with f(x) and f(y) defined we have:\\[ |f(x) - f(y)| \\leq L \\cdot |x - y|. \\]\n\n-----Input-----\nThe first line contains $N$ \u2013 the number of points for which f is defined. The next $N$ lines each contain an integer $x$ and a real number $z$, which mean that $f(x) = z$. Input satisfies the following constraints:\n - $2 \\leq N \\leq 200000$.\n - All $x$ and $z$ are in the range $-10^9 \\leq x,z \\leq 10^9$.\n - All $x$ in the input are distinct.\n\n-----Output-----\nPrint one number \u2013 the Lipschitz constant. The result will be considered correct if it is within an absolute error of $10^{-4}$ from the jury\u2019s answer.\n\n-----Examples-----\nSample Input 1:\n3\n1 1\n2 2\n3 4\nSample Output 1:\n2\n\nSample Input 2:\n2\n1 4\n2 2\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n # Task Given a turn sequence, with some of the directional changes replaced by question marks (   ), which mean we can take any direction at those pivots, how many different unlock patterns are consistent with this turn sequence  \n-----Input----- The input has a single string of length seven. The string consists of characters \u2018L\u2019, \u2018R\u2019, \u2018S\u2019, \u2018A\u2019 and \u2018?\u2019 that describe the directional changes at the pivots in the order of their visit. -----Output----- Output the number of different unlock patterns that have a turn sequence matching the input. -----Examples----- Sample Input: LRRRSRL Sample Output: 44\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nMany phones use a nine-pivot unlock pattern. The nine pivots are arranged as a $3 \\times 3$ grid, and numbered from $1$ to $9$ as shown in the figure. The unlock pattern is a single stroke that starts at any pivot and visits each pivot exactly once. The stroke goes in a straight line segment between each pair of consecutive pivots. It may pass a pivot multiple times but only the first time counts as a visit. The phone unlocks if the pivots are visited in a predefined secret order. The figure illustrates an unlock pattern of $2 \\rightarrow 5 \\rightarrow 3 \\rightarrow 6 \\rightarrow 7 \\rightarrow 4 \\rightarrow 1 \\rightarrow 8 \\rightarrow 9$. Due to physical constraints, it is not possible for the stroke to pass but not visit a pivot if it has not been visited before. For instance, a pattern that starts with $1 \\rightarrow 7 \\rightarrow \\dots $ is invalid because it must visit pivot $4$ before visiting pivot $7$. However, starting with $4 \\rightarrow 1 \\rightarrow 7 \\dots $ is fine because pivot $4$ is already visited when the stroke passes it again. \n\nConsider the directional changes along the unlock pattern. The pattern may take a left turn (\u2018L\u2019), a right turn (\u2018R\u2019), go straight (\u2018S\u2019), or turn around (\u2018A\u2019) at each pivot except for the first and the last pivot. If we write down the directional changes into one string, we get a string of length seven. This is the turn sequence of the unlock pattern. The turn sequence of the unlock pattern shown in the figure is \u201cLRRRSRL\u201d.\n\nGiven a turn sequence, with some of the directional changes replaced by question marks (\u2018?\u2019), which mean we can take any direction at those pivots, how many different unlock patterns are consistent with this turn sequence?\n\n-----Input-----\nThe input has a single string of length seven. The string consists of characters \u2018L\u2019, \u2018R\u2019, \u2018S\u2019, \u2018A\u2019 and \u2018?\u2019 that describe the directional changes at the pivots in the order of their visit.\n\n-----Output-----\nOutput the number of different unlock patterns that have a turn sequence matching the input.\n\n-----Examples-----\nSample Input:\nLRRRSRL\nSample Output:\n44\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n-----Input----- The first line of input contains a number $k$ ($1 \\le k \\le 100$) describing the size of $S$, followed by $k$ numbers $s_ i$ ($1 \\le s_ i \\le 10000$) describing $S$. The second line contains a number $m$ ($1 \\le m \\le 100$) describing the number of positions to evaluate. The next $m$ lines each contain a number $l$ ($1 \\le l \\le 100$) describing the number of heaps and $l$ numbers $h_ i$ ($0 \\le h_ i \\le 10000$) describing the number of beads in the heaps. -----Output----- For each position:  - If the described position is a winning position print a \u2018W\u2019.  - If the described position is a losing position print an \u2018L\u2019. -----Examples----- Sample Input: 2 2 5 3 2 5 12 3 2 4 7 4 2 3 7 12 Sample Output: LWW\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nArthur and his sister Carol have been playing a game called Nim for some time now. Nim is played as follows:\n - The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.\n - The players take turns chosing a heap and removing a positive number of beads from it.\n - The first player not able to make a move, loses.\n\nArthur and Carol really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\n - Xor the number of beads in the heaps in the current position (i.e., if we have $2$, $4$ and $7$ the xor-sum will be $1$ since $2\\ \\mathbf{xor}\\ 4\\ \\mathbf{xor}\\ 7 = 1$).\n - If the xor-sum is $0$, too bad, you will lose.\n - Otherwise, move such that the xor-sum becomes $0$. This is always possible.\n\nIt is quite easy to convince oneself that this works. Consider these facts:\n - The player that takes the last bead wins.\n - After the winning player\u2019s last move the xor-sum will be $0$.\n - The xor-sum will change after every move.\n\nWhich means that if you make sure that the xor-sum always is $0$ when you have made your move, your opponent will never be able to win, and, thus, you will win.\n\nUnderstandably it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fortunately, Arthur and Carol soon came up with a similar game, $S$-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set $S$, e.g. if we have $S = \\{ 2, 5\\} $ each player is only allowed to remove $2$ or $5$ beads. Now it is not always possible to make the xor-sum $0$ and, thus, the strategy above is useless. Or is it?\n\nYour job is to write a program that determines if a position of $S$-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n\n-----Input-----\nThe first line of input contains a number $k$ ($1 \\le k \\le 100$) describing the size of $S$, followed by $k$ numbers $s_ i$ ($1 \\le s_ i \\le 10000$) describing $S$. The second line contains a number $m$ ($1 \\le m \\le 100$) describing the number of positions to evaluate. The next $m$ lines each contain a number $l$ ($1 \\le l \\le 100$) describing the number of heaps and $l$ numbers $h_ i$ ($0 \\le h_ i \\le 10000$) describing the number of beads in the heaps.\n\n-----Output-----\nFor each position:\n - If the described position is a winning position print a \u2018W\u2019.\n - If the described position is a losing position print an \u2018L\u2019.\n\n-----Examples-----\nSample Input:\n2 2 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\nSample Output:\nLWW\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n These days, many carmakers are developing cars that run on electricity instead of gasoline. The batteries used in these cars are generally very heavy and expensive, so designers must make an important tradeoffs when determining the battery capacity, and therefore the range, of these vehicles. Your task is to help determine the minimum range necessary so that it is possible for the car to travel between any two cities on the continent. The road network on the continent consists of cities connected by bidirectional roads of different lengths. Each city contains a charging station. Along a route between two cities, the car may pass through any number of cities, but the distance between each pair of consecutive cities along the route must be no longer than the range of the car. What is the minimum range of the car so that there is a route satisfying this constraint between every pair of cities on the continent \n-----Input----- The first line of the input contains two nonnegative integers $n$ and $m$, the number of cities and roads. Each of these integers is no larger than one million. The cities are numbered from 0 to $n-1$. The first line is followed by $m$ more lines, each describing a road. Each such line contains three non-negative integers. The first two integers are the numbers of the two cities connected by the road. The third integer is the length of the road, a positive integer no larger than $10^9$. -----Output----- For each road network, output a line containing one integer, the minimum range of the car that enables it to drive from every city to every other city. If it is not possible to drive from some city to some other city regardless of the range of the car, instead output a line containing the word IMPOSSIBLE. -----Examples----- Sample Input: 3 3 0 1 3 1 2 4 2 1 5 Sample Output: 4\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThese days, many carmakers are developing cars that run on electricity instead of gasoline. The batteries used in these cars are generally very heavy and expensive, so designers must make an important tradeoffs when determining the battery capacity, and therefore the range, of these vehicles. Your task is to help determine the minimum range necessary so that it is possible for the car to travel between any two cities on the continent.\n\nThe road network on the continent consists of cities connected by bidirectional roads of different lengths. Each city contains a charging station. Along a route between two cities, the car may pass through any number of cities, but the distance between each pair of consecutive cities along the route must be no longer than the range of the car. What is the minimum range of the car so that there is a route satisfying this constraint between every pair of cities on the continent?\n\n-----Input-----\nThe first line of the input contains two nonnegative integers $n$ and $m$, the number of cities and roads. Each of these integers is no larger than one million. The cities are numbered from 0 to $n-1$. The first line is followed by $m$ more lines, each describing a road. Each such line contains three non-negative integers. The first two integers are the numbers of the two cities connected by the road. The third integer is the length of the road, a positive integer no larger than $10^9$.\n\n-----Output-----\nFor each road network, output a line containing one integer, the minimum range of the car that enables it to drive from every city to every other city. If it is not possible to drive from some city to some other city regardless of the range of the car, instead output a line containing the word IMPOSSIBLE.\n\n-----Examples-----\nSample Input:\n3 3\n0 1 3\n1 2 4\n2 1 5\nSample Output:\n4\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given a one-dimensional array of integers. You need to paint the array in such a way that no two adjacent elements are painted in the same colour. \n-----Input----- The first line contains a single positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the canvas. The second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one). -----Output----- If there are at least two different ways of painting, output \"Yes\"; otherwise output \"No\" (both without quotes). You can print each character in any case (upper or lower). -----Examples----- Input 5 CY??Y Output Yes Input 5 C?C?Y Output Yes Input 5 ?CYC? Output Yes Input 5 C??MM Output No Input 3 MMY Output No -----Note----- For the first example, there are exactly two different ways of colouring: CYCMY and CYMCY. For the second example, there are also exactly two different ways of colouring: CMCMY and CYCMY. For the third example, there are four ways of colouring: MCYCM, MCYCY, YCYCM, and YCYCY. For the fourth example, no matter how the unpainted segments are coloured, the existing magenta segments will prevent the painting from satisfying the requirements. The similar is true for the fifth example.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nOverlooking the captivating blend of myriads of vernal hues, Arkady the painter lays out a long, long canvas.\n\nArkady has a sufficiently large amount of paint of three colours: cyan, magenta, and yellow. On the one-dimensional canvas split into n consecutive segments, each segment needs to be painted in one of the colours.\n\nArkady has already painted some (possibly none or all) segments and passes the paintbrush to you. You are to determine whether there are at least two ways of colouring all the unpainted segments so that no two adjacent segments are of the same colour. Two ways are considered different if and only if a segment is painted in different colours in them.\n\n\n-----Input-----\n\nThe first line contains a single positive integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the canvas.\n\nThe second line contains a string s of n characters, the i-th of which is either 'C' (denoting a segment painted in cyan), 'M' (denoting one painted in magenta), 'Y' (one painted in yellow), or '?' (an unpainted one).\n\n\n-----Output-----\n\nIf there are at least two different ways of painting, output \"Yes\"; otherwise output \"No\" (both without quotes).\n\nYou can print each character in any case (upper or lower).\n\n\n-----Examples-----\nInput\n5\nCY??Y\n\nOutput\nYes\n\nInput\n5\nC?C?Y\n\nOutput\nYes\n\nInput\n5\n?CYC?\n\nOutput\nYes\n\nInput\n5\nC??MM\n\nOutput\nNo\n\nInput\n3\nMMY\n\nOutput\nNo\n\n\n\n-----Note-----\n\nFor the first example, there are exactly two different ways of colouring: CYCMY and CYMCY.\n\nFor the second example, there are also exactly two different ways of colouring: CMCMY and CYCMY.\n\nFor the third example, there are four ways of colouring: MCYCM, MCYCY, YCYCM, and YCYCY.\n\nFor the fourth example, no matter how the unpainted segments are coloured, the existing magenta segments will prevent the painting from satisfying the requirements. The similar is true for the fifth example.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Natasha travels around Mars in the Mars rover. But suddenly it broke down, namely the logical scheme inside it. The scheme is an undirected tree (connected acyclic graph) with a root in the vertex $1$, in which every leaf (excluding root) is an input, and all other vertices are logical elements, including the root, which is output. One bit is fed to each input. One bit is returned at the output. There are four types of logical elements: AND ($2$ inputs), OR ($2$ inputs), XOR ($2$ inputs), NOT ($1$ input). Logical elements take values from their direct descendants (inputs) and return the result of the function they perform. Natasha knows the logical scheme of the Mars rover, as well as the fact that only one input is broken. In order to fix the Mars rover, she needs to change the value on this input. For each input, determine what the output will be if Natasha changes this input.\n-----Input----- The first line contains a single integer $n$ ($2 \\le n \\le 10^6$)\u00a0\u2014 the number of vertices in the graph (both inputs and elements). The $i$-th of the next $n$ lines contains a description of $i$-th vertex: the first word \"AND\", \"OR\", \"XOR\", \"NOT\" or \"IN\" (means the input of the scheme) is the vertex type. If this vertex is \"IN\", then the value of this input follows ($0$ or $1$), otherwise follow the indices of input vertices of this element: \"AND\", \"OR\", \"XOR\" have $2$ inputs, whereas \"NOT\" has $1$ input. The vertices are numbered from one. It is guaranteed that input data contains a correct logical scheme with an output produced by the vertex $1$. -----Output----- Print a string of characters '0' and '1' (without quotes)\u00a0\u2014 answers to the problem for each input in the ascending order of their vertex indices. -----Example----- Input 10 AND 9 4 IN 1 IN 1 XOR 6 5 AND 3 7 IN 0 NOT 10 IN 1 IN 1 AND 2 8 Output 10110 -----Note----- The original scheme from the example (before the input is changed): [Image] Green indicates bits '1', yellow indicates bits '0'. If Natasha changes the input bit $2$ to $0$, then the output will be $1$. If Natasha changes the input bit $3$ to $0$, then the output will be $0$. If Natasha changes the input bit $6$ to $1$, then the output will be $1$. If Natasha changes the input bit $8$ to $0$, then the output will be $1$. If Natasha changes the input bit $9$ to $0$, then the output will be $0$.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nNatasha travels around Mars in the Mars rover. But suddenly it broke down, namely\u00a0\u2014 the logical scheme inside it. The scheme is an undirected tree (connected acyclic graph) with a root in the vertex $1$, in which every leaf (excluding root) is an input, and all other vertices are logical elements, including the root, which is output. One bit is fed to each input. One bit is returned at the output.\n\nThere are four types of logical elements: AND ($2$ inputs), OR ($2$ inputs), XOR ($2$ inputs), NOT ($1$ input). Logical elements take values from their direct descendants (inputs) and return the result of the function they perform. Natasha knows the logical scheme of the Mars rover, as well as the fact that only one input is broken. In order to fix the Mars rover, she needs to change the value on this input.\n\nFor each input, determine what the output will be if Natasha changes this input.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 10^6$)\u00a0\u2014 the number of vertices in the graph (both inputs and elements).\n\nThe $i$-th of the next $n$ lines contains a description of $i$-th vertex: the first word \"AND\", \"OR\", \"XOR\", \"NOT\" or \"IN\" (means the input of the scheme) is the vertex type. If this vertex is \"IN\", then the value of this input follows ($0$ or $1$), otherwise follow the indices of input vertices of this element: \"AND\", \"OR\", \"XOR\" have $2$ inputs, whereas \"NOT\" has $1$ input. The vertices are numbered from one.\n\nIt is guaranteed that input data contains a correct logical scheme with an output produced by the vertex $1$.\n\n\n-----Output-----\n\nPrint a string of characters '0' and '1' (without quotes)\u00a0\u2014 answers to the problem for each input in the ascending order of their vertex indices.\n\n\n-----Example-----\nInput\n10\nAND 9 4\nIN 1\nIN 1\nXOR 6 5\nAND 3 7\nIN 0\nNOT 10\nIN 1\nIN 1\nAND 2 8\n\nOutput\n10110\n\n\n-----Note-----\n\nThe original scheme from the example (before the input is changed):\n\n[Image]\n\nGreen indicates bits '1', yellow indicates bits '0'.\n\nIf Natasha changes the input bit $2$ to $0$, then the output will be $1$.\n\nIf Natasha changes the input bit $3$ to $0$, then the output will be $0$.\n\nIf Natasha changes the input bit $6$ to $1$, then the output will be $1$.\n\nIf Natasha changes the input bit $8$ to $0$, then the output will be $1$.\n\nIf Natasha changes the input bit $9$ to $0$, then the output will be $0$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You have a list of materials that you need to craft. You can craft some of the materials using other materials. You need to know how many of each material you need to craft. \n-----Inputs----- The first line contains two space separated $2 \\leq N \\leq 50$, the number of materials and $N-1 \\leq M \\leq \\frac{N(N-1)}{2}$, the number of crafting dependencies. The second line contains $N$ space seperated integers describing the amount of each material Yraglac wants. The $a_ i$-th integer specifies the amount of the $i$-th material Yraglac wants where $0 \\leq a_ i \\leq 3$. Each of the following $M$ lines contains three space seperated integers: $0 \\leq u, v < N$, and $1 \\leq w \\leq 3$ indicating there is a recipe that takes $w$ quantities of material $u$ to produce one material $v$. It is guaranteed that each $u, v$ pair will be unique, and that there will never be any cycles in the crafting recipes. -----Outputs----- On a single line output the amount of materials Yraglac needs. -----Examples----- Sample Input 1: 5 4 0 0 0 0 3 0 1 3 1 4 1 2 4 1 3 4 2 Sample Output 1: 9 3 3 6 3 Sample Input 2: 6 5 0 0 0 0 0 3 0 3 3 1 4 3 2 5 1 3 5 1 4 5 1 Sample Output 2: 9 9 3 3 3 3\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe hit new RPG mobile game Curveknights was recently released and Yraglac has been absolutely obsessed with it. Yraglac has been trying to farm materials for hours on end so he can promote his units but has suddenly realized that he has forgotten about an integral system that might speed this up: the crafting system!\n\nSome higher tier materials can be crafted by combining lower tier ones. Yraglac has a list of materials that he needs, but would also like to know how many lower tier materials he would need if he wanted to take advantage of the crafting recipes. As it turns out, some of those lower tier materials might also be craftable with even lower tier materials and so on. Yraglac would like to know the numbers for each of these.\n\nFor example, suppose Yraglac needed $3$ Sugar Boxes. Crafting one of these requires $2$ Sugar Packs, $1$ Iron Chunk, and $1$ Magnesium Ore. You can also craft $1$ Iron Chunk using $3$ Iron Ores. Then Yraglac\u2019s total list of materials would be $3$ Sugar Boxes, $6$ Sugar Packs, $3$ Iron Chunks, $3$ Magnesium Ore, and $9$ Iron Ores.\n\nGiven how many of each material Yraglac wants, can you find out how many of each Yraglac would need to craft them?\n\n-----Inputs-----\nThe first line contains two space separated $2 \\leq N \\leq 50$, the number of materials and $N-1 \\leq M \\leq \\frac{N(N-1)}{2}$, the number of crafting dependencies.\n\nThe second line contains $N$ space seperated integers describing the amount of each material Yraglac wants. The $a_ i$-th integer specifies the amount of the $i$-th material Yraglac wants where $0 \\leq a_ i \\leq 3$.\n\nEach of the following $M$ lines contains three space seperated integers: $0 \\leq u, v < N$, and $1 \\leq w \\leq 3$ indicating there is a recipe that takes $w$ quantities of material $u$ to produce one material $v$. It is guaranteed that each $u, v$ pair will be unique, and that there will never be any cycles in the crafting recipes.\n\n-----Outputs-----\nOn a single line output the amount of materials Yraglac needs.\n\n-----Examples-----\nSample Input 1:\n5 4\n0 0 0 0 3\n0 1 3\n1 4 1\n2 4 1\n3 4 2\nSample Output 1:\n9 3 3 6 3\n\nSample Input 2:\n6 5\n0 0 0 0 0 3\n0 3 3\n1 4 3\n2 5 1\n3 5 1\n4 5 1\nSample Output 2:\n9 9 3 3 3 3\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given the preference list of each owner and the rankings from the previous year, which players did each owner get? \n-----Input----- The first line of the input contains two integers $n$ ($1 \\leq n \\leq 60$), the number of owners, and $k$ ($1 \\leq k \\leq 1000$), the size of each team. The next $n$ lines contain owners\u2019 preferences in the order of drafting. Each line starts with an integer $q_ i$ ($0 \\leq q_ i \\leq 1500$), the size of the $i^\\textrm {th}$ owners\u2019 preference list. $q_ i$ names follow, separated by spaces, in order of $i^\\textrm {th}$ owner\u2019s preference. No name appears more than once in the $i^\\textrm {th}$ owners\u2019 list. The next line contains a single integer $p$ ($n \\cdot k \\leq p \\leq 65000$), indicating the number of players in the draft. The next $p$ lines each contain a single name, they are ordered by their previous year\u2019s ranking. Each player name is unique and comprised of at most $12$ letters of English alphabet. The names in owners\u2019 preference lists are guaranteed to appear in the player list. -----Output----- Display $n$ lines. The $i^\\textrm {th}$ of which contains the $k$ names of the players that were selected by the $i^\\textrm {th}$ owner. The $n$ teams should be in the original order of owners and players should be listed in the order in which they were drafted following the rules above. -----Examples----- Sample Input: 2 2 0 0 6 Shoresy Jonesy Reilly Sholtzy Fisky Yorkie Sample Output: Shoresy Reilly Jonesy Sholtzy\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nIn fantasy hockey, there are $n$ team owners that each selects $k$ hockey players. To determine which owner gets which players, the owners hold a draft.\n\nThe draft proceeds as follows: the first owner may select any player, then the second owner can select any player except the player taken first and so on. In general, the current owner may take any player that has not been taken previously. Once all owners have selected one player, they repeat this process until all owners have selected $k$ players. No player may be selected by multiple teams.\n\nInitially, all players are given a ranking based on how well they played in the previous year. However, the owners may not agree with this order. For example, the first owner may believe that the player which was ranked third in the previous year is the best player and would prefer to take them.\n\nEach owner has a preference list. On their turn, the owner selects the player that is the highest available player on their own preference list. If all players on their preference list are taken, then they resort to using the ordering from the previous year.\n\nGiven the preference list of each owner and the rankings from the previous year, which players did each owner get?\n\n-----Input-----\nThe first line of the input contains two integers $n$ ($1 \\leq n \\leq 60$), the number of owners, and $k$ ($1 \\leq k \\leq 1000$), the size of each team.\n\nThe next $n$ lines contain owners\u2019 preferences in the order of drafting. Each line starts with an integer $q_ i$ ($0 \\leq q_ i \\leq 1500$), the size of the $i^\\textrm {th}$ owners\u2019 preference list. $q_ i$ names follow, separated by spaces, in order of $i^\\textrm {th}$ owner\u2019s preference. No name appears more than once in the $i^\\textrm {th}$ owners\u2019 list.\n\nThe next line contains a single integer $p$ ($n \\cdot k \\leq p \\leq 65000$), indicating the number of players in the draft.\n\nThe next $p$ lines each contain a single name, they are ordered by their previous year\u2019s ranking. Each player name is unique and comprised of at most $12$ letters of English alphabet.\n\nThe names in owners\u2019 preference lists are guaranteed to appear in the player list.\n\n-----Output-----\nDisplay $n$ lines. The $i^\\textrm {th}$ of which contains the $k$ names of the players that were selected by the $i^\\textrm {th}$ owner. The $n$ teams should be in the original order of owners and players should be listed in the order in which they were drafted following the rules above.\n\n-----Examples-----\nSample Input:\n2 2\n0\n0\n6\nShoresy\nJonesy\nReilly\nSholtzy\nFisky\nYorkie\nSample Output:\nShoresy Reilly\nJonesy Sholtzy\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are to create a Morse-like code that yields the shortest total length to a given message, and return that total length. A dot symbol has length $1$. A dash symbol has length $3$. The gap between symbols within a character encoding has length $1$. The gap between character encodings has length $3$. Spaces, punctuation, and alphabetic case are ignored, so the text:The quick brown dog jumps over the lazy fox. is encoded as though it were justTHEQUICKBROWNDOGJUMPSOVERTHELAZYFOX For example, with input ICPC, the answer is $17$: Encode the C s with a single dot, the I with a dash, and the P with two dots, for an encoding of  $\\bullet $ $\\bullet \\bullet $ $\\bullet $ which has length$(3)+3+(1)+3+(1+1+1)+3+(1) = 17$. \n-----Input----- The single line of input contains a string $s$ ($1 \\le |s| \\le 32000$) of upper-case or lower-case letters, spaces, commas, periods, exclamation points, and/or question marks. Everything but the letters should be ignored. The line will contain at least one letter. -----Output----- Output a single integer, which is the length of $s$ when encoded with an optimal reassignment of the sequences of Morse Code. -----Examples----- Sample Input 1: ICPC Sample Output 1: 17 Sample Input 2: A Sample Output 2: 1\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nMorse Code is an assignment of sequences of dots and dashes to alphabet characters. You are to create a Morse-like code that yields the shortest total length to a given message, and return that total length.\n\nA dot symbol has length $1$. A dash symbol has length $3$. The gap between symbols within a character encoding has length $1$. The gap between character encodings has length $3$. Spaces, punctuation, and alphabetic case are ignored, so the text:The quick brown dog jumps over the lazy fox.\n\nis encoded as though it were justTHEQUICKBROWNDOGJUMPSOVERTHELAZYFOX\n\nFor example, with input ICPC, the answer is $17$: Encode the C\u2019s with a single dot, the I with a dash, and the P with two dots, for an encoding of\u2014 $\\bullet $ $\\bullet \\bullet $ $\\bullet $\n\nwhich has length$(3)+3+(1)+3+(1+1+1)+3+(1) = 17$. \n\n-----Input-----\nThe single line of input contains a string $s$ ($1 \\le |s| \\le 32000$) of upper-case or lower-case letters, spaces, commas, periods, exclamation points, and/or question marks. Everything but the letters should be ignored. The line will contain at least one letter.\n\n-----Output-----\nOutput a single integer, which is the length of $s$ when encoded with an optimal reassignment of the sequences of Morse Code.\n\n-----Examples-----\nSample Input 1:\nICPC\nSample Output 1:\n17\n\nSample Input 2:\nA\nSample Output 2:\n1\n\"\"\"\ndef code():"
}