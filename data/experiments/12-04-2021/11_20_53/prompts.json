{
    "0": "Python 3\n\"\"\"\n It s like how hot dogs come in packs of ten, and buns come in packs of eight or twelve. You have to buy nine packs to make it come out even. This is a quote from the 1986 movie, True Stories, and it s true; well, almost true. You could buy four packs of $10$ hotdogs and five packs of $8$ buns. That would give you exactly $40$ of each. However, you can make things even with fewer packs if you buy two packs of $10$ hotdogs, along with a pack of $8$ buns and another pack of $12$ buns. That would give you $20$ of each, using only $4$ total packs. For this problem, you ll determine the fewest packs you need to buy to make hotdogs and buns come out even, given a selection of different bun and hotdog packs available for purchase. \n-----Input----- The first input line starts with an integer, $H$, the number of hotdog packs available. This is followed by $H$ integers, $h_1 \\ldots h_ H$, the number of hotdogs in each pack. The second input line starts with an integer, $B$, giving the number of bun packs available. This is followed by $B$ integers, $b_1 \\ldots b_ B$, indicating the number of buns in each pack. The values $H$ and $B$ are between $0$ and $100$, inclusive, and the sizes of the packs are between $1$ and $1000$, inclusive. Every available pack is listed individually. For example, if there were five eight-bun packs available for purchase, the list of bun packs would contain five copies of the number eight. -----Output----- If it\u2019s not possible to purchase an equal number of one or more hotdogs and buns, just output \u201cimpossible\u201d. Otherwise, output the smallest number of total packs you can buy (counting both hotdog and bun packs) to get exactly the same number of hotdogs and buns. -----Examples----- Sample Input: 4 10 10 10 10 10 8 8 8 12 12 12 8 8 12 12 Sample Output: 4\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\n \u201cIt\u2019s like how hot dogs come in packs of ten, and buns come in packs of eight or twelve \u2014 you have to buy nine packs to make it come out even.\u201d \n\nThis is a quote from the 1986 movie, \u201cTrue Stories\u201d, and it\u2019s true; well, almost true. You could buy four packs of $10$ hotdogs and five packs of $8$ buns. That would give you exactly $40$ of each. However, you can make things even with fewer packs if you buy two packs of $10$ hotdogs, along with a pack of $8$ buns and another pack of $12$ buns. That would give you $20$ of each, using only $4$ total packs.\n\nFor this problem, you\u2019ll determine the fewest packs you need to buy to make hotdogs and buns come out even, given a selection of different bun and hotdog packs available for purchase.\n\n-----Input-----\nThe first input line starts with an integer, $H$, the number of hotdog packs available. This is followed by $H$ integers, $h_1 \\ldots h_ H$, the number of hotdogs in each pack. The second input line starts with an integer, $B$, giving the number of bun packs available. This is followed by $B$ integers, $b_1 \\ldots b_ B$, indicating the number of buns in each pack. The values $H$ and $B$ are between $0$ and $100$, inclusive, and the sizes of the packs are between $1$ and $1000$, inclusive. Every available pack is listed individually. For example, if there were five eight-bun packs available for purchase, the list of bun packs would contain five copies of the number eight.\n\n-----Output-----\nIf it\u2019s not possible to purchase an equal number of one or more hotdogs and buns, just output \u201cimpossible\u201d. Otherwise, output the smallest number of total packs you can buy (counting both hotdog and bun packs) to get exactly the same number of hotdogs and buns.\n\n-----Examples-----\nSample Input:\n4 10 10 10 10\n10 8 8 8 12 12 12 8 8 12 12\nSample Output:\n4\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given a grid size and number of ships, how many ship placements are possible?\n-----Input----- The first line of input contains two space-separated integers $n$ ($1 \\le n \\le 5$) and $k$ ($1 \\le k \\le 5$), which represent a game of Mini Battleship played on an $n \\! \\times \\! n$ grid with $k$ ships. Each of the next $n$ lines contains a string $s$ ($|s|=n$). This is what Bob sees of Alice\u2019s grid so far.  - A character \u2018X\u2019 represents one of Bob\u2019s shots that missed.  - A character \u2018O\u2019 (Letter O, not zero) represents one of Bob\u2019s shots that hit.  - A dot (\u2018.\u2019) represents a square where Bob has not yet taken a shot. Each of the next $k$ lines contains a single integer $x$ ($1 \\le x \\le n$). These are the sizes of the ships. -----Output----- Output a single integer, which is the number of ways the $k$ distinct ships could be placed on Alice\u2019s grid and be consistent with what Bob sees. -----Examples----- Sample Input 1: 4 3 .... .OX. .... O..X 3 2 1 Sample Output 1: 132 Sample Input 2: 4 4 .X.X .XX. ...X .... 1 2 3 4 Sample Output 2: 6\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nBattleship is a game played by two players. Each player has their own grid, which is hidden from their opponent. Each player secretly places some ships on their grid. Each ship covers a horizontal or vertical straight line of one or more contiguous squares. Ships cannot overlap. All ships are considered distinct, even if they have the same size. The orientation of each ship is not important to the game, only the squares they occupy.\n\nAfter placing their ships, the players then take turns taking shots at their opponent\u2019s ships by calling out a coordinate of their opponent\u2019s grid. The opponent must honestly say whether the shot was a hit or a miss. When all of a ship\u2019s squares are hit, that ship sinks (\u201cYou sunk my battleship!!\u201d). A player loses when all of their ships are sunk.\n\nBob is playing a game of Mini Battleship against Alice. Regular Battleship is played on a $10 \\! \\times \\! 10$ grid with $5$ ships. Mini Battleship is much smaller, with a grid no larger than $5 \\! \\times \\! 5$ and possibly fewer than $5$ ships.\n\nBob wonders how many ship placements are possible on Alice\u2019s board given what he knows so far. The answer will be $0$ if Alice is cheating! (Or, if the game setup isn\u2019t possible.)\n\n-----Input-----\nThe first line of input contains two space-separated integers $n$ ($1 \\le n \\le 5$) and $k$ ($1 \\le k \\le 5$), which represent a game of Mini Battleship played on an $n \\! \\times \\! n$ grid with $k$ ships.\n\nEach of the next $n$ lines contains a string $s$ ($|s|=n$). This is what Bob sees of Alice\u2019s grid so far.\n - A character \u2018X\u2019 represents one of Bob\u2019s shots that missed.\n - A character \u2018O\u2019 (Letter O, not zero) represents one of Bob\u2019s shots that hit.\n - A dot (\u2018.\u2019) represents a square where Bob has not yet taken a shot.\n\nEach of the next $k$ lines contains a single integer $x$ ($1 \\le x \\le n$). These are the sizes of the ships.\n\n-----Output-----\nOutput a single integer, which is the number of ways the $k$ distinct ships could be placed on Alice\u2019s grid and be consistent with what Bob sees.\n\n-----Examples-----\nSample Input 1:\n4 3\n....\n.OX.\n....\nO..X\n3\n2\n1\nSample Output 1:\n132\n\nSample Input 2:\n4 4\n.X.X\n.XX.\n...X\n....\n1\n2\n3\n4\nSample Output 2:\n6\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges. The i-th (1 i M) edge connects vertex a_i and vertex b_i with a distance of c_i. Here, a self-loop is an edge where a_i = b_i (1 i M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1 i<j M). A connected graph is a graph where there is a path between every pair of different vertices. Find the number of the edges that are not contained in any shortest path between any pair of different vertices. \n\n-----Input----- The input is given from Standard Input in the following format: N M   a_1 b_1 c_1   a_2 b_2 c_2 :   a_M b_M c_M   -----Output----- Print the number of the edges in the graph that are not contained in any shortest path between any pair of different vertices. -----Sample Input----- 3 3 1 2 1 1 3 1 2 3 3 -----Sample Output----- 1 In the given graph, the shortest paths between all pairs of different vertices are as follows:  - The shortest path from vertex 1 to vertex 2 is: vertex 1 \u2192 vertex 2, with the length of 1.  - The shortest path from vertex 1 to vertex 3 is: vertex 1 \u2192 vertex 3, with the length of 1.  - The shortest path from vertex 2 to vertex 1 is: vertex 2 \u2192 vertex 1, with the length of 1.  - The shortest path from vertex 2 to vertex 3 is: vertex 2 \u2192 vertex 1 \u2192 vertex 3, with the length of 2.  - The shortest path from vertex 3 to vertex 1 is: vertex 3 \u2192 vertex 1, with the length of 1.  - The shortest path from vertex 3 to vertex 2 is: vertex 3 \u2192 vertex 1 \u2192 vertex 2, with the length of 2. Thus, the only edge that is not contained in any shortest path, is the edge of length 3 connecting vertex 2 and vertex 3, hence the output should be 1.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges.\n\nThe i-th (1\u2264i\u2264M) edge connects vertex a_i and vertex b_i with a distance of c_i.\n\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\n\nA connected graph is a graph where there is a path between every pair of different vertices.\n\nFind the number of the edges that are not contained in any shortest path between any pair of different vertices.  \n\n-----Constraints-----\n - 2\u2264N\u2264100 \n - N-1\u2264M\u2264min(N(N-1)/2,1000) \n - 1\u2264a_i,b_i\u2264N \n - 1\u2264c_i\u22641000\n - c_i is an integer.\n - The given graph contains neither self-loops nor double edges.\n - The given graph is connected.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M  \na_1 b_1 c_1  \na_2 b_2 c_2\n:  \na_M b_M c_M  \n\n-----Output-----\nPrint the number of the edges in the graph that are not contained in any shortest path between any pair of different vertices.\n\n-----Sample Input-----\n3 3\n1 2 1\n1 3 1\n2 3 3\n\n-----Sample Output-----\n1\n\nIn the given graph, the shortest paths between all pairs of different vertices are as follows:\n - The shortest path from vertex 1 to vertex 2 is: vertex 1 \u2192 vertex 2, with the length of 1.\n - The shortest path from vertex 1 to vertex 3 is: vertex 1 \u2192 vertex 3, with the length of 1.\n - The shortest path from vertex 2 to vertex 1 is: vertex 2 \u2192 vertex 1, with the length of 1.\n - The shortest path from vertex 2 to vertex 3 is: vertex 2 \u2192 vertex 1 \u2192 vertex 3, with the length of 2.\n - The shortest path from vertex 3 to vertex 1 is: vertex 3 \u2192 vertex 1, with the length of 1.\n - The shortest path from vertex 3 to vertex 2 is: vertex 3 \u2192 vertex 1 \u2192 vertex 2, with the length of 2.\nThus, the only edge that is not contained in any shortest path, is the edge of length 3 connecting vertex 2 and vertex 3, hence the output should be 1.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x + k). That is, f(x) = q(x) (x + k) + p, where q(x) is a polynomial (not necessarily with integer coefficients).\n-----Input----- The only line of input contains two space-separated integers p and k (1 \u2264 p \u2264 10^18, 2 \u2264 k \u2264 2 000). -----Output----- If the polynomial does not exist, print a single integer -1, or output two lines otherwise. In the first line print a non-negative integer d \u2014 the number of coefficients in the polynomial. In the second line print d space-separated integers a_0, a_1, ..., a_{d} - 1, describing a polynomial $f(x) = \\sum_{i = 0}^{d - 1} a_{i} \\cdot x^{i}$ fulfilling the given requirements. Your output should satisfy 0 \u2264 a_{i} < k for all 0 \u2264 i \u2264 d - 1, and a_{d} - 1 \u2260 0. If there are many possible solutions, print any of them. -----Examples----- Input 46 2 Output 7 0 1 0 0 1 1 1 Input 2018 214 Output 3 92 205 1 -----Note----- In the first example, f(x) = x^6 + x^5 + x^4 + x = (x^5 - x^4 + 3x^3 - 6x^2 + 12x - 23)\u00b7(x + 2) + 46. In the second example, f(x) = x^2 + 205x + 92 = (x - 9)\u00b7(x + 214) + 2018.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIn order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.\n\nLittle Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...\n\nGiven two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x + k). That is, f(x) = q(x)\u00b7(x + k) + p, where q(x) is a polynomial (not necessarily with integer coefficients).\n\n\n-----Input-----\n\nThe only line of input contains two space-separated integers p and k (1 \u2264 p \u2264 10^18, 2 \u2264 k \u2264 2 000).\n\n\n-----Output-----\n\nIf the polynomial does not exist, print a single integer -1, or output two lines otherwise.\n\nIn the first line print a non-negative integer d \u2014 the number of coefficients in the polynomial.\n\nIn the second line print d space-separated integers a_0, a_1, ..., a_{d} - 1, describing a polynomial $f(x) = \\sum_{i = 0}^{d - 1} a_{i} \\cdot x^{i}$ fulfilling the given requirements. Your output should satisfy 0 \u2264 a_{i} < k for all 0 \u2264 i \u2264 d - 1, and a_{d} - 1 \u2260 0.\n\nIf there are many possible solutions, print any of them.\n\n\n-----Examples-----\nInput\n46 2\n\nOutput\n7\n0 1 0 0 1 1 1\n\nInput\n2018 214\n\nOutput\n3\n92 205 1\n\n\n\n-----Note-----\n\nIn the first example, f(x) = x^6 + x^5 + x^4 + x = (x^5 - x^4 + 3x^3 - 6x^2 + 12x - 23)\u00b7(x + 2) + 46.\n\nIn the second example, f(x) = x^2 + 205x + 92 = (x - 9)\u00b7(x + 214) + 2018.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n The train has $n$ cars ordered sequentially starting from the locomotive. The $i$-th car has $p_ i$ passengers. There are $m$ food carts Peter may put into service. Each food cart serves a unique type of food. The $j$-th food cart can move between the $l_ j$-th car and the $r_ j$-th car (both inclusive) and serve the passengers in these cars. The passengers on the train are not only hungry, but also adventurous: as long as a food cart is in service, they would love to try it! A passenger will be happy if he/she sits in a car that is served by all the food carts that are in service. Peter would like to design service plans that run one or more of the $m$ food carts so that at least $k$ of the passengers on the train are happy. Peter wants to count the number of different service plans he may choose from (modulo $10^9 + 7$). Two service plans are different if one food cart is put into service in one plan but not in the other plan.\n-----Input----- The first line has three integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 2 \\cdot 10^5, 1 \\leq k \\leq 10^{14}$). The next line has $n$ integers. The $i$-th integer is $p_ i$ ($1 \\leq p_ i \\leq 10^9 $), the number of passengers in the $i$-th car. Each of the next $m$ lines describes a food cart. The $j$-th of these lines has two integers $l_ j$ and $r_ j$ ($1 \\leq l_ j \\leq r_ j \\leq n$), giving the service range of the $j$-th food cart. -----Output----- Output the number of different service plans, modulo $10^9 + 7$. -----Examples----- Sample Input 1: 4 3 3 1 2 3 4 1 2 2 3 3 4 Sample Output 1: 4 Sample Input 2: 5 4 6 1 2 3 4 5 1 4 2 3 3 5 4 5 Sample Output 2: 5\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nPeter is in charge of food service on a passenger train. The train has $n$ cars ordered sequentially starting from the locomotive. The $i$-th car has $p_ i$ passengers. There are $m$ food carts Peter may put into service. Each food cart serves a unique type of food. The $j$-th food cart can move between the $l_ j$-th car and the $r_ j$-th car (both inclusive) and serve the passengers in these cars.\n\nThe passengers on the train are not only hungry, but also adventurous: as long as a food cart is in service, they would love to try it! A passenger will be happy if he/she sits in a car that is served by all the food carts that are in service. Peter would like to design service plans that run one or more of the $m$ food carts so that at least $k$ of the passengers on the train are happy.\n\nPeter wants to count the number of different service plans he may choose from (modulo $10^9 + 7$). Two service plans are different if one food cart is put into service in one plan but not in the other plan.\n\n-----Input-----\nThe first line has three integers $n$, $m$, and $k$ ($1 \\leq n, m \\leq 2 \\cdot 10^5, 1 \\leq k \\leq 10^{14}$). The next line has $n$ integers. The $i$-th integer is $p_ i$ ($1 \\leq p_ i \\leq 10^9 $), the number of passengers in the $i$-th car. Each of the next $m$ lines describes a food cart. The $j$-th of these lines has two integers $l_ j$ and $r_ j$ ($1 \\leq l_ j \\leq r_ j \\leq n$), giving the service range of the $j$-th food cart.\n\n-----Output-----\nOutput the number of different service plans, modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n4 3 3\n1 2 3 4\n1 2\n2 3\n3 4\nSample Output 1:\n4\n\nSample Input 2:\n5 4 6\n1 2 3 4 5\n1 4\n2 3\n3 5\n4 5\nSample Output 2:\n5\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n One day you and GTmac walk into a classroom and see a mysterious expression on the blackboard:\\[ (1^b + 2^b + \\cdots + a^b)~ \\mathrm{mod}~ a \\] Upon seeing the expression GTmac shows an evil smile and challenges you:  Let me give you the values of $a$ and $b$ and let s assume $b$ is an odd number. Want to bet who can evaluate this expression  The one who loses shall buy pizza for us tonight. \n-----Input----- The input has two integers $a$ ($1 \\leq a \\leq 10^9$) and $b$ ($1\\leq b\\leq 99$, $b$ is odd) on a single line. -----Output----- Output the value of the expression with the given $a$ and $b$. -----Examples----- Sample Input 1: 2 3 Sample Output 1: 1 Sample Input 2: 3 7 Sample Output 2: 0\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nOne day you and GTmac walk into a classroom and see a mysterious expression on the blackboard:\\[ (1^b + 2^b + \\cdots + a^b)~ \\mathrm{mod}~ a \\]\n\nUpon seeing the expression GTmac shows an evil smile and challenges you: \u201cLet me give you the values of $a$ and $b$ and let\u2019s assume $b$ is an odd number. Want to bet who can evaluate this expression? The one who loses shall buy pizza for us tonight.\u201d\n\n-----Input-----\nThe input has two integers $a$ ($1 \\leq a \\leq 10^9$) and $b$ ($1\\leq b\\leq 99$, $b$ is odd) on a single line.\n\n-----Output-----\nOutput the value of the expression with the given $a$ and $b$.\n\n-----Examples-----\nSample Input 1:\n2 3\nSample Output 1:\n1\n\nSample Input 2:\n3 7\nSample Output 2:\n0\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Given a list of coins, find the smallest slot size that can hold all of them. \n-----Input----- Input begins with a line containing $N$, the number of sides to the polygonal coin, where $3 \\leq N \\leq 20$. This is followed by $N$ lines, each containing two real numbers $x$ and $y$, the coordinates of a vertex of the polygon, where $0 \\leq x, y \\leq 100$. All real numbers have at most $2$ digits after the decimal point. All $N$ vertices will be distinct, and the vertices will be presented in an order proceeding clockwise around the perimeter of the coin. -----Output----- Print a single line with a real number denoting the minimum slot size allowing the coin to pass through. Outputs will be accepted that are within $\\pm 0.01$ of the judges\u2019 answer. -----Examples----- Sample Input: 3 0 0 0.71 3.54 4.21 4.21 Sample Output: 2.00111219\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nThe small nation of Erratica prides itself on defying conventions established by the more \u201cboring\u201d countries around the world. One of their more obvious distinctions lies in the design of their coinage. Believing that a person should be easily able to identify the value a coin in a pocket or change purse by touch alone, Erratica designs its coins as polygons. For stability, the coins are convex \u2013 there are no notches cut into the coins. But the overall shapes themselves can be quite irregular.\n\nErratica Vending, the only manufacturer of vending machines in the nation, has been sent the design for a new coin to be issued. Their machines are designed so that coins enter through a slot into channel shaped as a rectangular prism with the slot being an open face of the prism. The channel is narrow because the coins are thin, but long enough to contain the entire coin. From the outside of the machine, the slot appears as a rectangular hole.\n\nThe company wants to know what would be the smallest slot size they will need so that the new coin can be slipped, after some rotation, into the slot.\n\n-----Input-----\nInput begins with a line containing $N$, the number of sides to the polygonal coin, where $3 \\leq N \\leq 20$.\n\nThis is followed by $N$ lines, each containing two real numbers $x$ and $y$, the coordinates of a vertex of the polygon, where $0 \\leq x, y \\leq 100$. All real numbers have at most $2$ digits after the decimal point.\n\nAll $N$ vertices will be distinct, and the vertices will be presented in an order proceeding clockwise around the perimeter of the coin.\n\n-----Output-----\nPrint a single line with a real number denoting the minimum slot size allowing the coin to pass through. Outputs will be accepted that are within $\\pm 0.01$ of the judges\u2019 answer.\n\n-----Examples-----\nSample Input:\n3\n0 0\n0.71 3.54\n4.21 4.21\nSample Output:\n2.00111219\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a sequence of buildings, each labeled with an integer from 1 to M. Each building is initially empty, but soon N students will be moving in at a rate of exactly one student per day. Each time a new student moves in a building, a big party is being held inside that building. The noise of the party is equal to the number of students located inside the building. The dorm management is not particularly fond of noise, so they will occasionally empty a certain building to keep the parties at a reasonable noise level. They do this by moving all its residents to a completely different student dorm. The management can decide to do this after any day, but they realized that it doesn t pay off to do it more than K times. Help the management! Knowing which buildings are being moved in by students, determine the minimal possible total noise level (the sum of noise levels of all N parties) that can be achieved with emptying some of the buildings at most K times.\n-----Input----- The first line of input contains the integers $N$ ($1 \\leq N \\leq 1000000$), $M$ ($1 \\leq M \\leq 100$) and $K$ ($1 \\leq K \\leq 500$) from the task description. The $i$-th line, out of $N$ in total, contains an integer from the interval $[1,M]$: the label of the building where a student is moving in on the $i$-th day. -----Output----- The first and only line of output must contain the required minimal possible total noise level. -----Examples----- Sample Input: 5 1 2 1 1 1 1 1 Sample Output: 7\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nA new student dorm has been opened! It consists of $M$ buildings, labeled with integers from $1$ to $M$. The dorm is initially empty, but soon $N$ students will be moving in at a rate of exactly one student per day.\n\nEach time a new student moves in a building, a big party is being held inside that building. The noise of the party is equal to the number of students located inside the building. The dorm management is not particularly fond of noise, so they will occasionally empty a certain building to keep the parties at a reasonable noise level. They do this by moving all its residents to a completely different student dorm. The management can decide to do this after any day, but they realized that it doesn\u2019t pay off to do it more than $K$ times.\n\nHelp the management! Knowing which buildings are being moved in by students, determine the minimal possible total noise level (the sum of noise levels of all $N$ parties) that can be achieved with emptying some of the buildings at most $K$ times.\n\n-----Input-----\nThe first line of input contains the integers $N$ ($1 \\leq N \\leq 1000000$), $M$ ($1 \\leq M \\leq 100$) and $K$ ($1 \\leq K \\leq 500$) from the task description.\n\nThe $i$-th line, out of $N$ in total, contains an integer from the interval $[1,M]$: the label of the building where a student is moving in on the $i$-th day.\n\n-----Output-----\nThe first and only line of output must contain the required minimal possible total noise level.\n\n-----Examples-----\nSample Input:\n5 1 2\n1\n1\n1\n1\n1\nSample Output:\n7\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.\n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of schools. -----Output----- Print single integer: the minimum cost of tickets needed to visit all schools. -----Examples----- Input 2 Output 0 Input 10 Output 4 -----Note----- In the first example we can buy a ticket between the schools that costs $(1 + 2) \\operatorname{mod}(2 + 1) = 0$.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends.\n\nThere are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs $(i + j) \\operatorname{mod}(n + 1)$ and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of schools.\n\n\n-----Output-----\n\nPrint single integer: the minimum cost of tickets needed to visit all schools.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n0\n\nInput\n10\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example we can buy a ticket between the schools that costs $(1 + 2) \\operatorname{mod}(2 + 1) = 0$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Anthony and Cora are playing Dominion, their favorite card game. In Dominion, there are $T$ different card types, and each player has a set of cards (known as a deck). A deck $D$ is said to have $C$ combos if $C$ is the largest integer such that for $C$ different card types in the game, $D$ contains at least two cards of that type. Anthony currently has $N$ cards and he wants to trade cards with Cora such that he ll have a deck with exactly $K$ combos. For each card type $i$ ($1\\leq i\\leq T$), Anthony can choose to perform at most one transaction. There are two types of transaction: \n- Buy up to two cards of $i^{th}$ type from Cora at $a_ i$ coins each\n- Sell all his cards of $i^{th}$ type for $b_ i$ coins each Anthony wants to maximize his profit while obtaining a complete deck. Anthony is willing to spend coins in order to obtain a complete deck if necessary, but of course he wants to minimize his spending in that case. Note that he doesn t care about keeping the rest of his cards which don t contribute to the complete deck. Anthony has hired you to help him calculate how much money he can make if he chooses the optimal strategy for obtaining enough combos. If he has to spend money, output a negative number.\n-----Input----- The first line of the input contains three integers $N$, $T$, and $K$, $1\\leq K\\leq T\\leq 100000$, $1\\leq N\\leq 2T$. The next line is a list of $N$ integers representing the cards in Anthony\u2019s deck. Each integer on this line is between $1$ and $T$ inclusive. It is guaranteed no integers appear more than twice. Finally, each of the next $T$ lines of the input contains two integers each. The $i^\\mathrm {th}$ line contains $a_ i$ and $b_ i$, $1\\leq a_ i, b_ i\\leq 10^9$, corresponding to the price of buying and selling a card of type $i$. -----Output----- Output a single integer denoting Anthony\u2019s profit assuming he trades optimally. -----Explanation of Sample Input----- In the first example, Anthony should sell two of card $1$ and buy one of card $2$ and one of card $3$ for a net profit of $10$ coins. If he chooses to sell one of card $3$ and buy one of card $2$, then he\u2019ll end up spending $20$ coins. -----Examples----- Sample Input: 4 3 2 1 3 2 1  1 50 50 20 40 30 Sample Output: 10\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nAnthony and Cora are playing Dominion, their favorite card game. In Dominion, there are $T$ different card types, and each player has a set of cards (known as a deck). A deck $D$ is said to have $C$ combos if $C$ is the largest integer such that for $C$ different card types in the game, $D$ contains at least two cards of that type. Anthony currently has $N$ cards and he wants to trade cards with Cora such that he\u2019ll have a deck with exactly $K$ combos.\n\nFor each card type $i$ ($1\\leq i\\leq T$), Anthony can choose to perform at most one transaction. There are two types of transaction:\n - Buy up to two cards of $i^{th}$ type from Cora at $a_ i$ coins each\n - Sell all his cards of $i^{th}$ type for $b_ i$ coins each\n\nAnthony wants to maximize his profit while obtaining a complete deck. Anthony is willing to spend coins in order to obtain a complete deck if necessary, but of course he wants to minimize his spending in that case. Note that he doesn\u2019t care about keeping the rest of his cards which don\u2019t contribute to the complete deck.\n\nAnthony has hired you to help him calculate how much money he can make if he chooses the optimal strategy for obtaining enough combos. If he has to spend money, output a negative number.\n\n-----Input-----\nThe first line of the input contains three integers $N$, $T$, and $K$, $1\\leq K\\leq T\\leq 100000$, $1\\leq N\\leq 2T$.\n\nThe next line is a list of $N$ integers representing the cards in Anthony\u2019s deck. Each integer on this line is between $1$ and $T$ inclusive. It is guaranteed no integers appear more than twice.\n\nFinally, each of the next $T$ lines of the input contains two integers each. The $i^\\mathrm {th}$ line contains $a_ i$ and $b_ i$, $1\\leq a_ i, b_ i\\leq 10^9$, corresponding to the price of buying and selling a card of type $i$.\n\n-----Output-----\nOutput a single integer denoting Anthony\u2019s profit assuming he trades optimally.\n\n-----Explanation of Sample Input-----\nIn the first example, Anthony should sell two of card $1$ and buy one of card $2$ and one of card $3$ for a net profit of $10$ coins. If he chooses to sell one of card $3$ and buy one of card $2$, then he\u2019ll end up spending $20$ coins.\n\n-----Examples-----\nSample Input:\n4 3 2\n1 3 2 1 \n1 50\n50 20\n40 30\nSample Output:\n10\n\"\"\"\ndef code():"
}