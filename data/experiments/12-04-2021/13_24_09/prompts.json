{
    "0": "Python 3\n\"\"\"\nWrite the code to convert the hexadecimal number into its corresponding decimal value.\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given number\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nMs. E.T. came from planet Hex. She has 8 fingers in each hand which makes her count in hexadecimal way. When she meets you, she tells you that she came from 7E light years from the planet Earth. You see she means that it is 126 light years far away and she is telling you the numbers in hexadecimal. Now, you are in trouble to understand what those numbers really mean. Therefore, you have to convert the hexadecimal numbers to decimals.\n\nInput:\n\nFirst line of code contain T test cases.\n\nevery line of text case contain a Hex-value \n\nOutput:\n\nEvery line of output contain a decimal conversion of given nunmber\n\nSample Input:\n\n3\n\nA\n\n1A23\n\n2C2A\n\nSample Output:\n\n10\n\n6691\n\n11306\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nCreate a function called noRepeat() that takes a string argument and returns a single letter string of the first not repeated character in the entire string.\n\nExamples:\nInput:\nnoRepeat(\"aabbccdde\")\nOutput:\n'e'\nInput:\nnoRepeat(\"wxyz\")\nOutput:\n'w'\nInput:\nnoRepeat(\"testing\")\nOutput:\n'e'\n\"\"\"\ndef no_repeat(string):",
    "3": "Python 3\n\"\"\"\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #16\n\nCreate a function called noRepeat() that takes a string argument and returns a single letter string of the **first** not repeated character in the entire string.\n\n``` haskell\nnoRepeat \"aabbccdde\" `shouldBe` 'e'\nnoRepeat \"wxyz\"      `shouldBe` 'w'\nnoRepeat \"testing\"   `shouldBe` 'e'\n```\n\nNote:\nONLY letters from the english alphabet will be used as input\nThere will ALWAYS be at least one non-repeating letter in the input string\n\"\"\"\ndef no_repeat(string):",
    "4": "Python 3\n\"\"\"\n\nSet A containing n positive different integers a_{i} are given. \n\nCreate a set B containing n different integers b_{j} such that all n^2 integers that can be obtained by summing up a_{i} and b_{j} for all possible pairs of i and j are different. \n\nAll numbers in A and B are from 1 to 10^6.\n\n\n\n\n-----Input-----\n\nThe first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers a_{i}\u00a0\u2014 the elements of A (1 \u2264 a_{i} \u2264 10^6). \n\n\n-----Output-----\n\nFor each test first print the answer:   NO, if task is impossible to solve, there is no way to create the required set B.  YES, if there is the way to create the required set. In this case the second line must contain n different positive integers b_{j}\u00a0\u2014 elements of B (1 \u2264 b_{j} \u2264 10^6). If there are several possible sets, output any of them. \n\n\n-----Example-----\nInput\n3\n3\n1 10 100\n1\n1\n2\n2 4\n\nOutput\nYES\n1 2 3 \nYES\n1 \nYES\n1 2\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nMasha and Grisha like studying sets of positive integers.\n\nOne day Grisha has written a set A containing n different integers a_{i} on a blackboard. Now he asks Masha to create a set B containing n different integers b_{j} such that all n^2 integers that can be obtained by summing up a_{i} and b_{j} for all possible pairs of i and j are different.\n\nBoth Masha and Grisha don't like big numbers, so all numbers in A are from 1 to 10^6, and all numbers in B must also be in the same range.\n\nHelp Masha to create the set B that satisfies Grisha's requirement.\n\n\n-----Input-----\n\nInput data contains multiple test cases. The first line contains an integer t\u00a0\u2014 the number of test cases (1 \u2264 t \u2264 100).\n\nEach test case is described in the following way: the first line of the description contains one integer n\u00a0\u2014 the number of elements in A (1 \u2264 n \u2264 100).\n\nThe second line contains n integers a_{i}\u00a0\u2014 the elements of A (1 \u2264 a_{i} \u2264 10^6). \n\n\n-----Output-----\n\nFor each test first print the answer:   NO, if Masha's task is impossible to solve, there is no way to create the required set B.  YES, if there is the way to create the required set. In this case the second line must contain n different positive integers b_{j}\u00a0\u2014 elements of B (1 \u2264 b_{j} \u2264 10^6). If there are several possible sets, output any of them. \n\n\n-----Example-----\nInput\n3\n3\n1 10 100\n1\n1\n2\n2 4\n\nOutput\nYES\n1 2 3 \nYES\n1 \nYES\n1 2\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given a string A consisting of lowercase English letters.\nFind the shortest string among the strings consisting of lowercase English letters that are not subsequences of A.\nIf there are more than one such string, find the lexicographically smallest one among them.\n\n-----Constraints-----\n - 1 \\leq |A| \\leq 2 \\times 10^5\n - A consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA\n\n-----Output-----\nPrint the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of A.\n\n-----Sample Input-----\natcoderregularcontest\n\n-----Sample Output-----\nb\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA subsequence of a string S is a string that can be obtained by deleting zero or more characters from S without changing the order of the remaining characters.\nFor example, arc, artistic and (an empty string) are all subsequences of artistic; abc and ci are not.\nYou are given a string A consisting of lowercase English letters.\nFind the shortest string among the strings consisting of lowercase English letters that are not subsequences of A.\nIf there are more than one such string, find the lexicographically smallest one among them.\n\n-----Constraints-----\n - 1 \\leq |A| \\leq 2 \\times 10^5\n - A consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA\n\n-----Output-----\nPrint the lexicographically smallest string among the shortest strings consisting of lowercase English letters that are not subsequences of A.\n\n-----Sample Input-----\natcoderregularcontest\n\n-----Sample Output-----\nb\n\nThe string atcoderregularcontest contains a as a subsequence, but not b.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given n strings s_1, s_2, ..., s_{n} consisting of characters 0 and 1. m operations are performed, on each of them you concatenate two existing strings into a new one. On the i-th operation the concatenation s_{a}_{i}s_{b}_{i} is saved into a new string s_{n} + i. After each operation you need to find the maximum positive integer k such that all possible strings consisting of 0 and 1 of length k are substrings of the new string. If there is no such k, print 0.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of strings. The next n lines contain strings s_1, s_2, ..., s_{n} (1 \u2264 |s_{i}| \u2264 100), one per line. The total length of strings is not greater than 100.\n\nThe next line contains single integer m (1 \u2264 m \u2264 100)\u00a0\u2014 the number of operations. m lines follow, each of them contains two integers a_{i} abd b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n + i - 1)\u00a0\u2014 the number of strings that are concatenated to form s_{n} + i.\n\n\n-----Output-----\n\nPrint m lines, each should contain one integer\u00a0\u2014 the answer to the question after the corresponding operation.\n\n\n-----Example-----\nInput\n5\n01\n10\n101\n11111\n0\n3\n1 2\n6 5\n4 4\n\nOutput\n1\n2\n0\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given n strings s_1, s_2, ..., s_{n} consisting of characters 0 and 1. m operations are performed, on each of them you concatenate two existing strings into a new one. On the i-th operation the concatenation s_{a}_{i}s_{b}_{i} is saved into a new string s_{n} + i (the operations are numbered starting from 1). After each operation you need to find the maximum positive integer k such that all possible strings consisting of 0 and 1 of length k (there are 2^{k} such strings) are substrings of the new string. If there is no such k, print 0.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the number of strings. The next n lines contain strings s_1, s_2, ..., s_{n} (1 \u2264 |s_{i}| \u2264 100), one per line. The total length of strings is not greater than 100.\n\nThe next line contains single integer m (1 \u2264 m \u2264 100)\u00a0\u2014 the number of operations. m lines follow, each of them contains two integers a_{i} abd b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n + i - 1)\u00a0\u2014 the number of strings that are concatenated to form s_{n} + i.\n\n\n-----Output-----\n\nPrint m lines, each should contain one integer\u00a0\u2014 the answer to the question after the corresponding operation.\n\n\n-----Example-----\nInput\n5\n01\n10\n101\n11111\n0\n3\n1 2\n6 5\n4 4\n\nOutput\n1\n2\n0\n\n\n\n-----Note-----\n\nOn the first operation, a new string \"0110\" is created. For k = 1 the two possible binary strings of length k are \"0\" and \"1\", they are substrings of the new string. For k = 2 and greater there exist strings of length k that do not appear in this string (for k = 2 such string is \"00\"). So the answer is 1.\n\nOn the second operation the string \"01100\" is created. Now all strings of length k = 2 are present.\n\nOn the third operation the string \"1111111111\" is created. There is no zero, so the answer is 0.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nDisplay \"Thanks for helping Chef!\" if given number N is less than 10, otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nWrite a program, which takes an integer N and if the number is less than 10 then display \"Thanks for helping Chef!\" otherwise print \"-1\".\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, output the given string or -1 depending on conditions, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- -20 \u2264 N \u2264 20\n\n-----Example-----\nInput\n3 \n1\n12\n-5\nOutput\nThanks for helping Chef!\n-1\nThanks for helping Chef!\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given numbers m and n.\n\nYou are given an array of strings of only 0's and 1's.\n\nReturn the maximum number of strings that can be formed by using less than (m+1) 0's and (n+1) 1's in total.\n\nNote:\n\nThe given numbers m and n will both not exceed 100\nThe size of given string array won't exceed 600.\n\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using less than 6 0s and 4 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\n\n\nExample 2:\n\nInput: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\"\"\"\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:",
    "13": "Python 3\n\"\"\"\nIn the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue.\nFor now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s.\n\n\nNow your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once.\n\n\n\nNote:\n\nThe given numbers of 0s and 1s will both not exceed 100\nThe size of given string array won't exceed 600.\n\n\n\nExample 1:\n\nInput: Array = {\"10\", \"0001\", \"111001\", \"1\", \"0\"}, m = 5, n = 3\nOutput: 4\n\nExplanation: This are totally 4 strings can be formed by the using of 5 0s and 3 1s, which are \u201c10,\u201d0001\u201d,\u201d1\u201d,\u201d0\u201d\n\n\n\nExample 2:\n\nInput: Array = {\"10\", \"0\", \"1\"}, m = 1, n = 1\nOutput: 2\n\nExplanation: You could form \"10\", but then you'd have nothing left. Better form \"0\" and \"1\".\n\"\"\"\nclass Solution:\n    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:",
    "14": "Python 3\n\"\"\"\nYou are given a sequence a_1, a_2, ..., a_{n} consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order.\n\nThe numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places.\n\nEvery element of the sequence must appear in exactly one subsequence.\n\n\n-----Input-----\n\nThe first line of input data contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the sequence.\n\nThe second line of input data contains n different integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.\n\n\n-----Output-----\n\nIn the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements.\n\nIn the next k lines print the description of subsequences in the following format: the number of elements in subsequence c_{i} (0 < c_{i} \u2264 n), then c_{i} integers l_1, l_2, ..., l_{c}_{i} (1 \u2264 l_{j} \u2264 n)\u00a0\u2014 indices of these elements in the original sequence. \n\nIndices could be printed in any order. Every index from 1 to n must appear in output exactly once.\n\nIf there are several possible answers, print any of them.\n\n\n-----Examples-----\nInput\n6\n3 2 1 6 5 4\n\nOutput\n4\n2 1 3\n1 2\n2 4 6\n1 5\n\nInput\n6\n83 -75 -49 11 37 62\n\nOutput\n1\n6 1 2 3 4 5 6\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a sequence a_1, a_2, ..., a_{n} consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order.\n\nSorting integers in a subsequence is a process such that the numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places.\n\nEvery element of the sequence must appear in exactly one subsequence.\n\n\n-----Input-----\n\nThe first line of input data contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the length of the sequence.\n\nThe second line of input data contains n different integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the sequence. It is guaranteed that all elements of the sequence are distinct.\n\n\n-----Output-----\n\nIn the first line print the maximum number of subsequences k, which the original sequence can be split into while fulfilling the requirements.\n\nIn the next k lines print the description of subsequences in the following format: the number of elements in subsequence c_{i} (0 < c_{i} \u2264 n), then c_{i} integers l_1, l_2, ..., l_{c}_{i} (1 \u2264 l_{j} \u2264 n)\u00a0\u2014 indices of these elements in the original sequence. \n\nIndices could be printed in any order. Every index from 1 to n must appear in output exactly once.\n\nIf there are several possible answers, print any of them.\n\n\n-----Examples-----\nInput\n6\n3 2 1 6 5 4\n\nOutput\n4\n2 1 3\n1 2\n2 4 6\n1 5\n\nInput\n6\n83 -75 -49 11 37 62\n\nOutput\n1\n6 1 2 3 4 5 6\n\n\n\n-----Note-----\n\nIn the first sample output:\n\nAfter sorting the first subsequence we will get sequence 1\u00a02\u00a03\u00a06\u00a05\u00a04.\n\nSorting the second subsequence changes nothing.\n\nAfter sorting the third subsequence we will get sequence 1\u00a02\u00a03\u00a04\u00a05\u00a06.\n\nSorting the last subsequence changes nothing.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n# Task\n\nGiven two positive values: divisor and bound. Write a function maxMultiple(divisor, bound) to find the largest integer that is divisible by divisor and less than or equal to bound but greater than 0. It's guaranteed that a divisor is found.\n\n# Examples:\n\nInput: maxMultiple(2,7)\nOutput: 6\nExplanation: 6 is divisible 2, 6 is less than or equal to bound 7, and 6 is > 0.\n\nInput: maxMultiple(10,50)\nOutput: 50\nExplanation: 50is divisible by 10, 50 is less than or equal to bound 50, and 50 is > 0.\n\nInput: maxMultiple(37,200)\nOutput: 185\nExplanation: 185 is divisible by 37, 185 is less than or equal to bound 200, and 185 is > 0.\n\"\"\"\ndef max_multiple(divisor, bound):",
    "17": "Python 3\n\"\"\"\n# Task\n\n**_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That , \n\n# Conditions :\n\n* **_N_**  is *divisible by divisor*\n\n* **_N_**  is *less than or equal to bound* \n\n* **_N_**  is *greater than 0*.\n___\n\n# Notes \n\n* The **_parameters (divisor, bound)_** passed to the function are *only positive values* .\n* *It's guaranteed that* a **divisor is Found** .\n___\n# Input >> Output Examples \n\n```\nmaxMultiple (2,7) ==> return (6)\n```\n## Explanation: \n\n**_(6)_** is divisible by **_(2)_** , **_(6)_** is less than or equal to bound **_(7)_** , and **_(6)_** is > 0 .\n___\n```\nmaxMultiple (10,50)  ==> return (50)\n```\n## Explanation:\n\n**_(50)_** *is divisible by* **_(10)_** , **_(50)_** is less than or equal to bound **_(50)_** , and **_(50)_** is > 0 .*\n___\n```\nmaxMultiple (37,200) ==> return (185)\n```\n## Explanation:\n\n**_(185)_** is divisible by **_(37)_** , **_(185)_** is less than or equal to bound **_(200)_** , and **_(185)_** is > 0 .\n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n~~~if:nasm\n## NASM-specific notes\n\nThe function declaration is `int max_multiple(int divisor, int bound)` where the first argument is the divisor and the second one is the bound.\n~~~\n\"\"\"\ndef max_multiple(divisor, bound):",
    "18": "Python 3\n\"\"\"\nLet's assume that   v(n) is the largest prime number, that does not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first line contains integer t\u00a0(1 \u2264 t \u2264 500) \u2014 the number of testscases. \n\nEach of the following t lines of the input contains integer n (2 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nPrint t lines: the i-th of them must contain the answer to the i-th test as an irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\nInput\n2\n2\n3\n\nOutput\n1/6\n7/30\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLet's assume that   v(n) is the largest prime number, that does not exceed n;\n\n u(n) is the smallest prime number strictly greater than n. \n\nFind $\\sum_{i = 2}^{n} \\frac{1}{v(i) u(i)}$.\n\n\n-----Input-----\n\nThe first line contains integer t\u00a0(1 \u2264 t \u2264 500) \u2014 the number of testscases. \n\nEach of the following t lines of the input contains integer n (2 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nPrint t lines: the i-th of them must contain the answer to the i-th test as an irreducible fraction \"p/q\", where p, q are integers, q > 0.\n\n\n-----Examples-----\nInput\n2\n2\n3\n\nOutput\n1/6\n7/30\n\"\"\"\ndef code():"
}