{
    "0": "Python 3\n\"\"\"\n You are an intergalactic surgeon and you have an alien patient. For the purposes of this problem, we can and we will model this patient's body using a $2 \\times (2k + 1)$ rectangular grid. The alien has $4k + 1$ distinct organs, numbered $1$ to $4k + 1$. In healthy such aliens, the organs are arranged in a particular way. For example, here is how the organs of a healthy such alien would be positioned, when viewed from the top, for $k = 4$: [Image]  Here, the E represents empty space.  In general, the first row contains organs $1$ to $2k + 1$ (in that order from left to right), and the second row contains organs $2k + 2$ to $4k + 1$ (in that order from left to right) and then empty space right after.  Your patient's organs are complete, and inside their body, but they somehow got shuffled around! Your job, as an intergalactic surgeon, is to put everything back in its correct position. All organs of the alien must be in its body during the entire procedure. This means that at any point during the procedure, there is exactly one cell (in the grid) that is empty. In addition, you can only move organs around by doing one of the following things:  You can switch the positions of the empty space E with any organ to its immediate left or to its immediate right (if they exist). In reality, you do this by sliding the organ in question to the empty space;  You can switch the positions of the empty space E with any organ to its immediate\n-----Input----- The first line of input contains a single integer $t$ ($1 \\le t \\le 4$) denoting the number of test cases. The next lines contain descriptions of the test cases. Each test case consists of three lines. The first line contains a single integer $k$ ($1 \\le k \\le 15$) which determines the size of the grid. Then two lines follow. Each of them contains $2k + 1$ space-separated integers or the letter E. They describe the first and second rows of organs, respectively. It is guaranteed that all $4k + 1$ organs are present and there is exactly one E. -----Output----- For each test case, first, print a single line containing either:  SURGERY COMPLETE if it is possible to place back all internal organs in the correct locations;  SURGERY FAILED if it is impossible.  If it is impossible, then this is the only line of output for the test case. However, if it is possible, output a few more lines describing the sequence of moves to place the organs in the correct locations.  The sequence of moves will be a (possibly empty) string of letters u, d, l or r, representing sliding the organ that's directly above, below, to the left or to the right of the empty space, respectively, into the empty space. Print the sequence of moves in the following line, as such a string.  For convenience, you may use shortcuts to reduce the size of your output. You may use uppercase letters as shortcuts for sequences of moves. For example, you could choose T to represent the string lddrr. These shortcuts may also include other shortcuts on their own! For example, you could choose E to represent TruT, etc. You may use any number of uppercase letters (including none) as shortcuts. The only requirements are the following:  The total length of all strings in your output for a single case is at most $10^4$;  There must be no cycles involving the shortcuts that are reachable from the main sequence;  The resulting sequence of moves is finite, after expanding all shortcuts. Note that the final sequence of moves (after expanding) may be much longer than $10^4$; the only requirement is that it's finite.  As an example, if T = lddrr, E = TruT and R = rrr, then TurTlER expands to:  TurTlER  lddrrurTlER  lddrrurlddrrlER  lddrrurlddrrlTruTR  lddrrurlddrrllddrrruTR  lddrrurlddrrllddrrrulddrrR  lddrrurlddrrllddrrrulddrrrrr  To use shortcuts, print each one of them in a single line as the uppercase letter, then space, and then the string that this shortcut represents. They may be printed in any order. At the end of all of those, print a single line containing DONE.  Note: You still need to print DONE even if you don't plan on using shortcuts. Your sequence does not need to be the shortest. Any valid sequence of moves (satisfying the requirements above) will be accepted. -----Example----- Input 2 3 1 2 3 5 6 E 7 8 9 10 4 11 12 13 11 34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1 E 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3 Output SURGERY COMPLETE IR R SrS S rr I lldll DONE SURGERY FAILED -----Note----- There are three shortcuts defined in the first sample output:  R = SrS  S = rr  I = lldll  The sequence of moves is IR and it expands to:  IR  lldllR  lldllSrS  lldllrrrS  lldllrrrrr\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are an intergalactic surgeon and you have an alien patient. For the purposes of this problem, we can and we will model this patient's body using a $2 \\times (2k + 1)$ rectangular grid. The alien has $4k + 1$ distinct organs, numbered $1$ to $4k + 1$.\n\nIn healthy such aliens, the organs are arranged in a particular way. For example, here is how the organs of a healthy such alien would be positioned, when viewed from the top, for $k = 4$: [Image] \n\nHere, the E represents empty space. \n\nIn general, the first row contains organs $1$ to $2k + 1$ (in that order from left to right), and the second row contains organs $2k + 2$ to $4k + 1$ (in that order from left to right) and then empty space right after. \n\nYour patient's organs are complete, and inside their body, but they somehow got shuffled around! Your job, as an intergalactic surgeon, is to put everything back in its correct position. All organs of the alien must be in its body during the entire procedure. This means that at any point during the procedure, there is exactly one cell (in the grid) that is empty. In addition, you can only move organs around by doing one of the following things:  You can switch the positions of the empty space E with any organ to its immediate left or to its immediate right (if they exist). In reality, you do this by sliding the organ in question to the empty space;  You can switch the positions of the empty space E with any organ to its immediate top or its immediate bottom (if they exist) only if the empty space is on the leftmost column, rightmost column or in the centermost column. Again, you do this by sliding the organ in question to the empty space. \n\nYour job is to figure out a sequence of moves you must do during the surgical procedure in order to place back all $4k + 1$ internal organs of your patient in the correct cells. If it is impossible to do so, you must say so.\n\n\n-----Input-----\n\nThe first line of input contains a single integer $t$ ($1 \\le t \\le 4$) denoting the number of test cases. The next lines contain descriptions of the test cases.\n\nEach test case consists of three lines. The first line contains a single integer $k$ ($1 \\le k \\le 15$) which determines the size of the grid. Then two lines follow. Each of them contains $2k + 1$ space-separated integers or the letter E. They describe the first and second rows of organs, respectively. It is guaranteed that all $4k + 1$ organs are present and there is exactly one E.\n\n\n-----Output-----\n\nFor each test case, first, print a single line containing either:  SURGERY COMPLETE if it is possible to place back all internal organs in the correct locations;  SURGERY FAILED if it is impossible. \n\nIf it is impossible, then this is the only line of output for the test case. However, if it is possible, output a few more lines describing the sequence of moves to place the organs in the correct locations. \n\nThe sequence of moves will be a (possibly empty) string of letters u, d, l or r, representing sliding the organ that's directly above, below, to the left or to the right of the empty space, respectively, into the empty space. Print the sequence of moves in the following line, as such a string. \n\nFor convenience, you may use shortcuts to reduce the size of your output. You may use uppercase letters as shortcuts for sequences of moves. For example, you could choose T to represent the string lddrr. These shortcuts may also include other shortcuts on their own! For example, you could choose E to represent TruT, etc.\n\nYou may use any number of uppercase letters (including none) as shortcuts. The only requirements are the following:  The total length of all strings in your output for a single case is at most $10^4$;  There must be no cycles involving the shortcuts that are reachable from the main sequence;  The resulting sequence of moves is finite, after expanding all shortcuts. Note that the final sequence of moves (after expanding) may be much longer than $10^4$; the only requirement is that it's finite. \n\nAs an example, if T = lddrr, E = TruT and R = rrr, then TurTlER expands to:  TurTlER  lddrrurTlER  lddrrurlddrrlER  lddrrurlddrrlTruTR  lddrrurlddrrllddrrruTR  lddrrurlddrrllddrrrulddrrR  lddrrurlddrrllddrrrulddrrrrr \n\nTo use shortcuts, print each one of them in a single line as the uppercase letter, then space, and then the string that this shortcut represents. They may be printed in any order. At the end of all of those, print a single line containing DONE. \n\nNote: You still need to print DONE even if you don't plan on using shortcuts.\n\nYour sequence does not need to be the shortest. Any valid sequence of moves (satisfying the requirements above) will be accepted.\n\n\n-----Example-----\nInput\n2\n3\n1 2 3 5 6 E 7\n8 9 10 4 11 12 13\n11\n34 45 6 22 16 43 38 44 5 4 41 14 7 29 28 19 9 18 42 8 17 33 1\nE 15 40 36 31 24 10 2 21 11 32 23 30 27 35 25 13 12 39 37 26 20 3\n\nOutput\nSURGERY COMPLETE\nIR\nR SrS\nS rr\nI lldll\nDONE\nSURGERY FAILED\n\n\n\n-----Note-----\n\nThere are three shortcuts defined in the first sample output:  R = SrS  S = rr  I = lldll \n\nThe sequence of moves is IR and it expands to:  IR  lldllR  lldllSrS  lldllrrrS  lldllrrrrr\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Whitespace is an esoteric programming language (esolang) created in 2003 by Edwin Brady and Chris Morris. Many elements of Whitespace are familiar, including the fact that it is imperative and stack-based, but it has one main distinguishing feature: the only significant characters in a Whitespace source code file are [Tab] (ASCII $9$), [Newline] (ASCII $10$), and [Space] (ASCII $32$). This, of course, has the intentionally humorous result that all source code files using only these characters appear completely blank in most text editors, which can be problematic if you have a boss who keeps looking over your shoulder for evidence of productivity. (A Whitespace source code file can, in fact, include other characters, but these are simply ignored, so we will not consider that possibility here.) For this problem, you will work with a simplified version of Whitespace that we call Whitespace Lite, affectionately known as Litespace. Let $W$ denote the $3$-character set $\\{ $[Tab], [Newline], [Space]$\\} $. A Litespace program is a sequence of instructions, each of which consists of two or more characters from $W$. There is a stack available that holds signed integers; when a Litespace program begins, the stack is initially empty. In the list of instructions, given below, only one instruction (the last) is specifically intended to produce output, but most other instructions produce output if an error condition is encountered. Litespace Instruction Set: - [Space][Space]<integer>   Push the specified integer onto the stack. - [Space][Newline][Space\n-----Input----- Input consists of a single non-empty string of characters from $\\{ $\u2018T\u2019, \u2018N\u2019, \u2018S\u2019$\\} $ representing a valid sequence of Litespace instructions. The length of the string is at most $10000$. It is guaranteed that the Litespace program produces at least one line of output. Also, any integer pushed onto the stack or generated by a successful arithmetic operation will be less than $2^{31}$ in absolute value. -----Output----- Print the output of the Litespace program. -----Examples----- Sample Input: SSSTTSNTNST Sample Output: 6\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWhitespace is an esoteric programming language (esolang) created in 2003 by Edwin Brady and Chris Morris. Many elements of Whitespace are familiar, including the fact that it is imperative and stack-based, but it has one main distinguishing feature: the only significant characters in a Whitespace source code file are [Tab] (ASCII\u00a0$9$), [Newline] (ASCII\u00a0$10$), and [Space] (ASCII\u00a0$32$). This, of course, has the intentionally humorous result that all source code files using only these characters appear completely blank in most text editors, which can be problematic if you have a boss who keeps looking over your shoulder for evidence of productivity. (A Whitespace source code file can, in fact, include other characters, but these are simply ignored, so we will not consider that possibility here.)\n\nFor this problem, you will work with a simplified version of Whitespace that we call Whitespace Lite, affectionately known as Litespace. Let $W$ denote the $3$-character set $\\{ $[Tab], [Newline], [Space]$\\} $. A Litespace program is a sequence of instructions, each of which consists of two or more characters from\u00a0$W$. There is a stack available that holds signed integers; when a Litespace program begins, the stack is initially empty. In the list of instructions, given below, only one instruction (the last) is specifically intended to produce output, but most other instructions produce output if an error condition is encountered.\n\nLitespace Instruction Set:\n - [Space][Space]<integer> \u2014 Push the specified integer onto the stack.\n - [Space][Newline][Space] \u2014 Make a copy of the topmost stack element and push this copy onto the stack. If the stack is empty, print \u201cInvalid copy operation\u201d on a line by itself.\n - [Space][Newline][Tab] \u2013 Swap the two topmost stack elements. If the stack contains fewer than two elements, print \u201cInvalid swap operation\u201d on a line by itself and leave the stack unchanged.\n - [Space][Newline][Newline] \u2013 Remove and discard the topmost stack element. If the stack is empty, print \u201cInvalid remove operation\u201d on a line by itself.\n - [Tab][Space][Space][Space] \u2014 Remove the two topmost stack elements and push their sum onto the stack. If the stack contains fewer than two elements, print \u201cInvalid addition operation\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Space][Space][Tab] \u2014 Remove the two topmost stack elements and push their difference onto the stack (the topmost element subtracted from the second topmost element). If the stack contains fewer than two elements, print \u201cInvalid subtraction operation\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Space][Space][Newline] \u2014 Remove the two topmost stack elements and push their product onto the stack. If the stack contains fewer than two elements, print \u201cInvalid multiplication operation\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Space][Tab][Space] \u2014 Remove the two topmost stack elements and push their quotient onto the stack (the second topmost element divided by the topmost element); this is integer division, so discard any fractional part of the quotient. If the stack contains fewer than two elements, print \u201cInvalid division operation\u201d on a line by itself and leave the stack unchanged. If the stack contains two or more elements, the topmost of which is\u00a0$0$, print \u201cDivision by zero\u201d on a line by itself and leave the stack unchanged.\n - [Tab][Newline][Space][Tab] \u2014 Remove the integer on the top of the stack and print it on a line by itself (in the usual base-$10$ representation). If the stack is empty, print \u201cInvalid print operation\u201d on a line by itself.\n\nIn the first instruction above, an integer to be pushed onto the stack is in binary form, encoded as two or more characters from the set $\\{ $[Space], [Tab]$\\} $ followed by a [Newline] character. The first character encodes the sign of the integer ([Space] $=$ positive, [Tab] $=$ negative), and the following [Space] and [Tab] characters encode the bits in the binary representation of the absolute value (magnitude) of the integer, with the convention that [Space] $= 0$, [Tab] $= 1$. The first bit after the sign bit is most significant, and there are no leading zeros. For example, since $13$ in binary is $1101$, the encoding of $-13$ is [Tab][Tab][Tab][Space][Tab][Newline] \n\nNote that there are two encodings of $0$, one for $+0$ and one for $-0$. These are interchangeable. However, in the last instruction above, if the value to be printed is zero, print\u00a0\u201c0\u201d, not\u00a0\u201c-0\u201d.\n\nGiven a Litespace program, produce the program\u2019s output. For compactness, the program will be given as a string of characters from the set $\\{ $\u2018T\u2019, \u2018N\u2019, \u2018S\u2019$\\} $, where \u2018T\u2019 denotes [Tab], \u2018N\u2019 denotes [Newline], and \u2018S\u2019 denotes [Space].\n\n-----Input-----\nInput consists of a single non-empty string of characters from $\\{ $\u2018T\u2019, \u2018N\u2019, \u2018S\u2019$\\} $ representing a valid sequence of Litespace instructions. The length of the string is at most $10000$. It is guaranteed that the Litespace program produces at least one line of output. Also, any integer pushed onto the stack or generated by a successful arithmetic operation will be less than $2^{31}$ in absolute value.\n\n-----Output-----\nPrint the output of the Litespace program.\n\n-----Examples-----\nSample Input:\nSSSTTSNTNST\nSample Output:\n6\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n you want to complete a project of $h$ tasks solely with help from your coworkers, but you need to be careful not to annoy any of them too much. What s the best you can do \n-----Input----- The first line contains $2$ integers $h$ and $c$, where $h$ ($1 \\le h \\le 100000$) is the number of times you have to ask for help to complete the project, and $c$ ($1 \\le c \\le 100000$) denotes the number of coworkers you have. Each of the following $c$ lines contains two positive integers $a$ and $d$, representing a coworker whose initial annoyance level is $a$ and who is getting more annoyed at you by an increase of $d$ every time you ask them for help ($1\\le a, d \\le 10^9$). -----Output----- Output a single number, which is the maximum annoyance level any coworker has at you provided you use an optimal strategy to minimize this level. (In other words, of all possible strategies, choose one that minimizes the annoyance level of the worker or workers who are most annoyed at you at the end.) -----Sample Input 1 Explanation----- You have $4$ coworkers and you need to ask for help $4$ times. Initially, their annoyance levels are $a_1=1, a_2=2, a_3=3, a_4=4$, the increases are $d_1=2, d_2=3, d_3=4, d_4=5$. One optimal solution is to ask for help twice from coworker $1$, once from coworker $2$, and once from coworker $3$, in which case the final annoyance levels are: $a_1=1 + 2 \\cdot 2 = 5, a_2=2 + 3 = 5, a_3=3 + 4 = 7, a_4=4$. The coworker that is most annoyed at you is coworker $3$, whose annoyance level at you is $7$. Or, you could ask coworker $1$ for help $3$ times and coworker $2$ once, leaving you with $a_1=1 + 3 \\cdot 2 = 7, a_2=2 + 3 = 5, a_3=3, a_4=4$. Both strategies yield the same minimal maximum amount. -----Examples----- Sample Input 1: 4 4 1 2 2 3 3 4 4 5 Sample Output 1: 7 Sample Input 2: 3 2 1 1000 1000 1 Sample Output 2: 1002\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nIt\u2019s another day in the office, and you\u2019re a mastermind of not doing any work yourself. Instead, you\u2019ll go to your coworkers for \u201chelp,\u201d but secretly have them do all the work.\n\nYou\u2019ve determined that the more one of your coworkers helps you, the more annoyed they become. You\u2019ve also been able to determine how much more annoyed a coworker gets everytime you ask them for help. At the beginning of the day, a coworker is initially $a$ annoyed at you. That\u2019s their annoyance level. Everytime you ask them for help though, they become $d$ more annoyed at you \u2013 their annoyance level $a$ increases by a constant amount $d$ so that $a=a+d$.\n\nYou want to complete a project of $h$ tasks solely with \u201chelp\u201d from your coworkers, but you need to be careful not to annoy any of them too much.\n\nWhat\u2019s the best you can do?\n\n-----Input-----\nThe first line contains $2$ integers $h$ and $c$, where $h$ ($1 \\le h \\le 100000$) is the number of times you have to ask for help to complete the project, and $c$ ($1 \\le c \\le 100000$) denotes the number of coworkers you have.\n\nEach of the following $c$ lines contains two positive integers $a$ and $d$, representing a coworker whose initial annoyance level is $a$ and who is getting more annoyed at you by an increase of $d$ every time you ask them for help ($1\\le a, d \\le 10^9$).\n\n-----Output-----\nOutput a single number, which is the maximum annoyance level any coworker has at you provided you use an optimal strategy to minimize this level. (In other words, of all possible strategies, choose one that minimizes the annoyance level of the worker or workers who are most annoyed at you at the end.)\n\n-----Sample Input 1 Explanation-----\nYou have $4$ coworkers and you need to ask for help $4$ times. Initially, their annoyance levels are $a_1=1, a_2=2, a_3=3, a_4=4$, the increases are $d_1=2, d_2=3, d_3=4, d_4=5$. One optimal solution is to ask for help twice from coworker $1$, once from coworker $2$, and once from coworker $3$, in which case the final annoyance levels are: $a_1=1 + 2 \\cdot 2 = 5, a_2=2 + 3 = 5, a_3=3 + 4 = 7, a_4=4$. The coworker that is most annoyed at you is coworker $3$, whose annoyance level at you is $7$. Or, you could ask coworker $1$ for help $3$ times and coworker $2$ once, leaving you with $a_1=1 + 3 \\cdot 2 = 7, a_2=2 + 3 = 5, a_3=3, a_4=4$. Both strategies yield the same minimal maximum amount.\n\n-----Examples-----\nSample Input 1:\n4 4\n1 2\n2 3\n3 4\n4 5\nSample Output 1:\n7\n\nSample Input 2:\n3 2\n1 1000\n1000 1\nSample Output 2:\n1002\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given a sequence of integers, determine the length of the longest subsequence that Zigzags.\n\n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains an integer $n$ ($1 \\le n \\le 1000000$) which is the number of integers in the list. Each of the following $n$ lines will have an integer $k$ ($1 \\le k \\le 1000000$). -----Output----- Output a single integer, which is the length of the longest Zigzagging subsequence of the input list. -----Examples----- Sample Input: 5 1 2 3 4 2 Sample Output: 3\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA sequence of integers is said to Zigzag if adjacent elements alternate between strictly increasing and strictly decreasing. Note that the sequence may start by either increasing or decreasing. Given a sequence of integers, determine the length of the longest subsequence that Zigzags. For example, consider this sequence:\n\n1 2 3 4 2\n\nThere are several Zigzagging subsequences of length $3$:\n\n1 3 2        1 4 2        2 3 2        2 4 2        3 4 2\n\nBut there are none of length greater than $3$, so the answer is $3$.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains an integer $n$ ($1 \\le n \\le 1000000$) which is the number of integers in the list. Each of the following $n$ lines will have an integer $k$ ($1 \\le k \\le 1000000$).\n\n-----Output-----\nOutput a single integer, which is the length of the longest Zigzagging subsequence of the input list.\n\n-----Examples-----\nSample Input:\n5\n1\n2\n3\n4\n2\nSample Output:\n3\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Lisa works as a waitress in a restaurant. Tonight is her birthday so Lisa asked the chef to prepare his special meal for her friends. The chef s meal is made of $N$ ingredients. To prepare one serving of the meal he needs a certain amount of each ingredient. There are some ingredients already available in the kitchen and Lisa will buy the rest at the grocery store. The store has all the necessary ingredients, each coming in smaller and larger packages. Lisa has $M$ dollars and wants to spend them so that the chef can make the most servings of his meal. For example, consider the first sample data below. For $99$ dollars Lisa will buy three smaller and one larger package of the first ingredient, as well as one smaller and two larger packages of the second ingredient $(3\\cdot 10 + 1 \\cdot 11 + 1 \\cdot 10 + 2 \\cdot 24 = 99)$. The chef will then have $51$ units $(8 + 3 \\cdot 10 + 1 \\cdot 13)$ of the first ingredient and $60$ units $(20 + 1 \\cdot 6 + 2 \\cdot 17)$ of the second ingredient, enough for $5$ servings. \n-----Input----- The first line contains two integers $N$ and $M$, $1 \\le N \\le 100$, $1 \\le M \\le 100000$. Each of the following $N$ lines contains $6$ positive integers, information about one ingredient. These specify, in order:  - $X$, $10 \\le X \\le 100$, the amount of the ingredient needed in one serving;  - $Y$, $1 \\le Y \\le 100$, the amount of the ingredient already available in the kitchen;  - $S_ M$, $1 \\le S_ M < 100$, the size of the smaller package at the store;  - $P_ M$, $10 \\le PM < 100$, the price of the smaller package;  - $S_ V$, $S_ M < S_ V \\le 100$, the size of the larger package; and  - $P_ V$, $P_ M < P_ V \\le 100$, the price of the larger package. -----Output----- Output the largest number of servings the chef can make if Lisa spends her money wisely. -----Examples----- Sample Input: 2 100 10 8 10 10 13 11 12 20 6 10 17 24 Sample Output: 5\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nLisa works as a waitress in a restaurant. Tonight is her birthday so Lisa asked the chef to prepare his special meal for her friends. The chef\u2019s meal is made of $N$ ingredients. To prepare one serving of the meal he needs a certain amount of each ingredient.\n\nThere are some ingredients already available in the kitchen and Lisa will buy the rest at the grocery store. The store has all the necessary ingredients, each coming in smaller and larger packages. Lisa has $M$ dollars and wants to spend them so that the chef can make the most servings of his meal.\n\nFor example, consider the first sample data below. For $99$ dollars Lisa will buy three smaller and one larger package of the first ingredient, as well as one smaller and two larger packages of the second ingredient $(3\\cdot 10 + 1 \\cdot 11 + 1 \\cdot 10 + 2 \\cdot 24 = 99)$. The chef will then have $51$ units $(8 + 3 \\cdot 10 + 1 \\cdot 13)$ of the first ingredient and $60$ units $(20 + 1 \\cdot 6 + 2 \\cdot 17)$ of the second ingredient, enough for $5$ servings.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$, $1 \\le N \\le 100$, $1 \\le M \\le 100000$. Each of the following $N$ lines contains $6$ positive integers, information about one ingredient. These specify, in order:\n - $X$, $10 \\le X \\le 100$, the amount of the ingredient needed in one serving;\n - $Y$, $1 \\le Y \\le 100$, the amount of the ingredient already available in the kitchen;\n - $S_ M$, $1 \\le S_ M < 100$, the size of the smaller package at the store;\n - $P_ M$, $10 \\le PM < 100$, the price of the smaller package;\n - $S_ V$, $S_ M < S_ V \\le 100$, the size of the larger package; and\n - $P_ V$, $P_ M < P_ V \\le 100$, the price of the larger package.\n\n-----Output-----\nOutput the largest number of servings the chef can make if Lisa spends her money wisely.\n\n-----Examples-----\nSample Input:\n2 100\n10 8 10 10 13 11\n12 20 6 10 17 24\nSample Output:\n5\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Maxim asks you to count, how many numbers m (1   m   n) are there, such that the sum of values in the cells in the row number m + 1 of the resulting matrix equals t.  \n-----Input----- A single line contains two integers n and t (1 \u2264 n, t \u2264 10^12, t \u2264 n + 1). Please, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier. -----Output----- In a single line print a single integer \u2014 the answer to the problem.  -----Examples----- Input 1 1 Output 1 Input 3 2 Output 1 Input 3 3 Output 0 Input 1000000000000 1048576 Output 118606527258\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nMaxim loves to fill in a matrix in a special manner. Here is a pseudocode of filling in a matrix of size (m + 1) \u00d7 (m + 1):\n\n[Image]\n\nMaxim asks you to count, how many numbers m (1 \u2264 m \u2264 n) are there, such that the sum of values in the cells in the row number m + 1 of the resulting matrix equals t.\n\nExpression (x xor y) means applying the operation of bitwise excluding \"OR\" to numbers x and y. The given operation exists in all modern programming languages. For example, in languages C++ and Java it is represented by character \"^\", in Pascal \u2014 by \"xor\".\n\n\n-----Input-----\n\nA single line contains two integers n and t (1 \u2264 n, t \u2264 10^12, t \u2264 n + 1).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in C++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the answer to the problem. \n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n1\n\nInput\n3 3\n\nOutput\n0\n\nInput\n1000000000000 1048576\n\nOutput\n118606527258\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a set of people. Each of them has a probability of coming up with a problem. You need to choose such a set of people that maximizes the chances of Andrey not getting upset. \n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of Andrey's friends. The second line contains n real numbers p_{i} (0.0 \u2264 p_{i} \u2264 1.0) \u2014 the probability that the i-th friend can come up with a problem. The probabilities are given with at most 6 digits after decimal point. -----Output----- Print a single real number \u2014 the probability that Andrey won't get upset at the optimal choice of friends. The answer will be considered valid if it differs from the correct one by at most 10^{ - 9}. -----Examples----- Input 4 0.1 0.2 0.3 0.8 Output 0.800000000000 Input 2 0.1 0.2 Output 0.260000000000 -----Note----- In the first sample the best strategy for Andrey is to ask only one of his friends, the most reliable one. In the second sample the best strategy for Andrey is to ask all of his friends to come up with a problem. Then the probability that he will get exactly one problem is 0.1\u00b70.8 + 0.9\u00b70.2 = 0.26.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nAndrey needs one more problem to conduct a programming contest. He has n friends who are always willing to help. He can ask some of them to come up with a contest problem. Andrey knows one value for each of his fiends \u2014 the probability that this friend will come up with a problem if Andrey asks him.\n\nHelp Andrey choose people to ask. As he needs only one problem, Andrey is going to be really upset if no one comes up with a problem or if he gets more than one problem from his friends. You need to choose such a set of people that maximizes the chances of Andrey not getting upset.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of Andrey's friends. The second line contains n real numbers p_{i} (0.0 \u2264 p_{i} \u2264 1.0) \u2014 the probability that the i-th friend can come up with a problem. The probabilities are given with at most 6 digits after decimal point.\n\n\n-----Output-----\n\nPrint a single real number \u2014 the probability that Andrey won't get upset at the optimal choice of friends. The answer will be considered valid if it differs from the correct one by at most 10^{ - 9}.\n\n\n-----Examples-----\nInput\n4\n0.1 0.2 0.3 0.8\n\nOutput\n0.800000000000\n\nInput\n2\n0.1 0.2\n\nOutput\n0.260000000000\n\n\n\n-----Note-----\n\nIn the first sample the best strategy for Andrey is to ask only one of his friends, the most reliable one.\n\nIn the second sample the best strategy for Andrey is to ask all of his friends to come up with a problem. Then the probability that he will get exactly one problem is 0.1\u00b70.8 + 0.9\u00b70.2 = 0.26.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a set of coins, their values and the price of the chocolate. You need to find all the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x.\n-----Input----- The first line contains two integers n and k (1  \u2264  n, k  \u2264  500)\u00a0\u2014 the number of coins and the price of the chocolate, respectively. Next line will contain n integers c_1, c_2, ..., c_{n} (1 \u2264 c_{i} \u2264 500)\u00a0\u2014 the values of Pari's coins. It's guaranteed that one can make value k using these coins. -----Output----- First line of the output must contain a single integer q\u2014 the number of suitable values x. Then print q integers in ascending order\u00a0\u2014 the values that Arya can make for some subset of coins of Pari that pays for the chocolate. -----Examples----- Input 6 18 5 6 1 10 12 2 Output 16 0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18  Input 3 50 25 25 50 Output 3 0 25 50\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPari wants to buy an expensive chocolate from Arya. She has n coins, the value of the i-th coin is c_{i}. The price of the chocolate is k, so Pari will take a subset of her coins with sum equal to k and give it to Arya.\n\nLooking at her coins, a question came to her mind: after giving the coins to Arya, what values does Arya can make with them? She is jealous and she doesn't want Arya to make a lot of values. So she wants to know all the values x, such that Arya will be able to make x using some subset of coins with the sum k.\n\nFormally, Pari wants to know the values x such that there exists a subset of coins with the sum k such that some subset of this subset has the sum x, i.e. there is exists some way to pay for the chocolate, such that Arya will be able to make the sum x using these coins.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1  \u2264  n, k  \u2264  500)\u00a0\u2014 the number of coins and the price of the chocolate, respectively.\n\nNext line will contain n integers c_1, c_2, ..., c_{n} (1 \u2264 c_{i} \u2264 500)\u00a0\u2014 the values of Pari's coins.\n\nIt's guaranteed that one can make value k using these coins.\n\n\n-----Output-----\n\nFirst line of the output must contain a single integer q\u2014 the number of suitable values x. Then print q integers in ascending order\u00a0\u2014 the values that Arya can make for some subset of coins of Pari that pays for the chocolate.\n\n\n-----Examples-----\nInput\n6 18\n5 6 1 10 12 2\n\nOutput\n16\n0 1 2 3 5 6 7 8 10 11 12 13 15 16 17 18 \n\nInput\n3 50\n25 25 50\n\nOutput\n3\n0 25 50\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n A bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\" you can get a well-formed mathematical expression from it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not. The teacher gave Dmitry's class a very strange task   she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima's turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know. Dima suspects now that he simply missed the word \"correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times (possibly zero) perform the reorder operation. The reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes $l$ nanoseconds, where $l$ is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't change the number of opening and closing brackets. For example for \"))((\" he can choose the substring \")(\" and do reorder \")()(\" (this operation will take $2$ nanoseconds). Since Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this,\n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of Dima's sequence. The second line contains string of length $n$, consisting of characters \"(\" and \")\" only. -----Output----- Print a single integer\u00a0\u2014 the minimum number of nanoseconds to make the sequence correct or \"-1\" if it is impossible to do so. -----Examples----- Input 8 ))((())( Output 6 Input 3 (() Output -1 -----Note----- In the first example we can firstly reorder the segment from first to the fourth character, replacing it with \"()()\", the whole sequence will be \"()()())(\". And then reorder the segment from the seventh to eighth character, replacing it with \"()\". In the end the sequence will be \"()()()()\", while the total time spent is $4 + 2 = 6$ nanoseconds.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\" you can get a well-formed mathematical expression from it. For example, sequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and \"(()))(\" are not.\n\nThe teacher gave Dmitry's class a very strange task\u00a0\u2014 she asked every student to come up with a sequence of arbitrary length, consisting only of opening and closing brackets. After that all the students took turns naming the sequences they had invented. When Dima's turn came, he suddenly realized that all his classmates got the correct bracketed sequence, and whether he got the correct bracketed sequence, he did not know.\n\nDima suspects now that he simply missed the word \"correct\" in the task statement, so now he wants to save the situation by modifying his sequence slightly. More precisely, he can the arbitrary number of times (possibly zero) perform the reorder operation.\n\nThe reorder operation consists of choosing an arbitrary consecutive subsegment (substring) of the sequence and then reordering all the characters in it in an arbitrary way. Such operation takes $l$ nanoseconds, where $l$ is the length of the subsegment being reordered. It's easy to see that reorder operation doesn't change the number of opening and closing brackets. For example for \"))((\" he can choose the substring \")(\" and do reorder \")()(\" (this operation will take $2$ nanoseconds).\n\nSince Dima will soon have to answer, he wants to make his sequence correct as fast as possible. Help him to do this, or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of Dima's sequence.\n\nThe second line contains string of length $n$, consisting of characters \"(\" and \")\" only.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of nanoseconds to make the sequence correct or \"-1\" if it is impossible to do so.\n\n\n-----Examples-----\nInput\n8\n))((())(\n\nOutput\n6\n\nInput\n3\n(()\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example we can firstly reorder the segment from first to the fourth character, replacing it with \"()()\", the whole sequence will be \"()()())(\". And then reorder the segment from the seventh to eighth character, replacing it with \"()\". In the end the sequence will be \"()()()()\", while the total time spent is $4 + 2 = 6$ nanoseconds.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given the layout of a social network and an initial infection site, you need to determine how many squawks are made at some given time $t$. In the above example the number of squawks would be 2, 4 and 10 at times 1, 2 and 3, respectively.\n-----Input----- The input will start with a line containing 4 integers $n$ $m$ $s$ $t$ indicating the number of users $(1\\le n \\leq 100)$, the number of links between users $(0\\le m \\leq n(n-1)/2)$, the index of the initially infected user $(s < n)$, and the number of minutes $(t < 10)$. Next will follow $m$ lines, each consisting of two integers $x$$y$, $(0 \\leq x, y < n)$ indicating that users $x$ and $y$ are connected. Connections are symmetric and no two connections will be the same. -----Output----- Output the number of squawks sent at the specified time $t$. -----Examples----- Sample Input: 4 3 1 4 0 1 1 2 2 3 Sample Output: 8\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nOh no! Hackers are threatening to shut down Twitface, the premier social networking site. By taking advantage of lax security protocols, nefarious cyber-bandits have developed a virus that spreads from user to user, amplifying over time and eventually bringing the network to its knees from massive congestion. Normally users have to manually send messages to one another (squawking), but these ne\u2019er-do-wells have figured out how to circumvent that rule, and have created squawks that spawn more squawks without user intervention. In particular, any time a user gets an infected squawk, one minute later it broadcasts an infected squawk to all its neighbors in the network (for purposes of this problem we assume that each neighbor gets the squawk exactly 1 minute after the initial user is infected). If a user receives multiple squawks at any point, the next minute it broadcasts that many squawks to all of its neighbors. For example, consider the following network:\n\nIf user $0$ is infected at time $t=0$, then at time $t=1$ users $1$ and $3$ get $1$ squawk each, at time $t=2$ users $0$ and $2$ get $2$ squawks each, and at time $t=3$, users $1$ and $3$ get $4$ squawks each and user $4$ gets $2$ squawks.\n\nGiven the layout of a social network and an initial infection site, you need to determine how many squawks are made at some given time $t$. In the above example the number of squawks would be 2, 4 and 10 at times 1, 2 and 3, respectively.\n\n-----Input-----\nThe input will start with a line containing 4 integers $n$ $m$ $s$ $t$ indicating the number of users $(1\\le n \\leq 100)$, the number of links between users $(0\\le m \\leq n(n-1)/2)$, the index of the initially infected user $(s < n)$, and the number of minutes $(t < 10)$. Next will follow $m$ lines, each consisting of two integers $x$$y$, $(0 \\leq x, y < n)$ indicating that users $x$ and $y$ are connected. Connections are symmetric and no two connections will be the same.\n\n\n\n-----Output-----\nOutput the number of squawks sent at the specified time $t$.\n\n-----Examples-----\nSample Input:\n4 3 1 4\n0 1\n1 2\n2 3\nSample Output:\n8\n\"\"\"\ndef code():"
}