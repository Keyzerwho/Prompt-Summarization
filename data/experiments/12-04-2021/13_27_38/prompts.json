{
    "0": "Python 3\n\"\"\"\nYou are given a prime number $p$, $n$ integers $a_1, a_2, \\ldots, a_n$, and an integer $k$. \n\nFind the number of pairs of indexes $(i, j)$ where, $1 \\le i < j \\le n$, for which $(a_i + a_j)(a_i^2 + a_j^2) \\equiv k \\bmod p$.\n\n\n-----Input-----\n\nThe first line contains integers $n, p, k$ ($2 \\le n \\le 3 \\cdot 10^5$, $2 \\le p \\le 10^9$, $0 \\le k \\le p-1$). $p$ is guaranteed to be prime.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le p-1$). It is guaranteed that all elements are different.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 answer to the problem.\n\n\n-----Examples-----\nInput\n3 3 0\n0 1 2\n\nOutput\n1\nInput\n6 7 2\n1 2 3 4 5 6\n\nOutput\n3\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a prime number $p$, $n$ integers $a_1, a_2, \\ldots, a_n$, and an integer $k$. \n\nFind the number of pairs of indexes $(i, j)$ ($1 \\le i < j \\le n$) for which $(a_i + a_j)(a_i^2 + a_j^2) \\equiv k \\bmod p$.\n\n\n-----Input-----\n\nThe first line contains integers $n, p, k$ ($2 \\le n \\le 3 \\cdot 10^5$, $2 \\le p \\le 10^9$, $0 \\le k \\le p-1$). $p$ is guaranteed to be prime.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le p-1$). It is guaranteed that all elements are different.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 answer to the problem.\n\n\n-----Examples-----\nInput\n3 3 0\n0 1 2\n\nOutput\n1\nInput\n6 7 2\n1 2 3 4 5 6\n\nOutput\n3\n\n\n-----Note-----\n\nIn the first example:\n\n$(0+1)(0^2 + 1^2) = 1 \\equiv 1 \\bmod 3$.\n\n$(0+2)(0^2 + 2^2) = 8 \\equiv 2 \\bmod 3$.\n\n$(1+2)(1^2 + 2^2) = 15 \\equiv 0 \\bmod 3$.\n\nSo only $1$ pair satisfies the condition.\n\nIn the second example, there are $3$ such pairs: $(1, 5)$, $(2, 3)$, $(4, 6)$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nFind the first character that repeats in a String and return that character. \n\nExample 1:\nInput: first_dup('tweet')\nOutput: 't'\n\nExample 2:\nInput: first_dup('like')\nOutput: None\n\"\"\"\ndef first_dup(s):",
    "3": "Python 3\n\"\"\"\nFind the first character that repeats in a String and return that character. \n\n```python\nfirst_dup('tweet') => 't'\nfirst_dup('like') => None\n```\n\n*This is not the same as finding the character that repeats first.*\n*In that case, an input of 'tweet' would yield 'e'.*\n\"\"\"\ndef first_dup(s):",
    "4": "Python 3\n\"\"\"\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\n\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\n-----General Statement:-----\nGiven the actual high and low temperatures for the day and the normal high and low temperatures for that day, calculate the average difference from normal.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer that represents the number of data sets that follow. Each data set is on a separate line and consists of today\u2019s high, today\u2019s low, normal high, and normal low \u2013 in that order.\n\n-----Output:-----\nIf the average difference is negative, do not output the negative sign (-).\nOutput the amount of deviation from normal, followed by the words\nDEGREE(S) ABOVE NORMAL, or by the words\nDEGREE(S) BELOW NORMAL.\nRound to 1 decimal place. A trailing zero is required if the average is an integer.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nTemperatures are in the range \u201315..100 degrees.\nThe average temperature difference will not be zero.\n\n-----Discussion:-----\nDetermine the average of the difference of the high temperatures and the difference of the low temperatures.\n\n-----Sample Input:-----\n3\n75 45 78 40\n50 32 45 30\n56 48 62 45\n\n-----Sample Output:-----\n1.0 DEGREE(S) ABOVE NORMAL\n3.5 DEGREE(S) ABOVE NORMAL\n1.5 DEGREE(S) BELOW NORMAL\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given sum of Rs. N as input, Find smallest number of notes that will combine to give Rs. N if there are denominations notes of Rs. 1, Rs. 2, Rs. 5, Rs. 10, Rs. 50, Rs. 100.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the smallest number of notes that will combine to give N, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n1200\n500\n242\n\nOutput\n12\n5\n7\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nConsider a currency system in which there are notes of six denominations, namely, Rs. 1, Rs. 2, Rs. 5, Rs. 10, Rs. 50, Rs. 100.\nIf the sum of Rs. N is input, write a program to computer smallest number of notes that will combine to give Rs. N.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer N. \n\n-----Output-----\nFor each test case, display the smallest number of notes that will combine to give N, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 N \u2264 1000000\n\n-----Example-----\nInput\n3 \n1200\n500\n242\n\nOutput\n12\n5\n7\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nJust write a function `isAlphabetic(s)`, which takes an input string `s` in lowercase and returns `true`/`false` depending on whether the string is in alphabetical order or not.\n\n\n\"\"\"\ndef alphabetic(s):",
    "9": "Python 3\n\"\"\"\nYour task is very simple. Just write a function `isAlphabetic(s)`, which takes an input string `s` in lowercase and returns `true`/`false` depending on whether the string is in alphabetical order or not.\n\nFor example, `isAlphabetic('kata')` is False as 'a' comes after 'k', but `isAlphabetic('ant')` is True.\n\nGood luck :)\n\"\"\"\ndef alphabetic(s):",
    "10": "Python 3\n\"\"\"\nYou are given N coordinates on the xy-plane.\n\nA given compass can point to (p,q) or (p,r) when d(p,q) = d(p,r) where d is the Manhattan distance.\n\nInitially, you are at (a,b) coordinates. You need to find the number of pairs of coordinates such that the compass can point.\n\n-----Constraints-----\n - 2\u2266N\u226610^5\n - 1\u2266x_i, y_i\u226610^9\n - 1\u2266a < b\u2266N\n - When i \u2260 j, (x_i, y_i) \u2260 (x_j, y_j)\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN a b\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Sample Input-----\n5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n\n-----Sample Output-----\n4\n\nInitially, the compass points at the first and second pinholes.\nSince d(1,2) = d(1,3), the compass can be moved so that it will point at the first and third pinholes.\nSince d(1,3) = d(3,4), the compass can also point at the third and fourth pinholes.\nSince d(1,2) = d(2,5), the compass can also point at the second and fifth pinholes.\nNo other pairs of pinholes can be pointed by the compass, thus the answer is 4.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere are N pinholes on the xy-plane. The i-th pinhole is located at (x_i,y_i).\nWe will denote the Manhattan distance between the i-th and j-th pinholes as d(i,j)(=|x_i-x_j|+|y_i-y_j|).\nYou have a peculiar pair of compasses, called Manhattan Compass.\nThis instrument always points at two of the pinholes.\nThe two legs of the compass are indistinguishable, thus we do not distinguish the following two states: the state where the compass points at the p-th and q-th pinholes, and the state where it points at the q-th and p-th pinholes.\nWhen the compass points at the p-th and q-th pinholes and d(p,q)=d(p,r), one of the legs can be moved so that the compass will point at the p-th and r-th pinholes.\nInitially, the compass points at the a-th and b-th pinholes.\nFind the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Constraints-----\n - 2\u2266N\u226610^5\n - 1\u2266x_i, y_i\u226610^9\n - 1\u2266a < b\u2266N\n - When i \u2260 j, (x_i, y_i) \u2260 (x_j, y_j)\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN a b\nx_1 y_1\n:\nx_N y_N\n\n-----Output-----\nPrint the number of the pairs of pinholes that can be pointed by the compass.\n\n-----Sample Input-----\n5 1 2\n1 1\n4 3\n6 1\n5 5\n4 8\n\n-----Sample Output-----\n4\n\nInitially, the compass points at the first and second pinholes.\nSince d(1,2) = d(1,3), the compass can be moved so that it will point at the first and third pinholes.\nSince d(1,3) = d(3,4), the compass can also point at the third and fourth pinholes.\nSince d(1,2) = d(2,5), the compass can also point at the second and fifth pinholes.\nNo other pairs of pinholes can be pointed by the compass, thus the answer is 4.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou have n distinct integers: p_1, p_2, ..., p_{n}. You want to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nDivide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\n\nLittle X has n distinct integers: p_1, p_2, ..., p_{n}. He wants to divide all of them into two sets A and B. The following two conditions must be satisfied:  If number x belongs to set A, then number a - x must also belong to set A.  If number x belongs to set B, then number b - x must also belong to set B. \n\nHelp Little X divide the numbers into two sets or determine that it's impossible.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, a, b (1 \u2264 n \u2264 10^5;\u00a01 \u2264 a, b \u2264 10^9). The next line contains n space-separated distinct integers p_1, p_2, ..., p_{n}\u00a0(1 \u2264 p_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIf there is a way to divide the numbers into two sets, then print \"YES\" in the first line. Then print n integers: b_1, b_2, ..., b_{n} (b_{i} equals either 0, or 1), describing the division. If b_{i} equals to 0, then p_{i} belongs to set A, otherwise it belongs to set B.\n\nIf it's impossible, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 5 9\n2 3 4 5\n\nOutput\nYES\n0 0 1 1\n\nInput\n3 3 4\n1 2 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIt's OK if all the numbers are in the same set, and the other one is empty.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given an array of size n and a limiting number k. Find the maximum count of numbers from array whose sum is not greater than k.\n\n\n\nInput Format\n\nThe first line contains two integers, n and k , the number of elements in array and a limiting number.\n\nThe next line contains n space-separated integers array[i]\n\nConstraints\n\n1<= n <= 105\n\n1<= k <= 109\n\n1<= array[i] <= 109\n\nA number can't be repeated multiple times.\n\nOutput Format\n\nAn integer that denotes the maximum count of array numbers whose sum can't be greater than k.\n\nSample Input\n\n7 50\n\n1 12 5 111 200 1000 10\n\nSample Output\n\n4\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nGive me Chocolate\n\nAnushka wants to buy chocolates.there are many chocolates in front of her, tagged with their prices.\n\nAnushka has only a certain amount to spend, and she wants to maximize the number of chocolates she buys with this money.\n\nGiven a list of prices and an amount to spend, what is the maximum number of chocolates Anushka can buy? \n\nFor example, \n\nif prices =[1,2,3,4]\nand Anushka has k=7 to spend, she can buy items [1,2,3] for 6 , or [3,4] for 7 units of currency. she would choose the first group of 3 items.\n\nInput Format\n\nThe first line contains two integers, n and k , the number of priced chocolates and the amount Anushka has to spend.\n\nThe next line contains n space-separated integers prices[i]\n\nConstraints\n\n1<= n <= 105\n\n1<= k <= 109\n\n1<= prices[i] <= 109\n\n\n\nA chocolate can't be bought multiple times.\n\nOutput Format\n\nAn integer that denotes the maximum number of chocolates Anushka can buy for her.\n\nSample Input\n\n7 50\n\n1 12 5 111 200 1000 10\n\nSample Output\n\n4\n\nExplanation\n\nshe can buy only 4 chocolatess at most. These chocolates have the following prices: 1, 12, 5, 10.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nWrite a function that takes an integer and returns an array [A, B, C], where A is the number of multiples of 3 below the given integer, B is the number of multiples of 5 below the given integer and C is the number of multiples of 3 and 5 below the given integer. \n\nExamples:\nInput:\nsolution(20)\nOutput:\n[5, 2, 1]\n\"\"\"\ndef solution(number):",
    "17": "Python 3\n\"\"\"\nWrite a function that takes an integer and returns an array `[A, B, C]`, where `A` is the number of multiples of 3 (but not 5) below the given integer, `B` is the number of multiples of 5 (but not 3) below the given integer and `C` is the number of multiples of 3 and 5 below the given integer. \n\nFor example, `solution(20)` should return `[5, 2, 1]`\n\n~~~if:r\n```r\n# in R, returns a numeric vector\nsolution(20)\n[1] 5 2 1\n\nclass(solution(20))\n[1] \"numeric\"\n```\n~~~\n\"\"\"\ndef solution(number):",
    "18": "Python 3\n\"\"\"\nWrite a program to add given two integers A and B.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, add A and B and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n10 40\n\nOutput\n3\n300\n50\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nShivam is the youngest programmer in the world, he is just 12 years old. Shivam is learning programming and today he is writing his first program. \n\nProgram is very simple, Given two integers A and B, write a program to add these two numbers.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of test cases. Then follow T lines, each line contains two Integers A and B. \n\n-----Output-----\nFor each test case, add A and B and display it in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 0 \u2264 A,B \u2264 10000\n\n-----Example-----\nInput\n3 \n1 2\n100 200\n10 40\n\nOutput\n3\n300\n50\n\"\"\"\ndef code():"
}