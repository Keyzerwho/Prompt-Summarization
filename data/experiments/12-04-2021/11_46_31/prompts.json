{
    "0": "Python 3\n\"\"\"\n Someone give a strange birthday present to Ivan. It is hedgehog   connected undirected graph in which one vertex has degree at least $3$ (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself $k$-multihedgehog. Let us define $k$-multihedgehog as follows: $1$-multihedgehog is hedgehog: it has one vertex of degree at least $3$ and some vertices of degree 1. For all $k \\ge 2$, $k$-multihedgehog is $(k-1)$-multihedgehog in which the following changes has been made for each vertex $v$ with degree 1: let $u$ be its only neighbor; remove vertex $v$, create a new hedgehog with center at vertex $w$ and connect vertices $u$ and $w$ with an edge. New hedgehogs can differ from each other and the initial gift.  Thereby $k$-multihedgehog is a tree. Ivan made $k$-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed $k$-multihedgehog. \n-----Input----- First line of input contains $2$ integers $n$, $k$ ($1 \\le n \\le 10^{5}$, $1 \\le k \\le 10^{9}$)\u00a0\u2014 number of vertices and hedgehog parameter. Next $n-1$ lines contains two integers $u$ $v$ ($1 \\le u, \\,\\, v \\le n; \\,\\, u \\ne v$)\u00a0\u2014 indices of vertices connected by edge. It is guaranteed that given graph is a tree. -----Output----- Print \"Yes\" (without quotes), if given graph is $k$-multihedgehog, and \"No\" (without quotes) otherwise. -----Examples----- Input 14 2 1 4 2 4 3 4 4 13 10 5 11 5 12 5 14 5 5 13 6 7 8 6 13 6 9 6 Output Yes Input 3 1 1 3 2 3 Output No -----Note----- 2-multihedgehog from the first example looks like this: [Image] Its center is vertex $13$. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13]. Tree from second example is not a hedgehog because degree of center should be at least $3$.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSomeone give a strange birthday present to Ivan. It is hedgehog\u00a0\u2014 connected undirected graph in which one vertex has degree at least $3$ (we will call it center) and all other vertices has degree 1. Ivan thought that hedgehog is too boring and decided to make himself $k$-multihedgehog.\n\nLet us define $k$-multihedgehog as follows: $1$-multihedgehog is hedgehog: it has one vertex of degree at least $3$ and some vertices of degree 1. For all $k \\ge 2$, $k$-multihedgehog is $(k-1)$-multihedgehog in which the following changes has been made for each vertex $v$ with degree 1: let $u$ be its only neighbor; remove vertex $v$, create a new hedgehog with center at vertex $w$ and connect vertices $u$ and $w$ with an edge. New hedgehogs can differ from each other and the initial gift. \n\nThereby $k$-multihedgehog is a tree. Ivan made $k$-multihedgehog but he is not sure that he did not make any mistakes. That is why he asked you to check if his tree is indeed $k$-multihedgehog.\n\n\n-----Input-----\n\nFirst line of input contains $2$ integers $n$, $k$ ($1 \\le n \\le 10^{5}$, $1 \\le k \\le 10^{9}$)\u00a0\u2014 number of vertices and hedgehog parameter.\n\nNext $n-1$ lines contains two integers $u$ $v$ ($1 \\le u, \\,\\, v \\le n; \\,\\, u \\ne v$)\u00a0\u2014 indices of vertices connected by edge.\n\nIt is guaranteed that given graph is a tree.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes), if given graph is $k$-multihedgehog, and \"No\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n14 2\n1 4\n2 4\n3 4\n4 13\n10 5\n11 5\n12 5\n14 5\n5 13\n6 7\n8 6\n13 6\n9 6\n\nOutput\nYes\n\nInput\n3 1\n1 3\n2 3\n\nOutput\nNo\n\n\n\n-----Note-----\n\n2-multihedgehog from the first example looks like this:\n\n[Image]\n\nIts center is vertex $13$. Hedgehogs created on last step are: [4 (center), 1, 2, 3], [6 (center), 7, 8, 9], [5 (center), 10, 11, 12, 13].\n\nTree from second example is not a hedgehog because degree of center should be at least $3$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n A positive integer $a$ is given. Baron Munchausen claims that he knows such a positive integer $n$ that if one multiplies $n$ by $a$, the sum of its digits decreases $a$ times. In other words, $S(an) = S(n)/a$, where $S(x)$ denotes the sum of digits of the number $x$.  Find out if what Baron told can be true. \n-----Input----- The only line contains a single integer $a$ ($2 \\le a \\le 10^3$). -----Output----- If there is no such number $n$, print $-1$. Otherwise print any appropriate positive integer $n$. Your number must not consist of more than $5\\cdot10^5$ digits. We can show that under given constraints either there is no answer, or there is an answer no longer than $5\\cdot10^5$ digits. -----Examples----- Input 2 Output 6 Input 3 Output 6669 Input 10 Output -1\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nA positive integer $a$ is given. Baron Munchausen claims that he knows such a positive integer $n$ that if one multiplies $n$ by $a$, the sum of its digits decreases $a$ times. In other words, $S(an) = S(n)/a$, where $S(x)$ denotes the sum of digits of the number $x$. \n\nFind out if what Baron told can be true.\n\n\n-----Input-----\n\nThe only line contains a single integer $a$ ($2 \\le a \\le 10^3$).\n\n\n-----Output-----\n\nIf there is no such number $n$, print $-1$.\n\nOtherwise print any appropriate positive integer $n$. Your number must not consist of more than $5\\cdot10^5$ digits. We can show that under given constraints either there is no answer, or there is an answer no longer than $5\\cdot10^5$ digits.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n6\n\nInput\n3\n\nOutput\n6669\n\nInput\n10\n\nOutput\n-1\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Your task is to compute the minimum achievable sum of squared errors, given parameter $k$ and a description of the red intensities of an image s pixels. \n-----Input----- The first line of the input contains two integers $d$ ($1 \\leq d \\leq 256$), the number of distinct red values that occur in the original image, and $k$ ($1 \\leq k \\leq d$), the number of distinct red values allowed in the posterized image. The remaining $d$ lines indicate the number of pixels of the image having various red values. Each such line contains two integers $r$ ($0 \\leq r \\leq 255$) and $p$ ($1 \\leq p \\leq 2^{26}$), where $r$ is a red intensity value and $p$ is the number of pixels having red intensity $r$. Those $d$ lines are given in increasing order of red value. -----Output----- Display the sum of the squared errors for an optimally chosen set of $k$ allowed integer values. -----Examples----- Sample Input 1: 2 1 50 20000 150 10000 Sample Output 1: 66670000 Sample Input 2: 2 2 50 20000 150 10000 Sample Output 2: 0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nPixels in a digital picture can be represented with three integers in the range $0$ to $255$ that indicate the intensity of the red, green, and blue colors. To compress an image or to create an artistic effect, many photo-editing tools include a \u201cposterize\u201d operation which works as follows. Each color channel is examined separately; this problem focuses only on the red channel. Rather than allow all integers from $0$ to $255$ for the red channel, a posterized image allows at most $k$ integers from this range. Each pixel\u2019s original red intensity is replaced with the nearest of the allowed integers. The photo-editing tool selects a set of $k$ integers that minimizes the sum of the squared errors introduced across all pixels in the original image. If there are $n$ pixels that have original red values $r_1, \\ldots , r_ n$, and $k$ allowed integers $v_1, \\ldots , v_ k$, the sum of squared errors is defined as\\[ \\sum _{i=1}^n \\min _{1 \\leq j \\leq k} (r_ i - v_ j)^2. \\]\n\nYour task is to compute the minimum achievable sum of squared errors, given parameter\u00a0$k$ and a description of the red intensities of an image\u2019s pixels.\n\n-----Input-----\nThe first line of the input contains two integers $d$ ($1 \\leq d \\leq 256$), the number of distinct red values that occur in the original image, and $k$ ($1 \\leq k \\leq d$), the number of distinct red values allowed in the posterized image. The remaining $d$ lines indicate the number of pixels of the image having various red values. Each such line contains two integers $r$ ($0 \\leq r \\leq 255$) and $p$ ($1 \\leq p \\leq 2^{26}$), where $r$ is a red intensity value and $p$ is the number of pixels having red intensity $r$. Those $d$ lines are given in increasing order of red value.\n\n-----Output-----\nDisplay the sum of the squared errors for an optimally chosen set of $k$ allowed integer values.\n\n-----Examples-----\nSample Input 1:\n2 1\n50 20000\n150 10000\nSample Output 1:\n66670000\n\nSample Input 2:\n2 2\n50 20000\n150 10000\nSample Output 2:\n0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Maxim has opened his own restaurant! The restaurant has got a huge table, the table's length is p meters. Maxim has got a dinner party tonight, n guests will come to him. Let's index the guests of Maxim's restaurant from 1 to n. Maxim knows the sizes of all guests that are going to come to him. The i-th guest's size (a_{i}) represents the number of meters the guest is going to take up if he sits at the restaurant table. Long before the dinner, the guests line up in a queue in front of the restaurant in some order. Then Maxim lets the guests in, one by one. Maxim stops letting the guests in when there is no place at the restaurant table for another guest in the queue. There is no place at the restaurant table for another guest in the queue, if the sum of sizes of all guests in the restaurant plus the size of this guest from the queue is larger than p. In this case, not to offend the guest who has no place at the table, Maxim doesn't let any other guest in the restaurant, even if one of the following guests in the queue would have fit in at the table. Maxim is now wondering, what is the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue. Help Maxim, calculate this number.\n-----Input----- The first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of guests in the restaurant. The next line contains integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 50) \u2014 the guests' sizes in meters. The third line contains integer p (1 \u2264 p \u2264 50) \u2014 the table's length in meters.  The numbers in the lines are separated by single spaces. -----Output----- In a single line print a real number \u2014 the answer to the problem. The answer will be considered correct, if the absolute or relative error doesn't exceed 10^{ - 4}. -----Examples----- Input 3 1 2 3 3 Output 1.3333333333 -----Note----- In the first sample the people will come in the following orders:   (1, 2, 3) \u2014 there will be two people in the restaurant;  (1, 3, 2) \u2014 there will be one person in the restaurant;  (2, 1, 3) \u2014 there will be two people in the restaurant;  (2, 3, 1) \u2014 there will be one person in the restaurant;  (3, 1, 2) \u2014 there will be one person in the restaurant;  (3, 2, 1) \u2014 there will be one person in the restaurant.  In total we get (2 + 1 + 2 + 1 + 1 + 1) / 6 = 8 / 6 = 1.(3).\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nMaxim has opened his own restaurant! The restaurant has got a huge table, the table's length is p meters.\n\nMaxim has got a dinner party tonight, n guests will come to him. Let's index the guests of Maxim's restaurant from 1 to n. Maxim knows the sizes of all guests that are going to come to him. The i-th guest's size (a_{i}) represents the number of meters the guest is going to take up if he sits at the restaurant table.\n\nLong before the dinner, the guests line up in a queue in front of the restaurant in some order. Then Maxim lets the guests in, one by one. Maxim stops letting the guests in when there is no place at the restaurant table for another guest in the queue. There is no place at the restaurant table for another guest in the queue, if the sum of sizes of all guests in the restaurant plus the size of this guest from the queue is larger than p. In this case, not to offend the guest who has no place at the table, Maxim doesn't let any other guest in the restaurant, even if one of the following guests in the queue would have fit in at the table.\n\nMaxim is now wondering, what is the average number of visitors who have come to the restaurant for all possible n! orders of guests in the queue. Help Maxim, calculate this number.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 50) \u2014 the number of guests in the restaurant. The next line contains integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 50) \u2014 the guests' sizes in meters. The third line contains integer p (1 \u2264 p \u2264 50) \u2014 the table's length in meters. \n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nIn a single line print a real number \u2014 the answer to the problem. The answer will be considered correct, if the absolute or relative error doesn't exceed 10^{ - 4}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n3\n\nOutput\n1.3333333333\n\n\n\n-----Note-----\n\nIn the first sample the people will come in the following orders:   (1, 2, 3) \u2014 there will be two people in the restaurant;  (1, 3, 2) \u2014 there will be one person in the restaurant;  (2, 1, 3) \u2014 there will be two people in the restaurant;  (2, 3, 1) \u2014 there will be one person in the restaurant;  (3, 1, 2) \u2014 there will be one person in the restaurant;  (3, 2, 1) \u2014 there will be one person in the restaurant. \n\nIn total we get (2 + 1 + 2 + 1 + 1 + 1) / 6 = 8 / 6 = 1.(3).\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Some viruses replicate by replacing a piece of DNA in a living cell with a piece of DNA that the virus carries with it. This makes the cell start to produce viruses identical to the original one that infected the cell. A group of biologists is interested in knowing how much DNA a certain virus inserts into the host genome. To find this out they have sequenced the full genome of a healthy cell as well as that of an identical cell infected by a virus. The genome turned out to be pretty big, so now they need your help in the data processing step. Given the DNA sequence before and after the virus infection, determine the length of the smallest single, consecutive piece of DNA that can have been inserted into the first sequence to turn it into the second one. A single, consecutive piece of DNA might also have been removed from the same position in the sequence as DNA was inserted. Small changes in the DNA can have large effects, so the virus might insert only a few bases, or even nothing at all. \n-----Input----- The input consists of two lines containing the DNA sequence before and after virus infection respectively. A DNA sequence is given as a string containing between 1 and $10^5$ upper-case letters from the alphabet {A, G, C, T}. -----Output----- Output one integer, the minimum length of DNA inserted by the virus. -----Examples----- Sample Input: AAAAA AGCGAA Sample Output: 3\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nSome viruses replicate by replacing a piece of DNA in a living cell with a piece of DNA that the virus carries with it. This makes the cell start to produce viruses identical to the original one that infected the cell. A group of biologists is interested in knowing how much DNA a certain virus inserts into the host genome. To find this out they have sequenced the full genome of a healthy cell as well as that of an identical cell infected by a virus.\n\nThe genome turned out to be pretty big, so now they need your help in the data processing step. Given the DNA sequence before and after the virus infection, determine the length of the smallest single, consecutive piece of DNA that can have been inserted into the first sequence to turn it into the second one. A single, consecutive piece of DNA might also have been removed from the same position in the sequence as DNA was inserted. Small changes in the DNA can have large effects, so the virus might insert only a few bases, or even nothing at all.\n\n-----Input-----\nThe input consists of two lines containing the DNA sequence before and after virus infection respectively. A DNA sequence is given as a string containing between 1 and $10^5$ upper-case letters from the alphabet {A, G, C, T}.\n\n-----Output-----\nOutput one integer, the minimum length of DNA inserted by the virus.\n\n-----Examples-----\nSample Input:\nAAAAA\nAGCGAA\nSample Output:\n3\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are an adventurer currently journeying inside an evil temple. After defeating a couple of weak zombies, you arrived at a square room consisting of tiles forming an n   n grid. The rows are numbered 1 through n from top to bottom, and the columns are numbered 1 through n from left to right. At the far side of the room lies a door locked with evil magical forces. The following inscriptions are written on the door: The cleaning of all evil will awaken the door! Being a very senior adventurer, you immediately realize what this means. You notice that every single cell in the grid are initially evil. You should purify all of these cells. The only method of tile purification known to you is by casting the \"Purification\" spell. You cast this spell on a single tile   then, all cells that are located in the same row and all cells that are located in the same column as the selected tile become purified (including the selected tile)! It is allowed to purify a cell more than once. You would like to purify all n   n cells while minimizing the number of times you cast the \"Purification\" spell. This sounds very easy, but you just noticed that some tiles are particularly more evil than the other tiles. You cannot cast the \"Purification\" spell on those particularly more evil tiles, not even after they have been purified. They can still be purified if a cell sharing the same row or the same column gets selected by the \"Purification\" spell. Please find some way to purify all the cells with the minimum number of spells cast. Print -1 if there is no such way.\n-----Input----- The first line will contain a single integer n (1 \u2264 n \u2264 100). Then, n lines follows, each contains n characters. The j-th character in the i-th row represents the cell located at row i and column j. It will be the character 'E' if it is a particularly more evil cell, and '.' otherwise. -----Output----- If there exists no way to purify all the cells, output -1. Otherwise, if your solution casts x \"Purification\" spells (where x is the minimum possible number of spells), output x lines. Each line should consist of two integers denoting the row and column numbers of the cell on which you should cast the \"Purification\" spell. -----Examples----- Input 3 .E. E.E .E. Output 1 1 2 2 3 3 Input 3 EEE E.. E.E Output -1 Input 5 EE.EE E.EE. E...E .EE.E EE.EE Output 3 3 1 3 2 2 4 4 5 3 -----Note----- The first example is illustrated as follows. Purple tiles are evil tiles that have not yet been purified. Red tile is the tile on which \"Purification\" is cast. Yellow tiles are the tiles being purified as a result of the current \"Purification\" spell. Green tiles are tiles that have been purified previously.  [Image]  In the second example, it is impossible to purify the cell located at row 1 and column 1. For the third example: [Image]\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are an adventurer currently journeying inside an evil temple. After defeating a couple of weak zombies, you arrived at a square room consisting of tiles forming an n \u00d7 n grid. The rows are numbered 1 through n from top to bottom, and the columns are numbered 1 through n from left to right. At the far side of the room lies a door locked with evil magical forces. The following inscriptions are written on the door: The cleaning of all evil will awaken the door! \n\nBeing a very senior adventurer, you immediately realize what this means. You notice that every single cell in the grid are initially evil. You should purify all of these cells.\n\nThe only method of tile purification known to you is by casting the \"Purification\" spell. You cast this spell on a single tile \u2014 then, all cells that are located in the same row and all cells that are located in the same column as the selected tile become purified (including the selected tile)! It is allowed to purify a cell more than once.\n\nYou would like to purify all n \u00d7 n cells while minimizing the number of times you cast the \"Purification\" spell. This sounds very easy, but you just noticed that some tiles are particularly more evil than the other tiles. You cannot cast the \"Purification\" spell on those particularly more evil tiles, not even after they have been purified. They can still be purified if a cell sharing the same row or the same column gets selected by the \"Purification\" spell.\n\nPlease find some way to purify all the cells with the minimum number of spells cast. Print -1 if there is no such way.\n\n\n-----Input-----\n\nThe first line will contain a single integer n (1 \u2264 n \u2264 100). Then, n lines follows, each contains n characters. The j-th character in the i-th row represents the cell located at row i and column j. It will be the character 'E' if it is a particularly more evil cell, and '.' otherwise.\n\n\n-----Output-----\n\nIf there exists no way to purify all the cells, output -1. Otherwise, if your solution casts x \"Purification\" spells (where x is the minimum possible number of spells), output x lines. Each line should consist of two integers denoting the row and column numbers of the cell on which you should cast the \"Purification\" spell.\n\n\n-----Examples-----\nInput\n3\n.E.\nE.E\n.E.\n\nOutput\n1 1\n2 2\n3 3\n\nInput\n3\nEEE\nE..\nE.E\n\nOutput\n-1\n\nInput\n5\nEE.EE\nE.EE.\nE...E\n.EE.E\nEE.EE\n\nOutput\n3 3\n1 3\n2 2\n4 4\n5 3\n\n\n-----Note-----\n\nThe first example is illustrated as follows. Purple tiles are evil tiles that have not yet been purified. Red tile is the tile on which \"Purification\" is cast. Yellow tiles are the tiles being purified as a result of the current \"Purification\" spell. Green tiles are tiles that have been purified previously.  [Image] \n\nIn the second example, it is impossible to purify the cell located at row 1 and column 1.\n\nFor the third example: [Image]\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You're given a function $f$ of a single variable. After much thought Arnar has concluded that $f$ can be described by\\[ c\\int _ a^b \\left(t_1\\Gamma (x) + \\sqrt [t_2]{\\log (\\operatorname {erf}(t_3 x))} - J_ k(x)^{t_4}\\right)dx \\] where $\\log $ is the natural logarithm,\\[ \\Gamma (z) = \\int _0^{\\infty } x^{z - 1} e^{-x} dx, \\]\\[ \\operatorname {erf}(x) = \\frac{2}{\\sqrt {\\pi }} \\int _0^x e^{-t^2} dt, \\] and\\[ J_ k(x) = \\frac{1}{\\pi } \\int _0^{\\pi } \\cos (k \\tau - x \\sin \\tau ) d \\tau . \\] Arnar thinks that it maybe a bit tough for you to compute $f$ as previously described so he tells you it is enough to calculate the $r$-th degree Taylor polynomial around $0$, i.e.\\[ P(x) = \\sum _{i = 0}^r \\frac{f^{(i)}(0)}{i!}x^i. \\] Arnar is a afraid he was too aggressive when approximating $f$ with $P$ so he would like to modify $P$ a little bit further\n-----Input----- The first line of the input starts with three real numbers $a, b, c$, $-10^9 \\leq a \\leq b \\leq 10^9$ and $1 \\leq c \\leq 10^9$. These numbers will have at most 6 digits after the decimal point. The second line has four integers $t_1, t_2, t_3, t_4$, $1 \\leq t_ i \\leq 10^9$. The third line has five integers $n, k, r, s, l$, $1 \\leq n, k, r, s, l \\leq 10^3$. -----Output----- The output should consist of one line containing the location of Arnar\u2019s opponent as described above. -----Examples----- Sample Input: -99.99 99.99 9999.99 99 9 999 9999 9 99 9 99 9 Sample Output: 9.585073\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nArnar is playing his favourite video game Association of Myths. He\u2019s playing a character by the name of Lumen. Lumen has a special ability where she can shoot a laser beam across the entire map killing all enemies it hits. The only drawback is that the beam is rather narrow and Arnar isn\u2019t always sure where the enemies are located. He now needs your help to determine where the enemies are hiding so he can hit them (and hopefully win the game).\n\nArnar is very serious about this game and is therefore willing to meticulously research how the opponents move. He knows they only travel in a straight path called the \u2019medial path\u2019. We can therefore describe their location as a function $f$ of a single variable. After much thought Arnar has concluded that $f$ can be described by\\[ c\\int _ a^b \\left(t_1\\Gamma (x) + \\sqrt [t_2]{\\log (\\operatorname {erf}(t_3 x))} - J_ k(x)^{t_4}\\right)dx \\]\n\nwhere $\\log $ is the natural logarithm,\\[ \\Gamma (z) = \\int _0^{\\infty } x^{z - 1} e^{-x} dx, \\]\\[ \\operatorname {erf}(x) = \\frac{2}{\\sqrt {\\pi }} \\int _0^x e^{-t^2} dt, \\]\n\nand\\[ J_ k(x) = \\frac{1}{\\pi } \\int _0^{\\pi } \\cos (k \\tau - x \\sin \\tau ) d \\tau . \\]\n\nArnar thinks that it maybe a bit tough for you to compute $f$ as previously described so he tells you it is enough to calculate the $r$-th degree Taylor polynomial around $0$, i.e.\\[ P(x) = \\sum _{i = 0}^r \\frac{f^{(i)}(0)}{i!}x^i. \\]\n\nArnar is a afraid he was too aggressive when approximating $f$ with $P$ so he would like to modify $P$ a little bit further. He knows that as the game progresses his opponent will have more in-game currency and will therefore buy better, more agile shoes. To account for this Arnar recursively defines a sequence of polynomials by\\[ P_0(x) = P(x), \\quad P_ n(x) = \\sum _{i = 0}^{r + n} P_{n - 1}(i) x^i. \\]\n\nArnar finally notes that during the endgame phase the opponent will probably have to go to the bathroom and to account for that he wants reduce the size of the final polynomial in his sequence. He therefore takes $P_ s$ and differentiates it $\\operatorname {deg}(P_ s) + 1$ times and calls the outcome $g$. Arnar is now satisfied that\\[ \\frac{(g(n) + l)^2}{\\pi e} + \\frac{1}{l + 1} \\]\n\ngives the location of his opponent. Why does Arnar take the last step? Well, Arnar won\u2019t tell you because he\u2019s afraid you will be able to beat him in Association of Myths if he tells you all his secrets. He also requests that you give him the answer to at least two correct decimal places since his mouse can track changes as small as a hundredth of an in-game unit of length.\n\n-----Input-----\nThe first line of the input starts with three real numbers $a, b, c$, $-10^9 \\leq a \\leq b \\leq 10^9$ and $1 \\leq c \\leq 10^9$. These numbers will have at most 6 digits after the decimal point. The second line has four integers $t_1, t_2, t_3, t_4$, $1 \\leq t_ i \\leq 10^9$. The third line has five integers $n, k, r, s, l$, $1 \\leq n, k, r, s, l \\leq 10^3$.\n\n-----Output-----\nThe output should consist of one line containing the location of Arnar\u2019s opponent as described above.\n\n-----Examples-----\nSample Input:\n-99.99 99.99 9999.99\n99 9 999 9999\n9 99 9 99 9\nSample Output:\n9.585073\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You need to write the method that returns true if 2 integers share at least two '1' bits. Assume that all numbers are positive For example int seven = 7;    //0111 int ten = 10;     //1010 int fifteen = 15; //1111 SharedBits(seven, ten);     //false SharedBits(seven, fifteen); //true SharedBits(ten, fifteen);   //true - seven and ten share only a single '1' (at index 3) - seven and fifteen share 3 bits (at indexes 1, 2, and 3) - ten and fifteen  share 2 bits (at indexes 0 and 2\n-----Input----- The first line contains a single integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 the total number of islands. The second line contains n space-separated integers a_{i} (0 \u2264 a_{i} \u2264 n - 1)\u00a0\u2014 the statue currently placed on the i-th island. If a_{i} = 0, then the island has no statue. It is guaranteed that the a_{i} are distinct. The third line contains n space-separated integers b_{i} (0 \u2264 b_{i} \u2264 n - 1) \u2014 the desired statues of the ith island. Once again, b_{i} = 0 indicates the island desires no statue. It is guaranteed that the b_{i} are distinct. -----Output----- Print \"YES\" (without quotes) if the rearrangement can be done in the existing network, and \"NO\" otherwise. -----Examples----- Input 3 1 0 2 2 0 1 Output YES Input 2 1 0 0 1 Output YES Input 4 1 2 3 0 0 3 2 1 Output NO -----Note----- In the first sample, the islanders can first move statue 1 from island 1 to island 2, then move statue 2 from island 3 to island 1, and finally move statue 1 from island 2 to island 3. In the second sample, the islanders can simply move statue 1 from island 1 to island 2. In the third sample, no sequence of movements results in the desired position.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nA remote island chain contains n islands, labeled 1 through n. Bidirectional bridges connect the islands to form a simple cycle\u00a0\u2014 a bridge connects islands 1 and 2, islands 2 and 3, and so on, and additionally a bridge connects islands n and 1. The center of each island contains an identical pedestal, and all but one of the islands has a fragile, uniquely colored statue currently held on the pedestal. The remaining island holds only an empty pedestal.\n\nThe islanders want to rearrange the statues in a new order. To do this, they repeat the following process: First, they choose an island directly adjacent to the island containing an empty pedestal. Then, they painstakingly carry the statue on this island across the adjoining bridge and place it on the empty pedestal.\n\nDetermine if it is possible for the islanders to arrange the statues in the desired order.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 200 000)\u00a0\u2014 the total number of islands.\n\nThe second line contains n space-separated integers a_{i} (0 \u2264 a_{i} \u2264 n - 1)\u00a0\u2014 the statue currently placed on the i-th island. If a_{i} = 0, then the island has no statue. It is guaranteed that the a_{i} are distinct.\n\nThe third line contains n space-separated integers b_{i} (0 \u2264 b_{i} \u2264 n - 1) \u2014 the desired statues of the ith island. Once again, b_{i} = 0 indicates the island desires no statue. It is guaranteed that the b_{i} are distinct.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes) if the rearrangement can be done in the existing network, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n3\n1 0 2\n2 0 1\n\nOutput\nYES\n\nInput\n2\n1 0\n0 1\n\nOutput\nYES\n\nInput\n4\n1 2 3 0\n0 3 2 1\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, the islanders can first move statue 1 from island 1 to island 2, then move statue 2 from island 3 to island 1, and finally move statue 1 from island 2 to island 3.\n\nIn the second sample, the islanders can simply move statue 1 from island 1 to island 2.\n\nIn the third sample, no sequence of movements results in the desired position.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You have been hired by the International Contrived Pricing Corporation (ICPC) to set ticket prices each week for airlines. The airlines have collected and analyzed historical data, and have good estimates on the number of seats that will be sold at a particular ticket price with a particular number of weeks before the flight. Given the number of seats left on a flight as well as the number of weeks left before the flight, your job is to set the ticket price for the current week, in order to maximize the total revenue obtained from ticket sales from the current week to the time of the flight. You may assume that the number of tickets sold is exactly the same as the estimates, unless there are not enough remaining seats. In that case, all remaining seats will be sold. You may also assume that the optimal ticket prices will be chosen for the remaining weeks before the flight. Note that higher prices do not necessarily mean fewer tickets will be sold. In fact, higher prices can sometimes increase sales as travellers may be worried that the prices will rise even higher later.\n-----Input----- The input consists of one case. The first line contains two integers, $N$ and $W$, the number of seats left and the number of weeks left before the flight ($0 < N \\leq 300$, $0 \\leq W \\leq 52$). The next $W+1$ lines give the estimates for $W$ weeks, $W-1$ weeks, \u2026, and down to $0$ weeks (i.e. last week) before the flight. Each of these lines starts with an integer $K$ ($0 < K \\leq 100$), the number of different prices to consider that week. This is followed by $K$ integers $0 < p_1 < \\cdots < p_ K < 1000$ giving the prices in dollars. Finally, this is followed by $K$ additional integers $s_1, \\ldots , s_ K$ ($0 \\leq s_ i \\leq N$) indicating the number of tickets that will be sold for the corresponding prices. -----Output----- On the first line, print the maximum total revenue the airline can obtain from ticket sales from the current week to the time of the flight. On the second line, print the ticket price to set for the current week ($W$ weeks before the flight) to achieve this maximum. If there are multiple sets of ticket prices achieving this maximum, choose the smallest ticket price for week $W$. -----Examples----- Sample Input: 50 2 1 437 47 3 357 803 830 13 45 46 1 611 14 Sample Output: 23029 437\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nPlane ticket prices fluctuate wildly from one week to the next, and their unpredictability is a major source of frustration for travellers. Some travellers regret buying tickets too early when the prices drop right after they purchase the tickets, and some travellers regret buying tickets too late when prices rise right before they are about to make the purchase. At the end, no one is happy, except the airlines, of course.\n\nSurely there is some reason to this madness. It turns out that airlines price their tickets dynamically, based on how many seats are still available and how close the flight is. For example, if there are very few seats left on a flight then the tickets may be expensive until the last few weeks before the flight, at which point the prices may decrease to fill the empty seats. Ultimately, the airlines wish to maximize revenue from each flight.\n\nYou have been hired by the International Contrived Pricing Corporation (ICPC) to set ticket prices each week for airlines. The airlines have collected and analyzed historical data, and have good estimates on the number of seats that will be sold at a particular ticket price with a particular number of weeks before the flight. Given the number of seats left on a flight as well as the number of weeks left before the flight, your job is to set the ticket price for the current week, in order to maximize the total revenue obtained from ticket sales from the current week to the time of the flight. You may assume that the number of tickets sold is exactly the same as the estimates, unless there are not enough remaining seats. In that case, all remaining seats will be sold. You may also assume that the optimal ticket prices will be chosen for the remaining weeks before the flight.\n\nNote that higher prices do not necessarily mean fewer tickets will be sold. In fact, higher prices can sometimes increase sales as travellers may be worried that the prices will rise even higher later.\n\n-----Input-----\nThe input consists of one case. The first line contains two integers, $N$ and $W$, the number of seats left and the number of weeks left before the flight ($0 < N \\leq 300$, $0 \\leq W \\leq 52$). The next $W+1$ lines give the estimates for $W$ weeks, $W-1$ weeks, \u2026, and down to $0$ weeks (i.e. last week) before the flight. Each of these lines starts with an integer $K$ ($0 < K \\leq 100$), the number of different prices to consider that week. This is followed by $K$ integers $0 < p_1 < \\cdots < p_ K < 1000$ giving the prices in dollars. Finally, this is followed by $K$ additional integers $s_1, \\ldots , s_ K$ ($0 \\leq s_ i \\leq N$) indicating the number of tickets that will be sold for the corresponding prices.\n\n-----Output-----\nOn the first line, print the maximum total revenue the airline can obtain from ticket sales from the current week to the time of the flight. On the second line, print the ticket price to set for the current week ($W$ weeks before the flight) to achieve this maximum.\n\nIf there are multiple sets of ticket prices achieving this maximum, choose the smallest ticket price for week $W$.\n\n-----Examples-----\nSample Input:\n50 2\n1 437 47\n3 357 803 830 13 45 46\n1 611 14\nSample Output:\n23029\n437\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Squirrel Liss is interested in sequences. She also has preferences of integers. She thinks n integers a_1, a_2, ..., a_{n} are good. Now she is interested in good sequences. A sequence x_1, x_2, ..., x_{k} is called good if it satisfies the following three conditions: \n-----Input----- The input consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of good integers. The second line contains a single-space separated list of good integers a_1, a_2, ..., a_{n} in strictly increasing order (1 \u2264 a_{i} \u2264 10^5;\u00a0a_{i} < a_{i} + 1). -----Output----- Print a single integer \u2014 the length of the longest good sequence. -----Examples----- Input 5 2 3 4 6 9 Output 4 Input 9 1 2 3 5 6 7 8 9 10 Output 4 -----Note----- In the first example, the following sequences are examples of good sequences: [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nSquirrel Liss is interested in sequences. She also has preferences of integers. She thinks n integers a_1, a_2, ..., a_{n} are good.\n\nNow she is interested in good sequences. A sequence x_1, x_2, ..., x_{k} is called good if it satisfies the following three conditions:  The sequence is strictly increasing, i.e. x_{i} < x_{i} + 1 for each i (1 \u2264 i \u2264 k - 1).  No two adjacent elements are coprime, i.e. gcd(x_{i}, x_{i} + 1) > 1 for each i (1 \u2264 i \u2264 k - 1) (where gcd(p, q) denotes the greatest common divisor of the integers p and q).  All elements of the sequence are good integers. \n\nFind the length of the longest good sequence.\n\n\n-----Input-----\n\nThe input consists of two lines. The first line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of good integers. The second line contains a single-space separated list of good integers a_1, a_2, ..., a_{n} in strictly increasing order (1 \u2264 a_{i} \u2264 10^5;\u00a0a_{i} < a_{i} + 1).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the length of the longest good sequence.\n\n\n-----Examples-----\nInput\n5\n2 3 4 6 9\n\nOutput\n4\n\nInput\n9\n1 2 3 5 6 7 8 9 10\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example, the following sequences are examples of good sequences: [2; 4; 6; 9], [2; 4; 6], [3; 9], [6]. The length of the longest good sequence is 4.\n\"\"\"\ndef code():"
}