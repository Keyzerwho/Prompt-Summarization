{
    "0": "Python 3\n\"\"\"\n Given the length of the message, the probabilities, and the encoded message, determine the original message.\n-----Input----- The first line contains the integer $N$ ($1 \\leq N \\leq 15$), which is the length of the original message. The second line contains the integer $D$ ($1 \\leq D \\leq 7$), which indicates that $p_ A = \\frac{D}{8}$. The third line contains the binary representation of the encoded message. It is guaranteed that the binary representation of the encoded message starts with \u201c0.\u201d and contains at most $3N+2$ characters. It is guaranteed that the encoded message came from an initial message of length $N$ consisting only of \u2018A\u2019 and \u2018B\u2019 using this value of $p_ A$. -----Output----- Display the original message. -----Examples----- Sample Input: 4 4 0.0101 Sample Output: ABAB\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nArithmetic coding is a method to represent a message as a real number $x$ such that $0 \\leq x < 1$. We will assume that the message consists only of uppercase \u2018A\u2019s and \u2018B\u2019s. The two letters have associated probabilities $p_ A$ and $p_ B = 1 - p_ A$ such that $0 < p_ A < 1$.\n\nThe current interval $[a,b)$ is initially set to $[0,1)$ and we will update this interval one letter at a time. To encode a letter, the current interval is divided into two subintervals as follows. Let $c = a + p_ A(b-a)$. If the next letter is \u2018A\u2019, $[a,c)$ becomes the current interval. Otherwise, the current interval is now $[c,b)$. This process is repeated for each letter in the message. If $[k,\\ell )$ is the final interval, the encoded message is chosen to be $k$.\n\nFor example, if the original message is \u201cABAB\u201d and $p_ A = p_ B = 0.5$, the sequence of intervals encountered in the algorithm is\\[ [0,1) \\xrightarrow {A} [0, 0.5) \\xrightarrow {B} [0.25, 0.5) \\xrightarrow {A} [0.25, 0.375) \\xrightarrow {B} [0.3125, 0.375). \\]\n\nThe encoded message is therefore 0.3125, or 0.0101 in binary.\n\nGiven the length of the message, the probabilities, and the encoded message, determine the original message.\n\n-----Input-----\nThe first line contains the integer $N$ ($1 \\leq N \\leq 15$), which is the length of the original message. The second line contains the integer $D$ ($1 \\leq D \\leq 7$), which indicates that $p_ A = \\frac{D}{8}$. The third line contains the binary representation of the encoded message. It is guaranteed that the binary representation of the encoded message starts with \u201c0.\u201d and contains at most $3N+2$ characters.\n\nIt is guaranteed that the encoded message came from an initial message of length $N$ consisting only of \u2018A\u2019 and \u2018B\u2019 using this value of $p_ A$.\n\n-----Output-----\nDisplay the original message.\n\n-----Examples-----\nSample Input:\n4\n4\n0.0101\nSample Output:\nABAB\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given a hand of cards, how many moves are required to sort it? \n-----Input----- The first line of input contains an integer $n$ ($1 \\le n \\le 52$), the number of cards in the hand. The second line contains $n$ pairwise distinct space-separated cards, each represented by two characters. The first character of a card represents the rank and is either a digit from 2 to 9 or one of the letters T, J, Q, K, and A representing Ten, Jack, Queen, King and Ace, respectively, given here in increasing order. The second character of a card is from the set {s, h, d, c} representing the suits spades\u00a0$\\spadesuit $, hearts\u00a0$\\heartsuit $, diamonds\u00a0$\\diamondsuit $, and clubs\u00a0$\\clubsuit $. -----Output----- Output the minimum number of card moves required to sort the hand as described above. -----Examples----- Sample Input 1: 4 2h Th 8c Qh Sample Output 1: 1 Sample Input 2: 7 9d As 2s Qd 2c Jd 8h Sample Output 2: 2\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWhen dealt cards in the card game Plump it is a good idea to start by sorting the cards in hand by suit and rank. The different suits should be grouped and the ranks should be sorted within each suit. But the order of the suits does not matter and within each suit, the cards may be sorted in either ascending or descending order on rank. It is allowed for some suits to be sorted in ascending order and others in descending order. \n\nSorting is done by moving one card at a time from its current position to a new position in the hand, at the start, end, or in between two adjacent cards. What is the smallest number of moves required to sort a given hand of cards?\n\n-----Input-----\nThe first line of input contains an integer $n$ ($1 \\le n \\le 52$), the number of cards in the hand. The second line contains $n$ pairwise distinct space-separated cards, each represented by two characters. The first character of a card represents the rank and is either a digit from 2 to 9 or one of the letters T, J, Q, K, and A representing Ten, Jack, Queen, King and Ace, respectively, given here in increasing order. The second character of a card is from the set {s, h, d, c} representing the suits spades\u00a0$\\spadesuit $, hearts\u00a0$\\heartsuit $, diamonds\u00a0$\\diamondsuit $, and clubs\u00a0$\\clubsuit $.\n\n-----Output-----\nOutput the minimum number of card moves required to sort the hand as described above.\n\n-----Examples-----\nSample Input 1:\n4\n2h Th 8c Qh\nSample Output 1:\n1\n\nSample Input 2:\n7\n9d As 2s Qd 2c Jd 8h\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Two guys play a game. Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman. Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non-empty groups (he can do it in any way) and gives each of them to Toastman. After guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get \n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 3\u00b710^5). The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 the initial group that is given to Toastman. -----Output----- Print a single integer \u2014 the largest possible score. -----Examples----- Input 3 3 1 5 Output 26 Input 1 10 Output 10 -----Note----- Consider the following situation in the first example. Initially Toastman gets group [3, 1, 5] and adds 9 to the score, then he give the group to Appleman. Appleman splits group [3, 1, 5] into two groups: [3, 5] and [1]. Both of them should be given to Toastman. When Toastman receives group [1], he adds 1 to score and gives the group to Appleman (he will throw it out). When Toastman receives group [3, 5], he adds 8 to the score and gives the group to Appleman. Appleman splits [3, 5] in the only possible way: [5] and [3]. Then he gives both groups to Toastman. When Toastman receives [5], he adds 5 to the score and gives the group to Appleman (he will throws it out). When Toastman receives [3], he adds 3 to the score and gives the group to Appleman (he will throws it out). Finally Toastman have added 9 + 1 + 8 + 5 + 3 = 26 to the score. This is the optimal sequence of actions.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nAppleman and Toastman play a game. Initially Appleman gives one group of n numbers to the Toastman, then they start to complete the following tasks:  Each time Toastman gets a group of numbers, he sums up all the numbers and adds this sum to the score. Then he gives the group to the Appleman.  Each time Appleman gets a group consisting of a single number, he throws this group out. Each time Appleman gets a group consisting of more than one number, he splits the group into two non-empty groups (he can do it in any way) and gives each of them to Toastman. \n\nAfter guys complete all the tasks they look at the score value. What is the maximum possible value of score they can get?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 3\u00b710^5). The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^6) \u2014 the initial group that is given to Toastman.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the largest possible score.\n\n\n-----Examples-----\nInput\n3\n3 1 5\n\nOutput\n26\n\nInput\n1\n10\n\nOutput\n10\n\n\n\n-----Note-----\n\nConsider the following situation in the first example. Initially Toastman gets group [3, 1, 5] and adds 9 to the score, then he give the group to Appleman. Appleman splits group [3, 1, 5] into two groups: [3, 5] and [1]. Both of them should be given to Toastman. When Toastman receives group [1], he adds 1 to score and gives the group to Appleman (he will throw it out). When Toastman receives group [3, 5], he adds 8 to the score and gives the group to Appleman. Appleman splits [3, 5] in the only possible way: [5] and [3]. Then he gives both groups to Toastman. When Toastman receives [5], he adds 5 to the score and gives the group to Appleman (he will throws it out). When Toastman receives [3], he adds 3 to the score and gives the group to Appleman (he will throws it out). Finally Toastman have added 9 + 1 + 8 + 5 + 3 = 26 to the score. This is the optimal sequence of actions.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given a string $s$ of length $n$ consisting of lowercase English letters. You need to compress it using the smallest possible number of coins. To compress the string, you have to represent $s$ as a concatenation of several non-empty strings: $s = t_{1} t_{2} \\ldots t_{k}$. The $i$-th of these strings should be encoded with one of the two ways: if $|t_{i}| = 1$, meaning that the current string consists of a single character, you can encode it paying $a$ coins; if $t_{i}$ is a substring of $t_{1} t_{2} \\ldots t_{i - 1}$, then you can encode it paying $b$ coins. A string $x$ is a substring of a string $y$ if $x$ can be obtained from $y$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end. So your task is to calculate the minimum possible number of coins you need to spend in order to compress the given string $s$.\n-----Input----- The first line contains three positive integers, separated by spaces: $n$, $a$ and $b$ ($1 \\leq n, a, b \\leq 5000$)\u00a0\u2014 the length of the string, the cost to compress a one-character string and the cost to compress a string that appeared before. The second line contains a single string $s$, consisting of $n$ lowercase English letters. -----Output----- Output a single integer \u2014 the smallest possible number of coins you need to spend to compress $s$. -----Examples----- Input 3 3 1 aba Output 7 Input 4 1 1 abcd Output 4 Input 4 10 1 aaaa Output 12 -----Note----- In the first sample case, you can set $t_{1} =$ 'a', $t_{2} =$ 'b', $t_{3} =$ 'a' and pay $3 + 3 + 1 = 7$ coins, since $t_{3}$ is a substring of $t_{1}t_{2}$. In the second sample, you just need to compress every character by itself. In the third sample, you set $t_{1} = t_{2} =$ 'a', $t_{3} =$ 'aa' and pay $10 + 1 + 1 = 12$ coins, since $t_{2}$ is a substring of $t_{1}$ and $t_{3}$ is a substring of $t_{1} t_{2}$.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nSuppose you are given a string $s$ of length $n$ consisting of lowercase English letters. You need to compress it using the smallest possible number of coins.\n\nTo compress the string, you have to represent $s$ as a concatenation of several non-empty strings: $s = t_{1} t_{2} \\ldots t_{k}$. The $i$-th of these strings should be encoded with one of the two ways:  if $|t_{i}| = 1$, meaning that the current string consists of a single character, you can encode it paying $a$ coins;  if $t_{i}$ is a substring of $t_{1} t_{2} \\ldots t_{i - 1}$, then you can encode it paying $b$ coins. \n\nA string $x$ is a substring of a string $y$ if $x$ can be obtained from $y$ by deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.\n\nSo your task is to calculate the minimum possible number of coins you need to spend in order to compress the given string $s$.\n\n\n-----Input-----\n\nThe first line contains three positive integers, separated by spaces: $n$, $a$ and $b$ ($1 \\leq n, a, b \\leq 5000$)\u00a0\u2014 the length of the string, the cost to compress a one-character string and the cost to compress a string that appeared before.\n\nThe second line contains a single string $s$, consisting of $n$ lowercase English letters.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the smallest possible number of coins you need to spend to compress $s$.\n\n\n-----Examples-----\nInput\n3 3 1\naba\n\nOutput\n7\n\nInput\n4 1 1\nabcd\n\nOutput\n4\n\nInput\n4 10 1\naaaa\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample case, you can set $t_{1} =$ 'a', $t_{2} =$ 'b', $t_{3} =$ 'a' and pay $3 + 3 + 1 = 7$ coins, since $t_{3}$ is a substring of $t_{1}t_{2}$.\n\nIn the second sample, you just need to compress every character by itself.\n\nIn the third sample, you set $t_{1} = t_{2} =$ 'a', $t_{3} =$ 'aa' and pay $10 + 1 + 1 = 12$ coins, since $t_{2}$ is a substring of $t_{1}$ and $t_{3}$ is a substring of $t_{1} t_{2}$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a list of integers, find the maximum sum of the list.\nExamples Input 3 10 10 5 5 7 2 Output 5 12 4 Input 5 30 25 20 15 10 9 10 12 4 13 Output 9 20 35 11 25 Note In the first sample, In the first hour, 10 liters of soup is prepared, which evaporates to the size of 5 at the same hour. In the second hour, another 10 liters of soup is made. Since it is a bit warmer than the hour before, the first bowl gets empty while the second bowl shrinks to 3. At the end of the second hour, only one bowl with 3 liters soup is left. In the third hour, another bowl with less volume of soup is made, but as the temperature dropped too, both bowls survive till the end of the hour.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nAsh like soup very much! So, on the Raksha Bandhan day, his sister gave him a soup maker as a gift. Soup maker in the ith hour will make volume  Vi liters of soup and pours it in a bowl.\nEach hour, the Volume of soup in every bowl is reduced due to evaporation. More precisely, when the temperature on a given hour is Ti, the Volume of soup in every bowl will reduce its volume by Ti. If this would reduce the volume of soup to or below zero, Bowl gets empty. All bowls are independent of each other.\nNote that the Volume of soup in every bowl made in an hour i already lose part of its volume at the same hour. In an extreme case, this may mean that there is no soup left in the bowl at the end of a particular hour.\nYou are given the initial volumes of soup in bowls and the temperature on each hour. Determine the total volume of soup evaporated in each hour.\nInput\nThe first line contains a single integer N (1\u2009\u2264\u2009N\u2009\u2264\u200910^5) \u2014 the number of hours.\nThe second line contains N integers V 1,\u2009V 2,\u2009\u2026,\u2009V N (0\u2009\u2264\u2009V i\u2009\u2264\u200910^9), where V i is the initial volume of soup made in an hour i.\nThe third line contains N integers T 1,\u2009T 2,\u2009\u2026,\u2009T N (0\u2009\u2264\u2009T i\u2009\u2264\u200910^9), where T i is the temperature in an hour i.\nOutput\nOutput a single line with N integers, where the i-th integer represents the total volume of soup melted in an hour i.\nExamples\nInput\n3\n10 10 5\n5 7 2\nOutput\n5 12 4\nInput\n5\n30 25 20 15 10\n9 10 12 4 13\nOutput\n9 20 35 11 25\nNote\nIn the first sample, In the first hour, 10 liters of soup is prepared, which evaporates to the size of 5 at the same hour. In the second hour, another 10 liters of soup is made. Since it is a bit warmer than the hour before, the first bowl gets empty while the second bowl shrinks to 3. At the end of the second hour, only one bowl with 3 liters soup is left. In the third hour, another bowl with less volume of soup is made, but as the temperature dropped too, both bowls survive till the end of the hour.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given a list of dance routines, determine the minimum number of quick changes needed to perform the routines in the given order. \n-----Input----- The first line contains a single integer\u00a0$R$, with $2 \\leq R \\leq 10$, that indicates the number of routines in the recital. Following that will be $R$ additional lines, each describing the dancers for one routine in the form of a nonempty string of up to 26 non-repeating, lexicographically sorted uppercase alphabetic characters identifying the dancers who perform in that routine. Although a dancer\u2019s letter will not appear more than once in a single routine, that dancer may appear in many different routines, and it may be that two or more routines have the identical set of dancers. -----Output----- Output a single integer designating the minimum number of quick changes required for the recital. -----Examples----- Sample Input 1: 5 ABC ABEF DEF ABCDE FGH Sample Output 1: 2 Sample Input 2: 6 BDE FGH DEF ABC BDE ABEF Sample Output 2: 3\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThe Production Manager of a dance company has been tasked with determining the cost for the seasonal dance recital. Because of their exceptional skills, many dancers will perform in more than one routine, but this presents a problem; each dance routine incorporates a unique costume, so between routines, dancers must report backstage to a Wardrobe Specialist, who can change the dancer\u2019s costume in time to begin their next scheduled routine.\n\nA Wardrobe Specialist does a normal change on a dancer when the dancer performs in two routines that are not consecutive, but when a dancer is required to perform in two consecutive routines, a quick change is necessary. A Wardrobe Specialist charges a flat rate per recital that covers all normal changes, but charges an exorbitant amount for each quick change. The Production Manager is responsible for keeping the show under budget, and has hired you to write a program to report the minimum number of quick changes needed for a given recital, given that the order of the dance routines could be changed.\n\nTo describe the cast of dancers that are to perform during a recital, each dancer is assigned an identifying uppercase letter. (Fortunately, there are never more than 26 dancers, so characters from A to Z suffice.) To describe a full recital, a list of individual routines is given, with a string of characters defining which dancers appear in a routine. For example, consider the following recital description:\n\n    ABC ABEF DEF ABCDE FGH\n\nThe above list describes a recital with 5 dance routines, including a total of 8 individual performers (dancers A through H). The first routine listed includes dancers {A, B, and C}. The second routine includes dancers {A, B, E, and F}. Notice that if these first two routines are performed in the above order, dancers A and B will require a quick change between the routines. In fact, if these five routines are scheduled in the order given above, a total of six quick changes are required. However, the schedule can be rearranged as follows:\n\n    ABEF DEF ABC FGH ABCDE\n\nIn this case, only two quick changes are required (those for E and F between the first two dances).\n\n-----Input-----\nThe first line contains a single integer\u00a0$R$, with $2 \\leq R \\leq 10$, that indicates the number of routines in the recital. Following that will be $R$ additional lines, each describing the dancers for one routine in the form of a nonempty string of up to 26 non-repeating, lexicographically sorted uppercase alphabetic characters identifying the dancers who perform in that routine. Although a dancer\u2019s letter will not appear more than once in a single routine, that dancer may appear in many different routines, and it may be that two or more routines have the identical set of dancers.\n\n-----Output-----\nOutput a single integer designating the minimum number of quick changes required for the recital.\n\n-----Examples-----\nSample Input 1:\n5\nABC\nABEF\nDEF\nABCDE\nFGH\nSample Output 1:\n2\n\nSample Input 2:\n6\nBDE\nFGH\nDEF\nABC\nBDE\nABEF\nSample Output 2:\n3\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Given a string consisting of some number of lowercase English letters 'a', you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print \"YES\", otherwise print \"NO\" (without the quotes). \n\n-----Input----- The first and only line consists of a string $S$ ($ 1 \\le |S| \\le 5\\,000 $). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'. -----Output----- Print \"YES\" or \"NO\", according to the condition. -----Examples----- Input aaabccc Output YES Input bbacc Output NO Input aabc Output YES -----Note----- Consider first example: the number of 'c' is equal to the number of 'a'.  Consider second example: although the number of 'c' is equal to the number of the 'b', the order is not correct. Consider third example: the number of 'c' is equal to the number of 'b'.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nA has a string consisting of some number of lowercase English letters 'a'. He gives it to his friend B who appends some number of letters 'b' to the end of this string. Since both A and B like the characters 'a' and 'b', they have made sure that at this point, at least one 'a' and one 'b' exist in the string.\n\nB now gives this string to C and he appends some number of letters 'c' to the end of the string. However, since C is a good friend of A and B, the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. It is also possible that the number of letters 'c' equals both to the number of letters 'a' and to the number of letters 'b' at the same time.\n\nYou have a string in your hands, and you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print \"YES\", otherwise print \"NO\" (without the quotes).\n\n\n-----Input-----\n\nThe first and only line consists of a string $S$ ($ 1 \\le |S| \\le 5\\,000 $). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'.\n\n\n-----Output-----\n\nPrint \"YES\" or \"NO\", according to the condition.\n\n\n-----Examples-----\nInput\naaabccc\n\nOutput\nYES\n\nInput\nbbacc\n\nOutput\nNO\n\nInput\naabc\n\nOutput\nYES\n\n\n\n-----Note-----\n\nConsider first example: the number of 'c' is equal to the number of 'a'. \n\nConsider second example: although the number of 'c' is equal to the number of the 'b', the order is not correct.\n\nConsider third example: the number of 'c' is equal to the number of 'b'.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given a string, find the longest palindrome substring.\n\n-----Input----- The input is given from Standard Input in the following format: N M K -----Output----- Print the answer modulo 1\\,000\\,000\\,007 (=10^9+7). -----Sample Input----- 1 1 1 -----Sample Output----- 17  - If Alice's card is a, then Alice will win regardless of Bob's and Charlie's card. There are 3\u00d73=9 such patterns.  - If Alice's card is b, Alice will only win when Bob's card is a, or when Bob's card is c and Charlie's card is a. There are 3+1=4 such patterns.  - If Alice's card is c, Alice will only win when Charlie's card is a, or when Charlie's card is b and Bob's card is a. There are 3+1=4 such patterns. Thus, there are total of 9+4+4=17 patterns that will lead to Alice's victory.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAlice, Bob and Charlie are playing Card Game for Three, as below:\n - At first, each of the three players has a deck consisting of some number of cards. Alice's deck has N cards, Bob's deck has M cards, and Charlie's deck has K cards. Each card has a letter a, b or c written on it. The orders of the cards in the decks cannot be rearranged.\n - The players take turns. Alice goes first.\n - If the current player's deck contains at least one card, discard the top card in the deck. Then, the player whose name begins with the letter on the discarded card, takes the next turn. (For example, if the card says a, Alice takes the next turn.)\n - If the current player's deck is empty, the game ends and the current player wins the game.\nThere are 3^{N+M+K} possible patters of the three player's initial decks. Among these patterns, how many will lead to Alice's victory?\nSince the answer can be large, print the count modulo 1\\,000\\,000\\,007 (=10^9+7).\n\n-----Constraints-----\n - 1 \\leq N \\leq 3\u00d710^5\n - 1 \\leq M \\leq 3\u00d710^5\n - 1 \\leq K \\leq 3\u00d710^5\n\n-----Partial Scores-----\n - 500 points will be awarded for passing the test set satisfying the following: 1 \\leq N \\leq 1000, 1 \\leq M \\leq 1000, 1 \\leq K \\leq 1000.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M K\n\n-----Output-----\nPrint the answer modulo 1\\,000\\,000\\,007 (=10^9+7).\n\n-----Sample Input-----\n1 1 1\n\n-----Sample Output-----\n17\n\n - If Alice's card is a, then Alice will win regardless of Bob's and Charlie's card. There are 3\u00d73=9 such patterns.\n - If Alice's card is b, Alice will only win when Bob's card is a, or when Bob's card is c and Charlie's card is a. There are 3+1=4 such patterns.\n - If Alice's card is c, Alice will only win when Charlie's card is a, or when Charlie's card is b and Bob's card is a. There are 3+1=4 such patterns.\nThus, there are total of 9+4+4=17 patterns that will lead to Alice's victory.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given a list of words, you need to output a sorted list. Comparison should be case sensitive\n-----Input----- The single line contains two space-separated integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 min(8, n)) \u2014 the number of the houses and the number k from the statement. -----Output----- In a single line print a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7). -----Examples----- Input 5 2 Output 54 Input 7 4 Output 1728\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nLittle penguin Polo loves his home village. The village has n houses, indexed by integers from 1 to n. Each house has a plaque containing an integer, the i-th house has a plaque containing integer p_{i} (1 \u2264 p_{i} \u2264 n).\n\nLittle penguin Polo loves walking around this village. The walk looks like that. First he stands by a house number x. Then he goes to the house whose number is written on the plaque of house x (that is, to house p_{x}), then he goes to the house whose number is written on the plaque of house p_{x} (that is, to house p_{p}_{x}), and so on.\n\nWe know that:  When the penguin starts walking from any house indexed from 1 to k, inclusive, he can walk to house number 1.  When the penguin starts walking from any house indexed from k + 1 to n, inclusive, he definitely cannot walk to house number 1.  When the penguin starts walking from house number 1, he can get back to house number 1 after some non-zero number of walks from a house to a house. \n\nYou need to find the number of ways you may write the numbers on the houses' plaques so as to fulfill the three above described conditions. Print the remainder after dividing this number by 1000000007 (10^9 + 7).\n\n\n-----Input-----\n\nThe single line contains two space-separated integers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 min(8, n)) \u2014 the number of the houses and the number k from the statement.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n54\n\nInput\n7 4\n\nOutput\n1728\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Sereja has two sequences a and b and number p. Sequence a consists of n integers a_1, a_2, ..., a_{n}. Similarly, sequence b consists of m integers b_1, b_2, ..., b_{m}. As usual, Sereja studies the sequences he has. Today he wants to find the number of positions q (q + (m - 1) p   n; q   1), such that sequence b can be obtained from sequence a_{q}, a_{q} + p, a_{q} + 2p, ..., a_{q} + (m - 1)p by rearranging elements. Sereja needs to rush to the gym, so he asked to find all the described positions of q. \n-----Input----- The first line contains three integers n, m and p (1 \u2264 n, m \u2264 2\u00b710^5, 1 \u2264 p \u2264 2\u00b710^5). The next line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9). The next line contains m integers b_1, b_2, ..., b_{m} (1 \u2264 b_{i} \u2264 10^9). -----Output----- In the first line print the number of valid qs. In the second line, print the valid values in the increasing order. -----Examples----- Input 5 3 1 1 2 3 2 1 1 2 3 Output 2 1 3 Input 6 3 2 1 3 2 2 3 1 1 2 3 Output 2 1 2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nSereja has two sequences a and b and number p. Sequence a consists of n integers a_1, a_2, ..., a_{n}. Similarly, sequence b consists of m integers b_1, b_2, ..., b_{m}. As usual, Sereja studies the sequences he has. Today he wants to find the number of positions q (q + (m - 1)\u00b7p \u2264 n;\u00a0q \u2265 1), such that sequence b can be obtained from sequence a_{q}, a_{q} + p, a_{q} + 2p, ..., a_{q} + (m - 1)p by rearranging elements.\n\nSereja needs to rush to the gym, so he asked to find all the described positions of q.\n\n\n-----Input-----\n\nThe first line contains three integers n, m and p (1 \u2264 n, m \u2264 2\u00b710^5, 1 \u2264 p \u2264 2\u00b710^5). The next line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9). The next line contains m integers b_1, b_2, ..., b_{m} (1 \u2264 b_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIn the first line print the number of valid qs. In the second line, print the valid values in the increasing order.\n\n\n-----Examples-----\nInput\n5 3 1\n1 2 3 2 1\n1 2 3\n\nOutput\n2\n1 3\n\nInput\n6 3 2\n1 3 2 2 3 1\n1 2 3\n\nOutput\n2\n1 2\n\"\"\"\ndef code():"
}