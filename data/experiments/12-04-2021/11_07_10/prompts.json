{
    "0": "Python 3\n\"\"\"\n # Task Given a game board with $4$ trees in an orchard, each bearing a different type of fruit: red apples, green apples, blue plums, and yellow pears. The raven tries to reach the orchard through a pathway containing one or more steps. At each turn, the players roll a six-sided die. Four of the faces show a color (red, green, yellow, blue), the fifth face shows a fruit basket, and the sixth face shows a raven. All six faces can appear with equal probability. Your task is to determine the probability with which the players will win! # Input A space separated string of $4$ numbers, each representing the number of fruits left on a tree. E.g. ```3 2 1 2``` # Output A number representing the probability with which the players will win. E.g. ```0.75```\n\n-----Input----- The input consists of a single test case with a single line of input. The input contains five integer numbers: $R$, $G$, $B$, $Y$ and $S$. The values of $R, G, B$ and $Y$ are the number of red, green, blue, and yellow fruits initially on each tree, respectively, and $S$ denotes the number of steps on the raven\u2019s pathway. Since the game is intended for young children, there will be at most $4$ fruits of each color: $0 \\le R, G, B, Y \\le 4$. There will be at least one fruit overall: $0 < R + G + B + Y$. The raven will require at least $1$ and at most $8$ steps: $1 \\le S \\le 8$. The number of steps is equal to the number of times the raven must appear on the die for the players to lose. -----Output----- Output the probability that the players will win as a floating point number. The absolute error of your result should be less than $10^{-5}$. -----Examples----- Sample Input 1: 1 1 0 0 3 Sample Output 1: 0.920138888889 Sample Input 2: 4 4 4 4 5 Sample Output 2: 0.631357306601\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nFirst Orchard is a cooperative game for children 2 years and up. In this simple game, the players pick colored fruits from trees in an orchard and place them into a basket. To make the game more interesting, a raven tries to reach the orchard to steal the fruits. If the players are successful in moving all fruits into the basket before the raven can get to the orchard, they\u2019ll win. If the raven gets there first, the players lose!\n\nYour task is to determine the probability with which the players will win!\n\nThe game is played as follows. There are $4$ trees in the orchard, each bearing a different type of fruit: red apples, green apples, blue plums, and yellow pears. The raven tries to reach the orchard through a pathway containing one or more steps.\n\nAt each turn, the players roll a six-sided die. Four of the faces show a color (red, green, yellow, blue), the fifth face shows a fruit basket, and the sixth face shows a raven. All six faces can appear with equal probability.\n - Red, Green, Yellow, Blue. In these cases, a fruit with the corresponding color is placed into the basket, provided the tree corresponding to this color still has any fruits left to pick. Otherwise, the players move on to the next turn.\n - Fruit Basket. If the players roll the \u2019basket\u2019 face, they will pick a fruit from the tree that has the largest number of fruits left. If there are multiple such trees with the same number of fruits, any of the trees can be chosen.\n - Raven. If the \u2019raven\u2019 face appears on the die, then the raven moves one step closer towards the orchard.\n\nThe game is over if either the players have picked all fruits, or if the raven reaches the orchard, whichever happens first. If the raven reaches the orchard before the players have placed all fruits into the basket, the players lose.\n\n-----Input-----\nThe input consists of a single test case with a single line of input. The input contains five integer numbers: $R$, $G$, $B$, $Y$ and $S$. The values of $R, G, B$ and $Y$ are the number of red, green, blue, and yellow fruits initially on each tree, respectively, and $S$ denotes the number of steps on the raven\u2019s pathway. Since the game is intended for young children, there will be at most $4$ fruits of each color: $0 \\le R, G, B, Y \\le 4$. There will be at least one fruit overall: $0 < R + G + B + Y$. The raven will require at least $1$ and at most $8$ steps: $1 \\le S \\le 8$. The number of steps is equal to the number of times the raven must appear on the die for the players to lose.\n\n-----Output-----\nOutput the probability that the players will win as a floating point number. The absolute error of your result should be less than $10^{-5}$.\n\n-----Examples-----\nSample Input 1:\n1 1 0 0 3\nSample Output 1:\n0.920138888889\n\nSample Input 2:\n4 4 4 4 5\nSample Output 2:\n0.631357306601\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n The local zoo has acquired a large open garden in which animals may freely move as in their natural habitats and entertain visitors with their usual shenanigans. The most popular animals are monkeys. With their climbing and jumping and other skills, they delight old and young visitors alike. One species of monkey has specialized in climbing tall trees and picking off coconuts. Another species has specialized in breaking them open. There are $N$ monkeys of the first type (numbered 1 through $N$) and $M$ monkeys of the second type (numbered 1 through $M$). Monkey $k$ of the first type takes $A_ k$ seconds to find a good spot on the tree, after which it picks off its first coconut. After that the monkey produces a new coconut every $B_ k$ seconds. Monkey $k$ of the second type takes $C_ k$ seconds to find a good tool for opening the coconuts, after which it opens its first coconut. After that the monkey opens another coconut every $D_ k$ seconds. Unfortunately, the second type of monkey is extremely aggressive so the two types may not be in the garden at the same time. Therefore, zoo keepers will chase away the first type of monkeys as soon as they have picked off all the coconuts. Similarly, if monkeys of the same type stay too long after opening all the coconuts, fights will ensue. Because of that, zoo keepers will send them away as soon as they have opened all the coconuts. The zoo keepers first arrive immediately after all coconuts have been picked, and again immediately after the monkeys open them all. The time needed for monkeys to enter or leave the garden is\n-----Input----- The first line contains the integer $T$ $(1 \\leq T \\leq 1000000000)$, the total time that monkeys spent in the garden, in seconds. The next line contains the integer $N$ $(1 \\leq N \\leq 100)$, the number of monkeys of the first type. Each of the following $N$ lines contains two integers $A_ k$ and $B_ k$ $(1 \\leq A_ k, B_ k \\leq 1000000000)$, how fast monkey $k$ of the first type is. The next line contains the integer $M$ $(1 \\leq M \\leq 100)$, the number of monkeys of the second type. Each of the following $M$ lines contains two integers $C_ k$ and $D_ k$ $(1 \\leq C_ k, D_ k \\leq 1000000000)$, how fast monkey $k$ of the second type is. -----Output----- Output the number of seconds between the arrival of the first type of monkeys and the arrival of the second type. -----Examples----- Sample Input: 12 1 3 1 1 5 1 Sample Output: 5\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe local zoo has acquired a large open garden in which animals may freely move as in their natural habitats and entertain visitors with their usual shenanigans.\n\nThe most popular animals are monkeys. With their climbing and jumping and other skills, they delight old and young visitors alike.\n\nOne species of monkey has specialized in climbing tall trees and picking off coconuts. Another species has specialized in breaking them open.\n\nThere are $N$ monkeys of the first type (numbered 1 through $N$) and $M$ monkeys of the second type (numbered 1 through $M$).\n\nMonkey $k$ of the first type takes $A_ k$ seconds to find a good spot on the tree, after which it picks off its first coconut. After that the monkey produces a new coconut every $B_ k$ seconds.\n\nMonkey $k$ of the second type takes $C_ k$ seconds to find a good tool for opening the coconuts, after which it opens its first coconut. After that the monkey opens another coconut every $D_ k$ seconds.\n\nUnfortunately, the second type of monkey is extremely aggressive so the two types may not be in the garden at the same time. Therefore, zoo keepers will chase away the first type of monkeys as soon as they have picked off all the coconuts. Similarly, if monkeys of the same type stay too long after opening all the coconuts, fights will ensue. Because of that, zoo keepers will send them away as soon as they have opened all the coconuts.\n\nThe zoo keepers first arrive immediately after all coconuts have been picked, and again immediately after the monkeys open them all. The time needed for monkeys to enter or leave the garden is also negligibly small.\n\nTomislav especially likes the second type of monkey, but can never guess when to arrive in order to see them. Help him calculate the time when the second type arrives if he knows the total time that monkeys spent in the garden, but does not know the number of coconuts in the garden.\n\n-----Input-----\nThe first line contains the integer $T$ $(1 \\leq T \\leq 1000000000)$, the total time that monkeys spent in the garden, in seconds.\n\nThe next line contains the integer $N$ $(1 \\leq N \\leq 100)$, the number of monkeys of the first type. Each of the following $N$ lines contains two integers $A_ k$ and $B_ k$ $(1 \\leq A_ k, B_ k \\leq 1000000000)$, how fast monkey $k$ of the first type is.\n\nThe next line contains the integer $M$ $(1 \\leq M \\leq 100)$, the number of monkeys of the second type. Each of the following $M$ lines contains two integers $C_ k$ and $D_ k$ $(1 \\leq C_ k, D_ k \\leq 1000000000)$, how fast monkey $k$ of the second type is.\n\n-----Output-----\nOutput the number of seconds between the arrival of the first type of monkeys and the arrival of the second type.\n\n-----Examples-----\nSample Input:\n12\n1\n3 1\n1\n5 1\nSample Output:\n5\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Pumpkin Pete is trying out a new type of rapid-growth pumpkin seed that he bought from the farmer's market. Without looking at the directions, Pumpkin Pete tears through the packaging and plants the seeds he has into his pumpkin patch. Unbeknownst to Pumpkin Pete, his rival, Gourd Gary, is watching him plant the new seeds from a secret vantage point. After Pumpkin Pete leaves the pumpkin patch, Gourd Gary approaches the patch and picks up the packaging that Pumpkin Pete left on the ground. The packaging says the following: - A pumpkin starts with four roots of length zero. - Each of the pumpkin's four roots grow a single unit in a different cardinal direction each day. - When a pumpkin dies, its remains will not disappear. - If any of the roots grow into another pumpkin or its roots dead or alive the pumpkin will die at the end of that day. - Roots cannot grow outside of the bounds of a plot. In other words, a pumpkin will die if one of its roots tries to go outside the bounds of the pumpkin patch. - If the roots of multiple pumpkins reach the same spot on the same day, each one of the affected roots stops growing (i.e. fight for nutrients) and in turn, the pumpkins will die at the end of the day. - When a pumpkin dies, its roots do not grow on subsequent days. With this information and the knowledge of where each of the pumpkin seeds were planted, Gourd Gary starts to think about which pumpkins would still be alive if they were left to grow for $D$ days$\\ldots $Input The first line of input contains three integers: the number of pumpkins $P$, the number of\nExamples----- Sample Input: 4 2 8 3 2 5 5 4 3 1 1 Sample Output: 1 2 1 2\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nPumpkin Pete is trying out a new type of \u201crapid-growth\u201d pumpkin seed that he bought from the farmer\u2019s market. Without looking at the directions, Pumpkin Pete tears through the packaging and plants the seeds he has into his pumpkin patch. Unbeknownst to Pumpkin Pete, his rival, Gourd Gary, is watching him plant the new seeds from a secret vantage point. After Pumpkin Pete leaves the pumpkin patch, Gourd Gary approaches the patch and picks up the packaging that Pumpkin Pete left on the ground. The packaging says the following:\n - A pumpkin starts with four roots of length zero.\n - Each of the pumpkin\u2019s four roots grow a single unit in a different cardinal direction each day.\n - When a pumpkin dies, its remains will not disappear.\n - If any of the roots grow into another pumpkin or its roots \u2013 dead or alive \u2013 the pumpkin will die at the end of that day.\n - Roots cannot grow outside of the bounds of a plot. In other words, a pumpkin will die if one of its roots tries to go outside the bounds of the pumpkin patch.\n - If the roots of multiple pumpkins reach the same spot on the same day, each one of the affected roots stops growing (i.e. fight for nutrients) and in turn, the pumpkins will die at the end of the day.\n - When a pumpkin dies, its roots do not grow on subsequent days.\n\nWith this information and the knowledge of where each of the pumpkin seeds were planted, Gourd Gary starts to think about which pumpkins would still be alive if they were left to grow for $D$ days$\\ldots $Input\n\nThe first line of input contains three integers: the number of pumpkins $P$, the number of days $D$ that will pass ($1 \\leq D \\leq 10$), and $N$ ($1 \\leq N \\leq 30, 1 \\leq P \\leq N^2$) the dimension of the $N\\times N$ grid. The next $P$ lines of input contain two integers, $R$ and $C$ ($0 \\leq R,C < N$), representing the row and column position of each pumpkin. No two pumpkins will be at the same position. Position $(0,0)$ is the top left corner of the grid.\n\n-----Output-----\nThe output will consist of a single line per pumpkin in the same relative order as the input. If the pumpkin is alive after $D$ days have passed, print \u201cALIVE\u201d. Otherwise, print the day the pumpkin died as a single integer.\n\n-----Examples-----\nSample Input:\n4 2 8\n3 2\n5 5\n4 3\n1 1\nSample Output:\n1\n2\n1\n2\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given a function f: [n]   [n]. Your task is to find a positive integer m, and two functions g: [n]   [m], h: [m]   [n], such that g(h(x)) = x for all $x \\in [ m ]$, and h(g(x)) = f(x) for all $x \\in [ n ]$, or determine that finding these is impossible. \n-----Input----- The first line contains an integer n (1 \u2264 n \u2264 10^5). The second line contains n space-separated integers\u00a0\u2014 values f(1), ..., f(n) (1 \u2264 f(i) \u2264 n). -----Output----- If there is no answer, print one integer -1. Otherwise, on the first line print the number m (1 \u2264 m \u2264 10^6). On the second line print n numbers g(1), ..., g(n). On the third line print m numbers h(1), ..., h(m). If there are several correct answers, you may output any of them. It is guaranteed that if a valid answer exists, then there is an answer satisfying the above restrictions. -----Examples----- Input 3 1 2 3 Output 3 1 2 3 1 2 3 Input 3 2 2 2 Output 1 1 1 1 2 Input 2 2 1 Output -1\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nArtsem has a friend Saunders from University of Chicago. Saunders presented him with the following problem.\n\nLet [n] denote the set {1, ..., n}. We will also write f: [x] \u2192 [y] when a function f is defined in integer points 1, ..., x, and all its values are integers from 1 to y.\n\nNow then, you are given a function f: [n] \u2192 [n]. Your task is to find a positive integer m, and two functions g: [n] \u2192 [m], h: [m] \u2192 [n], such that g(h(x)) = x for all $x \\in [ m ]$, and h(g(x)) = f(x) for all $x \\in [ n ]$, or determine that finding these is impossible.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n space-separated integers\u00a0\u2014 values f(1), ..., f(n) (1 \u2264 f(i) \u2264 n).\n\n\n-----Output-----\n\nIf there is no answer, print one integer -1.\n\nOtherwise, on the first line print the number m (1 \u2264 m \u2264 10^6). On the second line print n numbers g(1), ..., g(n). On the third line print m numbers h(1), ..., h(m).\n\nIf there are several correct answers, you may output any of them. It is guaranteed that if a valid answer exists, then there is an answer satisfying the above restrictions.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n3\n1 2 3\n1 2 3\n\nInput\n3\n2 2 2\n\nOutput\n1\n1 1 1\n2\n\nInput\n2\n2 1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a formation and the members of Johnny s team, output whether it is possible for Johnny to organize his team to get a perfect team. A team is a perfect team if and only if every player is placed on a node with a synergy score that is greater or equal to the node s degree. A node s degree is the number of links to which it is linked in the formation. A player placed on a node in the formation derives synergy from all players placed on nodes to which the player is linked in the formation. Thus, a node s synergy score is the sum of the synergy scores of all links to which the node is connected.\n-----Input----- The input will contain a single test case. The first line of the input will have one integer $c$ ($0 \\leq c \\leq 45$). $c$ represents the number of edges in the formation. The next $c$ lines represent the connections between nodes represented as two integers $a$ ($0 \\leq a < 10$) and $b$ ($0 \\leq b < 10$), where $a$ is not equal to $b$. Then, the next $10$ lines will be the players on Johnny\u2019s team. Each line will contain four strings in the following order: player name, nation, league, team, which are delimited by a single space. These strings are guaranteed to be non-empty and consist of up to $15$ alphanumeric characters, which includes lower- and uppercase English letters, digits, and hyphens. -----Output----- If a perfect team can be organized by Johnny, print yes. Otherwise, print no. -----Examples----- Sample Input: 15 0 1 1 2 2 3 0 4 1 5 2 6 3 7 4 5 5 6 6 7 4 8 5 8 6 9 7 9 8 9 Griezmann France LaLiga AtleticoMadrid Benzema France LaLiga RealMadrid Ntep France Ligue1 StadeRennais Sissoko France PremierLeague Spurs Tolisso France Ligue1 Lyon Diarra France Ligue1 OM Evra France CalcioA Juventus Koscielny France PremierLeague Arsenal Varane France LaLiga RealMadrid Sagna France PremierLeague ManCity Sample Output: yes\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nJohnny has been roped into a fantasy soccer league and needs your help to set up the best team. \n\nHe has a list of $10$ players that are on his fantasy team (no goalkeepers in this league). He also knows what country they\u2019re from, what league they play in, and what team they play for.\n\nHe doesn\u2019t know much about soccer, but he does know these things:\n - If two players are from the same country, a link between the two players will have a synergy score of $1$.\n - If two players are in the same league, a link between the two players will have a synergy score of $1$.\n - If two players are on the same team, a link between the two players will have a synergy score of $2$.\n - If two players are from the same country and in the same league, a link between the two players will have a synergy score of $2$.\n - If two players are from the same country and on the same team, a link between the two players will have a synergy score of $3$.\n\nA team can only be in one league and no two teams will have the same name unless they are the same team.\n\nHe has to place the players on his team into a formation of $10$ nodes which can be represented as an undirected graph. The illustration shows the first sample. Therefore, Johnny has to place a player in each node of the graph. Given a particular formation and the members of Johnny\u2019s team, output whether it is possible for Johnny to organize his team to get a perfect team.\n\nA team is a perfect team if and only if every player is placed on a node with a synergy score that is greater or equal to the node\u2019s degree. A node\u2019s degree is the number of links to which it is linked in the formation. A player placed on a node in the formation derives synergy from all players placed on nodes to which the player is linked in the formation. Thus, a node\u2019s synergy score is the sum of the synergy scores of all links to which the node is connected.\n\n-----Input-----\nThe input will contain a single test case. The first line of the input will have one integer $c$ ($0 \\leq c \\leq 45$). $c$ represents the number of edges in the formation. The next $c$ lines represent the connections between nodes represented as two integers $a$ ($0 \\leq a < 10$) and $b$ ($0 \\leq b < 10$), where $a$ is not equal to $b$. Then, the next $10$ lines will be the players on Johnny\u2019s team. Each line will contain four strings in the following order: player name, nation, league, team, which are delimited by a single space. These strings are guaranteed to be non-empty and consist of up to $15$ alphanumeric characters, which includes lower- and uppercase English letters, digits, and hyphens.\n\n-----Output-----\nIf a perfect team can be organized by Johnny, print yes. Otherwise, print no.\n\n-----Examples-----\nSample Input:\n15\n0 1\n1 2\n2 3\n0 4\n1 5\n2 6\n3 7\n4 5\n5 6\n6 7\n4 8\n5 8\n6 9\n7 9\n8 9\nGriezmann France LaLiga AtleticoMadrid\nBenzema France LaLiga RealMadrid\nNtep France Ligue1 StadeRennais\nSissoko France PremierLeague Spurs\nTolisso France Ligue1 Lyon\nDiarra France Ligue1 OM\nEvra France CalcioA Juventus\nKoscielny France PremierLeague Arsenal\nVarane France LaLiga RealMadrid\nSagna France PremierLeague ManCity\nSample Output:\nyes\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given the number of floors of all towers, output the minimum number of charges needed to eliminate all floors of all blocks.\n-----Input----- The first line of input contains the number of blocks $n$, where $2 \\leq n \\leq 100000$. The second line contains $n$ consecutive block heights $h_ i$ for $i=1,2,\\ldots ,n$, where $1 \\leq h_ i \\leq 1000000$. -----Output----- Output one line containing one integer: the minimum number of charges needed to tear down all the blocks. -----Examples----- Sample Input: 6 2 1 8 8 2 3 Sample Output: 5\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nFor the grand opening of the algorithmic games in NlogNsglow, a row of tower blocks is set to be demolished in a grand demonstration of renewal. Originally the plan was to accomplish this with controlled explosions, one for each tower block, but time constraints now require a hastier solution.\n\nTo help you remove the blocks more rapidly you have been given the use of a Universal Kinetic / Incandescent Energy Particle Cannon (UKIEPC). On a single charge, this cutting-edge contraption can remove either all of the floors in a single tower block, or all the $x$-th floors in all the blocks simultaneously, for user\u2019s choice of the floor number $x$. In the latter case, the blocks that are less than $x$ floors high are left untouched, while for blocks having more than $x$ floors, all the floors above the removed $x$-th one fall down by one level.\n\n-----Task-----\nGiven the number of floors of all towers, output the minimum number of charges needed to eliminate all floors of all blocks.\n\n-----Input-----\nThe first line of input contains the number of blocks $n$, where $2 \\leq n \\leq 100000$. The second line contains $n$ consecutive block heights $h_ i$ for $i=1,2,\\ldots ,n$, where $1 \\leq h_ i \\leq 1000000$.\n\n-----Output-----\nOutput one line containing one integer: the minimum number of charges needed to tear down all the blocks.\n\n-----Examples-----\nSample Input:\n6\n2 1 8 8 2 3\nSample Output:\n5\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You know for each light whether it's initially on or off and its corresponding parameters $a_i$ and $b_i$. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out. \n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of lights. The next line contains a string $s$ of $n$ characters. The $i$-th character is \"1\", if the $i$-th lamp is initially on. Otherwise, $i$-th character is \"0\". The $i$-th of the following $n$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 5$) \u00a0\u2014 the parameters of the $i$-th light. -----Output----- Print a single integer\u00a0\u2014 the maximum number of lights that will ever be on at the same time. -----Examples----- Input 3 101 3 3 3 2 3 1 Output 2 Input 4 1111 3 4 5 2 3 1 3 2 Output 4 Input 6 011100 5 3 5 5 2 4 3 5 4 2 1 5 Output 6 -----Note----- For first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is $2$ (e.g. at the moment $2$). In the second example, all lights are initially on. So the answer is $4$.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nIt is a holiday season, and Koala is decorating his house with cool lights! He owns $n$ lights, all of which flash periodically.\n\nAfter taking a quick glance at them, Koala realizes that each of his lights can be described with two parameters $a_i$ and $b_i$. Light with parameters $a_i$ and $b_i$ will toggle (on to off, or off to on) every $a_i$ seconds starting from the $b_i$-th second. In other words, it will toggle at the moments $b_i$, $b_i + a_i$, $b_i + 2 \\cdot a_i$ and so on.\n\nYou know for each light whether it's initially on or off and its corresponding parameters $a_i$ and $b_i$. Koala is wondering what is the maximum number of lights that will ever be on at the same time. So you need to find that out.\n\n [Image] Here is a graphic for the first example. \n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$), the number of lights.\n\nThe next line contains a string $s$ of $n$ characters. The $i$-th character is \"1\", if the $i$-th lamp is initially on. Otherwise, $i$-th character is \"0\".\n\nThe $i$-th of the following $n$ lines contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 5$) \u00a0\u2014 the parameters of the $i$-th light.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of lights that will ever be on at the same time.\n\n\n-----Examples-----\nInput\n3\n101\n3 3\n3 2\n3 1\n\nOutput\n2\n\nInput\n4\n1111\n3 4\n5 2\n3 1\n3 2\n\nOutput\n4\n\nInput\n6\n011100\n5 3\n5 5\n2 4\n3 5\n4 2\n1 5\n\nOutput\n6\n\n\n\n-----Note-----\n\nFor first example, the lamps' states are shown in the picture above. The largest number of simultaneously on lamps is $2$ (e.g. at the moment $2$).\n\nIn the second example, all lights are initially on. So the answer is $4$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Alice and Bob are playing a game on a simple connected graph with $N$ nodes and $M$ edges. Alice colors each edge in the graph red or blue. A path is a sequence of edges where each pair of consecutive edges have a node in common. If the first edge in the pair is of a different color than the second edge, then that is a color change. After Alice colors the graph, Bob chooses a path that begins at node $1$ and ends at node $N$. He can choose any path on the graph, but he wants to minimize the number of color changes in the path. Alice wants to choose an edge coloring to maximize the number of color changes Bob must make. What is the maximum number of color changes she can force Bob to make, regardless of which path he chooses \n-----Input----- The first line contains two integer values $N$ and $M$ with $2 \\le N \\le 100000$ and $1 \\le M \\le 100000$. The next $M$ lines contain two integers $a_ i$ and $b_ i$ indicating an undirected edge between nodes $a_ i$ and $b_ i$ ($1 \\le a_ i, b_ i \\le N$, $a_ i \\not= b_ i$). All edges in the graph are unique. -----Output----- Output the maximum number of color changes Alice can force Bob to make on his route from node $1$ to node $N$. -----Examples----- Sample Input: 3 3 1 3 1 2 2 3 Sample Output: 0\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAlice and Bob are playing a game on a simple connected graph with $N$ nodes and $M$ edges.\n\nAlice colors each edge in the graph red or blue.\n\nA path is a sequence of edges where each pair of consecutive edges have a node in common. If the first edge in the pair is of a different color than the second edge, then that is a \u201ccolor change.\u201d\n\nAfter Alice colors the graph, Bob chooses a path that begins at node $1$ and ends at node $N$. He can choose any path on the graph, but he wants to minimize the number of color changes in the path. Alice wants to choose an edge coloring to maximize the number of color changes Bob must make. What is the maximum number of color changes she can force Bob to make, regardless of which path he chooses?\n\n-----Input-----\nThe first line contains two integer values $N$ and $M$ with $2 \\le N \\le 100000$ and $1 \\le M \\le 100000$. The next $M$ lines contain two integers $a_ i$ and $b_ i$ indicating an undirected edge between nodes $a_ i$ and $b_ i$ ($1 \\le a_ i, b_ i \\le N$, $a_ i \\not= b_ i$).\n\nAll edges in the graph are unique.\n\n-----Output-----\nOutput the maximum number of color changes Alice can force Bob to make on his route from node $1$ to node $N$.\n\n-----Examples-----\nSample Input:\n3 3\n1 3\n1 2\n2 3\nSample Output:\n0\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n The people of Absurdistan discovered how to build roads only last year. After the discovery, each city decided to build its own road, connecting the city to some other city. Each newly built road can be used in both directions. You bought a tourist guide which has a map of the country with the newly built roads. However, since you are very interested in history, you would like to know which city built which road. Given the description of $n$ roads, can you find an assignment of roads to $n$ cities, such that each city built one road If there are multiple assignments, you are happy with any one. At least one solution is guaranteed to exist.\n-----Input----- The first line contains an integer $n$ $(2\\le n\\le 100000)$ \u2013 the number of cities and roads. Then follow $n$ lines with $2$ numbers each. A line containing \u201c$a$ $b$\u201d indicates that there is a road between cities $a$ and $b$, $1 \\le a, b\\le n, a \\not= b$. There can be multiple roads between the same pair of cities. -----Output----- Print $n$ lines with two integers \u201c$a$$b$\u201d denoting that a road between $a$ and $b$ was built by city $a$. Each road from the input must appear exactly once in the output. If there are multiple solutions, you can print any one and you can print the roads in any order. -----Examples----- Sample Input: 4 1 2 2 3 3 1 4 1 Sample Output: 4 1 2 1 3 2 1 3\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThe people of Absurdistan discovered how to build roads only last year. After the discovery, each city decided to build its own road, connecting the city to some other city. Each newly built road can be used in both directions.\n\nYou bought a tourist guide which has a map of the country with the newly built roads. However, since you are very interested in history, you would like to know which city built which road.\n\nGiven the description of $n$ roads, can you find an assignment of roads to $n$ cities, such that each city built one road? If there are multiple assignments, you are happy with any one. At least one solution is guaranteed to exist.\n\n-----Input-----\nThe first line contains an integer $n$ $(2\\le n\\le 100000)$ \u2013 the number of cities and roads. Then follow $n$ lines with $2$ numbers each. A line containing \u201c$a$ $b$\u201d indicates that there is a road between cities $a$ and $b$, $1 \\le a, b\\le n, a \\not= b$. There can be multiple roads between the same pair of cities.\n\n-----Output-----\nPrint $n$ lines with two integers \u201c$a$$b$\u201d denoting that a road between $a$ and $b$ was built by city $a$. Each road from the input must appear exactly once in the output. If there are multiple solutions, you can print any one and you can print the roads in any order.\n\n-----Examples-----\nSample Input:\n4\n1 2\n2 3\n3 1\n4 1\nSample Output:\n4 1\n2 1\n3 2\n1 3\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n There is a sequence a that consists of n integers a_1, a_2, ..., a_{n}. Let's denote f(l, r, x) the number of indices k such that: l   k   r and a_{k} = x. His task is to calculate the number of pairs of indicies i, j (1   i < j   n) such that f(1, i, a_{i}) > f(j, n, a_{j}). Help Pashmak with the test. \n-----Input----- The first line of the input contains an integer n (1 \u2264 n \u2264 10^6). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9). -----Output----- Print a single integer \u2014 the answer to the problem. -----Examples----- Input 7 1 2 1 1 2 2 1 Output 8 Input 3 1 1 1 Output 1 Input 5 1 2 3 4 5 Output 0\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nParmida is a clever girl and she wants to participate in Olympiads this year. Of course she wants her partner to be clever too (although he's not)! Parmida has prepared the following test problem for Pashmak.\n\nThere is a sequence a that consists of n integers a_1, a_2, ..., a_{n}. Let's denote f(l, r, x) the number of indices k such that: l \u2264 k \u2264 r and a_{k} = x. His task is to calculate the number of pairs of indicies i, j (1 \u2264 i < j \u2264 n) such that f(1, i, a_{i}) > f(j, n, a_{j}).\n\nHelp Pashmak with the test.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 10^6). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n7\n1 2 1 1 2 2 1\n\nOutput\n8\n\nInput\n3\n1 1 1\n\nOutput\n1\n\nInput\n5\n1 2 3 4 5\n\nOutput\n0\n\"\"\"\ndef code():"
}