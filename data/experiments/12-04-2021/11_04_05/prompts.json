{
    "0": "Python 3\n\"\"\"\n Slime has a sequence of positive integers $a_1, a_2, \\ldots, a_n$. In one operation Orac can choose an arbitrary subsegment $[l \\ldots r]$ of this sequence and replace all values $a_l, a_{l + 1}, \\ldots, a_r$ to the value of median of $\\{a_l, a_{l + 1}, \\ldots, a_r\\}$. In this problem, for the integer multiset $s$, the median of $s$ is equal to the $\\lfloor \\frac{|s|+1}{2}\\rfloor$-th smallest number in it. For example, the median of $\\{1,4,4,6,5\\}$ is $4$, and the median of $\\{1,7,5,8\\}$ is $5$. Slime wants Orac to make $a_1 = a_2 = \\ldots = a_n = k$ using these operations. Orac thinks that it is impossible, and he does not want to waste his time, so he decided to ask you if it is possible to satisfy the Slime's requirement, he may ask you these questions several times. \n-----Input----- The first line of the input is a single integer $t$: the number of queries. The first line of each query contains two integers $n\\ (1\\le n\\le 100\\,000)$ and $k\\ (1\\le k\\le 10^9)$, the second line contains $n$ positive integers $a_1,a_2,\\dots,a_n\\ (1\\le a_i\\le 10^9)$ The total sum of $n$ is at most $100\\,000$. -----Output----- The output should contain $t$ lines. The $i$-th line should be equal to 'yes' if it is possible to make all integers $k$ in some number of operations or 'no', otherwise. You can print each letter in lowercase or uppercase. -----Example----- Input 5 5 3 1 5 2 6 1 1 6 6 3 2 1 2 3 4 3 3 1 2 3 10 3 1 2 3 4 5 6 7 8 9 10 Output no yes yes no yes -----Note----- In the first query, Orac can't turn all elements into $3$. In the second query, $a_1=6$ is already satisfied. In the third query, Orac can select the complete array and turn all elements into $2$. In the fourth query, Orac can't turn all elements into $3$. In the fifth query, Orac can select $[1,6]$ at first and then select $[2,10]$.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSlime has a sequence of positive integers $a_1, a_2, \\ldots, a_n$.\n\nIn one operation Orac can choose an arbitrary subsegment $[l \\ldots r]$ of this sequence and replace all values $a_l, a_{l + 1}, \\ldots, a_r$ to the value of median of $\\{a_l, a_{l + 1}, \\ldots, a_r\\}$.\n\nIn this problem, for the integer multiset $s$, the median of $s$ is equal to the $\\lfloor \\frac{|s|+1}{2}\\rfloor$-th smallest number in it. For example, the median of $\\{1,4,4,6,5\\}$ is $4$, and the median of $\\{1,7,5,8\\}$ is $5$.\n\nSlime wants Orac to make $a_1 = a_2 = \\ldots = a_n = k$ using these operations.\n\nOrac thinks that it is impossible, and he does not want to waste his time, so he decided to ask you if it is possible to satisfy the Slime's requirement, he may ask you these questions several times.\n\n\n-----Input-----\n\nThe first line of the input is a single integer $t$: the number of queries.\n\nThe first line of each query contains two integers $n\\ (1\\le n\\le 100\\,000)$ and $k\\ (1\\le k\\le 10^9)$, the second line contains $n$ positive integers $a_1,a_2,\\dots,a_n\\ (1\\le a_i\\le 10^9)$\n\nThe total sum of $n$ is at most $100\\,000$.\n\n\n-----Output-----\n\nThe output should contain $t$ lines. The $i$-th line should be equal to 'yes' if it is possible to make all integers $k$ in some number of operations or 'no', otherwise. You can print each letter in lowercase or uppercase.\n\n\n-----Example-----\nInput\n5\n5 3\n1 5 2 6 1\n1 6\n6\n3 2\n1 2 3\n4 3\n3 1 2 3\n10 3\n1 2 3 4 5 6 7 8 9 10\n\nOutput\nno\nyes\nyes\nno\nyes\n\n\n\n-----Note-----\n\nIn the first query, Orac can't turn all elements into $3$.\n\nIn the second query, $a_1=6$ is already satisfied.\n\nIn the third query, Orac can select the complete array and turn all elements into $2$.\n\nIn the fourth query, Orac can't turn all elements into $3$.\n\nIn the fifth query, Orac can select $[1,6]$ at first and then select $[2,10]$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it. \n-----Input----- The first line contains three integers n, k and p (1 \u2264 n \u2264 1 000, n \u2264 k \u2264 2 000, 1 \u2264 p \u2264 10^9) \u2014 the number of people, the number of keys and the office location. The second line contains n distinct integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 positions in which people are located initially. The positions are given in arbitrary order. The third line contains k distinct integers b_1, b_2, ..., b_{k} (1 \u2264 b_{j} \u2264 10^9) \u2014 positions of the keys. The positions are given in arbitrary order. Note that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point. -----Output----- Print the minimum time (in seconds) needed for all n to reach the office with keys. -----Examples----- Input 2 4 50 20 100 60 10 40 80 Output 50 Input 1 2 10 11 15 7 Output 7 -----Note----- In the first example the person located at point 20 should take the key located at point 40 and go with it to the office located at point 50. He spends 30 seconds. The person located at point 100 can take the key located at point 80 and go to the office with it. He spends 50 seconds. Thus, after 50 seconds everybody is in office with keys.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThere are n people and k keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn't be taken by anybody else.\n\nYou are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it.\n\n\n-----Input-----\n\nThe first line contains three integers n, k and p (1 \u2264 n \u2264 1 000, n \u2264 k \u2264 2 000, 1 \u2264 p \u2264 10^9) \u2014 the number of people, the number of keys and the office location.\n\nThe second line contains n distinct integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 positions in which people are located initially. The positions are given in arbitrary order.\n\nThe third line contains k distinct integers b_1, b_2, ..., b_{k} (1 \u2264 b_{j} \u2264 10^9) \u2014 positions of the keys. The positions are given in arbitrary order.\n\nNote that there can't be more than one person or more than one key in the same point. A person and a key can be located in the same point.\n\n\n-----Output-----\n\nPrint the minimum time (in seconds) needed for all n to reach the office with keys.\n\n\n-----Examples-----\nInput\n2 4 50\n20 100\n60 10 40 80\n\nOutput\n50\n\nInput\n1 2 10\n11\n15 7\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first example the person located at point 20 should take the key located at point 40 and go with it to the office located at point 50. He spends 30 seconds. The person located at point 100 can take the key located at point 80 and go to the office with it. He spends 50 seconds. Thus, after 50 seconds everybody is in office with keys.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a string $s$ consisting only of upper case letters A and B. For an integer $k$, a pair of indices $i$ and $j$ ($1 \\le i<j \\le n$) is called a $k$-inversion if and only if $s[i] = \\textbf{B}$, $s[j] = \\textbf{A}$ and $j-i = k$. Consider the string BABA. It has two $1$-inversions and one $3$-inversion. It has no $2$-inversions. For each $k$ between $1$ and $n-1$ (inclusive), print the number of $k$-inversions in the string $s$. \n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a single line with a string $s$, which consists of only upper case As and Bs. The string $s$ will be between $1$ and $1000000$ characters long. There will be no spaces. -----Output----- Output $n-1$ lines, each with a single integer. The first line\u2019s integer should be the number of $1$-inversions, the second should be the number of $2$-inversions, and so on. -----Examples----- Sample Input: BABA Sample Output: 2 0 1\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a string $s$ consisting only of upper case letters A and B. For an integer $k$, a pair of indices $i$ and $j$ ($1 \\le i<j \\le n$) is called a $k$-inversion if and only if $s[i] = \\textbf{B}$, $s[j] = \\textbf{A}$ and $j-i = k$.\n\nConsider the string BABA. It has two $1$-inversions and one $3$-inversion. It has no $2$-inversions.\n\nFor each $k$ between $1$ and $n-1$ (inclusive), print the number of $k$-inversions in the string $s$.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a single line with a string $s$, which consists of only upper case As and Bs. The string $s$ will be between $1$ and $1000000$ characters long. There will be no spaces.\n\n-----Output-----\nOutput $n-1$ lines, each with a single integer. The first line\u2019s integer should be the number of $1$-inversions, the second should be the number of $2$-inversions, and so on.\n\n-----Examples-----\nSample Input:\nBABA\nSample Output:\n2\n0\n1\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given a list of timestamps of people entering and exiting a room. Your job is to determine how the virus will spread. \nNote: In sample $2$, person $2$ and $4$ will get infected after day $1$. They can only spread the infection to person $3$ and $5$ on day $2$. For $D = 1$, the infected people are $1$, $2$, $4$. If $D$ had been $2$, person $3$ and $5$ would have also been infected. -----Input----- The first line contains two integers, $1 \\le N \\le 20000$, and $1 \\le D \\le 50000$, the number of people and number of days respectively. The second line contains an integer $1 \\le C \\le N$, the initial number of infected people, followed by $C$ integers, the indices of the infected people. Indices are from $1$ to $N$. The next $N$ lines describe the entry and exit times of the $N$ people, in order from $1$ to $N$. Each line contains two integers, $s_ i$ and $t_ i$, the entry and exit time respectively. $0 \\le s_ i \\le t_ i \\le 10^9$. -----Output----- Print a list of indices of people infected after $D$ days, in ascending order. The indices should be all on one line, separated by a single space. -----Subtasks-----  - ($40$ Points): $N \\le 5000$. $D = 1$, $C = 1$. Initially, only the person with index $1$ is infected.  - ($30$ Points): $N \\le 5000$, $D \\le 5$.  - ($20$ Points): $N \\le 5000$.  - ($10$ Points): No additional constraint. -----Examples----- Sample Input 1: 9 1 1 1 5 10 1 3 11 14 5 5 10 10 3 6 6 12 7 7 4 11 Sample Output 1: 1 4 5 6 7 8 9 Sample Input 2: 5 1 1 1 3 3 2 3 1 2 3 4 4 5 Sample Output 2: 1 2 4 Sample Input 3: 5 1 1 1 3 3 3 3 4 4 4 4 5 5 Sample Output 3: 1 2\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA deadly virus is sweeping across the globe! You are part of an elite group of programmers tasked with tracking the spread of the virus. You have been given the timestamps of people entering and exiting a room. Now your job is to determine how the virus will spread. Hurry up, time is of the essence!\n\nThere are $N$ people in this scenario, numbered from $1$ to $N$. Every day, the $i$th person enters and exits the room at time $s_ i$ and $t_ i$ respectively. At the beginning of the $1$st day, there are $C$ people infected with the virus, whose indices will be given in the input.\n\nWhen an infected person comes into contact with an uninfected person, the uninfected person will become infected at the start of the next day. Hence, they can only start spreading the infection from the next day onward. An infected person will always remain infected.\n\nTwo people are in contact with each other if they are in the room at the same time. This includes cases where one person leaves and another person enters at the exact same time. Also, if a person enters and exits the room at the same time ($s_ i$ = $t_ i$), they are considered to be in contact with everyone in the room at that time. Due to safe-distancing requirements, no more than $50$ people can be in the room at one time.\n\nYour job is to print the indices of the people who will be infected after $D$ days. This includes people who came into contact with an infected person on the $D$th day but will only become infected at the start of the $D+1$th day.\n\nGiven below are the visualizations for sample inputs $1$ and $2$.\n\nNote: In sample $2$, person $2$ and $4$ will get infected after day $1$. They can only spread the infection to person $3$ and $5$ on day $2$. For $D = 1$, the infected people are $1$, $2$, $4$. If $D$ had been $2$, person $3$ and $5$ would have also been infected.\n\n-----Input-----\nThe first line contains two integers, $1 \\le N \\le 20000$, and $1 \\le D \\le 50000$, the number of people and number of days respectively.\n\nThe second line contains an integer $1 \\le C \\le N$, the initial number of infected people, followed by $C$ integers, the indices of the infected people. Indices are from $1$ to $N$.\n\nThe next $N$ lines describe the entry and exit times of the $N$ people, in order from $1$ to $N$. Each line contains two integers, $s_ i$ and $t_ i$, the entry and exit time respectively. $0 \\le s_ i \\le t_ i \\le 10^9$.\n\n-----Output-----\nPrint a list of indices of people infected after $D$ days, in ascending order. The indices should be all on one line, separated by a single space.\n\n-----Subtasks-----\n - ($40$ Points): $N \\le 5000$. $D = 1$, $C = 1$. Initially, only the person with index $1$ is infected.\n - ($30$ Points): $N \\le 5000$, $D \\le 5$.\n - ($20$ Points): $N \\le 5000$.\n - ($10$ Points): No additional constraint.\n\n-----Examples-----\nSample Input 1:\n9 1\n1 1\n5 10\n1 3\n11 14\n5 5\n10 10\n3 6\n6 12\n7 7\n4 11\nSample Output 1:\n1 4 5 6 7 8 9\n\nSample Input 2:\n5 1\n1 1\n3 3\n2 3\n1 2\n3 4\n4 5\nSample Output 2:\n1 2 4\n\nSample Input 3:\n5 1\n1 1\n3 3\n3 3\n4 4\n4 4\n5 5\nSample Output 3:\n1 2\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Gerald is a lazy person. He just stands at the same position of the carousel and waits for bags to pass by so he can pick them up. The baggage carousel consists of $s$ luggage slots, numbered in ascending order from $0$ to $s-1$. Since the baggage carousel is cyclic, luggage slots $s-1$ and $0$ also lie side by side. The carousel turns in such a way that if Gerald stands in front of slot $i$ at some point in time, he will stand in front of slot $(i+1) \\bmod s$ one time unit later. In the beginning Gerald prepares a huge baggage cart at some position and stands there to wait for luggage. When a knapsack arrives in front of Gerald, he needs $t$ time units to take it and put it on the baggage cart. After these $t$ time units he is ready to pick up another knapsack. As long as there are remaining knapsacks on the luggage carousel, Gerald always takes the next one to arrive at his position as soon as he is ready after putting away the previous one. Now Gerald wonders about the effect of his choice of position on the time it will take him to finish this task. It is up to you to help Gerald calculate the minimum, maximum, and average time to pick up all knapsacks, taken over all $s$ possible slots, which can appear in front of Gerald after preparation. Time starts when he has prepared the baggage cart at some slot of the baggage carousel and ends after he has put the last knapsack on the cart. \n-----Input----- The input consists of:  - one line with three integers $n$ ($1\\le n\\le 2000$), $s$ ($1\\le s\\le 10^7$) and $t$ ($1\\le t \\le 10^7$), where $n$ is the number of knapsacks to pick up, $s$ is the number of slots of the carousel, and $t$ is the number of time units Gerald needs to pick up a knapsack from the carousel and put it on the cart;  - one line with $n$ integers $k_1, \\ldots , k_ n$ ($0 \\le k_ i \\le s-1$ for $1 \\le i \\le n$), the slots of the knapsacks. There may be several knapsacks stacked on top of each other in the same slot, but Gerald can still only pick up one knapsack at a time. -----Output----- Output three lines of output containing the minimum, maximum, and average time to pick up all the luggage, over all $s$ positions. The average time should be output as a reduced fraction in the form $p/q$. -----Examples----- Sample Input 1: 7 10 10000000 0 0 0 0 0 0 1 Sample Output 1: 70000001 70000009 350000027/5 Sample Input 2: 10 10 3 0 0 2 2 4 4 6 6 8 8 Sample Output 2: 39 40 79/2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nGerald\u2019s job is to welcome the teams for this year\u2019s NWERC at the airport in Link\u00f6ping. One of his duties is to stand at the luggage carousel and collect all the knapsacks that the teams are bringing. Gerald is a lazy person, so he just stands at the same position of the carousel and waits for bags to pass by so he can pick them up. \n\nThe baggage carousel consists of $s$ luggage slots, numbered in ascending order from $0$ to $s-1$. Since the baggage carousel is cyclic, luggage slots $s-1$ and $0$ also lie side by side. The carousel turns in such a way that if Gerald stands in front of slot $i$ at some point in time, he will stand in front of slot $(i+1) \\bmod s$ one time unit later.\n\nIn the beginning Gerald prepares a huge baggage cart at some position and stands there to wait for luggage. When a knapsack arrives in front of Gerald, he needs $t$ time units to take it and put it on the baggage cart. After these $t$ time units he is ready to pick up another knapsack. As long as there are remaining knapsacks on the luggage carousel, Gerald always takes the next one to arrive at his position as soon as he is ready after putting away the previous one.\n\nNow Gerald wonders about the effect of his choice of position on the time it will take him to finish this task. It is up to you to help Gerald calculate the minimum, maximum, and average time to pick up all knapsacks, taken over all $s$ possible slots, which can appear in front of Gerald after preparation. Time starts when he has prepared the baggage cart at some slot of the baggage carousel and ends after he has put the last knapsack on the cart.\n\n-----Input-----\nThe input consists of:\n - one line with three integers $n$ ($1\\le n\\le 2000$), $s$ ($1\\le s\\le 10^7$) and $t$ ($1\\le t \\le 10^7$), where $n$ is the number of knapsacks to pick up, $s$ is the number of slots of the carousel, and $t$ is the number of time units Gerald needs to pick up a knapsack from the carousel and put it on the cart;\n - one line with $n$ integers $k_1, \\ldots , k_ n$ ($0 \\le k_ i \\le s-1$ for $1 \\le i \\le n$), the slots of the knapsacks.\n\nThere may be several knapsacks stacked on top of each other in the same slot, but Gerald can still only pick up one knapsack at a time.\n\n-----Output-----\nOutput three lines of output containing the minimum, maximum, and average time to pick up all the luggage, over all $s$ positions. The average time should be output as a reduced fraction in the form $p/q$.\n\n-----Examples-----\nSample Input 1:\n7 10 10000000\n0 0 0 0 0 0 1\nSample Output 1:\n70000001\n70000009\n350000027/5\n\nSample Input 2:\n10 10 3\n0 0 2 2 4 4 6 6 8 8\nSample Output 2:\n39\n40\n79/2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Lea makes up new words by writing a nice looking string of characters on a piece of paper. She than erases a few of the most nasty looking characters and replaces them with underscores. After that she tries to replace the underscores with more acceptable characters trying to form a pleasant word. Lea considers words pleasant if they do not contain $3$ sequential vowels, $3$ sequential consonants and contain at least one letter. \n-----Input----- The first and only line of input contains a string of characters, at most $100$. The string contains only of uppercase English letters and \u2018_\u2019 characters. There will be at most $10$ \u2018_\u2019 characters. -----Output----- The first and only line of output should cotain a single integer \u2013 the total number of pleasant words that can be formed by substituting underscores with uppercase letters of the English alphabet. -----Examples----- Sample Input 1: L_V Sample Output 1: 5 Sample Input 2: V__K Sample Output 2: 10\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nLea runs into a lot of words in her life. A lot of them she finds unpleasant. To compensate for that she started making up pleasant words. Lea makes up new words by writing a nice looking string of characters on a piece of paper. She than erases a few of the most nasty looking characters and replaces them with underscores \u2018_\u2019. After that she tries to replace the underscores with more acceptable characters trying to form a pleasant word.\n\nLea considers words pleasant if they do not contain $3$ sequential vowels, $3$ sequential consonants and contain at least one letter \u2018L\u2019.\n\nIn Croatian, the vowels are the letters A, E, I, O, and U only. All other lettters are consonants.\n\n-----Input-----\nThe first and only line of input contains a string of characters, at most $100$. The string contains only of uppercase English letters and \u2018_\u2019 characters. There will be at most $10$ \u2018_\u2019 characters.\n\n-----Output-----\nThe first and only line of output should cotain a single integer \u2013 the total number of pleasant words that can be formed by substituting underscores with uppercase letters of the English alphabet.\n\n-----Examples-----\nSample Input 1:\nL_V\nSample Output 1:\n5\n\nSample Input 2:\nV__K\nSample Output 2:\n10\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You need to execute several tasks, each associated with number of processors it needs, and the compute power it will consume. You have sufficient number of analog computers, each with enough processors for any task. Each computer can execute up to one task at a time, and no more than two tasks total. The first task can be any, the second task on each computer must use strictly less power than the first. You will assign between 1 and 2 tasks to each computer. You will then first execute the first task on each computer, wait for all of them to complete, and then execute the second task on each computer that has two tasks assigned. If the average compute power per utilized processor (the sum of all consumed powers for all tasks presently running divided by the number of utilized processors) across all computers exceeds some unknown threshold during the execution of the first tasks, the entire system will blow up. There is no restriction on the second tasks execution. Find the lowest threshold for which it is possible. Due to the specifics of the task, you need to print the answer multiplied by 1000 and rounded up. \n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 50) \u2014 the number of tasks. The second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^8), where a_{i} represents the amount of power required for the i-th task. The third line contains n integers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 100), where b_{i} is the number of processors that i-th task will utilize. -----Output----- Print a single integer value \u2014 the lowest threshold for which it is possible to assign all tasks in such a way that the system will not blow up after the first round of computation, multiplied by 1000 and rounded up. -----Examples----- Input 6 8 10 9 9 8 10 1 1 1 1 1 1 Output 9000 Input 6 8 10 9 9 8 10 1 10 5 5 1 10 Output 1160 -----Note----- In the first example the best strategy is to run each task on a separate computer, getting average compute per processor during the first round equal to 9. In the second task it is best to run tasks with compute 10 and 9 on one computer, tasks with compute 10 and 8 on another, and tasks with compute 9 and 8 on the last, averaging (10 + 10 + 9) / (10 + 10 + 5) = 1.16 compute power per processor during the first round.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou need to execute several tasks, each associated with number of processors it needs, and the compute power it will consume.\n\nYou have sufficient number of analog computers, each with enough processors for any task. Each computer can execute up to one task at a time, and no more than two tasks total. The first task can be any, the second task on each computer must use strictly less power than the first. You will assign between 1 and 2 tasks to each computer. You will then first execute the first task on each computer, wait for all of them to complete, and then execute the second task on each computer that has two tasks assigned.\n\nIf the average compute power per utilized processor (the sum of all consumed powers for all tasks presently running divided by the number of utilized processors) across all computers exceeds some unknown threshold during the execution of the first tasks, the entire system will blow up. There is no restriction on the second tasks execution. Find the lowest threshold for which it is possible.\n\nDue to the specifics of the task, you need to print the answer multiplied by 1000 and rounded up.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 50) \u2014 the number of tasks.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^8), where a_{i} represents the amount of power required for the i-th task.\n\nThe third line contains n integers b_1, b_2, ..., b_{n} (1 \u2264 b_{i} \u2264 100), where b_{i} is the number of processors that i-th task will utilize.\n\n\n-----Output-----\n\nPrint a single integer value \u2014 the lowest threshold for which it is possible to assign all tasks in such a way that the system will not blow up after the first round of computation, multiplied by 1000 and rounded up.\n\n\n-----Examples-----\nInput\n6\n8 10 9 9 8 10\n1 1 1 1 1 1\n\nOutput\n9000\n\nInput\n6\n8 10 9 9 8 10\n1 10 5 5 1 10\n\nOutput\n1160\n\n\n\n-----Note-----\n\nIn the first example the best strategy is to run each task on a separate computer, getting average compute per processor during the first round equal to 9.\n\nIn the second task it is best to run tasks with compute 10 and 9 on one computer, tasks with compute 10 and 8 on another, and tasks with compute 9 and 8 on the last, averaging (10 + 10 + 9) / (10 + 10 + 5) = 1.16 compute power per processor during the first round.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Write a function isBFS(sequence, tree) that returns True if the sequence is a valid BFS traversal of the given tree starting from vertex 1. \n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) which denotes the number of nodes in the tree.  The following $n - 1$ lines describe the edges of the tree. Each of them contains two integers $x$ and $y$ ($1 \\le x, y \\le n$)\u00a0\u2014 the endpoints of the corresponding edge of the tree. It is guaranteed that the given graph is a tree. The last line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the sequence to check. -----Output----- Print \"Yes\" (quotes for clarity) if the sequence corresponds to some valid BFS traversal of the given tree and \"No\" (quotes for clarity) otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input 4 1 2 1 3 2 4 1 2 3 4 Output Yes Input 4 1 2 1 3 2 4 1 2 4 3 Output No -----Note----- Both sample tests have the same tree in them. In this tree, there are two valid BFS orderings:   $1, 2, 3, 4$,  $1, 3, 2, 4$.  The ordering $1, 2, 4, 3$ doesn't correspond to any valid BFS order.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe BFS algorithm is defined as follows.  Consider an undirected graph with vertices numbered from $1$ to $n$. Initialize $q$ as a new queue containing only vertex $1$, mark the vertex $1$ as used.  Extract a vertex $v$ from the head of the queue $q$.  Print the index of vertex $v$.  Iterate in arbitrary order through all such vertices $u$ that $u$ is a neighbor of $v$ and is not marked yet as used. Mark the vertex $u$ as used and insert it into the tail of the queue $q$.  If the queue is not empty, continue from step 2.  Otherwise finish. \n\nSince the order of choosing neighbors of each vertex can vary, it turns out that there may be multiple sequences which BFS can print.\n\nIn this problem you need to check whether a given sequence corresponds to some valid BFS traversal of the given tree starting from vertex $1$. The tree is an undirected graph, such that there is exactly one simple path between any two vertices.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) which denotes the number of nodes in the tree. \n\nThe following $n - 1$ lines describe the edges of the tree. Each of them contains two integers $x$ and $y$ ($1 \\le x, y \\le n$)\u00a0\u2014 the endpoints of the corresponding edge of the tree. It is guaranteed that the given graph is a tree.\n\nThe last line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the sequence to check.\n\n\n-----Output-----\n\nPrint \"Yes\" (quotes for clarity) if the sequence corresponds to some valid BFS traversal of the given tree and \"No\" (quotes for clarity) otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4\n1 2\n1 3\n2 4\n1 2 3 4\n\nOutput\nYes\nInput\n4\n1 2\n1 3\n2 4\n1 2 4 3\n\nOutput\nNo\n\n\n-----Note-----\n\nBoth sample tests have the same tree in them.\n\nIn this tree, there are two valid BFS orderings:   $1, 2, 3, 4$,  $1, 3, 2, 4$. \n\nThe ordering $1, 2, 4, 3$ doesn't correspond to any valid BFS order.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Your boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don t panic, you don t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you re not sure which song  Ook!  is supposed to refer to) so you can t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best.  At first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf s Law. Zipf s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$ th most common object (in this case, a song) should be proportional to $1/i$. To illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\n-----Input----- The first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le m \\le n$), the number of songs on the album, and the number of songs to select. Then follow $n$ lines. The $i$\u2019th of these lines contains an integer $f_ i$ and string $s_ i$, where $0 \\le f_ i \\le 10^{12}$ is the number of times the $i$\u2019th song was listened to, and $s_ i$ is the name of the song. Each song name is at most $30$ characters long and consists only of the characters \u2018a\u2019-\u2018z\u2019, \u20180\u2019-\u20189\u2019, and underscore (\u2018_\u2019). -----Output----- Output a list of the $m$ songs with the highest quality $q_ i$, in decreasing order of quality. If two songs have the same quality, give precedence to the one appearing first on the album (presumably there was a reason for the producers to put that song before the other). -----Examples----- Sample Input: 4 2 30 one 30 two 15 three 25 four Sample Output: four two\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYour slightly pointy-bearded boss has assigned you to write software to find the best songs from different music albums. And the software should be finished in an hour. But don\u2019t panic, you don\u2019t have to solve the problem of writing an AI with good taste. At your disposal is the impeccable taste of a vast horde of long-tailed monkeys. Well, at least almost. The monkeys are not very communicative (or rather, you\u2019re not sure which song \u201cOok!\u201d is supposed to refer to) so you can\u2019t ask them which songs are the best. What you can do however is to look at which songs the monkeys have listened to and use this information to deduce which songs are the best. \n\nAt first, you figure that the most listened to songs must be the best songs. However, you quickly realize that this approach is flawed. Even if all songs of the album are equally good, the early songs are more likely to be listened to more often than the later ones, because monkeys will tend to start listening to the first song, listen for a few songs and then, when their fickle ears start craving something else, stop listening. Instead, if all songs are equal, you expect that their play frequencies should follow Zipf\u2019s Law.\n\nZipf\u2019s Law is an empirical law originally formulated about word frequencies in natural languages, but it has been observed that many natural phenomena, such as population sizes and incomes, approximately follow the same law. It predicts that the relative frequency of the $i$\u2019th most common object (in this case, a song) should be proportional to $1/i$.\n\nTo illustrate this in our setting, suppose we have an album where all songs are equally good. Then by Zipf\u2019s Law, you expect that the first song is listened to twice as often as the second song, and more generally that the first song is listened to $i$ times as often as the $i$\u2019th song. When some songs are better than others, those will be listened to more often than predicted by Zipf\u2019s Law, and those are the songs your program should select as the good songs. Specifically, suppose that song $i$ has been played $f_ i$ times but that Zipf\u2019s Law predicts that it would have been played $z_ i$ times. Then you define the quality of song $i$ to be $q_ i = f_ i/z_ i$. Your software should select the songs with the highest values of $q_ i$.\n\n-----Input-----\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 50000$, $1 \\le m \\le n$), the number of songs on the album, and the number of songs to select. Then follow $n$ lines. The $i$\u2019th of these lines contains an integer $f_ i$ and string $s_ i$, where $0 \\le f_ i \\le 10^{12}$ is the number of times the $i$\u2019th song was listened to, and $s_ i$ is the name of the song. Each song name is at most $30$ characters long and consists only of the characters \u2018a\u2019-\u2018z\u2019, \u20180\u2019-\u20189\u2019, and underscore (\u2018_\u2019).\n\n-----Output-----\nOutput a list of the $m$ songs with the highest quality $q_ i$, in decreasing order of quality. If two songs have the same quality, give precedence to the one appearing first on the album (presumably there was a reason for the producers to put that song before the other).\n\n-----Examples-----\nSample Input:\n4 2\n30 one\n30 two\n15 three\n25 four\nSample Output:\nfour\ntwo\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are locked in a room with a door that has a keypad with 10 keys corresponding to digits from 0 to 9. To escape from the room, you need to enter a correct code. You also have a sequence of digits. Some keys on the keypad have fingerprints. You believe the correct code is the longest not necessarily contiguous subsequence of the sequence you have that only contains digits with fingerprints on the corresponding keys. Find such code. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 10$) representing the number of digits in the sequence you have and the number of keys on the keypad that have fingerprints. The next line contains $n$ distinct space-separated integers $x_1, x_2, \\ldots, x_n$ ($0 \\le x_i \\le 9$) representing the sequence. The next line contains $m$ distinct space-separated integers $y_1, y_2, \\ldots, y_m$ ($0 \\le y_i \\le 9$) \u2014 the keys with fingerprints. -----Output----- In a single line print a space-separated sequence of integers representing the code. If the resulting sequence is empty, both printing nothing and printing a single line break is acceptable. -----Examples----- Input 7 3 3 5 7 1 6 2 8 1 2 7 Output 7 1 2 Input 4 4 3 4 1 0 0 1 7 9 Output 1 0 -----Note----- In the first example, the only digits with fingerprints are $1$, $2$ and $7$. All three of them appear in the sequence you know, $7$ first, then $1$ and then $2$. Therefore the output is 7 1 2. Note that the order is important, and shall be the same as the order in the original sequence. In the second example digits $0$, $1$, $7$ and $9$ have fingerprints, however only $0$ and $1$ appear in the original sequence. $1$ appears earlier, so the output is 1 0. Again, the order is important.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are locked in a room with a door that has a keypad with 10 keys corresponding to digits from 0 to 9. To escape from the room, you need to enter a correct code. You also have a sequence of digits.\n\nSome keys on the keypad have fingerprints. You believe the correct code is the longest not necessarily contiguous subsequence of the sequence you have that only contains digits with fingerprints on the corresponding keys. Find such code.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 10$) representing the number of digits in the sequence you have and the number of keys on the keypad that have fingerprints.\n\nThe next line contains $n$ distinct space-separated integers $x_1, x_2, \\ldots, x_n$ ($0 \\le x_i \\le 9$) representing the sequence.\n\nThe next line contains $m$ distinct space-separated integers $y_1, y_2, \\ldots, y_m$ ($0 \\le y_i \\le 9$) \u2014 the keys with fingerprints.\n\n\n-----Output-----\n\nIn a single line print a space-separated sequence of integers representing the code. If the resulting sequence is empty, both printing nothing and printing a single line break is acceptable.\n\n\n-----Examples-----\nInput\n7 3\n3 5 7 1 6 2 8\n1 2 7\n\nOutput\n7 1 2\n\nInput\n4 4\n3 4 1 0\n0 1 7 9\n\nOutput\n1 0\n\n\n\n-----Note-----\n\nIn the first example, the only digits with fingerprints are $1$, $2$ and $7$. All three of them appear in the sequence you know, $7$ first, then $1$ and then $2$. Therefore the output is 7 1 2. Note that the order is important, and shall be the same as the order in the original sequence.\n\nIn the second example digits $0$, $1$, $7$ and $9$ have fingerprints, however only $0$ and $1$ appear in the original sequence. $1$ appears earlier, so the output is 1 0. Again, the order is important.\n\"\"\"\ndef code():"
}