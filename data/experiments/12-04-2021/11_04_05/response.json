{
    "id": "cmpl-4BTg2Zng70b6E8cJN77CLfFrcy3AA",
    "object": "text_completion",
    "created": 1638641034,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n = int(input())\n    for i in range(n):\n        a = list(map(int, input().split()))\n        k = a[1]\n        a = a[2:]\n        if len(a) == 1:\n            print(\"yes\")\n        else:\n            if len(a) % 2 == 0:\n                if k < a[len(a)//2]:\n                    print(\"yes\")\n                else:\n                    print(\"no\")\n            else:\n                if k < a[len(a)//2]:\n                    print(\"no\")\n                else:\n                    print(\"yes\")\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        if n == 1:\n            print(\"yes\")\n        else:\n            if k == a[0]:\n                print(\"yes\")\n            else:\n                print(\"no\")\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    if p in a:\n        print(0)\n        return\n    if p in b:\n        print(1)\n        return\n    if p > a[-1]:\n        print(p - a[-1])\n        return\n    if p < a[0]:\n        print(a[0] - p)\n        return\n    if p > b[-1]:\n        print(p - b[-1])\n        return\n    if p < b[0]:\n        print(b[0] - p)\n        return\n    for i in range(n):\n        if a[i] < p < a[i+1]:\n            print(a[i+1] - p)\n            return\n    for i in range(k):\n        if b[i] < p < b[i+1]:\n            print(b[i+1] - p)\n            return\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k, p = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        a, b = b, a\n    time = 0\n    i = 0\n    j = 0\n    while i < n and j < k:\n        if a[i] < b[j]:\n            time += a[i] - b[j]\n            i += 1\n            j += 1\n        else:\n            time += p - b[j]\n            j += 1\n    if i < n:\n        time += a[i] - b[j]\n    print(time)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    n = len(s)\n    count = [0]*(n-1)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if s[i] == 'B' and s[j] == 'A' and j-i == i+1:\n                count[i] += 1\n    for i in range(n-1):\n        print(count[i])\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    n = len(s)\n    count = [0]*(n-1)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if s[i] == 'B' and s[j] == 'A' and j-i == i+1:\n                count[i] += 1\n    for i in range(n-1):\n        print(count[i])\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, d = map(int, input().split())\n    c = int(input())\n    infected = set(map(int, input().split()))\n    for i in range(c):\n        infected.add(i+1)\n    for i in range(n):\n        s, t = map(int, input().split())\n        if s <= d <= t:\n            infected.add(i+1)\n    print(*sorted(infected))\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, d = map(int, input().split())\n    c = int(input())\n    infected = list(map(int, input().split()))\n    infected = [i-1 for i in infected]\n    times = []\n    for i in range(n):\n        times.append(list(map(int, input().split())))\n    for i in range(n):\n        if i not in infected:\n            for j in range(n):\n                if j in infected:\n                    if times[i][0] >= times[j][0] and times[i][0] <= times[j][1]:\n                        if times[i][1] >= times[j][0] and times[i][1] <= times[j][1]:\n                            infected.append(i)\n                            break\n                        elif times[i][1] > times[j][1]:\n                            infected.append(i)\n                            break\n    infected = sorted(infected)\n    print(*infected)\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, s, t = [int(x) for x in input().split()]\n    knapsacks = [int(x) for x in input().split()]\n    time = [0] * s\n    for i in range(n):\n        time[knapsacks[i]] += t\n    print(min(time), max(time), sum(time) // s)\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, s, t = [int(x) for x in input().split()]\n    k = [int(x) for x in input().split()]\n    k.sort()\n    k.append(k[0])\n    time = 0\n    for i in range(n):\n        time += k[i+1] - k[i]\n    time += t\n    time += s - k[n]\n    print(time)\n    print(time + t)\n    print(time + t + s - k[n])\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    word = input()\n    vowels = \"AEIOU\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            if i == 0:\n                if word[i+1] in vowels:\n                    count += 1\n                elif word[i+1] in consonants:\n                    count += 1\n            elif i == len(word)-1:\n                if word[i-1] in vowels:\n                    count += 1\n                elif word[i-1] in consonants:\n                    count += 1\n            else:\n                if word[i-1] in vowels and word[i+1] in vowels:\n                    count += 1\n                elif word[i-1] in consonants and word[i+1] in consonants:\n                    count += 1\n    print(count)\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        b[0] = a[0]\n    for i in range(1, n):\n        if a[i] > b[i]:\n            b[i] = a[i]\n        if b[i] > b[i - 1]:\n            b[i] = b[i - 1]\n    print(sum(b) * 1000)\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        print(a[0] * 1000)\n    else:\n        print(b[0] * 1000)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    tree = {}\n    for i in range(n-1):\n        x, y = map(int, input().split())\n        if x not in tree:\n            tree[x] = [y]\n        else:\n            tree[x].append(y)\n        if y not in tree:\n            tree[y] = [x]\n        else:\n            tree[y].append(x)\n    sequence = list(map(int, input().split()))\n    if len(sequence) != n:\n        print(\"No\")\n        return\n    if sequence[0] != 1:\n        print(\"No\")\n        return\n    if len(tree[1]) != 1:\n        print(\"No\")\n        return\n    visited = [False] * n\n    visited[1] = True\n    queue = [1]\n    while queue:\n        cur = queue.pop(0)\n        for i in tree[cur]:\n            if not visited[i]:\n                visited[i] = True\n                queue.append(i)\n    for i in sequence:\n        if not visited[i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    adj = [[] for _ in range(n)]\n    for _ in range(n-1):\n        x, y = map(int, input().split())\n        adj[x-1].append(y-1)\n        adj[y-1].append(x-1)\n    seq = list(map(int, input().split()))\n    if len(seq) != n:\n        print(\"No\")\n        return\n    used = [False] * n\n    q = [0]\n    used[0] = True\n    while q:\n        v = q.pop(0)\n        for u in adj[v]:\n            if not used[u]:\n                used[u] = True\n                q.append(u)\n    for i in range(n):\n        if not used[i]:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    songs = []\n    for i in range(n):\n        f, s = input().split()\n        songs.append((int(f), s))\n    songs.sort(reverse=True)\n    songs = songs[:m]\n    songs.sort(key=lambda x: x[1])\n    for f, s in songs:\n        print(s)\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    songs = []\n    for i in range(n):\n        f, s = input().split()\n        songs.append((int(f), s))\n    songs.sort(reverse=True)\n    q = []\n    for i in range(n):\n        z = songs[i][0] / sum(songs[j][0] for j in range(i + 1))\n        q.append((songs[i][0] / z, songs[i][1]))\n    q.sort(reverse=True)\n    for i in range(m):\n        print(q[i][1])\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    fp = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if seq[i] in d:\n            d[seq[i]].append(i)\n        else:\n            d[seq[i]] = [i]\n    ans = []\n    for i in range(m):\n        if fp[i] in d:\n            ans.append(d[fp[i]][-1])\n    print(*ans)\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    seq = list(map(int, input().split()))\n    fp = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if seq[i] in fp:\n            if seq[i] in d:\n                d[seq[i]] += 1\n            else:\n                d[seq[i]] = 1\n    l = []\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    l.reverse()\n    ans = []\n    for i in l:\n        for j in d:\n            if d[j] == i:\n                ans.append(j)\n    print(*ans)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}