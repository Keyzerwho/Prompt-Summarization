{
    "0": "Python 3\n\"\"\"\n Dominik was stopped by the police. He had to solve a series of tasks to prove his sobriety. Write a programme that solves Dominik s problem. \n-----Input----- The first line of input contains the integer $Q$ ($1 \\leq Q \\leq 100000$), the number of policeman\u2019s orders. Each of the following $Q$ lines contains one of the policeman\u2019s order in the form of \u201cSMJER $n$\u201d (Croatian for direction) or \u201cUPIT$n$ $x$\u201d (Croatian for query). The order in the form \u201cSMJER $n$\u201d means that, after the nth spoken letter, Dominik must start saying the alphabet in reverse, whereas the order in the form \u201cUPIT$n$ $x$\u201d means that Dominik must say how many times so far he\u2019s said the letter $x$ in the first $n$ spoken letters. The policeman\u2019s order will be given chronologically in the input, or, the numbers $n$ ($1 \\leq n \\leq 10^9 $) from the orders will be strictly ascending. The character $x$ from the order in the form of \u201cUPIT $n$ $x$\u201d is a lowercase letter of the English alphabet. -----Output----- For each order in the form of \u201cUPIT $n$$x$\u201d, output how many times Dominik has said the letter $x$ in the first $n$ spoken letters. The answer to each query needs to be written in a separate line, and the queries need to be answered in the order given in the input. -----Examples----- Sample Input 1: 5 UPIT 1 b UPIT 3 b SMJER 4 UPIT 7 a UPIT 10 z Sample Output 1: 0 1 2 1 Sample Input 2: 5 SMJER 1 SMJER 2 SMJER 3 UPIT 5 a UPIT 7 w Sample Output 2: 2 1\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nHan didn\u2019t want to study solo so he invited his friend Dominik to come over. After an eventful evening that will be remembered for a record number of solved tasks from the field of electronics, Dominik went home. To his surprise, the police stopped him thinking he was drunk. It is known that in these situations sobriety is proven by solving a series of carefully crafted tasks that test a man\u2019s cognitive abilities. If we can trust Dominik, the conversation went something like this:Policeman\n\nSomething easy to begin with\u2026\u00a0What is the complexity of bubble sort?Dominik\n\nThat is really easy, $\\mathrm{O}(n^2)$.Policeman\n\nSay the English alphabet in reverse.Dominik\n\nTrivial, zyxwvutsrqponmlkjihgfedcba.Policeman\n\nYou learned that by heart. Now imagine that all the letters of the English alphabet from \u2018a\u2019 to \u2018z\u2019 are respectively written clockwise in a circle. Begin with the letter \u2018a\u2019 and say the letters clockwise. After each spoken letter, I can tell you to continue saying the alphabet in reverse order or I can ask you how many times so far you\u2019ve said a certain letter. Are you ready? 3, 2, 1, Go!Dominik\n\nUm\u2026\u00a0a, b, c\u2026\n\nWrite a programme that solves Dominik\u2019s problem.\n\n-----Input-----\nThe first line of input contains the integer $Q$ ($1 \\leq Q \\leq 100000$), the number of policeman\u2019s orders. Each of the following $Q$ lines contains one of the policeman\u2019s order in the form of \u201cSMJER $n$\u201d (Croatian for direction) or \u201cUPIT$n$ $x$\u201d (Croatian for query). The order in the form \u201cSMJER $n$\u201d means that, after the nth spoken letter, Dominik must start saying the alphabet in reverse, whereas the order in the form \u201cUPIT$n$ $x$\u201d means that Dominik must say how many times so far he\u2019s said the letter $x$ in the first $n$ spoken letters.\n\nThe policeman\u2019s order will be given chronologically in the input, or, the numbers $n$ ($1 \\leq n \\leq 10^9 $) from the orders will be strictly ascending. The character $x$ from the order in the form of \u201cUPIT $n$ $x$\u201d is a lowercase letter of the English alphabet.\n\n-----Output-----\nFor each order in the form of \u201cUPIT $n$$x$\u201d, output how many times Dominik has said the letter $x$ in the first $n$ spoken letters. The answer to each query needs to be written in a separate line, and the queries need to be answered in the order given in the input.\n\n-----Examples-----\nSample Input 1:\n5\nUPIT 1 b\nUPIT 3 b\nSMJER 4\nUPIT 7 a\nUPIT 10 z\nSample Output 1:\n0\n1\n2\n1\n\nSample Input 2:\n5\nSMJER 1\nSMJER 2\nSMJER 3\nUPIT 5 a\nUPIT 7 w\nSample Output 2:\n2\n1\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is x^{k}. Output the sum of costs over all non-empty subsets of people. \n-----Input----- Only line of input contains two integers N (1 \u2264 N \u2264 10^9) representing total number of people and k (1 \u2264 k \u2264 5000). -----Output----- Output the sum of costs for all non empty subsets modulo 10^9 + 7. -----Examples----- Input 1 1 Output 1 Input 3 2 Output 24 -----Note----- In the first example, there is only one non-empty subset {1} with cost 1^1 = 1. In the second example, there are seven non-empty subsets. - {1} with cost 1^2 = 1 - {2} with cost 1^2 = 1 - {1, 2} with cost 2^2 = 4 - {3} with cost 1^2 = 1 - {1, 3} with cost 2^2 = 4 - {2, 3} with cost 2^2 = 4 - {1, 2, 3} with cost 3^2 = 9 The total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou have a team of N people. For a particular task, you can pick any non-empty subset of people. The cost of having x people for the task is x^{k}. \n\nOutput the sum of costs over all non-empty subsets of people.\n\n\n-----Input-----\n\nOnly line of input contains two integers N (1 \u2264 N \u2264 10^9) representing total number of people and k (1 \u2264 k \u2264 5000).\n\n\n-----Output-----\n\nOutput the sum of costs for all non empty subsets modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n24\n\n\n\n-----Note-----\n\nIn the first example, there is only one non-empty subset {1} with cost 1^1 = 1.\n\nIn the second example, there are seven non-empty subsets.\n\n- {1} with cost 1^2 = 1\n\n- {2} with cost 1^2 = 1\n\n- {1, 2} with cost 2^2 = 4\n\n- {3} with cost 1^2 = 1\n\n- {1, 3} with cost 2^2 = 4\n\n- {2, 3} with cost 2^2 = 4\n\n- {1, 2, 3} with cost 3^2 = 9\n\nThe total cost is 1 + 1 + 4 + 1 + 4 + 4 + 9 = 24.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are playing a game in which a group of players take turns saying animal names. The animal name you say when it is your turn must start with the same letter as the previously said animal ends with and it must not have been said previously in this round of the game. If there is no valid name or you cannot come up with one you are eliminated.  Given the last animal name said before your turn and a list of all names not yet used, can you make it through this turn  If so, can you make sure to eliminate the next player \n-----Input----- The first line of input contains a single word, the animal that the previous player just said. The next line contains a single integer $n$ ($0 \\le n \\leq 10^5$), the number of valid unused animal names. Each of the following $n$ lines contains one valid unused animal name. All animal names (including the one the previous player said) are unique and consist of at least $1$ and at most $20$ lower case letters \u2018a\u2019-\u2018z\u2019. -----Output----- If there is any animal name you can play that eliminates the next player, output the first such name from the input list, followed by an exclamation mark. Otherwise, if there is any animal name that you can play, output the first such name. Otherwise, output a question mark (in this case you will just have to make up a fake name in the hope that the others will trust you that this is a real animal). -----Examples----- Sample Input 1: pig 2 goat toad Sample Output 1: goat Sample Input 2: dog 2 snake emu Sample Output 2: ?\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are playing a game in which a group of players take turns saying animal names. The animal name you say when it is your turn must start with the same letter as the previously said animal ends with and it must not have been said previously in this round of the game. If there is no valid name or you cannot come up with one you are eliminated. \n\nGiven the last animal name said before your turn and a list of all names not yet used, can you make it through this turn? If so, can you make sure to eliminate the next player?\n\n-----Input-----\nThe first line of input contains a single word, the animal that the previous player just said. The next line contains a single integer $n$ ($0 \\le n \\leq 10^5$), the number of valid unused animal names. Each of the following $n$ lines contains one valid unused animal name.\n\nAll animal names (including the one the previous player said) are unique and consist of at least $1$ and at most $20$ lower case letters \u2018a\u2019-\u2018z\u2019.\n\n-----Output-----\nIf there is any animal name you can play that eliminates the next player, output the first such name from the input list, followed by an exclamation mark. Otherwise, if there is any animal name that you can play, output the first such name. Otherwise, output a question mark (in this case you will just have to make up a fake name in the hope that the others will trust you that this is a real animal).\n\n-----Examples-----\nSample Input 1:\npig\n2\ngoat\ntoad\nSample Output 1:\ngoat\n\nSample Input 2:\ndog\n2\nsnake\nemu\nSample Output 2:\n?\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n In a game of American Football, there are several factors to take into consideration when detailing the rules of the game. The goal of the game is to move the football across the field into the endzone of the defending team through a series of plays, which form a drive. In each play, the attacking team may either gain or lose a number of yards, that is, their position on the field moves either towards or away from the defending team s endzone. In the simplified version of football that we consider, a team has four chances (in up to four plays) to advance the ball $10$ yards downfield; if they are successful, they will have achieved a \n-----Input----- The input starts of a line containing one integer $N$ ($1 \\le N \\le 15$), which is the number of plays that this given drive recorded. Following this line are $N$ integers representing the numbers of yards gained or lost on each particular play. Each given number is between $-100$ and $100$ yards (exclusive range) since that is the length of the football field. -----Output----- Output a single word, the result of the drive! If a touchdown is achieved, output \u201cTouchdown\u201d, if a safety is achieved, output \u201cSafety\u201d, else output \u201cNothing\u201d. (Do not add a period at the end.) Once the outcome has been determined, your program should ignore any remaining yards listed in the drive. -----Examples----- Sample Input: 9 10 3 8 22 -4 16 8 3 14 Sample Output: Touchdown\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIn a game of American Football, there are several factors to take into consideration when detailing the rules of the game. The goal of the game is to move the football across the field into the endzone of the defending team through a series of plays, which form a drive. In each play, the attacking team may either gain or lose a number of yards, that is, their position on the field moves either towards or away from the defending team\u2019s endzone.\n\nIn the simplified version of football that we consider, a team has four chances (in up to four plays) to advance the ball $10$ yards downfield; if they are successful, they will have achieved a \u201cfirst down\u201d and keep possession of the ball. If they achieve a first down, they have another up to four plays to continue their drive towards the defending team\u2019s endzone. If they keep possession and reach the defending team\u2019s endzone, they will have achieved a Touchdown. If they are pushed back into their own endzone, a Safety occurs and ends the drive. Otherwise the team loses possession of the ball and Nothing happens.\n\nSadly, the outcome of a drive has been lost, and all that remains is the yards gained or lost on each play! Your job is to determine whether a Touchdown, Safety, or Nothing occurred on the given drive.\n\nFor simplicity, we assume that the team starts the drive on their own $20$ yard line on a $100$ yard field (with $0$ being the team\u2019s own endzone, and $100$ being the defending team\u2019s endzone). This means that a touchdown is scored if at least $80$ yards are gained in total, relative to the starting position, and without losing possession due to failing to get a first down. Note that it is possible for a team to score a Touchdown without getting a first down. A safety occurs if the team is pushed back $20$ yards from their original starting position, which would place them in their own endzone. Nothing occurs if neither of these events occurs.\n\n-----Input-----\nThe input starts of a line containing one integer $N$ ($1 \\le N \\le 15$), which is the number of plays that this given drive recorded. Following this line are $N$ integers representing the numbers of yards gained or lost on each particular play. Each given number is between $-100$ and $100$ yards (exclusive range) since that is the length of the football field.\n\n-----Output-----\nOutput a single word, the result of the drive! If a touchdown is achieved, output \u201cTouchdown\u201d, if a safety is achieved, output \u201cSafety\u201d, else output \u201cNothing\u201d. (Do not add a period at the end.) Once the outcome has been determined, your program should ignore any remaining yards listed in the drive.\n\n-----Examples-----\nSample Input:\n9\n10 3 8 22 -4 16 8 3 14\nSample Output:\nTouchdown\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Two cars are driving along the real line in the positive direction. A transcript of their speed changes is given. Did these cars ever collide\n-----Input----- There is only one test case. The first line contains two integers $0 \\leq X_1, X_2 \\leq 10^6$ indicating the initial positions of the rears of the two vehicles in meters. You are guaranteed either $X_1 + 5 \\leq X_2$ or $X_2 + 5 \\leq X_1$. Initially (at time $0$), the two cars are stopped. The second line begins with a number $0 \\leq N_1 \\leq 10^5$ indicating the number of times the speed of the first car changed. The rest of the line contains $N_1$ integers $0 < T_1 < T_2 < \\ldots < T_{n_1} \\leq 10^6$ indicating the times (in seconds) the first vehicle changed speeds. So at time $T_1$ it begins driving at $1$ m/s, at time $T_2$ it stops, at time $T_3$ it begins driving at $1$ m/s, and so on. The last line begins with a number $0 \\leq N_2 \\leq 10^5$ and is followed by $N_2$ integers $0 < T\u2019_1 < T\u2019_2 < \\ldots < T\u2019_{n_2} \\leq 10^6$ that describe the times the second vehicle starts and stops. -----Output----- If the vehicles collide, output the message bumper tap at time $S$ on a single line where $S$ is the number of seconds from time $0$ that the vehicles first collide, rounded up to the nearest second. If the vehicles do not collide, output the message safe and sound on a single line. -----Examples----- Sample Input 1: 0 5 3 1 4 5 3 1 4 6 Sample Output 1: bumper tap at time 6 Sample Input 2: 10 0 2 1 2 1 1 Sample Output 2: bumper tap at time 8\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nIt\u2019s the slow crawl of rush hour. At any point of time, each vehicle is either stopped or is moving at the extremely slow speed of $1$ meter per second. Lately, vehicles come equipped with a simple \u201cblack box\u201d that record all changes in a vehicle\u2019s speed. In this problem, speeds change instantaneously. \n\nThe road is modelled as the real line (units in meters). So a car is identified with its position on the line. Also, cars are $4.4$ meters long.\n\nGiven initial positions of two cars that are driving along the real line in the positive direction and a transcript of their speed changes, did these cars ever collide? While such a collision would be very slow speed (a \u201cbumper tap\u201d), any collision could result in erroneous readings from the black box in the future so the portions of the transcripts after a collision might not make sense.\n\n-----Input-----\nThere is only one test case. The first line contains two integers $0 \\leq X_1, X_2 \\leq 10^6$ indicating the initial positions of the rears of the two vehicles in meters. You are guaranteed either $X_1 + 5 \\leq X_2$ or $X_2 + 5 \\leq X_1$. Initially (at time $0$), the two cars are stopped.\n\nThe second line begins with a number $0 \\leq N_1 \\leq 10^5$ indicating the number of times the speed of the first car changed. The rest of the line contains $N_1$ integers $0 < T_1 < T_2 < \\ldots < T_{n_1} \\leq 10^6$ indicating the times (in seconds) the first vehicle changed speeds. So at time $T_1$ it begins driving at $1$ m/s, at time $T_2$ it stops, at time $T_3$ it begins driving at $1$ m/s, and so on.\n\nThe last line begins with a number $0 \\leq N_2 \\leq 10^5$ and is followed by $N_2$ integers $0 < T\u2019_1 < T\u2019_2 < \\ldots < T\u2019_{n_2} \\leq 10^6$ that describe the times the second vehicle starts and stops.\n\n-----Output-----\nIf the vehicles collide, output the message bumper tap at time $S$ on a single line where $S$ is the number of seconds from time $0$ that the vehicles first collide, rounded up to the nearest second. If the vehicles do not collide, output the message safe and sound on a single line.\n\n-----Examples-----\nSample Input 1:\n0 5\n3 1 4 5\n3 1 4 6\nSample Output 1:\nbumper tap at time 6\n\nSample Input 2:\n10 0\n2 1 2\n1 1\nSample Output 2:\nbumper tap at time 8\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Ash and his Pokemon Pikachu are going on a journey. Ash has planned his route for the journey so that it passes through N cities, numbered 1, 2,  , N, and in this order. When they set out, Pikachu has an initial strength of Sin as well as an experience value (XV) of 0. As they travel they may increase his strength and experience value in a manner to be described below. In each city, Ash can choose either to train Pikachu or let Pikachu battle the Gym-leader (but not both). The Gym-leader in ith city has experience E[i]. If Pikachu enters a city i with strength S and decides to train, then this increases his strength by the cube of the sum of the digits in his current strength. For example, if he entered a city with a strength of 12, then training will increase his strength to 12 + (1+2)3 = 39. On the other hand, if he enters city i with strength S and battles the Gym-leader, then this increases his experience value XV by S*E[i]. Ash wants your help to find out the maximum XV that Pikachu can attain at the end of his journey.\n-----Input----- - The first line contains two space separated integers, N and Sin, which are the number of cities, and the initial strength, respectively. - The second line contains N space separated integers, which correspond to E[1], E[2],..., E[N]. -----Output----- - A single integer which is the maximum XV that Pikachu can attain. -----Constraints----- For all test cases you may assume that:  - 1 \u2264 N \u2264 5000 - 0 \u2264 Sin \u2264 109 - 0 \u2264 E[i] \u2264 104 Subtask 1: For 10% of the score, - N \u2264 20 and Sin = 1 Subtask 2: For further 40% of the score, - E[i] = k for all i i.e. E[i] is some constant k, for all i Subtask 3: For further 50% of the score, -  No further constraints. -----Example----- Input 1: 2 12 5 10 Output 1: 390 -----Explanation 1----- Suppose Pikachu trains in the first city, his strength will increase to 39, because as explained above, 12 + (1+2)3 = 39. If he battles in the first city, his XV will increase by (12*5) = 60. If Pikachu trains in the first city, and then battles in the second city, his XV will increase by 39*10 = 390. So, the final XV will be 0+390 = 390. You can check that you cannot do better than this. Hence the answer is 390. Input 2: 4 1 100 1 6 2 Output 2: 120 -----Explanation 2----- Pikachu battles in the first city, trains in the second and third, and then battles in the fourth city. So his strength going into each of the four cities is (1, 1, 2, 10). And so he gains 1*100 XV from the first city and 10*2 XV from the fourth city. This gets him a total of 120 XV, and you can verify that nothing better can be done. Note: You may download the problem statements PDF and test cases zipped files here: http://pd.codechef.com/com/inoi/problems.zip. Please feel free to use them during the contest.  Password for the PDF and test cases zip files: DPtrumpsGreedy2017\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\n-----INOI 2017, Problem 2, Training-----\nAsh and his Pokemon Pikachu are going on a journey.  Ash has planned his route\nfor the journey so that it passes through N cities, numbered 1, 2, \u2026, N, and in this order.\n\nWhen they set out, Pikachu has an initial strength of Sin as well as an experience\nvalue (XV) of 0. As they travel they may increase his strength and experience value\nin a manner to be described below.\n\nIn each city,  Ash can choose either to train Pikachu or let Pikachu battle the\nGym-leader (but not both).  The Gym-leader in ith city has experience E[i]. If\nPikachu enters a city i with strength S and decides to train, then this\nincreases his strength by the cube of the sum of the digits in his current\nstrength. For example, if he entered a city with a strength of 12, then\ntraining will increase his strength to 12 + (1+2)3 = 39.  On the other hand,\nif he enters city i with strength S and battles the Gym-leader, then this\nincreases his experience value XV by S*E[i].\n\nAsh wants your help to find out the maximum XV that Pikachu can attain \nat the end of his journey.\n\n-----Input-----\n- The first line contains two space separated integers, N and Sin, which are the number of cities, and the initial strength, respectively.\n\n- The second line contains N space separated integers, which correspond to E[1], E[2],..., E[N].\n\n-----Output-----\n- A single integer which is the maximum XV that Pikachu can attain.\n\n-----Constraints-----\nFor all test cases you may assume that: \n\n- 1 \u2264 N \u2264 5000\n- 0 \u2264 Sin \u2264 109\n- 0 \u2264 E[i] \u2264 104\n\nSubtask 1: For 10% of the score,\n\n- N \u2264 20 and Sin = 1\n\nSubtask 2: For further 40% of the score,\n\n- E[i] = k for all i\ni.e. E[i] is some constant k, for all i\n\nSubtask 3: For further 50% of the score,\n\n- \nNo further constraints.\n\n\n-----Example-----\nInput 1:\n2 12\n5 10\n\nOutput 1:\n390\n\n-----Explanation 1-----\nSuppose Pikachu trains in the first city, his strength will increase to 39, because as explained above, 12 + (1+2)3 = 39. If he battles in the first city, his XV will increase by (12*5) = 60.\n\nIf Pikachu trains in the first city, and then battles in the second city, his XV will increase by 39*10 = 390. So, the final XV will be 0+390 = 390. You can check that you cannot do better than this. Hence the answer is 390.\n\nInput 2:\n4 1\n100 1 6 2\n\nOutput 2:\n120\n\n-----Explanation 2-----\nPikachu battles in the first city, trains in the second and third, and then battles in the fourth city. So his strength going into each of the four cities is (1, 1, 2, 10). And so he gains 1*100 XV from the first city and 10*2 XV from the fourth city. This gets him a total of 120 XV, and you can verify that nothing better can be done.\n\nNote:\nYou may download the problem statements PDF and test cases zipped files here: http://pd.codechef.com/com/inoi/problems.zip. Please feel free to use them during the contest. \nPassword for the PDF and test cases zip files: DPtrumpsGreedy2017\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n On vacations n pupils decided to go on excursion and gather all together. They need to overcome the path with the length l meters. Each of the pupils will go with the speed equal to v_1. To get to the excursion quickly, it was decided to rent a bus, which has seats for k people (it means that it can't fit more than k people at the same time) and the speed equal to v_2. In order to avoid seasick, each of the pupils want to get into the bus no more than once. Determine the minimum time required for all n pupils to reach the place of excursion. Consider that the embarkation and disembarkation of passengers, as well as the reversal of the bus, take place immediately and this time can be neglected.  \n-----Input----- The first line of the input contains five positive integers n, l, v_1, v_2 and k (1 \u2264 n \u2264 10 000, 1 \u2264 l \u2264 10^9, 1 \u2264 v_1 < v_2 \u2264 10^9, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of pupils, the distance from meeting to the place of excursion, the speed of each pupil, the speed of bus and the number of seats in the bus.  -----Output----- Print the real number\u00a0\u2014 the minimum time in which all pupils can reach the place of excursion. Your answer will be considered correct if its absolute or relative error won't exceed 10^{ - 6}. -----Examples----- Input 5 10 1 2 5 Output 5.0000000000 Input 3 6 1 2 1 Output 4.7142857143 -----Note----- In the first sample we should immediately put all five pupils to the bus. The speed of the bus equals 2 and the distance is equal to 10, so the pupils will reach the place of excursion in time 10 / 2 = 5.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nOn vacations n pupils decided to go on excursion and gather all together. They need to overcome the path with the length l meters. Each of the pupils will go with the speed equal to v_1. To get to the excursion quickly, it was decided to rent a bus, which has seats for k people (it means that it can't fit more than k people at the same time) and the speed equal to v_2. In order to avoid seasick, each of the pupils want to get into the bus no more than once.\n\nDetermine the minimum time required for all n pupils to reach the place of excursion. Consider that the embarkation and disembarkation of passengers, as well as the reversal of the bus, take place immediately and this time can be neglected. \n\n\n-----Input-----\n\nThe first line of the input contains five positive integers n, l, v_1, v_2 and k (1 \u2264 n \u2264 10 000, 1 \u2264 l \u2264 10^9, 1 \u2264 v_1 < v_2 \u2264 10^9, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of pupils, the distance from meeting to the place of excursion, the speed of each pupil, the speed of bus and the number of seats in the bus. \n\n\n-----Output-----\n\nPrint the real number\u00a0\u2014 the minimum time in which all pupils can reach the place of excursion. Your answer will be considered correct if its absolute or relative error won't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n5 10 1 2 5\n\nOutput\n5.0000000000\n\nInput\n3 6 1 2 1\n\nOutput\n4.7142857143\n\n\n\n-----Note-----\n\nIn the first sample we should immediately put all five pupils to the bus. The speed of the bus equals 2 and the distance is equal to 10, so the pupils will reach the place of excursion in time 10 / 2 = 5.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a functional equation for some function $f : \\{0,1,2, \\cdots, p - 1 \\} \\rightarrow \\{0,1,2, \\cdots, p - 1 \\}$. Kevin wants to know how many distinct functions $f$ satisfy this equation. \n-----Input----- The input consists of two space-separated integers p and k (3 \u2264 p \u2264 1 000 000, 0 \u2264 k \u2264 p - 1) on a single line. It is guaranteed that p is an odd prime number. -----Output----- Print a single integer, the number of distinct functions f modulo 10^9 + 7. -----Examples----- Input 3 2 Output 3 Input 5 4 Output 25 -----Note----- In the first sample, p = 3 and k = 2. The following functions work:   f(0) = 0, f(1) = 1, f(2) = 2.  f(0) = 0, f(1) = 2, f(2) = 1.  f(0) = f(1) = f(2) = 0.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAs behooves any intelligent schoolboy, Kevin Sun is studying psycowlogy, cowculus, and cryptcowgraphy at the Bovinia State University (BGU) under Farmer Ivan. During his Mathematics of Olympiads (MoO) class, Kevin was confronted with a weird functional equation and needs your help. For two fixed integers k and p, where p is an odd prime number, the functional equation states that $f(k x \\operatorname{mod} p) \\equiv k \\cdot f(x) \\operatorname{mod} p$ \n\nfor some function $f : \\{0,1,2, \\cdots, p - 1 \\} \\rightarrow \\{0,1,2, \\cdots, p - 1 \\}$. (This equation should hold for any integer x in the range 0 to p - 1, inclusive.)\n\nIt turns out that f can actually be many different functions. Instead of finding a solution, Kevin wants you to count the number of distinct functions f that satisfy this equation. Since the answer may be very large, you should print your result modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe input consists of two space-separated integers p and k (3 \u2264 p \u2264 1 000 000, 0 \u2264 k \u2264 p - 1) on a single line. It is guaranteed that p is an odd prime number.\n\n\n-----Output-----\n\nPrint a single integer, the number of distinct functions f modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n3\n\nInput\n5 4\n\nOutput\n25\n\n\n\n-----Note-----\n\nIn the first sample, p = 3 and k = 2. The following functions work:   f(0) = 0, f(1) = 1, f(2) = 2.  f(0) = 0, f(1) = 2, f(2) = 1.  f(0) = f(1) = f(2) = 0.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given an infinitely long railway with a train consisting of n cars, numbered from 1 to n (the numbers of all the cars are distinct) and positioned in arbitrary order. David Blaine wants to sort the railway cars in the order of increasing numbers. In one move he can make one of the cars disappear from its place and teleport it either to the beginning of the train, or to the end of the train, at his desire. What is the minimum number of actions David Blaine needs to perform in order to sort the train \n-----Input----- The first line of the input contains integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of cars in the train.  The second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 n, p_{i} \u2260 p_{j} if i \u2260 j)\u00a0\u2014 the sequence of the numbers of the cars in the train. -----Output----- Print a single integer\u00a0\u2014 the minimum number of actions needed to sort the railway cars. -----Examples----- Input 5 4 1 2 5 3 Output 2 Input 4 4 1 3 2 Output 2 -----Note----- In the first sample you need first to teleport the 4-th car, and then the 5-th car to the end of the train.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nAn infinitely long railway has a train consisting of n cars, numbered from 1 to n (the numbers of all the cars are distinct) and positioned in arbitrary order. David Blaine wants to sort the railway cars in the order of increasing numbers. In one move he can make one of the cars disappear from its place and teleport it either to the beginning of the train, or to the end of the train, at his desire. What is the minimum number of actions David Blaine needs to perform in order to sort the train?\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of cars in the train. \n\nThe second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 n, p_{i} \u2260 p_{j} if i \u2260 j)\u00a0\u2014 the sequence of the numbers of the cars in the train.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of actions needed to sort the railway cars.\n\n\n-----Examples-----\nInput\n5\n4 1 2 5 3\n\nOutput\n2\n\nInput\n4\n4 1 3 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample you need first to teleport the 4-th car, and then the 5-th car to the end of the train.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n A team of furry rescue rangers was sitting idle in their hollow tree when suddenly they received a signal of distress. In a few moments they were ready, and the dirigible of the rescue chipmunks hit the road. We assume that the action takes place on a Cartesian plane. The headquarters of the rescuers is located at point (x_1, y_1), and the distress signal came from the point (x_2, y_2). Due to Gadget's engineering talent, the rescuers' dirigible can instantly change its current velocity and direction of movement at any moment and as many times as needed. The only limitation is: the speed of the aircraft relative to the air can not exceed $v_{\\operatorname{max}}$ meters per second. Of course, Gadget is a true rescuer and wants to reach the destination as soon as possible. The matter is complicated by the fact that the wind is blowing in the air and it affects the movement of the dirigible. According to the weather forecast, the wind will be defined by the vector (v_{x}, v_{y}) for the nearest t seconds, and then will change to (w_{x}, w_{y}). These vectors give both the direction and velocity of the wind. Formally, if a dirigible is located at the point (x, y), while its own velocity relative to the air is equal to zero and the wind (u_{x}, u_{y}) is blowing, then after $T$ seconds the new position of the dirigible will be $(x + \\tau \\cdot u_{x}, y + \\tau \\cdot u_{y})$. Gadget is\n-----Input----- The first line of the input contains four integers x_1, y_1, x_2, y_2 (|x_1|,  |y_1|,  |x_2|,  |y_2| \u2264 10 000)\u00a0\u2014 the coordinates of the rescuers' headquarters and the point, where signal of the distress came from, respectively.  The second line contains two integers $v_{\\operatorname{max}}$ and t (0 < v, t \u2264 1000), which are denoting the maximum speed of the chipmunk dirigible relative to the air and the moment of time when the wind changes according to the weather forecast, respectively.  Next follow one per line two pairs of integer (v_{x}, v_{y}) and (w_{x}, w_{y}), describing the wind for the first t seconds and the wind that will blow at all the remaining time, respectively. It is guaranteed that $v_{x}^{2} + v_{y}^{2} < v_{\\operatorname{max}}^{2}$ and $w_{x}^{2} + w_{y}^{2} < v_{\\operatorname{max}}^{2}$. -----Output----- Print a single real value\u00a0\u2014 the minimum time the rescuers need to get to point (x_2, y_2). You answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.  Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$. -----Examples----- Input 0 0 5 5 3 2 -1 -1 -1 0 Output 3.729935587093555327 Input 0 0 0 1000 100 1000 -50 0 50 0 Output 11.547005383792516398\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nA team of furry rescue rangers was sitting idle in their hollow tree when suddenly they received a signal of distress. In a few moments they were ready, and the dirigible of the rescue chipmunks hit the road.\n\nWe assume that the action takes place on a Cartesian plane. The headquarters of the rescuers is located at point (x_1, y_1), and the distress signal came from the point (x_2, y_2).\n\nDue to Gadget's engineering talent, the rescuers' dirigible can instantly change its current velocity and direction of movement at any moment and as many times as needed. The only limitation is: the speed of the aircraft relative to the air can not exceed $v_{\\operatorname{max}}$ meters per second.\n\nOf course, Gadget is a true rescuer and wants to reach the destination as soon as possible. The matter is complicated by the fact that the wind is blowing in the air and it affects the movement of the dirigible. According to the weather forecast, the wind will be defined by the vector (v_{x}, v_{y}) for the nearest t seconds, and then will change to (w_{x}, w_{y}). These vectors give both the direction and velocity of the wind. Formally, if a dirigible is located at the point (x, y), while its own velocity relative to the air is equal to zero and the wind (u_{x}, u_{y}) is blowing, then after $T$ seconds the new position of the dirigible will be $(x + \\tau \\cdot u_{x}, y + \\tau \\cdot u_{y})$.\n\nGadget is busy piloting the aircraft, so she asked Chip to calculate how long will it take them to reach the destination if they fly optimally. He coped with the task easily, but Dale is convinced that Chip has given the random value, aiming only not to lose the face in front of Gadget. Dale has asked you to find the right answer.\n\nIt is guaranteed that the speed of the wind at any moment of time is strictly less than the maximum possible speed of the airship relative to the air.\n\n\n-----Input-----\n\nThe first line of the input contains four integers x_1, y_1, x_2, y_2 (|x_1|,  |y_1|,  |x_2|,  |y_2| \u2264 10 000)\u00a0\u2014 the coordinates of the rescuers' headquarters and the point, where signal of the distress came from, respectively. \n\nThe second line contains two integers $v_{\\operatorname{max}}$ and t (0 < v, t \u2264 1000), which are denoting the maximum speed of the chipmunk dirigible relative to the air and the moment of time when the wind changes according to the weather forecast, respectively. \n\nNext follow one per line two pairs of integer (v_{x}, v_{y}) and (w_{x}, w_{y}), describing the wind for the first t seconds and the wind that will blow at all the remaining time, respectively. It is guaranteed that $v_{x}^{2} + v_{y}^{2} < v_{\\operatorname{max}}^{2}$ and $w_{x}^{2} + w_{y}^{2} < v_{\\operatorname{max}}^{2}$.\n\n\n-----Output-----\n\nPrint a single real value\u00a0\u2014 the minimum time the rescuers need to get to point (x_2, y_2). You answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n0 0 5 5\n3 2\n-1 -1\n-1 0\n\nOutput\n3.729935587093555327\n\nInput\n0 0 0 1000\n100 1000\n-50 0\n50 0\n\nOutput\n11.547005383792516398\n\"\"\"\ndef code():"
}