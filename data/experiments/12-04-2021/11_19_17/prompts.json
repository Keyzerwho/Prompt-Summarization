{
    "0": "Python 3\n\"\"\"\n Analyze a particular sorting algorithm. The algorithm processes a sequence of $n$ distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. For the input sequence 9 1 0 5 4 , Ultra-QuickSort produces the output 0 1 4 5 9 . Your task is to determine how many swap operations Ultra-QuickSort needs to perform in order to sort a given input sequence. \n-----Input----- Input begins with a line that contains a single integer $1 \\le n \\le 500000$ \u2013 the length of the input sequence. Each of the the following $n$ lines contains a single integer $0 \\le a[i] \\le 999999999$, the $i$-th input sequence element. -----Output----- Prints a single line containing an integer number op, the minimum number of swap operations necessary to sort the given input sequence. -----Examples----- Sample Input: 5 9 1 0 5 4 Sample Output: 6\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIn this problem, you have to analyze a particular sorting algorithm. The algorithm processes a sequence of $n$ distinct integers by swapping two adjacent sequence elements until the sequence is sorted in ascending order. For the input sequence\n\n9 1 0 5 4 ,\n\nUltra-QuickSort produces the output\n\n0 1 4 5 9 .\n\nYour task is to determine how many swap operations Ultra-QuickSort needs to perform in order to sort a given input sequence.\n\n-----Input-----\nInput begins with a line that contains a single integer $1 \\le n \\le 500000$ \u2013 the length of the input sequence. Each of the the following $n$ lines contains a single integer $0 \\le a[i] \\le 999999999$, the $i$-th input sequence element.\n\n-----Output-----\nPrints a single line containing an integer number op, the minimum number of swap operations necessary to sort the given input sequence.\n\n-----Examples-----\nSample Input:\n5\n9\n1\n0\n5\n4\nSample Output:\n6\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given the number N, the number A and the number B, determine if there exists a sequence obtained by permuting 1,2,...,N that satisfies the following conditions: - The length of its longest increasing subsequence is A. - The length of its longest decreasing subsequence is B. If it exists, construct one such sequence. \n\n-----Input----- Input is given from Standard Input in the following format: N A B -----Output----- If there are no sequences that satisfy the conditions, print -1. Otherwise, print N integers. The i-th integer should be the i-th element of the sequence that you constructed. -----Sample Input----- 5 3 2 -----Sample Output----- 2 4 1 5 3 One longest increasing subsequence of this sequence is {2,4,5}, and one longest decreasing subsequence of it is {4,3}.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nDetermine if there exists a sequence obtained by permuting 1,2,...,N that satisfies the following conditions:\n - The length of its longest increasing subsequence is A.\n - The length of its longest decreasing subsequence is B.\nIf it exists, construct one such sequence.\n\n-----Notes-----\nA subsequence of a sequence P is a sequence that can be obtained by extracting some of the elements in P without changing the order.\nA longest increasing subsequence of a sequence P is a sequence with the maximum length among the subsequences of P that are monotonically increasing.\nSimilarly, a longest decreasing subsequence of a sequence P is a sequence with the maximum length among the subsequences of P that are monotonically decreasing.\n\n-----Constraints-----\n - 1 \\leq N,A,B \\leq 3\\times 10^5\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN A B\n\n-----Output-----\nIf there are no sequences that satisfy the conditions, print -1.\nOtherwise, print N integers. The i-th integer should be the i-th element of the sequence that you constructed.\n\n-----Sample Input-----\n5 3 2\n\n-----Sample Output-----\n2 4 1 5 3\n\nOne longest increasing subsequence of this sequence is {2,4,5}, and one longest decreasing subsequence of it is {4,3}.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given a square grid of size $n \\times n$. Some cells are colored in black, all others are colored in white. In one operation you can select some rectangle and color all its cells in white. It costs $\\min(h, w)$ to color a rectangle of size $h \\times w$. You are to make all cells white for minimum total cost. The square is large, so we give it to you in a compressed way. The set of black cells is the union of $m$ rectangles. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles. Each of the next $m$ lines contains 4 integers $x_{i1}$ $y_{i1}$ $x_{i2}$ $y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle. The rectangles may intersect. -----Output----- Print a single integer\u00a0\u2014 the minimum total cost of painting the whole square in white. -----Examples----- Input 10 2 4 1 5 10 1 4 10 5 Output 4 Input 7 6 2 1 2 1 4 2 4 3 2 5 2 5 2 3 5 3 1 2 1 2 3 2 5 3 Output 3 -----Note----- The examples and some of optimal solutions are shown on the pictures below.  [Image]\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nThere is a square grid of size $n \\times n$. Some cells are colored in black, all others are colored in white. In one operation you can select some rectangle and color all its cells in white. It costs $\\min(h, w)$ to color a rectangle of size $h \\times w$. You are to make all cells white for minimum total cost.\n\nThe square is large, so we give it to you in a compressed way. The set of black cells is the union of $m$ rectangles.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 10^{9}$, $0 \\le m \\le 50$)\u00a0\u2014 the size of the square grid and the number of black rectangles.\n\nEach of the next $m$ lines contains 4 integers $x_{i1}$ $y_{i1}$ $x_{i2}$ $y_{i2}$ ($1 \\le x_{i1} \\le x_{i2} \\le n$, $1 \\le y_{i1} \\le y_{i2} \\le n$)\u00a0\u2014 the coordinates of the bottom-left and the top-right corner cells of the $i$-th black rectangle.\n\nThe rectangles may intersect.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum total cost of painting the whole square in white.\n\n\n-----Examples-----\nInput\n10 2\n4 1 5 10\n1 4 10 5\n\nOutput\n4\n\nInput\n7 6\n2 1 2 1\n4 2 4 3\n2 5 2 5\n2 3 5 3\n1 2 1 2\n3 2 5 3\n\nOutput\n3\n\n\n\n-----Note-----\n\nThe examples and some of optimal solutions are shown on the pictures below.\n\n [Image]\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You have to choose two adjacent elements from the given array and replace one of them with gcd(x, y). \n\n-----Input----- The first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements in the array. The second line contains n space separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array. -----Output----- Print -1, if it is impossible to turn all numbers to 1. Otherwise, print the minimum number of operations needed to make all numbers equal to 1. -----Examples----- Input 5 2 2 3 4 6 Output 5 Input 4 2 4 6 8 Output -1 Input 3 2 6 9 Output 4 -----Note----- In the first sample you can turn all numbers to 1 using the following 5 moves:   [2, 2, 3, 4, 6].  [2, 1, 3, 4, 6]  [2, 1, 3, 1, 6]  [2, 1, 1, 1, 6]  [1, 1, 1, 1, 6]  [1, 1, 1, 1, 1]  We can prove that in this case it is not possible to make all numbers one using less than 5 moves.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou have an array a with length n, you can perform operations. Each operation is like this: choose two adjacent elements from a, say x and y, and replace one of them with gcd(x, y), where gcd denotes the greatest common divisor.\n\nWhat is the minimum number of operations you need to make all of the elements equal to 1?\n\n\n-----Input-----\n\nThe first line of the input contains one integer n (1 \u2264 n \u2264 2000) \u2014 the number of elements in the array.\n\nThe second line contains n space separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint -1, if it is impossible to turn all numbers to 1. Otherwise, print the minimum number of operations needed to make all numbers equal to 1.\n\n\n-----Examples-----\nInput\n5\n2 2 3 4 6\n\nOutput\n5\n\nInput\n4\n2 4 6 8\n\nOutput\n-1\n\nInput\n3\n2 6 9\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample you can turn all numbers to 1 using the following 5 moves:\n\n  [2, 2, 3, 4, 6].  [2, 1, 3, 4, 6]  [2, 1, 3, 1, 6]  [2, 1, 1, 1, 6]  [1, 1, 1, 1, 6]  [1, 1, 1, 1, 1] \n\nWe can prove that in this case it is not possible to make all numbers one using less than 5 moves.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Let's introduce a number system which is based on a roman digits. There are digits I, V, X, L which correspond to the numbers $1$, $5$, $10$ and $50$ respectively. The use of other roman digits is not allowed. Numbers in this system are written as a sequence of one or more digits. We define the value of the sequence simply as the sum of digits in it. For example, the number XXXV evaluates to $35$ and the number IXI   to $12$. Pay attention to the difference to the traditional roman system   in our system any sequence of digits is valid, moreover the order of digits doesn't matter, for example IX means $11$, not $9$. One can notice that this system is ambiguous, and some numbers can be written in many different ways. Your goal is to determine how many distinct integers can be represented by exactly $n$ roman digits I, V, X, L. \n-----Input----- The only line of the input file contains a single integer $n$ ($1 \\le n \\le 10^9$)\u00a0\u2014 the number of roman digits to use. -----Output----- Output a single integer\u00a0\u2014 the number of distinct integers which can be represented using $n$ roman digits exactly. -----Examples----- Input 1 Output 4 Input 2 Output 10 Input 10 Output 244 -----Note----- In the first sample there are exactly $4$ integers which can be represented\u00a0\u2014 I, V, X and L. In the second sample it is possible to represent integers $2$ (II), $6$ (VI), $10$ (VV), $11$ (XI), $15$ (XV), $20$ (XX), $51$ (IL), $55$ (VL), $60$ (XL) and $100$ (LL).\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nLet's introduce a number system which is based on a roman digits. There are digits I, V, X, L which correspond to the numbers $1$, $5$, $10$ and $50$ respectively. The use of other roman digits is not allowed.\n\nNumbers in this system are written as a sequence of one or more digits. We define the value of the sequence simply as the sum of digits in it.\n\nFor example, the number XXXV evaluates to $35$ and the number IXI\u00a0\u2014 to $12$.\n\nPay attention to the difference to the traditional roman system\u00a0\u2014 in our system any sequence of digits is valid, moreover the order of digits doesn't matter, for example IX means $11$, not $9$.\n\nOne can notice that this system is ambiguous, and some numbers can be written in many different ways. Your goal is to determine how many distinct integers can be represented by exactly $n$ roman digits I, V, X, L.\n\n\n-----Input-----\n\nThe only line of the input file contains a single integer $n$ ($1 \\le n \\le 10^9$)\u00a0\u2014 the number of roman digits to use.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the number of distinct integers which can be represented using $n$ roman digits exactly.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n4\n\nInput\n2\n\nOutput\n10\n\nInput\n10\n\nOutput\n244\n\n\n\n-----Note-----\n\nIn the first sample there are exactly $4$ integers which can be represented\u00a0\u2014 I, V, X and L.\n\nIn the second sample it is possible to represent integers $2$ (II), $6$ (VI), $10$ (VV), $11$ (XI), $15$ (XV), $20$ (XX), $51$ (IL), $55$ (VL), $60$ (XL) and $100$ (LL).\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You and your sister both love dark chocolate, but you hate white chocolate. You both want as much dark chocolate as possible, while simultaneously obtaining as little white chocolate as possible. Every dark piece of chocolate you obtain gives you $1$ meaningless unit of happiness, while a white piece lowers your happiness by $1$ meaningless unit (and the same holds for your sister). Now, while you love your sister very much, there is always heavy competition between siblings, so your goal is to maximize the difference of your obtained happiness and her obtained happiness (while she tries to do the opposite, obviously). \nNote: the strategies used here might not be optimal.) -----Input----- Given are two positive integers $p$ and $q$, both at most $100$, the height and width of the chocolate rectangle. -----Output----- Output the largest possible difference (in your favour) between your net happiness and your sister\u2019s net happiness. -----Examples----- Sample Input 1: 1 2 Sample Output 1: 2 Sample Input 2: 2 2 Sample Output 2: 0\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYour family has been blessed with chocolate! A huge piece of chocolate has been given to you and your sister to share. However, as you gobbled up the large majority last time, your parents have invented a game to keep things fair (and to keep you occupied while they hide all the other chocolate). To keep things interesting, they have given you a rectangular piece of chocolate, which consists of little squares of both dark chocolate and white chocolate in a chessboard pattern. While you and your sister both love dark chocolate, you hate white chocolate! So, both you and your sister want as much dark chocolate as possible, while simultaneously obtaining as little white chocolate as possible. Every dark piece of chocolate you obtain gives you $1$ meaningless unit of happiness, while a white piece lowers your happiness by $1$ meaningless unit (and the same holds for your sister). Now, while you love your sister very much, there is always heavy competition between siblings, so your goal is to maximize the difference of your obtained happiness and her obtained happiness (while she tries to do the opposite, obviously). \n\nThe game works as follows. Your parents place a $p \\times q$-rectangle of the aforementioned mixed chocolate on a table. You are situated on the west side of the table and your sister on the south side. The side of length $p$ is parallel to the north-south line, while the side of length $q$ is parallel to the east-west line. Furthermore, the north-west square is made of dark chocolate. Then, starting with yourself, you take turns breaking off blocks of chocolate (which you can keep). You can break off any positive number of entire columns from the west side, while your sister breaks off any positive number of entire rows from the south side. You repeat this process until no more chocolate is left. Your sister is very smart and will always play the game perfectly.\n\nA game might proceed like this, for example: you and your sister start with a $3\\times 4$-rectangle. You decide to break off $2$ columns, obtaining $3$ dark and $3$ white chocolate squares, netting a happiness of zero. Your sister then breaks off $1$ row, obtaining $1$ dark and $1$ white squares as well, so no happiness for her either. You then take a single column, which nets you nothing again, after which your sister decides to break off one row, which nets her $1$ happiness! You then take the last piece, which makes you lose a unit of happiness, so your total score is $-1 - 1 = -2$. See the figure. (Note: the strategies used here might not be optimal.)\n\n-----Input-----\nGiven are two positive integers $p$ and $q$, both at most $100$, the height and width of the chocolate rectangle.\n\n-----Output-----\nOutput the largest possible difference (in your favour) between your net happiness and your sister\u2019s net happiness.\n\n-----Examples-----\nSample Input 1:\n1 2\nSample Output 1:\n2\n\nSample Input 2:\n2 2\nSample Output 2:\n0\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Oleg writes down the history of the days he lived. For each day he decides if it was good or bad. Oleg calls a non-empty sequence of days a zebra, if it starts with a bad day, ends with a bad day, and good and bad days are alternating in it. Let us denote bad days as 0 and good days as 1. Then, for example, sequences of days 0, 010, 01010 are zebras, while sequences 1, 0110, 0101 are not. Oleg tells you the story of days he lived in chronological order in form of string consisting of 0 and 1. Now you are interested if it is possible to divide Oleg's life history into several subsequences, each of which is a zebra, and the way it can be done. Each day must belong to exactly one of the subsequences. For each of the subsequences, days forming it must be ordered chronologically. Note that subsequence does not have to be a group of consecutive days. \n-----Input----- In the only line of input data there is a non-empty string s consisting of characters 0 and 1, which describes the history of Oleg's life. Its length (denoted as |s|) does not exceed 200 000 characters. -----Output----- If there is a way to divide history into zebra subsequences, in the first line of output you should print an integer k (1 \u2264 k \u2264 |s|), the resulting number of subsequences. In the i-th of following k lines first print the integer l_{i} (1 \u2264 l_{i} \u2264 |s|), which is the length of the i-th subsequence, and then l_{i} indices of days forming the subsequence. Indices must follow in ascending order. Days are numbered starting from 1. Each index from 1 to n must belong to exactly one subsequence. If there is no way to divide day history into zebra subsequences, print -1. Subsequences may be printed in any order. If there are several solutions, you may print any of them. You do not have to minimize nor maximize the value of k. -----Examples----- Input 0010100 Output 3 3 1 3 4 3 2 5 6 1 7 Input 111 Output -1\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nOleg writes down the history of the days he lived. For each day he decides if it was good or bad. Oleg calls a non-empty sequence of days a zebra, if it starts with a bad day, ends with a bad day, and good and bad days are alternating in it. Let us denote bad days as 0 and good days as 1. Then, for example, sequences of days 0, 010, 01010 are zebras, while sequences 1, 0110, 0101 are not.\n\nOleg tells you the story of days he lived in chronological order in form of string consisting of 0 and 1. Now you are interested if it is possible to divide Oleg's life history into several subsequences, each of which is a zebra, and the way it can be done. Each day must belong to exactly one of the subsequences. For each of the subsequences, days forming it must be ordered chronologically. Note that subsequence does not have to be a group of consecutive days. \n\n\n-----Input-----\n\nIn the only line of input data there is a non-empty string s consisting of characters 0 and 1, which describes the history of Oleg's life. Its length (denoted as |s|) does not exceed 200 000 characters.\n\n\n-----Output-----\n\nIf there is a way to divide history into zebra subsequences, in the first line of output you should print an integer k (1 \u2264 k \u2264 |s|), the resulting number of subsequences. In the i-th of following k lines first print the integer l_{i} (1 \u2264 l_{i} \u2264 |s|), which is the length of the i-th subsequence, and then l_{i} indices of days forming the subsequence. Indices must follow in ascending order. Days are numbered starting from 1. Each index from 1 to n must belong to exactly one subsequence. If there is no way to divide day history into zebra subsequences, print -1.\n\nSubsequences may be printed in any order. If there are several solutions, you may print any of them. You do not have to minimize nor maximize the value of k.\n\n\n-----Examples-----\nInput\n0010100\n\nOutput\n3\n3 1 3 4\n3 2 5 6\n1 7\n\nInput\n111\n\nOutput\n-1\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Peter had a cube with non-zero length of a side. He put the cube into three-dimensional space in such a way that its vertices lay at integer points (it is possible that the cube's sides are not parallel to the coordinate axes). Then he took a piece of paper and wrote down eight lines, each containing three integers \ncoordinates of cube's vertex (a single line contains coordinates of a single vertex, each vertex is written exactly once), put the paper on the table and left. While Peter was away, his little brother Nick decided to play with the numbers on the paper. In one operation Nick could swap some numbers inside a single line (Nick didn't swap numbers from distinct lines). Nick could have performed any number of such operations. When Peter returned and found out about Nick's mischief, he started recollecting the original coordinates. Help Peter restore the original position of the points or else state that this is impossible and the numbers were initially recorded incorrectly.\n-----Input----- Each of the eight lines contains three space-separated integers \u2014 the numbers written on the piece of paper after Nick's mischief. All numbers do not exceed 10^6 in their absolute value. -----Output----- If there is a way to restore the cube, then print in the first line \"YES\". In each of the next eight lines print three integers \u2014 the restored coordinates of the points. The numbers in the i-th output line must be a permutation of the numbers in i-th input line. The numbers should represent the vertices of a cube with non-zero length of a side. If there are multiple possible ways, print any of them. If there is no valid way, print \"NO\" (without the quotes) in the first line. Do not print anything else. -----Examples----- Input 0 0 0 0 0 1 0 0 1 0 0 1 0 1 1 0 1 1 0 1 1 1 1 1 Output YES 0 0 0 0 0 1 0 1 0 1 0 0 0 1 1 1 0 1 1 1 0 1 1 1 Input 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 Output NO\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPeter had a cube with non-zero length of a side. He put the cube into three-dimensional space in such a way that its vertices lay at integer points (it is possible that the cube's sides are not parallel to the coordinate axes). Then he took a piece of paper and wrote down eight lines, each containing three integers \u2014 coordinates of cube's vertex (a single line contains coordinates of a single vertex, each vertex is written exactly once), put the paper on the table and left. While Peter was away, his little brother Nick decided to play with the numbers on the paper. In one operation Nick could swap some numbers inside a single line (Nick didn't swap numbers from distinct lines). Nick could have performed any number of such operations.\n\nWhen Peter returned and found out about Nick's mischief, he started recollecting the original coordinates. Help Peter restore the original position of the points or else state that this is impossible and the numbers were initially recorded incorrectly.\n\n\n-----Input-----\n\nEach of the eight lines contains three space-separated integers \u2014 the numbers written on the piece of paper after Nick's mischief. All numbers do not exceed 10^6 in their absolute value.\n\n\n-----Output-----\n\nIf there is a way to restore the cube, then print in the first line \"YES\". In each of the next eight lines print three integers \u2014 the restored coordinates of the points. The numbers in the i-th output line must be a permutation of the numbers in i-th input line. The numbers should represent the vertices of a cube with non-zero length of a side. If there are multiple possible ways, print any of them.\n\nIf there is no valid way, print \"NO\" (without the quotes) in the first line. Do not print anything else.\n\n\n-----Examples-----\nInput\n0 0 0\n0 0 1\n0 0 1\n0 0 1\n0 1 1\n0 1 1\n0 1 1\n1 1 1\n\nOutput\nYES\n0 0 0\n0 0 1\n0 1 0\n1 0 0\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n\nInput\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\nOutput\nNO\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given the initial positions of three particles. They are confined to an infinite plane. All particles have the same radius. When two particles collide, the second particle will move away from the first one in a direction perpendicular to the tangent at the point of the contact. The first particle will cease to exist and be converted to radiation. There are a number of possible scenarios your simulator should identify: \n-----Input----- The input contains four lines. The first three lines each contains two integers $x_ i$ and $y_ i$ ($|x_ i|,|y_ i| \\leq 1000$), describing particles $1$, $2$, and $3$ in this order. The fourth line contains three integers $x_ v$, $y_ v$, and $r$ ($|x_ v|, |y_ v| \\leq 1000$, $0 < r \\leq 50$). You may assume that no two particles touch or overlap initially, and that the distance between the centers of particles $2$ and $3$ is greater than $4r$. -----Output----- Output a single integer giving the number ($1$\u2013$5$) identifying the scenarios described above. Although you should take care of your calculations, it is guaranteed that the outcome would not change if the initial vector $(x_ v,y_ v)$ is rotated by one degree either way. -----Examples----- Sample Input 1: 0 0 50 45 91 50 42 50 10 Sample Output 1: 1 Sample Input 2: 0 0 50 50 141 50 41 50 10 Sample Output 2: 3\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nParticle colliders are difficult to build and experiments are costly to run. Before running any real experiments it is better to do a simulation to test out the ideas first. You are required to write a very simple simulator for this problem.\n\nThere are only three particles in this system, and all particles are confined to an infinite plane so that they can be modelled as circles. Their locations are specified only by the $x_ i$ and $y_ i$ coordinates of their centers ($1 \\leq i \\leq 3$). All three particles have the same radius $r$, and are initially stationary.\n\nWe are given a vector $(x_ v, y_ v)$ specifying the direction particle $1$ will move when the experiment starts. When particle $i$ hits particle $j$, particle $j$ will start moving in the direction perpendicular to the tangent at the point of the contact, away from particle $i$. Particle $i$ will cease to exist and be converted to radiation. A moving particle that does not hit another will continue moving indefinitely.\n\nThere are a number of possible scenarios your simulator should identify:\n - particle $1$ hits particle $2$, which in turns hits particle $3$;\n - particle $1$ hits particle $3$, which in turns hits particle $2$;\n - particle $1$ hits particle $2$, which moves indefinitely;\n - particle $1$ hits particle $3$, which moves indefinitely;\n - particle $1$ moves indefinitely.\n\n-----Input-----\nThe input contains four lines. The first three lines each contains two integers $x_ i$ and $y_ i$ ($|x_ i|,|y_ i| \\leq 1000$), describing particles $1$, $2$, and $3$ in this order. The fourth line contains three integers $x_ v$, $y_ v$, and $r$ ($|x_ v|, |y_ v| \\leq 1000$, $0 < r \\leq 50$).\n\nYou may assume that no two particles touch or overlap initially, and that the distance between the centers of particles $2$ and $3$ is greater than $4r$.\n\n-----Output-----\nOutput a single integer giving the number ($1$\u2013$5$) identifying the scenarios described above.\n\nAlthough you should take care of your calculations, it is guaranteed that the outcome would not change if the initial vector $(x_ v,y_ v)$ is rotated by one degree either way.\n\n-----Examples-----\nSample Input 1:\n0 0\n50 45\n91 50\n42 50 10\nSample Output 1:\n1\n\nSample Input 2:\n0 0\n50 50\n141 50\n41 50 10\nSample Output 2:\n3\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given a positive integer $N$, find the $K$-th lucky positive integer. \n-----Input----- The first and only line of input contains a positive integer $K$ ($1 \\le K \\le 10^9$). -----Output----- The first and only line of output must contain the $K$-th lucky positive integer. -----Examples----- Sample Input 1: 1 Sample Output 1: 4 Sample Input 2: 2 Sample Output 2: 7\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nDigits $4$ and $7$ are lucky, while all others are unlucky. An integer is lucky if it contains only lucky digits in decimal notation. We would like to know the $K$-th lucky positive integer.\n\n-----Input-----\nThe first and only line of input contains a positive integer $K$ ($1 \\le K \\le 10^9$).\n\n-----Output-----\nThe first and only line of output must contain the $K$-th lucky positive integer.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n4\n\nSample Input 2:\n2\nSample Output 2:\n7\n\"\"\"\ndef code():"
}