{
    "0": "Python 3\n\"\"\"\nYou're given a tree with n vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to v_{i}. In one move you can apply the following operation:  Select the subtree of the given tree that includes the vertex with number 1.  Increase or decrease by one all the integers which are written on the vertices of that subtree. \n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}) indicating there's an edge between vertices a_{i} and b_{i}. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v_1, v_2, ..., v_{n} (|v_{i}| \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2\n1 3\n1 -1 1\n\nOutput\n3\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nA tree is a graph with n vertices and exactly n - 1 edges; this graph should meet the following condition: there exists exactly one shortest (by number of edges) path between any pair of its vertices.\n\nA subtree of a tree T is a tree with both vertices and edges as subsets of vertices and edges of T.\n\nYou're given a tree with n vertices. Consider its vertices numbered with integers from 1 to n. Additionally an integer is written on every vertex of this tree. Initially the integer written on the i-th vertex is equal to v_{i}. In one move you can apply the following operation:  Select the subtree of the given tree that includes the vertex with number 1.  Increase (or decrease) by one all the integers which are written on the vertices of that subtree. \n\nCalculate the minimum number of moves that is required to make all the integers written on the vertices of the given tree equal to zero.\n\n\n-----Input-----\n\nThe first line of the input contains n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 n;\u00a0a_{i} \u2260 b_{i}) indicating there's an edge between vertices a_{i} and b_{i}. It's guaranteed that the input graph is a tree. \n\nThe last line of the input contains a list of n space-separated integers v_1, v_2, ..., v_{n} (|v_{i}| \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operations needed to solve the task.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n3\n1 2\n1 3\n1 -1 1\n\nOutput\n3\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n\nYou are given N teams which can play with each exactly one time.Each team is assigned a strength as a positive integer.Find the sum of all the absolute difference between the strengths of all the possible two matches.\n\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, total of absolute difference between the strengths of all the possible two matches.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nZonal Computing Olympiad 2013, 10 Nov 2012\nN teams participate in a league cricket tournament on Mars, where each pair of distinct teams plays each other exactly once. Thus, there are a total of (N \u00d7 (N-1))/2 matches. An expert has assigned a strength to each team, a positive integer. Strangely, the Martian crowds love one-sided matches and the advertising revenue earned from a match is the absolute value of the difference between the strengths of the two matches. Given the strengths of the N teams, find the total advertising revenue earned from all the matches.\n\nFor example, suppose N is 4 and the team strengths for teams 1, 2, 3, and 4 are 3, 10, 3, and 5 respectively. Then the advertising revenues from the 6 matches are as follows:\n\nMatch Team A Team B Ad revenue 1 1 2 7  2 1 3 0  3 1 4 2  4 2 3 7  5 2 4 5  6 3 4 2 \n\nThus the total advertising revenue is 23.\n\n-----Input format-----\nLine 1 : A single integer, N.\nLine 2 : N space-separated integers, the strengths of the N teams.\n\n-----Output format-----\nA single integer, the total advertising revenue from the tournament.\n\n-----Sample input-----\n4\n3 10 3 5\n\n-----Sample output-----\n23\n\n-----Test data-----\nIn all subtasks, the strength of each team is an integer between 1 and 1,000 inclusive.\n- Subtask 1 (30 marks) : 2 \u2264 N \u2264 1,000.\n- Subtask 2 (70 marks) : 2 \u2264 N \u2264 200,000.\n\n-----Live evaluation data-----\n- Subtask 1: Testcases 0,1,2.\n- Subtask 2: Testcases 3,4,5.\n\n-----Note-----\nThe answer might not fit in a variable of type int. We recommend that type long long be used for computing all advertising revenues. If you use printf and scanf, you can use %lld for long long.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nA entity can have some specialization: A or B. She/he can have no specialization, but can't have both at the same time.\n\nYou need to form a team. So the team is considered perfect if it includes at least one A, at least one B and it consists of exactly three entities.\n\nYou know that $c$ of the students are specialised in A, $m$ are in B and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both specialized in A and B at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 A, 1 B and 1 without specialization;  all three teams consist of 1 A and 2 B;  no teams can be formed;  no teams can be formed;  one team consists of 1 A, 1 B and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 A, 1 B and 1 without specialization, one consists of 2 A and 1 B and one consists of 1 A and 2 B.\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that $c$ of your students are coders, $m$ are mathematicians and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line contains a single integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries. \n\nEach of the next $q$ lines contains three integers $c$, $m$ and $x$ ($0 \\le c, m, x \\le 10^8$) \u2014 the number of coders, mathematicians and students without any specialization in the university, respectively.\n\nNote that the no student is both coder and mathematician at the same time. \n\n\n-----Output-----\n\nPrint $q$ integers \u2014 the $i$-th of them should be the answer to the $i$ query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into. \n\n\n-----Example-----\nInput\n6\n1 1 1\n3 6 0\n0 0 0\n0 1 1\n10 1 10\n4 4 1\n\nOutput\n1\n3\n0\n0\n1\n3\n\n\n\n-----Note-----\n\nIn the first example here are how teams are formed:  the only team of 1 coder, 1 mathematician and 1 without specialization;  all three teams consist of 1 coder and 2 mathematicians;  no teams can be formed;  no teams can be formed;  one team consists of 1 coder, 1 mathematician and 1 without specialization, the rest aren't able to form any team;  one team consists of 1 coder, 1 mathematician and 1 without specialization, one consists of 2 coders and 1 mathematician and one consists of 1 coder and 2 mathematicians.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nPrint the words in the line in reveres order of a given line without any punctuation marks.\n\n-----Input:-----\nThe first line of input contains a single integer $N$, indicating the number of lines in the input. This is followed by $N$ lines of input text.\n\n-----Output:-----\n$N$ lines of output text containing the input lines in reverse order and where each line contains the words in reverse order as illustrated above.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 10000$.\n- There are at most $80$ characters in each line\n\n-----Sample input-----\n2\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n-----Sample output-----\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIn this problem the input will consist of a number of lines of English text consisting of the letters of the English alphabet, the punctuation marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white space characters (blank, newline). Your task is print the words in the text in reverse order without any punctuation marks.\nFor example consider the following candidate for the input text:\n$ $\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n$ $\nThe corresponding output would read as:\n$ $\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\n$ $\nThat is, the lines are printed in reverse order and in each line the words are printed in reverse order.\n\n-----Input:-----\nThe first line of input contains a single integer $N$, indicating the number of lines in the input. This is followed by $N$ lines of input text.\n\n-----Output:-----\n$N$ lines of output text containing the input lines in reverse order and where each line contains the words in reverse order as illustrated above.\n\n-----Constraints:-----\n- $1 \\leq N \\leq 10000$.\n- There are at most $80$ characters in each line\n\n-----Sample input-----\n2\nThis is a sample piece of text to illustrate this \nproblem.  If you are smart you will solve this right.\n\n-----Sample output-----\nright this solve will you smart are you If problem\nthis illustrate to text of piece sample a is This\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou have two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is $\\{0,1,\u2026,M-1\\}$, for some positive integer $M$. You draw a number from the first bag and a number from the second bag, and then sum them modulo $M$.\n\nWhat are the residues modulo $M$ that you cannot obtain with this action?\n\n\n-----Input-----\n\nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$) and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\nIn the second line of the output, print $K$ space-separated integers greater or equal than zero and less than $M$, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If $K$=0, do not output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n2\n0 2\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nEverybody seems to think that the Martians are green, but it turns out they are metallic pink and fat. Ajs has two bags of distinct nonnegative integers. The bags are disjoint, and the union of the sets of numbers in the bags is $\\{0,1,\u2026,M-1\\}$, for some positive integer $M$. Ajs draws a number from the first bag and a number from the second bag, and then sums them modulo $M$.\n\nWhat are the residues modulo $M$ that Ajs cannot obtain with this action?\n\n\n-----Input-----\n\nThe first line contains two positive integer $N$ ($1 \\leq N \\leq 200\\,000$) and $M$ ($N+1 \\leq M \\leq 10^{9}$), denoting the number of the elements in the first bag and the modulus, respectively.\n\nThe second line contains $N$ nonnegative integers $a_1,a_2,\\ldots,a_N$ ($0 \\leq a_1<a_2< \\ldots< a_N<M$), the contents of the first bag.\n\n \n\n\n-----Output-----\n\nIn the first line, output the cardinality $K$ of the set of residues modulo $M$ which Ajs cannot obtain.\n\nIn the second line of the output, print $K$ space-separated integers greater or equal than zero and less than $M$, which represent the residues Ajs cannot obtain. The outputs should be sorted in increasing order of magnitude. If $K$=0, do not output the second line.\n\n\n-----Examples-----\nInput\n2 5\n3 4\n\nOutput\n1\n2\n\nInput\n4 1000000000\n5 25 125 625\n\nOutput\n0\n\nInput\n2 4\n1 3\n\nOutput\n2\n0 2\n\n\n\n-----Note-----\n\nIn the first sample, the first bag and the second bag contain $\\{3,4\\}$ and $\\{0,1,2\\}$, respectively. Ajs can obtain every residue modulo $5$ except the residue $2$: $ 4+1 \\equiv 0, \\, 4+2 \\equiv 1, \\, 3+0 \\equiv 3, \\, 3+1 \\equiv 4 $ modulo $5$. One can check that there is no choice of elements from the first and the second bag which sum to $2$ modulo $5$.\n\nIn the second sample, the contents of the first bag are $\\{5,25,125,625\\}$, while the second bag contains all other nonnegative integers with at most $9$ decimal digits. Every residue modulo $1\\,000\\,000\\,000$ can be obtained as a sum of an element in the first bag and an element in the second bag.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n```if:python\nCreate a function `args_count`, that returns the count of passed arguments\n```\n```if:kotlin\nCreate a function `argsCount`, that returns the count of passed arguments\n```\n```if:ruby\nCreate a method `args_count`, that returns the count of passed arguments\n```\n```if:julia\nCreate a method `argscount`, that returns the count of passed arguments\n```\n```python\nargs_count(1, 2, 3) -> 3\nargs_count(1, 2, 3, 10) -> 4\n```\n\"\"\"\ndef args_count(*args, **kwargs):",
    "11": "Python 3\n\"\"\"\n```if:python\nCreate a function `args_count`, that returns the count of passed arguments\n```\n```if:kotlin\nCreate a function `argsCount`, that returns the count of passed arguments\n```\n```if:ruby\nCreate a method `args_count`, that returns the count of passed arguments\n```\n```if:julia\nCreate a method `argscount`, that returns the count of passed arguments\n```\n```python\nargs_count(1, 2, 3) -> 3\nargs_count(1, 2, 3, 10) -> 4\n```\n\"\"\"\ndef args_count(*args, **kwargs):",
    "12": "Python 3\n\"\"\"\nTask:\nMake a function that converts a word to pig latin. The rules of pig latin are:\n\nIf the word has more than 3 letters:\n  1. Take the first letter of a word and move it to the end\n  2. Add -ay to the word\nOtherwise leave the word alone.\n\n\nExample: \nInput: `hello` \nOutput: `ellohay`\n\"\"\"\ndef pig_latin(word):",
    "13": "Python 3\n\"\"\"\nTask:\nMake a function that converts a word to pig latin. The rules of pig latin are:\n\n```\nIf the word has more than 3 letters:\n  1. Take the first letter of a word and move it to the end\n  2. Add -ay to the word\nOtherwise leave the word alone.\n```\n\nExample: `hello` = `ellohay`\n\"\"\"\ndef pig_latin(word):",
    "14": "Python 3\n\"\"\"\nYou have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k < n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n\n-----Example-----\nInput\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput\n10\n0\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\nSome examples:   if you have four barrels, each containing $5$ liters of water, and $k = 1$, you may pour $5$ liters from the second barrel into the fourth, so the amounts of water in the barrels are $[5, 0, 5, 10]$, and the difference between the maximum and the minimum is $10$;  if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still $0$. \n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le k < n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of barrels and the number of pourings you can make.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{9}$), where $a_i$ is the initial amount of water the $i$-th barrel has.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times.\n\n\n-----Example-----\nInput\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\nOutput\n10\n0\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given two positive integers N and K. How many multisets of rational numbers satisfy all of the following conditions?\n - The multiset has exactly N elements and the sum of them is equal to K.\n - Each element can be represented as \\frac{1}{2^i}\\ (i = 0,1,\\dots).\nPrint the answer modulo 998244353.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 3000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of multisets of rational numbers that satisfy all of the given conditions modulo 998244353.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n2\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given two positive integers N and K. How many multisets of rational numbers satisfy all of the following conditions?\n - The multiset has exactly N elements and the sum of them is equal to K.\n - Each element of the multiset is one of 1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{8}, \\dots. In other words, each element can be represented as \\frac{1}{2^i}\\ (i = 0,1,\\dots).\nThe answer may be large, so print it modulo 998244353.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 3000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the number of multisets of rational numbers that satisfy all of the given conditions modulo 998244353.\n\n-----Sample Input-----\n4 2\n\n-----Sample Output-----\n2\n\nThe following two multisets satisfy all of the given conditions:\n - {1, \\frac{1}{2}, \\frac{1}{4}, \\frac{1}{4}}\n - {\\frac{1}{2}, \\frac{1}{2}, \\frac{1}{2}, \\frac{1}{2}}\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven a complete binary tree, count the number of nodes.\n\nExample:\n\n\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:",
    "19": "Python 3\n\"\"\"\nGiven a complete binary tree, count the number of nodes.\n\nNote: \n\nDefinition of a complete binary tree from Wikipedia:\nIn a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n\nExample:\n\n\nInput: \n    1\n   / \\\n  2   3\n / \\  /\n4  5 6\n\nOutput: 6\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def countNodes(self, root: TreeNode) -> int:"
}