{
    "0": "Python 3\n\"\"\"\n You're given two cakes and cut them into pieces. You know that there will be n people at the celebration (including yourself), so you have set n plates for the cakes. Now you are thinking about how to distribute the cakes between the plates. You want to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes.  To make your guests happy, you want to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, you want to know the maximum possible number x such that you can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake. \n-----Input----- The first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively. -----Output----- Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake. -----Examples----- Input 5 2 3 Output 1 Input 4 7 10 Output 3 -----Note----- In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it. In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIt's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one \u2014 into b pieces.\n\nIvan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. \n\nTo make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.\n\nHelp Ivan to calculate this number x!\n\n\n-----Input-----\n\nThe first line contains three integers n, a and b (1 \u2264 a, b \u2264 100, 2 \u2264 n \u2264 a + b) \u2014 the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.\n\n\n-----Output-----\n\nPrint the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.\n\n\n-----Examples-----\nInput\n5 2 3\n\nOutput\n1\n\nInput\n4 7 10\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.\n\nIn the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given $n$ mirrors, numbered from $1$ to $n$. Every day, Creatnx asks exactly one mirror \"Am I beautiful \". The $i$-th mirror will tell Creatnx that he is beautiful with probability $\\frac{p_i}{100}$ for all $1 \\le i \\le n$. Creatnx asks the mirrors one by one, starting from the $1$-st mirror. Every day, if he asks $i$-th mirror, there are two possibilities: \n-----Input----- The first line contains one integer $n$ ($1\\le n\\le 2\\cdot 10^5$)\u00a0\u2014 the number of mirrors. The second line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq 100$). -----Output----- Print the answer modulo $998244353$ in a single line. -----Examples----- Input 1 50 Output 2 Input 3 10 20 50 Output 112 -----Note----- In the first test, there is only one mirror and it tells, that Creatnx is beautiful with probability $\\frac{1}{2}$. So, the expected number of days until Creatnx becomes happy is $2$.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nCreatnx has $n$ mirrors, numbered from $1$ to $n$. Every day, Creatnx asks exactly one mirror \"Am I beautiful?\". The $i$-th mirror will tell Creatnx that he is beautiful with probability $\\frac{p_i}{100}$ for all $1 \\le i \\le n$.\n\nCreatnx asks the mirrors one by one, starting from the $1$-st mirror. Every day, if he asks $i$-th mirror, there are two possibilities:  The $i$-th mirror tells Creatnx that he is beautiful. In this case, if $i = n$ Creatnx will stop and become happy, otherwise he will continue asking the $i+1$-th mirror next day;  In the other case, Creatnx will feel upset. The next day, Creatnx will start asking from the $1$-st mirror again. \n\nYou need to calculate the expected number of days until Creatnx becomes happy.\n\nThis number should be found by modulo $998244353$. Formally, let $M = 998244353$. It can be shown that the answer can be expressed as an irreducible fraction $\\frac{p}{q}$, where $p$ and $q$ are integers and $q \\not \\equiv 0 \\pmod{M}$. Output the integer equal to $p \\cdot q^{-1} \\bmod M$. In other words, output such an integer $x$ that $0 \\le x < M$ and $x \\cdot q \\equiv p \\pmod{M}$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1\\le n\\le 2\\cdot 10^5$)\u00a0\u2014 the number of mirrors.\n\nThe second line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\leq p_i \\leq 100$).\n\n\n-----Output-----\n\nPrint the answer modulo $998244353$ in a single line.\n\n\n-----Examples-----\nInput\n1\n50\n\nOutput\n2\n\nInput\n3\n10 20 50\n\nOutput\n112\n\n\n\n-----Note-----\n\nIn the first test, there is only one mirror and it tells, that Creatnx is beautiful with probability $\\frac{1}{2}$. So, the expected number of days until Creatnx becomes happy is $2$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given a set of operations, find the number of ways to choose a string of length n to be able to get a one-letter string \"a\".\n-----Input----- The first line contains two integers n and q (2 \u2264 n \u2264 6, 1 \u2264 q \u2264 36)\u00a0\u2014 the length of the initial string and the number of available operations. The next q lines describe the possible operations. The i-th of them contains two strings a_{i} and b_{i} (|a_{i}| = 2, |b_{i}| = 1). It's guaranteed that a_{i} \u2260 a_{j} for i \u2260 j and that all a_{i} and b_{i} consist of only first six lowercase English letters. -----Output----- Print the number of strings of length n that Limak will be able to transform to string \"a\" by applying only operations given in the input. -----Examples----- Input 3 5 ab a cc c ca a ee c ff d Output 4 Input 2 8 af e dc d cc f bc b da b eb a bb b ff c Output 1 Input 6 2 bb a ba a Output 0 -----Note----- In the first sample, we count initial strings of length 3 from which Limak can get a required string \"a\". There are 4 such strings: \"abb\", \"cab\", \"cca\", \"eea\". The first one Limak can compress using operation 1 two times (changing \"ab\" to a single \"a\"). The first operation would change \"abb\" to \"ab\" and the second operation would change \"ab\" to \"a\". Other three strings may be compressed as follows:   \"cab\" $\\rightarrow$ \"ab\" $\\rightarrow$ \"a\"  \"cca\" $\\rightarrow$ \"ca\" $\\rightarrow$ \"a\"  \"eea\" $\\rightarrow$ \"ca\" $\\rightarrow$ \"a\"  In the second sample, the only correct initial string is \"eb\" because it can be immediately compressed to \"a\".\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nLimak is a little polar bear. Polar bears hate long strings and thus they like to compress them. You should also know that Limak is so young that he knows only first six letters of the English alphabet: 'a', 'b', 'c', 'd', 'e' and 'f'.\n\nYou are given a set of q possible operations. Limak can perform them in any order, any operation may be applied any number of times. The i-th operation is described by a string a_{i} of length two and a string b_{i} of length one. No two of q possible operations have the same string a_{i}.\n\nWhen Limak has a string s he can perform the i-th operation on s if the first two letters of s match a two-letter string a_{i}. Performing the i-th operation removes first two letters of s and inserts there a string b_{i}. See the notes section for further clarification.\n\nYou may note that performing an operation decreases the length of a string s exactly by 1. Also, for some sets of operations there may be a string that cannot be compressed any further, because the first two letters don't match any a_{i}.\n\nLimak wants to start with a string of length n and perform n - 1 operations to finally get a one-letter string \"a\". In how many ways can he choose the starting string to be able to get \"a\"? Remember that Limak can use only letters he knows.\n\n\n-----Input-----\n\nThe first line contains two integers n and q (2 \u2264 n \u2264 6, 1 \u2264 q \u2264 36)\u00a0\u2014 the length of the initial string and the number of available operations.\n\nThe next q lines describe the possible operations. The i-th of them contains two strings a_{i} and b_{i} (|a_{i}| = 2, |b_{i}| = 1). It's guaranteed that a_{i} \u2260 a_{j} for i \u2260 j and that all a_{i} and b_{i} consist of only first six lowercase English letters.\n\n\n-----Output-----\n\nPrint the number of strings of length n that Limak will be able to transform to string \"a\" by applying only operations given in the input.\n\n\n-----Examples-----\nInput\n3 5\nab a\ncc c\nca a\nee c\nff d\n\nOutput\n4\n\nInput\n2 8\naf e\ndc d\ncc f\nbc b\nda b\neb a\nbb b\nff c\n\nOutput\n1\n\nInput\n6 2\nbb a\nba a\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, we count initial strings of length 3 from which Limak can get a required string \"a\". There are 4 such strings: \"abb\", \"cab\", \"cca\", \"eea\". The first one Limak can compress using operation 1 two times (changing \"ab\" to a single \"a\"). The first operation would change \"abb\" to \"ab\" and the second operation would change \"ab\" to \"a\".\n\nOther three strings may be compressed as follows:   \"cab\" $\\rightarrow$ \"ab\" $\\rightarrow$ \"a\"  \"cca\" $\\rightarrow$ \"ca\" $\\rightarrow$ \"a\"  \"eea\" $\\rightarrow$ \"ca\" $\\rightarrow$ \"a\" \n\nIn the second sample, the only correct initial string is \"eb\" because it can be immediately compressed to \"a\".\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n A dragon symbolizes wisdom, power and wealth. On Lunar New Year's Day, people model a dragon with bamboo strips and clothes, raise them with rods, and hold the rods high and low to resemble a flying dragon. A performer holding the rod low is represented by a 1, while one holding it high is represented by a 2. Thus, the line of performers can be represented by a sequence a_1, a_2, ..., a_{n}. Little Tommy is among them. He would like to choose an interval [l, r] (1   l  r  n), then reverse a_{l}, a_{l} + 1, ..., a_{r} so that the length of the longest non-decreasing subsequence of the new sequence is maximum. A non-decreasing subsequence is a sequence of indices p_1, p_2, ..., p_{k}, such that p_1 < p_2 < ... < p_{k} and a_{p}_1   a_{p}_2   ...   a_{p}_{k}. The length of the subsequence is k. \n\n-----Input----- The first line contains an integer n (1 \u2264 n \u2264 2000), denoting the length of the original sequence. The second line contains n space-separated integers, describing the original sequence a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 2, i = 1, 2, ..., n). -----Output----- Print a single integer, which means the maximum possible length of the longest non-decreasing subsequence of the new sequence. -----Examples----- Input 4 1 2 1 2 Output 4 Input 10 1 1 2 2 2 1 1 2 2 1 Output 9 -----Note----- In the first example, after reversing [2, 3], the array will become [1, 1, 2, 2], where the length of the longest non-decreasing subsequence is 4. In the second example, after reversing [3, 7], the array will become [1, 1, 1, 1, 2, 2, 2, 2, 2, 1], where the length of the longest non-decreasing subsequence is 9.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA dragon symbolizes wisdom, power and wealth. On Lunar New Year's Day, people model a dragon with bamboo strips and clothes, raise them with rods, and hold the rods high and low to resemble a flying dragon.\n\nA performer holding the rod low is represented by a 1, while one holding it high is represented by a 2. Thus, the line of performers can be represented by a sequence a_1, a_2, ..., a_{n}.\n\nLittle Tommy is among them. He would like to choose an interval [l, r] (1 \u2264 l \u2264 r \u2264 n), then reverse a_{l}, a_{l} + 1, ..., a_{r} so that the length of the longest non-decreasing subsequence of the new sequence is maximum.\n\nA non-decreasing subsequence is a sequence of indices p_1, p_2, ..., p_{k}, such that p_1 < p_2 < ... < p_{k} and a_{p}_1 \u2264 a_{p}_2 \u2264 ... \u2264 a_{p}_{k}. The length of the subsequence is k.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 2000), denoting the length of the original sequence.\n\nThe second line contains n space-separated integers, describing the original sequence a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 2, i = 1, 2, ..., n).\n\n\n-----Output-----\n\nPrint a single integer, which means the maximum possible length of the longest non-decreasing subsequence of the new sequence.\n\n\n-----Examples-----\nInput\n4\n1 2 1 2\n\nOutput\n4\n\nInput\n10\n1 1 2 2 2 1 1 2 2 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example, after reversing [2, 3], the array will become [1, 1, 2, 2], where the length of the longest non-decreasing subsequence is 4.\n\nIn the second example, after reversing [3, 7], the array will become [1, 1, 1, 1, 2, 2, 2, 2, 2, 1], where the length of the longest non-decreasing subsequence is 9.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Emuskald is a well-known illusionist. One of his trademark tricks involves a set of magical boxes. The essence of the trick is in packing the boxes inside other boxes. From the top view each magical box looks like a square with side length equal to 2^{k} (k is an integer, k \u00a00) units. A magical box v can be put inside a magical box u, if side length of v is strictly less than the side length of u. In particular, Emuskald can put 4 boxes of side length 2^{k} - 1 into one box of side length 2^{k}, or as in the following figure: \u00a0[Image] \u00a0Emuskald is about to go on tour performing around the world, and needs to pack his magical boxes for the trip. He has decided that the best way to pack them would be inside another magical box, but magical boxes are quite expensive to make. Help him find the smallest magical box that can fit all his boxes. \n\n-----Input----- The first line of input contains an integer n (1 \u2264 n \u2264 10^5), the number of different sizes of boxes Emuskald has. Each of following n lines contains two integers k_{i} and a_{i} (0 \u2264 k_{i} \u2264 10^9, 1 \u2264 a_{i} \u2264 10^9), which means that Emuskald has a_{i} boxes with side length 2^{k}_{i}. It is guaranteed that all of k_{i} are distinct. -----Output----- Output a single integer p, such that the smallest magical box that can contain all of Emuskald\u2019s boxes has side length 2^{p}. -----Examples----- Input 2 0 3 1 5 Output 3 Input 1 0 4 Output 1 Input 2 1 10 2 2 Output 3 -----Note----- Picture explanation. If we have 3 boxes with side length 2 and 5 boxes with side length 1, then we can put all these boxes inside a box with side length 4, for example, as shown in the picture. In the second test case, we can put all four small boxes into a box with side length 2.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nEmuskald is a well-known illusionist. One of his trademark tricks involves a set of magical boxes. The essence of the trick is in packing the boxes inside other boxes.\n\nFrom the top view each magical box looks like a square with side length equal to 2^{k} (k is an integer, k \u2265 0) units. A magical box v can be put inside a magical box u, if side length of v is strictly less than the side length of u. In particular, Emuskald can put 4 boxes of side length 2^{k} - 1 into one box of side length 2^{k}, or as in the following figure:\n\n [Image] \n\nEmuskald is about to go on tour performing around the world, and needs to pack his magical boxes for the trip. He has decided that the best way to pack them would be inside another magical box, but magical boxes are quite expensive to make. Help him find the smallest magical box that can fit all his boxes.\n\n\n-----Input-----\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 10^5), the number of different sizes of boxes Emuskald has. Each of following n lines contains two integers k_{i} and a_{i} (0 \u2264 k_{i} \u2264 10^9, 1 \u2264 a_{i} \u2264 10^9), which means that Emuskald has a_{i} boxes with side length 2^{k}_{i}. It is guaranteed that all of k_{i} are distinct.\n\n\n-----Output-----\n\nOutput a single integer p, such that the smallest magical box that can contain all of Emuskald\u2019s boxes has side length 2^{p}.\n\n\n-----Examples-----\nInput\n2\n0 3\n1 5\n\nOutput\n3\n\nInput\n1\n0 4\n\nOutput\n1\n\nInput\n2\n1 10\n2 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nPicture explanation. If we have 3 boxes with side length 2 and 5 boxes with side length 1, then we can put all these boxes inside a box with side length 4, for example, as shown in the picture.\n\nIn the second test case, we can put all four small boxes into a box with side length 2.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given a set of coins, find the minimum number of coins required to dispense a given amount. \n-----Input----- Input consists of a single case. The first line contains an integer $n$ $(2 \\leq n \\leq 100)$, the number of denominations in the coin system. The next line contains the $n$ denominations as space-separated integers $c_1 \\ c_2 \\ \\ldots \\ c_ n$, where $c_1 = 1$ and $c_1 < c_2 < \\ldots < c_ n \\leq 10^6$. -----Output----- Output \u201ccanonical\u201d if the coin system is canonical, or \u201cnon-canonical\u201d if the coin system is non-canonical. -----Examples----- Sample Input 1: 4 1 2 4 8 Sample Output 1: canonical Sample Input 2: 3 1 5 8 Sample Output 2: non-canonical\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nA coin system $S$ is a finite (nonempty) set of distinct positive integers corresponding to coin values, also called denominations, in a real or imagined monetary system. For example, the coin system in common use in Canada is $\\{ 1,5,10,25,100,200\\} $, where $1$ corresponds to a $1$-cent coin and $200$ corresponds to a $200$-cent ($2$-dollar) coin. For any coin system $S$, we assume that there is an unlimited supply of coins of each denomination, and we also assume that $S$ contains $1$, since this guarantees that any positive integer can be written as a sum of (possibly repeated) values in $S$.\n\nCashiers all over the world face (and solve) the following problem: For a given coin system and a positive integer amount owed to a customer, what is the smallest number of coins required to dispense exactly that amount? For example, suppose a cashier in Canada owes a customer $83$ cents. One possible solution is $25+25+10+10+10+1+1+1$, i.e., $8$ coins, but this is not optimal, since the cashier could instead dispense $25+25+25+5+1+1+1$, i.e., $7$ coins (which is optimal in this case). Fortunately, the Canadian coin system has the nice property that the greedy algorithm always yields an optimal solution, as do the coin systems used in most countries. The greedy algorithm involves repeatedly choosing a coin of the largest denomination that is less than or equal to the amount still owed, until the amount owed reaches zero. A coin system for which the greedy algorithm is always optimal is called canonical.\n\nYour challenge is this: Given a coin system $S = \\{ c_1, c_2, \\ldots , c_ n\\} $, determine whether $S$ is canonical or non-canonical. Note that if $S$ is non-canonical then there exists at least one counterexample, i.e., a positive integer $x$ such that the minimum number of coins required to dispense exactly $x$ is less than the number of coins used by the greedy algorithm. An example of a non-canonical coin system is $\\{ 1,3,4\\} $, for which $6$ is a counterexample, since the greedy algorithm yields $4+1+1$ ($3$ coins), but an optimal solution is $3+3$ ($2$ coins). A useful fact (due to Dexter Kozen and Shmuel Zaks) is that if $S$ is non-canonical, then the smallest counterexample is less than the sum of the two largest denominations.\n\n-----Input-----\nInput consists of a single case. The first line contains an integer $n$ $(2 \\leq n \\leq 100)$, the number of denominations in the coin system. The next line contains the $n$ denominations as space-separated integers $c_1 \\ c_2 \\ \\ldots \\ c_ n$, where $c_1 = 1$ and $c_1 < c_2 < \\ldots < c_ n \\leq 10^6$.\n\n-----Output-----\nOutput \u201ccanonical\u201d if the coin system is canonical, or \u201cnon-canonical\u201d if the coin system is non-canonical.\n\n-----Examples-----\nSample Input 1:\n4\n1 2 4 8\nSample Output 1:\ncanonical\n\nSample Input 2:\n3\n1 5 8\nSample Output 2:\nnon-canonical\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Molly Hooper has n different kinds of chemicals arranged in a line. Each of the chemicals has an affection value, The i-th of them has affection value a_{i}. Molly wants Sherlock to fall in love with her. She intends to do this by mixing a contiguous segment of chemicals together to make a love potion with total affection value as a non-negative integer power of k. Total affection value of a continuous segment of chemicals is the sum of affection values of each chemical in that segment. Help her to do so in finding the total number of such segments.\n-----Input----- The first line of input contains two integers, n and k, the number of chemicals and the number, such that the total affection value is a non-negative power of this number k. (1 \u2264 n \u2264 10^5, 1 \u2264 |k| \u2264 10). Next line contains n integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 affection values of chemicals. -----Output----- Output a single integer\u00a0\u2014 the number of valid segments. -----Examples----- Input 4 2 2 2 2 2 Output 8 Input 4 -3 3 -6 -3 12 Output 3 -----Note----- Do keep in mind that k^0 = 1. In the first sample, Molly can get following different affection values:  2: segments [1, 1], [2, 2], [3, 3], [4, 4];  4: segments [1, 2], [2, 3], [3, 4];  6: segments [1, 3], [2, 4];  8: segments [1, 4].  Out of these, 2, 4 and 8 are powers of k = 2. Therefore, the answer is 8. In the second sample, Molly can choose segments [1, 2], [3, 3], [3, 4].\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nMolly Hooper has n different kinds of chemicals arranged in a line. Each of the chemicals has an affection value, The i-th of them has affection value a_{i}.\n\nMolly wants Sherlock to fall in love with her. She intends to do this by mixing a contiguous segment of chemicals together to make a love potion with total affection value as a non-negative integer power of k. Total affection value of a continuous segment of chemicals is the sum of affection values of each chemical in that segment.\n\nHelp her to do so in finding the total number of such segments.\n\n\n-----Input-----\n\nThe first line of input contains two integers, n and k, the number of chemicals and the number, such that the total affection value is a non-negative power of this number k. (1 \u2264 n \u2264 10^5, 1 \u2264 |k| \u2264 10).\n\nNext line contains n integers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 affection values of chemicals.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the number of valid segments.\n\n\n-----Examples-----\nInput\n4 2\n2 2 2 2\n\nOutput\n8\n\nInput\n4 -3\n3 -6 -3 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nDo keep in mind that k^0 = 1.\n\nIn the first sample, Molly can get following different affection values:  2: segments [1, 1], [2, 2], [3, 3], [4, 4];\n\n 4: segments [1, 2], [2, 3], [3, 4];\n\n 6: segments [1, 3], [2, 4];\n\n 8: segments [1, 4]. \n\nOut of these, 2, 4 and 8 are powers of k = 2. Therefore, the answer is 8.\n\nIn the second sample, Molly can choose segments [1, 2], [3, 3], [3, 4].\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given two strings $s$ and $t$, if $s$ matches $t$, print \"YES\", otherwise print \"NO\". \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of the string $s$ and the length of the string $t$, respectively. The second line contains string $s$ of length $n$, which consists of lowercase Latin letters and at most one wildcard character '*'. The third line contains string $t$ of length $m$, which consists only of lowercase Latin letters. -----Output----- Print \"YES\" (without quotes), if you can obtain the string $t$ from the string $s$. Otherwise print \"NO\" (without quotes). -----Examples----- Input 6 10 code*s codeforces Output YES Input 6 5 vk*cup vkcup Output YES Input 1 1 v k Output NO Input 9 6 gfgf*gfgf gfgfgf Output NO -----Note----- In the first example a wildcard character '*' can be replaced with a string \"force\". So the string $s$ after this replacement is \"codeforces\" and the answer is \"YES\". In the second example a wildcard character '*' can be replaced with an empty string. So the string $s$ after this replacement is \"vkcup\" and the answer is \"YES\". There is no wildcard character '*' in the third example and the strings \"v\" and \"k\" are different so the answer is \"NO\". In the fourth example there is no such replacement of a wildcard character '*' that you can obtain the string $t$ so the answer is \"NO\".\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given two strings $s$ and $t$. The string $s$ consists of lowercase Latin letters and at most one wildcard character '*', the string $t$ consists only of lowercase Latin letters. The length of the string $s$ equals $n$, the length of the string $t$ equals $m$.\n\nThe wildcard character '*' in the string $s$ (if any) can be replaced with an arbitrary sequence (possibly empty) of lowercase Latin letters. No other character of $s$ can be replaced with anything. If it is possible to replace a wildcard character '*' in $s$ to obtain a string $t$, then the string $t$ matches the pattern $s$.\n\nFor example, if $s=$\"aba*aba\" then the following strings match it \"abaaba\", \"abacaba\" and \"abazzzaba\", but the following strings do not match: \"ababa\", \"abcaaba\", \"codeforces\", \"aba1aba\", \"aba?aba\".\n\nIf the given string $t$ matches the given string $s$, print \"YES\", otherwise print \"NO\".\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of the string $s$ and the length of the string $t$, respectively.\n\nThe second line contains string $s$ of length $n$, which consists of lowercase Latin letters and at most one wildcard character '*'.\n\nThe third line contains string $t$ of length $m$, which consists only of lowercase Latin letters.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if you can obtain the string $t$ from the string $s$. Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n6 10\ncode*s\ncodeforces\n\nOutput\nYES\n\nInput\n6 5\nvk*cup\nvkcup\n\nOutput\nYES\n\nInput\n1 1\nv\nk\n\nOutput\nNO\n\nInput\n9 6\ngfgf*gfgf\ngfgfgf\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example a wildcard character '*' can be replaced with a string \"force\". So the string $s$ after this replacement is \"codeforces\" and the answer is \"YES\".\n\nIn the second example a wildcard character '*' can be replaced with an empty string. So the string $s$ after this replacement is \"vkcup\" and the answer is \"YES\".\n\nThere is no wildcard character '*' in the third example and the strings \"v\" and \"k\" are different so the answer is \"NO\".\n\nIn the fourth example there is no such replacement of a wildcard character '*' that you can obtain the string $t$ so the answer is \"NO\".\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Instructors of Some Informatics School make students go to bed. The house contains n rooms, in each room exactly b students were supposed to sleep. However, at the time of curfew it happened that many students are not located in their assigned rooms. The rooms are arranged in a row and numbered from 1 to n. Initially, in i-th room there are a_{i} students. All students are currently somewhere in the house, therefore a_1 + a_2 + ... + a_{n} = nb. Also 2 instructors live in this house. The process of curfew enforcement is the following. One instructor starts near room 1 and moves toward room n, while the second instructor starts near room n and moves toward room 1. After processing current room, each instructor moves on to the next one. Both instructors enter rooms and move simultaneously, if n is odd, then only the first instructor processes the middle room. When all rooms are processed, the process ends. When an instructor processes a room, she counts the number of students in the room, then turns off the light, and locks the room. Also, if the number of students inside the processed room is not equal to b, the instructor writes down the number of this room into her notebook (and turns off the light, and locks the room). Instructors are in a hurry (to prepare the study plan for the next day), so they don't care about who is in the room, but only about the number of students. While instructors are inside the rooms, students can run between rooms that are not locked and not being processed. A student can run by at most d rooms, that is she can move to a room with number that differs my\n-----Input----- The first line contains three integers n, d and b (2 \u2264 n \u2264 100 000, 1 \u2264 d \u2264 n - 1, 1 \u2264 b \u2264 10 000), number of rooms in the house, running distance of a student, official number of students in a room. The second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9), i-th of which stands for the number of students in the i-th room before curfew announcement. It is guaranteed that a_1 + a_2 + ... + a_{n} = nb. -----Output----- Output one integer, the minimal possible value of the maximum of x_{i}. -----Examples----- Input 5 1 1 1 0 0 0 4 Output 1 Input 6 1 2 3 8 0 1 0 0 Output 2 -----Note----- In the first sample the first three rooms are processed by the first instructor, and the last two are processed by the second instructor. One of the optimal strategies is the following: firstly three students run from room 5 to room 4, on the next stage two of them run to room 3, and one of those two hides under a bed. This way, the first instructor writes down room 2, and the second writes down nothing. In the second sample one of the optimal strategies is the following: firstly all students in room 1 hide, all students from room 2 run to room 3. On the next stage one student runs from room 3 to room 4, and 5 students hide. This way, the first instructor writes down rooms 1 and 2, the second instructor writes down rooms 5 and 6.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nInstructors of Some Informatics School make students go to bed.\n\nThe house contains n rooms, in each room exactly b students were supposed to sleep. However, at the time of curfew it happened that many students are not located in their assigned rooms. The rooms are arranged in a row and numbered from 1 to n. Initially, in i-th room there are a_{i} students. All students are currently somewhere in the house, therefore a_1 + a_2 + ... + a_{n} = nb. Also 2 instructors live in this house.\n\nThe process of curfew enforcement is the following. One instructor starts near room 1 and moves toward room n, while the second instructor starts near room n and moves toward room 1. After processing current room, each instructor moves on to the next one. Both instructors enter rooms and move simultaneously, if n is odd, then only the first instructor processes the middle room. When all rooms are processed, the process ends.\n\nWhen an instructor processes a room, she counts the number of students in the room, then turns off the light, and locks the room. Also, if the number of students inside the processed room is not equal to b, the instructor writes down the number of this room into her notebook (and turns off the light, and locks the room). Instructors are in a hurry (to prepare the study plan for the next day), so they don't care about who is in the room, but only about the number of students.\n\nWhile instructors are inside the rooms, students can run between rooms that are not locked and not being processed. A student can run by at most d rooms, that is she can move to a room with number that differs my at most d. Also, after (or instead of) running each student can hide under a bed in a room she is in. In this case the instructor will not count her during the processing. In each room any number of students can hide simultaneously.\n\nFormally, here is what's happening:  A curfew is announced, at this point in room i there are a_{i} students.  Each student can run to another room but not further than d rooms away from her initial room, or stay in place. After that each student can optionally hide under a bed.  Instructors enter room 1 and room n, they count students there and lock the room (after it no one can enter or leave this room).  Each student from rooms with numbers from 2 to n - 1 can run to another room but not further than d rooms away from her current room, or stay in place. Each student can optionally hide under a bed.  Instructors move from room 1 to room 2 and from room n to room n - 1.  This process continues until all rooms are processed. \n\nLet x_1 denote the number of rooms in which the first instructor counted the number of non-hidden students different from b, and x_2 be the same number for the second instructor. Students know that the principal will only listen to one complaint, therefore they want to minimize the maximum of numbers x_{i}. Help them find this value if they use the optimal strategy.\n\n\n-----Input-----\n\nThe first line contains three integers n, d and b (2 \u2264 n \u2264 100 000, 1 \u2264 d \u2264 n - 1, 1 \u2264 b \u2264 10 000), number of rooms in the house, running distance of a student, official number of students in a room.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9), i-th of which stands for the number of students in the i-th room before curfew announcement.\n\nIt is guaranteed that a_1 + a_2 + ... + a_{n} = nb.\n\n\n-----Output-----\n\nOutput one integer, the minimal possible value of the maximum of x_{i}.\n\n\n-----Examples-----\nInput\n5 1 1\n1 0 0 0 4\n\nOutput\n1\n\nInput\n6 1 2\n3 8 0 1 0 0\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample the first three rooms are processed by the first instructor, and the last two are processed by the second instructor. One of the optimal strategies is the following: firstly three students run from room 5 to room 4, on the next stage two of them run to room 3, and one of those two hides under a bed. This way, the first instructor writes down room 2, and the second writes down nothing.\n\nIn the second sample one of the optimal strategies is the following: firstly all students in room 1 hide, all students from room 2 run to room 3. On the next stage one student runs from room 3 to room 4, and 5 students hide. This way, the first instructor writes down rooms 1 and 2, the second instructor writes down rooms 5 and 6.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You have located a major supply line that the enemy has been using. With satellite imaging, you ve been able to determine the current location and velocity of every vehicle along the supply line, which is for all practical purposes an infinitely long straight line. Furthermore, you know that each vehicle moves at constant velocity, and that they can pass by each other without incident along this supply line. What you need to do now is deploy an air drone with special sensors that can give you readings of the contents of the vehicles. The sensor is capable of reading everything in its range instantaneously, but power limitations allow it to do so only once. In order to minimize the required range, you want to deploy it when the vehicles are as close to each other as possible. Given knowledge of the current location and velocity of all the vehicles, what is the closest that the vehicles will get to each other \n-----Input----- There will be a single test case in the input. This test case will begin with a line with a single integer $n$ ($1 \\le n \\le 100000$) representing the number of vehicles. Each of the next $n$ lines will have two integers, $x$ and $v$ ($-100000 \\le x,v \\le 100000$), indicating the position ($x$, in meters) and velocity ($v$, in meters/hour) of that vehicle. The sign of velocity indicates direction. -----Output----- Output a single number equal to the minimum distance that will cover all of the vehicles at some time, in meters. Your result should have an absolute or relative error of less than $10^{-3}$. -----Examples----- Sample Input 1: 2 -100 1 100 -1 Sample Output 1: 0 Sample Input 2: 3 -100 1 100 -1 101 -1 Sample Output 2: 1\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou have located a major supply line that the enemy has been using. With satellite imaging, you\u2019ve been able to determine the current location and velocity of every vehicle along the supply line, which is for all practical purposes an infinitely long straight line. Furthermore, you know that each vehicle moves at constant velocity, and that they can pass by each other without incident along this supply line. What you need to do now is deploy an air drone with special sensors that can give you readings of the contents of the vehicles. The sensor is capable of reading everything in its range instantaneously, but power limitations allow it to do so only once. In order to minimize the required range, you want to deploy it when the vehicles are as close to each other as possible. Given knowledge of the current location and velocity of all the vehicles, what is the closest that the vehicles will get to each other?\n\n-----Input-----\nThere will be a single test case in the input. This test case will begin with a line with a single integer $n$ ($1 \\le n \\le 100000$) representing the number of vehicles. Each of the next $n$ lines will have two integers, $x$ and $v$ ($-100000 \\le x,v \\le 100000$), indicating the position ($x$, in meters) and velocity ($v$, in meters/hour) of that vehicle. The sign of velocity indicates direction.\n\n-----Output-----\nOutput a single number equal to the minimum distance that will cover all of the vehicles at some time, in meters. Your result should have an absolute or relative error of less than $10^{-3}$.\n\n-----Examples-----\nSample Input 1:\n2\n-100 1\n100 -1\nSample Output 1:\n0\n\nSample Input 2:\n3\n-100 1\n100 -1\n101 -1\nSample Output 2:\n1\n\"\"\"\ndef code():"
}