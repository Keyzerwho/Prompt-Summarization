{
    "0": "Python 3\n\"\"\"\n0,1,0,1,2,0,1,2,3,0,1,2,3,4........\nThe sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$.\nFind the Nth term of the sequence.\n\n-----Input:-----\n- The first-line will contain $T$, the number of test cases. Then the test case follows. \n- Each test case contains a single numbers N.\n\n-----Output:-----\nPrint the Nth element of the sequence\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N  \\leq 10^{18}$\n\n-----Sample Input:-----\n5\n8\n9\n20\n32\n109\n\n-----Sample Output:-----\n2\n3\n5\n4\n4\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSandu, a teacher in Chefland introduced his students to a new sequence i.e.\n0,1,0,1,2,0,1,2,3,0,1,2,3,4........\nThe Sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$\nStudents being curious about the sequence asks the Nth element of the sequence. Help Sandu to answer the Students\n\n-----Input:-----\n- The first-line will contain $T$, the number of test cases. Then the test case follows. \n- Each test case contains a single numbers N.\n\n-----Output:-----\nPrint the Nth element of the sequence\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N  \\leq 10^{18}$\n\n-----Sample Input:-----\n5\n8\n9\n20\n32\n109\n\n-----Sample Output:-----\n2\n3\n5\n4\n4\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nCameras are installed on the nodes of the binary tree.\u00a0\nEach camera at\u00a0a node can monitor its parent, itself, and its immediate children.\nCalculate the minimum number of cameras needed to monitor all nodes of the tree.\n\u00a0\nExample 1:\n\n\nInput: [0,0,null,0,0]\nOutput: 1\n\n\nExample 2:\n\nInput: [0,0,null,0,null,0,null,null,0]\nOutput: 2\n\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:",
    "3": "Python 3\n\"\"\"\nGiven a binary tree, we install cameras on the nodes of the tree.\u00a0\nEach camera at\u00a0a node can monitor its parent, itself, and its immediate children.\nCalculate the minimum number of cameras needed to monitor all nodes of the tree.\n\u00a0\nExample 1:\n\n\nInput: [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.\n\n\nExample 2:\n\nInput: [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\n\n\nNote:\n\nThe number of nodes in the given tree will be in the range\u00a0[1, 1000].\nEvery node has value 0.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def minCameraCover(self, root: TreeNode) -> int:",
    "4": "Python 3\n\"\"\"\nYou have the radius of a circle with the center in point (0,0). Write a function that calculates the number of points in the circle where (x,y) are integers.  0 <= radius <= 1000.\n\nExample: \nInput:\nradius = 2\nOutput:\n13\n\"\"\"\ndef points(n):",
    "5": "Python 3\n\"\"\"\nYou have the `radius` of a circle with the center in point `(0,0)`.\n\nWrite a function that calculates the number of points in the circle where `(x,y)` - the cartesian coordinates of the points - are `integers`.\n\nExample: for `radius = 2` the result should be `13`.\n\n`0 <= radius <= 1000`\n\n![](http://i.imgur.com/1SMov3s.png)\n\"\"\"\ndef points(n):",
    "6": "Python 3\n\"\"\"\nYou are at the origin. You will make $n$ moves. There are $n$ vectors $\\vec{v_1}, \\vec{v_2}, \\cdots, \\vec{v_n}$. During the $i$-th move you will either move in the direction $\\vec{v_i}$ or $-\\vec{v_i}$.\n\nFigure out a sequence of moves such that your final position $p$ satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of moves.\n\nEach of the following lines contains two space-separated integers $x_i$ and $y_i$, meaning that $\\vec{v_i} = (x_i, y_i)$. We have that $|v_i| \\le 10^6$ for all $i$.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers $c_1, c_2, \\cdots, c_n$, each of which is either $1$ or $-1$. Your solution is correct if the value of $p = \\sum_{i = 1}^n c_i \\vec{v_i}$, satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\nIt can be shown that a solution always exists under the given constraints.\n\n\n-----Examples-----\nInput\n3\n999999 0\n0 999999\n999999 0\n\nOutput\n1 1 -1 \n\nInput\n1\n-824590 246031\n\nOutput\n1 \n\nInput\n8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n\nOutput\n1 1 1 1 1 1 1 -1\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nFor a vector $\\vec{v} = (x, y)$, define $|v| = \\sqrt{x^2 + y^2}$.\n\nAllen had a bit too much to drink at the bar, which is at the origin. There are $n$ vectors $\\vec{v_1}, \\vec{v_2}, \\cdots, \\vec{v_n}$. Allen will make $n$ moves. As Allen's sense of direction is impaired, during the $i$-th move he will either move in the direction $\\vec{v_i}$ or $-\\vec{v_i}$. In other words, if his position is currently $p = (x, y)$, he will either move to $p + \\vec{v_i}$ or $p - \\vec{v_i}$.\n\nAllen doesn't want to wander too far from home (which happens to also be the bar). You need to help him figure out a sequence of moves (a sequence of signs for the vectors) such that his final position $p$ satisfies $|p| \\le 1.5 \\cdot 10^6$ so that he can stay safe.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of moves.\n\nEach of the following lines contains two space-separated integers $x_i$ and $y_i$, meaning that $\\vec{v_i} = (x_i, y_i)$. We have that $|v_i| \\le 10^6$ for all $i$.\n\n\n-----Output-----\n\nOutput a single line containing $n$ integers $c_1, c_2, \\cdots, c_n$, each of which is either $1$ or $-1$. Your solution is correct if the value of $p = \\sum_{i = 1}^n c_i \\vec{v_i}$, satisfies $|p| \\le 1.5 \\cdot 10^6$.\n\nIt can be shown that a solution always exists under the given constraints.\n\n\n-----Examples-----\nInput\n3\n999999 0\n0 999999\n999999 0\n\nOutput\n1 1 -1 \n\nInput\n1\n-824590 246031\n\nOutput\n1 \n\nInput\n8\n-67761 603277\n640586 -396671\n46147 -122580\n569609 -2112\n400 914208\n131792 309779\n-850150 -486293\n5272 721899\n\nOutput\n1 1 1 1 1 1 1 -1\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n# Invalid Login - Bug Fixing #11\n\nOh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!\n\n## Task\n\nsearch the password string for any injected code \nInjected code is any thing that contains `||` or `//` \nIf you find any ,return `\"Wrong username or password!\"` \n\n## Preloaded\n\nYou will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.\n\n## Usage\n\n```python\ndatabase = Database()\ndatabase.login('Timmy', 'password')\n```\n\"\"\"\ndef validate(username, password):",
    "9": "Python 3\n\"\"\"\n# Invalid Login - Bug Fixing #11\n\nOh NO! Timmy has moved divisions... but now he's in the field of security. Timmy, being the top coder he is, has allowed some bad code through. You must help Timmy and filter out any injected code!\n\n## Task\n\nYour task is simple, search the password string for any injected code (Injected code is any thing that would be used to exploit flaws in the current code, so basically anything that contains `||` or `//`) if you find any you must return `\"Wrong username or password!\"` because no one likes someone trying to cheat their way in!\n\n## Preloaded\n\nYou will be given a preloaded class called `Database` with a method `login` this takes two parameters `username` and `password`. This is a generic login function which will check the database for the user it will return either `'Successfully Logged in!'` if it passes the test or `'Wrong username or password!'` if either the password is wrong or username does not exist.\n\n## Usage\n\n```python\ndatabase = Database()\ndatabase.login('Timmy', 'password')\n```\n\"\"\"\ndef validate(username, password):",
    "10": "Python 3\n\"\"\"\nYou are given an operation and two values. Return result of numbers after applying the operation.\n\nExample 1:\nInput: basic_op('+', 4, 7)         \nOutput: 11\n\nExample 2:\nInput: basic_op('-', 15, 18)\nOutput: -3\n\nExample 3:\nInput: basic_op('*', 5, 5)\nOutput: 25\n\nExample 4:\nInput: basic_op('/', 49, 7)\nOutput: 7\n\n\"\"\"\ndef basic_op(operator, value1, value2):",
    "11": "Python 3\n\"\"\"\nYour task is to create a function that does four basic mathematical operations.\n\nThe function should take three arguments - operation(string/char), value1(number), value2(number).  \nThe function should return result of numbers after applying the chosen operation.\n\n### Examples\n\n```python\nbasic_op('+', 4, 7)         # Output: 11\nbasic_op('-', 15, 18)       # Output: -3\nbasic_op('*', 5, 5)         # Output: 25\nbasic_op('/', 49, 7)        # Output: 7\n```\n\"\"\"\ndef basic_op(operator, value1, value2):",
    "12": "Python 3\n\"\"\"\nYou are given an array $a$ of length $n$ consisting of zeros.\nYou perform $n$ actions with this array: during the $i$-th action:\n\nChoose the leftmost maximum length subarray consisting only of zeros;\nLet this segment be $[l; r]$. \nIf $r-l+1$ is odd then assign $a[\\frac{l+r}{2}] := i$ otherwise assign $a[\\frac{l+r-1}{2}] := i$. \n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 the array $a$ of length $n$ after performing $n$ actions described in the problem statement. Note that the answer exists and unique.\n\n\n-----Example-----\nInput\n6\n1\n2\n3\n4\n5\n6\n\nOutput\n1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given an array $a$ of length $n$ consisting of zeros. You perform $n$ actions with this array: during the $i$-th action, the following sequence of operations appears:  Choose the maximum by length subarray (continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one;  Let this segment be $[l; r]$. If $r-l+1$ is odd (not divisible by $2$) then assign (set) $a[\\frac{l+r}{2}] := i$ (where $i$ is the number of the current action), otherwise (if $r-l+1$ is even) assign (set) $a[\\frac{l+r-1}{2}] := i$. \n\nConsider the array $a$ of length $5$ (initially $a=[0, 0, 0, 0, 0]$). Then it changes as follows:  Firstly, we choose the segment $[1; 5]$ and assign $a[3] := 1$, so $a$ becomes $[0, 0, 1, 0, 0]$;  then we choose the segment $[1; 2]$ and assign $a[1] := 2$, so $a$ becomes $[2, 0, 1, 0, 0]$;  then we choose the segment $[4; 5]$ and assign $a[4] := 3$, so $a$ becomes $[2, 0, 1, 3, 0]$;  then we choose the segment $[2; 2]$ and assign $a[2] := 4$, so $a$ becomes $[2, 4, 1, 3, 0]$;  and at last we choose the segment $[5; 5]$ and assign $a[5] := 5$, so $a$ becomes $[2, 4, 1, 3, 5]$. \n\nYour task is to find the array $a$ of length $n$ after performing all $n$ actions. Note that the answer exists and unique.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $a$.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 the array $a$ of length $n$ after performing $n$ actions described in the problem statement. Note that the answer exists and unique.\n\n\n-----Example-----\nInput\n6\n1\n2\n3\n4\n5\n6\n\nOutput\n1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given n cards of 3 different colours placed in a line. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThere are n cards of different colours placed in a line, each of them can be either red, green or blue cards. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour.\n\n-----Input-----\n- The first line of each input contains an integer n\u2014 the total number of cards.\n- The next line of the input contains a string s, which represents the colours of the cards. We'll consider the cards in a line numbered from 1 to n from left to right. Then the $i^t$$^h$ alphabet equals \"G\", if the $i^t$$^h$ card is green, \"R\" if the card is red,  and \"B\", if it's blue.\n\n-----Output-----\n- Print a single integer \u2014 the answer to the problem.\n\n-----Constraints-----\n- $1 \\leq n \\leq 50$\n\n-----Sample Input 1:-----\n5\nRGGBG\n\n-----Sample Input 2:-----\n5\nRRRRR\n\n-----Sample Input 3:-----\n2\nBB\n\n-----Sample Output 1:-----\n1\n\n-----Sample Output 2:-----\n4\n\n-----Sample Output 3:-----\n1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given a number X and limit N.\nYou need to output the sum of multiples of X upto N.\n\n-----Input:-----\n- First line will contain T, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u226410001 \\leq T \\leq 1000\n- 1\u2264X<=N\u22641071 \\leq X<=N \\leq 10^7\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nRichik$Richik$ has just completed his engineering and has got a job in one of the firms at Sabrina$Sabrina$ which is ranked among the top seven islands in the world in terms of the pay scale. \nSince Richik$Richik$ has to travel a lot to reach the firm, the owner assigns him a number X$X$, and asks him to come to work only on the day which is a multiple of X$X$. Richik joins the firm on 1-st day but starts working from X-th day. Richik$Richik$ is paid exactly the same amount in Dollars as the day number. For example, if Richik$Richik$ has been assigned X=3$X = 3$, then he will be paid 3$3$ dollars and 6$6$ dollars on the 3rd$3rd$ and 6th$6th$ day on which he comes for work. \nOn N\u2212th$N-th$ day, the owner calls up Richik$Richik$ and asks him not to come to his firm anymore. Hence Richik$Richik$ demands his salary of all his working days together. Since it will take a lot of time to add, Richik$Richik$ asks help from people around him, let's see if you can help him out. \n\n-----Input:-----\n- First line will contain T$T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, two integers X,N$X, N$. \n\n-----Output:-----\nFor each testcase, output in a single line which is the salary which Richik$Richik$ demands. \n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264X<=N\u2264107$1 \\leq X<=N \\leq 10^7$\n\n-----Sample Input:-----\n1\n3 10\n\n-----Sample Output:-----\n18\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given an array of integers. You can permute its integers. You want to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Find the maximal number of such integers.\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given an array of integers. Vasya can permute (change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers.\n\nFor instance, if we are given an array $[10, 20, 30, 40]$, we can permute it so that it becomes $[20, 40, 10, 30]$. Then on the first and the second positions the integers became larger ($20>10$, $40>20$) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals $2$. Read the note for the first example, there is one more demonstrative test case.\n\nHelp Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, one of the best permutations is $[1, 5, 5, 3, 10, 1, 1]$. On the positions from second to fifth the elements became larger, so the answer for this permutation is 4.\n\nIn the second sample, there is no way to increase any element with a permutation, so the answer is 0.\n\"\"\"\ndef code():"
}