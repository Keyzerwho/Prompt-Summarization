{
    "0": "Python 3\n\"\"\"\nYou are given a medium item for $3 and a large item for $4. A promotional free coupon is given for every purchase and six coupon are required for one free item. No coupon for free item.\n\n\nDetermine the amount of money you for the given past sequence of item.You do not have any stamp in beginning and spent free stamp just after the purchase of six items.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium item or a Large item  got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars you have spent.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nBohan loves milk tea so much and he drinks one cup of milk tea every day. The local shop sells milk tea in two sizes: a Medium cup for $3 and a Large cup for $4. For every cup of milk tea purchased Bohan receives a promotional stamp. Bohan may redeem 6 stamps for a free drink of milk tea regardless of the size. No stamp will be given for a free drink.\n\n\nDetermine the amount of money Bohan have spent on milk tea, given a sequence of milk tea sizes he got in the past a few days. Assume Bohan had no stamps in the beginning and he always redeemed the stamps for the next drink once he had collected 6 stamps.\n\n-----Input-----\nThe input begins with the number of test cases T.\nEach test case has a single line of letters. The i-th letter is either 'M' or 'L' denoting a Medium cup or a Large cup of milk tea Bohan got on the i-th day.\n\n-----Output-----\nFor each case, output the amount of money in dollars Bohan have spent on milk tea.\n\n-----Constraints-----\n- T \u2264 100 \n- 1 \u2264  length of each sequence \u2264 100 \n\n-----Example-----\nInput:\n3\nMLM\nMMLLMMLL\nMMMMMMML\n\nOutput:\n10\n24\n22\n\n-----Explanation-----\nExample 1: Bohan didn't redeem any stamps.\nExample 2: Bohan redeemed 6 stamps for the Large cup of milk tea on the 7th day.\nExample 3: Bohan redeemed 6 stamps for the Medium cup of milk tea on the 7th day.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nA permutation p of size n is the sequence p_1, p_2, ..., p_{n}, consisting of n distinct integers, each of them is from 1 to n (1 \u2264 p_{i} \u2264 n).\n\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once.\n\nWe hava two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow we concatenate these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\\{1\\} + \\{4, 3, 2, 1\\}$ and $\\{1,4,3,2\\} + \\{1\\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\\{2,4,1,3\\} + \\{2,1\\}$.\n\nIn the third example, there are no possible ways.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a program to check for a given unweighted, undirected graph whether it's a tree topology or not.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given an unweighted, undirected graph. Write a program to check if it's a tree topology.\n\n-----Input-----\n\nThe first line of the input file contains two integers N and M --- number of nodes and number of edges in the graph (0 < N <= 10000, 0 <= M <= 20000). Next M lines contain M edges of that graph --- Each line contains a pair (u, v) means there is an edge between node u and node v (1 <= u,v <= N).\n\n-----Output-----\n\nPrint YES if the given graph is a tree, otherwise print NO.\n\n-----Example-----\nInput:\n3 2\n1 2\n2 3\n\nOutput:\nYES\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nYou are given an array of integers. You can permute its integers. You want to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Find the maximal number of such integers.\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given an array of integers. Vasya can permute (change order) its integers. He wants to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Help Vasya find the maximal number of such integers.\n\nFor instance, if we are given an array $[10, 20, 30, 40]$, we can permute it so that it becomes $[20, 40, 10, 30]$. Then on the first and the second positions the integers became larger ($20>10$, $40>20$) and did not on the third and the fourth, so for this permutation, the number that Vasya wants to maximize equals $2$. Read the note for the first example, there is one more demonstrative test case.\n\nHelp Vasya to permute integers in such way that the number of positions in a new array, where integers are greater than in the original one, is maximal.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 10^5$)\u00a0\u2014 the length of the array.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 10^9$)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximal number of the array's elements which after a permutation will stand on the position where a smaller element stood in the initial array.\n\n\n-----Examples-----\nInput\n7\n10 1 1 1 5 5 3\n\nOutput\n4\n\nInput\n5\n1 1 1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, one of the best permutations is $[1, 5, 5, 3, 10, 1, 1]$. On the positions from second to fifth the elements became larger, so the answer for this permutation is 4.\n\nIn the second sample, there is no way to increase any element with a permutation, so the answer is 0.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given two numbers X and Y.\n\nIn one step, you can either double the value of X, or decrement X by 1.\n\nReturn the minimum number of steps required before the value of X equals Y.\n\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "11": "Python 3\n\"\"\"\nOn a broken calculator that has a number showing on its display, we can perform two operations:\n\nDouble: Multiply the number on the display by 2, or;\nDecrement: Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number X.\nReturn the minimum number of operations needed to display the number Y.\n\u00a0\nExample 1:\nInput: X = 2, Y = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n\nExample 2:\nInput: X = 5, Y = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.\n\nExample 3:\nInput: X = 3, Y = 10\nOutput: 3\nExplanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n\nExample 4:\nInput: X = 1024, Y = 1\nOutput: 1023\nExplanation: Use decrement operations 1023 times.\n\n\u00a0\nNote:\n\n1 <= X <= 10^9\n1 <= Y <= 10^9\n\"\"\"\nclass Solution:\n    def brokenCalc(self, X: int, Y: int) -> int:",
    "12": "Python 3\n\"\"\"\nYour need to create a function `combos` that accepts `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\nFor an optimal solution, the following operation should complete within 6000ms.\n\"\"\"\ndef combos(n):",
    "13": "Python 3\n\"\"\"\nJon and Joe have received equal marks in the school examination. \nBut, they won't reconcile in peace when equated with each other. \nTo prove his might, Jon challenges Joe to write a program to find all possible number combos that sum to a given number. \nWhile unsure whether he would be able to accomplish this feat or not, Joe accpets the challenge. \nBeing Joe's friend, your task is to help him out.\n\n# Task\n\nCreate a function `combos`, that accepts a single positive integer `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`.\n\n# Notes\n1. Sub-arrays may or may not have their elements sorted.\n2. The order of sub-arrays inside the main array does not matter.\n3. For an optimal solution, the following operation should complete within 6000ms.\n\n# Sample\n\"\"\"\ndef combos(n):",
    "14": "Python 3\n\"\"\"\nYou are given a rectangular parallelepiped with sides of positive integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three integers $a$, $b$, $c$ such that $1\\leq a\\leq b\\leq c$ and parallelepiped $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$.\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$)\u00a0\u2014 the number of test cases.\n\nEach of the next $t$ lines contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$)\u00a0\u2014 the sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n4\n4\n165\n\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a rectangular parallelepiped with sides of positive integer lengths $A$, $B$ and $C$. \n\nFind the number of different groups of three integers ($a$, $b$, $c$) such that $1\\leq a\\leq b\\leq c$ and parallelepiped $A\\times B\\times C$ can be paved with parallelepipeds $a\\times b\\times c$. Note, that all small parallelepipeds have to be rotated in the same direction.\n\nFor example, parallelepiped $1\\times 5\\times 6$ can be divided into parallelepipeds $1\\times 3\\times 5$, but can not be divided into parallelepipeds $1\\times 2\\times 3$.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 10^5$)\u00a0\u2014 the number of test cases.\n\nEach of the next $t$ lines contains three integers $A$, $B$ and $C$ ($1 \\leq A, B, C \\leq 10^5$)\u00a0\u2014 the sizes of the parallelepiped.\n\n\n-----Output-----\n\nFor each test case, print the number of different groups of three points that satisfy all given conditions.\n\n\n-----Example-----\nInput\n4\n1 1 1\n1 6 1\n2 2 2\n100 100 100\n\nOutput\n1\n4\n4\n165\n\n\n\n-----Note-----\n\nIn the first test case, rectangular parallelepiped $(1, 1, 1)$ can be only divided into rectangular parallelepiped with sizes $(1, 1, 1)$.\n\nIn the second test case, rectangular parallelepiped $(1, 6, 1)$ can be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$, $(1, 1, 3)$ and $(1, 1, 6)$.\n\nIn the third test case, rectangular parallelepiped $(2, 2, 2)$ can be divided into rectangular parallelepipeds with sizes $(1, 1, 1)$, $(1, 1, 2)$, $(1, 2, 2)$ and $(2, 2, 2)$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nCheck whether the given natural number N is divisible by the sum of its digits or not. If possible, then print \"Yes\" else \"No\".\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n16\n27\n\n-----Sample Output:-----\nNo\nYes\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef has a natural number N. Cheffina challenges chef to check whether the given number is divisible by the sum of its digits or not. If the given number is divisible then print \"Yes\" else \"No\".\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n16\n27\n\n-----Sample Output:-----\nNo\nYes\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given n fountains with its beauty and cost are known.There are two types of money: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\n\nBuild two fountains with maximum total beauty so that both can be bought at the same time.\n\n\n-----Input-----\n\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\u00a0\u2014 the number of fountains, the number of coins and diamonds.\n\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \"C\" or \"D\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\n\n\n-----Output-----\n\nPrint the maximum total beauty of exactly two fountains that can build. If two fountains can't be built, print 0.\n\n\n-----Examples-----\nInput\n3 7 6\n10 8 C\n4 3 C\n5 6 D\n\nOutput\n9\n\nInput\n2 4 5\n2 5 C\n2 1 D\n\nOutput\n0\n\nInput\n3 10 10\n5 5 C\n5 5 C\n10 11 D\n\nOutput\n10\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nArkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\n\nHelp Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.\n\n\n-----Input-----\n\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\u00a0\u2014 the number of fountains, the number of coins and diamonds Arkady has.\n\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \"C\" or \"D\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\n\n\n-----Output-----\n\nPrint the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.\n\n\n-----Examples-----\nInput\n3 7 6\n10 8 C\n4 3 C\n5 6 D\n\nOutput\n9\n\nInput\n2 4 5\n2 5 C\n2 1 D\n\nOutput\n0\n\nInput\n3 10 10\n5 5 C\n5 5 C\n10 11 D\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.\n\nIn the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins.\n\"\"\"\ndef code():"
}