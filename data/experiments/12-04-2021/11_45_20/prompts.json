{
    "0": "Python 3\n\"\"\"\n Nicholas Neverson was a student at Northlings Neverland Academy. As with any daydreaming student, Nicholas was playing around with a Kaleidoscope one day instead of paying attention to the teacher. Since this was math class, his daydreams quickly turned to palindromic numbers. A palindromic number is any number which reads the same forwards and backwards. He describes his vision to you at lunch: numbers which are palindromic in several bases at once. Nicholas wonders how many such numbers exist. You decide you can quickly code up a program that given a range and a number $k$, outputs the number of numbers palindromic in all bases $j$, $2 \\leq j \\leq k$, in that range. \n-----Input----- Input consists of three space-separated integers: $a$, $b$, and $k$. The input satisfies the following constraints:\\[ 0 \\leq a \\leq b \\leq 2000000, \\\\ 2 \\leq k \\leq 100000. \\] -----Output----- Output the quantity of numbers between $a$ and $b$ inclusive which are palindromes in every base $j$, for $2 \\leq j \\leq k$. -----Examples----- Sample Input: 1 356 2 Sample Output: 36\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nNicholas Neverson was a student at Northlings Neverland Academy. As with any daydreaming student, Nicholas was playing around with a Kaleidoscope one day instead of paying attention to the teacher. Since this was math class, his daydreams quickly turned to palindromic numbers. A palindromic number is any number which reads the same forwards and backwards.\n\nHe describes his vision to you at lunch: numbers which are palindromic in several bases at once. Nicholas wonders how many such numbers exist. You decide you can quickly code up a program that given a range and a number $k$, outputs the number of numbers palindromic in all bases $j$, $2 \\leq j \\leq k$, in that range.\n\n-----Input-----\nInput consists of three space-separated integers: $a$, $b$, and $k$. The input satisfies the following constraints:\\[ 0 \\leq a \\leq b \\leq 2000000, \\\\ 2 \\leq k \\leq 100000. \\]\n\n-----Output-----\nOutput the quantity of numbers between $a$ and $b$ inclusive which are palindromes in every base $j$, for $2 \\leq j \\leq k$.\n\n-----Examples-----\nSample Input:\n1 356 2\nSample Output:\n36\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You have an $R\\times C$ table. You have chosen an angle $K$, a multiple of $45$, and want to rotate your table that many degrees clockwise. \n-----Input----- The first line contains two integers $R$ and $C$ separated by a space ($1 \\leq R \\leq 10$, $1 \\leq C \\leq 10$), the number of rows and columns in Damir\u2019s table. Each of the next $R$ lines contains one row of Damir\u2019s table, a string of $C$ lowercase letters. The last line contains an integer $K$, a multiple of $45$ between $0$ and $360$ (inclusive). -----Output----- Output Damir\u2019s table rotated $K$ degrees clockwise, like shown in the examples. The output should contain the smallest number of rows necessary. Some rows may have leading spaces, but no rows may have trailing spaces. -----Examples----- Sample Input 1: 3 5 damir marko darko 45 Sample Output 1:   d  m a d a m  a r i   r k r    k o     o Sample Input 2: 3 5 damir marko darko 90 Sample Output 2: dmd aaa rrm kki oor\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nDamir likes to rotate. Right now he is rotating tables of letters. He wrote an $R\\times C$ table onto a piece of paper. He has also chosen an angle $K$, a multiple of $45$, and wants to rotate his table that many degrees clockwise.\n\nIt turns out this task is a bit too hard for Damir, so help him out.\n\n-----Input-----\nThe first line contains two integers $R$ and $C$ separated by a space ($1 \\leq R \\leq 10$, $1 \\leq C \\leq 10$), the number of rows and columns in Damir\u2019s table. Each of the next $R$ lines contains one row of Damir\u2019s table, a string of $C$ lowercase letters. The last line contains an integer $K$, a multiple of $45$ between $0$ and $360$ (inclusive).\n\n-----Output-----\nOutput Damir\u2019s table rotated $K$ degrees clockwise, like shown in the examples. The output should contain the smallest number of rows necessary. Some rows may have leading spaces, but no rows may have trailing spaces.\n\n-----Examples-----\nSample Input 1:\n3 5\ndamir\nmarko\ndarko\n45\nSample Output 1:\n  d\n m a\nd a m\n a r i\n  r k r\n   k o\n    o\n\nSample Input 2:\n3 5\ndamir\nmarko\ndarko\n90\nSample Output 2:\ndmd\naaa\nrrm\nkki\noor\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a device with two wires. The wires are plugged into the wall and the device in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view): [Image] You are also given the sequence in which the wires run above each other. You are not allowed to unplug the wires or move the device. Determine if it is possible to untangle the wires without unplugging them and without moving the device. \n-----Input----- The single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 \u2264 n \u2264 100000). The i-th (1 \u2264 i \u2264 n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise. -----Output----- Print either \"Yes\" (without the quotes) if the wires can be untangled or \"No\" (without the quotes) if the wires cannot be untangled. -----Examples----- Input -++- Output Yes Input +- Output No Input ++ Output Yes Input - Output No -----Note----- The first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses. In the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled:  [Image]  In the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher:  [Image]  In the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself:  [Image]\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nMad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again.\n\nThe device is powered by two wires \"plus\" and \"minus\". The wires run along the floor from the wall (on the left) to the device (on the right). Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view): [Image] \n\nMike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \"plus\" wire is always plugged into the top contact (as seen on the picture). He would like to untangle the wires without unplugging them and without moving the device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut.\n\nTo understand the problem better please read the notes to the test samples.\n\n\n-----Input-----\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 \u2264 n \u2264 100000). The i-th (1 \u2264 i \u2264 n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.\n\n\n-----Output-----\n\nPrint either \"Yes\" (without the quotes) if the wires can be untangled or \"No\" (without the quotes) if the wires cannot be untangled.\n\n\n-----Examples-----\nInput\n-++-\n\nOutput\nYes\n\nInput\n+-\n\nOutput\nNo\n\nInput\n++\n\nOutput\nYes\n\nInput\n-\n\nOutput\nNo\n\n\n\n-----Note-----\n\nThe first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses.\n\nIn the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled:  [Image] \n\nIn the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher:  [Image] \n\nIn the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself:  [Image]\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given three sticks with positive integer lengths of a, b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick. Determine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them. \n-----Input----- The single line contains 4 integers a, b, c, l (1 \u2264 a, b, c \u2264 3\u00b710^5, 0 \u2264 l \u2264 3\u00b710^5). -----Output----- Print a single integer \u2014 the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it. -----Examples----- Input 1 1 1 2 Output 4 Input 1 2 3 1 Output 2 Input 10 2 1 7 Output 0 -----Note----- In the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter. In the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given three sticks with positive integer lengths of a, b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick.\n\nDetermine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them.\n\n\n-----Input-----\n\nThe single line contains 4 integers a, b, c, l (1 \u2264 a, b, c \u2264 3\u00b710^5, 0 \u2264 l \u2264 3\u00b710^5).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it.\n\n\n-----Examples-----\nInput\n1 1 1 2\n\nOutput\n4\n\nInput\n1 2 3 1\n\nOutput\n2\n\nInput\n10 2 1 7\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter.\n\nIn the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a tennis match history. A tennis match consists of sets, each set consisting of games. The following rules apply: - A player wins a set if he has $6$ or more games and at least two games more than his opponent. - Additionally, if the result is $6:6$ in the first or second set (but not the third set), a single final game is played to determine the winner of the set (the tie-break game). - The match ends when either player has won 2 sets. That player is the winner. A match result is valid if a match could have been played by the above rules and ended in the result. Additionally, if one of the players is Roger Federer (designated as federer in the input), then a result in which he has lost a set can t be valid (Zvonko knows Federer is from outer space). Write a program that checks the validity of all matches between two players.\n-----Input----- The first line of input contains the names of the two players separated by a single space. Both names will be strings of at most $20$ lowercase letters of the English alphabet. The names will be different. The second line contains an integer $N$ $(1 \\leq N \\leq 50)$, how many matches the two players have played. Each of the following $N$ lines contains the result of a single match, composed of the results of a number of sets separated by single spaces. Each match result will contain between $1$ and $5$ sets. A set is given in the format \u201c$A$:$B$\u201d, where $A$ and $B$ are games won by each player. These numbers are integers between $0$ and $99$ (inclusive). -----Output----- For each match, in the order they\u2019re given in the input, output \u201cda\u201d if the result is valid, or \u201cne\u201d if it isn\u2019t. -----Examples----- Sample Input: sampras agassi 6 6:2 6:4 3:6 7:5 2:6 6:5 7:4 7:6 7:6 6:2 3:6 6:2 1:6 6:8 Sample Output: da da ne da ne da\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nAfter Borko\u2019s second plan of taking over the village fell through (because Mirko\u2019s brother Stanko drank all the water), young Zvonko decided to relax with sports. For this purpose he stocked up on carrot juice and peanuts, and dived onto the couch, ready to watch the next tennis match on television.\n\nWhile the two players are warming up, their statistics pop up on the screen. Zvonko noticed that the match history of the players contained invalid results. He had a brilliant idea where you write him a program that checks the validity of results, which he will then sell to the record keepers and enjoy a leisurely life.\n\nA tennis match consists of sets, each set consisting of games. The following rules apply:\n - A player wins a set if he has $6$ or more games and at least two games more than his opponent.\n - Additionally, if the result is $6:6$ in the first or second set (but not the third set), a single final game is played to determine the winner of the set (the tie-break game).\n - The match ends when either player has won 2 sets. That player is the winner.\n\nA match result is valid if a match could have been played by the above rules and ended in the result. Additionally, if one of the players is Roger Federer (designated as \u201cfederer\u201d in the input), then a result in which he has lost a set can\u2019t be valid (Zvonko knows Federer is from outer space).\n\nWrite a program that checks the validity of all matches between two players.\n\n-----Input-----\nThe first line of input contains the names of the two players separated by a single space. Both names will be strings of at most $20$ lowercase letters of the English alphabet. The names will be different. The second line contains an integer $N$ $(1 \\leq N \\leq 50)$, how many matches the two players have played.\n\nEach of the following $N$ lines contains the result of a single match, composed of the results of a number of sets separated by single spaces. Each match result will contain between $1$ and $5$ sets. A set is given in the format \u201c$A$:$B$\u201d, where $A$ and $B$ are games won by each player. These numbers are integers between $0$ and $99$ (inclusive).\n\n-----Output-----\nFor each match, in the order they\u2019re given in the input, output \u201cda\u201d if the result is valid, or \u201cne\u201d if it isn\u2019t.\n\n-----Examples-----\nSample Input:\nsampras agassi\n6\n6:2 6:4\n3:6 7:5 2:6\n6:5 7:4\n7:6 7:6\n6:2 3:6\n6:2 1:6 6:8\nSample Output:\nda\nda\nne\nda\nne\nda\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given is an undirected graph G consisting of N vertices numbered 1 through N and M edges numbered 1 through M. Edge i connects Vertex a_i and Vertex b_i bidirectionally. G is said to be a good graph when both of the conditions below are satisfied. It is guaranteed that G is initially a good graph. - Vertex 1 and Vertex N are not connected. - There are no self-loops and no multi-edges. Taro the first and Jiro the second will play a game against each other. They will alternately take turns, with Taro the first going first. In each player's turn, the player can do the following operation: - Operation: Choose vertices u and v, then add to G an edge connecting u and v bidirectionally. The player whose addition of an edge results in G being no longer a good graph loses. Determine the winner of the game when the two players play optimally. You are given T test cases. Solve each of them. -----Constraints----- - All values in input are integers. - 1 \\leq T \\leq 10^5 - 2 \\leq N \\leq 10^{5} - 0 \\leq M \\leq \\min(N(N-1)/2,10^{5}) - 1 \\leq a_i,b_i \\leq N - The given graph is a good graph. - In one input file, the sum of N and that of M do not exceed 2 \\times 10^5.\n-----Input----- Input is given from Standard Input in the following format: T \\mathrm{case}_1 \\vdots \\mathrm{case}_T Each case is in the following format: N M a_1 b_1 \\vdots a_M b_M -----Output----- Print T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case. -----Sample Input----- 3 3 0 6 2 1 2 2 3 15 10 12 14 8 3 10 1 14 6 12 6 1 9 13 1 2 5 3 9 7 2 -----Sample Output----- First Second First  - In test case 1, Taro the first wins. Below is one sequence of moves that results in Taro's win:  - In Taro the first's turn, he adds an edge connecting Vertex 1 and 2, after which the graph is still good.  - Then, whichever two vertices Jiro the second would choose to connect with an edge, the graph would no longer be good.  - Thus, Taro wins.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nGiven is an undirected graph G consisting of N vertices numbered 1 through N and M edges numbered 1 through M.\nEdge i connects Vertex a_i and Vertex b_i bidirectionally.\nG is said to be a good graph when both of the conditions below are satisfied. It is guaranteed that G is initially a good graph.\n - Vertex 1 and Vertex N are not connected.\n - There are no self-loops and no multi-edges.\nTaro the first and Jiro the second will play a game against each other.\nThey will alternately take turns, with Taro the first going first.\nIn each player's turn, the player can do the following operation:\n - Operation: Choose vertices u and v, then add to G an edge connecting u and v bidirectionally.\nThe player whose addition of an edge results in G being no longer a good graph loses. Determine the winner of the game when the two players play optimally.\nYou are given T test cases. Solve each of them.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 10^5\n - 2 \\leq N \\leq 10^{5}\n - 0 \\leq M \\leq \\min(N(N-1)/2,10^{5})\n - 1 \\leq a_i,b_i \\leq N\n - The given graph is a good graph.\n - In one input file, the sum of N and that of M do not exceed 2 \\times 10^5.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\mathrm{case}_1\n\\vdots\n\\mathrm{case}_T\n\nEach case is in the following format:\nN M\na_1 b_1\n\\vdots\na_M b_M\n\n-----Output-----\nPrint T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case.\n\n-----Sample Input-----\n3\n3 0\n6 2\n1 2\n2 3\n15 10\n12 14\n8 3\n10 1\n14 6\n12 6\n1 9\n13 1\n2 5\n3 9\n7 2\n\n-----Sample Output-----\nFirst\nSecond\nFirst\n\n - In test case 1, Taro the first wins. Below is one sequence of moves that results in Taro's win:\n - In Taro the first's turn, he adds an edge connecting Vertex 1 and 2, after which the graph is still good.\n - Then, whichever two vertices Jiro the second would choose to connect with an edge, the graph would no longer be good.\n - Thus, Taro wins.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are leading a kayaking trip with a mixed group of participants in the Stockholm archipelago, but as you are about to begin your final stretch back to the mainland you notice a storm on the horizon. You had better paddle as fast as you can to make sure you do not get trapped on one of the islands. Of course, you cannot leave anyone behind, so your speed will be determined by the slowest kayak. Time to start thinking; How should you distribute the participants among the kayaks to maximize your chance of reaching the mainland safely \n-----Input----- The first line of input contains three non-negative integers $b$, $n$, and $e$, denoting the number of beginners, normal participants, and experienced kayakers, respectively. The total number of participants, $b+n+e$, will be even, at least $2$, and no more than $100000$. This is followed by a line with three integers $s_ b$, $s_ n$, and $s_ e$, giving the strengths of the corresponding participants ($1 \\leq s_ b < s_ n < s_ e \\leq 1000$). The third and final line contains $m = \\frac{b+n+e}{2}$ integers $c_1, \\ldots , c_ m$ ($1 \\leq c_ i \\leq 100000$ for each $i$), each giving the speed factor of one kayak. -----Output----- Output a single integer, the maximum speed that the slowest kayak can get by distributing the participants two in each kayak. -----Examples----- Sample Input: 3 1 0 40 60 90 18 20 Sample Output: 1600\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are leading a kayaking trip with a mixed group of participants in the Stockholm archipelago, but as you are about to begin your final stretch back to the mainland you notice a storm on the horizon. You had better paddle as fast as you can to make sure you do not get trapped on one of the islands. Of course, you cannot leave anyone behind, so your speed will be determined by the slowest kayak. Time to start thinking; How should you distribute the participants among the kayaks to maximize your chance of reaching the mainland safely? \n\nThe kayaks are of different types and have different amounts of packing, so some are more easily paddled than others. This is captured by a speed factor $c$ that you have already figured out for each kayak. The final speed $v$ of a kayak, however, is also determined by the strengths $s_1$ and $s_2$ of the two people in the kayak, by the relation $v=c(s_1+s_2)$. In your group you have some beginners with a kayaking strength of $s_ b$, a number of normal participants with strength $s_ n$ and some quite experienced strong kayakers with strength $s_ e$.\n\n-----Input-----\nThe first line of input contains three non-negative integers $b$, $n$, and $e$, denoting the number of beginners, normal participants, and experienced kayakers, respectively. The total number of participants, $b+n+e$, will be even, at least $2$, and no more than $100000$. This is followed by a line with three integers $s_ b$, $s_ n$, and $s_ e$, giving the strengths of the corresponding participants ($1 \\leq s_ b < s_ n < s_ e \\leq 1000$). The third and final line contains $m = \\frac{b+n+e}{2}$ integers $c_1, \\ldots , c_ m$ ($1 \\leq c_ i \\leq 100000$ for each $i$), each giving the speed factor of one kayak.\n\n-----Output-----\nOutput a single integer, the maximum speed that the slowest kayak can get by distributing the participants two in each kayak.\n\n-----Examples-----\nSample Input:\n3 1 0\n40 60 90\n18 20\nSample Output:\n1600\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Initially there was an array $a$ consisting of $n$ integers. Positions in it are numbered from $1$ to $n$. Exactly $q$ queries were performed on the array. During the $i$-th query some segment $(l_i, r_i)$ $(1 \\le l_i \\le r_i \\le n)$ was selected and values of elements on positions from $l_i$ to $r_i$ inclusive got changed to $i$. The order of the queries couldn't be changed and all $q$ queries were applied. It is also known that every position from $1$ to $n$ got covered by at least one segment. We could have offered you the problem about checking if some given array (consisting of $n$ integers with values from $1$ to $q$) can be obtained by the aforementioned queries. However, we decided that it will come too easy for you. So the enhancement we introduced to it is the following. Some set of positions (possibly empty) in this array is selected and values of elements on these positions are set to $0$. Your task is to check if this array can be obtained by the aforementioned queries. Also if it can be obtained then restore this array. If there are multiple possible arrays then print any of them.\n-----Input----- The first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) \u2014 the number of elements of the array and the number of queries perfomed on it. The second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le q$) \u2014 the resulting array. If element at some position $j$ is equal to $0$ then the value of element at this position can be any integer from $1$ to $q$. -----Output----- Print \"YES\" if the array $a$ can be obtained by performing $q$ queries. Segments $(l_i, r_i)$ $(1 \\le l_i \\le r_i \\le n)$ are chosen separately for each query. Every position from $1$ to $n$ should be covered by at least one segment.  Otherwise print \"NO\". If some array can be obtained then print $n$ integers on the second line \u2014 the $i$-th number should be equal to the $i$-th element of the resulting array and should have value from $1$ to $q$. This array should be obtainable by performing exactly $q$ queries. If there are multiple possible arrays then print any of them. -----Examples----- Input 4 3 1 0 2 3 Output YES 1 2 2 3 Input 3 10 10 10 10 Output YES 10 10 10  Input 5 6 6 5 6 2 2 Output NO Input 3 5 0 0 0 Output YES 5 4 2 -----Note----- In the first example you can also replace $0$ with $1$ but not with $3$. In the second example it doesn't really matter what segments to choose until query $10$ when the segment is $(1, 3)$. The third example showcases the fact that the order of queries can't be changed, you can't firstly set $(1, 3)$ to $6$ and after that change $(2, 2)$ to $5$. The segment of $5$ should be applied before segment of $6$. There is a lot of correct resulting arrays for the fourth example.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nInitially there was an array $a$ consisting of $n$ integers. Positions in it are numbered from $1$ to $n$.\n\nExactly $q$ queries were performed on the array. During the $i$-th query some segment $(l_i, r_i)$ $(1 \\le l_i \\le r_i \\le n)$ was selected and values of elements on positions from $l_i$ to $r_i$ inclusive got changed to $i$. The order of the queries couldn't be changed and all $q$ queries were applied. It is also known that every position from $1$ to $n$ got covered by at least one segment.\n\nWe could have offered you the problem about checking if some given array (consisting of $n$ integers with values from $1$ to $q$) can be obtained by the aforementioned queries. However, we decided that it will come too easy for you.\n\nSo the enhancement we introduced to it is the following. Some set of positions (possibly empty) in this array is selected and values of elements on these positions are set to $0$.\n\nYour task is to check if this array can be obtained by the aforementioned queries. Also if it can be obtained then restore this array.\n\nIf there are multiple possible arrays then print any of them.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($1 \\le n, q \\le 2 \\cdot 10^5$) \u2014 the number of elements of the array and the number of queries perfomed on it.\n\nThe second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le q$) \u2014 the resulting array. If element at some position $j$ is equal to $0$ then the value of element at this position can be any integer from $1$ to $q$.\n\n\n-----Output-----\n\nPrint \"YES\" if the array $a$ can be obtained by performing $q$ queries. Segments $(l_i, r_i)$ $(1 \\le l_i \\le r_i \\le n)$ are chosen separately for each query. Every position from $1$ to $n$ should be covered by at least one segment. \n\nOtherwise print \"NO\".\n\nIf some array can be obtained then print $n$ integers on the second line \u2014 the $i$-th number should be equal to the $i$-th element of the resulting array and should have value from $1$ to $q$. This array should be obtainable by performing exactly $q$ queries.\n\nIf there are multiple possible arrays then print any of them.\n\n\n-----Examples-----\nInput\n4 3\n1 0 2 3\n\nOutput\nYES\n1 2 2 3\n\nInput\n3 10\n10 10 10\n\nOutput\nYES\n10 10 10 \n\nInput\n5 6\n6 5 6 2 2\n\nOutput\nNO\n\nInput\n3 5\n0 0 0\n\nOutput\nYES\n5 4 2\n\n\n\n-----Note-----\n\nIn the first example you can also replace $0$ with $1$ but not with $3$.\n\nIn the second example it doesn't really matter what segments to choose until query $10$ when the segment is $(1, 3)$.\n\nThe third example showcases the fact that the order of queries can't be changed, you can't firstly set $(1, 3)$ to $6$ and after that change $(2, 2)$ to $5$. The segment of $5$ should be applied before segment of $6$.\n\nThere is a lot of correct resulting arrays for the fourth example.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Help Bash buy ingredients so that the total happiness of Bash and his $N$ Pokenoms is maximized. Input The first line contains an integer $N$ ($1 \\leq N \\leq 10^9$). The second line contains $N$ integers $p_{1}, \\dots, p_{N}$ ($1 \\leq p_{i} \\leq 10^9$). The third line contains $N$ integers $k_{1}, \\dots, k_{N}$ ($1 \\leq k_{i} \\leq 10^9$). The fourth line contains $N$ integers $C_{q}$ ($1 \\leq C_{q} \\leq 10^9$). The fifth line contains $N$ integers $V_{i}$ ($1 \\leq V_{i} \\leq 10^9$). Output The output should contain $N$ lines. The $i$-th line should contain a single integer - the amount of ingredients Bash should buy to maximize the total happiness of Bash and his $N$ Pokenoms. \n\n-----Input-----  - The first line contains one integer $N$ $(1 \\leq N \\leq 10^{4})$.  - The second line contains $N$ integers $V_{1}, V_{2}, \\ldots V_{N}$$(0 \\leq V_{i} \\leq 10^{4})$.  - The third line contains $N$ integers $C_{1}, C_{2}, \\ldots , C_{N}$$(0 \\leq C_{i} \\leq 10^{4})$. It is guaranteed that $C_{i} = 0$ if $i$ is not a prime. -----Output----- Print a single integer $B$ \u2014 the maximum total happiness of Bash and his Pokenoms. -----Examples----- Sample Input 1: 10 1 2 3 40 5 6 7 8 9 10 0 2 3 0 5 0 7 0 0 0 Sample Output 1: 51 Sample Input 2: 1 2207 0 Sample Output 2: 2207\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYears have passed since Bash dropped out of university to become a Pokenom trainer. The adventure was full of difficulties and hardship, but Bash overcame all obstacles and became the best Pokenom trainer, like no one ever was!\n\nToday Bash is celebrating his $13$th anniversary of dropping out of university and becoming a Pokenom trainer.\n\nFor the celebration party, Bash decided to prepare cakes for his $N$ Pokenoms. Bash\u2019s Pokenoms are numbered from $1$ to $N$, inclusive. There are $N$ different cakes. The $i$-th Pokenom wants to eat the $i$-th cake.\n\nThe cakes are made using some ingredients. Each ingredient is uniquely marked by a prime number between $1$ and $N$, inclusive.\n\nThe recipe of the $X$-th cake contains $k$ grams of ingredient $p$ iff $p^{k}$ divides $X$, and $p^{k+1}$ does not. In other words, let the prime factorization of $X$ be $X = p_{1}^{k_{1}} \\times p_{2}^{k_{2}} \\times \\cdots \\times p_{m}^{k_{m}}$, the recipe of the $X$-th cake contains $k_{1}$ grams of ingredient $p_{1}$, $k_{2}$ grams of ingredient $p_{2}$, \u2026, $k_{m}$ grams of ingredient $p_{m}$.\n\nBash goes to a supermarket to buy ingredients. There, Bash realizes that the ingredients are very expensive. If Bash buys $k$ grams of ingredient $q$, Bash\u2019s happiness decreases by $k^{2} \\times C_{q}$.\n\nIf the $i$-th Pokenom sees that Bash buys enough ingredient for the $i$-th cake, the Pokenom\u2019s happiness increases by $V_{i}$.\n\nPlease help Bash buy ingredients so that the total happiness of Bash and his $N$ Pokenoms is maximized!\n\nNote that the $i$-th Pokenom just needs to see that Bash has enough ingredients for the $i$-th cake. So even if the amount of ingredients Bash buys is enough to make either the $x$-th cake or the $y$-th cake, but not both, the total happiness still increases by $V_{x} + V_{y}$.\n\nFor example, consider $N = 100$ and Bash buys $2$ grams of ingredient $2$, $1$ gram of ingredient $3$ and $1$ gram of ingredient $5$: Bash\u2019s happiness decreases by $4 \\times C_{2} + 1 \\times C_{3} + 1 \\times C_{5}$. Bash has enough ingredients for cakes $1..6, 10, 12, 15, 20, 30,$ and $60$. So the happiness of the Pokenoms increases by\\[ V_{1} + V_{2} + \\cdots + V_{6} + V_{10} + V_{12} + V_{15} + V_{20} + V_{30} + V_{60}. \\]\n\n-----Input-----\n - The first line contains one integer $N$ $(1 \\leq N \\leq 10^{4})$.\n - The second line contains $N$ integers $V_{1}, V_{2}, \\ldots V_{N}$$(0 \\leq V_{i} \\leq 10^{4})$.\n - The third line contains $N$ integers $C_{1}, C_{2}, \\ldots , C_{N}$$(0 \\leq C_{i} \\leq 10^{4})$. It is guaranteed that $C_{i} = 0$ if $i$ is not a prime.\n\n-----Output-----\nPrint a single integer $B$ \u2014 the maximum total happiness of Bash and his Pokenoms.\n\n-----Examples-----\nSample Input 1:\n10\n1 2 3 40 5 6 7 8 9 10\n0 2 3 0 5 0 7 0 0 0\nSample Output 1:\n51\n\nSample Input 2:\n1\n2207\n0\nSample Output 2:\n2207\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a number of balloons and a number of arrows. You have to pop all the balloons using as few arrows as possible.\n-----Input----- The first line of input contains the integer $N$ ($1 \\leq N \\leq 1\\ 000\\ 000$). The second line of input contains an array of $N$ integers $H_ i$. Each integer $H_ i$ ($1 \\leq H_ i \\leq 1\\ 000\\ 000$) is the height at which the $i$-th balloon floats, respectively from left to right. -----Output----- The first and only line of output must contain the minimal number of times Pero needs to shoot an arrow so that all balloons are popped. -----Examples----- Sample Input 1: 5 2 1 5 4 3 Sample Output 1: 2 Sample Input 2: 5 1 2 3 4 5 Sample Output 2: 5\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThere are $N$ balloons floating in the air in a large room, lined up from left to right. Young Perica likes to play with arrows and practice his hunting abilities. He shoots an arrow from the left to the right side of the room from an arbitrary height he chooses. The arrow moves from left to right, at a chosen height $H$ until it finds a balloon. The moment when an arrow touches a balloon, the balloon pops and disappears and the arrow continues its way from left to right at a height decreased by $1$. Therefore, if the arrow was moving at height $H$, after popping the balloon it travels on height $H-1$.\n\nOur hero\u2019s goal is to pop all the balloons using as little arrows as possible.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 1\\ 000\\ 000$). The second line of input contains an array of $N$ integers $H_ i$. Each integer $H_ i$ ($1 \\leq H_ i \\leq 1\\ 000\\ 000$) is the height at which the $i$-th balloon floats, respectively from left to right.\n\n-----Output-----\nThe first and only line of output must contain the minimal number of times Pero needs to shoot an arrow so that all balloons are popped.\n\n-----Examples-----\nSample Input 1:\n5\n2 1 5 4 3\nSample Output 1:\n2\n\nSample Input 2:\n5\n1 2 3 4 5\nSample Output 2:\n5\n\"\"\"\ndef code():"
}