{
    "0": "Python 3\n\"\"\"\nGiven a board of `NxN`, distributed with tiles labeled `0` to `N\u00b2 - 1`(inclusive):\n\nA solved grid will have the tiles in order of label, left to right, top to bottom.\n\nReturn `true` if the board state is currently solved, and `false` otherwise.\n\n\n\nFor example, a 2x2 solved grid:\n```\n[ [0, 1],\n  [2, 3] ]\n```\n\nA 2x2 unsolved grid:\n```\n[ [2, 1],\n  [0, 3] ]\n```\n\"\"\"\ndef is_solved(board):",
    "1": "Python 3\n\"\"\"\nGiven a board of `NxN`, distributed with tiles labeled `0` to `N\u00b2 - 1`(inclusive):\n\nA solved grid will have the tiles in order of label, left to right, top to bottom.\n\nReturn `true` if the board state is currently solved, and `false` if the board state is unsolved.\n\nInput will always be a square 2d array.\n\n\nFor example, a 2x2 solved grid:\n```\n[ [0, 1],\n  [2, 3] ]\n```\n\nA 2x2 unsolved grid:\n```\n[ [2, 1],\n  [0, 3] ]\n```\n\"\"\"\ndef is_solved(board):",
    "2": "Python 3\n\"\"\"\nGiven 2 strings, if there is a substring that appears in both strings, return true. Otherwise, return false. We only count substrings that are > 1 in length. Lowercase and uppercase letters are the same.\n\n#Examples:\n\nInput:\nSubstringTest(\"Something\",\"Fun\");\nOutput:\nfalse\nExplanation:\n\"Something\" and \"Fun\" contain no common substrings.\n\nInput:\nSubstringTest(\"Something\",\"Home\");\nOutput:\ntrue\nExplanation:\nBoth of the inputs contain the substring \"me\".\n\"\"\"\ndef substring_test(str1, str2):",
    "3": "Python 3\n\"\"\"\nGiven 2 strings, your job is to find out if there is a substring that appears in both strings. You will return true if you find a substring that appears in both strings, or false if you do not. We only care about substrings that are longer than one letter long.\n\n#Examples:\n\n````\n*Example 1*\nSubstringTest(\"Something\",\"Fun\"); //Returns false\n\n*Example 2*\nSubstringTest(\"Something\",\"Home\"); //Returns true\n````\nIn the above example, example 2 returns true because both of the inputs contain the substring \"me\". (so**ME**thing and ho**ME**)  \nIn example 1, the method will return false because something and fun contain no common substrings. (We do not count the 'n' as a substring in this Kata because it is only 1 character long)\n\n#Rules:\nLowercase and uppercase letters are the same. So 'A' == 'a'.  \nWe only count substrings that are > 1 in length.  \n\n#Input:\nTwo strings with both lower and upper cases.\n#Output:\nA boolean value determining if there is a common substring between the two inputs.\n\"\"\"\ndef substring_test(str1, str2):",
    "4": "Python 3\n\"\"\"\nYour work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped. The bits are numbered from the least significant bit. The index number can be out of number's range.\n\nExample:\nInput:\nflip_bit(15, 4)\nOutput:\n7\nExplanation:\n15 in binary is 1111, after flipping 4th bit, it becomes 0111, i.e. 7\n\nInput:\nflip_bit(15, 5)\nOutput:\n31\nExplanation:\n15 in binary is 1111, 5th bit is 0, after flipping, it becomes 11111, i.e., 31\n\n\"\"\"\ndef flip_bit(value, bit_index):",
    "5": "Python 3\n\"\"\"\nYour work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped.\n\nThe bits are numbered from the least significant bit (index 1).\n\nExample:\n```python\nflip_bit(15, 4) == 7 # 15 in binary is 1111, after flipping 4th bit, it becomes 0111, i.e. 7\nflip_bit(15, 5) == 31 # 15 in binary is 1111, 5th bit is 0, after flipping, it becomes 11111, i.e., 31\n```\nNote : index number can be out of number's range : e.g number is 3 (it has 2 bits) and index number is 8(for C# this number is up to 31) -> result will be 131 \n\nSee more examples in test classes\n\nGood luck!\n\"\"\"\ndef flip_bit(value, bit_index):",
    "6": "Python 3\n\"\"\"\nYour translator should take in a string and output it with all odd length words having an extra letter that is the last letter in the word. It should also remove all punctuation as well as any underscores.\n\nExamples:\nInput:\n\"How did we end up here? We go?\"\nOutput:\n\"Howw didd we endd up here We go\"\n\"\"\"\ndef evenator(s):",
    "7": "Python 3\n\"\"\"\nMr. E Ven only likes even length words.\nPlease create a translator so that he doesn't have to hear those pesky odd length words.\nFor some reason he also hates punctuation, he likes his sentences to flow.\n\nYour translator should take in a string and output it with all odd length words having an extra letter (the last letter in the word). It should also remove all punctuation (.,?!) as well as any underscores (_).\n\n\"How did we end up here? We go?\"\ntranslated becomes-> \n\"Howw didd we endd up here We go\"\n\"\"\"\ndef evenator(s):",
    "8": "Python 3\n\"\"\"\nWe make 2 rows and put first letter in the Row 1, the second in the Row 2, third in Row 1 and so on until the end. Then we put the text from Row 2 next to the Row 1 text.\n\n\n## Example\nFor example if the text to encrypt is: `\"Simple text\"`, the 2 rows will be:\n\n\n\nRow 1\nS\nm\nl\n \ne\nt\n\n\nRow 2\ni\np\ne\nt\nx\n \n\n\n\nSo the result string will be: `\"Sml etipetx\"`\n\"\"\"\ndef simple_transposition(text):",
    "9": "Python 3\n\"\"\"\nSimple transposition is a basic and simple cryptography technique. We make 2 rows and put first a letter in the Row 1, the second in the Row 2, third in Row 1 and so on until the end. Then we put the text from Row 2 next to the Row 1 text and thats it.\n\nComplete the function that receives a string and encrypt it with this simple transposition.\n\n## Example\nFor example if the text to encrypt is: `\"Simple text\"`, the 2 rows will be:\n\n\n\nRow 1\nS\nm\nl\n \ne\nt\n\n\nRow 2\ni\np\ne\nt\nx\n \n\n\n\nSo the result string will be: `\"Sml etipetx\"`\n\"\"\"\ndef simple_transposition(text):",
    "10": "Python 3\n\"\"\"\nReturn the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.  \n\nExample:\nInput:\n[0, 2, 1, 2, 4, 1]\nOutput:\n3\nExplanation:\nIn an array with the values [0, 2, 1, 2, 4, 1] the greatest index distance is between the matching 1 values at index 2 and 5. \n\"\"\"\ndef greatest_distance(arr):",
    "11": "Python 3\n\"\"\"\nThe goal of this Kata is to return the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.  \n\nExample:\nIn an array with the values [0, 2, 1, 2, 4, 1] the greatest index distance is between the matching '1' values at index 2 and 5.  Executing greatestDistance against this array would return 3. (i.e. 5 - 2)  \n\nHere's the previous example in test form:\n```python\ntest.assert_equals(greatest_distance([0, 2, 1, 2, 4, 1]), 3)\n```\n\nThis is based on a Kata I had completed only to realize I has misread the instructions.  I enjoyed solving the problem I thought it was asking me to complete so I thought I'd add a new Kata for others to enjoy.  There are no tricks in this one, good luck!\n\"\"\"\ndef greatest_distance(arr):",
    "12": "Python 3\n\"\"\"\nWrite a function which takes a list of strings and returns each line prepended by the correct number. The numbering starts at 1. The format is \"n: string\".\n\nExamples:\nInput:\nnumber([])\nOutput:\n[]\n\nInput:\nnumber([\"a\", \"b\", \"c\"])\nOutput:\n[\"1: a\", \"2: b\", \"3: c\"]\n\"\"\"\ndef number(lines):",
    "13": "Python 3\n\"\"\"\nYour team is writing a fancy new text editor and you've been tasked with implementing the line numbering.\n\nWrite a function which takes a list of strings and returns each line prepended by the correct number.\n\nThe numbering starts at 1. The format is `n: string`. Notice the colon and space in between.\n\n**Examples:**\n\n```python\nnumber([]) # => []\nnumber([\"a\", \"b\", \"c\"]) # => [\"1: a\", \"2: b\", \"3: c\"]\n```\n\"\"\"\ndef number(lines):",
    "14": "Python 3\n\"\"\"\nWrite a function search_substr(fullText, searchText) that it returns the number of times the search_text is found within the full_text. If the searchText is empty, return 0.\n\nExamples:\nInput:\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb')\nOutput:\n2\nExplanation:\nshould return 2 since bb shows up twice\n\nInput:\nsearch_substr('aaabbbcccc', 'bbb')\nOutput:\n1\n\nInput:\nsearch_substr( 'aaa', 'aa' )\nOutput:\n2\n\nInput:\nsearch_substr( 'aaa', '' )\nOutput:\n0\n\nInput:\nsearch_substr( 'aaa', 'aa', false )\nOutput:\n1\n\"\"\"\ndef search_substr(full_text, search_text, allow_overlap=True):",
    "15": "Python 3\n\"\"\"\nComplete the solution so that it returns the number of times the search_text is found within the full_text.\n\n```python\nsearch_substr( fullText, searchText, allowOverlap = true )\n```\n\nso that overlapping solutions are (not) counted. If the searchText is empty, it should return `0`. Usage examples:\n\n```python\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb') # should return 2 since bb shows up twice\nsearch_substr('aaabbbcccc', 'bbb') # should return 1\nsearch_substr( 'aaa', 'aa' ) # should return 2\nsearch_substr( 'aaa', '' ) # should return 0\nsearch_substr( 'aaa', 'aa', false ) # should return 1\n```\n\"\"\"\ndef search_substr(full_text, search_text, allow_overlap=True):",
    "16": "Python 3\n\"\"\"\nGiven numbers $m$, $Tc$, $Th$. \nIf the difference between $Tc$ and $Th$ is not divisible by $3$, return \"Yes\".\nElse if the differnce divided by $3$ is more than $m$ return \"Yes\". \nElse return \"No\".\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, three  integers $m, Tc,Th$. \n\n-----Output:-----\nFor each testcase, output based on the rules.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq m,Tc,Th \\leq 10^9$\n- $Tc \\leq Th $\n\n-----Sample Input:-----\n2\n4 5 10\n2 2 5\n\n-----Sample Output:-----\nYes\nNo\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThis is a peculiar functioning setup.\nTwo Tanks are separated from each other by a wall .There is a pipe in the wall which connects  both tanks  which allows flow of water between them . Due to this ,there is change in temperature of both tanks , every minute temperature of Tank with larger temperature among two decreases by one and temperature of Tank  with smaller temperature among two increases by two until equilibrium is reached , But there is a problem .\nThe pipe can't control this flow of water if there is Non-equilibrium (inequality of temperature  on  both sides )  even after $m$ minutes and the pipe will burst after it , your task is to predict whether the pipe will burst or not .\nNote: If equilibrium cannot be reached the process will continue forever.\nThe initial temperature of Cold Tank is $Tc$ , of Hot Tank it is $Th$. \n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input, three  integers $m, Tc,Th$. \n\n-----Output:-----\nFor each testcase, output in a single line answer \"Yes\" if Pipe will burst after m minutes \"No\" if pipe will not burst.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100000$\n- $1 \\leq m,Tc,Th \\leq 10^9$\n- $Tc \\leq Th $\n\n-----Sample Input:-----\n2\n4 5 10\n2 2 5\n\n-----Sample Output:-----\nYes\nNo\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given an array arr.\nCalculate and return the sum of all possible odd-length subarrays.\n\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:",
    "19": "Python 3\n\"\"\"\nGiven an array of positive integers\u00a0arr, calculate the sum of all possible odd-length subarrays.\nA subarray is a contiguous\u00a0subsequence of the array.\nReturn\u00a0the sum of all odd-length subarrays of\u00a0arr.\n\u00a0\nExample 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\nExample 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\nExample 3:\nInput: arr = [10,11,12]\nOutput: 66\n\n\u00a0\nConstraints:\n\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000\n\"\"\"\nclass Solution:\n    def sumOddLengthSubarrays(self, arr: List[int]) -> int:"
}