{
    "0": "\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    # Find the closest commercial zone\n    closest = n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 2:\n                closest = min(closest, min(abs(i-k) + abs(j-l) for k in range(n) for l in range(n) if grid[k][l] == 3))\n    print(closest)\n",
    "1": "\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    # Find the closest commercial zone\n    def closest_commercial(i, j):\n        if grid[i][j] == '3':\n            return 0\n        if i == 0 and j == 0:\n            return min(closest_commercial(i, j+1), closest_commercial(i+1, j)) + 1\n        elif i == 0:\n            return min(closest_commercial(i, j+1), closest_commercial(i+1, j)) + 1\n        elif j == 0:\n            return min(closest_commercial(i, j+1), closest_commercial(i+1, j)) + 1\n        else:\n            return min(closest_commercial(i, j+1), closest_commercial(i+1, j), closest_commercial(i, j-1)) + 1\n    # Find the longest distance from a residential zone to its closest commercial zone\n    def longest_distance(i, j):\n        if i == n-1 and j == n-1:\n            return closest_commercial(i, j)\n        elif i == n-1:\n            return max(longest_distance(i, j+1), closest_commercial(i, j))\n        elif j == n-1:\n            return max(longest_distance(i+1, j), closest_commercial(i, j))\n        else:\n            return max(longest_distance(i+1, j), longest_distance(i, j+1), closest_commercial(i, j))\n    return longest_distance(0, 0)\n\nprint(code())",
    "2": "\n    a, b, h, w, n = map(int, input().split())\n    a_list = list(map(int, input().split()))\n    count = 0\n    for i in a_list:\n        if i <= a:\n            a = i\n            count += 1\n        elif i <= b:\n            b = i\n            count += 1\n        elif i <= h:\n            h = i\n            count += 1\n        elif i <= w:\n            w = i\n            count += 1\n        else:\n            count = -1\n            break\n    print(count)",
    "3": "\n    a, b, h, w, n = map(int, input().split())\n    a_list = list(map(int, input().split()))\n    if a > b:\n        a, b = b, a\n    if h < a or w < b:\n        print(-1)\n        return\n    if h >= a and w >= b:\n        print(0)\n        return\n    if h < a and w < b:\n        print(n)\n        return\n    if h >= a and w < b:\n        if h % a == 0:\n            print(n)\n            return\n        else:\n            print(n - (h // a))\n            return\n    if h < a and w >= b:\n        if w % b == 0:\n            print(n)\n            return\n        else:\n            print(n - (w // b))\n            return\n",
    "4": "\n        if not s or not words:\n            return []\n        word_len = len(words[0])\n        word_total = (len(words) - 1) * word_len\n        ans = []\n        word_cnt = collections.Counter(words)\n        for i in range(word_len):\n            start = i\n            cur_cnt = collections.Counter()\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j: j + word_len]\n                if word in word_cnt:\n                    cur_cnt[word] += 1\n                    while cur_cnt[word] > word_cnt[word]:\n                        cur_cnt[s[start: start + word_len]] -= 1\n                        start += word_len\n                else:\n                    cur_cnt.clear()\n                    start = j + word_len\n                if(start + word_total == j):\n                    ans.append(start)\n        return ans",
    "5": "\n        if not s or not words:\n            return []\n        word_len = len(words[0])\n        word_total = (len(words) - 1) * word_len\n        ans = []\n        word_cnt = collections.Counter(words)\n        for i in range(word_len):\n            start = i\n            cur_cnt = collections.Counter()\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j: j + word_len]\n                if word in word_cnt:\n                    cur_cnt[word] += 1\n                    while cur_cnt[word] > word_cnt[word]:\n                        cur_cnt[s[start: start + word_len]] -= 1\n                        start += word_len\n                else:\n                    cur_cnt.clear()\n                    start = j + word_len\n                \n                if(start + word_total == j):\n                    ans.append(start)\n        return ans",
    "6": "\n    n, k, x = map(int, input().split())\n    ranger = list(map(int, input().split()))\n    ranger.sort()\n    ranger.reverse()\n    ranger = ranger[:n-k]\n    ranger.sort()\n    ranger.reverse()\n    print(ranger[0], ranger[-1])\n",
    "7": "\n    n, k, x = map(int, input().split())\n    a = list(map(int, input().split()))\n    for i in range(k):\n        for j in range(n):\n            if j % 2 == 0:\n                a[j] = a[j] ^ x\n    print(max(a), min(a))\n",
    "8": "\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    p.reverse()\n    apples = 0\n    for i in range(n):\n        apples += p[i] - i\n    print(apples)\n",
    "9": "\n    n = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    p.reverse()\n    apples = 0\n    for i in range(n):\n        apples += p[i] - i\n    print(apples)\n",
    "10": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if a[i] < 0:\n            m += 1\n            print(1, i+1)\n            a[i] += a[i]\n    for i in range(n):\n        if a[i] == 0:\n            m += 1\n            print(1, i+1)\n            a[i] += a[i]\n    for i in range(n):\n        if a[i] > 0:\n            m += 1\n            print(1, i+1)\n            a[i] += a[i]\n    print(m)\n",
    "11": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    while not all(i <= j for i, j in zip(a, a[1:])):\n        for i in range(n):\n            for j in range(n):\n                if a[i] > a[j]:\n                    a[i] += a[j]\n                    a[j] = a[i] - a[j]\n                    a[i] -= a[j]\n                    m += 1\n                    print(i+1, j+1)\n    print(m)\n",
    "12": "\n    n = int(input())\n    x = [0]*n\n    y = [0]*n\n    for i in range(n):\n        x[i], y[i] = map(int, input().split())\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if x[i] == x[j] or y[i] == y[j]:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]\n    print(dp[0][n-1] % (10**9 + 7))\n",
    "13": "\n    # Take in N\n    N = int(input())\n\n    # Create a list of all possible pairs\n    pairs = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            pairs.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            paths.append([i, j])\n\n    # Create a list of all possible paths\n    paths = []\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):",
    "14": "\n    n = int(input())\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(input()))\n        y.append(int(input()))\n    x.append(x[0])\n    y.append(y[0])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if x[i]*(y[j]-y[k])+x[j]*(y[k]-y[i])+x[k]*(y[i]-y[j]) == 0:\n                    ans += 2**(n-3)\n    print(ans%998244353)",
    "15": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    # Create a list of all possible triangles\n    triangles = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                triangles.append([i, j, k])\n    # Create a list of all possible squares\n    squares = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    squares.append([i, j, k, l])\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polygons\n    polygons = triangles + squares\n    # Create a list of all possible polyg",
    "16": "\n    s = input()\n    k = 0\n    for i in range(len(s)):\n        if s[i:] != '':\n            k += 1\n    print(k)\n    for i in range(len(s)):\n        if s[i:] != '':\n            print(s[i:])",
    "17": "\n    s = input()\n    if len(s) < 5 or len(s) > 10000:\n        return\n    else:\n        suffixes = []\n        for i in range(len(s)):\n            if i == 0:\n                suffixes.append(s[i:])\n            else:\n                suffixes.append(s[i:])\n        suffixes.sort()\n        print(len(suffixes))\n        for i in suffixes:\n            print(i)\n",
    "18": "\n    n, m, f, s, t = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    flights = []\n    for i in range(f):\n        flights.append(list(map(int, input().split())))\n    #print(n, m, f, s, t)\n    #print(roads)\n    #print(flights)\n    #print(s, t)\n    #print(roads[0][0])\n    #print(roads[0][1])\n    #print(roads[0][2])\n    #print(flights[0][0])\n    #print(flights[0][1])\n    #print(flights[0][2])\n    #print(flights[1][0])\n    #print(flights[1][1])\n    #print(flights[1][2])\n    #print(flights[2][0])\n    #print(flights[2][1])\n    #print(flights[2][2])\n    #print(flights[3][0])\n    #print(flights[3][1])\n    #print(flights[3][2])\n    #print(flights[4][0])\n    #print(flights[4][1])\n    #print(flights[4][2])\n    #print(flights[5][0])\n    #print(flights[5][1])\n    #print(flights[5][2])\n    #print(flights[6][0])\n    #print(flights[6][1])\n    #print(flights[6][2])\n    #print(flights[7][0])\n    #print(flights[7][1])\n    #print(flights[7][2])\n    #print(flights[8][0])\n    #print(flights[8][1])\n    #print(flights[8][2])\n    #print(flights[9][0])\n    #print(flights[9][1])\n    #print(flights[9][2])\n    #print(flights[10][0])\n    #print(flights[10][1])\n    #print(flights[10][2])\n    #print(flights[11][0])\n    #print(flights[11][1])\n    #print(flights[11][2])\n    #print(flights[12][0])\n    #print(flights[12][1])\n    #print(flights[12][2])\n    #print(flights[13][0])\n    #print(flights[13][1])\n    #print(flights[13][2])\n    #print(flights[14][0])\n    #print(flights[14][1])\n    #print(flights[14][2])\n    #print(flights[15][0])\n    #print(flights[15][1])\n    #print(flights[15][2])\n    #print(flights[16][0])\n    #print(flights[16][1])\n    #print(flights[16][2])\n    #print(flights[17][0])\n    #print(flights[17][1])\n    #print(flights[17][2])\n    #print(flights[18][0])\n    #print(flights[18][1])\n    #print(flights[18][2])\n    #print(flights[19][0])\n    #print(flights[19][1])\n    #print(flights[19][2])\n    #print(flights[20][0])\n    #print(flights[20][1])\n    #print(flights[20][2])\n    #print(flights[21][0])\n    #print(flights[21][1])\n    #print(flights[21][2])\n    #print(flights[22][0])\n    #print(flights[22][1])\n    #print(flights[22][2])\n    #print(flights[23][0])\n    #print(flights[23][1])\n    #print(flights[23][2])\n    #print(fl",
    "19": "\n    n, m, f, s, t = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    flights = []\n    for i in range(f):\n        u, v = map(int, input().split())\n        flights.append((u, v))\n    d = [float('inf')] * n\n    d[s] = 0\n    for i in range(n):\n        for u, v, c in graph[i]:\n            if d[u] + c < d[v]:\n                d[v] = d[u] + c\n    for u, v in flights:\n        if d[u] + c < d[v]:\n            d[v] = d[u] + c\n    print(d[t])\n"
}