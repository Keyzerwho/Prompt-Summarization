{
    "0": "Python 3\n\"\"\"\n Given a grid of zones, find the distance from a residential zone to the closest commercial zone. \n-----Input----- The first line of input contains an integer $n$, $2\\leq n\\leq 1500$, followed by $n$ lines of length $n$ giving the map of the city zones as an $n\\times n$ matrix where each entry is 1, 2, or 3 depending on zone type. You can assume that the city has zones of all three types. -----Output----- Output a single integer $d$, the largest distance from a residential zone to its closest commercial zone. -----Examples----- Sample Input: 4 1223 2123 2213 3212 Sample Output: 3\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nA town is often divided into zones, e.g, industrial zones, commercial zones, and residential zones. If some residential zone is very far from all commercial zones, then the people living there will have a long journey whenever they want to do some shopping, and this is undesirable.\n\nThe input will consist of an $n\\times n$ grid of square zones. Each zone is labeled 1 (residential), 2 (industrial), or 3 (commercial). When travelling from one zone to another you are allowed to move north, east, south or west, and the distance travelled is the number of zone boundaries you traverse. So the distance between two adjacent zones is $1$, and the distance from the zone in square $(1,1)$ (the most south-westerly zone) to the zone in square $(2,3)$ is $3$ (one step east and two steps north). You may never move off the grid.\n\nYour task is to find the longest distance one has to travel from a residential zone to get to the commercial zone closest to that residential zone.\n\n-----Input-----\nThe first line of input contains an integer $n$, $2\\leq n\\leq 1500$, followed by $n$ lines of length $n$ giving the map of the city zones as an $n\\times n$ matrix where each entry is 1, 2, or 3 depending on zone type. You can assume that the city has zones of all three types.\n\n-----Output-----\nOutput a single integer $d$, the largest distance from a residential zone to its closest commercial zone.\n\n-----Examples-----\nSample Input:\n4\n1223\n2123\n2213\n3212\nSample Output:\n3\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given a rectangle of size a   b. You need to find the minimum number of extensions needed to reach Arkady's goal.   \n-----Input----- The first line contains five integers a, b, h, w and n (1 \u2264 a, b, h, w, n \u2264 100 000)\u00a0\u2014 the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions. The second line contains n integers a_1, a_2, ..., a_{n} (2 \u2264 a_{i} \u2264 100 000), where a_{i} equals the integer a side multiplies by when the i-th extension is applied. -----Output----- Print the minimum number of extensions needed to reach Arkady's goal. If it is not possible to place the rectangle on the field with all extensions, print -1. If the rectangle can be placed on the initial field, print 0. -----Examples----- Input 3 3 2 4 4 2 5 4 10 Output 1 Input 3 3 3 3 5 2 3 5 4 2 Output 0 Input 5 5 1 2 3 2 2 3 Output -1 Input 3 4 1 1 3 2 3 2 Output 3 -----Note----- In the first example it is enough to use any of the extensions available. For example, we can enlarge h in 5 times using the second extension. Then h becomes equal 10 and it is now possible to place the rectangle on the field.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIn one of the games Arkady is fond of the game process happens on a rectangular field. In the game process Arkady can buy extensions for his field, each extension enlarges one of the field sizes in a particular number of times. Formally, there are n extensions, the i-th of them multiplies the width or the length (by Arkady's choice) by a_{i}. Each extension can't be used more than once, the extensions can be used in any order.\n\nNow Arkady's field has size h \u00d7 w. He wants to enlarge it so that it is possible to place a rectangle of size a \u00d7 b on it (along the width or along the length, with sides parallel to the field sides). Find the minimum number of extensions needed to reach Arkady's goal.\n\n\n-----Input-----\n\nThe first line contains five integers a, b, h, w and n (1 \u2264 a, b, h, w, n \u2264 100 000)\u00a0\u2014 the sizes of the rectangle needed to be placed, the initial sizes of the field and the number of available extensions.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (2 \u2264 a_{i} \u2264 100 000), where a_{i} equals the integer a side multiplies by when the i-th extension is applied.\n\n\n-----Output-----\n\nPrint the minimum number of extensions needed to reach Arkady's goal. If it is not possible to place the rectangle on the field with all extensions, print -1. If the rectangle can be placed on the initial field, print 0.\n\n\n-----Examples-----\nInput\n3 3 2 4 4\n2 5 4 10\n\nOutput\n1\n\nInput\n3 3 3 3 5\n2 3 5 4 2\n\nOutput\n0\n\nInput\n5 5 1 2 3\n2 2 3\n\nOutput\n-1\n\nInput\n3 4 1 1 3\n2 3 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example it is enough to use any of the extensions available. For example, we can enlarge h in 5 times using the second extension. Then h becomes equal 10 and it is now possible to place the rectangle on the field.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given a string, s, and a list of words, words, find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters. \nExample 1: Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] Output: [0,9] Explanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively. The output order does not matter, returning [9,0] is fine too. Example 2: Input: s = \"wordgoodstudentgoodword\", words = [\"word\",\"student\"] Output: []\n\"\"\"\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:",
    "5": "Python 3\n\"\"\"\nYou are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.\n\nExample 1:\n\n\nInput:\ns = \"barfoothefoobarman\",\nwords = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too.\n\n\nExample 2:\n\n\nInput:\ns = \"wordgoodstudentgoodword\",\nwords = [\"word\",\"student\"]\nOutput: []\n\"\"\"\nclass Solution:\n    def findSubstring(self, s: str, words: List[str]) -> List[int]:",
    "6": "Python 3\n\"\"\"\n You have to print the maximum and minimum strength of the rangers after performing the above operations k times. \n-----Input----- First line consists of three integers n, k, x (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10^5, 0 \u2264 x \u2264 10^3) \u2014 number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively. Second line consists of n integers representing the strengths of the rangers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^3). -----Output----- Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times. -----Examples----- Input 5 1 2 9 7 11 15 5 Output 13 7 Input 2 100000 569 605 986 Output 986 605\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nJon Snow now has to fight with White Walkers. He has n rangers, each of which has his own strength. Also Jon Snow has his favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. He however thinks that his rangers are weak and need to improve. Jon now thinks that if he takes the bitwise XOR of strengths of some of rangers with his favourite number x, he might get soldiers of high strength. So, he decided to do the following operation k times: \n\n Arrange all the rangers in a straight line in the order of increasing strengths.\n\n Take the bitwise XOR (is written as $\\oplus$) of the strength of each alternate ranger with x and update it's strength.\n\n Suppose, Jon has 5 rangers with strengths [9, 7, 11, 15, 5] and he performs the operation 1 time with x = 2. He first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then he does the following: \n\n The strength of first ranger is updated to $5 \\oplus 2$, i.e. 7.\n\n The strength of second ranger remains the same, i.e. 7.\n\n The strength of third ranger is updated to $9 \\oplus 2$, i.e. 11.\n\n The strength of fourth ranger remains the same, i.e. 11.\n\n The strength of fifth ranger is updated to $15 \\oplus 2$, i.e. 13.\n\n The new strengths of the 5 rangers are [7, 7, 11, 11, 13]\n\nNow, Jon wants to know the maximum and minimum strength of the rangers after performing the above operations k times. He wants your help for this task. Can you help him?\n\n\n-----Input-----\n\nFirst line consists of three integers n, k, x (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10^5, 0 \u2264 x \u2264 10^3) \u2014 number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively.\n\nSecond line consists of n integers representing the strengths of the rangers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^3).\n\n\n-----Output-----\n\nOutput two integers, the maximum and the minimum strength of the rangers after performing the operation k times.\n\n\n-----Examples-----\nInput\n5 1 2\n9 7 11 15 5\n\nOutput\n13 7\nInput\n2 100000 569\n605 986\n\nOutput\n986 605\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n There are n inflorescences, numbered from 1 to n. Inflorescence number 1 is situated near base of tree and any other inflorescence with number i (i > 1) is situated at the top of branch, which bottom is p_{i}-th inflorescence and p_{i} < i. Once tree starts fruiting, there appears exactly one apple in each inflorescence. The same moment as apples appear, they start to roll down along branches to the very base of tree. Each second all apples, except ones in first inflorescence simultaneously roll down one branch closer to tree base, e.g. apple in a-th inflorescence gets to p_{a}-th inflorescence. Apples that end up in first inflorescence are gathered by Arcady in exactly the same moment. Second peculiarity of this tree is that once two apples are in same inflorescence they annihilate. This happens with each pair of apples, e.g. if there are 5 apples in same inflorescence in same time, only one will not be annihilated and if there are 8 apples, all apples will be annihilated. Thus, there can be no more than one apple in each inflorescence in each moment of time. Help Arcady with counting number of apples he will be able to collect from first inflorescence during one harvest. \n-----Input----- First line of input contains single integer number n (2 \u2264 n \u2264 100 000) \u00a0\u2014 number of inflorescences. Second line of input contains sequence of n - 1 integer numbers p_2, p_3, ..., p_{n} (1 \u2264 p_{i} < i), where p_{i} is number of inflorescence into which the apple from i-th inflorescence rolls down. -----Output----- Single line of output should contain one integer number: amount of apples that Arcady will be able to collect from first inflorescence during one harvest. -----Examples----- Input 3 1 1 Output 1 Input 5 1 2 2 2 Output 3 Input 18 1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4 Output 4 -----Note----- In first example Arcady will be able to collect only one apple, initially situated in 1st inflorescence. In next second apples from 2nd and 3rd inflorescences will roll down and annihilate, and Arcady won't be able to collect them. In the second example Arcady will be able to collect 3 apples. First one is one initially situated in first inflorescence. In a second apple from 2nd inflorescence will roll down to 1st (Arcady will collect it) and apples from 3rd, 4th, 5th inflorescences will roll down to 2nd. Two of them will annihilate and one not annihilated will roll down from 2-nd inflorescence to 1st one in the next second and Arcady will collect it.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nIn Arcady's garden there grows a peculiar apple-tree that fruits one time per year. Its peculiarity can be explained in following way: there are n inflorescences, numbered from 1 to n. Inflorescence number 1 is situated near base of tree and any other inflorescence with number i (i > 1) is situated at the top of branch, which bottom is p_{i}-th inflorescence and p_{i} < i.\n\nOnce tree starts fruiting, there appears exactly one apple in each inflorescence. The same moment as apples appear, they start to roll down along branches to the very base of tree. Each second all apples, except ones in first inflorescence simultaneously roll down one branch closer to tree base, e.g. apple in a-th inflorescence gets to p_{a}-th inflorescence. Apples that end up in first inflorescence are gathered by Arcady in exactly the same moment. Second peculiarity of this tree is that once two apples are in same inflorescence they annihilate. This happens with each pair of apples, e.g. if there are 5 apples in same inflorescence in same time, only one will not be annihilated and if there are 8 apples, all apples will be annihilated. Thus, there can be no more than one apple in each inflorescence in each moment of time.\n\nHelp Arcady with counting number of apples he will be able to collect from first inflorescence during one harvest.\n\n\n-----Input-----\n\nFirst line of input contains single integer number n (2 \u2264 n \u2264 100 000) \u00a0\u2014 number of inflorescences.\n\nSecond line of input contains sequence of n - 1 integer numbers p_2, p_3, ..., p_{n} (1 \u2264 p_{i} < i), where p_{i} is number of inflorescence into which the apple from i-th inflorescence rolls down.\n\n\n-----Output-----\n\nSingle line of output should contain one integer number: amount of apples that Arcady will be able to collect from first inflorescence during one harvest.\n\n\n-----Examples-----\nInput\n3\n1 1\n\nOutput\n1\n\nInput\n5\n1 2 2 2\n\nOutput\n3\n\nInput\n18\n1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn first example Arcady will be able to collect only one apple, initially situated in 1st inflorescence. In next second apples from 2nd and 3rd inflorescences will roll down and annihilate, and Arcady won't be able to collect them.\n\nIn the second example Arcady will be able to collect 3 apples. First one is one initially situated in first inflorescence. In a second apple from 2nd inflorescence will roll down to 1st (Arcady will collect it) and apples from 3rd, 4th, 5th inflorescences will roll down to 2nd. Two of them will annihilate and one not annihilated will roll down from 2-nd inflorescence to 1st one in the next second and Arcady will collect it.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Snuke has an integer sequence, a, of length N. The i-th element of a (1-indexed) is a_{i}. He can perform the following operation any number of times:  - Operation: Choose integers x and y between 1 and N (inclusive), and add a_x to a_y. He would like to perform this operation between 0 and 2N times (inclusive) so that a satisfies the condition below. Show one such sequence of operations. It can be proved that such a sequence of operations always exists under the constraints in this problem.  - Condition: a_1 \\leq a_2 \\leq ...  \\leq a_{N} -----Constraints-----  - 2 \\leq N \\leq 50  - -10^{6} \\leq a_i \\leq 10^{6}  - All input values are integers. \n-----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_{N} -----Output----- Let m be the number of operations in your solution. In the first line, print m. In the i-th of the subsequent m lines, print the numbers x and y chosen in the i-th operation, with a space in between. The output will be considered correct if m is between 0 and 2N (inclusive) and a satisfies the condition after the m operations. -----Sample Input----- 3 -2 5 -1 -----Sample Output----- 2 2 3 3 3  - After the first operation, a = (-2,5,4).  - After the second operation, a = (-2,5,8), and the condition is now satisfied.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nSnuke has an integer sequence, a, of length N. The i-th element of a (1-indexed) is a_{i}.\nHe can perform the following operation any number of times:\n - Operation: Choose integers x and y between 1 and N (inclusive), and add a_x to a_y.\nHe would like to perform this operation between 0 and 2N times (inclusive) so that a satisfies the condition below. Show one such sequence of operations.\nIt can be proved that such a sequence of operations always exists under the constraints in this problem.\n - Condition: a_1 \\leq a_2 \\leq ...  \\leq a_{N}\n\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - -10^{6} \\leq a_i \\leq 10^{6}\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_{N}\n\n-----Output-----\nLet m be the number of operations in your solution. In the first line, print m.\nIn the i-th of the subsequent m lines, print the numbers x and y chosen in the i-th operation, with a space in between.\nThe output will be considered correct if m is between 0 and 2N (inclusive) and a satisfies the condition after the m operations.\n\n-----Sample Input-----\n3\n-2 5 -1\n\n-----Sample Output-----\n2\n2 3\n3 3\n\n - After the first operation, a = (-2,5,4).\n - After the second operation, a = (-2,5,8), and the condition is now satisfied.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Print the number of ways to divide the vertices into pairs satisfying the given condition.  \n-----Input----- Input is given from Standard Input in the following format: N x_1 y_1 x_2 y_2 : x_{N - 1} y_{N - 1} -----Output----- Print the number of the ways to divide the vertices into pairs, satisfying the condition, modulo 10^9 + 7. -----Sample Input----- 4 1 2 2 3 3 4 -----Sample Output----- 2 There are three possible ways to divide the vertices into pairs, as shown below, and two satisfy the condition: the middle one and the right one.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLet N be an even number.\nThere is a tree with N vertices.\nThe vertices are numbered 1, 2, ..., N.\nFor each i (1 \\leq i \\leq N - 1), the i-th edge connects Vertex x_i and y_i.\nSnuke would like to decorate the tree with ribbons, as follows.\nFirst, he will divide the N vertices into N / 2 pairs.\nHere, each vertex must belong to exactly one pair.\nThen, for each pair (u, v), put a ribbon through all the edges contained in the shortest path between u and v.\nSnuke is trying to divide the vertices into pairs so that the following condition is satisfied: \"for every edge, there is at least one ribbon going through it.\"\nHow many ways are there to divide the vertices into pairs, satisfying this condition?\nFind the count modulo 10^9 + 7.\nHere, two ways to divide the vertices into pairs are considered different when there is a pair that is contained in one of the two ways but not in the other.\n\n-----Constraints-----\n - N is an even number.\n - 2 \\leq N \\leq 5000\n - 1 \\leq x_i, y_i \\leq N\n - The given graph is a tree.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_{N - 1} y_{N - 1}\n\n-----Output-----\nPrint the number of the ways to divide the vertices into pairs, satisfying the condition, modulo 10^9 + 7.\n\n-----Sample Input-----\n4\n1 2\n2 3\n3 4\n\n-----Sample Output-----\n2\n\nThere are three possible ways to divide the vertices into pairs, as shown below, and two satisfy the condition: the middle one and the right one.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given N points (x_i,y_i) located on a two-dimensional plane. Consider a subset S of the N points that forms a convex polygon. Here, we say a set of points S forms a convex polygon when there exists a convex polygon with a positive area that has the same set of vertices as S. All the interior angles of the polygon must be strictly less than 180 . For example, in the figure above, {A,C,E} and {B,D,E} form convex polygons; {A,C,D,E}, {A,B,C,E}, {A,B,C}, {D,E} and {} do not. For a given set S, let n be the number of the points among the N points that are inside the convex hull of S (including the boundary and vertices). Then, we will define the score of S as 2^{n-|S|}. Compute the scores of all possible sets S that form convex polygons, and find the sum of all those scores. However, since the sum can be extremely large, print the sum modulo 998244353. -----Constraints-----  - 1 N 200  - 0 x_i,y_i<10^4 (1 i N)  - If i j, x_i x_j or y_i y_j.  - x_i and y_i are integers. \n-----Input----- The input is given from Standard Input in the following format: N x_1 y_1 x_2 y_2 : x_N y_N -----Output----- Print the sum of all the scores modulo 998244353. -----Sample Input----- 4 0 0 0 1 1 0 1 1 -----Sample Output----- 5 We have five possible sets as S, four sets that form triangles and one set that forms a square. Each of them has a score of 2^0=1, so the answer is 5.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given N points (x_i,y_i) located on a two-dimensional plane.\nConsider a subset S of the N points that forms a convex polygon.\nHere, we say a set of points S forms a convex polygon when there exists a convex polygon with a positive area that has the same set of vertices as S. All the interior angles of the polygon must be strictly less than 180\u00b0.\nFor example, in the figure above, {A,C,E} and {B,D,E} form convex polygons; {A,C,D,E}, {A,B,C,E}, {A,B,C}, {D,E} and {} do not.\nFor a given set S, let n be the number of the points among the N points that are inside the convex hull of S (including the boundary and vertices). Then, we will define the score of S as 2^{n-|S|}.\nCompute the scores of all possible sets S that form convex polygons, and find the sum of all those scores.\nHowever, since the sum can be extremely large, print the sum modulo 998244353.\n\n-----Constraints-----\n - 1\u2264N\u2264200\n - 0\u2264x_i,y_i<10^4 (1\u2264i\u2264N)\n - If i\u2260j, x_i\u2260x_j or y_i\u2260y_j.\n - x_i and y_i are integers.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the sum of all the scores modulo 998244353.\n\n-----Sample Input-----\n4\n0 0\n0 1\n1 0\n1 1\n\n-----Sample Output-----\n5\n\nWe have five possible sets as S, four sets that form triangles and one set that forms a square. Each of them has a score of 2^0=1, so the answer is 5.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given a word, find all possible suffixes of this word. \n-----Input----- The only line contains a string s (5 \u2264 |s| \u2264 10^4) consisting of lowercase English letters. -----Output----- On the first line print integer k \u2014 a number of distinct possible suffixes. On the next k lines print suffixes.  Print suffixes in lexicographical (alphabetical) order.  -----Examples----- Input abacabaca Output 3 aca ba ca Input abaca Output 0 -----Note----- The first test was analysed in the problem statement.  In the second example the length of the string equals 5. The length of the root equals 5, so no string can be used as a suffix.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nFirst-rate specialists graduate from Berland State Institute of Peace and Friendship. You are one of the most talented students in this university. The education is not easy because you need to have fundamental knowledge in different areas, which sometimes are not related to each other. \n\nFor example, you should know linguistics very well. You learn a structure of Reberland language as foreign language. In this language words are constructed according to the following rules. First you need to choose the \"root\" of the word \u2014 some string which has more than 4 letters. Then several strings with the length 2 or 3 symbols are appended to this word. The only restriction \u2014  it is not allowed to append the same string twice in a row. All these strings are considered to be suffixes of the word (this time we use word \"suffix\" to describe a morpheme but not the few last characters of the string as you may used to). \n\nHere is one exercise that you have found in your task list. You are given the word s. Find all distinct strings with the length 2 or 3, which can be suffixes of this word according to the word constructing rules in Reberland language. \n\nTwo strings are considered distinct if they have different length or there is a position in which corresponding characters do not match. \n\nLet's look at the example: the word abacabaca is given. This word can be obtained in the following ways: [Image], where the root of the word is overlined, and suffixes are marked by \"corners\". Thus, the set of possible suffixes for this word is {aca, ba, ca}. \n\n\n-----Input-----\n\nThe only line contains a string s (5 \u2264 |s| \u2264 10^4) consisting of lowercase English letters.\n\n\n-----Output-----\n\nOn the first line print integer k \u2014 a number of distinct possible suffixes. On the next k lines print suffixes. \n\nPrint suffixes in lexicographical (alphabetical) order. \n\n\n-----Examples-----\nInput\nabacabaca\n\nOutput\n3\naca\nba\nca\n\nInput\nabaca\n\nOutput\n0\n\n\n\n-----Note-----\n\nThe first test was analysed in the problem statement. \n\nIn the second example the length of the string equals 5. The length of the root equals 5, so no string can be used as a suffix.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a network of cities connected by roads, the amount it costs to buy gas for traveling between pairs of cities, and a list of available flights between some of those cities. Help Peter by finding the minimum amount of money he needs to spend to get from his hometown to next year's destination! \n-----Input----- The input consists of a single test case. The first line lists five space-separated integers $n$, $m$, $f$, $s$, and $t$, denoting the number of cities $n$ ($0 < n \\le 50000$), the number of roads $m$ ($0 \\le m \\le 150000$), the number of flights $f$ ($0 \\le f \\le 1000$), the number $s$ ($0 \\le s < n$) of the city in which Peter\u2019s trip starts, and the number $t$ ($0 \\le t < n$) of the city Peter is trying to travel to. (Cities are numbered from $0$ to $n-1$.) The first line is followed by $m$ lines, each describing one road. A road description contains three space-separated integers $i$, $j$, and $c$ ($0 \\le i, j < n, i \\ne j$ and $0 < c \\le 50000$), indicating there is a road connecting cities $i$ and $j$ that costs $c$ cents to travel. Roads can be used in either direction for the same cost. All road descriptions are unique. Each of the following $f$ lines contains a description of an available flight, which consists of two space-separated integers $u$ and $v$ ($0 \\le u, v < n$, $u \\ne v$) denoting that a flight from city $u$ to city $v$ is available (though not from $v$ to $u$ unless listed elsewhere). All flight descriptions are unique. -----Output----- Output the minimum number of cents Peter needs to spend to get from his home town to the competition, using at most one flight. You may assume that there is a route on which Peter can reach his destination. -----Examples----- Sample Input: 8 11 1 0 5 0 1 10 0 2 10 1 2 10 2 6 40 6 7 10 5 6 10 3 5 15 3 6 40 3 4 20 1 4 20 1 3 20 4 7 Sample Output: 45\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nPeter returned from the recently held ACM ICPC World Finals only to find that his return flight was overbooked and he was bumped from the flight! Well, at least he wasn\u2019t beat up by the airline and he\u2019s received a voucher for one free flight between any two destinations he wishes.\n\nHe is already planning next year\u2019s trip. He plans to travel by car where necessary, but he may be using his free flight ticket for one leg of the trip. He asked for your help in his planning.\n\nHe can provide you a network of cities connected by roads, the amount it costs to buy gas for traveling between pairs of cities, and a list of available flights between some of those cities. Help Peter by finding the minimum amount of money he needs to spend to get from his hometown to next year\u2019s destination!\n\n-----Input-----\nThe input consists of a single test case. The first line lists five space-separated integers $n$, $m$, $f$, $s$, and $t$, denoting the number of cities $n$ ($0 < n \\le 50000$), the number of roads $m$ ($0 \\le m \\le 150000$), the number of flights $f$ ($0 \\le f \\le 1000$), the number $s$ ($0 \\le s < n$) of the city in which Peter\u2019s trip starts, and the number $t$ ($0 \\le t < n$) of the city Peter is trying to travel to. (Cities are numbered from $0$ to $n-1$.)\n\nThe first line is followed by $m$ lines, each describing one road. A road description contains three space-separated integers $i$, $j$, and $c$ ($0 \\le i, j < n, i \\ne j$ and $0 < c \\le 50000$), indicating there is a road connecting cities $i$ and $j$ that costs $c$ cents to travel. Roads can be used in either direction for the same cost. All road descriptions are unique.\n\nEach of the following $f$ lines contains a description of an available flight, which consists of two space-separated integers $u$ and $v$ ($0 \\le u, v < n$, $u \\ne v$) denoting that a flight from city $u$ to city $v$ is available (though not from $v$ to $u$ unless listed elsewhere). All flight descriptions are unique.\n\n-----Output-----\nOutput the minimum number of cents Peter needs to spend to get from his home town to the competition, using at most one flight. You may assume that there is a route on which Peter can reach his destination.\n\n-----Examples-----\nSample Input:\n8 11 1 0 5\n0 1 10\n0 2 10\n1 2 10\n2 6 40\n6 7 10\n5 6 10\n3 5 15\n3 6 40\n3 4 20\n1 4 20\n1 3 20\n4 7\nSample Output:\n45\n\"\"\"\ndef code():"
}