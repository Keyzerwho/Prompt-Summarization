{
    "0": "Python 3\n\"\"\"\nIn this task, you have to define a function named func that will take a list as input.\n\nYou must try and guess the pattern how we get the output number and return list - [output number,binary representation,octal representation,hexadecimal representation]\n\nExamples: \nInput:\nfunc([12,13,6,3,6,45,123])\nOutput:\n[29,'11101','35','1d']\n\nInput:\nfunc([1,9,23,43,65,31,63,99]) \nOutput:\n[41,'101001','51','29']\n\nInput:\nfunc([2,4,6,8,10,12,14,16,18,19])\nOutput:\n[10,'1010','12','a']\n\n\"\"\"\ndef func(l):",
    "1": "Python 3\n\"\"\"\nIn this kata, you have to define a function named **func** that will take a list as input.\n\nYou must try and guess the pattern how we get the output number and return list - **[output number,binary representation,octal representation,hexadecimal representation]**, but **you must convert that specific number without built-in : bin,oct and hex functions.**\n\nExamples : \n\n```python\nfunc([12,13,6,3,6,45,123]) returns - [29,'11101','35','1d']\n\nfunc([1,9,23,43,65,31,63,99]) returns - [41,'101001','51','29']\n\nfunc([2,4,6,8,10,12,14,16,18,19]) returns - [10,'1010','12','a']\n```\n\"\"\"\ndef func(l):",
    "2": "Python 3\n\"\"\"\nGiven n, m and a, calculate the number of squares of side length a required to completely cover a rectangle of length m and breadth n.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed squares.\nExamples\ninput\n6 6 4\noutput\n4\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nTheatre Square in the capital city of Berland has a rectangular shape with the size n\u2009\u00d7\u2009m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a\u2009\u00d7\u2009a.\nWhat is the least number of flagstones needed to pave the Square? It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square.\nInput\nThe input contains three positive integer numbers in the first line: n,\u2009\u2009m and a (1\u2009\u2264\u2009\u2009n,\u2009m,\u2009a\u2009\u2264\u200910^9).\nOutput\nPrint the needed number of flagstones in new line.\nExamples\ninput\n6 6 4\noutput\n4\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given a string S consisting of lowercase English letters.\nDetermine whether we can turn S into a palindrome by repeating the operation of swapping two adjacent characters. If it is possible, find the minimum required number of operations.\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 2 \u00d7 10^5\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nIf we cannot turn S into a palindrome, print -1. Otherwise, print the minimum required number of operations.\n\n-----Sample Input-----\neel\n\n-----Sample Output-----\n1\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a string S consisting of lowercase English letters.\nDetermine whether we can turn S into a palindrome by repeating the operation of swapping two adjacent characters. If it is possible, find the minimum required number of operations.\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 2 \u00d7 10^5\n - S consists of lowercase English letters.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nIf we cannot turn S into a palindrome, print -1. Otherwise, print the minimum required number of operations.\n\n-----Sample Input-----\neel\n\n-----Sample Output-----\n1\n\nWe can turn S into a palindrome by the following operation:\n - Swap the 2-nd and 3-rd characters. S is now ele.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given an array to check whether the characters of given string S belongs to it or not. Print 1 if it contains else print 0.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains- \na string $S$ of lowercase letter\na integer $n$ denoting length of character array $arr$\nnext line contains $n$ space separated characters.\n\n-----Output:-----\nFor each testcase, Print $1$ if the string contains characters from the given array only else print $0$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $0 \\leq n \\leq 10^5$\n\n-----Sample Input:-----\n3\nabcd\n4\na b c d\naabbbcccdddd\n4\na b c d\nacd\n3\na b d\n\n-----Sample Output:-----\n1\n1\n0\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYour are given a string $S$ containing only lowercase letter and a array of character $arr$. Find whether the given string only contains characters from the given character array. \nPrint $1$ if the string contains characters from the given array only else print $0$.\nNote: string contains characters in lower case only.\n\n-----Input:-----\n- First line will contain $T$, number of testcases. Then the testcases follow. \n- Each testcase contains- \na string $S$ of lowercase letter\na integer $n$ denoting length of character array $arr$\nnext line contains $n$ space separated characters.\n\n-----Output:-----\nFor each testcase, Print $1$ if the string contains characters from the given array only else print $0$.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $0 \\leq n \\leq 10^5$\n\n-----Sample Input:-----\n3\nabcd\n4\na b c d\naabbbcccdddd\n4\na b c d\nacd\n3\na b d\n\n-----Sample Output:-----\n1\n1\n0\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nConsider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor.\n\nExamples:\npoly_multiply([1, 2], [1] ) = [1, 2]\npoly_multiply([2, 4], [4, 5] ) = [8, 26, 20]\n\n\"\"\"\ndef poly_multiply(p1, p2):",
    "9": "Python 3\n\"\"\"\n*** Nova polynomial multiply*** \n\nThis kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1)   [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe)  [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 )   [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5))\n\nConsider a polynomial in a list where each element in the list element corresponds to the factors. The factor order is the position in the list. The first element is the zero order factor (the constant).\n\np = [a0, a1, a2, a3] signifies the polynomial a0 + a1x + a2x^2 + a3*x^3\n\nIn this kata multiply two polynomials:\n\n```python \npoly_multiply([1, 2], [1] ) = [1, 2]\npoly_multiply([2, 4], [4, 5] ) = [8, 26, 20]\n```\nThe first kata of this series is preloaded in the code and can be used: [poly_add](http://www.codewars.com/kata/nova-polynomial-1-add-1)\n\"\"\"\ndef poly_multiply(p1, p2):",
    "10": "Python 3\n\"\"\"\nYou want to minimize a tree. You can perform the following operation multiple times: choose a vertex v, and two disjoint (except for v) paths of equal length a_0 = v, a_1, ..., a_{k}, and b_0 = v, b_1, ..., b_{k}. Additionally, vertices a_1, ..., a_{k}, b_1, ..., b_{k} must not have any neighbours in the tree other than adjacent vertices of corresponding paths. After that, one of the paths may be merged into the other.\n\nDetermine if it possible to make the tree into a path via a sequence of described operations, and if the answer is positive, also determine the shortest length of such path.\n\n\n-----Input-----\n\nThe first line of input contains the number of vertices n (2 \u2264 n \u2264 2\u00b710^5).\n\nNext n - 1 lines describe edges of the tree. Each of these lines contains two space-separated integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v)\u00a0\u2014 indices of endpoints of the corresponding edge. It is guaranteed that the given graph is a tree.\n\n\n-----Output-----\n\nIf it is impossible to obtain a path, print -1. Otherwise, print the minimum number of edges in a possible path.\n\n\n-----Examples-----\nInput\n6\n1 2\n2 3\n2 4\n4 5\n1 6\n\nOutput\n3\n\nInput\n7\n1 2\n1 3\n3 4\n1 5\n5 6\n6 7\n\nOutput\n-1\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nVanya wants to minimize a tree. He can perform the following operation multiple times: choose a vertex v, and two disjoint (except for v) paths of equal length a_0 = v, a_1, ..., a_{k}, and b_0 = v, b_1, ..., b_{k}. Additionally, vertices a_1, ..., a_{k}, b_1, ..., b_{k} must not have any neighbours in the tree other than adjacent vertices of corresponding paths. After that, one of the paths may be merged into the other, that is, the vertices b_1, ..., b_{k} can be effectively erased: [Image] \n\nHelp Vanya determine if it possible to make the tree into a path via a sequence of described operations, and if the answer is positive, also determine the shortest length of such path.\n\n\n-----Input-----\n\nThe first line of input contains the number of vertices n (2 \u2264 n \u2264 2\u00b710^5).\n\nNext n - 1 lines describe edges of the tree. Each of these lines contains two space-separated integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v)\u00a0\u2014 indices of endpoints of the corresponding edge. It is guaranteed that the given graph is a tree.\n\n\n-----Output-----\n\nIf it is impossible to obtain a path, print -1. Otherwise, print the minimum number of edges in a possible path.\n\n\n-----Examples-----\nInput\n6\n1 2\n2 3\n2 4\n4 5\n1 6\n\nOutput\n3\n\nInput\n7\n1 2\n1 3\n3 4\n1 5\n5 6\n6 7\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample case, a path of three edges is obtained after merging paths 2 - 1 - 6 and 2 - 4 - 5.\n\nIt is impossible to perform any operation in the second sample case. For example, it is impossible to merge paths 1 - 3 - 4 and 1 - 5 - 6, since vertex 6 additionally has a neighbour 7 that is not present in the corresponding path.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nWe have a string of letters 'a' and 'b'. We want to perform some operations on it. On each step we choose one of substrings \"ab\" in the string and replace it with the string \"bba\". If we have no \"ab\" as a substring, our job is done. Print the minimum number of steps we should perform to make our job done modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line contains the initial string consisting of letters 'a' and 'b' only with length from 1 to 10^6.\n\n\n-----Output-----\n\nPrint the minimum number of steps modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\nab\n\nOutput\n1\n\nInput\naab\n\nOutput\n3\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nWe have a string of letters 'a' and 'b'. We want to perform some operations on it. On each step we choose one of substrings \"ab\" in the string and replace it with the string \"bba\". If we have no \"ab\" as a substring, our job is done. Print the minimum number of steps we should perform to make our job done modulo 10^9 + 7.\n\nThe string \"ab\" appears as a substring if there is a letter 'b' right after the letter 'a' somewhere in the string.\n\n\n-----Input-----\n\nThe first line contains the initial string consisting of letters 'a' and 'b' only with length from 1 to 10^6.\n\n\n-----Output-----\n\nPrint the minimum number of steps modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\nab\n\nOutput\n1\n\nInput\naab\n\nOutput\n3\n\n\n\n-----Note-----\n\nThe first example: \"ab\"  \u2192  \"bba\".\n\nThe second example: \"aab\"  \u2192  \"abba\"  \u2192  \"bbaba\"  \u2192  \"bbbbaa\".\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given n sets which are a subset of the set of natural numbers in the range 1 to m. You can add a single number to any one set at the cost 1.\n\nFind the minimum total cost such that for every pair of sets the union is not a null set.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of sets and the range of natural numbers.\n\nThe next n lines that follow - the sets containing the natural numbers in range 1 to m. If the input is zero it is a null set.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum cost such that the union of no two pairs is a null set.\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the third example add 2 to the third subset.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe \"BerCorp\" company has got n employees. These employees can use m approved official languages for the formal correspondence. The languages are numbered with integers from 1 to m. For each employee we have the list of languages, which he knows. This list could be empty, i. e. an employee may know no official languages. But the employees are willing to learn any number of official languages, as long as the company pays their lessons. A study course in one language for one employee costs 1 berdollar.\n\nFind the minimum sum of money the company needs to spend so as any employee could correspond to any other one (their correspondence can be indirect, i. e. other employees can help out translating).\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of employees and the number of languages.\n\nThen n lines follow \u2014 each employee's language list. At the beginning of the i-th line is integer k_{i} (0 \u2264 k_{i} \u2264 m) \u2014 the number of languages the i-th employee knows. Next, the i-th line contains k_{i} integers \u2014 a_{ij} (1 \u2264 a_{ij} \u2264 m) \u2014 the identifiers of languages the i-th employee knows. It is guaranteed that all the identifiers in one list are distinct. Note that an employee may know zero languages.\n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum amount of money to pay so that in the end every employee could write a letter to every other one (other employees can help out translating).\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 2 3\n2 3 4\n2 4 5\n1 5\n\nOutput\n0\n\nInput\n8 7\n0\n3 1 2 3\n1 1\n2 5 4\n2 6 7\n1 3\n2 7 4\n1 1\n\nOutput\n2\n\nInput\n2 2\n1 2\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the second sample the employee 1 can learn language 2, and employee 8 can learn language 4.\n\nIn the third sample employee 2 must learn language 2.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nWrite a program to find GCD and LCM of given two integers A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nTwo integers A and B are the inputs. Write a program to find GCD and LCM of A and B.\n\n-----Input-----\n\nThe first line contains an integer T, total number of testcases. Then follow T lines, each line contains an integer A and B. \n\n-----Output-----\nDisplay the GCD and LCM of A and B separated by space respectively. The answer for each test case must be displayed in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B \u2264 1000000\n\n-----Example-----\nInput\n3 \n120 140\n10213 312\n10 30\n\nOutput\n\n20 840\n1 3186456\n10 30\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given a graph which might have undirected edges.\n\nYou need to direct undirected edges in such a way that the resulting graph is directed and acyclic.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and the number of edges in the graph, respectively.\n\nThe next $m$ lines describe edges of the graph. The $i$-th edge is described with three integers $t_i$, $x_i$ and $y_i$ ($t_i \\in [0; 1]$, $1 \\le x_i, y_i \\le n$) \u2014 the type of the edge ($t_i = 0$ if the edge is undirected and $t_i = 1$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $x_i$ and $y_i$ and directed edge is going from the vertex $x_i$ to the vertex $y_i$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($x_i, y_i$) there are no other pairs ($x_i, y_i$) or ($y_i, x_i$)).\n\nIt is guaranteed that both sum $n$ and sum $m$ do not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$; $\\sum m \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case print the answer \u2014 \"NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"YES\" on the first line and $m$ lines describing edges of the resulted directed acyclic graph (in any order). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.\n\n\n-----Example-----\nInput\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n\nOutput\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a graph consisting of $n$ vertices and $m$ edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can't change their direction. Other edges are undirected and you have to choose some direction for all these edges.\n\nYou have to direct undirected edges in such a way that the resulting graph is directed and acyclic (i.e. the graph with all edges directed and having no directed cycles). Note that you have to direct all undirected edges.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and the number of edges in the graph, respectively.\n\nThe next $m$ lines describe edges of the graph. The $i$-th edge is described with three integers $t_i$, $x_i$ and $y_i$ ($t_i \\in [0; 1]$, $1 \\le x_i, y_i \\le n$) \u2014 the type of the edge ($t_i = 0$ if the edge is undirected and $t_i = 1$ if the edge is directed) and vertices this edge connects (the undirected edge connects vertices $x_i$ and $y_i$ and directed edge is going from the vertex $x_i$ to the vertex $y_i$). It is guaranteed that the graph do not contain self-loops (i.e. edges from the vertex to itself) and multiple edges (i.e. for each pair ($x_i, y_i$) there are no other pairs ($x_i, y_i$) or ($y_i, x_i$)).\n\nIt is guaranteed that both sum $n$ and sum $m$ do not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$; $\\sum m \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case print the answer \u2014 \"NO\" if it is impossible to direct undirected edges in such a way that the resulting graph is directed and acyclic, otherwise print \"YES\" on the first line and $m$ lines describing edges of the resulted directed acyclic graph (in any order). Note that you cannot change the direction of the already directed edges. If there are several answers, you can print any.\n\n\n-----Example-----\nInput\n4\n3 1\n0 1 3\n5 5\n0 2 1\n1 1 5\n1 5 4\n0 5 2\n1 3 5\n4 5\n1 1 2\n0 4 3\n1 3 1\n0 2 3\n1 2 4\n4 5\n1 4 1\n1 1 3\n0 1 2\n1 2 4\n1 3 2\n\nOutput\nYES\n3 1\nYES\n2 1\n1 5\n5 4\n2 5\n3 5\nYES\n1 2\n3 4\n3 1\n3 2\n2 4\nNO\n\n\n\n-----Note-----\n\nExplanation of the second test case of the example:\n\n[Image]\n\nExplanation of the third test case of the example:\n\n[Image]\n\"\"\"\ndef code():"
}