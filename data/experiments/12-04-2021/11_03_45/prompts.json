{
    "0": "Python 3\n\"\"\"\n You have a string S consisting of N uppercase English letters. You are allowed to perform at most one operation of following kind: Choose any position in the string, remove the character at that position and insert it back to any other place in the string. Find the  lexicographically smallest  string you can achieve. \n-----Input----- The first line contains a single integer $n$ ($1 \\leq n \\leq 2 \\times 10^5$)\u00a0\u2014 the number of points on the plane. The $i$-th of the next $n$ lines contains two integers $x_i$, $y_i$ ($1 \\leq x_i, y_i \\leq 10^9$)\u00a0\u2014 the coordinates of the $i$-th point. All points are distinct. -----Output----- Print a single integer\u00a0\u2014 the number of different non-empty sets of points she can obtain. -----Examples----- Input 3 1 1 1 2 1 3 Output 3 Input 3 1 1 2 1 3 1 Output 6 Input 4 2 1 2 2 3 1 3 2 Output 6 -----Note----- For the first example, there is exactly one set having $k$ points for $k = 1, 2, 3$, so the total number is $3$. For the second example, the numbers of sets having $k$ points for $k = 1, 2, 3$ are $3$, $2$, $1$ respectively, and their sum is $6$. For the third example, as the following figure shows, there are  $2$ sets having one point;  $3$ sets having two points;  $1$ set having four points.  Therefore, the number of different non-empty sets in this example is $2 + 3 + 0 + 1 = 6$. [Image]\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThere are $n$ points on the plane, the $i$-th of which is at $(x_i, y_i)$. Tokitsukaze wants to draw a strange rectangular area and pick all the points in the area.\n\nThe strange area is enclosed by three lines, $x = l$, $y = a$ and $x = r$, as its left side, its bottom side and its right side respectively, where $l$, $r$ and $a$ can be any real numbers satisfying that $l < r$. The upper side of the area is boundless, which you can regard as a line parallel to the $x$-axis at infinity. The following figure shows a strange rectangular area. [Image] \n\nA point $(x_i, y_i)$ is in the strange rectangular area if and only if $l < x_i < r$ and $y_i > a$. For example, in the above figure, $p_1$ is in the area while $p_2$ is not.\n\nTokitsukaze wants to know how many different non-empty sets she can obtain by picking all the points in a strange rectangular area, where we think two sets are different if there exists at least one point in one set of them but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\leq n \\leq 2 \\times 10^5$)\u00a0\u2014 the number of points on the plane.\n\nThe $i$-th of the next $n$ lines contains two integers $x_i$, $y_i$ ($1 \\leq x_i, y_i \\leq 10^9$)\u00a0\u2014 the coordinates of the $i$-th point.\n\nAll points are distinct.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of different non-empty sets of points she can obtain.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 3\n\nOutput\n3\n\nInput\n3\n1 1\n2 1\n3 1\n\nOutput\n6\n\nInput\n4\n2 1\n2 2\n3 1\n3 2\n\nOutput\n6\n\n\n\n-----Note-----\n\nFor the first example, there is exactly one set having $k$ points for $k = 1, 2, 3$, so the total number is $3$.\n\nFor the second example, the numbers of sets having $k$ points for $k = 1, 2, 3$ are $3$, $2$, $1$ respectively, and their sum is $6$.\n\nFor the third example, as the following figure shows, there are  $2$ sets having one point;  $3$ sets having two points;  $1$ set having four points. \n\nTherefore, the number of different non-empty sets in this example is $2 + 3 + 0 + 1 = 6$. [Image]\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Alyona's mother wants to present an array of n non-negative integers to Alyona. The array should be special. Alyona is a capricious girl so after she gets the array, she inspects m of its subarrays. Subarray is a set of some subsequent elements of the array. The i-th subarray is described with two integers l_{i} and r_{i}, and its elements are a[l_{i}], a[l_{i} + 1], ..., a[r_{i}]. Alyona is going to find mex for each of the chosen subarrays. Among these m mexes the girl is going to find the smallest. She wants this minimum mex to be as large as possible. You are to find an array a of n elements so that the minimum mex among those chosen by Alyona subarrays is as large as possible. The mex of a set S is a minimum possible non-negative integer that is not in S. \n-----Input----- The first line contains two integers n and m (1 \u2264 n, m \u2264 10^5). The next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n), that describe the subarray a[l_{i}], a[l_{i} + 1], ..., a[r_{i}]. -----Output----- In the first line print single integer\u00a0\u2014 the maximum possible minimum mex. In the second line print n integers\u00a0\u2014 the array a. All the elements in a should be between 0 and 10^9. It is guaranteed that there is an optimal answer in which all the elements in a are between 0 and 10^9. If there are multiple solutions, print any of them. -----Examples----- Input 5 3 1 3 2 5 4 5 Output 2 1 0 2 1 0 Input 4 2 1 4 2 4 Output 3 5 2 0 1 -----Note----- The first example: the mex of the subarray (1, 3) is equal to 3, the mex of the subarray (2, 5) is equal to 3, the mex of the subarray (4, 5) is equal to 2 as well, thus the minumal mex among the subarrays chosen by Alyona is equal to 2.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nAlyona's mother wants to present an array of n non-negative integers to Alyona. The array should be special. \n\nAlyona is a capricious girl so after she gets the array, she inspects m of its subarrays. Subarray is a set of some subsequent elements of the array. The i-th subarray is described with two integers l_{i} and r_{i}, and its elements are a[l_{i}], a[l_{i} + 1], ..., a[r_{i}].\n\nAlyona is going to find mex for each of the chosen subarrays. Among these m mexes the girl is going to find the smallest. She wants this minimum mex to be as large as possible. \n\nYou are to find an array a of n elements so that the minimum mex among those chosen by Alyona subarrays is as large as possible.\n\nThe mex of a set S is a minimum possible non-negative integer that is not in S.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 10^5).\n\nThe next m lines contain information about the subarrays chosen by Alyona. The i-th of these lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n), that describe the subarray a[l_{i}], a[l_{i} + 1], ..., a[r_{i}].\n\n\n-----Output-----\n\nIn the first line print single integer\u00a0\u2014 the maximum possible minimum mex.\n\nIn the second line print n integers\u00a0\u2014 the array a. All the elements in a should be between 0 and 10^9.\n\nIt is guaranteed that there is an optimal answer in which all the elements in a are between 0 and 10^9.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5 3\n1 3\n2 5\n4 5\n\nOutput\n2\n1 0 2 1 0\n\nInput\n4 2\n1 4\n2 4\n\nOutput\n3\n5 2 0 1\n\n\n-----Note-----\n\nThe first example: the mex of the subarray (1, 3) is equal to 3, the mex of the subarray (2, 5) is equal to 3, the mex of the subarray (4, 5) is equal to 2 as well, thus the minumal mex among the subarrays chosen by Alyona is equal to 2.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a sequence of integers $a_1, a_2, \\dots, a_n$. You need to paint elements in colors, so that:   If we consider any color, all elements of this color must be divisible by the minimal element of this color.  The number of used colors must be minimized.  For example, it's fine to paint elements $[40, 10, 60]$ in a single color, because they are all divisible by $10$. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive. For example, if $a=[6, 2, 3, 4, 12]$ then two colors are required: let's paint $6$, $3$ and $12$ in the first color ($6$, $3$ and $12$ are divisible by $3$) and paint $2$ and $4$ in the second color ($2$ and $4$ are divisible by $2$). For example, if $a=[10, 7, 15]$ then $3$ colors are required (we can simply paint each element in an unique color). \n-----Input----- The first line contains an integer $n$ ($1 \\le n \\le 100$), where $n$ is the length of the given sequence. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$). These numbers can contain duplicates. -----Output----- Print the minimal number of colors to paint all the given numbers in a valid way. -----Examples----- Input 6 10 2 3 5 4 2 Output 3 Input 4 100 100 100 100 Output 1 Input 8 7 6 5 4 3 2 2 3 Output 4 -----Note----- In the first example, one possible way to paint the elements in $3$ colors is:   paint in the first color the elements: $a_1=10$ and $a_4=5$,  paint in the second color the element $a_3=3$,  paint in the third color the elements: $a_2=2$, $a_5=4$ and $a_6=2$.  In the second example, you can use one color to paint all the elements. In the third example, one possible way to paint the elements in $4$ colors is:   paint in the first color the elements: $a_4=4$, $a_6=2$ and $a_7=2$,  paint in the second color the elements: $a_2=6$, $a_5=3$ and $a_8=3$,  paint in the third color the element $a_3=5$,  paint in the fourth color the element $a_1=7$.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a sequence of integers $a_1, a_2, \\dots, a_n$. You need to paint elements in colors, so that:   If we consider any color, all elements of this color must be divisible by the minimal element of this color.  The number of used colors must be minimized. \n\nFor example, it's fine to paint elements $[40, 10, 60]$ in a single color, because they are all divisible by $10$. You can use any color an arbitrary amount of times (in particular, it is allowed to use a color only once). The elements painted in one color do not need to be consecutive.\n\nFor example, if $a=[6, 2, 3, 4, 12]$ then two colors are required: let's paint $6$, $3$ and $12$ in the first color ($6$, $3$ and $12$ are divisible by $3$) and paint $2$ and $4$ in the second color ($2$ and $4$ are divisible by $2$). For example, if $a=[10, 7, 15]$ then $3$ colors are required (we can simply paint each element in an unique color).\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 100$), where $n$ is the length of the given sequence.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$). These numbers can contain duplicates.\n\n\n-----Output-----\n\nPrint the minimal number of colors to paint all the given numbers in a valid way.\n\n\n-----Examples-----\nInput\n6\n10 2 3 5 4 2\n\nOutput\n3\n\nInput\n4\n100 100 100 100\n\nOutput\n1\n\nInput\n8\n7 6 5 4 3 2 2 3\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example, one possible way to paint the elements in $3$ colors is:\n\n  paint in the first color the elements: $a_1=10$ and $a_4=5$,  paint in the second color the element $a_3=3$,  paint in the third color the elements: $a_2=2$, $a_5=4$ and $a_6=2$. \n\nIn the second example, you can use one color to paint all the elements.\n\nIn the third example, one possible way to paint the elements in $4$ colors is:\n\n  paint in the first color the elements: $a_4=4$, $a_6=2$ and $a_7=2$,  paint in the second color the elements: $a_2=6$, $a_5=3$ and $a_8=3$,  paint in the third color the element $a_3=5$,  paint in the fourth color the element $a_1=7$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given the latitude and longitude of two airports, calculate the minimum amount of shame Skylar will accumulate on a one-way trip across the globe.\n-----Input----- Input starts with one line with two integers $1 \\leq N \\leq 10000$, the number of airports and $1 \\leq M \\leq 100000$, the number of two-way flight routes. The second line has two strings $S$ and $T$, Skylar\u2019s start position and Skylar\u2019s target position. Then follows $N$ lines, each starts with a three letter (uppercase) airport code, followed by two real values numbers, the latitude and longitude in degrees. Then follows $M$ lines, each with two strings $a$ and $b$, the airports with a two-way flight connection. All flight airports have unique names and all connections are between existing airports. -----Output----- Output a real value with the minimum amount of flygskam Skylar will obtain on a one-way trip. If the target is unreachable and Skylar will be forever alone, output -1. Answers within a relative or absolute error of $10^{-6}$ will be accepted. -----Examples----- Sample Input 1: 4 4 ARN SCR ARN 59.6467921 17.9370443 SCR 61.156603 12.837360 CPH 55.618023 12.650763 OSL 60.197646 11.100008 ARN OSL ARN CPH SCR OSL OSL CPH Sample Output 1: 729.09706162045 Sample Input 2: 2 1 LAX AKL AKL -37.006131 174.783781 LAX 33.941589 -118.408531 LAX AKL Sample Output 2: 10603.3297338597\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nAt one of the many climate protests, Skylar fell in love with a fellow environmental activist. Unfortunately, the two young lovers live on opposite sides of the planet and long distance travel is only practical by (gasp) air. Skylar had scolded friends and family for flying, heavily handing out the recent Swedish export flygskam (verbatim translation: flight shame). But alas, the things we do for love! Now they want your help to calculate the minimum amount of flygskam Skylar will accumulate on a one-way trip across the globe. \n\nTo calculate the best route you models the planet as a perfect sphere and assumes that all flights fly at the distance $6381$ km from the center of the earth. The amount of shame for a single point-to-point flight is calculated as the distance between the airports in km, plus a take-off and landing penalty of $100$, that is, two airports with the flight distance $1000$ km will result in $1100$ shame.\n\n-----Latitude and longitude-----\nThe positions of the airports are given as the latitude and longitude in (decimal) degrees. The latitude of a point $P$ on the earths surface is the angle between the equatorial plane and a line passing through $P$ and the center of the earth. The equator has latitude $0^\\circ $, points north of the equator has positive values and points south of the equator has negative values, the North Pole has latitude $90^\\circ $ and the South Pole latitude $-90 ^\\circ $. Half circles that run from the North to the South pole are called meridians. The zero meridian runs through Greenwich. The longitude of a point $Q$ is the angle between the zero meridian plane and the line that run through $Q$ and the center of the earth, with values from $- 180^\\circ $ to $+180^\\circ $, with positive values east of Greenwich.\n\n-----Input-----\nInput starts with one line with two integers $1 \\leq N \\leq 10000$, the number of airports and $1 \\leq M \\leq 100000$, the number of two-way flight routes. The second line has two strings $S$ and $T$, Skylar\u2019s start position and Skylar\u2019s target position. Then follows $N$ lines, each starts with a three letter (uppercase) airport code, followed by two real values numbers, the latitude and longitude in degrees. Then follows $M$ lines, each with two strings $a$ and $b$, the airports with a two-way flight connection.\n\nAll flight airports have unique names and all connections are between existing airports.\n\n-----Output-----\nOutput a real value with the minimum amount of flygskam Skylar will obtain on a one-way trip. If the target is unreachable and Skylar will be forever alone, output -1. Answers within a relative or absolute error of $10^{-6}$ will be accepted.\n\n-----Examples-----\nSample Input 1:\n4 4\nARN SCR\nARN 59.6467921 17.9370443\nSCR 61.156603 12.837360\nCPH 55.618023 12.650763\nOSL 60.197646 11.100008\nARN OSL\nARN CPH\nSCR OSL\nOSL CPH\nSample Output 1:\n729.09706162045\n\nSample Input 2:\n2 1\nLAX AKL\nAKL -37.006131 174.783781\nLAX 33.941589 -118.408531\nLAX AKL\nSample Output 2:\n10603.3297338597\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a book consisting of $n$ pages, numbered from $1$ to $n$, the screen is currently displaying the contents of page $x$, and Vasya wants to read the page $y$. There are two buttons on the book which allow Vasya to scroll $d$ pages forwards or backwards (but he cannot scroll outside the book). For example, if the book consists of $10$ pages, and $d = 3$, then from the first page Vasya can scroll to the first or to the fourth page by pressing one of the buttons; from the second page to the first or to the fifth; from the sixth page to the third or to the ninth; from the eighth to the fifth or to the tenth. Help Vasya to calculate the minimum number of times he needs to press a button to move to page $y$.\n-----Input----- The first line contains one integer $t$ ($1 \\le t \\le 10^3$) \u2014 the number of testcases. Each testcase is denoted by a line containing four integers $n$, $x$, $y$, $d$ ($1\\le n, d \\le 10^9$, $1 \\le x, y \\le n$) \u2014 the number of pages, the starting page, the desired page, and the number of pages scrolled by pressing one button, respectively. -----Output----- Print one line for each test. If Vasya can move from page $x$ to page $y$, print the minimum number of times he needs to press a button to do it. Otherwise print $-1$. -----Example----- Input 3 10 4 5 2 5 1 3 4 20 4 19 3 Output 4 -1 5 -----Note----- In the first test case the optimal sequence is: $4 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3 \\rightarrow 5$. In the second test case it is possible to get to pages $1$ and $5$. In the third test case the optimal sequence is: $4 \\rightarrow 7 \\rightarrow 10 \\rightarrow 13 \\rightarrow 16 \\rightarrow 19$.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nVasya is reading a e-book. The file of the book consists of $n$ pages, numbered from $1$ to $n$. The screen is currently displaying the contents of page $x$, and Vasya wants to read the page $y$. There are two buttons on the book which allow Vasya to scroll $d$ pages forwards or backwards (but he cannot scroll outside the book). For example, if the book consists of $10$ pages, and $d = 3$, then from the first page Vasya can scroll to the first or to the fourth page by pressing one of the buttons; from the second page \u2014 to the first or to the fifth; from the sixth page \u2014 to the third or to the ninth; from the eighth \u2014 to the fifth or to the tenth.\n\nHelp Vasya to calculate the minimum number of times he needs to press a button to move to page $y$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 10^3$) \u2014 the number of testcases.\n\nEach testcase is denoted by a line containing four integers $n$, $x$, $y$, $d$ ($1\\le n, d \\le 10^9$, $1 \\le x, y \\le n$) \u2014 the number of pages, the starting page, the desired page, and the number of pages scrolled by pressing one button, respectively.\n\n\n-----Output-----\n\nPrint one line for each test.\n\nIf Vasya can move from page $x$ to page $y$, print the minimum number of times he needs to press a button to do it. Otherwise print $-1$.\n\n\n-----Example-----\nInput\n3\n10 4 5 2\n5 1 3 4\n20 4 19 3\n\nOutput\n4\n-1\n5\n\n\n\n-----Note-----\n\nIn the first test case the optimal sequence is: $4 \\rightarrow 2 \\rightarrow 1 \\rightarrow 3 \\rightarrow 5$.\n\nIn the second test case it is possible to get to pages $1$ and $5$.\n\nIn the third test case the optimal sequence is: $4 \\rightarrow 7 \\rightarrow 10 \\rightarrow 13 \\rightarrow 16 \\rightarrow 19$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Little robber wants to know the number of moments of time (particular values of hours and minutes), such that all digits displayed on the watches are distinct. Help her calculate this number. \n-----Input----- The first line of the input contains two integers, given in the decimal notation, n and m (1 \u2264 n, m \u2264 10^9)\u00a0\u2014 the number of hours in one day and the number of minutes in one hour, respectively. -----Output----- Print one integer in decimal notation\u00a0\u2014 the number of different pairs of hour and minute, such that all digits displayed on the watches are distinct. -----Examples----- Input 2 3 Output 4 Input 8 2 Output 5 -----Note----- In the first sample, possible pairs are: (0: 1), (0: 2), (1: 0), (1: 2). In the second sample, possible pairs are: (02: 1), (03: 1), (04: 1), (05: 1), (06: 1).\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nRobbers, who attacked the Gerda's cab, are very successful in covering from the kingdom police. To make the goal of catching them even harder, they use their own watches.\n\nFirst, as they know that kingdom police is bad at math, robbers use the positional numeral system with base 7. Second, they divide one day in n hours, and each hour in m minutes. Personal watches of each robber are divided in two parts: first of them has the smallest possible number of places that is necessary to display any integer from 0 to n - 1, while the second has the smallest possible number of places that is necessary to display any integer from 0 to m - 1. Finally, if some value of hours or minutes can be displayed using less number of places in base 7 than this watches have, the required number of zeroes is added at the beginning of notation.\n\nNote that to display number 0 section of the watches is required to have at least one place.\n\nLittle robber wants to know the number of moments of time (particular values of hours and minutes), such that all digits displayed on the watches are distinct. Help her calculate this number.\n\n\n-----Input-----\n\nThe first line of the input contains two integers, given in the decimal notation, n and m (1 \u2264 n, m \u2264 10^9)\u00a0\u2014 the number of hours in one day and the number of minutes in one hour, respectively.\n\n\n-----Output-----\n\nPrint one integer in decimal notation\u00a0\u2014 the number of different pairs of hour and minute, such that all digits displayed on the watches are distinct.\n\n\n-----Examples-----\nInput\n2 3\n\nOutput\n4\n\nInput\n8 2\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample, possible pairs are: (0: 1), (0: 2), (1: 0), (1: 2).\n\nIn the second sample, possible pairs are: (02: 1), (03: 1), (04: 1), (05: 1), (06: 1).\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a chessboard of size $n \\times m$. You need to find maximum number of chessmen that can be placed on the chessboard such that Manhattan distance between each pair of chessmen is exactly 3. \n\n-----Input----- A single line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 10^9$) \u2014 the number of rows and the number of columns of the chessboard. -----Output----- Print one integer \u2014 the maximum number of chessmen Little C can place. -----Examples----- Input 2 2 Output 0 Input 3 3 Output 8 -----Note----- In the first example, the Manhattan distance between any two cells is smaller than $3$, so the answer is $0$. In the second example, a possible solution is $(1,1)(3,2)$, $(1,2)(3,3)$, $(2,1)(1,3)$, $(3,1)(2,3)$.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLittle C loves number \u00ab3\u00bb very much. He loves all things about it.\n\nNow he is playing a game on a chessboard of size $n \\times m$. The cell in the $x$-th row and in the $y$-th column is called $(x,y)$. Initially, The chessboard is empty. Each time, he places two chessmen on two different empty cells, the Manhattan distance between which is exactly $3$. The Manhattan distance between two cells $(x_i,y_i)$ and $(x_j,y_j)$ is defined as $|x_i-x_j|+|y_i-y_j|$.\n\nHe want to place as many chessmen as possible on the chessboard. Please help him find the maximum number of chessmen he can place.\n\n\n-----Input-----\n\nA single line contains two integers $n$ and $m$ ($1 \\leq n,m \\leq 10^9$) \u2014 the number of rows and the number of columns of the chessboard.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum number of chessmen Little C can place.\n\n\n-----Examples-----\nInput\n2 2\n\nOutput\n0\nInput\n3 3\n\nOutput\n8\n\n\n-----Note-----\n\nIn the first example, the Manhattan distance between any two cells is smaller than $3$, so the answer is $0$.\n\nIn the second example, a possible solution is $(1,1)(3,2)$, $(1,2)(3,3)$, $(2,1)(1,3)$, $(3,1)(2,3)$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given a sequence of words consisting of small letters only. He wants to change some letters to large (let's call this process a capitalization) in such a way that the sequence of words is in lexicographical order. However, he soon realized that for some reason he can't change a single letter in a single word. He only can choose a letter and change all of its occurrences in all words to large letters. He can perform this operation any number of times with arbitrary letters of Bookland's alphabet. Help Denis to choose which letters he needs to capitalize (make large) in order to make the sequence of words lexicographically ordered, or determine that it is impossible. Note that some words can be equal.\n-----Input----- The first line contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m. Each of the next n lines contains a description of one word in format l_{i}, s_{i}, 1, s_{i}, 2, ..., s_{i}, l_{i} (1 \u2264 l_{i} \u2264 100 000, 1 \u2264 s_{i}, j \u2264 m), where l_{i} is the length of the word, and s_{i}, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence. It is guaranteed that the total length of all words is not greater than 100 000. -----Output----- In the first line print \"Yes\" (without quotes), if it is possible to capitalize some set of letters in such a way that the sequence of words becomes lexicographically ordered. Otherwise, print \"No\" (without quotes). If the required is possible, in the second line print k\u00a0\u2014 the number of letters Denis has to capitalize (make large), and in the third line print k distinct integers\u00a0\u2014 these letters. Note that you don't need to minimize the value k. You can print the letters in any order. If there are multiple answers, print any of them. -----Examples----- Input 4 3 1 2 1 1 3 1 3 2 2 1 1 Output Yes 2 2 3  Input 6 5 2 1 2 2 1 2 3 1 2 3 2 1 5 2 4 4 2 4 4 Output Yes 0 Input 4 3 4 3 2 2 1 3 1 1 3 3 2 3 3 2 3 1 Output No -----Note----- In the first example after Denis makes letters 2 and 3 large, the sequence looks like the following:  2'  1  1 3' 2'  1 1  The condition 2' < 1 holds, so the first word is not lexicographically larger than the second word. The second word is the prefix of the third word, so the are in lexicographical order. As the first letters of the third and the fourth words are the same, and 3' < 1, then the third word is not lexicographically larger than the fourth word. In the second example the words are in lexicographical order from the beginning, so Denis can do nothing. In the third example there is no set of letters such that if Denis capitalizes them, the sequence becomes lexicographically ordered.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou all know that the Library of Bookland is the largest library in the world. There are dozens of thousands of books in the library.\n\nSome long and uninteresting story was removed...\n\nThe alphabet of Bookland is so large that its letters are denoted by positive integers. Each letter can be small or large, the large version of a letter x is denoted by x'. BSCII encoding, which is used everywhere in Bookland, is made in that way so that large letters are presented in the order of the numbers they are denoted by, and small letters are presented in the order of the numbers they are denoted by, but all large letters are before all small letters. For example, the following conditions hold: 2 < 3, 2' < 3', 3' < 2.\n\nA word x_1, x_2, ..., x_{a} is not lexicographically greater than y_1, y_2, ..., y_{b} if one of the two following conditions holds:   a \u2264 b and x_1 = y_1, ..., x_{a} = y_{a}, i.e. the first word is the prefix of the second word;  there is a position 1 \u2264 j \u2264 min(a, b), such that x_1 = y_1, ..., x_{j} - 1 = y_{j} - 1 and x_{j} < y_{j}, i.e. at the first position where the words differ the first word has a smaller letter than the second word has.  \n\nFor example, the word \"3' 7 5\" is before the word \"2 4' 6\" in lexicographical order. It is said that sequence of words is in lexicographical order if each word is not lexicographically greater than the next word in the sequence.\n\nDenis has a sequence of words consisting of small letters only. He wants to change some letters to large (let's call this process a capitalization) in such a way that the sequence of words is in lexicographical order. However, he soon realized that for some reason he can't change a single letter in a single word. He only can choose a letter and change all of its occurrences in all words to large letters. He can perform this operation any number of times with arbitrary letters of Bookland's alphabet.\n\nHelp Denis to choose which letters he needs to capitalize (make large) in order to make the sequence of words lexicographically ordered, or determine that it is impossible.\n\nNote that some words can be equal.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000)\u00a0\u2014 the number of words and the number of letters in Bookland's alphabet, respectively. The letters of Bookland's alphabet are denoted by integers from 1 to m.\n\nEach of the next n lines contains a description of one word in format l_{i}, s_{i}, 1, s_{i}, 2, ..., s_{i}, l_{i} (1 \u2264 l_{i} \u2264 100 000, 1 \u2264 s_{i}, j \u2264 m), where l_{i} is the length of the word, and s_{i}, j is the sequence of letters in the word. The words are given in the order Denis has them in the sequence.\n\nIt is guaranteed that the total length of all words is not greater than 100 000.\n\n\n-----Output-----\n\nIn the first line print \"Yes\" (without quotes), if it is possible to capitalize some set of letters in such a way that the sequence of words becomes lexicographically ordered. Otherwise, print \"No\" (without quotes).\n\nIf the required is possible, in the second line print k\u00a0\u2014 the number of letters Denis has to capitalize (make large), and in the third line print k distinct integers\u00a0\u2014 these letters. Note that you don't need to minimize the value k.\n\nYou can print the letters in any order. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n4 3\n1 2\n1 1\n3 1 3 2\n2 1 1\n\nOutput\nYes\n2\n2 3 \nInput\n6 5\n2 1 2\n2 1 2\n3 1 2 3\n2 1 5\n2 4 4\n2 4 4\n\nOutput\nYes\n0\n\nInput\n4 3\n4 3 2 2 1\n3 1 1 3\n3 2 3 3\n2 3 1\n\nOutput\nNo\n\n\n\n-----Note-----\n\nIn the first example after Denis makes letters 2 and 3 large, the sequence looks like the following:  2'  1  1 3' 2'  1 1 \n\nThe condition 2' < 1 holds, so the first word is not lexicographically larger than the second word. The second word is the prefix of the third word, so the are in lexicographical order. As the first letters of the third and the fourth words are the same, and 3' < 1, then the third word is not lexicographically larger than the fourth word.\n\nIn the second example the words are in lexicographical order from the beginning, so Denis can do nothing.\n\nIn the third example there is no set of letters such that if Denis capitalizes them, the sequence becomes lexicographically ordered.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given two piles of cards. You can only shuffle the piles. Is it possible to win the game after the next turn? \n-----Input----- The first line of input contains the number of cards in your hand ($0 \\leq n \\leq 52$). Each of the next $n$ lines contains a card specified by a number from $1$ to $13$ and one of the letters \u2019C\u2019, \u2019D\u2019, \u2019H\u2019, \u2019S\u2019, separated by a space. The letter of a card specifies its suit (either clubs, diamonds, hearts or spades, respectively). The number of a card specifies the rank of the card. For simplicity, aces are represented as a $1$, and jacks, queens and kings are represented as the numbers $11$, $12$ and $13$. For the purpose of this problem, we consider a rank $a$ to be lower than a rank $b$ if the number of rank $a$ is lower than the number of rank $b$ (meaning aces are of the lowest rank). -----Output----- Output \u201cpossible\u201d if it is possible to reshuffle the decks, and \u201cimpossible\u201d if it is not. -----Examples----- Sample Input: 28 1 C 2 C 3 C 4 C 5 C 6 C 7 C 1 D 2 D 3 D 4 D 5 D 6 D 7 D 1 H 2 H 3 H 4 H 5 H 6 H 7 H 1 S 2 S 3 S 4 S 5 S 6 S 7 S Sample Output: possible\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nIn the card game Wolf (a variant of the famous card games War and Sv\u00e4lta r\u00e4v), two players both have a pile of cards, which together form a normal deck of playing cards. Such a deck contains $52$ cards, with each card being a unique combination of one of $4$ suits and $13$ ranks.\n\nDuring a turn, each player picks the topmost card from their piles, and shows it. This process is repeated until the two cards have the same suit. Then, the player whose card had the highest rank receives all the cards that have been shown by the players during the turn (including the two that had the same suit), and these cards are shuffled into that player\u2019s pile. The turn then ends. The turn also ends if any player, when they are supposed to pick a card from their pile, has an empty pile. A player wins if, after the end of a turn, she has cards remaining in her pile but the opposing player has no cards remaining in their pile. This means that the game is tied if neither player has cards in their pile after the end of a turn.\n\nYour opponent is currently taking a bathroom break, so you have the opportunity to reshuffle your piles. You cannot exchange any cards, since your opponent knows the set of cards in their pile. Is it possible to reshuffle each of the two piles, so that you have won the game after the next turn?\n\n-----Input-----\nThe first line of input contains the number of cards in your hand ($0 \\leq n \\leq 52$). Each of the next $n$ lines contains a card specified by a number from $1$ to $13$ and one of the letters \u2019C\u2019, \u2019D\u2019, \u2019H\u2019, \u2019S\u2019, separated by a space.\n\nThe letter of a card specifies its suit (either clubs, diamonds, hearts or spades, respectively). The number of a card specifies the rank of the card. For simplicity, aces are represented as a $1$, and jacks, queens and kings are represented as the numbers $11$, $12$ and $13$. For the purpose of this problem, we consider a rank $a$ to be lower than a rank $b$ if the number of rank $a$ is lower than the number of rank $b$ (meaning aces are of the lowest rank).\n\n-----Output-----\nOutput \u201cpossible\u201d if it is possible to reshuffle the decks, and \u201cimpossible\u201d if it is not.\n\n-----Examples-----\nSample Input:\n28\n1 C\n2 C\n3 C\n4 C\n5 C\n6 C\n7 C\n1 D\n2 D\n3 D\n4 D\n5 D\n6 D\n7 D\n1 H\n2 H\n3 H\n4 H\n5 H\n6 H\n7 H\n1 S\n2 S\n3 S\n4 S\n5 S\n6 S\n7 S\nSample Output:\npossible\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a resistor with unit resistance R_0 = 1. Elements with other resistance can be constructed from these resistors. In this problem, we will consider the following as elements:   one resistor;  an element and one resistor plugged in sequence;  an element and one resistor plugged in parallel.  [Image]  With the consecutive connection the resistance of the new element equals R = R_{e} + R_0. With the parallel connection the resistance of the new element equals $R = \\frac{1}{\\frac{1}{R_{e}} + \\frac{1}{R_{0}}}$. In this case R_{e} equals the resistance of the element being connected. You need to assemble an element with a resistance equal to the fraction $\\frac{a}{b}$. Determine the smallest possible number of resistors you need to make such an element. \n-----Input----- The single input line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^18). It is guaranteed that the fraction $\\frac{a}{b}$ is irreducible. It is guaranteed that a solution always exists. -----Output----- Print a single number \u2014 the answer to the problem. Please do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is recommended to use the cin, cout streams or the %I64d specifier. -----Examples----- Input 1 1 Output 1 Input 3 2 Output 3 Input 199 200 Output 200 -----Note----- In the first sample, one resistor is enough. In the second sample one can connect the resistors in parallel, take the resulting element and connect it to a third resistor consecutively. Then, we get an element with resistance $\\frac{1}{\\frac{1}{1} + \\frac{1}{1}} + 1 = \\frac{3}{2}$. We cannot make this element using two resistors.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nMad scientist Mike is building a time machine in his spare time. To finish the work, he needs a resistor with a certain resistance value.\n\nHowever, all Mike has is lots of identical resistors with unit resistance R_0 = 1. Elements with other resistance can be constructed from these resistors. In this problem, we will consider the following as elements:   one resistor;  an element and one resistor plugged in sequence;  an element and one resistor plugged in parallel.  [Image] \n\nWith the consecutive connection the resistance of the new element equals R = R_{e} + R_0. With the parallel connection the resistance of the new element equals $R = \\frac{1}{\\frac{1}{R_{e}} + \\frac{1}{R_{0}}}$. In this case R_{e} equals the resistance of the element being connected.\n\nMike needs to assemble an element with a resistance equal to the fraction $\\frac{a}{b}$. Determine the smallest possible number of resistors he needs to make such an element.\n\n\n-----Input-----\n\nThe single input line contains two space-separated integers a and b (1 \u2264 a, b \u2264 10^18). It is guaranteed that the fraction $\\frac{a}{b}$ is irreducible. It is guaranteed that a solution always exists.\n\n\n-----Output-----\n\nPrint a single number \u2014 the answer to the problem.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is recommended to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n3\n\nInput\n199 200\n\nOutput\n200\n\n\n\n-----Note-----\n\nIn the first sample, one resistor is enough.\n\nIn the second sample one can connect the resistors in parallel, take the resulting element and connect it to a third resistor consecutively. Then, we get an element with resistance $\\frac{1}{\\frac{1}{1} + \\frac{1}{1}} + 1 = \\frac{3}{2}$. We cannot make this element using two resistors.\n\"\"\"\ndef code():"
}