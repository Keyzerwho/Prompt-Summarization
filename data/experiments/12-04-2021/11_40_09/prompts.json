{
    "0": "Python 3\n\"\"\"\n Roma (a popular Russian name that means 'Roman') loves the Little Lvov Elephant's lucky numbers. Let us remind you that lucky numbers are positive integers whose decimal representation only contains lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Roma's got n positive integers. He wonders, how many of those integers have not more than k lucky digits. Help him, write the program that solves the problem. \n\n-----Input----- The first line contains two integers n, k (1 \u2264 n, k \u2264 100). The second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers that Roma has.  The numbers in the lines are separated by single spaces. -----Output----- In a single line print a single integer \u2014 the answer to the problem. -----Examples----- Input 3 4 1 2 4 Output 3 Input 3 2 447 44 77 Output 2 -----Note----- In the first sample all numbers contain at most four lucky digits, so the answer is 3. In the second sample number 447 doesn't fit in, as it contains more than two lucky digits. All other numbers are fine, so the answer is 2.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nRoma (a popular Russian name that means 'Roman') loves the Little Lvov Elephant's lucky numbers.\n\nLet us remind you that lucky numbers are positive integers whose decimal representation only contains lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nRoma's got n positive integers. He wonders, how many of those integers have not more than k lucky digits? Help him, write the program that solves the problem.\n\n\n-----Input-----\n\nThe first line contains two integers n, k (1 \u2264 n, k \u2264 100). The second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers that Roma has. \n\nThe numbers in the lines are separated by single spaces.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n3 4\n1 2 4\n\nOutput\n3\n\nInput\n3 2\n447 44 77\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first sample all numbers contain at most four lucky digits, so the answer is 3.\n\nIn the second sample number 447 doesn't fit in, as it contains more than two lucky digits. All other numbers are fine, so the answer is 2.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Vasya is studying in the last class of school and soon he will take exams. He decided to study polynomials. Polynomial is a function P(x) = a_0 + a_1x^1 + ... + a_{n}x^{n}. Numbers a_{i} are called coefficients of a polynomial, non-negative integer n is called a degree of a polynomial. Vasya has made a bet with his friends that he can solve any problem with polynomials. They suggested him the problem: \"Determine how many polynomials P(x) exist with integer non-negative coefficients so that $P(t) = a$, and $P(P(t)) = b$, where $t, a$ and b are given positive integers\"   Vasya does not like losing bets, but he has no idea how to solve this task, so please help him to solve the problem. \n-----Input----- The input contains three integer positive numbers $t, a, b$ no greater than 10^18. -----Output----- If there is an infinite number of such polynomials, then print \"inf\" without quotes, otherwise print the reminder of an answer modulo 10^9 + 7. -----Examples----- Input 2 2 2 Output 2 Input 2 3 3 Output 1\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nVasya is studying in the last class of school and soon he will take exams. He decided to study polynomials. Polynomial is a function P(x) = a_0 + a_1x^1 + ... + a_{n}x^{n}. Numbers a_{i} are called coefficients of a polynomial, non-negative integer n is called a degree of a polynomial.\n\nVasya has made a bet with his friends that he can solve any problem with polynomials. They suggested him the problem: \"Determine how many polynomials P(x) exist with integer non-negative coefficients so that $P(t) = a$, and $P(P(t)) = b$, where $t, a$ and b are given positive integers\"? \n\nVasya does not like losing bets, but he has no idea how to solve this task, so please help him to solve the problem.\n\n\n-----Input-----\n\nThe input contains three integer positive numbers $t, a, b$ no greater than 10^18.\n\n\n-----Output-----\n\nIf there is an infinite number of such polynomials, then print \"inf\" without quotes, otherwise print the reminder of an answer modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n2\n\nInput\n2 3 3\n\nOutput\n1\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You have a list of ingredients. Each ingredient is in turn available from a few different brands. Each brand is of course unique in its own special way, so using a particular brand of an ingredient will always result in a completely different dinner experience than using another brand of the same ingredient. Some common ingredients such as p l rber may appear in two of the three chosen dishes, or in all three of them. When an ingredient is used in more than one of the three selected dishes, you will use the same brand of the ingredient in all of them. While waiting for the meecaroo, you start wondering: how many different dinner experiences are there that you could make, by different choices of dishes and brands for the ingredients \n-----Input----- The input consists of:  - one line containing five integers $r$, $s$, $m$, $d$, $n$, where $1 \\le r \\le 1000$ is the number of different ingredients that exist, $1 \\le s, m, d \\le 25$ are the number of available starter dishes, main dishes, and desserts, respectively, and $0 \\le n \\le 2000$ is the number of pairs of dishes that do not go well together.  - one line containing $r$ integers $b_1, \\ldots , b_ r$, where $1 \\le b_ i \\le 100$ is the number of different brands of ingredient $i$.  - $s+m+d$ lines describing the $s$ starter dishes, then the $m$ main dishes, then the $d$ desserts. Each such line starts with an integer $1 \\le k \\le 20$ denoting the number of ingredients of the dish, and is followed by $k$ distinct integers $i_1, \\ldots , i_ k$, where for each $1 \\le j \\le k$, $1 \\le i_ j \\le r$ is an ingredient.  - $n$ lines each containing two incompatible dishes. Each dish is identified by an integer $1 \\le j \\le s+m+d$, referring to the $j$\u2019th dish given in the input (so $1 \\le j \\le s$ refers to the starter dishes, $s < j \\le s+m$ refers to the main dishes, and $s+m < j \\le s+m+d$ refers to the desserts). Each pair of incompatible dishes in the input consists of two dishes of different types, and any one pair of dishes is listed at most once. -----Output----- If the number of different dinner experiences Swedish Chef can make is at most $10^{18}$, then output that number. Otherwise, output \u201ctoo many\u201d. -----Examples----- Sample Input 1: 6 1 1 1 0 2 3 1 5 3 2 2 1 2 3 3 4 5 1 6 Sample Output 1: 180 Sample Input 2: 3 2 2 1 1 2 3 2 1 1 1 2 1 2 1 3 1 1 2 3 Sample Output 2: 22 Sample Input 3: 3 1 1 1 1 5 5 5 3 1 2 3 3 1 2 3 3 1 2 3 2 1 Sample Output 3: 0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nThe world-renowned Swedish Chef is planning a gourmet three-course dinner for some muppets: a starter course, a main course, and a dessert. His famous Swedish cook-book offers a wide variety of choices for each of these three courses, though some of them do not go well together (for instance, you of course cannot serve chocolate moose and sooted shreemp at the same dinner). \n\nEach potential dish has a list of ingredients. Each ingredient is in turn available from a few different brands. Each brand is of course unique in its own special way, so using a particular brand of an ingredient will always result in a completely different dinner experience than using another brand of the same ingredient.\n\nSome common ingredients such as p\u00f8l\u00e5rber may appear in two of the three chosen dishes, or in all three of them. When an ingredient is used in more than one of the three selected dishes, Swedish Chef will use the same brand of the ingredient in all of them.\n\nWhile waiting for the meecaroo, Swedish Chef starts wondering: how many different dinner experiences are there that he could make, by different choices of dishes and brands for the ingredients?\n\n-----Input-----\nThe input consists of:\n - one line containing five integers $r$, $s$, $m$, $d$, $n$, where $1 \\le r \\le 1000$ is the number of different ingredients that exist, $1 \\le s, m, d \\le 25$ are the number of available starter dishes, main dishes, and desserts, respectively, and $0 \\le n \\le 2000$ is the number of pairs of dishes that do not go well together.\n - one line containing $r$ integers $b_1, \\ldots , b_ r$, where $1 \\le b_ i \\le 100$ is the number of different brands of ingredient $i$.\n - $s+m+d$ lines describing the $s$ starter dishes, then the $m$ main dishes, then the $d$ desserts. Each such line starts with an integer $1 \\le k \\le 20$ denoting the number of ingredients of the dish, and is followed by $k$ distinct integers $i_1, \\ldots , i_ k$, where for each $1 \\le j \\le k$, $1 \\le i_ j \\le r$ is an ingredient.\n - $n$ lines each containing two incompatible dishes. Each dish is identified by an integer $1 \\le j \\le s+m+d$, referring to the $j$\u2019th dish given in the input (so $1 \\le j \\le s$ refers to the starter dishes, $s < j \\le s+m$ refers to the main dishes, and $s+m < j \\le s+m+d$ refers to the desserts).\n\nEach pair of incompatible dishes in the input consists of two dishes of different types, and any one pair of dishes is listed at most once.\n\n-----Output-----\nIf the number of different dinner experiences Swedish Chef can make is at most $10^{18}$, then output that number. Otherwise, output \u201ctoo many\u201d.\n\n-----Examples-----\nSample Input 1:\n6 1 1 1 0\n2 3 1 5 3 2\n2 1 2\n3 3 4 5\n1 6\nSample Output 1:\n180\n\nSample Input 2:\n3 2 2 1 1\n2 3 2\n1 1\n1 2\n1 2\n1 3\n1 1\n2 3\nSample Output 2:\n22\n\nSample Input 3:\n3 1 1 1 1\n5 5 5\n3 1 2 3\n3 1 2 3\n3 1 2 3\n2 1\nSample Output 3:\n0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given two arrays A and B, each of size n. The error, E, between these two arrays is defined $E = \\sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$. You have to perform exactly k_1 operations on array A and exactly k_2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1. Output the minimum possible value of error after k_1 operations on array A and k_2 operations on array B have been performed. \n-----Input----- The first line contains three space-separated integers n (1 \u2264 n \u2264 10^3), k_1 and k_2 (0 \u2264 k_1 + k_2 \u2264 10^3, k_1 and k_2 are non-negative) \u2014 size of arrays and number of operations to perform on A and B respectively. Second line contains n space separated integers a_1, a_2, ..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6) \u2014 array A. Third line contains n space separated integers b_1, b_2, ..., b_{n} ( - 10^6 \u2264 b_{i} \u2264 10^6)\u2014 array B. -----Output----- Output a single integer \u2014 the minimum possible value of $\\sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$ after doing exactly k_1 operations on array A and exactly k_2 operations on array B. -----Examples----- Input 2 0 0 1 2 2 3 Output 2 Input 2 1 0 1 2 2 2 Output 0 Input 2 5 7 3 4 14 4 Output 1 -----Note----- In the first sample case, we cannot perform any operations on A or B. Therefore the minimum possible error E = (1 - 2)^2 + (2 - 3)^2 = 2.  In the second sample case, we are required to perform exactly one operation on A. In order to minimize error, we increment the first element of A by 1. Now, A = [2, 2]. The error is now E = (2 - 2)^2 + (2 - 2)^2 = 0. This is the minimum possible error obtainable. In the third sample case, we can increase the first element of A to 8, using the all of the 5 moves available to us. Also, the first element of B can be reduced to 8 using the 6 of the 7 available moves. Now A = [8, 4] and B = [8, 4]. The error is now E = (8 - 8)^2 + (4 - 4)^2 = 0, but we are still left with 1 move for array B. Increasing the second element of B to 5 using the left move, we get B = [8, 5] and E = (8 - 8)^2 + (4 - 5)^2 = 1.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given two arrays A and B, each of size n. The error, E, between these two arrays is defined $E = \\sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$. You have to perform exactly k_1 operations on array A and exactly k_2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1.\n\nOutput the minimum possible value of error after k_1 operations on array A and k_2 operations on array B have been performed.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n (1 \u2264 n \u2264 10^3), k_1 and k_2 (0 \u2264 k_1 + k_2 \u2264 10^3, k_1 and k_2 are non-negative) \u2014 size of arrays and number of operations to perform on A and B respectively.\n\nSecond line contains n space separated integers a_1, a_2, ..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6) \u2014 array A.\n\nThird line contains n space separated integers b_1, b_2, ..., b_{n} ( - 10^6 \u2264 b_{i} \u2264 10^6)\u2014 array B.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the minimum possible value of $\\sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$ after doing exactly k_1 operations on array A and exactly k_2 operations on array B.\n\n\n-----Examples-----\nInput\n2 0 0\n1 2\n2 3\n\nOutput\n2\nInput\n2 1 0\n1 2\n2 2\n\nOutput\n0\nInput\n2 5 7\n3 4\n14 4\n\nOutput\n1\n\n\n-----Note-----\n\nIn the first sample case, we cannot perform any operations on A or B. Therefore the minimum possible error E = (1 - 2)^2 + (2 - 3)^2 = 2. \n\nIn the second sample case, we are required to perform exactly one operation on A. In order to minimize error, we increment the first element of A by 1. Now, A = [2, 2]. The error is now E = (2 - 2)^2 + (2 - 2)^2 = 0. This is the minimum possible error obtainable.\n\nIn the third sample case, we can increase the first element of A to 8, using the all of the 5 moves available to us. Also, the first element of B can be reduced to 8 using the 6 of the 7 available moves. Now A = [8, 4] and B = [8, 4]. The error is now E = (8 - 8)^2 + (4 - 4)^2 = 0, but we are still left with 1 move for array B. Increasing the second element of B to 5 using the left move, we get B = [8, 5] and E = (8 - 8)^2 + (4 - 5)^2 = 1.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are the boss of ACM (Association for Control over Minds), an upstanding company with a single goal of world domination. Yesterday, you woke up, and saw that the weather was clear, and the birds were singing. Another day, another world domination plan, you sang to yourself as you devised your next world domination plan involving the illusory mind control potions. There s only one insignificant problem you have to solve before you can execute this perfection of a plan: you don t know the correct recipe for the mind control potion. You asked the local Panda-breed brewmaster for the recipe, but unfortunately he didn t know either. Instead, he gave you the mysterious tome titled The Root of all Evil (written by Halim the White). You read the evil book under candle light, and wrote down all the potion recipes contained inside the book. One of them must be the formula for the mind control potion, I m sure of it! , you said to yourself. You numbered these recipes from $1$ through $N$. I just need to try concocting all of these recipes! , you hummed to yourself. Today, you woke up, and saw that the weather was clear, and , anyway. You have purchased all the utensils and ingredients from the local grocery onion, carrot, broom, vials, cauldrons, bat wings, , all common grocery items. Now, you are ready to begin your experiments, but then you notice that some of the recipes share common ingredients! Unfortunately, you only bought one of each ingredient with you. Oh no! What should I do now ! , you panicked. I ll just create some of the potions today, and do the remaining\n-----Input----- The first line contains a non-negative integer $2 \\leq N \\leq 200000$, giving the total number of recipes you have. Thereafter follow $N$ lines, the $i$-th line describes recipe number $i$. Each of these lines is a single space separated list of integers. Each of these lines begins with an integer $1 \\leq M$, denoting the number of ingredients required to make this recipe. Then, $M$ integers follow, describing the required ingredients. The ingredients are identified by integers between $0$ and $500000$, inclusively, with different integers denoting different ingredients. For each recipe, all of its ingredients will be distinct. The sum of $M$ over all recipes will be no greater than $500000$. -----Output----- Print the number of recipes you will concoct.Sample Data Explanation In the first example, the first potion can be concocted, since both ingredients were not used so far. Thus, you will concoct this potion. The second potion will also be concocted for the same reason. The third potion cannot be concocted, since ingredient $1$ is no longer present, and is inside a cauldron mixed with another ingredient not present in the recipe. The fourth potion can be concocted by pouring the content of the cauldrons used for the first and second concoctions, and then adding ingredient $5$, which has remained unused so far. The last potion cannot be concocted, since the content of the cauldron for the first potion has all been poured when making the fourth potion and thus is now mixed with other ingredients not present in the recipe. For the second example, since the first potion can be concocted, it has to be concocted. Thus, the second and third potions can no longer be concocted. -----Examples----- Sample Input: 5 2 1 2 2 3 4 2 1 5 5 1 2 3 4 5 2 1 2 Sample Output: 3\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are the boss of ACM (Association for Control over Minds), an upstanding company with a single goal of world domination.\n\nYesterday, you woke up, and saw that the weather was clear, and the birds were singing. \u201cAnother day, another world domination plan\u201d, you sang to yourself as you devised your next world domination plan involving the illusory mind control potions.\n\nThere\u2019s only one insignificant problem you have to solve before you can execute this perfection of a plan: you don\u2019t know the correct recipe for the mind control potion. You asked the local Panda-breed brewmaster for the recipe, but unfortunately he didn\u2019t know either. Instead, he gave you the mysterious tome titled The Root of all Evil (written by Halim the White). You read the evil book under candle light, and wrote down all the potion recipes contained inside the book. \u201cOne of them must be the formula for the mind control potion, I\u2019m sure of it!\u201d, you said to yourself. You numbered these recipes from $1$ through $N$. \u201cI just need to try concocting all of these recipes!\u201d, you hummed to yourself.\n\nToday, you woke up, and saw that the weather was clear, and\u2026, anyway. You have purchased all the utensils and ingredients from the local grocery \u2014 onion, carrot, broom, vials, cauldrons, bat wings, \u2026, all common grocery items. Now, you are ready to begin your experiments, but then you notice that some of the recipes share common ingredients! Unfortunately, you only bought one of each ingredient with you. \u201cOh no! What should I do now?!\u201d, you panicked.\n\n\u201cI\u2019ll just create some of the potions today, and do the remaining ones later.\u201d, you resolved. You consider all your recipes one by one in order by their number from recipe $1$ through recipe $N$. For each recipe, if you are not able to concoct this potion (explained in the next paragraph), you skip this recipe, and consider the next one, if any. Otherwise, even though it may cause some of the next potions to no longer be concoctable, you concoct this recipe. Thus, whether to concoct a potion is not a choice. It\u2019s simply determined by whether it is possible or not to do so when you consider the potion.\n\nIn order to concoct a potion, you first prepare a new empty cauldron (you managed to procure an infinite number of cauldrons from the grocery store). Then, you combine all of the ingredients required for this potion and nothing else in this cauldron (that is, the cauldron cannot contain any ingredients not listed in the recipe). For the ingredients that have not been used for any of the previous potions that you\u2019ve decided to concoct, you can simply put it into this cauldron. You can also pour the entire content of the cauldron used for one of your previous concoctions into this cauldron, thus mixing in all of the ingredients contained inside the cauldron (since you pour all of the content of the cauldron, this previous concoction can no longer be used for any of your next concoctions). Finally, you stir this cauldron with your broom and take a vial of the concoction to test on your minions later. The remaining concoction remains in this cauldron, and can be poured into another cauldron later.\n\n\u201cWhat is the number of recipes you will concoct this way today?\u201d, you asked yourself.\n\n-----Input-----\nThe first line contains a non-negative integer $2 \\leq N \\leq 200000$, giving the total number of recipes you have. Thereafter follow $N$ lines, the $i$-th line describes recipe number $i$. Each of these lines is a single space separated list of integers. Each of these lines begins with an integer $1 \\leq M$, denoting the number of ingredients required to make this recipe. Then, $M$ integers follow, describing the required ingredients. The ingredients are identified by integers between $0$ and $500000$, inclusively, with different integers denoting different ingredients. For each recipe, all of its ingredients will be distinct. The sum of $M$ over all recipes will be no greater than $500000$.\n\n-----Output-----\nPrint the number of recipes you will concoct.Sample Data Explanation\n\nIn the first example, the first potion can be concocted, since both ingredients were not used so far. Thus, you will concoct this potion. The second potion will also be concocted for the same reason. The third potion cannot be concocted, since ingredient $1$ is no longer present, and is inside a cauldron mixed with another ingredient not present in the recipe. The fourth potion can be concocted by pouring the content of the cauldrons used for the first and second concoctions, and then adding ingredient $5$, which has remained unused so far. The last potion cannot be concocted, since the content of the cauldron for the first potion has all been poured when making the fourth potion and thus is now mixed with other ingredients not present in the recipe.\n\nFor the second example, since the first potion can be concocted, it has to be concocted. Thus, the second and third potions can no longer be concocted.\n\n-----Examples-----\nSample Input:\n5\n2 1 2\n2 3 4\n2 1 5\n5 1 2 3 4 5\n2 1 2\nSample Output:\n3\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given a rebus of form   +   -   +   = n, consisting of only question marks, separated by arithmetic operation '+' and '-', equality and positive integer n. The goal is to replace each question mark with some positive integer from 1 to n, such that equality holds.\n-----Input----- The only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks. -----Output----- The first line of the output should contain \"Possible\" (without quotes) if rebus has a solution and \"Impossible\" (without quotes) otherwise. If the answer exists, the second line should contain any valid rebus with question marks replaced by integers from 1 to n. Follow the format given in the samples. -----Examples----- Input ? + ? - ? + ? + ? = 42 Output Possible 9 + 13 - 39 + 28 + 31 = 42 Input ? - ? = 1 Output Impossible Input ? = 1000000 Output Possible 1000000 = 1000000\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a rebus of form ? + ? - ? + ? = n, consisting of only question marks, separated by arithmetic operation '+' and '-', equality and positive integer n. The goal is to replace each question mark with some positive integer from 1 to n, such that equality holds.\n\n\n-----Input-----\n\nThe only line of the input contains a rebus. It's guaranteed that it contains no more than 100 question marks, integer n is positive and doesn't exceed 1 000 000, all letters and integers are separated by spaces, arithmetic operations are located only between question marks.\n\n\n-----Output-----\n\nThe first line of the output should contain \"Possible\" (without quotes) if rebus has a solution and \"Impossible\" (without quotes) otherwise.\n\nIf the answer exists, the second line should contain any valid rebus with question marks replaced by integers from 1 to n. Follow the format given in the samples.\n\n\n-----Examples-----\nInput\n? + ? - ? + ? + ? = 42\n\nOutput\nPossible\n9 + 13 - 39 + 28 + 31 = 42\n\nInput\n? - ? = 1\n\nOutput\nImpossible\n\nInput\n? = 1000000\n\nOutput\nPossible\n1000000 = 1000000\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Theta has been learning about powers of $2$ in school. She notices that some numbers when written out contain powers of $2$ in their digit representation: for instance, $12560$ contains $256$ which is a power of $2$. She has been wondering how many such numbers there are. Can you write a program that counts how many numbers contain a given power of $2$ \n-----Input----- The input consists of a single line with two integers $n$ and $e$ ($0 \\le n \\le 15000000, 0 \\le e \\le 25$). -----Output----- Output a single integer that is equal to the number of distinct integers $k$ ($0 \\le k \\le n$) whose decimal representation contains the digits of $2^e$ as a substring. -----Examples----- Sample Input 1: 1000000 1 Sample Output 1: 468559 Sample Input 2: 1000000 5 Sample Output 2: 49401\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nTheta has been learning about powers of $2$ in school. She notices that some numbers when written out contain powers of $2$ in their digit representation: for instance, $12560$ contains $256$ which is a power of $2$. She has been wondering how many such numbers there are.\n\nCan you write a program that counts how many numbers contain a given power of $2$?\n\n-----Input-----\nThe input consists of a single line with two integers $n$ and $e$ ($0 \\le n \\le 15000000, 0 \\le e \\le 25$).\n\n-----Output-----\nOutput a single integer that is equal to the number of distinct integers $k$ ($0 \\le k \\le n$) whose decimal representation contains the digits of $2^e$ as a substring.\n\n-----Examples-----\nSample Input 1:\n1000000 1\nSample Output 1:\n468559\n\nSample Input 2:\n1000000 5\nSample Output 2:\n49401\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given a plotter that plots an intricate pattern of $n$ dots on the paper. In step two, the picture in the greeting emerges when the plotter connects by a straight segment each pair of dots that are exactly $2018$ length units apart. The plotter uses a special holographic ink, which has a limited supply. Find the number of all plotted segments in the picture to be sure that there is enough ink to complete the job. \n-----Input----- The first line of input contains a positive integer $n$ specifying the number of plotted points. The following $n$ lines each contain a pair of space-separated integer coordinates indicating one plotted point. Each coordinate is non-negative and less than $2^{31}$. There are at most $10^{5}$ points, all of them are distinct. In this problem, all coordinates and distances are expressed in plotter length units, the length of the unit in the x-direction and in the y-direction is the same. -----Output----- The output contains a single integer equal to the number of pairs of points which are exactly $2018$ length units apart. -----Examples----- Sample Input: 4 20180000 20180000 20180000 20182018 20182018 20180000 20182018 20182018 Sample Output: 4\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nQuido plans to send a New Year greeting to his friend Hugo. He has recently acquired access to an advanced high-precision plotter and he is planning to print the greeting card on the plotter.\n\nHere\u2019s how the plotter operates. In step one, the plotter plots an intricate pattern of $n$ dots on the paper. In step two, the picture in the greeting emerges when the plotter connects by a straight segment each pair of dots that are exactly $2018$ length units apart.\n\nThe plotter uses a special holographic ink, which has a limited supply. Quido wants to know the number of all plotted segments in the picture to be sure that there is enough ink to complete the job.\n\n-----Input-----\nThe first line of input contains a positive integer $n$ specifying the number of plotted points. The following $n$ lines each contain a pair of space-separated integer coordinates indicating one plotted point. Each coordinate is non-negative and less than $2^{31}$. There are at most $10^{5}$ points, all of them are distinct.\n\nIn this problem, all coordinates and distances are expressed in plotter length units, the length of the unit in the x-direction and in the y-direction is the same.\n\n-----Output-----\nThe output contains a single integer equal to the number of pairs of points which are exactly $2018$ length units apart.\n\n-----Examples-----\nSample Input:\n4\n20180000 20180000\n20180000 20182018\n20182018 20180000\n20182018 20182018\nSample Output:\n4\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given n, the number of cards Borya has, and k, the number of cards that had already been used. You are also given the number of cards of each color and value. You are asked to determine the minimum number of hints the other players should make for Borya to be certain about each card's color and value.\n\n-----Input----- The first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of Borya's cards. The next line contains the descriptions of n cards. The description of each card consists of exactly two characters. The first character shows the color (overall this position can contain five distinct letters \u2014 R, G, B, Y, W). The second character shows the card's value (a digit from 1 to 5). Borya doesn't know exact order of the cards they lie in. -----Output----- Print a single integer \u2014 the minimum number of hints that the other players should make. -----Examples----- Input 2 G3 G3 Output 0 Input 4 G4 R4 R3 B3 Output 2 Input 5 B1 Y1 W1 G1 R1 Output 4 -----Note----- In the first sample Borya already knows for each card that it is a green three. In the second sample we can show all fours and all red cards. In the third sample you need to make hints about any four colors.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nHave you ever played Hanabi? If not, then you've got to try it out! This problem deals with a simplified version of the game.\n\nOverall, the game has 25 types of cards (5 distinct colors and 5 distinct values). Borya is holding n cards. The game is somewhat complicated by the fact that everybody sees Borya's cards except for Borya himself. Borya knows which cards he has but he knows nothing about the order they lie in. Note that Borya can have multiple identical cards (and for each of the 25 types of cards he knows exactly how many cards of this type he has).\n\nThe aim of the other players is to achieve the state when Borya knows the color and number value of each of his cards. For that, other players can give him hints. The hints can be of two types: color hints and value hints. \n\nA color hint goes like that: a player names some color and points at all the cards of this color. \n\nSimilarly goes the value hint. A player names some value and points at all the cards that contain the value.\n\nDetermine what minimum number of hints the other players should make for Borya to be certain about each card's color and value.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of Borya's cards. The next line contains the descriptions of n cards. The description of each card consists of exactly two characters. The first character shows the color (overall this position can contain five distinct letters \u2014 R, G, B, Y, W). The second character shows the card's value (a digit from 1 to 5). Borya doesn't know exact order of the cards they lie in.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum number of hints that the other players should make.\n\n\n-----Examples-----\nInput\n2\nG3 G3\n\nOutput\n0\n\nInput\n4\nG4 R4 R3 B3\n\nOutput\n2\n\nInput\n5\nB1 Y1 W1 G1 R1\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample Borya already knows for each card that it is a green three.\n\nIn the second sample we can show all fours and all red cards.\n\nIn the third sample you need to make hints about any four colors.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n $N$ points are placed in the coordinate plane. \u00a0Write a program that calculates how many ways we can choose three points so that they form a right triangle with legs parallel to the coordinate axes. \u00a0A right triangle has one 90-degree internal angle. \u00a0The legs of a right triangle are its two shorter sides.\n-----Input----- The first line of input contains the integer $N$ ($3 \\le N \\le 100000$), the number of points. Each of the following $N$ lines contains two integers $X$ and $Y$ ($1 \\le X, Y \\le 100000$), the coordinates of one point. No pair of points will share the same pair of coordinates. -----Output----- Output the number of triangles. -----Examples----- Sample Input 1: 3 4 2 2 1 1 3 Sample Output 1: 0 Sample Input 2: 5 1 2 2 1 2 2 2 3 3 2 Sample Output 2: 4\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\n$N$ points are placed in the coordinate plane.\n\nWrite a program that calculates how many ways we can choose three points so that they form a right triangle with legs parallel to the coordinate axes.\n\nA right triangle has one 90-degree internal angle. The legs of a right triangle are its two shorter sides.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($3 \\le N \\le 100000$), the number of points.\n\nEach of the following $N$ lines contains two integers $X$ and $Y$ ($1 \\le X, Y \\le 100000$), the coordinates of one point.\n\nNo pair of points will share the same pair of coordinates.\n\n-----Output-----\nOutput the number of triangles.\n\n-----Examples-----\nSample Input 1:\n3\n4 2\n2 1\n1 3\nSample Output 1:\n0\n\nSample Input 2:\n5\n1 2\n2 1\n2 2\n2 3\n3 2\nSample Output 2:\n4\n\"\"\"\ndef code():"
}