{
    "0": "Python 3\n\"\"\"\n 100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet. The following game was chosen for the fights: initially there is a polynomial P(x) = a_{n}x^{n} + a_{n} - 1x^{n} - 1 + ... + a_1x + a_0, with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient a_{j} that stay near x^{j} is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k. Polynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial. Some moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally \n-----Input----- The first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, |k| \u2264 10 000)\u00a0\u2014 the size of the polynomial and the integer k. The i-th of the following n + 1 lines contain character '?' if the coefficient near x^{i} - 1 is yet undefined or the integer value a_{i}, if the coefficient is already known ( - 10 000 \u2264 a_{i} \u2264 10 000). Each of integers a_{i} (and even a_{n}) may be equal to 0. Please note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move. -----Output----- Print \"Yes\" (without quotes) if the human has winning strategy, or \"No\" (without quotes) otherwise. -----Examples----- Input 1 2 -1 ? Output Yes Input 2 100 -10000 0 1 Output Yes Input 4 5 ? 1 ? 1 ? Output No -----Note----- In the first sample, computer set a_0 to  - 1 on the first move, so if human can set coefficient a_1 to 0.5 and win. In the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\n100 years have passed since the last victory of the man versus computer in Go. Technologies made a huge step forward and robots conquered the Earth! It's time for the final fight between human and robot that will decide the faith of the planet.\n\nThe following game was chosen for the fights: initially there is a polynomial P(x) = a_{n}x^{n} + a_{n} - 1x^{n} - 1 + ... + a_1x + a_0,  with yet undefined coefficients and the integer k. Players alternate their turns. At each turn, a player pick some index j, such that coefficient a_{j} that stay near x^{j} is not determined yet and sets it to any value (integer or real, positive or negative, 0 is also allowed). Computer moves first. The human will be declared the winner if and only if the resulting polynomial will be divisible by Q(x) = x - k.\n\nPolynomial P(x) is said to be divisible by polynomial Q(x) if there exists a representation P(x) = B(x)Q(x), where B(x) is also some polynomial.\n\nSome moves have been made already and now you wonder, is it true that human can guarantee the victory if he plays optimally?\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n \u2264 100 000, |k| \u2264 10 000)\u00a0\u2014 the size of the polynomial and the integer k.\n\nThe i-th of the following n + 1 lines contain character '?' if the coefficient near x^{i} - 1 is yet undefined or the integer value a_{i}, if the coefficient is already known ( - 10 000 \u2264 a_{i} \u2264 10 000). Each of integers a_{i} (and even a_{n}) may be equal to 0.\n\nPlease note, that it's not guaranteed that you are given the position of the game where it's computer's turn to move.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes) if the human has winning strategy, or \"No\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n1 2\n-1\n?\n\nOutput\nYes\n\nInput\n2 100\n-10000\n0\n1\n\nOutput\nYes\nInput\n4 5\n?\n1\n?\n1\n?\n\nOutput\nNo\n\n\n-----Note-----\n\nIn the first sample, computer set a_0 to  - 1 on the first move, so if human can set coefficient a_1 to 0.5 and win.\n\nIn the second sample, all coefficients are already set and the resulting polynomial is divisible by x - 100, so the human has won.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Soon there will be held the world's largest programming contest, but the testing system still has m bugs. The contest organizer, a well-known university, has no choice but to attract university students to fix all the bugs. The university has n students able to perform such work. The students realize that they are the only hope of the organizers, so they don't want to work for free: the i-th student wants to get c_{i} 'passes' in his subjects (regardless of the volume of his work). Bugs, like students, are not the same: every bug is characterized by complexity a_{j}, and every student has the level of his abilities b_{i}. Student i can fix a bug j only if the level of his abilities is not less than the complexity of the bug: b_{i}   a_{j}, and he does it in one day. Otherwise, the bug will have to be fixed by another student. Of course, no student can work on a few bugs in one day. All bugs are not dependent on each other, so they can be corrected in any order, and different students can work simultaneously. The university wants to fix all the bugs as quickly as possible, but giving the students the total of not more than s passes. Determine which students to use for that and come up with the schedule of work saying which student should fix which bug. \n-----Input----- The first line contains three space-separated integers: n, m and s (1 \u2264 n, m \u2264 10^5, 0 \u2264 s \u2264 10^9)\u00a0\u2014 the number of students, the number of bugs in the system and the maximum number of passes the university is ready to give the students. The next line contains m space-separated integers a_1, a_2,\u00a0..., a_{m} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the bugs' complexities. The next line contains n space-separated integers b_1, b_2,\u00a0..., b_{n} (1 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 the levels of the students' abilities. The next line contains n space-separated integers c_1, c_2,\u00a0..., c_{n} (0 \u2264 c_{i} \u2264 10^9)\u00a0\u2014 the numbers of the passes the students want to get for their help. -----Output----- If the university can't correct all bugs print \"NO\". Otherwise, on the first line print \"YES\", and on the next line print m space-separated integers: the i-th of these numbers should equal the number of the student who corrects the i-th bug in the optimal answer. The bugs should be corrected as quickly as possible (you must spend the minimum number of days), and the total given passes mustn't exceed s. If there are multiple optimal answers, you can output any of them. -----Examples----- Input 3 4 9 1 3 1 2 2 1 3 4 3 6 Output YES 2 3 2 3 Input 3 4 10 2 3 1 2 2 1 3 4 3 6 Output YES 1 3 1 3 Input 3 4 9 2 3 1 2 2 1 3 4 3 6 Output YES 3 3 2 3 Input 3 4 5 1 3 1 2 2 1 3 5 3 6 Output NO -----Note----- Consider the first sample. The third student (with level 3) must fix the 2nd and 4th bugs (complexities 3 and 2 correspondingly) and the second student (with level 1) must fix the 1st and 3rd bugs (their complexity also equals 1). Fixing each bug takes one day for each student, so it takes 2 days to fix all bugs (the students can work in parallel). The second student wants 3 passes for his assistance, the third student wants 6 passes. It meets the university's capabilities as it is ready to give at most 9 passes.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nSoon there will be held the world's largest programming contest, but the testing system still has m bugs. The contest organizer, a well-known university, has no choice but to attract university students to fix all the bugs. The university has n students able to perform such work. The students realize that they are the only hope of the organizers, so they don't want to work for free: the i-th student wants to get c_{i} 'passes' in his subjects (regardless of the volume of his work).\n\nBugs, like students, are not the same: every bug is characterized by complexity a_{j}, and every student has the level of his abilities b_{i}. Student i can fix a bug j only if the level of his abilities is not less than the complexity of the bug: b_{i} \u2265 a_{j}, and he does it in one day. Otherwise, the bug will have to be fixed by another student. Of course, no student can work on a few bugs in one day. All bugs are not dependent on each other, so they can be corrected in any order, and different students can work simultaneously.\n\nThe university wants to fix all the bugs as quickly as possible, but giving the students the total of not more than s passes. Determine which students to use for that and come up with the schedule of work saying which student should fix which bug.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers: n, m and s (1 \u2264 n, m \u2264 10^5, 0 \u2264 s \u2264 10^9)\u00a0\u2014 the number of students, the number of bugs in the system and the maximum number of passes the university is ready to give the students.\n\nThe next line contains m space-separated integers a_1, a_2,\u00a0..., a_{m} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the bugs' complexities.\n\nThe next line contains n space-separated integers b_1, b_2,\u00a0..., b_{n} (1 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 the levels of the students' abilities.\n\nThe next line contains n space-separated integers c_1, c_2,\u00a0..., c_{n} (0 \u2264 c_{i} \u2264 10^9)\u00a0\u2014 the numbers of the passes the students want to get for their help.\n\n\n-----Output-----\n\nIf the university can't correct all bugs print \"NO\".\n\nOtherwise, on the first line print \"YES\", and on the next line print m space-separated integers: the i-th of these numbers should equal the number of the student who corrects the i-th bug in the optimal answer. The bugs should be corrected as quickly as possible (you must spend the minimum number of days), and the total given passes mustn't exceed s. If there are multiple optimal answers, you can output any of them.\n\n\n-----Examples-----\nInput\n3 4 9\n1 3 1 2\n2 1 3\n4 3 6\n\nOutput\nYES\n2 3 2 3\n\nInput\n3 4 10\n2 3 1 2\n2 1 3\n4 3 6\n\nOutput\nYES\n1 3 1 3\n\nInput\n3 4 9\n2 3 1 2\n2 1 3\n4 3 6\n\nOutput\nYES\n3 3 2 3\n\nInput\n3 4 5\n1 3 1 2\n2 1 3\n5 3 6\n\nOutput\nNO\n\n\n\n-----Note-----\n\nConsider the first sample.\n\nThe third student (with level 3) must fix the 2nd and 4th bugs (complexities 3 and 2 correspondingly) and the second student (with level 1) must fix the 1st and 3rd bugs (their complexity also equals 1). Fixing each bug takes one day for each student, so it takes 2 days to fix all bugs (the students can work in parallel).\n\nThe second student wants 3 passes for his assistance, the third student wants 6 passes. It meets the university's capabilities as it is ready to give at most 9 passes.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given two arrays of positive integers, find the largest subrectangle of a matrix such that the sum of its elements is at most $x$ and its area is the largest possible. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2000$). The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 2000$). The third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 2000$). The fourth line contains a single integer $x$ ($1 \\leq x \\leq 2 \\cdot 10^{9}$). -----Output----- If it is possible to choose four integers $x_1, x_2, y_1, y_2$ such that $1 \\leq x_1 \\leq x_2 \\leq n$, $1 \\leq y_1 \\leq y_2 \\leq m$, and $\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x$, output the largest value of $(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1)$ among all such quadruplets, otherwise output $0$. -----Examples----- Input 3 3 1 2 3 1 2 3 9 Output 4 Input 5 1 5 4 2 4 5 2 5 Output 1 -----Note----- Matrix from the first sample and the chosen subrectangle (of blue color):  [Image]  Matrix from the second sample and the chosen subrectangle (of blue color):  $\\left. \\begin{array}{l l l l l}{10} & {8} & {4} & {8} & {10} \\end{array} \\right.$\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given two arrays $a$ and $b$ of positive integers, with length $n$ and $m$ respectively. \n\nLet $c$ be an $n \\times m$ matrix, where $c_{i,j} = a_i \\cdot b_j$. \n\nYou need to find a subrectangle of the matrix $c$ such that the sum of its elements is at most $x$, and its area (the total number of elements) is the largest possible.\n\nFormally, you need to find the largest number $s$ such that it is possible to choose integers $x_1, x_2, y_1, y_2$ subject to $1 \\leq x_1 \\leq x_2 \\leq n$, $1 \\leq y_1 \\leq y_2 \\leq m$, $(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1) = s$, and $$\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x.$$\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\leq n, m \\leq 2000$).\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 2000$).\n\nThe third line contains $m$ integers $b_1, b_2, \\ldots, b_m$ ($1 \\leq b_i \\leq 2000$).\n\nThe fourth line contains a single integer $x$ ($1 \\leq x \\leq 2 \\cdot 10^{9}$).\n\n\n-----Output-----\n\nIf it is possible to choose four integers $x_1, x_2, y_1, y_2$ such that $1 \\leq x_1 \\leq x_2 \\leq n$, $1 \\leq y_1 \\leq y_2 \\leq m$, and $\\sum_{i=x_1}^{x_2}{\\sum_{j=y_1}^{y_2}{c_{i,j}}} \\leq x$, output the largest value of $(x_2 - x_1 + 1) \\times (y_2 - y_1 + 1)$ among all such quadruplets, otherwise output $0$.\n\n\n-----Examples-----\nInput\n3 3\n1 2 3\n1 2 3\n9\n\nOutput\n4\n\nInput\n5 1\n5 4 2 4 5\n2\n5\n\nOutput\n1\n\n\n\n-----Note-----\n\nMatrix from the first sample and the chosen subrectangle (of blue color):\n\n [Image] \n\nMatrix from the second sample and the chosen subrectangle (of blue color):\n\n $\\left. \\begin{array}{l l l l l}{10} & {8} & {4} & {8} & {10} \\end{array} \\right.$\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given a list of cards sorted by their rarity, find the batch of cards that can be reversed to restore the order of the cards into non-decreasing order of their rarity.\n-----Input----- The input consists of:  - One line containing an integer $n$ ($1 \\le n \\le 10^6$), the number of cards in your collection.  - One line containing $n$ integers $v_1, \\ldots , v_ n$ ($1 \\le v_{i} \\le 10^9$ for all $i$), the current order of the cards\u2019 rarity values. -----Output----- If the cards can be sorted by reversing exactly one contiguous subsequence of the list, then output the $1$-based start and end indices of such a subsequence. Otherwise, output \u201cimpossible\u201d. If there are multiple valid solutions you may output any one of them. -----Examples----- Sample Input 1: 7 10 13 19 19 15 14 20 Sample Output 1: 3 6 Sample Input 2: 6 9 1 8 2 7 3 Sample Output 2: impossible\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nAs a huge fan of the popular collectible card game Numinous Wilds: the Elven Reign Chronicles (NWERC), you have a large collection of cards which you carefully organise by their rarity. One day you notice that someone has touched your collection, and that some of the cards are now out of order. The most natural suspect, of course, is your little brother Billy, who was absolutely $100\\% $ forbidden from playing with your cards. After a few minutes of interrogation Billy confesses that he indeed took a few consecutive cards from the middle of the stack, but he swears that he put them back in exactly the same order as they were. You suspect that Billy, being so young, may have simply mistakenly reversed the order of the cards that he took. Now you want to check your theory and decide if you can find the batch of cards that Billy took to play with. \n\nIs it possible to restore the order of the cards into non-decreasing order of their rarity by reversing just one contiguous batch of cards?\n\n-----Input-----\nThe input consists of:\n - One line containing an integer $n$ ($1 \\le n \\le 10^6$), the number of cards in your collection.\n - One line containing $n$ integers $v_1, \\ldots , v_ n$ ($1 \\le v_{i} \\le 10^9$ for all $i$), the current order of the cards\u2019 rarity values.\n\n-----Output-----\nIf the cards can be sorted by reversing exactly one contiguous subsequence of the list, then output the $1$-based start and end indices of such a subsequence. Otherwise, output \u201cimpossible\u201d. If there are multiple valid solutions you may output any one of them.\n\n-----Examples-----\nSample Input 1:\n7\n10 13 19 19 15 14 20\nSample Output 1:\n3 6\n\nSample Input 2:\n6\n9 1 8 2 7 3\nSample Output 2:\nimpossible\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n One day, little Vasya found himself in a maze consisting of (n + 1) rooms, numbered from 1 to (n + 1). Initially, Vasya is at the first room and to get out of the maze, he needs to get to the (n + 1)-th one. The maze is organized as follows. Each room of the maze has two one-way portals. Let's consider room number i (1   i  n), someone can use the first portal to move from it to room number (i + 1), also someone can use the second portal to move from it to room number p_{i}, where 1   p_{i}   i. In order not to get lost, Vasya decided to act as follows.   Each time Vasya enters some room, he paints a cross on its ceiling. Initially, Vasya paints a cross at the ceiling of room 1.  Let's assume that Vasya is in room i and has already painted a cross on its ceiling. Then, if the ceiling now contains an odd number of crosses, Vasya uses the second portal (it leads to room p_{i}), otherwise Vasya uses the first portal.  Help Vasya determine the number of times he needs to use portals to get to room (n + 1) in the end.\n-----Input----- The first line contains integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of rooms. The second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 i). Each p_{i} denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room. -----Output----- Print a single number \u2014 the number of portal moves the boy needs to go out of the maze. As the number can be rather large, print it modulo 1000000007 (10^9 + 7). -----Examples----- Input 2 1 2 Output 4 Input 4 1 1 2 3 Output 20 Input 5 1 1 1 1 1 Output 62\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nOne day, little Vasya found himself in a maze consisting of (n + 1) rooms, numbered from 1 to (n + 1). Initially, Vasya is at the first room and to get out of the maze, he needs to get to the (n + 1)-th one.\n\nThe maze is organized as follows. Each room of the maze has two one-way portals. Let's consider room number i (1 \u2264 i \u2264 n), someone can use the first portal to move from it to room number (i + 1), also someone can use the second portal to move from it to room number p_{i}, where 1 \u2264 p_{i} \u2264 i.\n\nIn order not to get lost, Vasya decided to act as follows.   Each time Vasya enters some room, he paints a cross on its ceiling. Initially, Vasya paints a cross at the ceiling of room 1.  Let's assume that Vasya is in room i and has already painted a cross on its ceiling. Then, if the ceiling now contains an odd number of crosses, Vasya uses the second portal (it leads to room p_{i}), otherwise Vasya uses the first portal. \n\nHelp Vasya determine the number of times he needs to use portals to get to room (n + 1) in the end.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of rooms. The second line contains n integers p_{i} (1 \u2264 p_{i} \u2264 i). Each p_{i} denotes the number of the room, that someone can reach, if he will use the second portal in the i-th room.\n\n\n-----Output-----\n\nPrint a single number \u2014 the number of portal moves the boy needs to go out of the maze. As the number can be rather large, print it modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n2\n1 2\n\nOutput\n4\n\nInput\n4\n1 1 2 3\n\nOutput\n20\n\nInput\n5\n1 1 1 1 1\n\nOutput\n62\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You have $n$ items numbered from 1 to $n$. You have to group them. Each group must contain two items, and the greatest common divisor of numbers of the items in each group must be greater than 1. Each item can be part of at most one group. Get the maximum possible number of groups. \n-----Input----- The first line contains two space-separated integers $n$ and $k$ ($1\\le k\\le n\\le 10^5$), denoting the number of items and the number of boxes respectively. The second line of input contains $n$ space-separated integers $w_ i$ ($1\\le w_ i\\le 10^4$), representing the weight of each item in order. -----Output----- The only line of output should contain a single integer, denoting the minimum possible weight of the heaviest box. -----Examples----- Sample Input 1: 7 2 3 1 1 3 9 5 2 Sample Output 1: 16 Sample Input 2: 7 4 1 2 8 3 5 2 7 Sample Output 2: 9\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nBrandon Greg Jr. is moving to the United States to double his salary. He has $n$ items that he needs to pack into $k$ big boxes. The $n$ items are currently arranged in a row, and Brandon doesn\u2019t want to bother reordering them, so he will partition the $n$ items into $k$ groups of consecutive items, and put each of the $k$ groups into their own box. For convenience when moving, Brandon wants to minimize the weight of the heaviest box. The weights of the boxes themselves are negligible.\n\n-----Input-----\nThe first line contains two space-separated integers $n$ and $k$ ($1\\le k\\le n\\le 10^5$), denoting the number of items and the number of boxes respectively.\n\nThe second line of input contains $n$ space-separated integers $w_ i$ ($1\\le w_ i\\le 10^4$), representing the weight of each item in order.\n\n-----Output-----\nThe only line of output should contain a single integer, denoting the minimum possible weight of the heaviest box.\n\n-----Examples-----\nSample Input 1:\n7 2\n3 1 1 3 9 5 2\nSample Output 1:\n16\n\nSample Input 2:\n7 4\n1 2 8 3 5 2 7\nSample Output 2:\n9\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a list of people and their maximum pace. You are given a list of pairs of people. Return the minimum time required to get everyone back to the dorm. \n-----Input----- The input is a single line beginning with an integer, $2 \\leq N \\leq 15$. Following that are $N$ positive integers that respectively represent the minimum time in which each person is able to cross the campus if alone; these times are measured in minutes, with each being at most $5000$. (It is a very large campus!) -----Output----- Output the minimum possible time it takes to get the entire group from the gate to the dorm. -----Examples----- Sample Input 1: 2 15 5 Sample Output 1: 15 Sample Input 2: 4 1 2 7 10 Sample Output 2: 17\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nA group of friends snuck away from their school campus, but now they must return from the main campus gate to their dorm while remaining undetected by the many teachers who patrol the campus. Fortunately, they have an invisibility cloak, but it is only large enough to cover two people at a time. They will take turns as individuals or pairs traveling across campus under the cloak (and by necessity, returning the cloak to the gate if others remain). Each student has a maximum pace at which he or she is able to travel, yet if a pair of students are walking under the cloak together, they will have to travel at the pace of the slower of the two. Their goal is to have everyone back at the dorm as quickly as possible.\n\nAs an example, assume that there are four people in the group, with person\u00a0A able to make the trip in $1$\u00a0minute, person\u00a0B able to travel in $2$\u00a0minutes, person\u00a0C able to travel in $7$\u00a0minutes, and person\u00a0D able to travel in $10$\u00a0minutes. It is possible to get everyone to the dorm in $17$\u00a0minutes with the following plan:\n\n\n\u2013 A and B go from the gate to the dorm together\n\n(taking $2$ minutes)\n\n\u2013 A returns with the cloak to the gate\n\n(taking $1$ minute)\n\n\u2013 C and D go from the gate to the dorm together\n\n(taking $10$ minutes)\n\n\u2013 B returns with the cloak to the gate\n\n(taking $2$ minutes)\n\n\u2013 A and B go from the gate to the dorm together\n\n(taking $2$ minutes)\n\n-----Input-----\nThe input is a single line beginning with an integer, $2 \\leq N \\leq 15$. Following that are $N$ positive integers that respectively represent the minimum time in which each person is able to cross the campus if alone; these times are measured in minutes, with each being at most $5000$. (It is a very large campus!)\n\n-----Output-----\nOutput the minimum possible time it takes to get the entire group from the gate to the dorm.\n\n-----Examples-----\nSample Input 1:\n2 15 5\nSample Output 1:\n15\n\nSample Input 2:\n4 1 2 7 10\nSample Output 2:\n17\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n The famous global economic crisis is approaching rapidly, so the states of Berman, Berance and Bertaly formed an alliance and allowed the residents of all member states to freely pass through the territory of any of them. In addition, it was decided that a road between the states should be built to guarantee so that one could any point of any country can be reached from any point of any other State. Since roads are always expensive, the governments of the states of the newly formed alliance asked you to help them assess the costs. To do this, you have been issued a map that can be represented as a rectangle table consisting of n rows and m columns. Any cell of the map either belongs to one of three states, or is an area where it is allowed to build a road, or is an area where the construction of the road is not allowed. A cell is called passable, if it belongs to one of the states, or the road was built in this cell. From any passable cells you can move up, down, right and left, if the cell that corresponds to the movement exists and is passable. Your task is to construct a road inside a minimum number of cells, so that it would be possible to get from any cell of any state to any cell of any other state using only passable cells. It is guaranteed that initially it is possible to reach any cell of any state from any cell of this state, moving only along its cells. It is also guaranteed that for any state there is at least one cell that belongs to it. \n-----Input----- The first line of the input contains the dimensions of the map n and m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 the number of rows and columns respectively. Each of the next n lines contain m characters, describing the rows of the map. Digits from 1 to 3 represent the accessory to the corresponding state. The character '.' corresponds to the cell where it is allowed to build a road and the character '#' means no construction is allowed in this cell. -----Output----- Print a single integer\u00a0\u2014 the minimum number of cells you need to build a road inside in order to connect all the cells of all states. If such a goal is unachievable, print -1. -----Examples----- Input 4 5 11..2 #..22 #.323 .#333 Output 2 Input 1 5 1#2#3 Output -1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe famous global economic crisis is approaching rapidly, so the states of Berman, Berance and Bertaly formed an alliance and allowed the residents of all member states to freely pass through the territory of any of them. In addition, it was decided that a road between the states should be built to guarantee so that one could any point of any country can be reached from any point of any other State.\n\nSince roads are always expensive, the governments of the states of the newly formed alliance asked you to help them assess the costs. To do this, you have been issued a map that can be represented as a rectangle table consisting of n rows and m columns. Any cell of the map either belongs to one of three states, or is an area where it is allowed to build a road, or is an area where the construction of the road is not allowed. A cell is called passable, if it belongs to one of the states, or the road was built in this cell. From any passable cells you can move up, down, right and left, if the cell that corresponds to the movement exists and is passable.\n\nYour task is to construct a road inside a minimum number of cells, so that it would be possible to get from any cell of any state to any cell of any other state using only passable cells.\n\nIt is guaranteed that initially it is possible to reach any cell of any state from any cell of this state, moving only along its cells. It is also guaranteed that for any state there is at least one cell that belongs to it.\n\n\n-----Input-----\n\nThe first line of the input contains the dimensions of the map n and m (1 \u2264 n, m \u2264 1000)\u00a0\u2014 the number of rows and columns respectively.\n\nEach of the next n lines contain m characters, describing the rows of the map. Digits from 1 to 3 represent the accessory to the corresponding state. The character '.' corresponds to the cell where it is allowed to build a road and the character '#' means no construction is allowed in this cell.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of cells you need to build a road inside in order to connect all the cells of all states. If such a goal is unachievable, print -1.\n\n\n-----Examples-----\nInput\n4 5\n11..2\n#..22\n#.323\n.#333\nOutput\n2\nInput\n1 5\n1#2#3\n\nOutput\n-1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Remove one of the characters in s, excluding both ends. However, a character cannot be removed if removal of the character would result in two neighboring equal characters in s. The player who becomes unable to perform the operation, loses the game. Determine which player will win when the two play optimally. -----Constraints-----  - 3   |s|   10^5  - s consists of lowercase English letters.  - No two neighboring characters in s are equal.\n-----Input----- The input is given from Standard Input in the following format: s -----Output----- If Takahashi will win, print First. If Aoki will win, print Second. -----Sample Input----- aba -----Sample Output----- Second Takahashi, who goes first, cannot perform the operation, since removal of the b, which is the only character not at either ends of s, would result in s becoming aa, with two as neighboring.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere is a string s of length 3 or greater.\nNo two neighboring characters in s are equal.\nTakahashi and Aoki will play a game against each other.\nThe two players alternately performs the following operation, Takahashi going first:\n - Remove one of the characters in s, excluding both ends. However, a character cannot be removed if removal of the character would result in two neighboring equal characters in s.\nThe player who becomes unable to perform the operation, loses the game. Determine which player will win when the two play optimally.\n\n-----Constraints-----\n - 3 \u2264 |s| \u2264 10^5\n - s consists of lowercase English letters.\n - No two neighboring characters in s are equal.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\ns\n\n-----Output-----\nIf Takahashi will win, print First. If Aoki will win, print Second.\n\n-----Sample Input-----\naba\n\n-----Sample Output-----\nSecond\n\nTakahashi, who goes first, cannot perform the operation, since removal of the b, which is the only character not at either ends of s, would result in s becoming aa, with two as neighboring.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n The Birthday Paradox is the name given to the surprising fact that if there are just $23$ people in a group, there is a greater than $50\\% $ chance that a pair of them share the same birthday. The underlying assumptions for this are that all birthdays are equally likely (which isn t quite true), the year has exactly $365$ days (which also isn t true), and the people in the group are uniformly randomly selected (which is a somewhat strange premise). Consider what we might observe if we randomly select groups of $P=10$ people. Once we have chosen a group, we break them up into subgroups based on shared birthdays. Among many other possibilities, we might observe the following distributions of shared birthdays: - all $10$ have different birthdays, or - all $10$ have the same birthday, or - $3$ people have the same birthday, $2$ other people have the same birthday (on a different day), and the remaining $5$ all have different birthdays. Of course, these distributions have different probabilities of occurring. Your job is to calculate this probability for a given distribution of people sharing birthdays. That is, if there are $P$ people in a group, how probable is the given distribution of shared birthdays (among all possible distributions for $P$ people chosen uniformly at random) \n-----Input----- The first line gives a number $n$ where $1 \\le n \\le 365$. The second line contain integers $c_1$ through $c_ n$, where $1 \\le c_ i \\le 100$ for all $c_ i$. The value $c_ i$ represents the number of people who share a certain birthday (and whose birthday is distinct from the birthdays of everyone else in the group). -----Output----- Compute the probability $b$ of observing a group of people with the given distribution of shared birthdays. Since $b$ may be quite small, output instead $\\log _{10}(b)$. Your submission\u2019s answer is considered correct if it has an absolute or relative error of at most $10^{-6}$ from the judge\u2019s answer. -----Explanations----- The first sample case shows $P=2$ people with distinct birthdays. The probability of this occurring is $b = 364/365 \\approx 0.9972602740$, and $\\log _{10}(b) \\approx -0.001191480807419$. The second sample case represents the third example in the list given earlier with $P=10$ people. In this case, the probability is $b \\approx 0.0000489086$, and $\\log _{10}(b) \\approx -4.310614508857128$. -----Examples----- Sample Input: 2 1 1 Sample Output: -0.001191480807419\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe Birthday Paradox is the name given to the surprising fact that if there are just $23$ people in a group, there is a greater than $50\\% $ chance that a pair of them share the same birthday. The underlying assumptions for this are that all birthdays are equally likely (which isn\u2019t quite true), the year has exactly $365$ days (which also isn\u2019t true), and the people in the group are uniformly randomly selected (which is a somewhat strange premise). For this problem, we\u2019ll accept these assumptions.\n\nConsider what we might observe if we randomly select groups of $P=10$ people. Once we have chosen a group, we break them up into subgroups based on shared birthdays. Among many other possibilities, we might observe the following distributions of shared birthdays:\n - all $10$ have different birthdays, or\n - all $10$ have the same birthday, or\n - $3$ people have the same birthday, $2$ other people have the same birthday (on a different day), and the remaining $5$ all have different birthdays.\n\nOf course, these distributions have different probabilities of occurring.\n\nYour job is to calculate this probability for a given distribution of people sharing birthdays. That is, if there are $P$ people in a group, how probable is the given distribution of shared birthdays (among all possible distributions for $P$ people chosen uniformly at random)?\n\n-----Input-----\nThe first line gives a number $n$ where $1 \\le n \\le 365$. The second line contain integers $c_1$ through $c_ n$, where $1 \\le c_ i \\le 100$ for all $c_ i$. The value $c_ i$ represents the number of people who share a certain birthday (and whose birthday is distinct from the birthdays of everyone else in the group).\n\n-----Output-----\nCompute the probability $b$ of observing a group of people with the given distribution of shared birthdays. Since $b$ may be quite small, output instead $\\log _{10}(b)$. Your submission\u2019s answer is considered correct if it has an absolute or relative error of at most $10^{-6}$ from the judge\u2019s answer.\n\n-----Explanations-----\nThe first sample case shows $P=2$ people with distinct birthdays. The probability of this occurring is $b = 364/365 \\approx 0.9972602740$, and $\\log _{10}(b) \\approx -0.001191480807419$.\n\nThe second sample case represents the third example in the list given earlier with $P=10$ people. In this case, the probability is $b \\approx 0.0000489086$, and $\\log _{10}(b) \\approx -4.310614508857128$.\n\n-----Examples-----\nSample Input:\n2\n1 1\nSample Output:\n-0.001191480807419\n\"\"\"\ndef code():"
}