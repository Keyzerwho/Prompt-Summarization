{
    "0": "Python 3\n\"\"\"\n# Task\n Vanya has `n` rocks in the pile, then he buy labels.\n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1\u2009 \u2264 \u2009n \u2009\u2264 \u200910^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n  \n# Example\n\n For `n = 13`, the result should be `17`.\n ```\n the numbers from 1 to n are:\n 1 2 3 4 5 6 7 8 9 10 11 12 13\n we need 17 single digit labels:\n 1 2 3 4 5 6 7 8 9 1 0 1 1 1 2 1 3\n each label cost $1, so the output should be 17.\n ```\n\"\"\"\ndef rocks(n):",
    "1": "Python 3\n\"\"\"\n# Task\n Vanya gets bored one day and decides to enumerate a large pile of rocks. He first counts the rocks and finds out that he has `n` rocks in the pile, then he goes to the store to buy labels for enumeration. \n \n Each of the labels is a digit from 0 to 9 and each of the `n` rocks should be assigned a unique number from `1` to `n`.\n\n If each label costs `$1`, how much money will Vanya spend on this project?\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of rocks in the pile.\n\n  `1\u2009 \u2264 \u2009n \u2009\u2264 \u200910^9`\n\n\n - `[output]` an integer\n\n  the cost of the enumeration.\n  \n# Example\n\n For `n = 13`, the result should be `17`.\n ```\n the numbers from 1 to n are:\n 1 2 3 4 5 6 7 8 9 10 11 12 13\n we need 17 single digit labels:\n 1 2 3 4 5 6 7 8 9 1 0 1 1 1 2 1 3\n each label cost $1, so the output should be 17.\n ```\n\"\"\"\ndef rocks(n):",
    "2": "Python 3\n\"\"\"\nFor two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nWrite a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list. Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\"\"\"\ndef getMatrixProduct(a, b):",
    "3": "Python 3\n\"\"\"\nIn mathematics, a matrix (plural matrices) is a rectangular array of numbers. Matrices have many applications in programming, from performing transformations in 2D space to machine learning. \n\nOne of the most useful operations to perform on matrices is matrix multiplication, which takes a pair of matrices and produces another matrix \u2013 known as the dot product. Multiplying matrices is very different to multiplying real numbers, and follows its own set of rules. \n\nUnlike multiplying real numbers, multiplying matrices is non-commutative: in other words, multiplying matrix ```a``` by matrix ```b``` will not give the same result as multiplying matrix ```b``` by matrix ```a```.\n\nAdditionally, not all pairs of matrix can be multiplied. For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nThere are many introductions to matrix multiplication online, including at Khan Academy, and in the classic MIT lecture series by Herbert Gross. \n\nTo complete this kata, write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\nIt can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points.\n\"\"\"\ndef getMatrixProduct(a, b):",
    "4": "Python 3\n\"\"\"\nYou are given a string S containing only lowercase characters. Rearrange the string and print minimum number of characters needed to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given a string S containing only lowercase characters. \nYou can rearrange the string and you have to print minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Input:-----\n- First line contain an interger T denoting number of testcases.\n- First line of each testcase contains integer N, size of string.\n- Second line of each testcase contains string S.\n\n-----Output:-----\nFor each test case, print a single line containing one integer \u2015 the minimum number of characters needed(can be 0) to make it palindrome.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $1 \\leq N \\leq 10^5$\n\n-----Sample Input:-----\n3\n1\na\n9\nabbbcbddd\n6\nabcdef\n\n-----Sample Output:-----\n0\n2\n5\n\n-----EXPLANATION:-----\n- Example case 1: a is already a palindrome.\n- Example case 2: abbddcddbba is palindrome by adding 2 more characters.\n- Example case 3: abdefcfedba is palindrome by adding 5 more characters.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nThere are n psycho standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. A psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThere are n psychos standing in a line. Each psycho is assigned a unique integer from 1 to n. At each step every psycho who has an id greater than the psycho to his right (if exists) kills his right neighbor in the line. Note that a psycho might kill and get killed at the same step. \n\nYou're given the initial arrangement of the psychos in the line. Calculate how many steps are needed to the moment of time such, that nobody kills his neighbor after that moment. Look notes to understand the statement more precise.\n\n\n-----Input-----\n\nThe first line of input contains integer n denoting the number of psychos, (1 \u2264 n \u2264 10^5). In the second line there will be a list of n space separated distinct integers each in range 1 to n, inclusive \u2014 ids of the psychos in the line from left to right.\n\n\n-----Output-----\n\nPrint the number of steps, so that the line remains the same afterward.\n\n\n-----Examples-----\nInput\n10\n10 9 7 8 6 5 3 4 2 1\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample line of the psychos transforms as follows: [10 9 7 8 6 5 3 4 2 1]  \u2192  [10 8 4]  \u2192  [10]. So, there are two steps.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven a two dimensional metrix of Latin letters, determine if the word \"spoon\" (case insensitive) appears in the matrix.\n\n-----Input-----\nThe first line of input contains a positive integer T, the number of test cases. After that T test cases follow. The first line of each test case contains two space separated integers R and C, the number of rows and the number of columns of the matrix M respectively. Thereafter R lines follow each containing C characters, the actual digital map itself.\n\n-----Output-----\nFor each test case print one line. If a \"Spoon\" is found in the matrix, output \"There is a spoon!\" else output \"There is indeed no spoon!\" (Quotes only for clarity).\n\n-----Constraints-----\n\n1 \u2264 T \u2264 100\n\n1 \u2264 R, C \u2264 100\n\n-----Sample Input-----\n3\n3 6\nabDefb\nbSpoon\nNIKHil\n6 6\naaaaaa\nssssss\nxuisdP\noooooo\nioowoo\nbdylan\n6 5\nbdfhj\ncacac\nopqrs\nddddd\nindia\nyucky\n\n-----Sample Output-----\nThere is a spoon!\nThere is a spoon!\nThere is indeed no spoon!\n\n-----Explanation-----\nIn the first test case, \"Spoon\" occurs in the second row. In the second test case, \"spOon\" occurs in the last column.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nChef recently saw the movie Matrix. He loved the movie overall but he didn't agree with some things in it. Particularly he didn't agree with the bald boy when he declared - There is no spoon. Being a chef, he understands the importance of the spoon and realizes that the universe can't survive without it. Furthermore, he is sure there is a spoon; he saw it in his kitchen this morning. So he has set out to prove the bald boy is wrong and find a spoon in the matrix. He has even obtained a digital map already. Can you help him?\n\nFormally you're given a matrix of lowercase and uppercase Latin letters. Your job is to find out if the word \"Spoon\" occurs somewhere in the matrix or not. A word is said to be occurred in the matrix if it is presented in some row from left to right or in some column from top to bottom. Note that match performed has to be case insensitive. \n\n-----Input-----\nThe first line of input contains a positive integer T, the number of test cases. After that T test cases follow. The first line of each test case contains two space separated integers R and C, the number of rows and the number of columns of the matrix M respectively. Thereafter R lines follow each containing C characters, the actual digital map itself.\n\n-----Output-----\nFor each test case print one line. If a \"Spoon\" is found in Matrix, output \"There is a spoon!\" else output \"There is indeed no spoon!\" (Quotes only for clarity).\n\n-----Constraints-----\n\n1 \u2264 T \u2264 100\n\n1 \u2264 R, C \u2264 100\n\n-----Sample Input-----\n3\n3 6\nabDefb\nbSpoon\nNIKHil\n6 6\naaaaaa\nssssss\nxuisdP\noooooo\nioowoo\nbdylan\n6 5\nbdfhj\ncacac\nopqrs\nddddd\nindia\nyucky\n\n-----Sample Output-----\nThere is a spoon!\nThere is a spoon!\nThere is indeed no spoon!\n\n-----Explanation-----\nIn the first test case, \"Spoon\" occurs in the second row. In the second test case, \"spOon\" occurs in the last column.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given random numbers of each of the three types of ballon Red,Green and Black in a bag.\nDetermine the minimum number of balloons which are required to withdraw such that there is at least K balloons of same color.\n\n\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nToday a plane was hijacked by a maniac. All the passengers of the flight are taken as hostage. Chef is also one of them.\nHe invited one of the passengers to play a game with him. If he loses the game, he will release all the passengers, otherwise he will kill all of them. A high risk affair it is.\n\nChef volunteered for this tough task. He was blindfolded by Hijacker. Hijacker brought a big black bag from his pockets. The contents of the bag is not visible. He tells Chef that the bag contains R red, G green and B blue colored balloons.\n\nHijacker now asked Chef to take out some balloons from the box such that there are at least K balloons of the same color and hand him over. If the taken out balloons does not contain at least K balloons of the same color, then the hijacker will shoot everybody. Chef is very scared and wants to leave this game as soon as possible, so he will draw the minimum number of balloons so as to save the passengers. Can you please help scared Chef to find out the minimum number of balloons he should take out.\n\n-----Input-----\nThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. \n\nThe first line of each test case contains a three space-separated integers R, G and B. \n\nThe second line contains only one integer K.\n\n-----Output-----\nFor each test case, output a single line containing one integer - the minimum number of balloons Chef need to take out from the bag.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 R, G, B \u2264 109\n- 1 \u2264 K \u2264 max{R, G, B}\n\n-----Subtasks-----\n- Subtask 1 (44 points): 1 \u2264 R, G, B \u2264 10\n- Subtask 2 (56 points):  No additional constraints\n\n-----Example-----\nInput:\n2\n3 3 3\n1\n3 3 3\n2\n\nOutput:\n1\n4\n\n-----Explanation-----\nExample case 2. In the worst-case scenario first three balloons will be of the three different colors and only after fourth balloon Chef will have two balloons of the same color. So, Chef might need to fetch 4 balloons\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given two integers X and d.\n\nYou should construct an array such that, removing all non-empty subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d from the set of all\nsubsequences will give you X subsequences.\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nPikachu had an array with him. He wrote down all the non-empty subsequences of the array on paper. Note that an array of size n has 2^{n} - 1 non-empty subsequences in it. \n\nPikachu being mischievous as he always is, removed all the subsequences in which Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 d\n\nPikachu was finally left with X subsequences. \n\nHowever, he lost the initial array he had, and now is in serious trouble. He still remembers the numbers X and d. He now wants you to construct any such array which will satisfy the above conditions. All the numbers in the final array should be positive integers less than 10^18. \n\nNote the number of elements in the output array should not be more than 10^4. If no answer is possible, print  - 1.\n\n\n-----Input-----\n\nThe only line of input consists of two space separated integers X and d (1 \u2264 X, d \u2264 10^9).\n\n\n-----Output-----\n\nOutput should consist of two lines.\n\nFirst line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the number of integers in the final array.\n\nSecond line should consist of n space separated integers \u2014 a_1, a_2, ... , a_{n} (1 \u2264 a_{i} < 10^18).\n\nIf there is no answer, print a single integer -1. If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n10 5\n\nOutput\n6\n5 50 7 15 6 100\nInput\n4 2\n\nOutput\n4\n10 100 1000 10000\n\n\n-----Note-----\n\nIn the output of the first example case, the remaining subsequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50], [7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50, 7, 15, 6, 100] is valid.\n\nSimilarly, in the output of the second example case, the remaining sub-sequences after removing those with Maximum_element_of_the_subsequence  -  Minimum_element_of_subsequence  \u2265 2 are [10], [100], [1000], [10000]. There are 4 of them. Hence, the array [10, 100, 1000, 10000] is valid.\n\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven a text and a character, fully mutate the text to the character. If the text or the character are empty, return an empty string.  \n\n# Example\nInput:\ntext = \"abc\"\ncharacter = \"z\"\nOutput:\ntext = \"zzz\"\n\n\"\"\"\ndef contamination(text, char):",
    "15": "Python 3\n\"\"\"\nAn AI has infected a text with a character!! \n\nThis text is now **fully mutated** to this character.\n\nIf the text or the character are empty, return an empty string.  \nThere will never be a case when both are empty as nothing is going on!!\n\n**Note:** The character is a string of length 1 or an empty string.\n\n# Example\n```python\ntext before = \"abc\"\ncharacter   = \"z\"\ntext after  = \"zzz\"\n```\n\"\"\"\ndef contamination(text, char):",
    "16": "Python 3\n\"\"\"\nyou are given a list. each element represent a 2D point.\nReturn the maximum number of points that are inside a circle of radius\u00a0r.\n\nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: if center is at (0,0) and radius = 2 contain all 2D points.\n\nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: if center is at (0,4) and radius = 5 contain all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 100\npoints[i].length == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000\n\n\"\"\"\nclass Solution:\n    def numPoints(self, points: List[List[int]], r: int) -> int:",
    "17": "Python 3\n\"\"\"\nYou have a very large square wall and a circular dartboard placed on the wall.\u00a0You have been challenged to throw darts into the board blindfolded.\u00a0Darts thrown at the wall are represented as an array of\u00a0points on a 2D plane.\u00a0\nReturn\u00a0the maximum number of points that are within or\u00a0lie\u00a0on\u00a0any circular dartboard of radius\u00a0r.\n\u00a0\nExample 1:\n\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\n\nExample 2:\n\nInput: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\n\nExample 3:\nInput: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\nOutput: 1\n\nExample 4:\nInput: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\nOutput: 4\n\n\u00a0\nConstraints:\n\n1 <= points.length <= 100\npoints[i].length == 2\n-10^4 <= points[i][0], points[i][1] <= 10^4\n1 <= r <= 5000\n\"\"\"\nclass Solution:\n    def numPoints(self, points: List[List[int]], r: int) -> int:",
    "18": "Python 3\n\"\"\"\nGiven an array, check whether every value in the array is an array. This should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\nInput:\n[[1],[2]]\nOutput:\ntrue\n\nInput:\n['1','2']\nOutput:\nfalse\n\nInput:\n[{1:1},{2:2}]\nOutput:\nfalse\n\"\"\"\ndef arr_check(arr):",
    "19": "Python 3\n\"\"\"\nIs every value in the array an array?\n\nThis should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\n\n```python\n[[1],[2]] => true\n['1','2'] => false\n[{1:1},{2:2}] => false\n```\n\"\"\"\ndef arr_check(arr):"
}