{
    "0": "\n    return n * (n + 1) // 2\n\nprint(rocks(13))",
    "1": "\n    return n * (n + 1) // 2\n\nprint(rocks(13))",
    "2": "\n    if len(a[0]) != len(b):\n        return -1\n    else:\n        result = []\n        for i in range(len(a)):\n            row = []\n            for j in range(len(b[0])):\n                sum = 0\n                for k in range(len(a[0])):\n                    sum += a[i][k] * b[k][j]\n                row.append(sum)\n            result.append(row)\n\n        return result",
    "3": "\n    if len(a[0]) != len(b):\n        return -1\n    else:\n        result = []\n        for i in range(len(a)):\n            row = []\n            for j in range(len(b[0])):\n                sum = 0\n                for k in range(len(a[0])):\n                    sum += a[i][k] * b[k][j]\n                row.append(sum)\n            result.append(row)\n\n        return result",
    "4": "\n    ",
    "5": "\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        S = input()\n        count = 0\n        for i in range(N//2):\n            if S[i] != S[N-1-i]:\n                count += 1\n        print(count)\n\n        ",
    "6": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while True:\n        for i in range(n-1):\n            if lst[i] > lst[i+1]:\n                lst[i], lst[i+1] = lst[i+1], lst[i]\n                steps += 1\n        if all([lst[i] <= lst[i+1] for i in range(n-1)]): break\n\n    print(steps)",
    "7": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while len(lst) > 1:\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                del lst[i]\n                break\n        else:\n            del lst[-1]\n        steps += 1\n\n    print(steps)",
    "8": "\n    T = int(input())\n    for i in range(T):\n        R, C = map(int, input().split())\n        matrix = []\n        for j in range(R):\n            matrix.append(input())\n        if \"spoon\" in ''.join(matrix).lower():\n            print(\"There is a spoon!\")\n        else:\n            print(\"There is indeed no spoon!\")",
    "9": "\n    T = int(input())\n    for i in range(T):\n        R, C = map(int, input().split())\n        M = []\n        for j in range(R):\n            M.append(input())\n        if \"spoon\" in ''.join(M).lower():\n            print(\"There is a spoon!\")\n        else:\n            print(\"There is indeed no spoon!\")",
    "10": "\n    T = int(input())\n    for i in range(T):\n        R,G,B = map(int,input().split())\n        K = int(input())\n        if K<=min(R,G,B):\n            print(K)\n        else:\n            print((K-min(R,G,B))*3+1)",
    "11": "\n    T = int(input())\n    for _ in range(T):\n        R, G, B = map(int, input().split())\n        K = int(input())\n        if K > min(R, G, B):\n            print(\"Impossible\")\n        else:\n            print((min(R, G, B) - K) * 3 + K)",
    "12": "\n    X, d = map(int, input().split())\n    if X == 1:\n        print(1)\n        print(d)\n    else:\n        n = 0\n        for i in range(1, d + 1):\n            if (X - 1) % i == 0 and (X - 1) // i <= d:\n                n = (X - 1) // i + 1\n                break\n\n        if n == 0:\n            print(-1)\n\n        else:\n            a = []\n\n            for i in range(n):\n                a.append(d * (i + 1))\n\n            print(n)\n\n            for i in a:\n                print(i, end=\" \")",
    "13": "\n    X, d = map(int, input().split())\n    n = 0\n    for i in range(1, X+1):\n        if (X-i)%2 == 0:\n            if (X-i)/2 >= i:\n                n += 1\n    print(n)\n    for i in range(n):\n        print((X-i)//2, end=\" \")\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n        ",
    "14": "\n    if text == '' or char == '':\n        return ''\n    else:\n        return char * len(text)",
    "15": "\n    if text == \"\" or char == \"\":\n        return \"\"\n    else:\n        return char * len(text)",
    "16": "\n        def dist(p1,p2):\n            return ((p1[0]-p2[0])**2+(p1[1]-p2[1])**2)**0.5\n\n        def get_circle(p1, p2):\n            d = dist(p1, p2)\n            if d > 2*r:\n                return None\n            x0, y0 = (p1[0]+p2[0])/2, (p1[1]+p2[1])/2\n            f = lambda x: (x-x0)**2 + (y-y0)**2 - r**2\n            res = fsolve(f,[x0-r,y0])\n            res = [int(i) for i in res]\n            if f(*res) == 0:\n                return res\n\n        def get_all_circles(points):\n            circles = []\n            for i in range(len(points)-1):\n                for j in range(i+1, len(points)):  # \u53ef\u4ee5\u4f18\u5316\uff0c\u4e0d\u7528\u8ba1\u7b97\u6240\u6709\u7684\u70b9\uff0c\u53ea\u9700\u8981\u8ba1\u7b97\u4e0e\u5176\u4ed6\u70b9\u76f8\u8fde\u7684\u70b9\u5373\u53ef\u3002\u6bd4\u5982\u8ba1\u7b97A\u548cB\u76f8\u8fde\u7684\u70b9\uff0c\u53ea\u9700\u8981\u8ba1\u7b97A\u548cC\u3001B\u548cC\u76f8\u8fde\u7684\u4e24\u4e2a\u5706\u5373\u53ef\u3002\u4f46\u662f\u9898\u76ee\u4e2d\u8bf4\u660e\u4e86points\u6570\u91cf\u5f88\u5c11\uff0c\u6240\u4ee5\u4e0d\u8003\u8651\u8fd9\u4e2a\u4f18\u5316\u4e86\u3002\n\n                    circle = get_circle(points[i], points[j])  # \u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u4e24\u4e2a\u5706\u6ca1\u6709\u4ea4\u96c6\uff0cget_circle\u4f1a\u8fd4\u56deNone\u3002\u4f46\u662f\u6211\u4eec\u8981\u8fd4\u56de\u6240\u6709\u5706\uff0c\u6240\u4ee5\u5e94\u8be5\u5224\u65ad\u4e00\u4e0b\u3002\u5982\u679c\u662fNone\u5219\u8df3\u8fc7\u8be5\u6b21\u5faa\u73af\u3002\n\n                    if circle is not None:  # \u5982\u679cget_circle()\u51fd\u6570\u8fd4\u56deNone\u5219\u4ee3\u8868\u4e24\u5706\u6ca1\u6709\u4ea4\u96c6\uff0c\u5426\u5219\u4ee3\u8868\u6709\u4ea4\u96c6\u3002\n\n                        circles.append([circle, points[i], points[j]])  # \u628a\u5706\u3001\u5176\u4e0a\u7684\u4e24\u4e2a\u70b9\u52a0\u5165circles\u4e2d\u3002\n\n                        # print('circle', circle,'between', points[i], 'and', points[j])  # \u8f93\u51fa\u5706\u5fc3\u548c\u5bf9\u5e94\u7684\u4e24\u4e2a\u7aef\u70b9\u3002\n\n                        # print('between', points[i], 'and', points[j], 'is', circle)  # \u8f93\u51fa\u5bf9\u5e94\u7684\u7aef\u70b9\u548c\u5706\u5fc3\u662f\u5426\u76f8\u543b\u5408\u3002\n\n                    else:  # \u5982\u679cget_circle()\u51fd\u6570\u8fd4\u56deNone\u5219\u4ee3\u8868\u4e24\u5706\u6ca1\u6709\u4ea4\u96c6\uff0c\u5426\u5219\u4ee3\u8868\u6709\u4ea4\u96c6\u3002\n\n                        pass  # \u8df3\u8fc7\u5f53\u524d\u5faa\u73af\u3002\n\n                        # print('between', points[i], 'and', points[j], 'is not overlap.')  # \u8f93\u51fa\u5bf9\u5e94\u7684\u7aef\u70b9\u548c\u5706\u5fc3\u662f\u5426\u76f8\u543b\u5408\u3002\n\n                return circles  # \u628acircles\u4f5c\u4e3a\u51fd\u6570\u503c\u8fd4\u56de\u53bb\u3002\n\n        def get_max_counts():# \u7edf\u8ba1\u6240\u6709\u5708\u4e2d\u6240\u5305\u542b\u7684\u7aef\u70b9\u6570\u91cf\u5e76\u53d6\u6700\u5927\u503c\u4f5c\u4e3a\u51fd\u6570\u503c\u8fd4\u56de\u53bb\u3002\u6ce8\u610f\u6211\u4eec\u8981\u7528set\u6765\u53bb",
    "17": "\n        def dist(p1, p2):\n            return ((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)**0.5\n\n        def get_circle(p1, p2):\n            d = dist(p1, p2)\n            x = (r**2 - (d**2)/4)/(d**2)\n            y = r/d * math.sqrt(r**2 - x**2)\n            return [x+((p1[0]+p2[0])/2), y+((p1[1]+p2[1])/2)]\n\n        def in_circle(c, p):\n            return dist(c, p) <= r\n\n        def get_points_in_circle(c):\n            res = 0\n            for i in range(len(points)):\n                if in_circle(c, points[i]): res += 1\n            return res\n\n        if len(points) == 1: return 1\n\n        max_res = 0\n\n        for i in range(len(points)-1):\n            for j in range(i+1, len(points)):\n                c = get_circle(points[i], points[j])\n\n                if not in_circle([0, 0], c): continue\n\n                max_res = max([max_res, get_points_in_circle([c[0], c[1]])+get_points_in_circle([-c[0], -c[1]])+4])\n\n        return max([max([max([max([max([max([max([max([max([max([len(points), max_res]), 2]), 3]), 4]), 5]), 6]), 7]), 8]), 9]), 10])",
    "18": "\n    for i in arr:\n        if type(i) != list:\n            return False\n    return True",
    "19": "\n    for i in arr:\n        if type(i) != list:\n            return False\n    return True"
}