{
    "0": "Python 3\n\"\"\"\nYou are given N people to be split into two groups such that given dislikes[i] = [a, b], a and b should be in different groups.\nYou need to return true if such split is possible.\n\nExample 1:\nInput: N = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: group1 [1,4], group2 [2,3]\n\n\nExample 2:\nInput: N = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\n\n\nExample 3:\nInput: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\nOutput: false\n\"\"\"\nclass Solution:\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:",
    "1": "Python 3\n\"\"\"\nGiven a set of N\u00a0people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.\nEach person may dislike some other people, and they should not go into the same group.\u00a0\nFormally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.\nReturn true\u00a0if and only if it is possible to split everyone into two groups in this way.\n\n\nExample 1:\nInput: N = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: group1 [1,4], group2 [2,3]\n\n\nExample 2:\nInput: N = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false\n\n\nExample 3:\nInput: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\nOutput: false\n\n\n\n\n\u00a0\nConstraints:\n\n1 <= N <= 2000\n0 <= dislikes.length <= 10000\ndislikes[i].length == 2\n1 <= dislikes[i][j] <= N\ndislikes[i][0] < dislikes[i][1]\nThere does not exist i != j for which dislikes[i] == dislikes[j].\n\"\"\"\nclass Solution:\n    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:",
    "2": "Python 3\n\"\"\"\nFind the frequency of the unique values in a given array of size N.\n\n-----INPUT-----\nThe first line of input contains an integer T denoting the number of test cases. T test cases follow.\n\nThe first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum.\n\nThe next line contains N spaced integers the number of contributions chef has made if he has made any.\n\n-----OUTPUT-----\n\nThe output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green.\n\n-----CONSTRAINTS-----\n1 <= T <= 25\n\n5 <= N <= 50\n\n1 <= Ai <= 50\n\n-----EXAMPLE-----Input:\n\n1\n\n7\n\n20 6 5 3 3 1 1\nOutput:\n\n1: 2\n\n3: 2\n\n5: 1\n\n6: 1\n\n20: 1\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nChef is very organised in whatever he does and likes to maintain statistics of his work. Chef has expertise in web development and hence is a regular contributor on a forum. Chef sometimes makes multiple contributions in a single day.. Each day chef makes at least 1 contribution he is assigned a shade of green. The greater the number of contribution in a single day the darker shade of green he gets assigned and vice versa. Your job is to find out the number of days chef is assigned a same shade of green and print the number of times chef is assigned a unique shade of green.\n\n-----INPUT-----\nThe first line of input contains an integer T denoting the number of test cases. T test cases follow.\n\nThe first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum.\n\nThe next line contains N spaced integers the number of contributions chef has made if he has made any.\n\n-----OUTPUT-----\n\nThe output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green.\n\n-----CONSTRAINTS-----\n1 <= T <= 25\n\n5 <= N <= 50\n\n1 <= Ai <= 50\n\n-----EXAMPLE-----Input:\n\n1\n\n7\n\n20 6 5 3 3 1 1\nOutput:\n\n1: 2\n\n3: 2\n\n5: 1\n\n6: 1\n\n20: 1\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou have to find a $Special$ $Number$  and a $Partial$ special number for a number N.Special Number are those product of its digits is equal to number itself and there is no digit $1$. $Partial$ $Special$ is a number having all the condition same as $Special$ except that it can also have digit $1$ in it. Print the count of the $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$ . \n\n-----Input:-----\n- Integers $N$ is taken as input from input stream. \n\n-----Output:-----\n- Print the number of  $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$ numbers to be count will be less then 10^6\n\n-----Sample Input:-----\n3\n\n-----Sample Output:-----\n1 20\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\n$Neha$  is given a number $N$. She always looks for special thing , this time she is looking for $Special$ $Number$ and $Partial$ $Special$ $Number$. A $Special$ $Number$ is a number whose product of its digits is equal to number itself i.e. $N $, and in this number there is no digit $1$. $Partial$ $Special$ is a number having all the condition same as $Special$ except that it can also have digit $1$ in it .Neha have to count the number of $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$ . She is not so good in programming , so go and help her.\n\n-----Input:-----\n- Integers $N$ is taken as input from input stream. \n\n-----Output:-----\n- Print the number of  $Special$ and $Partial$ $Special$ $Numbers $for a given  $N$.\n\n-----Constraints-----\n- $1 \\leq N \\leq 100$ numbers to be count will be less then 10^6\n\n-----Sample Input:-----\n3\n\n-----Sample Output:-----\n1 20\n\n-----EXPLANATION:-----\nThere are only one natural numbers, the product of the digits of which is 3  :- {3}.\nThere are 20 natural numbers with digit 1 , whose  product of the digits  is 3 :-{13, 31, 113 ,131 311 ,1113 ,1131 ,1311, 3111 ,11113, 11131, 11311 ,13111, 31111, 111113, 111131, 111311,113111, 131111 ,311111}\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n# Task\nGiven a list/array representing how much candy each child in our group has made out with, give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1. \n\n```python\ncandies ([5,8,6,4]) # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\ncandies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) // return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\ncandies [] -- return -1\n\ncandies [1,6] -- return 5\n```\n\"\"\"\ndef candies(s):",
    "7": "Python 3\n\"\"\"\n# Description\n\"It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home. \n\nSo we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount.\n# Task\nYour job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons.\"\n\nYour job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1. \n\nIn the first case (look below) the most candies are given to second kid (i.e second place in list/array), 8. Because of that we will give the first kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will have 8 candies.So we end up handing out 3 + 2 + 4 = 9.\n\n```python\ncandies ([5,8,6,4]) # return 9\n\ncandies ([1,2,4,6]) # return 11\n\ncandies ([1,6]) # return 5\n\ncandies ([]) # return -1\n\ncandies ([6]) # return -1 (because only one kid)\n```\n```cs\nCandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9\n\nCandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11\n\nCandyProblem.GetMissingCandies(new [] { }) // return -1\n\nCandyProblem.GetMissingCandies(new [] {1, 6}) // return 5\n\n```\n```haskell \ncandies [5,8,6,4] -- return 9\n\ncandies [1,2,4,6] -- return 11\n\ncandies [] -- return -1\n\ncandies [1,6] -- return 5\n```\n\"\"\"\ndef candies(s):",
    "8": "Python 3\n\"\"\"\nYou are given two positive integers \u2014 A and B \u2014 in 7-ary system such that B * C = A and  B is a divisor of A. Calculate the number C modulo 7L.\n\n-----Input-----\n\nFirst line of input contains an integer T \u2014 the number of test cases. T tests follow.\n\nFor each test case, the first line contains the integer A, and the second line contains the integer B, and the third line contains the integer L. A and B are given in 7-ary system.\n\n-----Output-----\nOutput the answer in 7-ary system.\n\n-----Example-----\nInput:3\n21\n5\n10\n202\n13\n1\n202\n13\n2\n\nOutput:3\n3\n13\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nSereja has two integers \u2014 A and B \u2014 in 7-ary system. He wants to calculate the number C, such that B * C = A. It is guaranteed that B is a divisor of A.\n\nPlease, help Sereja calculate the number C modulo 7L.\n\n-----Input-----\n\nFirst line of input contains an integer T \u2014 the number of test cases. T tests follow.\n\nFor each test case, the first line contains the integer A, and the second line contains the integer B, and the third line contains the integer L. A and B are given in 7-ary system.\n\n-----Output-----\nOutput the answer in 7-ary system.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10\n- A and B are both positive integers.\n- Length of A is a positive integer and doesn't exceed 106.\n- L and length of B are positive integers and do not exceed 10000.\n\n-----Subtasks-----\n- Sub task #1 (20 points): Length of A is a positive integer and doesn't exceed 20.\n- Sub task #2 (30 points): Length of A is a positive integer and doesn't exceed 2000.\n- Sub task #3 (50 points): Original constraints.\n\n-----Example-----\nInput:3\n21\n5\n10\n202\n13\n1\n202\n13\n2\n\nOutput:3\n3\n13\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou are given a directed graph of $n$ vertices and $m$ edges. Vertices are numbered from $1$ to $n$. There is a token in vertex $1$.\n\nThe following actions are allowed: Token movement. To move the token from vertex $u$ to vertex $v$ if there is an edge $u \\to v$ in the graph. This action takes $1$ second. To transpose all the edges in the graph: replace each edge $u \\to v$ by an edge $v \\to u$. This action takes increasingly more time: $k$-th transposition takes $2^{k-1}$ seconds.\n\nThe goal is to move the token from vertex $1$ to vertex $n$ in the shortest possible time. Print this time modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n, m$ ($1 \\le n, m \\le 200\\,000$).\n\nThe next $m$ lines contain two integers each: $u, v$ ($1 \\le u, v \\le n; u \\ne v$), which represent the edges of the graph. It is guaranteed that all ordered pairs $(u, v)$ are distinct.\n\nIt is guaranteed that it is possible to move the token from vertex $1$ to vertex $n$ using the actions above.\n\n\n-----Output-----\n\nPrint one integer: the minimum required time modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\n\nOutput\n2\n\nInput\n4 3\n2 1\n2 3\n4 3\n\nOutput\n10\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given a directed graph of $n$ vertices and $m$ edges. Vertices are numbered from $1$ to $n$. There is a token in vertex $1$.\n\nThe following actions are allowed:   Token movement. To move the token from vertex $u$ to vertex $v$ if there is an edge $u \\to v$ in the graph. This action takes $1$ second.  Graph transposition. To transpose all the edges in the graph: replace each edge $u \\to v$ by an edge $v \\to u$. This action takes increasingly more time: $k$-th transposition takes $2^{k-1}$ seconds, i.e. the first transposition takes $1$ second, the second one takes $2$ seconds, the third one takes $4$ seconds, and so on. \n\nThe goal is to move the token from vertex $1$ to vertex $n$ in the shortest possible time. Print this time modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n, m$ ($1 \\le n, m \\le 200\\,000$).\n\nThe next $m$ lines contain two integers each: $u, v$ ($1 \\le u, v \\le n; u \\ne v$), which represent the edges of the graph. It is guaranteed that all ordered pairs $(u, v)$ are distinct.\n\nIt is guaranteed that it is possible to move the token from vertex $1$ to vertex $n$ using the actions above.\n\n\n-----Output-----\n\nPrint one integer: the minimum required time modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n4 4\n1 2\n2 3\n3 4\n4 1\n\nOutput\n2\n\nInput\n4 3\n2 1\n2 3\n4 3\n\nOutput\n10\n\n\n\n-----Note-----\n\nThe first example can be solved by transposing the graph and moving the token to vertex $4$, taking $2$ seconds.\n\nThe best way to solve the second example is the following: transpose the graph, move the token to vertex $2$, transpose the graph again, move the token to vertex $3$, transpose the graph once more and move the token to vertex $4$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven the number n, populate an array with all numbers up to and including that number, but excluding zero.\n\nExamples:\nInput:\nmonkeyCount(10)\nOutput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nInput:\nmonkeyCount(1)\nOutput:\n[1]\n\"\"\"\ndef monkey_count(n):",
    "13": "Python 3\n\"\"\"\nYou take your son to the forest to see the monkeys. You know that there are a certain number there (n), but your son is too young to just appreciate the full number, he has to start counting them from 1.\n\nAs a good parent, you will sit and count with him. Given the number (n), populate an array with all numbers up to and including that number, but excluding zero.\n\nFor example:\n```python\nmonkeyCount(10) # --> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmonkeyCount(1) # --> [1]\n```\n\"\"\"\ndef monkey_count(n):",
    "14": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007. When you represent s as a decimal number, ignore the leading zeroes.\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nAndrew and Eugene are playing a game. Initially, Andrew has string s, consisting of digits. Eugene sends Andrew multiple queries of type \"d_{i} \u2192 t_{i}\", that means \"replace all digits d_{i} in string s with substrings equal to t_{i}\". For example, if s = 123123, then query \"2 \u2192 00\" transforms s to 10031003, and query \"3 \u2192 \" meaning \"replace 3 by an empty string\" transforms it to s = 1212. After all the queries Eugene asks Andrew to find the remainder after division of number with decimal representation equal to s by 1000000007\u00a0(10^9 + 7). When you represent s as a decimal number, please ignore the leading zeroes; also if s is an empty string, then it's assumed that the number equals to zero.\n\nAndrew got tired of processing Eugene's requests manually and he asked you to write a program for that. Help him!\n\n\n-----Input-----\n\nThe first line contains string s (1 \u2264 |s| \u2264 10^5), consisting of digits\u00a0\u2014 the string before processing all the requests.\n\nThe second line contains a single integer n (0 \u2264 n \u2264 10^5)\u00a0\u2014 the number of queries.\n\nThe next n lines contain the descriptions of the queries. The i-th query is described by string \"d_{i}->t_{i}\", where d_{i} is exactly one digit (from 0 to 9), t_{i} is a string consisting of digits (t_{i} can be an empty string). The sum of lengths of t_{i} for all queries doesn't exceed 10^5. The queries are written in the order in which they need to be performed.\n\n\n-----Output-----\n\nPrint a single integer \u2014 remainder of division of the resulting number by 1000000007\u00a0(10^9 + 7).\n\n\n-----Examples-----\nInput\n123123\n1\n2->00\n\nOutput\n10031003\n\nInput\n123123\n1\n3->\n\nOutput\n1212\n\nInput\n222\n2\n2->0\n0->7\n\nOutput\n777\n\nInput\n1000000008\n0\n\nOutput\n1\n\n\n\n-----Note-----\n\nNote that the leading zeroes are not removed from string s after the replacement (you can see it in the third sample).\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nIn FEIS, all integer sequences of lengths between 1 and N (inclusive) consisting of integers between 1 and K (inclusive) are listed.\n\nLet the total number of sequences listed in FEIS be X. \n\nFind the (X/2)-th lexicographically smallest one.\n\n-----Constraints-----\n - 1 \\leq N,K \\leq 3 \u00d7 10^5\n\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\n\n-----Output-----\nPrint the (X/2)-th lexicographically smallest sequence listed in FEIS, with spaces in between.\n\n-----Sample Input-----\n3 2\n\n-----Sample Output-----\n2 1 \n\nThere are 12 sequences listed in FEIS: (1),(1,1),(1,2),(1,3),(2),(2,1),(2,2),(2,3),(3),(3,1),(3,2),(3,3).\nThe (12/2 = 6)-th lexicographically smallest one among them is (2,1).\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nIn Finite Encyclopedia of Integer Sequences (FEIS), all integer sequences of lengths between 1 and N (inclusive) consisting of integers between 1 and K (inclusive) are listed.\nLet the total number of sequences listed in FEIS be X. Among those sequences, find the (X/2)-th (rounded up to the nearest integer) lexicographically smallest one.\n\n-----Constraints-----\n - 1 \\leq N,K \\leq 3 \u00d7 10^5\n - N and K are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\n\n-----Output-----\nPrint the (X/2)-th (rounded up to the nearest integer) lexicographically smallest sequence listed in FEIS, with spaces in between, where X is the total number of sequences listed in FEIS.\n\n-----Sample Input-----\n3 2\n\n-----Sample Output-----\n2 1 \n\nThere are 12 sequences listed in FEIS: (1),(1,1),(1,2),(1,3),(2),(2,1),(2,2),(2,3),(3),(3,1),(3,2),(3,3).\nThe (12/2 = 6)-th lexicographically smallest one among them is (2,1).\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nWrite a function to find the kth smallest element in a given BST.\n\nNote: \n1 \u2264 k \u2264 BST's total elements.\n\nExample 1:\n\n\nInput: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n\u00a0  2\nOutput: 1\n\nExample 2:\n\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\nOutput: 3\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:",
    "19": "Python 3\n\"\"\"\nGiven a binary search tree, write a function kthSmallest to find the kth smallest element in it.\n\nNote: \nYou may assume k is always valid, 1 \u2264 k \u2264 BST's total elements.\n\nExample 1:\n\n\nInput: root = [3,1,4,null,2], k = 1\n   3\n  / \\\n 1   4\n  \\\n\u00a0  2\nOutput: 1\n\nExample 2:\n\n\nInput: root = [5,3,6,2,4,null,null,1], k = 3\n       5\n      / \\\n     3   6\n    / \\\n   2   4\n  /\n 1\nOutput: 3\n\n\nFollow up:\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:"
}