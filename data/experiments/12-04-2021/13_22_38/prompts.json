{
    "0": "Python 3\n\"\"\"\nYou are given a list of $n$ integers. You want to split the integers into two lists.\nYou want the largest integer in the first list $A$ to differ as little\nas possible from the smallest integer in the second list $B$.\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case consists of two lines. \n\nThe first line contains positive integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 length of the list. \n\nThe second line contains $n$ positive integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le 1000$), where $s_i$\u00a0\u2014 is the integer of the $i$-th element.\n\n\n-----Output-----\n\nFor each test case print one integer\u00a0\u2014 the minimum value of $|\\max(A) - \\min(B)|$\n\n-----Example-----\nInput\n5\n5\n3 1 2 6 4\n6\n2 1 3 2 4 3\n4\n7 9 3 1\n2\n1 1000\n3\n100 150 200\n\nOutput\n1\n0\n2\n999\n50\n\n\n\n-----Note-----\n\nThe first test case was explained in the statement. In the second test case, one of the optimal splits is $A=[2, 1]$, $B=[3, 2, 4, 3]$, so the answer is $|2-2|=0$.\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThere are $n$ athletes in front of you. Athletes are numbered from $1$ to $n$ from left to right. You know the strength of each athlete\u00a0\u2014 the athlete number $i$ has the strength $s_i$.\n\nYou want to split all athletes into two teams. Each team must have at least one athlete, and each athlete must be exactly in one team.\n\nYou want the strongest athlete from the first team to differ as little as possible from the weakest athlete from the second team. Formally, you want to split the athletes into two teams $A$ and $B$ so that the value $|\\max(A) - \\min(B)|$ is as small as possible, where $\\max(A)$ is the maximum strength of an athlete from team $A$, and $\\min(B)$ is the minimum strength of an athlete from team $B$.\n\nFor example, if $n=5$ and the strength of the athletes is $s=[3, 1, 2, 6, 4]$, then one of the possible split into teams is:   first team: $A = [1, 2, 4]$,  second team: $B = [3, 6]$. \n\nIn this case, the value $|\\max(A) - \\min(B)|$ will be equal to $|4-3|=1$. This example illustrates one of the ways of optimal split into two teams.\n\nPrint the minimum value $|\\max(A) - \\min(B)|$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nEach test case consists of two lines. \n\nThe first line contains positive integer $n$ ($2 \\le n \\le 50$)\u00a0\u2014 number of athletes. \n\nThe second line contains $n$ positive integers $s_1, s_2, \\ldots, s_n$ ($1 \\le s_i \\le 1000$), where $s_i$\u00a0\u2014 is the strength of the $i$-th athlete. Please note that $s$ values may not be distinct.\n\n\n-----Output-----\n\nFor each test case print one integer\u00a0\u2014 the minimum value of $|\\max(A) - \\min(B)|$ with the optimal split of all athletes into two teams. Each of the athletes must be a member of exactly one of the two teams.\n\n\n-----Example-----\nInput\n5\n5\n3 1 2 6 4\n6\n2 1 3 2 4 3\n4\n7 9 3 1\n2\n1 1000\n3\n100 150 200\n\nOutput\n1\n0\n2\n999\n50\n\n\n\n-----Note-----\n\nThe first test case was explained in the statement. In the second test case, one of the optimal splits is $A=[2, 1]$, $B=[3, 2, 4, 3]$, so the answer is $|2-2|=0$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nWrite a function encode that takes in a string str and replaces all the letters with their respective positions in the English alphabet. String are case sensitive.\n\nExamples:\nInput:\nencode('abc')\nOutput:\n'123'\nExplanation:\na is 1st in English alpabet, b is 2nd and c is 3rd.\n\nInput:\nencode('codewars')\nOutput:\n'315452311819'\n\nInput:\nencode('abc-#@5')\nOutput:\n'123-#@5'\n\"\"\"\ndef encode(string):",
    "3": "Python 3\n\"\"\"\nThis is a follow up from my kata The old switcheroo\n\nWrite\n```python\ndef encode(str)\n```\nthat takes in a string ```str``` and replaces all the letters with their respective positions in the English alphabet.\n\n```python\nencode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd\nencode('codewars') == '315452311819'\nencode('abc-#@5') == '123-#@5'\n```\nString are case sensitive.\n\"\"\"\ndef encode(string):",
    "4": "Python 3\n\"\"\"\n# Task\n Consider the following algorithm for constructing strings S(1) .. S(26):\n```\nS(1) = \"a\";\nFor i in [2, 3, ..., 26]:\nS(i) = S(i - 1) + character(i) + S(i - 1).```\n\nYour task is to find the `k`th symbol (indexing from 1) in the string S(26).\n\n# Input / Output\n\n\n - `[input]` integer `k`\n\n  1 \u2264 k < 2^(26)\n\n\n - `[output]` a string(char in C#)\n\n  the `k`th symbol of S(26)\n\"\"\"\ndef abacaba(k):",
    "5": "Python 3\n\"\"\"\n# Task\n Consider the following algorithm for constructing 26 strings S(1) .. S(26):\n```\nS(1) = \"a\";\nFor i in [2, 3, ..., 26]:\nS(i) = S(i - 1) + character(i) + S(i - 1).```\n\n For example:\n```\nS(1) = \"a\"\nS(2) = S(1) + \"b\" + S(1) = \"a\" + \"b\" + \"a\" = \"aba\"\nS(3) = S(2) + \"c\" + S(2) = \"aba\" + \"c\" +\"aba\" = \"abacaba\"\n...\nS(26) = S(25) + \"z\" + S(25)```\nFinally, we got a long string S(26). Your task is to find the `k`th symbol (indexing from 1) in the string S(26). All strings consist of lowercase letters only.\n\n# Input / Output\n\n\n - `[input]` integer `k`\n\n  1 \u2264 k < 2^(26)\n\n\n - `[output]` a string(char in C#)\n\n  the `k`th symbol of S(26)\n\"\"\"\ndef abacaba(k):",
    "6": "Python 3\n\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n# Example\n\n For `cell = \"a1\"`, the output should be `2`.\n\n For `cell = \"c2\"`, the output should be `6`.\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 \u00d7 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"\ndef chess_knight(cell):",
    "7": "Python 3\n\"\"\"\n# Task\n Given a position of a knight on the standard chessboard, find the number of different moves the knight can perform.\n\n The knight can move to a square that is two squares horizontally and one square vertically, or two squares vertically and one square horizontally away from it. The complete move therefore looks like the letter L. Check out the image below to see all valid moves for a knight piece that is placed on one of the central squares.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/knight.jpg?_tm=1473533979951)\n\n# Example\n\n For `cell = \"a1\"`, the output should be `2`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/ex_1.jpg?_tm=1473533980197)\n\n For `cell = \"c2\"`, the output should be `6`.\n\n ![](https://codefightsuserpics.s3.amazonaws.com/tasks/chessKnight/img/ex_2.jpg?_tm=1473533980368)\n\n# Input/Output\n\n\n - `[input]` string `cell`\n\n    String consisting of letter+number - coordinates of the knight on an 8 \u00d7 8 chessboard in chess notation.\n\n\n - `[output]` an integer\n\"\"\"\ndef chess_knight(cell):",
    "8": "Python 3\n\"\"\"\nCreate a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out.\n\nExamples:\n\nfilter_list([1,2,'a','b']) == [1,2]\nfilter_list([1,'a','b',0,15]) == [1,0,15]\nfilter_list([1,2,'aasf','1','123',123]) == [1,2,123]\n\"\"\"\ndef filter_list(l):",
    "9": "Python 3\n\"\"\"\nIn this kata you will create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out.\n\n### Example\n\n```python\nfilter_list([1,2,'a','b']) == [1,2]\nfilter_list([1,'a','b',0,15]) == [1,0,15]\nfilter_list([1,2,'aasf','1','123',123]) == [1,2,123]\n```\n\"\"\"\ndef filter_list(l):",
    "10": "Python 3\n\"\"\"\nGiven a name, turn that name into a perfect square matrix. You will need to add periods to the end of the name if necessary to turn it into a matrix. If the name has a length of 0, return \"name must be at least one letter\"\n\nExamples:\nInput\n\"Bill\"\nOutput:\n[ [\"B\", \"i\"],\n  [\"l\", \"l\"] ]\n\nInput:\n\"Frank\"\nOutput:\n[ [\"F\", \"r\", \"a\"],\n  [\"n\", \"k\", \".\"],\n  [\".\", \".\", \".\"] ]\n\"\"\"\ndef matrixfy(st):",
    "11": "Python 3\n\"\"\"\nGiven a name, turn that name into a perfect square matrix (nested array with the amount of arrays equivalent to the length of each array). \n\nYou will need to add periods (`.`) to the end of the name if necessary, to turn it into a matrix. \n\nIf the name has a length of 0, return `\"name must be at least one letter\"`\n\n## Examples\n\n\"Bill\" ==> [ [\"B\", \"i\"],\n             [\"l\", \"l\"] ]\n\n\"Frank\" ==> [ [\"F\", \"r\", \"a\"],\n              [\"n\", \"k\", \".\"],\n              [\".\", \".\", \".\"] ]\n\"\"\"\ndef matrixfy(st):",
    "12": "Python 3\n\"\"\"\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are different)\u00a0\u2014 the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\u00a0\u2014 the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nFor example, let $p = [4, 5, 1, 3, 2, 6]$. In this case, the numbers $1, 3, 5, 6$ are beautiful and $2, 4$ are not. It is because:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 5$ we will have a permutation $[1, 3, 2]$ for $m = 3$;  if $l = 1$ and $r = 5$ we will have a permutation $[4, 5, 1, 3, 2]$ for $m = 5$;  if $l = 1$ and $r = 6$ we will have a permutation $[4, 5, 1, 3, 2, 6]$ for $m = 6$;  it is impossible to take some $l$ and $r$, such that $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$ for $m = 2$ and for $m = 4$. \n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.\n\n\n-----Input-----\n\nThe first line contains the only integer $t$ ($1 \\le t \\le 1000$) \u00a0\u2014 the number of test cases in the input. The next lines contain the description of test cases.\n\nThe first line of a test case contains a number $n$ ($1 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of the given permutation $p$. The next line contains $n$ integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$, all $p_i$ are different)\u00a0\u2014 the given permutation $p$.\n\nIt is guaranteed, that the sum of $n$ from all test cases in the input doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines\u00a0\u2014 the answers to test cases in the order they are given in the input. \n\nThe answer to a test case is the string of length $n$, there the $i$-th character is equal to $1$ if $i$ is a beautiful number and is equal to $0$ if $i$ is not a beautiful number.\n\n\n-----Example-----\nInput\n3\n6\n4 5 1 3 2 6\n5\n5 3 1 2 4\n4\n1 4 3 2\n\nOutput\n101011\n11111\n1001\n\n\n\n-----Note-----\n\nThe first test case is described in the problem statement.\n\nIn the second test case all numbers from $1$ to $5$ are beautiful:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 4$ we will have a permutation $[1, 2]$ for $m = 2$;  if $l = 2$ and $r = 4$ we will have a permutation $[3, 1, 2]$ for $m = 3$;  if $l = 2$ and $r = 5$ we will have a permutation $[3, 1, 2, 4]$ for $m = 4$;  if $l = 1$ and $r = 5$ we will have a permutation $[5, 3, 1, 2, 4]$ for $m = 5$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nFind the smallest positive integer M such that the bitwise XOR of M and M+1 is equal to given integer N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nGiven an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1.\n\n-----Input-----\nThe first line of input contain an integer T denoting the number of test cases. Each of the following T lines contains an integer N for that test case.\n\n-----Output-----\nFor each test case, output a single line containing the number M or -1 as described above.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 5000\n- 1 \u2264 N \u2264 230\n\n-----Example-----\nInput:\n1\n3\n\nOutput:\n1\n\n-----Explanation-----First Example :  M desired in the problem would be 1. As bitwise XOR of 1 and 2 is equal to 3.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYou are given $R$ rows and $C$ columns of a matrix. Calculate the total number in the matrix. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are the principal of the Cake school in chefland and today is your birthday. You want to treat each of the children with a small cupcake which is made by you. But there is a problem, You don't know how many students are present today.\nThe students have gathered of the morning assembly in $R$ rows and $C$ columns. Now you have to calculate how many cakes you have to make such that each child gets a cupcake. \n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $R$ and $C$. \n\n-----Output:-----\nFor each test case, output number of cupcakes you have to make.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000$\n- $2 \\leq R,C \\leq 10^6$\n\n-----Sample Input:-----\n1\n5 10\n\n-----Sample Output:-----\n50\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nWrite program to return a string representing the multiplication of given two  strings of complex numbers.\n\nExample 1:\n\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\n\n\nExample 2:\n\nInput: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\n\n\"\"\"\nclass Solution:\n    def complexNumberMultiply(self, a: str, b: str) -> str:",
    "19": "Python 3\n\"\"\"\nGiven two strings representing two complex numbers.\n\n\nYou need to return a string representing their multiplication. Note i2 = -1 according to the definition.\n\n\nExample 1:\n\nInput: \"1+1i\", \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n\n\n\nExample 2:\n\nInput: \"1+-1i\", \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n\n\n\nNote:\n\nThe input strings will not have extra blank.\nThe input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.\n\"\"\"\nclass Solution:\n    def complexNumberMultiply(self, a: str, b: str) -> str:"
}