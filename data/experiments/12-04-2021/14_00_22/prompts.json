{
    "0": "Python 3\n\"\"\"\nGiven two unordered lists of Size N and N+1 find and return the additional element in the second list.\nInput : \nFirst line contains the value of N. Second line contains list of size N. Third line contains list of size N+1.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Elements \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nChef and his friends are playing the game AMONG US. They all have chosen their names as numbers. There are N people in Chef\u2019s group including him, and each swears that he is not the imposter. However, it turns out there were N+1 people in the game. Now all that Chef needs to know is the name of the imposter, which is a number. Also remember that numbers can be duplicate. Can you help out Chef in finding the imposter?\nInput : \nFirst line contains the value of N. Second line contains the N numbers that Chef\u2019s friends used as their names. Third line contains the N+1 numbers that people in the game have used as their names.\nOutput : \nPrint the extra number in new line.\nConstraints : \n1 \u2264 Numbers used as names \u2264 1,000\n1 \u2264 N \u2264 1,000,000\nSample Input : \n3\n4 2 5\n4 2 3 5\nSample Output : \n3\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nGiven a set of n numbers, divide them into subsets of sizes at most different by 1, such that difference in the sum of numbers in each subset is minimum.\n\n-----Input-----\nFirst line consists of an integer n which denotes the size of the set. Second line is the set.\n\n-----Output-----\nThe first line is the first subset.\nThe second line is the second subset.\n\n-----Constraints-----\nn can range from 2 to 99. The numbers may vary from 1 to 10^4.\n\n-----Example-----\nInput:\n7\n1 2 3 4 5 6 7\n\nOutput:\n1 2 4 7\n3 5 6\n\n-----Explanation-----\nThese 7 values must be separated into 2 sets of sizes 3 and 4.In this case, it is possible to form two sets (1,2,4,7) & (3,5,6) of equal size.The set containing the first value (i.e.) and the elements of the output sets have the same order as the input.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nHan Solo and Chewbacca start a space journey to planet Naboo on the Millennium Falcon. During the journey they land at a mysterious planet with high gravity where they find n diamond stones scattered all around. All the stones are of same weight. Each stone has a value according to its purity which can be detected by a special device. They choose to divide the stones fairly among themselves in two halves so that they carry almost equal weights such that the difference between the value of two halves is as small as possible. If n is even, then sizes of two halves must be strictly n/2 and if n is odd, then size of one half must be (n-1)/2 and size of the other half must be (n+1)/2. Given the value of stones, help them to divide the stones among themselves.\n\n-----Input-----\nFirst line consists of an integer n which denotes the number of stones.Second line consists of n space separated integers denoting the value of the stones.\n\n-----Output-----\nFirst line consists of the values of the stones assigned to Han Solo.Second line consists of the values of the stones assigned to Chewbacca.Assume that the set containing the first value in the input is always assigned to Han Solo.Also the values in the output sets must follow the same ordering as the input.\n\n-----Constraints-----\nThe number of stones can range from 2 to 99.The values of the stones vary from 1 to 10^4.\n\n-----Example-----\nInput:\n7\n1 2 3 4 5 6 7\n\nOutput:\n1 2 4 7\n3 5 6\n\n-----Explanation-----\nThese 7 values must be separated into 2 sets of sizes 3 and 4.In this case, it is possible to form two sets (1,2,4,7) & (3,5,6) of equal size.The set containing the first value (i.e.) 1 must be assigned to Han Solo and the elements of the output sets have the same order as the input.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given two strings s and t both of length n and both consisting of lowercase Latin letters.\n\nOne move is defined as taking contiguous substring of both s and t and reversing it.\n\nYou need to find if it is possible to make s and t after some sequence of moves\n\n-----Input-----\n\nThe first line of the input contains one integer q (1 \\le q \\le 10^4) \u2014 the number of test cases. Then q test cases follow.\n\nThe first line of the test case contains one integer n (1 \\le n \\le 2 \\cdot 10^5) \u2014 the length of s and t.\n\nThe second line of the test case contains one string s consisting of n lowercase Latin letters.\n\nThe third line of the test case contains one string t consisting of n lowercase Latin letters.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \\cdot 10^5 (\\sum n \\le 2 \\cdot 10^5).\n\n\n-----Output-----\n\nFor each test case, print the answer on it \u2014 \"YES\" (without quotes) if it is possible to make strings s and t equal after some (possibly, empty) sequence of moves and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n4\n4\nabcd\nabdc\n5\nababa\nbaaba\n4\nasdf\nasdg\n4\nabcd\nbadc\n\nOutput\nNO\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given two strings $s$ and $t$ both of length $n$ and both consisting of lowercase Latin letters.\n\nIn one move, you can choose any length $len$ from $1$ to $n$ and perform the following operation:   Choose any contiguous substring of the string $s$ of length $len$ and reverse it;  at the same time choose any contiguous substring of the string $t$ of length $len$ and reverse it as well. \n\nNote that during one move you reverse exactly one substring of the string $s$ and exactly one substring of the string $t$.\n\nAlso note that borders of substrings you reverse in $s$ and in $t$ can be different, the only restriction is that you reverse the substrings of equal length. For example, if $len=3$ and $n=5$, you can reverse $s[1 \\dots 3]$ and $t[3 \\dots 5]$, $s[2 \\dots 4]$ and $t[2 \\dots 4]$, but not $s[1 \\dots 3]$ and $t[1 \\dots 2]$.\n\nYour task is to say if it is possible to make strings $s$ and $t$ equal after some (possibly, empty) sequence of moves.\n\nYou have to answer $q$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of test cases. Then $q$ test cases follow.\n\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $s$ and $t$.\n\nThe second line of the test case contains one string $s$ consisting of $n$ lowercase Latin letters.\n\nThe third line of the test case contains one string $t$ consisting of $n$ lowercase Latin letters.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nFor each test case, print the answer on it \u2014 \"YES\" (without quotes) if it is possible to make strings $s$ and $t$ equal after some (possibly, empty) sequence of moves and \"NO\" otherwise.\n\n\n-----Example-----\nInput\n4\n4\nabcd\nabdc\n5\nababa\nbaaba\n4\nasdf\nasdg\n4\nabcd\nbadc\n\nOutput\nNO\nYES\nNO\nYES\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nConsider a sequence [a_1, a_2, ... , a_{n}]. \n\nLet's define its prefix product sequence as $[ a_{1} \\operatorname{mod} n,(a_{1} a_{2}) \\operatorname{mod} n, \\cdots,(a_{1} a_{2} \\cdots a_{n}) \\operatorname{mod} n ]$.\n\nNow given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1].\n\n\n-----Input-----\n\nThe only input line contains an integer n (1 \u2264 n \u2264 10^5).\n\n\n-----Output-----\n\nIn the first output line, print \"YES\" if such sequence exists, or print \"NO\" if no such sequence exists.\n\nIf any solution exists, you should output n more lines. i-th line contains only an integer a_{i}. The elements of the sequence should be different positive integers no larger than n.\n\nIf there are multiple solutions, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n7\n\nOutput\nYES\n1\n4\n3\n6\n5\n2\n7\n\nInput\n6\n\nOutput\nNO\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nConsider a sequence [a_1, a_2, ... , a_{n}]. Define its prefix product sequence $[ a_{1} \\operatorname{mod} n,(a_{1} a_{2}) \\operatorname{mod} n, \\cdots,(a_{1} a_{2} \\cdots a_{n}) \\operatorname{mod} n ]$.\n\nNow given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1].\n\n\n-----Input-----\n\nThe only input line contains an integer n (1 \u2264 n \u2264 10^5).\n\n\n-----Output-----\n\nIn the first output line, print \"YES\" if such sequence exists, or print \"NO\" if no such sequence exists.\n\nIf any solution exists, you should output n more lines. i-th line contains only an integer a_{i}. The elements of the sequence should be different positive integers no larger than n.\n\nIf there are multiple solutions, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n7\n\nOutput\nYES\n1\n4\n3\n6\n5\n2\n7\n\nInput\n6\n\nOutput\nNO\n\n\n\n-----Note-----\n\nFor the second sample, there are no valid sequences.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nAn element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. \n\nFor example:\nInput:\nsolve([1,21,4,7,5])\nOutput:\n[21,7,5]\nExplanation:\n21, 7 and 5 are greater than elements to their right. \n\nInput:\nsolve([5,4,3,2,1])\nOutput:\n[5,4,3,2,1]\n\n\"\"\"\ndef solve(arr):",
    "9": "Python 3\n\"\"\"\nAn element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example:\n```Haskell\nsolve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right. \nsolve([5,4,3,2,1]) = [5,4,3,2,1]\n\nNotice that the last element is always included.\n```\n\nMore examples in the test cases.\n\nGood luck!\n\"\"\"\ndef solve(arr):",
    "10": "Python 3\n\"\"\"\nWrite a function that solves an algebraic expression given as a string and returns a string with the calculated value given in scientific notation with 5 decimal digits. The expression can include only sums and products. The numbers in the expression are in standard notation.\n\nExamples:\nInput:\nstrexpression = \"5 * 4 + 6\"\nOutput:\nsum_prod(strexpression) = \"2.60000e+01\"\n\"\"\"\ndef sum_prod(strexpression):",
    "11": "Python 3\n\"\"\"\nWrite a function that solves an algebraic expression given as a string. \n\n* The expression can include only sums and products. \n\n* The numbers in the expression are in standard notation (NOT scientific).\n\n* In contrast, the function should return a string with the calculated value given in scientific notation with 5 decimal digits. \n\n# Example:\n```python\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression) = \"2.60000e+01\"\n```\n\"\"\"\ndef sum_prod(strexpression):",
    "12": "Python 3\n\"\"\"\n\n\nYou are given three angles of a triangle.Check whether these angles form a valid triangle or not. \n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nWrite a program to check whether a triangle is valid or not, when the three angles of the triangle are the inputs. A triangle is valid if the sum of all the three angles is equal to 180 degrees.\n\n-----Input-----\n\nThe first line contains an integer T, the total number of testcases. Then T lines follow, each line contains three angles  A, B and C, of the triangle separated by space. \n\n-----Output-----\nFor each test case, display 'YES' if the triangle is valid, and 'NO', if it is not, in a new line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 1000\n- 1 \u2264 A,B,C \u2264 180\n\n-----Example-----\nInput\n\n3 \n40 40 100\n45 45 90\n180 1 1\nOutput\n\nYES\nYES\nNO\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a sequence of n integers a_1, a_2, ..., a_{n}. \n\nDetermine a real number x such that the weakness of the sequence a_1 - x, a_2 - x, ..., a_{n} - x is as small as possible.\n\nThe weakness of a sequence is defined as the maximum value of the poorness over all segments of a sequence.\n\nThe poorness of a segment is defined as the absolute value of sum of the elements of segment.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 200 000), the length of a sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (|a_{i}| \u2264 10 000).\n\n\n-----Output-----\n\nOutput a real number denoting the minimum possible weakness of a_1 - x, a_2 - x, ..., a_{n} - x. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1.000000000000000\n\nInput\n4\n1 2 3 4\n\nOutput\n2.000000000000000\n\nInput\n10\n1 10 2 9 3 8 4 7 5 6\n\nOutput\n4.500000000000000\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given a sequence of n integers a_1, a_2, ..., a_{n}. \n\nDetermine a real number x such that the weakness of the sequence a_1 - x, a_2 - x, ..., a_{n} - x is as small as possible.\n\nThe weakness of a sequence is defined as the maximum value of the poorness over all segments (contiguous subsequences) of a sequence.\n\nThe poorness of a segment is defined as the absolute value of sum of the elements of segment.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 200 000), the length of a sequence.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (|a_{i}| \u2264 10 000).\n\n\n-----Output-----\n\nOutput a real number denoting the minimum possible weakness of a_1 - x, a_2 - x, ..., a_{n} - x. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1.000000000000000\n\nInput\n4\n1 2 3 4\n\nOutput\n2.000000000000000\n\nInput\n10\n1 10 2 9 3 8 4 7 5 6\n\nOutput\n4.500000000000000\n\n\n\n-----Note-----\n\nFor the first case, the optimal value of x is 2 so the sequence becomes  - 1, 0, 1 and the max poorness occurs at the segment \"-1\" or segment \"1\". The poorness value (answer) equals to 1 in this case. \n\nFor the second sample the optimal value of x is 2.5 so the sequence becomes  - 1.5,  - 0.5, 0.5, 1.5 and the max poorness occurs on segment \"-1.5 -0.5\" or \"0.5 1.5\". The poorness value (answer) equals to 2 in this case.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n# Task\n\nImplement a method to return how many riders are necessary to get the mail from one end to the other. Each rider travels never more than 100 miles.\n\nA rider may go missing and the rider's absence would be noticed at the next station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer. \n\nstations is a list of miles from one station to the next along the Pony Express route.\nstationX is the number of the station where the rider's absence was noticed.\n\n# Example\n\nInput:\nstations = [43, 23, 40, 13]\nstationX = 4\nOutput:\n3\nExplanation:\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 takes mail bags from Rider 1 at station S3\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n\"\"\"\ndef riders(stations, station_x):",
    "17": "Python 3\n\"\"\"\n# A History Lesson\n\nThe Pony Express was a mail service operating in the US in 1859-60.\n\n\n\n\n\nIt reduced the time for messages to travel between the Atlantic and Pacific coasts to about 10 days, before it was made obsolete by the transcontinental telegraph.\n\n# How it worked\n\nThere were a number of *stations*, where:\n\n\n* The rider switched to a fresh horse and carried on, or\n\n* The mail bag was handed over to the next rider\n\n\n# Kata Task\n\n\n`stations` is a list/array of distances (miles) from one station to the next along the Pony Express route.\n\nImplement the `riders` method/function, to return how many riders are necessary to get the mail from one end to the other.\n\n##  Missing rider\n\nIn this version of the Kata a rider may go missing. In practice, this could be for a number of reasons - a lame horse, an accidental fall, foul play... \n\nAfter some time, the rider's absence would be noticed at the **next** station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer (or another substitute rider if necessary). \n\n`stationX` is the number (2..N) of the station where the rider's absence was noticed.\n\n# Notes\n\n* Each rider travels as far as he can, but never more than 100 miles.\n\n# Example\n\nGIven\n\n* `stations = [43, 23, 40, 13]`\n\n* `stationX = 4`\n\nSo\n\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 (at station S3) takes mail bags from Rider 1\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n**Answer:** \n3 riders\n\n\n\n\n*Good Luck.\nDM.*\n\n---\n\nSee also\n* The Pony Express\n* The Pony Express (missing rider)\n\"\"\"\ndef riders(stations, station_x):",
    "18": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.\n\nLet's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.\n\nFor each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in the array. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print $n$ integers, where the $i$-th integer is equal to the $i$-amazing number of the array.\n\n\n-----Example-----\nInput\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\nOutput\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.\n\nLet's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.\n\nFor each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of each test case contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the number of elements in the array. The second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$) \u2014 the elements of the array. \n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $3 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case print $n$ integers, where the $i$-th integer is equal to the $i$-amazing number of the array.\n\n\n-----Example-----\nInput\n3\n5\n1 2 3 4 5\n5\n4 4 4 4 2\n6\n1 3 1 5 3 1\n\nOutput\n-1 -1 3 2 1 \n-1 4 4 4 2 \n-1 -1 1 1 1 1\n\"\"\"\ndef code():"
}