{
    "0": "Python 3\n\"\"\"\n You might be familiar with the binomial coefficient ${m \\choose k}$ defined as ${m \\choose k} = \\frac{m!}{k!(m-k)!}$, where $m$ and $k$ are non-negative integers and $k \\leq m$. Let $T_2(n)$ be the number of odd binomial coefficients such that $0 \\le k \\le m < n$. The most useful mathematical inequality you will learn during this competition is\\[ 0.812556 n^{\\log _2 3} \\le T_2(n) \\le n^{\\log _2 3}. \\] Emma doesn t like such imprecise inequalities and would like to calculate $T_2(n)$ exactly. Can you help her  \n-----Input----- The input contains one line with one integer $n, 1 \\leq n \\le 10^{11}$. -----Output----- Output one line with the value of $T_2(n)$. -----Examples----- Sample Input: 4 Sample Output: 9\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou might be familiar with the binomial coefficient ${m \\choose k}$ defined as ${m \\choose k} = \\frac{m!}{k!(m-k)!}$, where $m$ and $k$ are non-negative integers and $k \\leq m$. Let $T_2(n)$ be the number of odd binomial coefficients such that $0 \\le k \\le m < n$. The most useful mathematical inequality you will learn during this competition is\\[ 0.812556 n^{\\log _2 3} \\le T_2(n) \\le n^{\\log _2 3}. \\]\n\nEmma doesn\u2019t like such imprecise inequalities and would like to calculate $T_2(n)$ exactly. Can you help her?\n\n-----Input-----\nThe input contains one line with one integer $n, 1 \\leq n \\le 10^{11}$.\n\n-----Output-----\nOutput one line with the value of $T_2(n)$.\n\n-----Examples-----\nSample Input:\n4\nSample Output:\n9\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given $n$, $e$ and $d$. Find the minimum number of rubles Andrew can get after buying dollar and euro bills.\n-----Input----- The first line of the input contains one integer $n$ ($1 \\leq n \\leq 10^8$)\u00a0\u2014 the initial sum in rubles Andrew has.  The second line of the input contains one integer $d$ ($30 \\leq d \\leq 100$)\u00a0\u2014 the price of one dollar in rubles.  The third line of the input contains integer $e$ ($30 \\leq e \\leq 100$)\u00a0\u2014 the price of one euro in rubles. -----Output----- Output one integer\u00a0\u2014 the minimum number of rubles Andrew can have after buying dollar and euro bills optimally. -----Examples----- Input 100 60 70 Output 40 Input 410 55 70 Output 5 Input 600 60 70 Output 0 -----Note----- In the first example, we can buy just $1$ dollar because there is no $1$ euro bill. In the second example, optimal exchange is to buy $5$ euro and $1$ dollar. In the third example, optimal exchange is to buy $10$ dollars in one bill.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nAndrew was very excited to participate in Olympiad of Metropolises. Days flew by quickly, and Andrew is already at the airport, ready to go home. He has $n$ rubles left, and would like to exchange them to euro and dollar bills. Andrew can mix dollar bills and euro bills in whatever way he wants. The price of one dollar is $d$ rubles, and one euro costs $e$ rubles.\n\nRecall that there exist the following dollar bills: $1$, $2$, $5$, $10$, $20$, $50$, $100$, and the following euro bills\u00a0\u2014 $5$, $10$, $20$, $50$, $100$, $200$ (note that, in this problem we do not consider the $500$ euro bill, it is hard to find such bills in the currency exchange points). Andrew can buy any combination of bills, and his goal is to minimize the total number of rubles he will have after the exchange.\n\nHelp him\u00a0\u2014 write a program that given integers $n$, $e$ and $d$, finds the minimum number of rubles Andrew can get after buying dollar and euro bills.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\leq n \\leq 10^8$)\u00a0\u2014 the initial sum in rubles Andrew has. \n\nThe second line of the input contains one integer $d$ ($30 \\leq d \\leq 100$)\u00a0\u2014 the price of one dollar in rubles. \n\nThe third line of the input contains integer $e$ ($30 \\leq e \\leq 100$)\u00a0\u2014 the price of one euro in rubles.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the minimum number of rubles Andrew can have after buying dollar and euro bills optimally.\n\n\n-----Examples-----\nInput\n100\n60\n70\n\nOutput\n40\n\nInput\n410\n55\n70\n\nOutput\n5\n\nInput\n600\n60\n70\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, we can buy just $1$ dollar because there is no $1$ euro bill.\n\nIn the second example, optimal exchange is to buy $5$ euro and $1$ dollar.\n\nIn the third example, optimal exchange is to buy $10$ dollars in one bill.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Help the host to make the show as profitable as possible. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$) \u2014 the number of candidates and an upper bound for initial aggressiveness levels. The second line contains $n$ integers $l_i$ ($1 \\le l_i \\le m$) \u2014 initial aggressiveness levels of all candidates. The third line contains $n$ integers $s_i$ ($0 \\le s_i \\le 5000$) \u2014 the costs (in roubles) to recruit each of the candidates. The fourth line contains $n + m$ integers $c_i$ ($|c_i| \\le 5000$) \u2014 profitability for each aggrressiveness level. It is guaranteed that aggressiveness level of any participant can never exceed $n + m$ under given conditions. -----Output----- Print a single integer\u00a0\u2014 the largest profit of the show. -----Examples----- Input 5 4 4 3 1 2 1 1 2 1 2 1 1 2 3 4 5 6 7 8 9 Output 6 Input 2 2 1 2 0 0 2 1 -100 -100 Output 2 Input 5 4 4 3 2 1 1 0 2 6 7 4 12 12 12 6 -3 -5 3 10 -4 Output 62 -----Note----- In the first sample case it is optimal to recruit candidates $1, 2, 3, 5$. Then the show will pay $1 + 2 + 1 + 1 = 5$ roubles for recruitment. The events on stage will proceed as follows:   a participant with aggressiveness level $4$ enters the stage, the show makes $4$ roubles;  a participant with aggressiveness level $3$ enters the stage, the show makes $3$ roubles;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ rouble;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ roubles, a fight starts. One of the participants leaves, the other one increases his aggressiveness level to $2$. The show will make extra $2$ roubles for this.  Total revenue of the show will be $4 + 3 + 1 + 1 + 2=11$ roubles, and the profit is $11 - 5 = 6$ roubles. In the second sample case it is impossible to recruit both candidates since the second one has higher aggressiveness, thus it is better to recruit the candidate $1$.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nA popular reality show is recruiting a new cast for the third season! $n$ candidates numbered from $1$ to $n$ have been interviewed. The candidate $i$ has aggressiveness level $l_i$, and recruiting this candidate will cost the show $s_i$ roubles.\n\nThe show host reviewes applications of all candidates from $i=1$ to $i=n$ by increasing of their indices, and for each of them she decides whether to recruit this candidate or not. If aggressiveness level of the candidate $i$ is strictly higher than that of any already accepted candidates, then the candidate $i$ will definitely be rejected. Otherwise the host may accept or reject this candidate at her own discretion. The host wants to choose the cast so that to maximize the total profit.\n\nThe show makes revenue as follows. For each aggressiveness level $v$ a corresponding profitability value $c_v$ is specified, which can be positive as well as negative. All recruited participants enter the stage one by one by increasing of their indices. When the participant $i$ enters the stage, events proceed as follows:\n\n  The show makes $c_{l_i}$ roubles, where $l_i$ is initial aggressiveness level of the participant $i$.  If there are two participants with the same aggressiveness level on stage, they immediately start a fight. The outcome of this is:\n\n  the defeated participant is hospitalized and leaves the show.  aggressiveness level of the victorious participant is increased by one, and the show makes $c_t$ roubles, where $t$ is the new aggressiveness level. \n\n The fights continue until all participants on stage have distinct aggressiveness levels. \n\nIt is allowed to select an empty set of participants (to choose neither of the candidates).\n\nThe host wants to recruit the cast so that the total profit is maximized. The profit is calculated as the total revenue from the events on stage, less the total expenses to recruit all accepted participants (that is, their total $s_i$). Help the host to make the show as profitable as possible.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$) \u2014 the number of candidates and an upper bound for initial aggressiveness levels.\n\nThe second line contains $n$ integers $l_i$ ($1 \\le l_i \\le m$) \u2014 initial aggressiveness levels of all candidates.\n\nThe third line contains $n$ integers $s_i$ ($0 \\le s_i \\le 5000$) \u2014 the costs (in roubles) to recruit each of the candidates.\n\nThe fourth line contains $n + m$ integers $c_i$ ($|c_i| \\le 5000$) \u2014 profitability for each aggrressiveness level.\n\nIt is guaranteed that aggressiveness level of any participant can never exceed $n + m$ under given conditions.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the largest profit of the show.\n\n\n-----Examples-----\nInput\n5 4\n4 3 1 2 1\n1 2 1 2 1\n1 2 3 4 5 6 7 8 9\n\nOutput\n6\n\nInput\n2 2\n1 2\n0 0\n2 1 -100 -100\n\nOutput\n2\n\nInput\n5 4\n4 3 2 1 1\n0 2 6 7 4\n12 12 12 6 -3 -5 3 10 -4\n\nOutput\n62\n\n\n\n-----Note-----\n\nIn the first sample case it is optimal to recruit candidates $1, 2, 3, 5$. Then the show will pay $1 + 2 + 1 + 1 = 5$ roubles for recruitment. The events on stage will proceed as follows:\n\n  a participant with aggressiveness level $4$ enters the stage, the show makes $4$ roubles;  a participant with aggressiveness level $3$ enters the stage, the show makes $3$ roubles;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ rouble;  a participant with aggressiveness level $1$ enters the stage, the show makes $1$ roubles, a fight starts. One of the participants leaves, the other one increases his aggressiveness level to $2$. The show will make extra $2$ roubles for this. \n\nTotal revenue of the show will be $4 + 3 + 1 + 1 + 2=11$ roubles, and the profit is $11 - 5 = 6$ roubles.\n\nIn the second sample case it is impossible to recruit both candidates since the second one has higher aggressiveness, thus it is better to recruit the candidate $1$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given a tree with N vertices numbered 1 to N, and N-1 edges numbered 1 to N-1. Edge i connects Vertex a_i and b_i bidirectionally and has a length of 1. Snuke will paint each vertex white or black. The niceness of a way of painting the graph is \\max(X, Y), where X is the maximum among the distances between white vertices, and Y is the maximum among the distances between black vertices. Here, if there is no vertex of one color, we consider the maximum among the distances between vertices of that color to be 0. There are 2^N ways of painting the graph. Compute the sum of the nicenesses of all those ways, modulo (10^{9}+7). -----Constraints-----  - 2 \\leq N \\leq 2 \\times 10^{5}  - 1 \\leq a_i, b_i \\leq N  - The given graph is a tree.\n-----Input----- Input is given from Standard Input in the following format: N a_1 b_1 \\vdots a_{N-1} b_{N-1} -----Output----- Print the sum of the nicenesses of the ways of painting the graph, modulo (10^{9}+7). -----Sample Input----- 2 1 2 -----Sample Output----- 2  - If we paint Vertex 1 and 2 the same color, the niceness will be 1; if we paint them different colors, the niceness will be 0.  - The sum of those nicenesses is 2.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nGiven is a tree with N vertices numbered 1 to N, and N-1 edges numbered 1 to N-1.\nEdge i connects Vertex a_i and b_i bidirectionally and has a length of 1.\nSnuke will paint each vertex white or black.\nThe niceness of a way of painting the graph is \\max(X, Y), where X is the maximum among the distances between white vertices, and Y is the maximum among the distances between black vertices.\nHere, if there is no vertex of one color, we consider the maximum among the distances between vertices of that color to be 0.\nThere are 2^N ways of painting the graph. Compute the sum of the nicenesses of all those ways, modulo (10^{9}+7).\n\n-----Constraints-----\n - 2 \\leq N \\leq 2 \\times 10^{5}\n - 1 \\leq a_i, b_i \\leq N\n - The given graph is a tree.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 b_1\n\\vdots\na_{N-1} b_{N-1}\n\n-----Output-----\nPrint the sum of the nicenesses of the ways of painting the graph, modulo (10^{9}+7).\n\n-----Sample Input-----\n2\n1 2\n\n-----Sample Output-----\n2\n\n - If we paint Vertex 1 and 2 the same color, the niceness will be 1; if we paint them different colors, the niceness will be 0.\n - The sum of those nicenesses is 2.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Arpa loves overnight parties. In the middle of one of these parties Mehrdad suddenly appeared. He saw n pairs of friends sitting around a table. i-th pair consisted of a boy, sitting on the a_{i}-th chair, and his girlfriend, sitting on the b_{i}-th chair. The chairs were numbered 1 through 2n in clockwise direction. There was exactly one person sitting on each chair. There were two types of food: Kooft and Zahre-mar. Now Mehrdad wonders, was there any way to serve food for the guests such that: Each person had exactly one type of food, No boy had the same type of food as his girlfriend, Among any three guests sitting on consecutive chairs, there was two of them who had different type of food. Note that chairs 2n and 1 are considered consecutive. Find the answer for the Mehrdad question. If it was possible, find some arrangement of food types that satisfies the conditions.\n-----Input----- The first line contains an integer n (1  \u2264  n  \u2264  10^5)\u00a0\u2014 the number of pairs of guests. The i-th of the next n lines contains a pair of integers a_{i} and b_{i} (1  \u2264 a_{i}, b_{i} \u2264  2n)\u00a0\u2014 the number of chair on which the boy in the i-th pair was sitting and the number of chair on which his girlfriend was sitting. It's guaranteed that there was exactly one person sitting on each chair.  -----Output----- If there is no solution, print -1. Otherwise print n lines, the i-th of them should contain two integers which represent the type of food for the i-th pair. The first integer in the line is the type of food the boy had, and the second integer is the type of food the girl had. If someone had Kooft, print 1, otherwise print 2. If there are multiple solutions, print any of them. -----Example----- Input 3 1 4 2 5 3 6 Output 1 2 2 1 1 2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nNote that girls in Arpa\u2019s land are really attractive.\n\nArpa loves overnight parties. In the middle of one of these parties Mehrdad suddenly appeared. He saw n pairs of friends sitting around a table. i-th pair consisted of a boy, sitting on the a_{i}-th chair, and his girlfriend, sitting on the b_{i}-th chair. The chairs were numbered 1 through 2n in clockwise direction. There was exactly one person sitting on each chair.\n\n [Image] \n\nThere were two types of food: Kooft and Zahre-mar. Now Mehrdad wonders, was there any way to serve food for the guests such that:   Each person had exactly one type of food,  No boy had the same type of food as his girlfriend,  Among any three guests sitting on consecutive chairs, there was two of them who had different type of food. Note that chairs 2n and 1 are considered consecutive. \n\nFind the answer for the Mehrdad question. If it was possible, find some arrangement of food types that satisfies the conditions.\n\n\n-----Input-----\n\nThe first line contains an integer n (1  \u2264  n  \u2264  10^5)\u00a0\u2014 the number of pairs of guests.\n\nThe i-th of the next n lines contains a pair of integers a_{i} and b_{i} (1  \u2264 a_{i}, b_{i} \u2264  2n)\u00a0\u2014 the number of chair on which the boy in the i-th pair was sitting and the number of chair on which his girlfriend was sitting. It's guaranteed that there was exactly one person sitting on each chair. \n\n\n-----Output-----\n\nIf there is no solution, print -1.\n\nOtherwise print n lines, the i-th of them should contain two integers which represent the type of food for the i-th pair. The first integer in the line is the type of food the boy had, and the second integer is the type of food the girl had. If someone had Kooft, print 1, otherwise print 2.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Example-----\nInput\n3\n1 4\n2 5\n3 6\n\nOutput\n1 2\n2 1\n1 2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Everyone wants to live as long a life as possible. As time progresses, technology progresses. Various anti-aging pills get introduced to the market at various times which allow a person to age more slowly than normal. In particular, an $x$-$y$ pill, when taken regularly, ages your body only $y$ seconds over the course of $x$ seconds. So, if you took a $100$-$87$ pill regularly, then over the next $100$ seconds, your body would only age $87$ seconds. You can only take one of these pills at a time (or none at all). The only downside to using one of these pills is that due to the change in regimen, if you switch to a pill, it automatically ages you $c$ seconds. The value of $c$ is the same for all pills. Any time you switch to an $x$-$y$ pill, you can take it for any number of seconds, but you can only switch to a pill at or after the time it first becomes available on the market. For the purposes of this problem assume that your life starts at time $t = 0$ seconds and that without the aid of any pills, you would live to be $n$ seconds old. Given information about each different pill introduced into the market (the time it is introduced, in seconds, and its corresponding $x$ and $y$ values as previously described) and $c$, the number of seconds you automatically age when switching pills (or switching to a pill from no pill at all), determine the longest you can live, over all possible schedule of pills you could take.\n-----Input----- The first line of input consists of three positive integers, $n$ ($n \\le 3\\cdot 10^9$), representing the number of seconds you would live without taking any pills, $p$ ($p \\le 10^5$), the number of pills that become available on the market, and $c$ ($c \\le 10^5$), the time in seconds you age as soon as you switch to a different pill. $p$ lines follow with the $i^{th}$ line containing three space separated integers: $t_{i}$ $(1 \\le t_{i} \\le 10^{12})$, $x_{i}$ and $y_{i}$ $(1 \\le y_{i} < x_{i} \\le 10^{4}$), representing the time the $i^{th}$ pill gets introduced to the market, and the corresponding $x$ and $y$ values for it. In addition, for all $i$, $1 \\le i \\le n-1$, it is guaranteed that $t_{i+1} - t_{i} > c$. -----Output----- Output a single real number, representing the maximum number of seconds that you could live, if you take the appropriate pills. Your answer should be correct within a relative or absolute error of $10^{-6}$. -----Examples----- Sample Input: 100 3 10 15 99 98 40 3 2 90 10 9 Sample Output: 115.000000000\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nEveryone wants to live as long a life as possible. As time progresses, technology progresses. Various anti-aging pills get introduced to the market at various times which allow a person to age more slowly than normal. In particular, an $x$-$y$ pill, when taken regularly, ages your body only $y$ seconds over the course of $x$ seconds. So, if you took a $100$-$87$ pill regularly, then over the next $100$ seconds, your body would only age $87$ seconds. You can only take one of these pills at a time (or none at all). The only downside to using one of these pills is that due to the change in regimen, if you switch to a pill, it automatically ages you $c$ seconds. The value of $c$ is the same for all pills.\n\nAny time you switch to an $x$-$y$ pill, you can take it for any number of seconds, but you can only switch to a pill at or after the time it first becomes available on the market. For the purposes of this problem assume that your life starts at time $t = 0$ seconds and that without the aid of any pills, you would live to be $n$ seconds old.\n\nGiven information about each different pill introduced into the market (the time it is introduced, in seconds, and its corresponding $x$ and $y$ values as previously described) and $c$, the number of seconds you automatically age when switching pills (or switching to a pill from no pill at all), determine the longest you can live, over all possible schedule of pills you could take.\n\n-----Input-----\nThe first line of input consists of three positive integers, $n$ ($n \\le 3\\cdot 10^9$), representing the number of seconds you would live without taking any pills, $p$ ($p \\le 10^5$), the number of pills that become available on the market, and $c$ ($c \\le 10^5$), the time in seconds you age as soon as you switch to a different pill. $p$ lines follow with the $i^{th}$ line containing three space separated integers: $t_{i}$ $(1 \\le t_{i} \\le 10^{12})$, $x_{i}$ and $y_{i}$ $(1 \\le y_{i} < x_{i} \\le 10^{4}$), representing the time the $i^{th}$ pill gets introduced to the market, and the corresponding $x$ and $y$ values for it. In addition, for all $i$, $1 \\le i \\le n-1$, it is guaranteed that $t_{i+1} - t_{i} > c$.\n\n-----Output-----\nOutput a single real number, representing the maximum number of seconds that you could live, if you take the appropriate pills. Your answer should be correct within a relative or absolute error of $10^{-6}$.\n\n-----Examples-----\nSample Input:\n100 3 10\n15 99 98\n40 3 2\n90 10 9\nSample Output:\n115.000000000\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given two integers n and m. You have to construct an m-free square matrix of size n n such that the number of 1's in this matrix is maximum possible. Print the maximum possible number of 1's in such matrix. You don't have to solve this problem. Instead, you have to construct a few tests for it. You will be given t numbers x_1, x_2, ..., x_{t}. For every $i \\in [ 1, t ]$, find two integers n_{i} and m_{i} (n_{i} m_{i}) such that the answer for the aforementioned problem is exactly x_{i} if we set n = n_{i} and m = m_{i}.\n-----Input----- The first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of tests you have to construct. Then t lines follow, i-th line containing one integer x_{i} (0 \u2264 x_{i} \u2264 10^9). Note that in hacks you have to set t = 1. -----Output----- For each test you have to construct, output two positive numbers n_{i} and m_{i} (1 \u2264 m_{i} \u2264 n_{i} \u2264 10^9) such that the maximum number of 1's in a m_{i}-free n_{i} \u00d7 n_{i} matrix is exactly x_{i}. If there are multiple solutions, you may output any of them; and if this is impossible to construct a test, output a single integer  - 1.  -----Example----- Input 3 21 0 1 Output 5 2 1 1 -1\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLet's denote a m-free matrix as a binary (that is, consisting of only 1's and 0's) matrix such that every square submatrix of size m \u00d7 m of this matrix contains at least one zero. \n\nConsider the following problem:\n\nYou are given two integers n and m. You have to construct an m-free square matrix of size n \u00d7 n such that the number of 1's in this matrix is maximum possible. Print the maximum possible number of 1's in such matrix.\n\nYou don't have to solve this problem. Instead, you have to construct a few tests for it.\n\nYou will be given t numbers x_1, x_2, ..., x_{t}. For every $i \\in [ 1, t ]$, find two integers n_{i} and m_{i} (n_{i} \u2265 m_{i}) such that the answer for the aforementioned problem is exactly x_{i} if we set n = n_{i} and m = m_{i}.\n\n\n-----Input-----\n\nThe first line contains one integer t (1 \u2264 t \u2264 100) \u2014 the number of tests you have to construct.\n\nThen t lines follow, i-th line containing one integer x_{i} (0 \u2264 x_{i} \u2264 10^9).\n\nNote that in hacks you have to set t = 1.\n\n\n-----Output-----\n\nFor each test you have to construct, output two positive numbers n_{i} and m_{i} (1 \u2264 m_{i} \u2264 n_{i} \u2264 10^9) such that the maximum number of 1's in a m_{i}-free n_{i} \u00d7 n_{i} matrix is exactly x_{i}. If there are multiple solutions, you may output any of them; and if this is impossible to construct a test, output a single integer  - 1. \n\n\n-----Example-----\nInput\n3\n21\n0\n1\n\nOutput\n5 2\n1 1\n-1\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n The new camp by widely-known over the country Spring Programming Camp is going to start soon. Hence, all the team of friendly curators and teachers started composing the camp's schedule. After some continuous discussion, they came up with a schedule $s$, which can be represented as a binary string, in which the $i$-th symbol is '1' if students will write the contest in the $i$-th day and '0' if they will have a day off. At the last moment Gleb said that the camp will be the most productive if it runs with the schedule $t$ (which can be described in the same format as schedule $s$). Since the number of days in the current may be different from number of days in schedule $t$, Gleb required that the camp's schedule must be altered so that the number of occurrences of $t$ in it as a substring is maximum possible. At the same time, the number of contest days and days off shouldn't change, only their order may change. Could you rearrange the schedule in the best possible way  \n-----Input----- The first line contains string $s$ ($1 \\leqslant |s| \\leqslant 500\\,000$), denoting the current project of the camp's schedule. The second line contains string $t$ ($1 \\leqslant |t| \\leqslant 500\\,000$), denoting the optimal schedule according to Gleb. Strings $s$ and $t$ contain characters '0' and '1' only. -----Output----- In the only line print the schedule having the largest number of substrings equal to $t$. Printed schedule should consist of characters '0' and '1' only and the number of zeros should be equal to the number of zeros in $s$ and the number of ones should be equal to the number of ones in $s$. In case there multiple optimal schedules, print any of them. -----Examples----- Input 101101 110 Output 110110 Input 10010110 100011 Output 01100011 Input 10 11100 Output 01 -----Note----- In the first example there are two occurrences, one starting from first position and one starting from fourth position. In the second example there is only one occurrence, which starts from third position. Note, that the answer is not unique. For example, if we move the first day (which is a day off) to the last position, the number of occurrences of $t$ wouldn't change. In the third example it's impossible to make even a single occurrence.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThe new camp by widely-known over the country Spring Programming Camp is going to start soon. Hence, all the team of friendly curators and teachers started composing the camp's schedule. After some continuous discussion, they came up with a schedule $s$, which can be represented as a binary string, in which the $i$-th symbol is '1' if students will write the contest in the $i$-th day and '0' if they will have a day off.\n\nAt the last moment Gleb said that the camp will be the most productive if it runs with the schedule $t$ (which can be described in the same format as schedule $s$). Since the number of days in the current may be different from number of days in schedule $t$, Gleb required that the camp's schedule must be altered so that the number of occurrences of $t$ in it as a substring is maximum possible. At the same time, the number of contest days and days off shouldn't change, only their order may change.\n\nCould you rearrange the schedule in the best possible way?\n\n\n-----Input-----\n\nThe first line contains string $s$ ($1 \\leqslant |s| \\leqslant 500\\,000$), denoting the current project of the camp's schedule.\n\nThe second line contains string $t$ ($1 \\leqslant |t| \\leqslant 500\\,000$), denoting the optimal schedule according to Gleb.\n\nStrings $s$ and $t$ contain characters '0' and '1' only.\n\n\n-----Output-----\n\nIn the only line print the schedule having the largest number of substrings equal to $t$. Printed schedule should consist of characters '0' and '1' only and the number of zeros should be equal to the number of zeros in $s$ and the number of ones should be equal to the number of ones in $s$.\n\nIn case there multiple optimal schedules, print any of them.\n\n\n-----Examples-----\nInput\n101101\n110\n\nOutput\n110110\nInput\n10010110\n100011\n\nOutput\n01100011\n\nInput\n10\n11100\n\nOutput\n01\n\n\n-----Note-----\n\nIn the first example there are two occurrences, one starting from first position and one starting from fourth position.\n\nIn the second example there is only one occurrence, which starts from third position. Note, that the answer is not unique. For example, if we move the first day (which is a day off) to the last position, the number of occurrences of $t$ wouldn't change.\n\nIn the third example it's impossible to make even a single occurrence.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n The players take turns making a move. The winner is the player that removes the last cuboid. \n-----Input----- The first line of input is a line containing either RUBEN or ALBERT, the name of the player who starts that particular round.  Then follows a line containing $N$, the number of cuboids that particular game starts with. $N$ lines follow, each describing a cuboid. A cuboid description consists of three numbers, $x$, $y$ and $z$, the size of that particular cuboid. -----Output----- Output the name of the player that wins the game (either RUBEN or ALBERT). -----Limits-----  - $1 \\le N \\le 100$  - $1 \\le x,y,z \\le 30$ -----Examples----- Sample Input 1: RUBEN 1 4 1 7 Sample Output 1: RUBEN Sample Input 2: ALBERT 2 4 4 4 2 2 2 Sample Output 2: RUBEN\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nRuben and Albert are what you can call abnormally smart. They are also both very fond of mathematically inspired games. Their only problem is that most games are too easy for them, and they end up beating everyone who dares challenge them. Because of that, they\u2019re now mostly playing against each other. To make things interesting, they had a professor design a new game for them.\n\nThis new game was interesting at first. Nowadays, however, Albert often complains that it is impossible for him to win a particular round. After long discussions, they\u2019ve now decided to take this a step further, and actually figure out who\u2019d win if they both played optimally. They need you to write a computer program that does this for them.\n\nA state in the game consists of one or more $x\\times y\\times z$ cuboids. A (legal) move is choosing a cuboid, then a value for each of the three axes (basically choosing three planes), and then cutting the cuboid along these (thus removing a $1\\times y\\times z$, $x\\times 1\\times z$ and a $x\\times y\\times 1$, all overlapping, cuboid). In effect you\u2019ve created between $0$ and $8$ (inclusive) smaller cuboids. All three planes cut from the cuboid need to be on the cuboid (you can\u2019t cut away a hypothetical cuboid on the outside of the real one).\n\nAn example might be in order. You\u2019ve chosen a $3\\times 5\\times 4$ cuboid, and are about to cut it. You now need to choose the three planes. This means you need an $x$ between $1$ and $3$, a $y$ between $1$ and $5$ and a $z$ between $1$ and $4$. Say you choose $2$, $1$ and $3$, respectively. The first cut would alone cut the cuboid into two $1\\times 5\\times 4$ cuboids, the second into a single $3\\times 4\\times 4$ cuboid, while the third would alone cut the cuboid into a $3\\times 5\\times 1$ and a $3\\times 5\\times 2$ cuboid. Put together these cuts produces $4$ new smaller cuboids, of sizes $1\\times 4\\times 1$,$1\\times 4\\times 1$,$1\\times 4\\times 2$ and $1\\times 4\\times 2$. Note that cutting a cuboid with an axis of size $1$ would remove it altogether.\n\nThe players take turns making a move. The winner is the player that removes the last cuboid.\n\n-----Input-----\nThe first line of input is a line containing either RUBEN or ALBERT, the name of the player who starts that particular round.\n\n Then follows a line containing $N$, the number of cuboids that particular game starts with.\n\n$N$ lines follow, each describing a cuboid. A cuboid description consists of three numbers, $x$, $y$ and $z$, the size of that particular cuboid.\n\n-----Output-----\nOutput the name of the player that wins the game (either RUBEN or ALBERT).\n\n-----Limits-----\n - $1 \\le N \\le 100$\n - $1 \\le x,y,z \\le 30$\n\n-----Examples-----\nSample Input 1:\nRUBEN\n1\n4 1 7\nSample Output 1:\nRUBEN\n\nSample Input 2:\nALBERT\n2\n4 4 4\n2 2 2\nSample Output 2:\nRUBEN\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given a set of points, find the sum of the maximum distance between any two points. \n-----Input----- The first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) denoting the number of hacked computers. The second line contains n integers x_1, x_2, ..., x_{n} (1 \u2264 x_{i} \u2264 10^9) denoting the coordinates of hacked computers. It is guaranteed that all x_{i} are distinct. -----Output----- Print a single integer\u00a0\u2014 the required sum modulo 10^9 + 7. -----Examples----- Input 2 4 7 Output 3 Input 3 4 3 1 Output 9 -----Note----- There are three non-empty subsets in the first sample test:$\\{4 \\}$, $\\{7 \\}$ and $\\{4,7 \\}$. The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3. There are seven non-empty subsets in the second sample test. Among them only the following subsets increase the answer: $\\{4,3 \\}$, $\\{4,1 \\}$, $\\{3,1 \\}$, $\\{4,3,1 \\}$. In total the sum is (4 - 3) + (4 - 1) + (3 - 1) + (4 - 1) = 9.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLeha decided to move to a quiet town Vi\u010dkopolis, because he was tired by living in Bankopolis. Upon arrival he immediately began to expand his network of hacked computers. During the week Leha managed to get access to n computers throughout the town. Incidentally all the computers, which were hacked by Leha, lie on the same straight line, due to the reason that there is the only one straight street in Vi\u010dkopolis.\n\nLet's denote the coordinate system on this street. Besides let's number all the hacked computers with integers from 1 to n. So the i-th hacked computer is located at the point x_{i}. Moreover the coordinates of all computers are distinct. \n\nLeha is determined to have a little rest after a hard week. Therefore he is going to invite his friend Noora to a restaurant. However the girl agrees to go on a date with the only one condition: Leha have to solve a simple task.\n\nLeha should calculate a sum of F(a) for all a, where a is a non-empty subset of the set, that consists of all hacked computers. Formally, let's denote A the set of all integers from 1 to n. Noora asks the hacker to find value of the expression $\\sum_{a \\subseteq A, a \\neq \\varnothing} F(a)$. Here F(a) is calculated as the maximum among the distances between all pairs of computers from the set a. Formally, $F(a) = \\operatorname{max}_{i, j \\in a}|x_{i} - x_{j}|$. Since the required sum can be quite large Noora asks to find it modulo 10^9 + 7.\n\nThough, Leha is too tired. Consequently he is not able to solve this task. Help the hacker to attend a date.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) denoting the number of hacked computers.\n\nThe second line contains n integers x_1, x_2, ..., x_{n} (1 \u2264 x_{i} \u2264 10^9) denoting the coordinates of hacked computers. It is guaranteed that all x_{i} are distinct.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the required sum modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n2\n4 7\n\nOutput\n3\n\nInput\n3\n4 3 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nThere are three non-empty subsets in the first sample test:$\\{4 \\}$, $\\{7 \\}$ and $\\{4,7 \\}$. The first and the second subset increase the sum by 0 and the third subset increases the sum by 7 - 4 = 3. In total the answer is 0 + 0 + 3 = 3.\n\nThere are seven non-empty subsets in the second sample test. Among them only the following subsets increase the answer: $\\{4,3 \\}$, $\\{4,1 \\}$, $\\{3,1 \\}$, $\\{4,3,1 \\}$. In total the sum is (4 - 3) + (4 - 1) + (3 - 1) + (4 - 1) = 9.\n\"\"\"\ndef code():"
}