{
    "0": "Python 3\n\"\"\"\nWrite a function that gets a sequence and value and returns `true` if the variable exists in a multidimentional sequence.\n\nExample:\n```\nlocate(['a','b',['c','d',['e']]],'e'); // should return true\nlocate(['a','b',['c','d',['e']]],'a'); // should return true\nlocate(['a','b',['c','d',['e']]],'f'); // should return false\n```\n\"\"\"\ndef locate(seq, value):",
    "1": "Python 3\n\"\"\"\nWrite a function that gets a sequence and value and returns `true/false` depending on whether the variable exists in a multidimentional sequence.\n\nExample:\n```\nlocate(['a','b',['c','d',['e']]],'e'); // should return true\nlocate(['a','b',['c','d',['e']]],'a'); // should return true\nlocate(['a','b',['c','d',['e']]],'f'); // should return false\n```\n\"\"\"\ndef locate(seq, value):",
    "2": "Python 3\n\"\"\"\nYou are given N values with weight attached to each value. You need to find minimum number of continuous values to be chosen such that total weight is maximum possible.\n\n-----Input:-----\n- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.\n- The first line of each test case contains a single integer N.\n- The second line contains N space-separated integers A_1, A_2,......,A_N.\n\n-----Output:-----\nFor each test case, print a single line containing one integer.\n\n-----Sample Input:-----\n2\n4\n1 2 3 4\n5\n3 2 0 3 0\n\n-----Sample Output:-----\n4\n4\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nMaster Shifu is training Po to become The Dragon Warrior and as a final assignment he must obtain maximum deliciousness from dumplings. There are  $N$ plates of dumplings in front of him with deliciousness $A_1, A_2, \\ldots, A_N$, Po can choose any number of continuous plates of  dumplings. The total deliciousness is the sum of deliciousness of all the  chosen dumplings.\nWhat is the minimum number of plates he must choose so that total deliciousness is maximum possible?\nNote: Po must choose atleast one plate.\n\n-----Input:-----\n- The first line of the input contains a single integer $T$ denoting the number of test cases. The description of $T$ test cases follows.\n- The first line of each test case contains a single integer $N$.\n- The second line contains $N$ space-separated integers $A_1, A_2, \\ldots, A_N$.\n\n-----Output:-----\nFor each test case, print a single line containing one integer.\n\n-----Constraints-----\n- $1 \\le T \\le 10$\n- $1 \\le N \\le 2 \\cdot 10^5$\n- $0 \\le A_i \\le 10^9$\n\n-----Sample Input:-----\n2\n4\n1 2 3 4\n5\n3 2 0 3 0\n\n-----Sample Output:-----\n4\n4\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou have $n$ nodes in a graph. The $i$-th node starts with a value of $i$.\n\nThe node values will be revised $q$ times. For the $j$-th revision, node $v_i$ will have a value of $n+i$.\nThe node $v_i$ will have this value for the only the $j$-th revision,\nit will have value $i$ otherwise.\n\nSome nodes dislike with each other, if two nodes $a$ and $b$ dislike with each other and $a$ has a higher value than $b$ then $a$ conflicts with $b$.\nA dangerous triple is three nodes $a$, $b$, $c$ such that $a$ conflicts with $b$ and $b$ conflicts with $c$.\n\nYou need to find the number of dangerous triples before the revisions and after each revision.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $0\n\\le m \\le 100\\,000$) \u2014 the number of nodes and the number of nodes that dislike each other. Each of the following $m$ lines\ncontains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$)\ndenoting that node $a_i$ and $b_i$ dislike each other. \n\nThe next line contains an integer $q$ ($0 \\le q \\le 100\\,000$) \u2014 the number of \nrevisions. The $i$-th of the following $q$ lines contains a single\ninteger $v_i$ ($1 \\le v_i \\le n$) denoting that at the end of the $i$-th day,\nnode $v_i$ will have the highest value. \n\n\n-----Output-----\n\nOutput $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples on the $i$-th revision.\n\n\n-----Examples-----\nInput\n4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n\nOutput\n4\n3\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n\nOutput\n1\n1\n1\n1\n1\n1\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nKonrad is a Human Relations consultant working for VoltModder, a large electrical equipment producer. Today, he has been tasked with evaluating the level of happiness in the company.\n\nThere are $n$ people working for VoltModder, numbered from $1$ to $n$. Each employee earns a different amount of money in the company \u2014 initially, the $i$-th person earns $i$ rubles per day.\n\nOn each of $q$ following days, the salaries will be revised. At the end of the $i$-th day, employee $v_i$ will start earning $n+i$ rubles per day and will become the best-paid person in the company. The employee will keep his new salary until it gets revised again.\n\nSome pairs of people don't like each other. This creates a great psychological danger in the company. Formally, if two people $a$ and $b$ dislike each other and $a$ earns more money than $b$, employee $a$ will brag about this to $b$. A dangerous triple is a triple of three employees $a$, $b$ and $c$, such that $a$ brags to $b$, who in turn brags to $c$. If $a$ dislikes $b$, then $b$ dislikes $a$.\n\nAt the beginning of each day, Konrad needs to evaluate the number of dangerous triples in the company. Can you help him do it?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100\\,000$, $0 \\le m \\le 100\\,000$) \u2014 the number of employees in the company and the number of pairs of people who don't like each other. Each of the following $m$ lines contains two integers $a_i$, $b_i$ ($1 \\le a_i, b_i \\le n$, $a_i \\neq b_i$) denoting that employees $a_i$ and $b_i$ hate each other (that is, $a_i$ dislikes $b_i$ and $b_i$ dislikes $a_i$). Each such relationship will be mentioned exactly once.\n\nThe next line contains an integer $q$ ($0 \\le q \\le 100\\,000$) \u2014 the number of salary revisions. The $i$-th of the following $q$ lines contains a single integer $v_i$ ($1 \\le v_i \\le n$) denoting that at the end of the $i$-th day, employee $v_i$ will earn the most.\n\n\n-----Output-----\n\nOutput $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples in the company at the beginning of the $i$-th day.\n\n\n-----Examples-----\nInput\n4 5\n1 2\n2 4\n1 3\n3 4\n2 3\n2\n2\n3\n\nOutput\n4\n3\n2\n\nInput\n3 3\n1 2\n2 3\n1 3\n5\n1\n2\n2\n1\n3\n\nOutput\n1\n1\n1\n1\n1\n1\n\n\n\n-----Note-----\n\nConsider the first sample test. The $i$-th row in the following image shows the structure of the company at the beginning of the $i$-th day. A directed edge from $a$ to $b$ denotes that employee $a$ brags to employee $b$. The dangerous triples are marked by highlighted edges. [Image]\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA permutation p of size n is the sequence p_1, p_2, ..., p_{n}, consisting of n distinct integers, each of them is from 1 to n (1 \u2264 p_{i} \u2264 n).\n\nA lucky permutation is such permutation p, that any integer i (1 \u2264 i \u2264 n) meets this condition p_{p}_{i} = n - i + 1.\n\nYou have integer n. Find some lucky permutation p of size n.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the required permutation size.\n\n\n-----Output-----\n\nPrint -1 if the lucky permutation p of size n doesn't exist.\n\nOtherwise, print n distinct integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n) after a space \u2014 the required permutation.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1 \n\nInput\n2\n\nOutput\n-1\n\nInput\n4\n\nOutput\n2 4 1 3 \n\nInput\n5\n\nOutput\n2 5 3 1 4\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n=====Problem Statement=====\nGiven an alphanumeric string, capitalize each word\n\nFor example:\nalison heck => Alison Heck\n\n=====Input Format=====\nA single line of input containing a string, S.\n\n=====Output Format=====\nPrint the capitalized string, S.\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(s):\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = solve(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()",
    "9": "Python 3\n\"\"\"\n=====Problem Statement=====\nYou are asked to ensure that the first and last names of people begin with a capital letter in their passports. For example, alison heck should be capitalised correctly as Alison Heck. \n\nalison heck => Alison Heck\n\nGiven a full name, your task is to capitalize the name appropriately.\n\n=====Input Format=====\nA single line of input containing the full name, S.\n\n=====Constraints=====\n0<len(S)<1000\nThe string consists of alphanumeric characters and spaces.\n\nNote: in a word only the first character is capitalized. Example 12abc when capitalized remains 12abc.\n\n=====Output Format=====\nPrint the capitalized string, S.\n\"\"\"\n#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(s):\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = solve(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()",
    "10": "Python 3\n\"\"\"\nYou have n bunnies. You have bought a carrot to be shared between these bunnies. You want to treat all the bunnies equally, and thus want to cut the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. You want to make n - 1 cuts parallel to the base to cut the carrot into n pieces. Make sure that all n pieces have the same area.\n\n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers, n and h (2 \u2264 n \u2264 1000, 1 \u2264 h \u2264 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ... < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n70710.678118654752\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nIgor the analyst has adopted n little bunnies. As we all know, bunnies love carrots. Thus, Igor has bought a carrot to be shared between his bunnies. Igor wants to treat all the bunnies equally, and thus he wants to cut the carrot into n pieces of equal area. \n\nFormally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. Igor wants to make n - 1 cuts parallel to the base to cut the carrot into n pieces. He wants to make sure that all n pieces have the same area. Can you help Igor determine where to cut the carrot so that each piece have equal area?\n\n [Image] Illustration to the first example. \n\n\n-----Input-----\n\nThe first and only line of input contains two space-separated integers, n and h (2 \u2264 n \u2264 1000, 1 \u2264 h \u2264 10^5).\n\n\n-----Output-----\n\nThe output should contain n - 1 real numbers x_1, x_2, ..., x_{n} - 1. The number x_{i} denotes that the i-th cut must be made x_{i} units away from the apex of the carrot. In addition, 0 < x_1 < x_2 < ... < x_{n} - 1 < h must hold. \n\nYour output will be considered correct if absolute or relative error of every number in your output doesn't exceed 10^{ - 6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is considered correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1.154700538379 1.632993161855\n\nInput\n2 100000\n\nOutput\n70710.678118654752\n\n\n\n-----Note-----\n\nDefinition of isosceles triangle: https://en.wikipedia.org/wiki/Isosceles_triangle.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nGiven an array of words, you must concatenate the nth letter from each word to construct a new word which should be returned as a string, where n is the position of the word in the list.\n\nExamples:\nInput:\n[\"yoda\", \"best\", \"has\"]\nOutput:\n\"yes\"\n\"\"\"\ndef nth_char(words):",
    "13": "Python 3\n\"\"\"\nComplete the function that takes an array of words.\n\nYou must concatenate the `n`th letter from each word to construct a new word which should be returned as a string, where `n` is the position of the word in the list.\n\nFor example:\n\n```\n[\"yoda\", \"best\", \"has\"]  -->  \"yes\"\n  ^        ^        ^\n  n=0     n=1     n=2\n```\n\n**Note:** Test cases contain valid input only - i.e. a string array or an empty array; and each word will have enough letters.\n\"\"\"\ndef nth_char(words):",
    "14": "Python 3\n\"\"\"\nYou are given an array of size n. Calculate a subarray of size k with maximum sum having distinct elements same as original array.\n\t\n\t\t\n\n-----Input Format-----\n\nFirst line contains no. of test cases. Second line contains n and k. Third line\ncontains array of n integers.\n\n\n-----Output-----\n\nPrint maximum possible sum as stated in question\n\n\t\t\n\t\n-----Example Text Case-----\nInput:\n\n1\n10 6\n8 8 3 5 3 8 5 7 7 7\n\nOutput:\n37\n\n\t\t\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\n-----\nARRAY AND DISTINCT ELEMENTS\n-----\n\nChef is multitalented but he mistakenly took part in 2 contest which will take place\nat the same time. So while chef is busy at one cooking contest, he wants you to\ntake part in coding contest. Chef wants u to solve this program for him.\n\n\t\n\nYou have been given an array of size n. You have to calculate a subarray of size k\nwith maximum sum having distinct elements same as original array.\n\n\t\t\n\t\t\n\n-----Input Format-----\n\nFirst line contains no. of test cases. Second line contains n and k. Third line\ncontains array of n integers.\n\n\n-----Output-----\n\nPrint maximum possible sum as stated in question\n\n\t\t\n\t\t\n\n-----Example Text Case-----\nInput:\n\n1\n10 6\n8 8 3 5 3 8 5 7 7 7\n\nOutput:\n37\n\n\t\t\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nFind the second-to-last element of a list.\n\nExamples:\nInput:\npenultimate([1,2,3,4])\nOutput:\n3\nInput:\npenultimate([\"Python is dynamic\"])\nOutput:\n'i'\n\n\"\"\"\ndef penultimate(a):",
    "17": "Python 3\n\"\"\"\nFind the second-to-last element of a list.\n\nExample:\n```python\npenultimate([1,2,3,4])            # => 3\npenultimate([\"Python is dynamic\"]) # => 'i'\n(courtesy of [haskell.org](http://www.haskell.org/haskellwiki/99_questions/1_to_10))\n```\n\"\"\"\ndef penultimate(a):",
    "18": "Python 3\n\"\"\"\nDecode the given pattern and obtain new pattern for a given number K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n12\n3\n123\n45\n6\n1234\n567\n89\n10\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe chef is trying to decode some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n4\n1\n2\n3\n4\n\n-----Sample Output:-----\n1\n12\n3\n123\n45\n6\n1234\n567\n89\n10\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\"\"\"\ndef code():"
}