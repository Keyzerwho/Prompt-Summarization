{
    "0": "Python 3\n\"\"\"\nPrint the point name which is closer to point P(0,0) by calculating distance from other given points.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer representing the number of collections of data that follow. Each collection contains 4 integers: the x-coordinate and then the \ny-coordinate of point A followed by the x-coordinate and then the  y-coordinate of point B.\n\n-----Output:-----\nAll letters are upper case.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Sample Input:-----\n4\n3 -2 -5 -3\n0 6 1 2\n-7 8 4 -1\n3 3 -2 2\n\n-----Sample Output:-----\nA IS CLOSER\nB IS CLOSER\nB IS CLOSER\nB IS CLOSER\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe Jones Trucking Company tracks the location of each of its trucks on a grid similar to an (x, y) plane. The home office is at the location (0, 0). Read the coordinates of truck A and the coordinates of truck B and determine which is closer to the office.\n\n-----Input:-----\nThe first line of the data set for this problem is an integer representing the number of collections of data that follow. Each collection contains 4 integers: the x-coordinate and then the \ny-coordinate of truck A followed by the x-coordinate and then the  y-coordinate of truck B.\n\n-----Output:-----\nAll letters are upper case.\nThe output is to be formatted exactly like that for the sample output given below.\n\n-----Assumptions:-----\nThe x-coordinate is in the range \u201320 .. 20. The y-coordinate is in the range \u201320 .. 20.\n\n-----Discussion:-----\nThe distance between point #1 with coordinates (x1, y1) and point #2 with coordinates (x2, y2) is:\n\n-----Sample Input:-----\n4\n3 -2 -5 -3\n0 6 1 2\n-7 8 4 -1\n3 3 -2 2\n\n-----Sample Output:-----\nA IS CLOSER\nB IS CLOSER\nB IS CLOSER\nB IS CLOSER\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou will be given a number and your task is to return the nth fibonacci string.\n\n\nExamples:\nInput:\nsolve(2)\nOutput:\n'010'\n\nInput:\nsolve(3)\nOutput:\n'01001'\n\n\"\"\"\ndef solve(n):",
    "3": "Python 3\n\"\"\"\nGiven that \n```\nf0 = '0'\nf1 = '01'\nf2 = '010' = f1 + f0\nf3 = '01001' = f2 + f1\n```\n\nYou will be given a number and your task is to return the `nth` fibonacci string. For example:\n\n```\nsolve(2) = '010'\nsolve(3) = '01001'\n```\n\nMore examples in test cases. Good luck!\n\nIf you like sequence Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"\ndef solve(n):",
    "4": "Python 3\n\"\"\"\nGiven an array of integers $a_1, a_2, \\ldots, a_n$.\n\nWe say that $y$ is reachable from $x$ if $x<y$ and there exists an integer array $p$ such that $x = p_1 < p_2 < \\ldots < p_k=y$, and $a_{p_i}\\, \\&\\, a_{p_{i+1}} > 0$ for all integers $i$ such that $1 \\leq i < k$.\n\nHere $\\&$ denotes the bitwise AND operation.\n\nCheck reachability for each of them.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($2 \\leq n \\leq 300\\,000$, $1 \\leq q \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the number of queries you need to answer.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 300\\,000$)\u00a0\u2014 the given array.\n\nThe next $q$ lines contain two integers each. The $i$-th of them contains two space-separated integers $x_i$ and $y_i$ ($1 \\leq x_i < y_i \\leq n$). You need to check if $y_i$ is reachable from $x_i$. \n\n\n-----Output-----\n\nOutput $q$ lines. In the $i$-th of them print \"Shi\" if $y_i$ is reachable from $x_i$, otherwise, print \"Fou\".\n\n\n-----Example-----\nInput\n5 3\n1 3 0 2 1\n1 3\n2 4\n1 4\n\nOutput\nFou\nShi\nShi\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nToad Pimple has an array of integers $a_1, a_2, \\ldots, a_n$.\n\nWe say that $y$ is reachable from $x$ if $x<y$ and there exists an integer array $p$ such that $x = p_1 < p_2 < \\ldots < p_k=y$, and $a_{p_i}\\, \\&\\, a_{p_{i+1}} > 0$ for all integers $i$ such that $1 \\leq i < k$.\n\nHere $\\&$ denotes the bitwise AND operation.\n\nYou are given $q$ pairs of indices, check reachability for each of them.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $q$ ($2 \\leq n \\leq 300\\,000$, $1 \\leq q \\leq 300\\,000$)\u00a0\u2014 the number of integers in the array and the number of queries you need to answer.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($0 \\leq a_i \\leq 300\\,000$)\u00a0\u2014 the given array.\n\nThe next $q$ lines contain two integers each. The $i$-th of them contains two space-separated integers $x_i$ and $y_i$ ($1 \\leq x_i < y_i \\leq n$). You need to check if $y_i$ is reachable from $x_i$. \n\n\n-----Output-----\n\nOutput $q$ lines. In the $i$-th of them print \"Shi\" if $y_i$ is reachable from $x_i$, otherwise, print \"Fou\".\n\n\n-----Example-----\nInput\n5 3\n1 3 0 2 1\n1 3\n2 4\n1 4\n\nOutput\nFou\nShi\nShi\n\n\n\n-----Note-----\n\nIn the first example, $a_3 = 0$. You can't reach it, because AND with it is always zero. $a_2\\, \\&\\, a_4 > 0$, so $4$ is reachable from $2$, and to go from $1$ to $4$ you can use $p = [1, 2, 4]$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given an array of numbers. Make sets of 3 numbers. Each should have numbers in ascending or descending order\n\nReturn the number of such sets that can be formed. a number can be in multiple sets\n\u00a0\nExample 1:\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three sets given the conditions. (2,3,4), (5,4,1), (5,3,1). \n\nExample 2:\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any set given the conditions.\n\nExample 3:\nInput: rating = [1,2,3,4]\nOutput: 4\n\n\u00a0\nConstraints:\n\nn == rating.length\n1 <= n <= 200\n1 <= rating[i] <= 10^5\n\n\"\"\"\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:",
    "7": "Python 3\n\"\"\"\nThere are\u00a0n\u00a0soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers\u00a0amongst them under the following rules:\n\nChoose 3 soldiers with index (i, j, k) with\u00a0rating (rating[i], rating[j], rating[k]).\nA team is valid if:\u00a0 (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0\u00a0<= i <\u00a0j <\u00a0k <\u00a0n).\n\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).\n\nExample 1:\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n\nExample 2:\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.\n\nExample 3:\nInput: rating = [1,2,3,4]\nOutput: 4\n\n\u00a0\nConstraints:\n\nn == rating.length\n1 <= n <= 200\n1 <= rating[i] <= 10^5\n\n\"\"\"\nclass Solution:\n    def numTeams(self, rating: List[int]) -> int:",
    "8": "Python 3\n\"\"\"\nGiven a number n, find the number x and the numbers whose arithmentic sum of their digits with themselves will give the number n itself.\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nIn the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition. \n\nIn next k lines print these values in ascending order.\n\n\n-----Examples-----\nInput\n21\n\nOutput\n1\n15\n\nInput\n20\n\nOutput\n0\n\n\n\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nEighth-grader Vova is on duty today in the class. After classes, he went into the office to wash the board, and found on it the number n. He asked what is this number and the teacher of mathematics Inna Petrovna answered Vova that n is the answer to the arithmetic task for first-graders. In the textbook, a certain positive integer x was given. The task was to add x to the sum of the digits of the number x written in decimal numeral system.\n\nSince the number n on the board was small, Vova quickly guessed which x could be in the textbook. Now he wants to get a program which will search for arbitrary values of the number n for all suitable values of x or determine that such x does not exist. Write such a program for Vova.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 10^9).\n\n\n-----Output-----\n\nIn the first line print one integer k\u00a0\u2014 number of different values of x satisfying the condition. \n\nIn next k lines print these values in ascending order.\n\n\n-----Examples-----\nInput\n21\n\nOutput\n1\n15\n\nInput\n20\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case x = 15 there is only one variant: 15 + 1 + 5 = 21.\n\nIn the second test case there are no such x.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #18\n\nCreate a function that accepts 2 string arguments and returns an integer of the count of occurrences the 2nd argument is found in the first one.\n\nIf no occurrences can be found, a count of 0 should be returned.\n\n\"\"\"\ndef str_count(strng, letter):",
    "11": "Python 3\n\"\"\"\n**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #18\n\nCreate a function called that accepts 2 string arguments and returns an integer of the count of occurrences the 2nd argument is found in the first one.\n\nIf no occurrences can be found, a count of 0 should be returned.\n\nNotes:\n* The first argument can be an empty string  \n* The second string argument will always be of length 1\n\"\"\"\ndef str_count(strng, letter):",
    "12": "Python 3\n\"\"\"\nKate count words which means continuous sequences of English alphabetic characters. Here are examples:\n\n`Hello there, little user5453 374 ())$. I\u2019d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't count \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\".\n\nKate has decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I\u2019d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I\u2019d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"\ndef word_count(s):",
    "13": "Python 3\n\"\"\"\nKate likes to count words in text blocks. By words she means continuous sequences of English alphabetic characters (from a to z ). Here are examples:\n\n`Hello there, little user5453 374 ())$. I\u2019d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't like some of words and doesn't count them. Words to be excluded are \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\", case-insensitive.\n\nToday Kate's too lazy and have decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I\u2019d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I\u2019d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"\ndef word_count(s):",
    "14": "Python 3\n\"\"\"\nA rectangle with sides $A$ and $B$ is cut into rectangles with cuts parallel to its sides.\n\nFor each type of rectangles, lengths of the sides of rectangles are given along with the amount of the rectangles of this type that were left after cutting the initial rectangle.\n\nCalculate the amount of pairs $(A; B)$ such as the given rectangles could be created by cutting the rectangle with sides of lengths $A$ and $B$. Pairs $(A; B)$ and $(B; A)$ are considered different when $A \\neq B$.\n\n\n-----Input-----\n\nThe first line consists of a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^{5}$)\u00a0\u2014 amount of different types of rectangles left after cutting the initial rectangle.\n\nThe next $n$ lines each consist of three integers $w_{i}, h_{i}, c_{i}$ $(1 \\leq w_{i}, h_{i}, c_{i} \\leq 10^{12})$\u00a0\u2014 the lengths of the sides of the rectangles of this type and the amount of the rectangles of this type.\n\nIt is guaranteed that the rectangles of the different types are different.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n1\n1 1 9\n\nOutput\n3\n\nInput\n2\n2 3 20\n2 4 40\n\nOutput\n6\n\nInput\n2\n1 2 5\n2 3 5\n\nOutput\n0\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nA rectangle with sides $A$ and $B$ is cut into rectangles with cuts parallel to its sides. For example, if $p$ horizontal and $q$ vertical cuts were made, $(p + 1) \\cdot (q + 1)$ rectangles were left after the cutting. After the cutting, rectangles were of $n$ different types. Two rectangles are different if at least one side of one rectangle isn't equal to the corresponding side of the other. Note that the rectangle can't be rotated, this means that rectangles $a \\times b$ and $b \\times a$ are considered different if $a \\neq b$.\n\nFor each type of rectangles, lengths of the sides of rectangles are given along with the amount of the rectangles of this type that were left after cutting the initial rectangle.\n\nCalculate the amount of pairs $(A; B)$ such as the given rectangles could be created by cutting the rectangle with sides of lengths $A$ and $B$. Note that pairs $(A; B)$ and $(B; A)$ are considered different when $A \\neq B$.\n\n\n-----Input-----\n\nThe first line consists of a single integer $n$ ($1 \\leq n \\leq 2 \\cdot 10^{5}$)\u00a0\u2014 amount of different types of rectangles left after cutting the initial rectangle.\n\nThe next $n$ lines each consist of three integers $w_{i}, h_{i}, c_{i}$ $(1 \\leq w_{i}, h_{i}, c_{i} \\leq 10^{12})$\u00a0\u2014 the lengths of the sides of the rectangles of this type and the amount of the rectangles of this type.\n\nIt is guaranteed that the rectangles of the different types are different.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n1\n1 1 9\n\nOutput\n3\n\nInput\n2\n2 3 20\n2 4 40\n\nOutput\n6\n\nInput\n2\n1 2 5\n2 3 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample there are three suitable pairs: $(1; 9)$, $(3; 3)$ and $(9; 1)$.\n\nIn the second sample case there are 6 suitable pairs: $(2; 220)$, $(4; 110)$, $(8; 55)$, $(10; 44)$, $(20; 22)$ and $(40; 11)$.\n\nHere the sample of cut for $(20; 22)$.\n\n [Image] \n\nThe third sample has no suitable pairs.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThe Bubble Cup hypothesis stood unsolved for $130$ years. Who ever proves the hypothesis will be regarded as one of the greatest mathematicians of our time! A famous mathematician Jerry Mao managed to reduce the hypothesis to this problem:\n\nGiven a number $m$, how many polynomials $P$ with coefficients in set ${\\{0,1,2,3,4,5,6,7\\}}$ have: $P(2)=m$?\n\nHelp Jerry Mao solve the long standing problem!\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 5\\cdot 10^5)$ - number of test cases.\n\nOn next line there are $t$ numbers, $m_i$ $(1 \\leq m_i \\leq 10^{18})$ - meaning that in case $i$ you should solve for number $m_i$.\n\n\n-----Output-----\n\nFor each test case $i$, print the answer on separate lines: number of polynomials $P$ as described in statement such that $P(2)=m_i$, modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2\n2 4\n\nOutput\n2\n4\n\n\n\n-----Note-----\n\nIn first case, for $m=2$, polynomials that satisfy the constraint are $x$ and $2$.\n\nIn second case, for $m=4$, polynomials that satisfy the constraint are $x^2$, $x + 2$, $2x$ and $4$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nCreate a function that takes a string and returns that string with the first half lowercased and the last half uppercased. If it is an odd number then 'round' it up to find which letters to uppercase. \n\nExamples:\nInput: footer\nOutput: fooBAR\n\nInput: brian\nOutput: briAN\n\"\"\"\ndef sillycase(silly):",
    "19": "Python 3\n\"\"\"\nCreate a function that takes a string and returns that\nstring with the first half lowercased and the last half uppercased.\n\neg: foobar == fooBAR\n\nIf it is an odd number then 'round' it up to find which letters to uppercase. See example below.\n\n    sillycase(\"brian\")  \n    //         --^-- midpoint  \n    //         bri    first half (lower-cased)  \n    //            AN second half (upper-cased)\n\"\"\"\ndef sillycase(silly):"
}