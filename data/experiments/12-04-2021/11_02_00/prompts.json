{
    "0": "Python 3\n\"\"\"\n You are given a hidden word and a number of turns. Polycarpus knows m words of exactly the same length as the hidden word. The hidden word is also known to him and appears as one of these m words. At current moment a number of turns have already been made and some letters (possibly zero) of the hidden word are already revealed. Previously Polycarp has told exactly the letters which are currently revealed. It is Polycarpus' turn. He wants to tell a letter in such a way, that the TV show host will assuredly reveal at least one more letter. Polycarpus cannot tell the letters, which are already revealed. Your task is to help Polycarpus and find out the number of letters he can tell so that the show host will assuredly reveal at least one of the remaining letters. summary :  \n-----Input----- The first line contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of the hidden word. The following line describes already revealed letters. It contains the string of length n, which consists of lowercase Latin letters and symbols \"*\". If there is a letter at some position, then this letter was already revealed. If the position contains symbol \"*\", then the letter at this position has not been revealed yet. It is guaranteed, that at least one letter is still closed. The third line contains an integer m (1 \u2264 m \u2264 1000) \u2014 the number of words of length n, which Polycarpus knows. The following m lines contain the words themselves \u2014 n-letter strings of lowercase Latin letters. All words are distinct. It is guaranteed that the hidden word appears as one of the given m words. Before the current move Polycarp has told exactly the letters which are currently revealed. -----Output----- Output the single integer \u2014 the number of letters Polycarpus can tell so that the TV show host definitely reveals at least one more letter. It is possible that this number is zero. -----Examples----- Input 4 a**d 2 abcd acbd Output 2 Input 5 lo*er 2 lover loser Output 0 Input 3 a*a 2 aaa aba Output 1 -----Note----- In the first example Polycarpus can tell letters \"b\" and \"c\", which assuredly will be revealed. The second example contains no letters which can be told as it is not clear, which of the letters \"v\" or \"s\" is located at the third position of the hidden word. In the third example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nPolycarpus takes part in the \"Field of Wonders\" TV show. The participants of the show have to guess a hidden word as fast as possible. Initially all the letters of the word are hidden.\n\nThe game consists of several turns. At each turn the participant tells a letter and the TV show host responds if there is such letter in the word or not. If there is such letter then the host reveals all such letters. For example, if the hidden word is \"abacaba\" and the player tells the letter \"a\", the host will reveal letters at all positions, occupied by \"a\": 1, 3, 5 and 7 (positions are numbered from left to right starting from 1).\n\nPolycarpus knows m words of exactly the same length as the hidden word. The hidden word is also known to him and appears as one of these m words.\n\nAt current moment a number of turns have already been made and some letters (possibly zero) of the hidden word are already revealed. Previously Polycarp has told exactly the letters which are currently revealed.\n\nIt is Polycarpus' turn. He wants to tell a letter in such a way, that the TV show host will assuredly reveal at least one more letter. Polycarpus cannot tell the letters, which are already revealed.\n\nYour task is to help Polycarpus and find out the number of letters he can tell so that the show host will assuredly reveal at least one of the remaining letters.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 50) \u2014 the length of the hidden word.\n\nThe following line describes already revealed letters. It contains the string of length n, which consists of lowercase Latin letters and symbols \"*\". If there is a letter at some position, then this letter was already revealed. If the position contains symbol \"*\", then the letter at this position has not been revealed yet. It is guaranteed, that at least one letter is still closed.\n\nThe third line contains an integer m (1 \u2264 m \u2264 1000) \u2014 the number of words of length n, which Polycarpus knows. The following m lines contain the words themselves \u2014 n-letter strings of lowercase Latin letters. All words are distinct.\n\nIt is guaranteed that the hidden word appears as one of the given m words. Before the current move Polycarp has told exactly the letters which are currently revealed.\n\n\n-----Output-----\n\nOutput the single integer \u2014 the number of letters Polycarpus can tell so that the TV show host definitely reveals at least one more letter. It is possible that this number is zero.\n\n\n-----Examples-----\nInput\n4\na**d\n2\nabcd\nacbd\n\nOutput\n2\n\nInput\n5\nlo*er\n2\nlover\nloser\n\nOutput\n0\n\nInput\n3\na*a\n2\naaa\naba\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example Polycarpus can tell letters \"b\" and \"c\", which assuredly will be revealed.\n\nThe second example contains no letters which can be told as it is not clear, which of the letters \"v\" or \"s\" is located at the third position of the hidden word.\n\nIn the third example Polycarpus exactly knows that the hidden word is \"aba\", because in case it was \"aaa\", then the second letter \"a\" would have already been revealed in one of previous turns.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n In research, it is tough to determine how good of a researcher you are. One way that people determine how good you are is by looking at your $H$-Index. Each paper has a certain number of citations. Your $H$-Index is the largest number $H$ such that you have $H$ papers with at least $H$ citations. Given the number of citations on each paper you have written, what is your $H$-Index  \n-----Input----- The first line of input contains a single integer $n$\u00a0($1 \\leq n \\leq 100000$), which is the number of papers you have written. The next $n$ lines describe the papers. Each of these lines contains a single integer $c$\u00a0($0 \\leq c \\leq 1000000000$), which is the number of citations that this paper has. -----Output----- Display your $H$-Index. -----Examples----- Sample Input 1: 5 7 1 2 1 5 Sample Output 1: 2 Sample Input 2: 5 7 1 3 1 5 Sample Output 2: 3\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIn research, it is tough to determine how good of a researcher you are. One way that people determine how good you are is by looking at your $H$-Index.\n\nEach paper has a certain number of citations. Your $H$-Index is the largest number $H$ such that you have $H$ papers with at least $H$ citations. Given the number of citations on each paper you have written, what is your $H$-Index?\n\n-----Input-----\nThe first line of input contains a single integer $n$\u00a0($1 \\leq n \\leq 100000$), which is the number of papers you have written.\n\nThe next $n$ lines describe the papers. Each of these lines contains a single integer $c$\u00a0($0 \\leq c \\leq 1000000000$), which is the number of citations that this paper has.\n\n-----Output-----\nDisplay your $H$-Index.\n\n-----Examples-----\nSample Input 1:\n5\n7\n1\n2\n1\n5\nSample Output 1:\n2\n\nSample Input 2:\n5\n7\n1\n3\n1\n5\nSample Output 2:\n3\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Barney plays cups and key. He has 3 identical cups arranged in a line from left to right. Initially key to Barney's heart is under the middle cup. Then at one turn Barney swaps the cup in the middle with any of other two cups randomly (he choses each with equal probability), so the chosen cup becomes the middle one. Game lasts n turns and Barney independently choses a cup to swap with the middle one within each turn, and the key always remains in the cup it was at the start. After n-th turn Barney asks a girl to guess which cup contains the key. The girl points to the middle one but Barney was distracted while making turns and doesn't know if the key is under the middle cup. That's why he asked you to tell him the probability that girl guessed right. Number n of game turns can be extremely large, that's why Barney did not give it to you. Instead he gave you an array a_1, a_2, ..., a_{k} such that  $n = \\prod_{i = 1}^{k} a_{i}$  in other words, n is multiplication of all elements of the given array. Because of precision difficulties, Barney asked you to tell him the answer as an irreducible fraction. In other words you need to find it as a fraction p / q such that $\\operatorname{gcd}(p, q) = 1$, where $gcd$ is the greatest common divisor. Since p and q can be extremely large, you only need to find the remainders of dividing each of them by 10^9 + 7. Please note that we want $gcd$\n-----Input----- The first line of input contains a single integer k (1 \u2264 k \u2264 10^5)\u00a0\u2014 the number of elements in array Barney gave you. The second line contains k integers a_1, a_2, ..., a_{k} (1 \u2264 a_{i} \u2264 10^18)\u00a0\u2014 the elements of the array. -----Output----- In the only line of output print a single string x / y where x is the remainder of dividing p by 10^9 + 7 and y is the remainder of dividing q by 10^9 + 7. -----Examples----- Input 1 2 Output 1/2 Input 3 1 1 1 Output 0/1\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nAs we all know Barney's job is \"PLEASE\" and he has not much to do at work. That's why he started playing \"cups and key\". In this game there are three identical cups arranged in a line from left to right. Initially key to Barney's heart is under the middle cup. [Image] \n\nThen at one turn Barney swaps the cup in the middle with any of other two cups randomly (he choses each with equal probability), so the chosen cup becomes the middle one. Game lasts n turns and Barney independently choses a cup to swap with the middle one within each turn, and the key always remains in the cup it was at the start.\n\nAfter n-th turn Barney asks a girl to guess which cup contains the key. The girl points to the middle one but Barney was distracted while making turns and doesn't know if the key is under the middle cup. That's why he asked you to tell him the probability that girl guessed right.\n\nNumber n of game turns can be extremely large, that's why Barney did not give it to you. Instead he gave you an array a_1, a_2, ..., a_{k} such that  $n = \\prod_{i = 1}^{k} a_{i}$ \n\nin other words, n is multiplication of all elements of the given array.\n\nBecause of precision difficulties, Barney asked you to tell him the answer as an irreducible fraction. In other words you need to find it as a fraction p / q such that $\\operatorname{gcd}(p, q) = 1$, where $gcd$ is the greatest common divisor. Since p and q can be extremely large, you only need to find the remainders of dividing each of them by 10^9 + 7.\n\nPlease note that we want $gcd$ of p and q to be 1, not $gcd$ of their remainders after dividing by 10^9 + 7.\n\n\n-----Input-----\n\nThe first line of input contains a single integer k (1 \u2264 k \u2264 10^5)\u00a0\u2014 the number of elements in array Barney gave you.\n\nThe second line contains k integers a_1, a_2, ..., a_{k} (1 \u2264 a_{i} \u2264 10^18)\u00a0\u2014 the elements of the array.\n\n\n-----Output-----\n\nIn the only line of output print a single string x / y where x is the remainder of dividing p by 10^9 + 7 and y is the remainder of dividing q by 10^9 + 7.\n\n\n-----Examples-----\nInput\n1\n2\n\nOutput\n1/2\n\nInput\n3\n1 1 1\n\nOutput\n0/1\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You have to write a program to find out how long it will take for Orange to come back home. You are given the cave system as an $N \\times N$ grid where each location $(i, j)$ contains a nonnegative integer, $h_{i, j}$, representing the height of the rocks in meters at that location. Orange can only swim left, right, up, or down from one submerged location to another submerged location (but not diagonally). A location $(i, j)$ is submerged if the water level is at least $1$ meter higher than $h_{i, j}$. Orange s starting location will always be at $(0, 0)$, with $h_{0, 0} = 0$. The initial water level is $1$ meter so that Orange s start location is submerged. The only exit in the cave is at location $(N - 1, N - 1)$. After how many hours can Orange find his way to the exit? \n-----Input----- The input consists of one integer, $N$, on the first line such that $2 \\leq N \\leq 100$, followed by $N$ lines with $N$ integers each, separated by spaces, such that each integer represents the height $h_{i, j}$ ($1 \\le h_{i, j} \\le 10^8$) of the rocks at location $(i, j)$. -----Output----- Output a single integer, which is the minimum number of hours that must pass before Orange can reach the exit. -----Examples----- Sample Input: 2 0 3 2 4 Sample Output: 4\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIt is monsoon season, and your goldfish Orange is stuck at the bottom of a cave system in Thailand. Every hour, the water rises by $1$ meter. Thankfully, Orange has the ability to swim instantaneously from one location to another. However, he can\u2019t hop over the sharp rocks in the way.\n\nYou trust that Orange is smart and will find the way out of the cave as soon as possible. To prepare Orange\u2019s meal, you want to write a program to find out how long it will take for Orange to come back home.\n\nYou are given the cave system as an $N \\times N$ grid where each location $(i, j)$ contains a nonnegative integer, $h_{i, j}$, representing the height of the rocks in meters at that location. Orange can only swim left, right, up, or down from one submerged location to another submerged location (but not diagonally).\n\nA location $(i, j)$ is submerged if the water level is at least $1$ meter higher than $h_{i, j}$. Orange\u2019s starting location will always be at $(0, 0)$, with $h_{0, 0} = 0$. The initial water level is $1$ meter so that Orange\u2019s start location is submerged. The only exit in the cave is at location $(N - 1, N - 1)$. After how many hours can Orange find his way to the exit?\n\n-----Input-----\nThe input consists of one integer, $N$, on the first line such that $2 \\leq N \\leq 100$, followed by $N$ lines with $N$ integers each, separated by spaces, such that each integer represents the height $h_{i, j}$ ($1 \\le h_{i, j} \\le 10^8$) of the rocks at location $(i, j)$.\n\n-----Output-----\nOutput a single integer, which is the minimum number of hours that must pass before Orange can reach the exit.\n\n-----Examples-----\nSample Input:\n2\n0 3\n2 4\nSample Output:\n4\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n The string $t_1t_2 \\dots t_k$ is good if each letter of this string belongs to at least one palindrome of length greater than 1. A palindrome is a string that reads the same backward as forward. For example, the strings A, BAB, ABBA, BAABBBAAB are palindromes, but the strings AB, ABBBAA, BBBA are not. Here are some examples of good strings:   $t$ = AABBB (letters $t_1$, $t_2$ belong to palindrome $t_1 \\dots t_2$ and letters $t_3$, $t_4$, $t_5$ belong to palindrome $t_3 \\dots t_5$);  $t$ = ABAA (letters $t_1$, $t_2$, $t_3$ belong to palindrome $t_1 \\dots t_3$ and letter $t_4$ belongs to palindrome $t_3 \\dots t_4$);  $t$ = AAAAA (all letters belong to palindrome $t_1 \\dots t_5$);  You are given a string $s$ of length $n$, consisting of only letters A and B. You have to calculate the number of good substrings of string $s$. \n-----Input----- The first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the length of the string $s$. The second line contains the string $s$, consisting of letters A and B. -----Output----- Print one integer \u2014 the number of good substrings of string $s$. -----Examples----- Input 5 AABBB Output 6 Input 3 AAA Output 3 Input 7 AAABABB Output 15 -----Note----- In the first test case there are six good substrings: $s_1 \\dots s_2$, $s_1 \\dots s_4$, $s_1 \\dots s_5$, $s_3 \\dots s_4$, $s_3 \\dots s_5$ and $s_4 \\dots s_5$. In the second test case there are three good substrings: $s_1 \\dots s_2$, $s_1 \\dots s_3$ and $s_2 \\dots s_3$.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThe string $t_1t_2 \\dots t_k$ is good if each letter of this string belongs to at least one palindrome of length greater than 1.\n\nA palindrome is a string that reads the same backward as forward. For example, the strings A, BAB, ABBA, BAABBBAAB are palindromes, but the strings AB, ABBBAA, BBBA are not.\n\nHere are some examples of good strings:   $t$ = AABBB (letters $t_1$, $t_2$ belong to palindrome $t_1 \\dots t_2$ and letters $t_3$, $t_4$, $t_5$ belong to palindrome $t_3 \\dots t_5$);  $t$ = ABAA (letters $t_1$, $t_2$, $t_3$ belong to palindrome $t_1 \\dots t_3$ and letter $t_4$ belongs to palindrome $t_3 \\dots t_4$);  $t$ = AAAAA (all letters belong to palindrome $t_1 \\dots t_5$); \n\nYou are given a string $s$ of length $n$, consisting of only letters A and B.\n\nYou have to calculate the number of good substrings of string $s$.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 3 \\cdot 10^5$) \u2014 the length of the string $s$.\n\nThe second line contains the string $s$, consisting of letters A and B.\n\n\n-----Output-----\n\nPrint one integer \u2014 the number of good substrings of string $s$.\n\n\n-----Examples-----\nInput\n5\nAABBB\n\nOutput\n6\n\nInput\n3\nAAA\n\nOutput\n3\n\nInput\n7\nAAABABB\n\nOutput\n15\n\n\n\n-----Note-----\n\nIn the first test case there are six good substrings: $s_1 \\dots s_2$, $s_1 \\dots s_4$, $s_1 \\dots s_5$, $s_3 \\dots s_4$, $s_3 \\dots s_5$ and $s_4 \\dots s_5$.\n\nIn the second test case there are three good substrings: $s_1 \\dots s_2$, $s_1 \\dots s_3$ and $s_2 \\dots s_3$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given the number of papers of different sizes that Bj rn has, can you figure out how much tape he needs to make an A1 paper? \n-----Input----- The first line of input contains a single integer $2\\leq n \\leq 30$, the A-size of the smallest papers Bj\u00f6rn has. The second line contains $n-1$ integers giving the number of sheets he has of each paper size starting with A2 and ending with A$n$. Bj\u00f6rn doesn\u2019t have more than $10^9$ sheets of any paper size. -----Output----- If Bj\u00f6rn has enough paper to make an A1 paper, output a single floating point number, the smallest total length of tape needed in meters. Otherwise output \u201cimpossible\u201d. The output number should have an absolute error of at most $10^{-5}$. -----Examples----- Sample Input: 4 1 0 5 Sample Output: 1.60965532263\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nBj\u00f6rn likes the square root of two, $\\sqrt {2} = 1.41421356\\dots $ very much. He likes it so much that he has decided to write down the first $10000$ digits of it on a single paper. He started doing this on an A4 paper, but ran out of space after writing down only $1250$ digits. Being pretty good at math, he quickly figured out that he needs an A1 paper to fit all the digits. Bj\u00f6rn doesn\u2019t have an A1 paper, but he has smaller papers which he can tape together.\n\nTaping two A2 papers together along their long side turns them into an A1 paper, two A3 papers give an A2 paper, and so on. Given the number of papers of different sizes that Bj\u00f6rn has, can you figure out how much tape he needs to make an A1 paper? Assume that the length of tape needed to join together two sheets of papers is equal to their long side. An A2 paper is $2^{-5/4}$\u00a0meters by $2^{-3/4}$\u00a0meters and each consecutive paper size (A3, A4, ) have the same shape but half the area of the previous one.\n\n-----Input-----\nThe first line of input contains a single integer $2\\leq n \\leq 30$, the A-size of the smallest papers Bj\u00f6rn has. The second line contains $n-1$ integers giving the number of sheets he has of each paper size starting with A2 and ending with A$n$. Bj\u00f6rn doesn\u2019t have more than $10^9$ sheets of any paper size.\n\n-----Output-----\nIf Bj\u00f6rn has enough paper to make an A1 paper, output a single floating point number, the smallest total length of tape needed in meters. Otherwise output \u201cimpossible\u201d. The output number should have an absolute error of at most $10^{-5}$.\n\n-----Examples-----\nSample Input:\n4\n1 0 5\nSample Output:\n1.60965532263\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Alice is a queen bee living in Beeland (a honeycomb structure described by $R$, the number of cells of the side of honeycomb). The cells in Beeland are numbered from $1$ to $R^3 - (R-1)^3$ in row major order. For example for $R = 3$, the Beeland that Alice lives in looks like this: Now Alice lives in a house that occupies $K$ adjacent cells in Beeland. You are Bob, the knight bee. You need to protect Alice s house, but first you need to know the length of its outer perimeter (the number of outermost sides of Alice s house). The illustration below shows the visualizations of Sample Inputs/Outputs $2$ and $3$.\n-----Input----- The first line of input consists of two integers: $R$ and $K$. ($1 \\leq R \\leq 50$, $1 \\leq K \\leq R^3 - (R-1)^3$). The second line contains $K$ unique integers that describe the indices of Alice\u2019s house, where each integer is in the range $[1,R^3-(R-1)^3]$. -----Output----- Print an integer in one line: The perimeter of Alice\u2019s house. -----Examples----- Sample Input 1: 3 1 7 Sample Output 1: 6 Sample Input 2: 3 6 5 6 7 11 15 18 Sample Output 2: 24\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nAlice is a queen bee living in Beeland (a honeycomb structure described by $R$, the number of cells of the side of honeycomb). The cells in Beeland are numbered from $1$ to $R^3 - (R-1)^3$ in row major order. For example for $R = 3$, the Beeland that Alice lives in looks like this:\n\nNow Alice lives in a house that occupies $K$ adjacent cells in Beeland. You are Bob, the knight bee. You need to protect Alice\u2019s house, but first you need to know the length of its outer perimeter (the number of outermost sides of Alice\u2019s house). The illustration below shows the visualizations of Sample Inputs/Outputs $2$ and $3$.\n\n-----Input-----\nThe first line of input consists of two integers: $R$ and $K$. ($1 \\leq R \\leq 50$, $1 \\leq K \\leq R^3 - (R-1)^3$). The second line contains $K$ unique integers that describe the indices of Alice\u2019s house, where each integer is in the range $[1,R^3-(R-1)^3]$.\n\n-----Output-----\nPrint an integer in one line: The perimeter of Alice\u2019s house.\n\n-----Examples-----\nSample Input 1:\n3 1\n7\nSample Output 1:\n6\n\nSample Input 2:\n3 6\n5 6 7 11 15 18\nSample Output 2:\n24\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a sequence of colors of length $n$. You need to determine whether it is possible to standardize all the colors. \n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of puppies. The second line contains a string $s$ of length $n$ consisting of lowercase Latin letters, where the $i$-th symbol denotes the $i$-th puppy's color. -----Output----- If it's possible to recolor all puppies into one color, print \"Yes\". Otherwise print \"No\". Output the answer without quotation signs. -----Examples----- Input 6 aabddc Output Yes Input 3 abc Output No Input 3 jjj Output Yes -----Note----- In the first example Slava can perform the following steps:   take all puppies of color 'a' (a total of two) and recolor them into 'b';  take all puppies of color 'd' (a total of two) and recolor them into 'c';  take all puppies of color 'b' (three puppies for now) and recolor them into 'c'.  In the second example it's impossible to recolor any of the puppies. In the third example all the puppies' colors are the same; thus there's no need to recolor anything.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPanic is rising in the committee for doggo standardization\u00a0\u2014 the puppies of the new brood have been born multi-colored! In total there are 26 possible colors of puppies in the nature and they are denoted by letters from 'a' to 'z' inclusive.\n\nThe committee rules strictly prohibit even the smallest diversity between doggos and hence all the puppies should be of the same color. Thus Slava, the committee employee, has been assigned the task to recolor some puppies into other colors in order to eliminate the difference and make all the puppies have one common color.\n\nUnfortunately, due to bureaucratic reasons and restricted budget, there's only one operation Slava can perform: he can choose a color $x$ such that there are currently at least two puppies of color $x$ and recolor all puppies of the color $x$ into some arbitrary color $y$. Luckily, this operation can be applied multiple times (including zero).\n\nFor example, if the number of puppies is $7$ and their colors are represented as the string \"abababc\", then in one operation Slava can get the results \"zbzbzbc\", \"bbbbbbc\", \"aaaaaac\", \"acacacc\" and others. However, if the current color sequence is \"abababc\", then he can't choose $x$='c' right now, because currently only one puppy has the color 'c'.\n\nHelp Slava and the committee determine whether it is possible to standardize all the puppies, i.e. after Slava's operations all the puppies should have the same color.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of puppies.\n\nThe second line contains a string $s$ of length $n$ consisting of lowercase Latin letters, where the $i$-th symbol denotes the $i$-th puppy's color.\n\n\n-----Output-----\n\nIf it's possible to recolor all puppies into one color, print \"Yes\".\n\nOtherwise print \"No\".\n\nOutput the answer without quotation signs.\n\n\n-----Examples-----\nInput\n6\naabddc\n\nOutput\nYes\n\nInput\n3\nabc\n\nOutput\nNo\n\nInput\n3\njjj\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first example Slava can perform the following steps:   take all puppies of color 'a' (a total of two) and recolor them into 'b';  take all puppies of color 'd' (a total of two) and recolor them into 'c';  take all puppies of color 'b' (three puppies for now) and recolor them into 'c'. \n\nIn the second example it's impossible to recolor any of the puppies.\n\nIn the third example all the puppies' colors are the same; thus there's no need to recolor anything.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. For example, given n = 3, a solution set is: [   \"((()))\",   \"(()())\",   \"(())()\",   \"()(())\",   \"()()()\" \n]\n\"\"\"\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:",
    "17": "Python 3\n\"\"\"\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n\n\n\nFor example, given n = 3, a solution set is:\n\n\n[\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\n\"\"\"\nclass Solution:\n    def generateParenthesis(self, n: int) -> List[str]:",
    "18": "Python 3\n\"\"\"\n An ironman triathlon is a race where participants swim for $3.86$ km, ride a bicycle for $180.25$ km, and finally run a marathon, and it is considered one of the toughest sport events. Viveka has been training for an even more challenging competition: the $n$-athlon. In an $n$-athlon race, participants have to go from the starting point to the finishing point through several types of terrain: water, sand, ice, asphalt, etc. To make the race more interesting, participants are free to pick the route that they think suits best their abilities. Last year Viveka achieved an epic victory by skating the last $40$ km in $1$ hour over ice, while her arch-rival Veronica was stuck in a tar pit $1$ m from the finishing point. The terrain distribution for this year has been published and now it is your task as the optimization expert in Viveka s team to help her figure out the best route for the race. The competition takes place in a flat area, which we model as the 2D plane, and each type of terrain is shaped as a horizontal strip. Participants are not allowed to leave the race area. You know the position of each strip and Viveka s speed in that type of terrain. \n-----Input----- The first line contains two pairs of decimal numbers $x_ s$, $y_ s$, $x_ f$, $y_ f$, the $x$ and $y$ coordinates of the starting and finishing point, respectively, in meters. The second line contains one integer $n$ ($1 \\leq n \\leq 10000$), the number of layers. The third line contains $n-1$ decimal numbers, the $y$ coordinate of each change between layers. Layers are given in order, that is, $y_ s < y_1 < y_2 < \\cdots < y_{n-1} < y_ f$, so the shape of layer $i$ is $(-10000,10000)\\times (y_{i-1},y_{i})$. The first and last layers extend only until the $y$ coordinate of the starting and finishing point, this is they have shape $(-10000,10000)\\times (y_ s,y_1)$ and $(-10000,10000)\\times (y_{n-1},y_ f)$ respectively. The fourth line contains $n$ decimal numbers, Viveka\u2019s speed in each layer, in meters per second. All decimal numbers have absolute value at most $10^4$ and at most $4$ decimals. -----Output----- Output the minimum time required for Viveka to go from the starting to the finishing point. Your answer should be within absolute or relative error at most $10^{-6}$. -----Examples----- Sample Input: 0 0 0 100 2 50 5 1 Sample Output: 60\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nAn ironman triathlon is a race where participants swim for $3.86$ km, ride a bicycle for $180.25$ km, and finally run a marathon, and it is considered one of the toughest sport events. Viveka has been training for an even more challenging competition: the $n$-athlon. In an $n$-athlon race, participants have to go from the starting point to the finishing point through several types of terrain: water, sand, ice, asphalt, etc. To make the race more interesting, participants are free to pick the route that they think suits best their abilities. Last year Viveka achieved an epic victory by skating the last $40$ km in $1$ hour over ice, while her arch-rival Veronica was stuck in a tar pit $1$ m from the finishing point.\n\nThe terrain distribution for this year has been published and now it is your task as the optimization expert in Viveka\u2019s team to help her figure out the best route for the race. The competition takes place in a flat area, which we model as the 2D plane, and each type of terrain is shaped as a horizontal strip. Participants are not allowed to leave the race area. You know the position of each strip and Viveka\u2019s speed in that type of terrain.\n\n-----Input-----\nThe first line contains two pairs of decimal numbers $x_ s$, $y_ s$, $x_ f$, $y_ f$, the $x$ and $y$ coordinates of the starting and finishing point, respectively, in meters. The second line contains one integer $n$ ($1 \\leq n \\leq 10000$), the number of layers. The third line contains $n-1$ decimal numbers, the $y$ coordinate of each change between layers. Layers are given in order, that is, $y_ s < y_1 < y_2 < \\cdots < y_{n-1} < y_ f$, so the shape of layer $i$ is $(-10000,10000)\\times (y_{i-1},y_{i})$. The first and last layers extend only until the $y$ coordinate of the starting and finishing point, this is they have shape $(-10000,10000)\\times (y_ s,y_1)$ and $(-10000,10000)\\times (y_{n-1},y_ f)$ respectively. The fourth line contains $n$ decimal numbers, Viveka\u2019s speed in each layer, in meters per second. All decimal numbers have absolute value at most $10^4$ and at most $4$ decimals.\n\n-----Output-----\nOutput the minimum time required for Viveka to go from the starting to the finishing point. Your answer should be within absolute or relative error at most $10^{-6}$.\n\n-----Examples-----\nSample Input:\n0 0 0 100\n2\n50\n5 1\nSample Output:\n60\n\"\"\"\ndef code():"
}