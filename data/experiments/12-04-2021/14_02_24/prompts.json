{
    "0": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a sequence D_1, D_2, ..., D_N of length N.\nThe values of D_i are all distinct.\nDoes a tree with N vertices that satisfies the following conditions exist?\n - The vertices are numbered 1,2,..., N.\n - The edges are numbered 1,2,..., N-1, and Edge i connects Vertex u_i and v_i.\n - For each vertex i, the sum of the distances from i to the other vertices is D_i, assuming that the length of each edge is 1.\nIf such a tree exists, construct one such tree.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100000\n - 1 \\leq D_i \\leq 10^{12}\n - D_i are all distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nD_1\nD_2\n:\nD_N\n\n-----Output-----\nIf a tree with n vertices that satisfies the conditions does not exist, print -1.\nIf a tree with n vertices that satisfies the conditions exist, print n-1 lines.\nThe i-th line should contain u_i and v_i with a space in between.\nIf there are multiple trees that satisfy the conditions, any such tree will be accepted.\n\n-----Sample Input-----\n7\n10\n15\n13\n18\n11\n14\n19\n\n-----Sample Output-----\n1 2\n1 3\n1 5\n3 4\n5 6\n6 7\n\nThe tree shown below satisfies the conditions.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nWrite a function that calculates the sum of similarities of a string with each of its suffixes.\n\nExamples:\nInput:\nstring_suffix('ababaa')\nOutput:\n11\nExplanation:\nThe suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.\n\nInput:\nstring_suffix('abc')\nOutput:\n3\n\"\"\"\ndef string_suffix(s):",
    "3": "Python 3\n\"\"\"\nLet's say take 2 strings, A and B, and define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings `abc` and `abd` is 2, while the similarity of strings `aaa` and `aaab` is 3.\n\nwrite a function that calculates the sum of similarities of a string S with each of it's **suffixes**.\n\n```python\nstring_suffix('ababaa') => returns 11\nstring_suffix('abc') => returns 3\n```\n\nExplanation:\n\nIn the first case, the suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.\n\nFor the second case, the answer is simply 3 + 0 + 0 = 3.\n\nNote : Each string will have at least one character - no need to check for empty strings :)\n\"\"\"\ndef string_suffix(s):",
    "4": "Python 3\n\"\"\"\nFor an array $b$ of length $m$ we define the function $f$ as  $ f(b) = \\begin{cases} b[1] & \\quad \\text{if } m = 1 \\\\ f(b[1] \\oplus b[2],b[2] \\oplus b[3],\\dots,b[m-1] \\oplus b[m]) & \\quad \\text{otherwise,} \\end{cases} $ \n\nwhere $\\oplus$ is bitwise exclusive OR.\n\nYou are given an array $a$ and a few queries. Each query is represented as two integers $l$ and $r$. The answer is the maximum value of $f$ on all continuous subsegments of the array $a_l, a_{l+1}, \\ldots, a_r$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2^{30}-1$)\u00a0\u2014 the elements of the array.\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 100\\,000$)\u00a0\u2014 the number of queries.\n\nEach of the next $q$ lines contains a query represented as two integers $l$, $r$ ($1 \\le l \\le r \\le n$).\n\n\n-----Output-----\n\nPrint $q$ lines\u00a0\u2014 the answers for the queries.\n\n\n-----Examples-----\nInput\n3\n8 4 1\n2\n2 3\n1 2\n\nOutput\n5\n12\n\nInput\n6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 4\n1 2\n\nOutput\n60\n30\n12\n3\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nFor an array $b$ of length $m$ we define the function $f$ as  $ f(b) = \\begin{cases} b[1] & \\quad \\text{if } m = 1 \\\\ f(b[1] \\oplus b[2],b[2] \\oplus b[3],\\dots,b[m-1] \\oplus b[m]) & \\quad \\text{otherwise,} \\end{cases} $ \n\nwhere $\\oplus$ is bitwise exclusive OR.\n\nFor example, $f(1,2,4,8)=f(1\\oplus2,2\\oplus4,4\\oplus8)=f(3,6,12)=f(3\\oplus6,6\\oplus12)=f(5,10)=f(5\\oplus10)=f(15)=15$\n\nYou are given an array $a$ and a few queries. Each query is represented as two integers $l$ and $r$. The answer is the maximum value of $f$ on all continuous subsegments of the array $a_l, a_{l+1}, \\ldots, a_r$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5000$)\u00a0\u2014 the length of $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 2^{30}-1$)\u00a0\u2014 the elements of the array.\n\nThe third line contains a single integer $q$ ($1 \\le q \\le 100\\,000$)\u00a0\u2014 the number of queries.\n\nEach of the next $q$ lines contains a query represented as two integers $l$, $r$ ($1 \\le l \\le r \\le n$).\n\n\n-----Output-----\n\nPrint $q$ lines\u00a0\u2014 the answers for the queries.\n\n\n-----Examples-----\nInput\n3\n8 4 1\n2\n2 3\n1 2\n\nOutput\n5\n12\n\nInput\n6\n1 2 4 8 16 32\n4\n1 6\n2 5\n3 4\n1 2\n\nOutput\n60\n30\n12\n3\n\n\n\n-----Note-----\n\nIn first sample in both queries the maximum value of the function is reached on the subsegment that is equal to the whole segment.\n\nIn second sample, optimal segment for first query are $[3,6]$, for second query \u2014 $[2,5]$, for third \u2014 $[3,4]$, for fourth \u2014 $[1,2]$.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given n fountains with its beauty and cost are known.There are two types of money: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\n\nBuild two fountains with maximum total beauty so that both can be bought at the same time.\n\n\n-----Input-----\n\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\u00a0\u2014 the number of fountains, the number of coins and diamonds.\n\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \"C\" or \"D\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\n\n\n-----Output-----\n\nPrint the maximum total beauty of exactly two fountains that can build. If two fountains can't be built, print 0.\n\n\n-----Examples-----\nInput\n3 7 6\n10 8 C\n4 3 C\n5 6 D\n\nOutput\n9\n\nInput\n2 4 5\n2 5 C\n2 1 D\n\nOutput\n0\n\nInput\n3 10 10\n5 5 C\n5 5 C\n10 11 D\n\nOutput\n10\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nArkady plays Gardenscapes a lot. Arkady wants to build two new fountains. There are n available fountains, for each fountain its beauty and cost are known. There are two types of money in the game: coins and diamonds, so each fountain cost can be either in coins or diamonds. No money changes between the types are allowed.\n\nHelp Arkady to find two fountains with maximum total beauty so that he can buy both at the same time.\n\n\n-----Input-----\n\nThe first line contains three integers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000)\u00a0\u2014 the number of fountains, the number of coins and diamonds Arkady has.\n\nThe next n lines describe fountains. Each of these lines contain two integers b_{i} and p_{i} (1 \u2264 b_{i}, p_{i} \u2264 100 000)\u00a0\u2014 the beauty and the cost of the i-th fountain, and then a letter \"C\" or \"D\", describing in which type of money is the cost of fountain i: in coins or in diamonds, respectively.\n\n\n-----Output-----\n\nPrint the maximum total beauty of exactly two fountains Arkady can build. If he can't build two fountains, print 0.\n\n\n-----Examples-----\nInput\n3 7 6\n10 8 C\n4 3 C\n5 6 D\n\nOutput\n9\n\nInput\n2 4 5\n2 5 C\n2 1 D\n\nOutput\n0\n\nInput\n3 10 10\n5 5 C\n5 5 C\n10 11 D\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example Arkady should build the second fountain with beauty 4, which costs 3 coins. The first fountain he can't build because he don't have enough coins. Also Arkady should build the third fountain with beauty 5 which costs 6 diamonds. Thus the total beauty of built fountains is 9.\n\nIn the second example there are two fountains, but Arkady can't build both of them, because he needs 5 coins for the first fountain, and Arkady has only 4 coins.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven an integer n, generate all structurally unique binary search trees that store values 1 ...\u00a0n.\n\nExample:\n\n\nInput: 3\nOutput:\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:",
    "9": "Python 3\n\"\"\"\nGiven an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ...\u00a0n.\n\nExample:\n\n\nInput: 3\nOutput:\n[\n\u00a0 [1,null,3,2],\n\u00a0 [3,2,null,1],\n\u00a0 [3,1,null,null,2],\n\u00a0 [2,1,3],\n\u00a0 [1,null,2,null,3]\n]\nExplanation:\nThe above output corresponds to the 5 unique BST's shown below:\n\n   1         3     3      2      1\n    \\       /     /      / \\      \\\n     3     2     1      1   3      2\n    /     /       \\                 \\\n   2     1         2                 3\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def generateTrees(self, n: int) -> List[TreeNode]:",
    "10": "Python 3\n\"\"\"\nYou are given a list of words, you need to output a sorted list. Comparison should be case sensitive.\n\"\"\"\ndef find_children(santas_list, children):",
    "11": "Python 3\n\"\"\"\nChristmas is coming, and Santa has a long list to go through, to find who deserves presents for the big day. Go through a list of children, and return a list containing every child who appeared on Santa's list. Do not add any child more than once. Output should be sorted.\n~~~if:java\nFor java, use Lists.\n~~~\n\nComparison should be case sensitive and the returned list should contain only one copy of each name: `\"Sam\"` and `\"sam\"` are different, but `\"sAm\"` and `\"sAm\"` are not.\n\n\n\"\"\"\ndef find_children(santas_list, children):",
    "12": "Python 3\n\"\"\"\nGiven a string return \"Yes\" if there are two vowels adjacent in it (first and last letter are adjacent), \"No\" otherwise.\n\n-----Input:-----\nThe first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\nFirst line of every test case contains an integer N$N$ denoting the length of the string.\nSecond line contains a string S$S$ of length N$N$, consisting only of uppercase english alphabets.\n\n-----Output:-----\nFor each test case, print a single line containing \"Yes\" if any of the cyclic permutations of the string is clingy else print \"No\".\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n- String S$S$ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 80 points : Original$Original$ Constraints$Constraints$\n\n-----Sample Input:-----\n2\n5\nAUXFC\n6\nXBCDEF\n\n-----Sample Output:-----\nYes\n\nNo\n\n-----EXPLANATION:-----\nExample$Example$ case1:$ case 1: $ One of the cyclic permutation is the original string itself, which has \"A\" and \"U\" together.\nExample$Example$ case2:$ case 2: $     None of the cyclic permutation will have 2 vowels together.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nSaket loves to play with strings. One day , while he was having fun with Cyclic Permutations of available strings to him, he observed that despite being scarce in numbers Vowels were really clingy.Being clingy means for almost every given string, there was a Cyclic Permutation in which atleast two vowels were together.\nSo he decided to check this property for all the available strings to him. As the number of strings can be very large, help Saket determine whether the given string is clingy or not.\n\n-----Input:-----\nThe first line of the input contains a single integer T$T$ denoting the number of test cases. The description of T$T$ test cases follows.\nFirst line of every test case contains an integer N$N$ denoting the length of the string.\nSecond line contains a string S$S$ of length N$N$, consisting only of uppercase english alphabets.\n\n-----Output:-----\nFor each test case, print a single line containing \"Yes\" if any of the cyclic permutations of the string is clingy else print \"No\".\n\n-----Constraints-----\n- 1\u2264T\u22641000$1 \\leq T \\leq 1000$\n- 1\u2264N\u22641000$1 \\leq N \\leq 1000$\n- String S$S$ consists of only upper case english alphabets.\n\n-----Subtasks-----\n- 20 points : 1\u2264N\u22645$1 \\leq N \\leq 5$\n- 80 points : Original$Original$ Constraints$Constraints$\n\n-----Sample Input:-----\n2\n5\nAUXFC\n6\nXBCDEF\n\n-----Sample Output:-----\nYes\n\nNo\n\n-----EXPLANATION:-----\nExample$Example$ case1:$ case 1: $ One of the cyclic permutation is the original string itself, which has \"A\" and \"U\" together.\nExample$Example$ case2:$ case 2: $     None of the cyclic permutation will have 2 vowels together.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n# Task\n\nA number is a special number if its digits only consist 0, 1, 2, 3, 4 or 5.\n\nGiven a positive number determine if it is a special number or not. \n\n# Examples\n\nInput:\nspecialNumber(2)\nOutput: \"Special!!\"\nExplanation: \nIt's a single-digit number within the interval [0:5]. \n\nInput:\nspecialNumber(9)\nOutput: \"NOT!!\"\nExplanation:\nAlthough, it's a single-digit number but outside the interval [0:5].\n\nInput:\nspecialNumber(23)\nOutput: \"Special!!\"\nExplanation:\nAll the number's digits formed from the interval [0:5] digits.\n\nInput:\nspecialNumber(39)\nOutput: \"NOT!!\"\nExplanation:\nAlthough, there is a digit 3 within the interval but the second digit is not.\n\nInput:\nspecialNumber(59)\nOutput: \"NOT!!\"\nExplanation:\nAlthough, there is a digit 5 Within the interval but the second digit is not.\n\nInput:\nspecialNumber(513)\nOutput: \"Special!!\"\n\nInput:\nspecialNumber(709)\nOutput: \"NOT!!\"\n\n\"\"\"\ndef special_number(number):",
    "15": "Python 3\n\"\"\"\n# Definition \n\nA number is a **_Special Number_** *if it\u2019s digits only consist 0, 1, 2, 3, 4 or 5*\n\n**_Given_** a number *determine if it special number or not* .  \n\n\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_The number_** passed will be **_positive_** (N > 0) .\n\n* All **single-digit numbers** with in the interval **_[0:5]_** are considered as **_special number_**. \n___\n\n# Input >> Output Examples\n\n```\nspecialNumber(2) ==> return \"Special!!\"\n```\n## Explanation: \n\nIt's **_a single-digit number_** within the interval **_[0:5]_** . \n\n```\nspecialNumber(9) ==> return \"NOT!!\"\n```\n## Explanation:\n\nAlthough, it's a single-digit number but **_Outside the interval [0:5]_** .\n\n```\nspecialNumber(23) ==> return \"Special!!\"\n```\n## Explanation: \n\nAll **_the number's digits_** formed from the interval **_[0:5]_** digits .\n\n```\nspecialNumber(39) ==> return \"NOT!!\"\n```\n## Explanation: \n\nAlthough, *there is a digit (3) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(59) ==> return \"NOT!!\"\n```\n## Explanation:  \n\nAlthough, *there is a digit (5) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(513) ==> return \"Special!!\"\n```\n___\n```\nspecialNumber(709) ==> return \"NOT!!\"\n```\n___\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)          \n\n### ALL translation are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef special_number(number):",
    "16": "Python 3\n\"\"\"\nGiven a number N, return YES if it has an even number of positive divisors, NO otherwise.\n\n-----Input-----\nInput starts with an integer T denoting the number of test cases. Each test case starts with a line containing an integer N the number.\n\n-----Output-----\nOutcome of each game in a separate line.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10^3\n- 1 \u2264 N \u2264 10^18\n\n-----Sub tasks-----\n- Subtask #1:(10 points)\n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 103\n- Subtask #2:(25 points)\n\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 1016\n- Subtask #3:(65 points)\n\n- 1 \u2264 T \u2264 103\n- 1 \u2264 N \u2264 1018\n\n-----Example-----\nInput:\n2\n4\n5\n\nOutput:\nYES\nNO\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nSumit and Dhiraj are roommates in a hostel of NIT Jamshedpur,One day after completing there boring assignments of Artificial Intelligence, they decided to play a game as it was dhiraj,s idea to play a game so he started explaining the rules of the game to sumit.\nSo the game was as follows-They randomly took a number N after that they find all its divisors.Suppose first sumit took a divisor then dhiraj and so on.The player who will be having the last divisor with him will win the game.Rohit their mutual friend,was observing them play. Can you help Rohit predict the outcome of game? If Sumit wins print \"YES\" without quotes and \"NO\" without quotes, if Dhiraj wins\nthe game.\n\n-----Input-----\nInput starts with an integer T denoting the number of test cases Each test case starts with a line containing an integer N the number.\n\n-----Output-----\nOutcome of each game in a separate line\n\n-----Constraints-----\n- 1 \u2264 T \u2264 10^3\n- 1 \u2264 N \u2264 10^18\n\n-----Sub tasks-----\n- Subtask #1:(10 points)\n\n- 1 \u2264 T \u2264 10\n- 1 \u2264 N \u2264 103\n- Subtask #2:(25 points)\n\n- 1 \u2264 T \u2264 50\n- 1 \u2264 N \u2264 1016\n- Subtask #3:(65 points)\n\n- 1 \u2264 T \u2264 103\n- 1 \u2264 N \u2264 1018\n\n-----Example-----\nInput:\n2\n4\n5\n\nOutput:\nYES\nNO\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nImplement a function which creates a radix tree in which each node that is the only child is merged with its parent from a given list of words using dictionaries where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\nExamples:\n\nInput:\nradix_tree()\nOutput:\n{}\n\nInput:\nradix_tree(\"\")\nOutput:\n{}\n\nInput:\nradix_tree(\"\", \"\")\nOutput:\n{}\n\nInput:\nradix_tree(\"radix\", \"tree\")\nOutput:\n{\"radix\": {}, \"tree\": {}}\n\nInput:\nradix_tree(\"ape\", \"apple\")\nOutput:\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\nInput:\nradix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\nOutput:\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\nInput:\nradix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\nOutput:\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}}, \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\nInput:\nradix_tree(\"appleabcd\", \"apple\")\nOutput:\n{\"apple\": {\"abcd\": {}}}\n\"\"\"\ndef radix_tree(*words):",
    "19": "Python 3\n\"\"\"\nImplement a function which \ncreates a **[radix tree](https://en.wikipedia.org/wiki/Radix_tree)** (a space-optimized trie [prefix tree]) \nin which each node that is the only child is merged with its parent [unless a word from the input ends there]) \nfrom a given list of words \nusing dictionaries (aka hash maps or hash tables) where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\n### Examples:\n\n```python\n>>> radix_tree()\n{}\n\n>>> radix_tree(\"\")\n{}\n\n>>> radix_tree(\"\", \"\")\n{}\n\n>>> radix_tree(\"radix\", \"tree\")\n{\"radix\": {}, \"tree\": {}}\n\n>>> radix_tree(\"ape\", \"apple\")\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\n>>> radix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\n>>> radix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}},\n       \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\n>>> radix_tree(\"appleabcd\", \"apple\")\n{\"apple\": {\"abcd\": {}}}\n```\n\"\"\"\ndef radix_tree(*words):"
}