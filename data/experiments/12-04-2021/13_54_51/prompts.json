{
    "0": "Python 3\n\"\"\"\nReducing Problems - Bug Fixing #8\n\nTimmy's goal is to calculate the two teams scores and return the winner and sometimes teams don't enter their scores, total the scores out of 3!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"\ndef calculate_total(t1, t2):",
    "1": "Python 3\n\"\"\"\nReducing Problems - Bug Fixing #8\n\nOh no! Timmy's reduce is causing problems, Timmy's goal is to calculate the two teams scores and return the winner but timmy has gotten confused and sometimes teams don't enter their scores, total the scores out of 3! Help timmy fix his program!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"\ndef calculate_total(t1, t2):",
    "2": "Python 3\n\"\"\"\nGiven a string S, you have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated.\n\nExample:\nInput:\n'CodeWars'\nOutput\n'CdWr oeas'\n\"\"\"\ndef sort_my_string(s):",
    "3": "Python 3\n\"\"\"\nGiven a string S.\nYou have to return another string such that even-indexed and odd-indexed characters of S are grouped and groups are space-separated (see sample below)\n\nNote: \n0 is considered to be an even index. \nAll input strings are valid with no spaces\n\n\ninput:\n'CodeWars'\n\noutput\n'CdWr oeas'\n\nS[0] = 'C'\nS[1] = 'o'\nS[2] = 'd'\nS[3] = 'e'\nS[4] = 'W'\nS[5] = 'a'\nS[6] = 'r'\nS[7] = 's'\n\n\nEven indices 0, 2, 4, 6, so we have 'CdWr' as the first group\nodd ones are 1, 3, 5, 7, so the second group is 'oeas'\nAnd the final string to return is 'Cdwr oeas'\n\nEnjoy.\n\"\"\"\ndef sort_my_string(s):",
    "4": "Python 3\n\"\"\"\n\nCalculate the number of different collisions if a matrix N x M of N boys and M girls are given where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0 and collison occurs when two boys like the same girl. \n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nOnce N boys and M girls attended a party. You are given a matrix A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. Note that it is not necessary that if a boy x likes girl y, then girl y should like boy x.\nYou know that if there are two different boys x and y, who both like girl z, then there will be a collision.\nCan you calculate the number of different collisions at this party? Note that order of boys in the collision doesn't matter.\n\n-----Input-----\nThe first line contains a single integer T denoting the number of test cases. Then T test cases follow.\nThe first line of each test case contains two space separated integers N, M denoting the number of boys and girls, respectively.\nEach of the following N lines contain M characters, each of them is either '0' or '1'.\n\n-----Output-----\nFor each test case output a single line containing an integer corresponding to the number of collisions at the party.\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N, M \u2264 10\n\n-----Example-----\nInput:\n2\n4 3\n111\n100\n110\n000\n2 2\n10\n01\n\nOutput:\n4\n0\n\n-----Explanation-----\nExample Case 1. All three boys like the first girl, so there are (1, 2, 1), (1, 3, 1), (2, 3, 1) collisions with her. Boys 1 and 3 both like the second girl so this is one more collision. Only one boy likes the third girl, so there are no collisions with her and thus we have 4 collisions total.\nExample Case 2. For each girl there is only one boy who likes her, so there are no collisions at all.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nWrite a function that receives a list of pairs and returns the number of days that the company is represented in the foreign country. The first number of the pair is the number of the day of arrival and the second number of the pair is the day of departure of someone who travels, i.e. 1 January is number 1 and 31 of December is 365.\n\nExample:\nInput:\ndays_represented([[10,17],[200,207]])\nOutput:\n16\nExplanation:\nReturns 16 because there are two trips of 8 days, which add up to 16.\n\n\"\"\"\ndef days_represented(trips):",
    "7": "Python 3\n\"\"\"\nHow many days are we represented in a foreign country?\n\nMy colleagues make business trips to a foreign country. We must find the number of days our company is represented in a country. Every day that one or more colleagues are present in the country is a day that the company is represented. A single day cannot count for more than one day.\n\nWrite a function that recieves a list of pairs and returns the number of days that the company is represented in the foreign country. The first number of the pair is the number of the day of arrival and the second number of the pair is the day of departure of someone who travels, i.e. 1 january is number 1 and 31 of december is 365.\n\nExample:\n```python\ndays_represented([[10,17],[200,207]])\n```\n\nReturns 16 because there are two trips of 8 days, which add up to 16.\n\nHappy coding and rank this kata if you wish ;-)\n\"\"\"\ndef days_represented(trips):",
    "8": "Python 3\n\"\"\"\nWrite a function that among the given numbers finds one that is different in evenness, and return a position of this number.\n\nExamples:\nInput:\niq_test(\"2 4 7 8 10\")\nOutput:\n3\nExplanation:\nThird number is odd, while the rest of the numbers are even.\n\nInput:\niq_test(\"1 2 1 1\")\nOutput:\n2\nExplanation:\nSecond number is even, while the rest of the numbers are odd.\n\"\"\"\ndef iq_test(numbers):",
    "9": "Python 3\n\"\"\"\nBob is preparing to pass IQ test. The most frequent task in this test is `to find out which one of the given numbers differs from the others`. Bob observed that one number usually differs from the others in **evenness**. Help Bob \u2014 to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.\n\n`!` Keep in mind that your task is to help Bob solve a `real IQ test`, which means indexes of the elements start from `1 (not 0)`\n\n##Examples :\n\n \n```python\niq_test(\"2 4 7 8 10\") => 3 // Third number is odd, while the rest of the numbers are even\n\niq_test(\"1 2 1 1\") => 2 // Second number is even, while the rest of the numbers are odd\n```\n\"\"\"\ndef iq_test(numbers):",
    "10": "Python 3\n\"\"\"\nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once.\n\nWe hava two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow we concatenate these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThe sequence of $m$ integers is called the permutation if it contains all integers from $1$ to $m$ exactly once. The number $m$ is called the length of the permutation.\n\nDreamoon has two permutations $p_1$ and $p_2$ of non-zero lengths $l_1$ and $l_2$.\n\nNow Dreamoon concatenates these two permutations into another sequence $a$ of length $l_1 + l_2$. First $l_1$ elements of $a$ is the permutation $p_1$ and next $l_2$ elements of $a$ is the permutation $p_2$. \n\nYou are given the sequence $a$, and you need to find two permutations $p_1$ and $p_2$. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 10\\,000$) denoting the number of test cases in the input.\n\nEach test case contains two lines. The first line contains one integer $n$ ($2 \\leq n \\leq 200\\,000$): the length of $a$. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq n-1$).\n\nThe total sum of $n$ is less than $200\\,000$.\n\n\n-----Output-----\n\nFor each test case, the first line of output should contain one integer $k$: the number of ways to divide $a$ into permutations $p_1$ and $p_2$.\n\nEach of the next $k$ lines should contain two integers $l_1$ and $l_2$ ($1 \\leq l_1, l_2 \\leq n, l_1 + l_2 = n$), denoting, that it is possible to divide $a$ into two permutations of length $l_1$ and $l_2$ ($p_1$ is the first $l_1$ elements of $a$, and $p_2$ is the last $l_2$ elements of $a$). You can print solutions in any order.\n\n\n-----Example-----\nInput\n6\n5\n1 4 3 2 1\n6\n2 4 1 3 2 1\n4\n2 1 1 3\n4\n1 3 3 1\n12\n2 1 3 4 5 6 7 8 9 1 10 2\n3\n1 1 1\n\nOutput\n2\n1 4\n4 1\n1\n4 2\n0\n0\n1\n2 10\n0\n\n\n\n-----Note-----\n\nIn the first example, two possible ways to divide $a$ into permutations are $\\{1\\} + \\{4, 3, 2, 1\\}$ and $\\{1,4,3,2\\} + \\{1\\}$.\n\nIn the second example, the only way to divide $a$ into permutations is $\\{2,4,1,3\\} + \\{2,1\\}$.\n\nIn the third example, there are no possible ways.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n# Task\nYou are given some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.\n\n# Example\n\nInput: `V = [2, 3, 7, 4]`\nOutput: `1`\nExplanation: There is only `(2, 3, 4)` can form a triangle.\n\nInput: `V = [5, 6, 7, 8]`\nOutput: `4`\nExplanation: `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` \n\n# Input/Output\n\n - `[input]` integer array `V`\n\n stick lengths\n \n `3 <= V.length <= 100`\n \n `0 < V[i] <=100`\n\n\n - `[output]` an integer\n\n number of ways we can choose 3 sticks to form a triangle.\n\"\"\"\ndef counting_triangles(V):",
    "13": "Python 3\n\"\"\"\n# Task\nGiven some sticks by an array `V` of positive integers, where V[i] represents the length of the sticks, find the number of ways we can choose three of them to form a triangle.\n\n# Example\n\n For `V = [2, 3, 7, 4]`, the result should be `1`.\n\n There is only `(2, 3, 4)` can form a triangle.\n \n For `V = [5, 6, 7, 8]`, the result should be `4`.\n \n `(5, 6, 7), (5, 6, 8), (5, 7, 8), (6, 7, 8)` \n\n# Input/Output\n\n\n - `[input]` integer array `V`\n\n stick lengths\n \n `3 <= V.length <= 100`\n \n `0 < V[i] <=100`\n\n\n - `[output]` an integer\n\n number of ways we can choose 3 sticks to form a triangle.\n\"\"\"\ndef counting_triangles(V):",
    "14": "Python 3\n\"\"\"\nWrite a function that takes an arbitrary number of strings and interlaces them.\n\nExample 1:\nInput: `combineStrings('abc', '123')`\nOutput: `'a1b2c3'`\n\nExample 2:\nInput: `combineStrings('abcd', '123')`\nOutput: `'a1b2c3d'`\n\nExample 3:\nInput: `combineStrings('abc', '123', '\u00a3$%')`\nOutput: `'a1\u00a3b2$c3%'`\n\"\"\"\ndef combine_strings(*args):",
    "15": "Python 3\n\"\"\"\nWrite a function that takes an arbitrary number of strings and interlaces them (combines them by alternating characters from each string).\n\nFor example `combineStrings('abc', '123')` should return `'a1b2c3'`.\n\nIf the strings are different lengths the function should interlace them until each string runs out, continuing to add characters from the remaining strings.\n\nFor example `combineStrings('abcd', '123')` should return `'a1b2c3d'`.\n\nThe function should take any number of arguments and combine them.\n\nFor example `combineStrings('abc', '123', '\u00a3$%')` should return `'a1\u00a3b2$c3%'`.\n\n**Note: if only one argument is passed return only that string. If no arguments are passed return an empty string.**\n\"\"\"\ndef combine_strings(*args):",
    "16": "Python 3\n\"\"\"\n\nYou have find out the frequency of letters in a given string and print it as the new string which comprises of the letter followed by its frequency.For example string is- abcdabf. Then the new string is- a2b2c1d1f1\n\n-----Input-----\nThe input consists of a single line string without any space or numeric or special characters.\n\n-----Output-----\nIt will consist of in the new string which comprises the letters followed by each time it has occurred in the original string in order.\n\n-----Example-----\nInput:\ninformation\n\nOutput:\ni2n2f1o2r1m1a1t1\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA simple string contains a large repetition of letters within it. This problem is related to string handling and manipulation.  An original message is sent from planet Earth to planet Cybertron in form of a string. However, the letter position and string size is not important. The number of time each letter has occurred in the string is important. So the original string which is sent to Cybertron is encrypted in the new string which comprises the letters followed by each time it has occurred in the original string. Eg- original message is- abcdabf. Then the encrypted string is- a2b2c1d1f1\n\n-----Input-----\nThe input consists of a single line string without any space or numeric or special characters.\n\n-----Output-----\nIt will consist of in the encrypted string which comprises the letters followed by each time it has occurred in the original string in order.\n\n-----Example-----\nInput:\ninformation\n\nOutput:\ni2n2f1o2r1m1a1t1\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nGiven `num`. Find the total count of existing consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"\ndef consecutive_sum(num):",
    "19": "Python 3\n\"\"\"\nLet's say we have a number, `num`. Find the number of values of `n` such that: there exists `n` consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"\ndef consecutive_sum(num):"
}