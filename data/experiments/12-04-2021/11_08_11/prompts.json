{
    "0": "Python 3\n\"\"\"\n A tube has a leak at height $L$ millimeters (mm). If the water level is above the leak then water drains from the tube at a rate of $K$ millimeters per hour (mm/h). We want to figure out how much rain fell during a particular rainfall. We assume that the tube is high enough that it does not overflow. We also assume that rain falls at an (unknown) uniform rate during a rainfall, and that water does not evaporate from the tube. The height of the leak itself is also negligible.\n-----Input----- The input is a line with five positive numbers: $L$ $K$ $T_1$ $T_2$ $H$ where$L$ is where the leak is (mm)$K$ is the rate at which water leaks (mm/h)$T_1$ is the duration of the rainfall (h)$T_2$ is the time between the end of the rainfall and the observation of the water level (h)$H$ is the water level in the tube when we observe it (mm) Each number is at least $0.01$ and at most $1000.00$, and each is given with exactly two decimals. -----Output----- One line with two floating point numbers $F_1$ $F_2$ where $F_1$ is the smallest rainfall in millimeters that would result in the given observation, and $F_2$ is the largest rainfall in millimeters that would result in the given observation. Values with either absolute or relative error smaller than $10^{-6}$ are acceptable. -----Examples----- Sample Input: 80.00 0.50 2.00 1.50 80.00 Sample Output: 80.000000 80.759403\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nRainfall is measured in millimeters. The rain is collected in a vertical transparent tube with millimeter markings, and once the rain has stopped falling, one can check the height of the water in the tube.\n\nIn our problem, the tube unfortunately has a leak at height $L$ millimeters (mm). If the water level is above the leak then water drains from the tube at a rate of $K$ millimeters per hour (mm/h).\n\nWe want to figure out how much rain fell during a particular rainfall. We assume that the tube is high enough that it does not overflow. We also assume that rain falls at an (unknown) uniform rate during a rainfall, and that water does not evaporate from the tube. The height of the leak itself is also negligible.\n\n-----Input-----\nThe input is a line with five positive numbers: $L$ $K$ $T_1$ $T_2$ $H$ where$L$\n\nis where the leak is (mm)$K$\n\nis the rate at which water leaks (mm/h)$T_1$\n\nis the duration of the rainfall (h)$T_2$\n\nis the time between the end of the rainfall and the observation of the water level (h)$H$\n\nis the water level in the tube when we observe it (mm)\n\nEach number is at least $0.01$ and at most $1000.00$, and each is given with exactly two decimals.\n\n-----Output-----\nOne line with two floating point numbers $F_1$ $F_2$ where $F_1$ is the smallest rainfall in millimeters that would result in the given observation, and $F_2$ is the largest rainfall in millimeters that would result in the given observation. Values with either absolute or relative error smaller than $10^{-6}$ are acceptable.\n\n-----Examples-----\nSample Input:\n80.00 0.50 2.00 1.50 80.00\nSample Output:\n80.000000 80.759403\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n The current programming club president, Norbit, gives speeches at the weekly club meetings. Casual viewers are underwhelmed with the quality of Norbit's elocution. Specifically, Norbit often hesitates during his speeches with interjections like umm. You, however, are no casual viewer. You have noticed strange patterns in Norbit's speech. Norbit's interjections, when arranged together, form a binary code! By substituting $1$ s and $0$ s for u s and m s, respectively, you produce 7-bit binary ASCII codes that spell out secret messages. For example, the letter a has an ASCII code of $97$, which translates to a binary value of $1100001$ and an umm code of uummmmu. An umm code can be split up in the speech. For example, an encoding of a could be stretched across three utterances: uum, mmm, u (possibly with other non-umm code words occurring between them). Now that you have discovered Norbit's secret, you go back through transcripts of his previous speeches to decode his cleverly concealed messages. \n-----Input----- There is one line of input of length $S$ ($20 \\le S \\le 500000$), which ends with a single newline. Before the newline, the input may contain any characters in the ASCII range $32$ \u2013 $126$ (that is, space (\u2018 \u2019) through tilde (\u2018~\u2019)). Let\u2019s define a \u201cword\u201d as a space-delimited sequence of characters. If a word does not contain any letters or digits except lowercase u\u2019s and/or m\u2019s, then it is part of the umm-coded message. If a word contains digits or letters other than lowercase u and m, then it is not part of the umm-coded message (even if it does contain u or m). Note that a word that is part of the umm-coded message may contain punctuation (which is defined as anything other than letters, digits, or space). Naturally, you should only consider the u and m characters (and not punctuation) when decoding the umm-coded message. Let $M$ be the length of the entire umm-coded message (counting only its u and m characters). It is guaranteed that $M \\ge 7$ and $M$ is evenly divisible by $7$. -----Output----- Print the de-umm-coded message. Note that for this problem, the judging is case-sensitive. It is guaranteed that each character that should be output is in the same ASCII range as the input. -----Examples----- Sample Input: uu Friends m Romans ummuuummmuuuuumm countrymen mmuummmuu Sample Output: icpc\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe current programming club president, Norbit, gives speeches at the weekly club meetings. Casual viewers are underwhelmed with the quality of Norbit\u2019s elocution. Specifically, Norbit often hesitates during his speeches with interjections like \u201cumm.\u201d\n\nYou, however, are no casual viewer\u2013you are a computer scientist! You have noticed strange patterns in Norbit\u2019s speech. Norbit\u2019s interjections, when arranged together, form a binary code! By substituting $1$\u2019s and $0$\u2019s for u\u2019s and m\u2019s, respectively, you produce 7-bit binary ASCII codes that spell out secret messages.\n\nFor example, the letter \u2018a\u2019 has an ASCII code of $97$, which translates to a binary value of $1100001$ and an umm code of \u201cuummmmu\u201d. An umm code can be split up in the speech. For example, an encoding of \u2018a\u2019 could be stretched across three utterances: \u201cuum\u201d, \u201cmmm\u201d, \u201cu\u201d (possibly with other non-umm code words occurring between them).\n\nNow that you have discovered Norbit\u2019s secret, you go back through transcripts of his previous speeches to decode his cleverly concealed messages.\n\n-----Input-----\nThere is one line of input of length $S$ ($20 \\le S \\le 500000$), which ends with a single newline. Before the newline, the input may contain any characters in the ASCII range $32$ \u2013 $126$ (that is, space (\u2018 \u2019) through tilde (\u2018~\u2019)).\n\nLet\u2019s define a \u201cword\u201d as a space-delimited sequence of characters. If a word does not contain any letters or digits except lowercase u\u2019s and/or m\u2019s, then it is part of the umm-coded message. If a word contains digits or letters other than lowercase u and m, then it is not part of the umm-coded message (even if it does contain u or m). Note that a word that is part of the umm-coded message may contain punctuation (which is defined as anything other than letters, digits, or space). Naturally, you should only consider the u and m characters (and not punctuation) when decoding the umm-coded message. Let $M$ be the length of the entire umm-coded message (counting only its u and m characters). It is guaranteed that $M \\ge 7$ and $M$ is evenly divisible by $7$.\n\n-----Output-----\nPrint the de-umm-coded message. Note that for this problem, the judging is case-sensitive. It is guaranteed that each character that should be output is in the same ASCII range as the input.\n\n-----Examples-----\nSample Input:\nuu Friends m Romans ummuuummmuuuuumm countrymen mmuummmuu\nSample Output:\nicpc\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a set of cities. You can send a letter only if the recipient lives in another city. The cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city. For each city calculate two values   min_{i} and max_{i}, where min_{i} is the minimum cost of sending a letter from the i-th city to some other city, and max_{i} is the the maximum cost of sending a letter from the i-th city to some other city \n-----Input----- The first line of the input contains integer n (2 \u2264 n \u2264 10^5) \u2014 the number of cities in Lineland. The second line contains the sequence of n distinct integers x_1, x_2, ..., x_{n} ( - 10^9 \u2264 x_{i} \u2264 10^9), where x_{i} is the x-coordinate of the i-th city. All the x_{i}'s are distinct and follow in ascending order. -----Output----- Print n lines, the i-th line must contain two integers min_{i}, max_{i}, separated by a space, where min_{i} is the minimum cost of sending a letter from the i-th city, and max_{i} is the maximum cost of sending a letter from the i-th city. -----Examples----- Input 4 -5 -2 2 7 Output 3 12 3 9 4 7 5 12 Input 2 -1 1 Output 2 2 2 2\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nAll cities of Lineland are located on the Ox coordinate axis. Thus, each city is associated with its position x_{i} \u2014 a coordinate on the Ox axis. No two cities are located at a single point.\n\nLineland residents love to send letters to each other. A person may send a letter only if the recipient lives in another city (because if they live in the same city, then it is easier to drop in).\n\nStrange but true, the cost of sending the letter is exactly equal to the distance between the sender's city and the recipient's city.\n\nFor each city calculate two values \u200b\u200bmin_{i} and max_{i}, where min_{i} is the minimum cost of sending a letter from the i-th city to some other city, and max_{i} is the the maximum cost of sending a letter from the i-th city to some other city\n\n\n-----Input-----\n\nThe first line of the input contains integer n (2 \u2264 n \u2264 10^5) \u2014 the number of cities in Lineland. The second line contains the sequence of n distinct integers x_1, x_2, ..., x_{n} ( - 10^9 \u2264 x_{i} \u2264 10^9), where x_{i} is the x-coordinate of the i-th city. All the x_{i}'s are distinct and follow in ascending order.\n\n\n-----Output-----\n\nPrint n lines, the i-th line must contain two integers min_{i}, max_{i}, separated by a space, where min_{i} is the minimum cost of sending a letter from the i-th city, and max_{i} is the maximum cost of sending a letter from the i-th city.\n\n\n-----Examples-----\nInput\n4\n-5 -2 2 7\n\nOutput\n3 12\n3 9\n4 7\n5 12\n\nInput\n2\n-1 1\n\nOutput\n2 2\n2 2\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Consider a table G of size n   m such that G(i, j) = GCD(i, j) for all 1   i   n, 1   j   m. GCD(a, b) is the greatest common divisor of numbers a and b. You have a sequence of positive integer numbers a_1, a_2, ..., a_{k}. We say that this sequence occurs in table G if it coincides with consecutive elements in some row, starting from some position. More formally, such numbers 1   i   n and 1   j   m - k + 1 should exist that G(i, j + l - 1) = a_{l} for all 1   l   k. Determine if the sequence a occurs in table G. \n-----Input----- The first line contains three space-separated integers n, m and k (1 \u2264 n, m \u2264 10^12; 1 \u2264 k \u2264 10000). The second line contains k space-separated integers a_1, a_2, ..., a_{k} (1 \u2264 a_{i} \u2264 10^12). -----Output----- Print a single word \"YES\", if the given sequence occurs in table G, otherwise print \"NO\". -----Examples----- Input 100 100 5 5 2 1 2 1 Output YES Input 100 8 5 5 2 1 2 1 Output NO Input 100 100 7 1 2 3 4 5 6 7 Output NO -----Note----- Sample 1. The tenth row of table G starts from sequence {1, 2, 1, 2, 5, 2, 1, 2, 1, 10}. As you can see, elements from fifth to ninth coincide with sequence a. Sample 2. This time the width of table G equals 8. Sequence a doesn't occur there.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nConsider a table G of size n \u00d7 m such that G(i, j) = GCD(i, j) for all 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m. GCD(a, b) is the greatest common divisor of numbers a and b.\n\nYou have a sequence of positive integer numbers a_1, a_2, ..., a_{k}. We say that this sequence occurs in table G if it coincides with consecutive elements in some row, starting from some position. More formally, such numbers 1 \u2264 i \u2264 n and 1 \u2264 j \u2264 m - k + 1 should exist that G(i, j + l - 1) = a_{l} for all 1 \u2264 l \u2264 k.\n\nDetermine if the sequence a occurs in table G.\n\n\n-----Input-----\n\nThe first line contains three space-separated integers n, m and k (1 \u2264 n, m \u2264 10^12; 1 \u2264 k \u2264 10000). The second line contains k space-separated integers a_1, a_2, ..., a_{k} (1 \u2264 a_{i} \u2264 10^12).\n\n\n-----Output-----\n\nPrint a single word \"YES\", if the given sequence occurs in table G, otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n100 100 5\n5 2 1 2 1\n\nOutput\nYES\n\nInput\n100 8 5\n5 2 1 2 1\n\nOutput\nNO\n\nInput\n100 100 7\n1 2 3 4 5 6 7\n\nOutput\nNO\n\n\n\n-----Note-----\n\nSample 1. The tenth row of table G starts from sequence {1, 2, 1, 2, 5, 2, 1, 2, 1, 10}. As you can see, elements from fifth to ninth coincide with sequence a.\n\nSample 2. This time the width of table G equals 8. Sequence a doesn't occur there.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You have written on a piece of paper an array of n positive integers a[1], a[2], ..., a[n] and m good pairs of integers (i_1, j_1), (i_2, j_2), ..., (i_{m}, j_{m}). Each good pair (i_{k}, j_{k}) meets the following conditions: i_{k} + j_{k} is an odd number and 1   i_{k} < j_{k}   n. In one operation you can perform a sequence of actions:   take one of the good pairs (i_{k}, j_{k}) and some integer v (v > 1), which divides both numbers a[i_{k}] and a[j_{k}];  divide both numbers by v, i. e. perform the assignments: $a [ i_{k} ] = \\frac{a [ i_{k} ]}{v}$ and $a [ j_{k} ] = \\frac{a [ j_{k} ]}{v}$.  Determine the maximum number of operations you can sequentially perform on the given array. Note that one pair may be used several times in the described operations. \n-----Input----- The first line contains two space-separated integers n, m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100). The second line contains n space-separated integers a[1], a[2], ..., a[n] (1 \u2264 a[i] \u2264 10^9) \u2014 the description of the array. The following m lines contain the description of good pairs. The k-th line contains two space-separated integers i_{k}, j_{k} (1 \u2264 i_{k} < j_{k} \u2264 n, i_{k} + j_{k} is an odd number). It is guaranteed that all the good pairs are distinct. -----Output----- Output the answer for the problem. -----Examples----- Input 3 2 8 3 8 1 2 2 3 Output 0 Input 3 2 8 12 8 1 2 2 3 Output 2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou have written on a piece of paper an array of n positive integers a[1], a[2], ..., a[n] and m good pairs of integers (i_1, j_1), (i_2, j_2), ..., (i_{m}, j_{m}). Each good pair (i_{k}, j_{k}) meets the following conditions: i_{k} + j_{k} is an odd number and 1 \u2264 i_{k} < j_{k} \u2264 n.\n\nIn one operation you can perform a sequence of actions:   take one of the good pairs (i_{k}, j_{k}) and some integer v (v > 1), which divides both numbers a[i_{k}] and a[j_{k}];  divide both numbers by v, i. e. perform the assignments: $a [ i_{k} ] = \\frac{a [ i_{k} ]}{v}$ and $a [ j_{k} ] = \\frac{a [ j_{k} ]}{v}$. \n\nDetermine the maximum number of operations you can sequentially perform on the given array. Note that one pair may be used several times in the described operations.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers n, m (2 \u2264 n \u2264 100, 1 \u2264 m \u2264 100).\n\nThe second line contains n space-separated integers a[1], a[2], ..., a[n] (1 \u2264 a[i] \u2264 10^9) \u2014 the description of the array.\n\nThe following m lines contain the description of good pairs. The k-th line contains two space-separated integers i_{k}, j_{k} (1 \u2264 i_{k} < j_{k} \u2264 n, i_{k} + j_{k} is an odd number).\n\nIt is guaranteed that all the good pairs are distinct.\n\n\n-----Output-----\n\nOutput the answer for the problem.\n\n\n-----Examples-----\nInput\n3 2\n8 3 8\n1 2\n2 3\n\nOutput\n0\n\nInput\n3 2\n8 12 8\n1 2\n2 3\n\nOutput\n2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n A tennis match involves three people: two players and an umpire. Each of these has to come from a different country. There are $N$ countries, and the $i$th country has $a_ i$ tennis players and $b_ i$ umpires. (Nobody can be both a player and an umpire.) How many different tennis matches are possible? Two tennis matches are different if the sets of involved people are different. \n-----Input----- The first line contains an integer $N$, where $3 \\leq N \\leq 10^5$. The following $N$ lines each contain two integers $a_ i$ and $b_ i$ with $0 \\leq a_ i, b_ i \\leq 10^6$. You can assume $\\sum _{i=1}^N a_ i \\leq 10^6$ and $\\sum _{i=1}^N b_ i \\leq 10^6$. -----Output----- A single integer, the number of possible different tennis matches. -----Explanation of Sample 1----- Assume the players from the first country are called $A_1$ and $A_2$, the players from the second country are called $B_1$ and $B_2$, and the umpire from the third country is called $C$. Then there are $4$ matches where $C$ is the umpire: $\\{ A_1, B_1, C\\} $, $\\{ A_1, B_2, C\\} $, $\\{ A_2, B_1, C\\} $, and $\\{ A_2, B_2, C\\} $. Similarly, there are $8$ matches with the other umpires. In total, there are $12$ possible different matches. -----Examples----- Sample Input: 3 2 1 2 1 2 1 Sample Output: 12\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nA tennis match involves three people: two players and an umpire. Each of these has to come from a different country. There are $N$ countries, and the $i$th country has $a_ i$ tennis players and $b_ i$ umpires. (Nobody can be both a player and an umpire.) How many different tennis matches are possible? Two tennis matches are different if the sets of involved people are different.\n\n-----Input-----\nThe first line contains an integer $N$, where $3 \\leq N \\leq 10^5$. The following $N$ lines each contain two integers $a_ i$ and $b_ i$ with $0 \\leq a_ i, b_ i \\leq 10^6$. You can assume $\\sum _{i=1}^N a_ i \\leq 10^6$ and $\\sum _{i=1}^N b_ i \\leq 10^6$.\n\n-----Output-----\nA single integer, the number of possible different tennis matches.\n\n-----Explanation of Sample 1-----\nAssume the players from the first country are called $A_1$ and $A_2$, the players from the second country are called $B_1$ and $B_2$, and the umpire from the third country is called $C$. Then there are $4$ matches where $C$ is the umpire: $\\{ A_1, B_1, C\\} $, $\\{ A_1, B_2, C\\} $, $\\{ A_2, B_1, C\\} $, and $\\{ A_2, B_2, C\\} $. Similarly, there are $8$ matches with the other umpires. In total, there are $12$ possible different matches.\n\n-----Examples-----\nSample Input:\n3\n2 1\n2 1\n2 1\nSample Output:\n12\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n The world is modeled as an undirected graph with n nodes and m edges. k of the nodes are home to the governments of the k countries that make up the world. There is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable. Hongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add. \n-----Input----- The first line of input will contain three integers n, m and k (1 \u2264 n \u2264 1 000, 0 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of vertices and edges in the graph, and the number of vertices that are homes of the government.  The next line of input will contain k integers c_1, c_2, ..., c_{k} (1 \u2264 c_{i} \u2264 n). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world. The following m lines of input will contain two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n). This denotes an undirected edge between nodes u_{i} and v_{i}. It is guaranteed that the graph described by the input is stable. -----Output----- Output a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable. -----Examples----- Input 4 1 2 1 3 1 2 Output 2 Input 3 3 1 2 1 2 1 3 2 3 Output 0 -----Note----- For the first sample test, the graph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them. For the second sample test, the graph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nHongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries.\n\nThe world can be modeled as an undirected graph with n nodes and m edges. k of the nodes are home to the governments of the k countries that make up the world.\n\nThere is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable.\n\nHongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add.\n\n\n-----Input-----\n\nThe first line of input will contain three integers n, m and k (1 \u2264 n \u2264 1 000, 0 \u2264 m \u2264 100 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of vertices and edges in the graph, and the number of vertices that are homes of the government. \n\nThe next line of input will contain k integers c_1, c_2, ..., c_{k} (1 \u2264 c_{i} \u2264 n). These integers will be pairwise distinct and denote the nodes that are home to the governments in this world.\n\nThe following m lines of input will contain two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n). This denotes an undirected edge between nodes u_{i} and v_{i}.\n\nIt is guaranteed that the graph described by the input is stable.\n\n\n-----Output-----\n\nOutput a single integer, the maximum number of edges Hongcow can add to the graph while keeping it stable.\n\n\n-----Examples-----\nInput\n4 1 2\n1 3\n1 2\n\nOutput\n2\n\nInput\n3 3 1\n2\n1 2\n1 3\n2 3\n\nOutput\n0\n\n\n\n-----Note-----\n\nFor the first sample test, the graph looks like this:  [Image]  Vertices 1 and 3 are special. The optimal solution is to connect vertex 4 to vertices 1 and 2. This adds a total of 2 edges. We cannot add any more edges, since vertices 1 and 3 cannot have any path between them.\n\nFor the second sample test, the graph looks like this:  $\\infty$  We cannot add any more edges to this graph. Note that we are not allowed to add self-loops, and the graph must be simple.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given an array consisting of $n$ integers $a_i$. All numbers in this array are of equal length (that is, they consist of the same number of digits). Your task is to help students to calculate $\\sum_{i = 1}^{n}\\sum_{j = 1}^{n} f(a_i, a_j)$ modulo $998\\,244\\,353$. \n-----Input----- The first line of the input contains a single integer $n$ ($1 \\le n \\le 100\\,000$) \u2014 the number of elements in the array. The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array. All numbers $a_1, a_2, \\dots, a_n$ are of equal length (that is, they consist of the same number of digits). -----Output----- Print the answer modulo $998\\,244\\,353$. -----Examples----- Input 3 12 33 45 Output 26730 Input 2 123 456 Output 1115598 Input 1 1 Output 11 Input 5 1000000000 1000000000 1000000000 1000000000 1000000000 Output 265359409\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThis problem differs from the next one only in the presence of the constraint on the equal length of all numbers $a_1, a_2, \\dots, a_n$. Actually, this problem is a subtask of the problem D2 from the same contest and the solution of D2 solves this subtask too.\n\nA team of SIS students is going to make a trip on a submarine. Their target is an ancient treasure in a sunken ship lying on the bottom of the Great Rybinsk sea. Unfortunately, the students don't know the coordinates of the ship, so they asked Meshanya (who is a hereditary mage) to help them. He agreed to help them, but only if they solve his problem.\n\nLet's denote a function that alternates digits of two numbers $f(a_1 a_2 \\dots a_{p - 1} a_p, b_1 b_2 \\dots b_{q - 1} b_q)$, where $a_1 \\dots a_p$ and $b_1 \\dots b_q$ are digits of two integers written in the decimal notation without leading zeros.\n\nIn other words, the function $f(x, y)$ alternately shuffles the digits of the numbers $x$ and $y$ by writing them from the lowest digits to the older ones, starting with the number $y$. The result of the function is also built from right to left (that is, from the lower digits to the older ones). If the digits of one of the arguments have ended, then the remaining digits of the other argument are written out. Familiarize with examples and formal definitions of the function below.\n\nFor example: $$f(1111, 2222) = 12121212$$ $$f(7777, 888) = 7787878$$ $$f(33, 44444) = 4443434$$ $$f(555, 6) = 5556$$ $$f(111, 2222) = 2121212$$\n\nFormally,  if $p \\ge q$ then $f(a_1 \\dots a_p, b_1 \\dots b_q) = a_1 a_2 \\dots a_{p - q + 1} b_1 a_{p - q + 2} b_2 \\dots a_{p - 1} b_{q - 1} a_p b_q$;  if $p < q$ then $f(a_1 \\dots a_p, b_1 \\dots b_q) = b_1 b_2 \\dots b_{q - p} a_1 b_{q - p + 1} a_2 \\dots a_{p - 1} b_{q - 1} a_p b_q$. \n\nMishanya gives you an array consisting of $n$ integers $a_i$. All numbers in this array are of equal length (that is, they consist of the same number of digits). Your task is to help students to calculate $\\sum_{i = 1}^{n}\\sum_{j = 1}^{n} f(a_i, a_j)$ modulo $998\\,244\\,353$.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 100\\,000$) \u2014 the number of elements in the array. The second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the elements of the array. All numbers $a_1, a_2, \\dots, a_n$ are of equal length (that is, they consist of the same number of digits).\n\n\n-----Output-----\n\nPrint the answer modulo $998\\,244\\,353$.\n\n\n-----Examples-----\nInput\n3\n12 33 45\n\nOutput\n26730\nInput\n2\n123 456\n\nOutput\n1115598\nInput\n1\n1\n\nOutput\n11\nInput\n5\n1000000000 1000000000 1000000000 1000000000 1000000000\n\nOutput\n265359409\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are broke. A generous gazillionaire friend has offered to lend you an arbitrary amount of money (as much as you need), without interest, to invest in the stock market. After making some profit you will then return the original sum to your friend, leaving you with the remainder. You can only invest once in each investment opportunity, but you can invest in as many different investment opportunities as you like. For example, consider the first sample. If you buy only the second investment (which costs $15$ euros) you will earn $p_2 = 10$ euros per day. After two days you will have earned $20$ euros, exactly enough to pay off your friend (from whom you borrowed $15$ euros) and retire with the remaining profit ($5$ euros). There is no way to make a net amount of $5$ euros in a single day, so two days is the fastest possible.\n-----Input-----  - The first line contains the number of investment options $1 \\leq n \\leq 10^5$ and the minimum amount of money you need to retire $1 \\leq M \\leq 10^9$.  - Then, $n$ lines follow. Each line $i$ has two integers: the daily profit of this investment ${1 \\leq p_ i \\leq 10^9}$ and its initial cost $1 \\leq c_ i \\leq 10^9$. -----Output----- Print the minimum number of days needed to recoup your investments and retire with at least $M$ euros, if you follow an optimal investment strategy. -----Examples----- Sample Input 1: 2 5 4 10 10 15 Sample Output 1: 2 Sample Input 2: 4 10 1 8 3 12 4 17 10 100 Sample Output 2: 6\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nBeing a responsible young adult, you have decided to start planning for retirement. Doing some back-of-the-envelope calculations, you figured out you need at least $M$ euros to retire comfortably.\n\nYou are currently broke, but fortunately a generous gazillionaire friend has offered to lend you an arbitrary amount of money (as much as you need), without interest, to invest in the stock market. After making some profit you will then return the original sum to your friend, leaving you with the remainder.\n\nAvailable to you are $n$ investment opportunities, the $i$-th of which costs $c_ i$ euros. You also used your computer science skills to predict that the $i$-th investment will earn you $p_ i$ euros per day. What is the minimum number of days you need before you can pay back your friend and retire? You can only invest once in each investment opportunity, but you can invest in as many different investment opportunities as you like.\n\nFor example, consider the first sample. If you buy only the second investment (which costs $15$ euros) you will earn $p_2 = 10$ euros per day. After two days you will have earned $20$ euros, exactly enough to pay off your friend (from whom you borrowed $15$ euros) and retire with the remaining profit ($5$ euros). There is no way to make a net amount of $5$ euros in a single day, so two days is the fastest possible.\n\n-----Input-----\n - The first line contains the number of investment options $1 \\leq n \\leq 10^5$ and the minimum amount of money you need to retire $1 \\leq M \\leq 10^9$.\n - Then, $n$ lines follow. Each line $i$ has two integers: the daily profit of this investment ${1 \\leq p_ i \\leq 10^9}$ and its initial cost $1 \\leq c_ i \\leq 10^9$.\n\n-----Output-----\nPrint the minimum number of days needed to recoup your investments and retire with at least $M$ euros, if you follow an optimal investment strategy.\n\n-----Examples-----\nSample Input 1:\n2 5\n4 10\n10 15\nSample Output 1:\n2\n\nSample Input 2:\n4 10\n1 8\n3 12\n4 17\n10 100\nSample Output 2:\n6\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a connected graph consisting of chambers and bidirectional tunnels connecting them. Mother mole wants to use the opportunity to teach her two mole kids how to dig a tunnel network. As an initial quick demonstration, mother mole is going to start by digging out a few of the chambers and tunnels, in the form of a non-self-intersecting path in the planned tunnel network. She will then divide the remaining chambers between the two mole kids, making sure that each mole kid has to dig out the same number of chambers, or else one of the mole kids will become sad. (The tunnels are much easier to dig out, and thus of no concern.) The kids may work on their assigned chambers in any order they like. Since the mole kids do not have much experience with digging tunnel networks, mother mole realises one issue with her plan: if there is a tunnel between a pair of chambers that are assigned to different mole kids, there is a risk of an accident during the excavation of that tunnel if the other mole kid happens to be digging in the connecting chamber at the same time. Help mother mole decide which path to use for her initial demonstration, and how to divide the remaining chambers evenly, so that no tunnel connects a pair of chambers assigned to different mole kids. The initial path must consist of at least one chamber and must not visit a chamber more than once.\n-----Input----- The input consists of:  - One line with two integers $c$ and $t$ ($1 \\leq c \\leq 2 \\cdot 10^5$, $0 \\leq t \\leq 2 \\cdot 10^5$), the number of chambers and tunnels in the planned tunnel network.  - $t$ lines, each containing two integers $a$ and $b$ ($1 \\leq a,b \\leq c$, $a \\neq b$), describing a bidirectional tunnel between chambers $a$ and $b$. The chambers are numbered from $1$ to $c$. There is at most one tunnel between any pair of chambers, and there exists a path in the network between any pair of chambers. -----Output----- First output two integers $p$ and $s$, the number of chambers on the path in mother mole\u2019s initial demonstration and the number of chambers each mole kid has to dig out. Then output a line containing the $p$ chambers in mother mole\u2019s initial path, in the order that she digs them out. Then output two more lines, each containing the $s$ chambers that the respective mole kid has to dig out, in any order. The input is chosen such that there exists at least one valid solution. If there are multiple valid solutions, you may output any one of them. -----Examples----- Sample Input 1: 3 2 3 1 2 1 Sample Output 1: 3 0 3 1 2 Sample Input 2: 4 3 1 3 2 3 3 4 Sample Output 2: 2 1 3 4 2 1\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe mole family recently decided to dig a new tunnel network. The layout, which has already been decided, consists of chambers and bidirectional tunnels connecting them, forming a connected graph. Mother mole wants to use the opportunity to teach her two mole kids how to dig a tunnel network. \n\nAs an initial quick demonstration, mother mole is going to start by digging out a few of the chambers and tunnels, in the form of a non-self-intersecting path in the planned tunnel network. She will then divide the remaining chambers between the two mole kids, making sure that each mole kid has to dig out the same number of chambers, or else one of the mole kids will become sad. (The tunnels are much easier to dig out, and thus of no concern.) The kids may work on their assigned chambers in any order they like.\n\nSince the mole kids do not have much experience with digging tunnel networks, mother mole realises one issue with her plan: if there is a tunnel between a pair of chambers that are assigned to different mole kids, there is a risk of an accident during the excavation of that tunnel if the other mole kid happens to be digging in the connecting chamber at the same time.\n\nHelp mother mole decide which path to use for her initial demonstration, and how to divide the remaining chambers evenly, so that no tunnel connects a pair of chambers assigned to different mole kids. The initial path must consist of at least one chamber and must not visit a chamber more than once.\n\n-----Input-----\nThe input consists of:\n - One line with two integers $c$ and $t$ ($1 \\leq c \\leq 2 \\cdot 10^5$, $0 \\leq t \\leq 2 \\cdot 10^5$), the number of chambers and tunnels in the planned tunnel network.\n - $t$ lines, each containing two integers $a$ and $b$ ($1 \\leq a,b \\leq c$, $a \\neq b$), describing a bidirectional tunnel between chambers $a$ and $b$.\n\nThe chambers are numbered from $1$ to $c$. There is at most one tunnel between any pair of chambers, and there exists a path in the network between any pair of chambers.\n\n-----Output-----\nFirst output two integers $p$ and $s$, the number of chambers on the path in mother mole\u2019s initial demonstration and the number of chambers each mole kid has to dig out. Then output a line containing the $p$ chambers in mother mole\u2019s initial path, in the order that she digs them out. Then output two more lines, each containing the $s$ chambers that the respective mole kid has to dig out, in any order.\n\nThe input is chosen such that there exists at least one valid solution. If there are multiple valid solutions, you may output any one of them.\n\n-----Examples-----\nSample Input 1:\n3 2\n3 1\n2 1\nSample Output 1:\n3 0\n3 1 2\n\nSample Input 2:\n4 3\n1 3\n2 3\n3 4\nSample Output 2:\n2 1\n3 4\n2\n1\n\"\"\"\ndef code():"
}