{
    "0": "\n    L, K, T1, T2, H = [float(x) for x in input().split()]\n    F1 = (H - L) / (K * (T1 - T2))\n    F2 = (H - L) / (K * T1)\n    print(\"{:.2f}\".format(F1), \"{:.2f}\".format(F2))\n\nif __name__ == '__main__':\n    code()",
    "1": "\n    L, K, T1, T2, H = [float(x) for x in input().split()]\n    F1 = (H - L) / (K * (T1 - T2))\n    F2 = (H - L) / (K * T1)\n    print(\"{:.2f} {:.2f}\".format(F1, F2))\n\nif __name__ == \"__main__\":\n    code()",
    "2": "\n    s = input()\n    s = s.split()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower()\n            if s[i].count('u') == s[i].count('m'):\n                s[i] = s[i].replace('u','1')\n                s[i] = s[i].replace('m','0')\n                s[i] = s[i].replace(' ','')\n                s[i] = chr(int(s[i],2))\n            else:\n                s[i] = ''\n        else:\n            s[i] = ''\n    print(''.join(s))",
    "3": "\n    s = input()\n    s = s.split()\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].replace('u','1').replace('m','0')\n            s[i] = chr(int(s[i],2))\n    print(' '.join(s))",
    "4": "\n    n = int(input())\n    x = list(map(int, input().split()))\n    min_x = [0] * n\n    max_x = [0] * n\n    min_x[0] = x[0]\n    max_x[0] = x[0]\n    for i in range(1, n):\n        min_x[i] = min(x[i], min_x[i-1])\n        max_x[i] = max(x[i], max_x[i-1])\n    for i in range(n):\n        print(min_x[i], max_x[i], sep=' ')",
    "5": "\n    n = int(input())\n    x = list(map(int, input().split()))\n    min_ = [0] * n\n    max_ = [0] * n\n    min_[0] = x[0]\n    max_[0] = x[0]\n    for i in range(1, n):\n        min_[i] = min(x[i], min_[i-1])\n        max_[i] = max(x[i], max_[i-1])\n    for i in range(n):\n        print(min_[i], max_[i])\n",
    "6": "\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k > m:\n        print(\"NO\")\n        return\n    for i in range(n):\n        for j in range(m - k + 1):\n            if a == []:\n                break\n            if a[0] == gcd(i + 1, j + 1 + k - 1):\n                a.pop(0)\n    if a == []:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n",
    "7": "\n    n, m, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k > m:\n        print(\"NO\")\n        return\n    for i in range(n):\n        for j in range(m - k + 1):\n            if a[0] == G[i][j]:\n                for l in range(1, k):\n                    if a[l] != G[i][j + l]:\n                        break\n                else:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n    return\n\nG = [[0 for i in range(10**12)] for j in range(10**12)]\nfor i in range(1, 10**12):\n    for j in range(1, 10**12):\n        G[i][j] = gcd(i, j)\n",
    "8": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    good_pairs = []\n    for i in range(m):\n        good_pairs.append(list(map(int, input().split())))\n    max_operations = 0\n    for i in range(m):\n        if a[good_pairs[i][0]-1] % good_pairs[i][1] == 0:\n            max_operations += 1\n        else:\n            max_operations += 2\n    print(max_operations)",
    "9": "\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    good_pairs = []\n    for i in range(m):\n        good_pairs.append(list(map(int, input().split())))\n    max_count = 0\n    for i in range(m):\n        count = 0\n        while a[good_pairs[i][0]-1] % 2 == 0 and a[good_pairs[i][1]-1] % 2 == 0:\n            a[good_pairs[i][0]-1] = a[good_pairs[i][0]-1] // 2\n            a[good_pairs[i][1]-1] = a[good_pairs[i][1]-1] // 2\n            count += 1\n        max_count = max(max_count, count)\n    print(max_count)\n",
    "10": "\n    N = int(input())\n    A = []\n    B = []\n    for i in range(N):\n        A.append(int(input()))\n        B.append(int(input()))\n    A.sort()\n    B.sort()\n    count = 0\n    for i in range(N):\n        count += A[i]*B[i]\n    print(count)",
    "11": "\n    N = int(input())\n    A = []\n    B = []\n    for i in range(N):\n        a, b = map(int, input().split())\n        A.append(a)\n        B.append(b)\n    A.sort()\n    B.sort()\n    ans = 0\n    for i in range(N):\n        ans += A[i]*B[i]\n    print(ans)\n",
    "12": "\n    n, m, k = map(int, input().split())\n    countries = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        edges.append(list(map(int, input().split())))\n    edges.sort(key=lambda x: x[2])\n    for i in range(m):\n        if countries[edges[i][0]-1] != countries[edges[i][1]-1]:\n            countries[edges[i][0]-1] = countries[edges[i][1]-1]\n    print(countries.count(countries[0]))\n",
    "13": "\n    n, m, k = map(int, input().split())\n    countries = list(map(int, input().split()))\n    edges = []\n    for i in range(m):\n        edges.append(list(map(int, input().split())))\n    # print(n, m, k, countries, edges)\n    # print(countries)\n    # print(edges)\n    # print(len(countries))\n    # print(len(edges))\n    # print(len(set(countries)))\n    # print(len(set(edges)))\n    # print(len(set(countries)) == len(countries))\n    # print(len(set(edges)) == len(edges))\n    # print(len(set(countries)) == len(set(edges)))\n    # print(len(set(countries)) == k)\n    # print(len(set(edges)) == m)\n    # print(len(set(countries)) == len(set(edges)) == k)\n    # print(len(set(countries)) == len(set(edges)) == k == m)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries))\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges))\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)))\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges))\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m == m)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m == m == n)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m == m == n == n)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m == m == n == n == len(countries))\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m == m == n == n == len(countries) == len(edges))\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m == len(edges) == m == m == n == n == len(countries) == len(edges) == m)\n    # print(len(set(countries)) == len(set(edges)) == k == m == n == len(countries) == len(edges) == len(set(edges)) == m",
    "14": "\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    sum = 0\n    for i in range(n):\n        for j in range(n):\n            sum += f(a[i], a[j])\n    print(sum % 998244353)\n\ndef f(a, b):\n    return (a * b) % 998244353\n",
    "15": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        for j in range(n):\n            s += f(a[i], a[j])\n    print(s % 998244353)\n\ndef f(a, b):\n    if len(str(a)) == len(str(b)):\n        return int(str(b) + str(a))\n    elif len(str(a)) > len(str(b)):\n        return int(str(a)[-len(str(b)):] + str(b) + str(a)[:-len(str(b))])\n    else:\n        return int(str(b)[-len(str(a)):] + str(a) + str(b)[:-len(str(a))])\n",
    "16": "\n    n, m = [int(x) for x in input().split()]\n    profits = []\n    costs = []\n    for i in range(n):\n        p, c = [int(x) for x in input().split()]\n        profits.append(p)\n        costs.append(c)\n    profits.sort()\n    costs.sort()\n    days = 0\n    i = 0\n    j = 0\n    while m > 0:\n        if costs[i] <= m:\n            m -= costs[i]\n            days += 1\n            i += 1\n        else:\n            m += profits[j]\n            days += 1\n            j += 1\n    print(days)\n",
    "17": "\n    n, m = map(int, input().split())\n    profits = []\n    costs = []\n    for i in range(n):\n        p, c = map(int, input().split())\n        profits.append(p)\n        costs.append(c)\n    profits.sort()\n    costs.sort()\n    days = 0\n    for i in range(n):\n        if m >= costs[i]:\n            days += 1\n            m -= profits[i]\n        else:\n            break\n    print(days)\n",
    "18": "\n    c, t = [int(x) for x in input().split()]\n    tunnels = [[int(x) for x in input().split()] for _ in range(t)]\n    tunnels.sort(key=lambda x: x[0])\n    tunnels.sort(key=lambda x: x[1])\n    path = []\n    for i in range(t):\n        if tunnels[i][0] not in path:\n            path.append(tunnels[i][0])\n        if tunnels[i][1] not in path:\n            path.append(tunnels[i][1])\n    p = len(path)\n    s = c - p\n    print(p, s)\n    print(\" \".join([str(x) for x in path]))\n    print(\" \".join([str(x) for x in range(c+1, c+1+s)]))\n",
    "19": "\n    c, t = [int(x) for x in input().split()]\n    tunnels = [[] for i in range(c+1)]\n    for i in range(t):\n        a, b = [int(x) for x in input().split()]\n        tunnels[a].append(b)\n        tunnels[b].append(a)\n    #print(tunnels)\n    visited = [False]*(c+1)\n    path = []\n    def dfs(v):\n        visited[v] = True\n        for u in tunnels[v]:\n            if not visited[u]:\n                dfs(u)\n        path.append(v)\n    dfs(1)\n    #print(path)\n    p = len(path)\n    s = c - p\n    print(p, s)\n    for i in range(p):\n        print(path[i])\n    for i in range(s):\n        print(i+p+1)\n    for i in range(s):\n        print(i+p+1)\n\nif __name__ == '__main__':\n    code()"
}