{
    "0": "Python 3\n\"\"\"\n You have n pylons situated at integer coordinates in the plane. You would like to put lifts in the form of line segments between some of these pylons. The line segments must satisfy the following constraints: - A line segment can only go between pylons $(x_1, y_1)$ and $(x_2, y_2)$ if $|y_1-y_2| = 1$. - There are two types of pylons, one-way and two-way pylons. The one-way pylons can be connected to at most one other pylon, and the two-way pylons can be connected to at most two other pylons. However, if a two-way pylon $i$ is connected to two other pylons, then they must be on opposite sides of $i$ in the $y$-direction. In other words, the two pylons connected to $i$ must have different $y$-coordinates. - Two line segments may not intersect (except that the two line segments incident on a two-way pylon may touch at their endpoints). What is the maximum number of ski lifts (line segments) you can place under these constraints?\n-----Input----- The first line contains one integer $n$ ($1 \\leq n \\leq 10^5$). Each of the following $n$ lines contains three integers $x$, $y$, and $a$, the coordinates and type of a pylon ($0 \\leq x,y \\leq 10^5$; $a=1$ for a one-way pylon and $a=2$ for a two-way pylon). All the pylons are situated at different coordinates. -----Output----- Output the maximum number of ski lift line segments that can be placed. -----Examples----- Sample Input: 8 1 0 1 3 0 2 0 1 1 2 1 2 4 1 2 1 2 2 2 3 1 4 3 1 Sample Output: 4\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nLast winter, an avalanche swept away all the ski lifts from the ski resort Valen. Instead of rebuilding the lifts like they were before, the plan is to do it in a more optimized way, and you are responsible for this. \n\nThe only thing remaining from the old lift system are $n$ pylons situated at integer coordinates in the plane. You would like to put lifts in the form of line segments between some of these pylons. The line segments must satisfy the following constraints:\n - A line segment can only go between pylons $(x_1, y_1)$ and $(x_2, y_2)$ if $|y_1-y_2| = 1$.\n - There are two types of pylons, one-way and two-way pylons. The one-way pylons can be connected to at most one other pylon, and the two-way pylons can be connected to at most two other pylons. However, if a two-way pylon $i$ is connected to two other pylons, then they must be on opposite sides of $i$ in the $y$-direction. In other words, the two pylons connected to $i$ must have different $y$-coordinates.\n - Two line segments may not intersect (except that the two line segments incident on a two-way pylon may touch at their endpoints).\n\nWhat is the maximum number of ski lifts (line segments) you can place under these constraints?\n\n-----Input-----\nThe first line contains one integer $n$ ($1 \\leq n \\leq 10^5$). Each of the following $n$ lines contains three integers $x$, $y$, and $a$, the coordinates and type of a pylon ($0 \\leq x,y \\leq 10^5$; $a=1$ for a one-way pylon and $a=2$ for a two-way pylon). All the pylons are situated at different coordinates.\n\n-----Output-----\nOutput the maximum number of ski lift line segments that can be placed.\n\n-----Examples-----\nSample Input:\n8\n1 0 1\n3 0 2\n0 1 1\n2 1 2\n4 1 2\n1 2 2\n2 3 1\n4 3 1\nSample Output:\n4\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given a Young physicist kit. In the kit, there are $N$ types of resistors, connecting wires and an ohmmeter. If a resistor is of type $i$, it provides a resistance of precisely $R_ i$ ohms. As we all know, resistors can be connected in two different ways, in series and parallel. Also, we know that the complete circuit of resistors can be replaced with one resistor of the resistance equal to the equivalent resistance of the circuit. When the circuit is series, it is written as (R1-R2-R3- -RK) and the following formula holds:\\begin{equation*} R_{\\mathrm{eq}} = R_1 + R_2 + R_3 + \\cdots + R_ K \\quad . \\end{equation*} When the circuit is parallel, it is written as (R1|R2|R3| |RK) and the following formula holds:\\begin{equation*} R_{\\mathrm{eq}} = \\frac{1}{1/R_1 + 1/R_2 + 1/R_3 + \\cdots + 1/R_ K} \\quad . \\end{equation*} Mirko was excited to bring his new toy to school, where he showed it to all his friends. Unfortunately for him, the teacher also noticed the toy. She quickly connected a circuit and is now asking Mirko to tell her the equivalent resistance of the circuit. Help Mirko and answer the teacher s question!\n-----Input----- The first line of input contains the integer $N$ ($1 \\leq $N$ \\leq 9$) from the task. The following line contains $N$ real numbers $R_ i$ ($0 < R_ i < 100$) from the task. The last line contains the circuit $S$, that will not be longer than $100000$ characters. $S$ will only consist of the following characters: \u2018R\u2019, \u20181\u2019\u2013\u20189\u2019, \u2018(\u2019, \u2018)\u2019, \u2018-\u2019 and \u2018|\u2019. The number of pairs of brackets will be minimal, and the brackets will be paired properly. Inside of a pair of brackets, there will not be the character \u2018-\u2019 and the character \u2018|\u2019 at the same time. The circuit will only consist of the resistors from the kit and it is possible that not all types of resistors are used, or that one type of resistor is used several times. -----Output----- The first and only line of output must contain the number from the task. An absolute error up to $10^{-5}$ will be accepted. -----Examples----- Sample Input 1: 3 2 3 6 (R1-R2-R3) Sample Output 1: 11.00000 Sample Input 2: 3 2 3 6 (R1|R2|R3) Sample Output 2: 1.00000\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nMirko has been a very good boy, so he got exactly what he wanted for his birthday, a \u201cYoung physicist\u201d kit! In the kit, there are $N$ types of resistors, connecting wires and an ohmmeter. If a resistor is of type $i$, it provides a resistance of precisely $R_ i$ ohms.\n\nAs we all know, resistors can be connected in two different ways, in series and parallel. Also, we know that the complete circuit of resistors can be replaced with one resistor of the resistance equal to the equivalent resistance of the circuit. When the circuit is series, it is written as (R1-R2-R3-\u2026-RK) and the following formula holds:\\begin{equation*} R_{\\mathrm{eq}} = R_1 + R_2 + R_3 + \\cdots + R_ K \\quad . \\end{equation*}\n\nWhen the circuit is parallel, it is written as (R1|R2|R3|\u2026|RK) and the following formula holds:\\begin{equation*} R_{\\mathrm{eq}} = \\frac{1}{1/R_1 + 1/R_2 + 1/R_3 + \\cdots + 1/R_ K} \\quad . \\end{equation*}\n\nMirko was excited to bring his new toy to school, where he showed it to all his friends. Unfortunately for him, the teacher also noticed the toy. She quickly connected a circuit and is now asking Mirko to tell her the equivalent resistance of the circuit. Help Mirko and answer the teacher\u2019s question!\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq $N$ \\leq 9$) from the task. The following line contains $N$ real numbers $R_ i$ ($0 < R_ i < 100$) from the task. The last line contains the circuit $S$, that will not be longer than $100000$ characters. $S$ will only consist of the following characters: \u2018R\u2019, \u20181\u2019\u2013\u20189\u2019, \u2018(\u2019, \u2018)\u2019, \u2018-\u2019 and \u2018|\u2019. The number of pairs of brackets will be minimal, and the brackets will be paired properly. Inside of a pair of brackets, there will not be the character \u2018-\u2019 and the character \u2018|\u2019 at the same time. The circuit will only consist of the resistors from the kit and it is possible that not all types of resistors are used, or that one type of resistor is used several times.\n\n-----Output-----\nThe first and only line of output must contain the number from the task. An absolute error up to $10^{-5}$ will be accepted.\n\n-----Examples-----\nSample Input 1:\n3\n2 3 6\n(R1-R2-R3)\nSample Output 1:\n11.00000\n\nSample Input 2:\n3\n2 3 6\n(R1|R2|R3)\nSample Output 2:\n1.00000\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given an array a of size n, q facts about the array, and a cost function cnt(i) that counts the number of occurences of i in the array. Find the minimum possible cost of the array that corresponds to the facts.\n-----Input----- The first line contains two integer numbers n and q (1 \u2264 n \u2264 50, 0 \u2264 q \u2264 100). Then q lines follow, each representing a fact about the array. i-th line contains the numbers t_{i}, l_{i}, r_{i} and v_{i} for i-th fact (1 \u2264 t_{i} \u2264 2, 1 \u2264 l_{i} \u2264 r_{i} \u2264 n, 1 \u2264 v_{i} \u2264 n, t_{i} denotes the type of the fact). -----Output----- If the facts are controversial and there is no array that corresponds to them, print -1. Otherwise, print minimum possible cost of the array. -----Examples----- Input 3 0 Output 3 Input 3 1 1 1 3 2 Output 5 Input 3 2 1 1 3 2 2 1 3 2 Output 9 Input 3 2 1 1 3 2 2 1 3 1 Output -1\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nRecently Ivan noticed an array a while debugging his code. Now Ivan can't remember this array, but the bug he was trying to fix didn't go away, so Ivan thinks that the data from this array might help him to reproduce the bug.\n\nIvan clearly remembers that there were n elements in the array, and each element was not less than 1 and not greater than n. Also he remembers q facts about the array. There are two types of facts that Ivan remembers:  1 l_{i} r_{i} v_{i} \u2014 for each x such that l_{i} \u2264 x \u2264 r_{i} a_{x} \u2265 v_{i};  2 l_{i} r_{i} v_{i} \u2014 for each x such that l_{i} \u2264 x \u2264 r_{i} a_{x} \u2264 v_{i}. \n\nAlso Ivan thinks that this array was a permutation, but he is not so sure about it. He wants to restore some array that corresponds to the q facts that he remembers and is very similar to permutation. Formally, Ivan has denoted the cost of array as follows:\n\n$\\operatorname{cos} t = \\sum_{i = 1}^{n}(\\operatorname{cnt}(i))^{2}$, where cnt(i) is the number of occurences of i in the array.\n\nHelp Ivan to determine minimum possible cost of the array that corresponds to the facts!\n\n\n-----Input-----\n\nThe first line contains two integer numbers n and q (1 \u2264 n \u2264 50, 0 \u2264 q \u2264 100).\n\nThen q lines follow, each representing a fact about the array. i-th line contains the numbers t_{i}, l_{i}, r_{i} and v_{i} for i-th fact (1 \u2264 t_{i} \u2264 2, 1 \u2264 l_{i} \u2264 r_{i} \u2264 n, 1 \u2264 v_{i} \u2264 n, t_{i} denotes the type of the fact).\n\n\n-----Output-----\n\nIf the facts are controversial and there is no array that corresponds to them, print -1. Otherwise, print minimum possible cost of the array.\n\n\n-----Examples-----\nInput\n3 0\n\nOutput\n3\n\nInput\n3 1\n1 1 3 2\n\nOutput\n5\n\nInput\n3 2\n1 1 3 2\n2 1 3 2\n\nOutput\n9\n\nInput\n3 2\n1 1 3 2\n2 1 3 1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given two integers $a$ and $b$, and a sequence $s_0, s_1, \\dots, s_{n}$, find out the non-negative remainder of division of $\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i}$ by $10^{9} + 9$. Note that the modulo is unusual! \n-----Input----- The first line contains four integers $n, a, b$ and $k$ $(1 \\leq n \\leq 10^{9}, 1 \\leq a, b \\leq 10^{9}, 1 \\leq k \\leq 10^{5})$. The second line contains a sequence of length $k$ consisting of characters '+' and '-'.  If the $i$-th character (0-indexed) is '+', then $s_{i} = 1$, otherwise $s_{i} = -1$. Note that only the first $k$ members of the sequence are given, the rest can be obtained using the periodicity property. -----Output----- Output a single integer\u00a0\u2014 value of given expression modulo $10^{9} + 9$. -----Examples----- Input 2 2 3 3 +-+ Output 7 Input 4 1 5 1 - Output 999999228 -----Note----- In the first example: $(\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i})$ = $2^{2} 3^{0} - 2^{1} 3^{1} + 2^{0} 3^{2}$ = 7 In the second example: $(\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i}) = -1^{4} 5^{0} - 1^{3} 5^{1} - 1^{2} 5^{2} - 1^{1} 5^{3} - 1^{0} 5^{4} = -781 \\equiv 999999228 \\pmod{10^{9} + 9}$.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given two integers $a$ and $b$. Moreover, you are given a sequence $s_0, s_1, \\dots, s_{n}$. All values in $s$ are integers $1$ or $-1$. It's known that sequence is $k$-periodic and $k$ divides $n+1$. In other words, for each $k \\leq i \\leq n$ it's satisfied that $s_{i} = s_{i - k}$.\n\nFind out the non-negative remainder of division of $\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i}$ by $10^{9} + 9$.\n\nNote that the modulo is unusual!\n\n\n-----Input-----\n\nThe first line contains four integers $n, a, b$ and $k$ $(1 \\leq n \\leq 10^{9}, 1 \\leq a, b \\leq 10^{9}, 1 \\leq k \\leq 10^{5})$.\n\nThe second line contains a sequence of length $k$ consisting of characters '+' and '-'. \n\nIf the $i$-th character (0-indexed) is '+', then $s_{i} = 1$, otherwise $s_{i} = -1$.\n\nNote that only the first $k$ members of the sequence are given, the rest can be obtained using the periodicity property.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 value of given expression modulo $10^{9} + 9$.\n\n\n-----Examples-----\nInput\n2 2 3 3\n+-+\n\nOutput\n7\n\nInput\n4 1 5 1\n-\n\nOutput\n999999228\n\n\n\n-----Note-----\n\nIn the first example:\n\n$(\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i})$ = $2^{2} 3^{0} - 2^{1} 3^{1} + 2^{0} 3^{2}$ = 7\n\nIn the second example:\n\n$(\\sum \\limits_{i=0}^{n} s_{i} a^{n - i} b^{i}) = -1^{4} 5^{0} - 1^{3} 5^{1} - 1^{2} 5^{2} - 1^{1} 5^{3} - 1^{0} 5^{4} = -781 \\equiv 999999228 \\pmod{10^{9} + 9}$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Vanya wants to pass n exams and get the academic scholarship. He will get the scholarship if the average grade mark for all the exams is at least avg. The exam grade cannot exceed r. Vanya has passed the exams and got grade a_{i} for the i-th exam. To increase the grade for the i-th exam by 1 point, Vanya must write b_{i} essays. He can raise the exam grade multiple times. What is the minimum number of essays that Vanya needs to write to get scholarship \n-----Input----- The first line contains three integers n, r, avg (1 \u2264 n \u2264 10^5, 1 \u2264 r \u2264 10^9, 1 \u2264 avg \u2264 min(r, 10^6))\u00a0\u2014 the number of exams, the maximum grade and the required grade point average, respectively. Each of the following n lines contains space-separated integers a_{i} and b_{i} (1 \u2264 a_{i} \u2264 r, 1 \u2264 b_{i} \u2264 10^6). -----Output----- In the first line print the minimum number of essays. -----Examples----- Input 5 5 4 5 2 4 7 3 1 3 2 2 5 Output 4 Input 2 5 4 5 2 5 2 Output 0 -----Note----- In the first sample Vanya can write 2 essays for the 3rd exam to raise his grade by 2 points and 2 essays for the 4th exam to raise his grade by 1 point. In the second sample, Vanya doesn't need to write any essays as his general point average already is above average.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nVanya wants to pass n exams and get the academic scholarship. He will get the scholarship if the average grade mark for all the exams is at least avg. The exam grade cannot exceed r. Vanya has passed the exams and got grade a_{i} for the i-th exam. To increase the grade for the i-th exam by 1 point, Vanya must write b_{i} essays. He can raise the exam grade multiple times.\n\nWhat is the minimum number of essays that Vanya needs to write to get scholarship?\n\n\n-----Input-----\n\nThe first line contains three integers n, r, avg (1 \u2264 n \u2264 10^5, 1 \u2264 r \u2264 10^9, 1 \u2264 avg \u2264 min(r, 10^6))\u00a0\u2014 the number of exams, the maximum grade and the required grade point average, respectively.\n\nEach of the following n lines contains space-separated integers a_{i} and b_{i} (1 \u2264 a_{i} \u2264 r, 1 \u2264 b_{i} \u2264 10^6).\n\n\n-----Output-----\n\nIn the first line print the minimum number of essays.\n\n\n-----Examples-----\nInput\n5 5 4\n5 2\n4 7\n3 1\n3 2\n2 5\n\nOutput\n4\n\nInput\n2 5 4\n5 2\n5 2\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample Vanya can write 2 essays for the 3rd exam to raise his grade by 2 points and 2 essays for the 4th exam to raise his grade by 1 point.\n\nIn the second sample, Vanya doesn't need to write any essays as his general point average already is above average.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given $W$, a set of $N$ words that are anagrams of each other. There are no duplicate letters in any word. A set of words $S \\subseteq W$ is called swap-free if there is no way to turn a word $x \\in S$ into another word $y \\in S$ by swapping only a single pair of (not necessarily adjacent) letters in $x$. Find the size of the largest swap-free set $S$ chosen from the given set $W$. \n-----Input----- The first line of input contains an integer $N$ ($1 \\le N \\le 500$). Following that are $N$ lines each with a single word. Every word contains only lowercase English letters and no duplicate letters. All $N$ words are unique, have at least one letter, and every word is an anagram of every other word. -----Output----- Output the size of the largest swap-free set. -----Examples----- Sample Input 1: 6 abc acb cab cba bac bca Sample Output 1: 3 Sample Input 2: 11 alerts alters artels estral laster ratels salter slater staler stelar talers Sample Output 2: 8\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given $W$, a set of $N$ words that are anagrams of each other. There are no duplicate letters in any word. A set of words $S \\subseteq W$ is called \u201cswap-free\u201d if there is no way to turn a word $x \\in S$ into another word $y \\in S$ by swapping only a single pair of (not necessarily adjacent) letters in $x$. Find the size of the largest swap-free set $S$ chosen from the given set $W$.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 500$). Following that are $N$ lines each with a single word. Every word contains only lowercase English letters and no duplicate letters. All $N$ words are unique, have at least one letter, and every word is an anagram of every other word.\n\n-----Output-----\nOutput the size of the largest swap-free set.\n\n-----Examples-----\nSample Input 1:\n6\nabc\nacb\ncab\ncba\nbac\nbca\nSample Output 1:\n3\n\nSample Input 2:\n11\nalerts\nalters\nartels\nestral\nlaster\nratels\nsalter\nslater\nstaler\nstelar\ntalers\nSample Output 2:\n8\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Given a range $[A, B]$, find an odd integer $X \\in [ A , B ]$ such that the expression\\[ \\min \\{ |X - P_ i| , i \\in [ 1 , N ] \\} \\] is as large as possible. \n-----Input----- The first line contains an integer $N$ ($1\\le N \\le 100$), the number of boys. The second line contains N distinct positive even integers, the names of the boys. The integers will be less than $10^9$. The third line contains the integers $A$ and $B$ ($1 \\le A < B \\le 10^9$), the range of names they are considering for the girl. -----Output----- Output an integer, the name for the little girl. If there are multiple solutions, any one of them will be accepted. -----Examples----- Sample Input 1: 3 2 6 16 20 50 Sample Output 1: 49 Sample Input 2: 3 2 6 16 3 15 Sample Output 2: 11\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nBrojko and Brojana are happily married with $N$ little boys. The boys are named with distinct even integers $P_1, P_2, \\ldots , P_ N$.\n\nBrojko and Brojana are expecting an addition to their family and have to come up with a nice name for the little girl. They have decided that the name will be an odd integer in the range $[A, B]$. Because they find all integers in that range equally beautiful, they have decided to choose the number which maximizes the distance to the name of the closest of the $N$ boys.\n\nMore precisely, they seek an odd integer $X \\in [ A , B ]$ such that the expression\\[ \\min \\{ |X - P_ i| , i \\in [ 1 , N ] \\} \\]\n\nis as large as possible.\n\nWrite a program that determines the name for the little girl.\n\n-----Input-----\nThe first line contains an integer $N$ ($1\\le N \\le 100$), the number of boys.\n\nThe second line contains N distinct positive even integers, the names of the boys. The integers will be less than $10^9$.\n\nThe third line contains the integers $A$ and $B$ ($1 \\le A < B \\le 10^9$), the range of names they are considering for the girl.\n\n-----Output-----\nOutput an integer, the name for the little girl. If there are multiple solutions, any one of them will be accepted.\n\n-----Examples-----\nSample Input 1:\n3\n2 6 16\n20 50\nSample Output 1:\n49\n\nSample Input 2:\n3\n2 6 16\n3 15\nSample Output 2:\n11\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Write the code to take a subset of the students to lunch such that the children get to eat with their friends, there are no wasted lunches, you take no more than the legal limit of campers, and you don t anger your fellow counselors by taking too few. \n-----Input----- The first line contains one integer, $n$ ($1 \\leq n \\leq 1000$), the number of groups of friends. The next line contains $n$ space separated integers, $s_0, s_1, \\ldots , s_{n-1}\\ (0 < s_ i \\leq 100)$, where $s_ i$ denotes the size of group $i$. The next line contains $4$ space separated integers: $k$ ($0 < k \\leq 100$), $x$ ($0 < x \\leq 100000$), $a$ and $b$ ($0 < a \\leq b \\leq 10000$) representing the number of bins, the number of lunches in each bin, the minimum number of campers you must watch, and the maximum number of campers you are allowed to watch, respectively. -----Output----- Output an integer denoting the maximum number of students you can take to lunch and satisfy the requirements, or, if it is not possible, output \u2018impossible\u2019. -----Examples----- Sample Input 1: 7 5 7 10 15 3 2 8 20 3 30 40 Sample Output 1: 39 Sample Input 2: 7 33 7 10 15 3 2 8 20 3 30 40 Sample Output 2: 36\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are a camp counselor at a summer camp and it is time to take some of the kids to lunch. There are $n$ groups of friends of different sizes who would like to be able to eat lunch together. There are $k$ bins that each hold exactly $x$ lunches. If one of the lunches in a bin is not used, then it must be thrown out due to health regulations.\n\nIf you take fewer than $a$ students to lunch then your fellow counselors will get angry as they have to watch the remaining campers. However, due to child safety regulations, you can watch at most $b$ children at any given time.\n\nIs it possible to take a subset of the students to lunch such that the children get to eat with their friends, there are no wasted lunches, you take no more than the legal limit of campers, and you don\u2019t anger your fellow counselors by taking too few?\n\n-----Input-----\nThe first line contains one integer, $n$ ($1 \\leq n \\leq 1000$), the number of groups of friends. The next line contains $n$ space separated integers, $s_0, s_1, \\ldots , s_{n-1}\\ (0 < s_ i \\leq 100)$, where $s_ i$ denotes the size of group $i$. The next line contains $4$ space separated integers: $k$ ($0 < k \\leq 100$), $x$ ($0 < x \\leq 100000$), $a$ and $b$ ($0 < a \\leq b \\leq 10000$) representing the number of bins, the number of lunches in each bin, the minimum number of campers you must watch, and the maximum number of campers you are allowed to watch, respectively.\n\n-----Output-----\nOutput an integer denoting the maximum number of students you can take to lunch and satisfy the requirements, or, if it is not possible, output \u2018impossible\u2019.\n\n-----Examples-----\nSample Input 1:\n7\n5 7 10 15 3 2 8\n20 3 30 40\nSample Output 1:\n39\n\nSample Input 2:\n7\n33 7 10 15 3 2 8\n20 3 30 40\nSample Output 2:\n36\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n # Description Let's call a tournament binary, if it runs according to the scheme described below: - Exactly N knights take part in the tournament, N=2K for some integer K > 0. - Each knight has a unique skill called strength, described as an integer from the interval [1, N]. - Initially, all the knights are standing in a line, waiting for a battle. Since all their strengths are unique, each initial configuration can be described as a permutation of numbers from 1 to N. - There are exactly K rounds in the tournament, 2K - i + 1 knights take part in the i'th round. The K'th round is called the final. - The i'th round runs in the following way: for each positive integer j   2K - i happens a battle between a knight on the 2 j'th position and a knight on the 2 j+1'th position. The strongest of two continues his tournament, taking the j'th position on the next round, while the weakest of two is forced to leave. - The only knight, who has won K rounds, is the winner. The only knight, who has won K - 1 rounds, but lost the final, is the runner-up.     As you can see from the scheme, the winner is always the same, an initial configuration doesn't change anything. So, your task is to determine chances of each knight to appear in the final. Formally, for each knight you need to count the number of initial configurations, which will lead him to the final. Since the number can be extremly huge, you are asked to do all the calculations under modulo 109 + 9. \n-----Input----- The first line contains the only integer K, denoting the number of rounds of the tournament. -----Output----- Output should consist of 2K lines. The i'th line should contain the number of initial configurations, which lead the participant with strength equals to i to the final. -----Constraints----- 1 \u2264 K < 20 -----Examples----- Input: 1 Output: 2 2 Input: 2 Output: 0 8 16 24 -----Explanation----- In the first example we have N=2 knights. Let's consider each initial configuration that could appear and simulate the tournament. (1, 2) -> (2) (2, 1) -> (2) In the second example we have N=4 knights. Let's consider some initial configurations that could appear and simulate the tournament. (1, 2, 3, 4) -> (2, 4) -> (4) (3, 2, 4, 1) -> (3, 4) -> (4) (4, 1, 3, 2) -> (4, 3) -> (4)\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nKnights' tournaments were quite popular in the Middle Ages. A lot of boys were dreaming of becoming a knight, while a lot of girls were dreaming of marrying a knight on a white horse.\n\nIn this problem we consider one of these tournaments. \n\nLet's us call a tournament binary, if it runs according to the scheme described below:\n\n- Exactly N knights take part in the tournament, N=2K for some integer K > 0.\n\t\t\n- Each knight has a unique skill called strength, described as an integer from the interval [1, N].\n\t\t\n- Initially, all the knights are standing in a line, waiting for a battle. Since all their strengths are unique, each initial configuration can be described as a permutation of numbers from 1 to N.\n\t\t\n- There are exactly K rounds in the tournament, 2K - i + 1 knights take part in the i'th round. The K'th round is called the final.\n\t\t\n- The i'th round runs in the following way: for each positive integer j \u2264 2K - i happens a battle between a knight on the 2\u2219j'th position and a knight on the 2\u2219j+1'th position. The strongest of two continues his tournament, taking the j'th position on the next round, while the weakest of two is forced to leave.\n\t\t\n- The only knight, who has won K rounds, is the winner. The only knight, who has won K - 1 rounds, but lost the final, is the runner-up.   \n\t\n\nAs you can see from the scheme, the winner is always the same, an initial configuration doesn't change anything. So, your task is to determine chances of each knight to appear in the final.\n\nFormally, for each knight you need to count the number of initial configurations, which will lead him to the final. Since the number can be extremly huge, you are asked to do all the calculations under modulo 109 + 9.\n\n-----Input-----\n\nThe first line contains the only integer K, denoting the number of rounds of the tournament.\n\n-----Output-----\nOutput should consist of 2K lines. The i'th line should contain the number of initial configurations, which lead the participant with strength equals to i to the final.\n\n-----Constraints-----\n1 \u2264 K < 20\n\n\n-----Examples-----\nInput:\n1\n\nOutput:\n2\n2\n\nInput:\n2\n\nOutput:\n0\n8\n16\n24\n\n-----Explanation-----\n\nIn the first example we have N=2 knights. Let's consider each initial configuration that could appear and simulate the tournament.\n\n(1, 2) -> (2)\n\n(2, 1) -> (2)\n\nIn the second example we have N=4 knights. Let's consider some initial configurations that could appear and simulate the tournament.\n\n(1, 2, 3, 4) -> (2, 4) -> (4)\n\n(3, 2, 4, 1) -> (3, 4) -> (4)\n\n(4, 1, 3, 2) -> (4, 3) -> (4)\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n # Task  Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number. # \n-----Input----- The input consists of:  - one line with two integers $n$ ($1 \\leq n \\leq 300000$), the number of researchers, and $m$ ($1 \\leq m \\leq 10^8$), the number of minutes of inactivity after which a workstation locks itself;  - $n$ lines each with two integers $a$ and $s$ ($1 \\leq a, s \\leq 10^8$), representing a researcher that arrives after $a$ minutes and stays for exactly $s$ minutes. -----Output----- Output the maximum number of unlockings Penelope may save herself. -----Examples----- Sample Input: 3 5 1 5 6 3 14 6 Sample Output: 2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nPenelope is part of the admin team of the newly built supercomputer. Her job is to assign workstations to the researchers who come here to run their computations at the supercomputer. \n\nPenelope is very lazy and hates unlocking machines for the arriving researchers. She can unlock the machines remotely from her desk, but does not feel that this menial task matches her qualifications. Should she decide to ignore the security guidelines she could simply ask the researchers not to lock their workstations when they leave, and then assign new researchers to workstations that are not used any more but that are still unlocked. That way, she only needs to unlock each workstation for the first researcher using it, which would be a huge improvement for Penelope.\n\nUnfortunately, unused workstations lock themselves automatically if they are unused for more than $m$ minutes. After a workstation has locked itself, Penelope has to unlock it again for the next researcher using it. Given the exact schedule of arriving and leaving researchers, can you tell Penelope how many unlockings she may save by asking the researchers not to lock their workstations when they leave and assigning arriving researchers to workstations in an optimal way? You may assume that there are always enough workstations available.\n\n-----Input-----\nThe input consists of:\n - one line with two integers $n$ ($1 \\leq n \\leq 300000$), the number of researchers, and $m$ ($1 \\leq m \\leq 10^8$), the number of minutes of inactivity after which a workstation locks itself;\n - $n$ lines each with two integers $a$ and $s$ ($1 \\leq a, s \\leq 10^8$), representing a researcher that arrives after $a$ minutes and stays for exactly $s$ minutes.\n\n-----Output-----\nOutput the maximum number of unlockings Penelope may save herself.\n\n-----Examples-----\nSample Input:\n3 5\n1 5\n6 3\n14 6\nSample Output:\n2\n\"\"\"\ndef code():"
}