{
    "id": "cmpl-4BTssfhyKcorK9ICbBOYKrM9mMGg4",
    "object": "text_completion",
    "created": 1638641830,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    A = list(map(int, input().split()))\n    if len(A) != n:\n        print(\"NE\")\n        return\n    for i in range(n):\n        if A[i] < 1 or A[i] > n:\n            print(\"NE\")\n            return\n    A.sort()\n    for i in range(n):\n        if A[i] != i + 1:\n            print(\"NE\")\n            return\n    key = [0] * 26\n    for i in range(n):\n        for j in range(len(words[i])):\n            key[ord(words[i][j]) - ord('a')] = chr(ord('a') + A[i] - 1)\n    print(\"DA\")\n    print(\"\".join(key))\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    words = []\n    for i in range(n):\n        words.append(input())\n    a = list(map(int, input().split()))\n    if len(a) != n:\n        print(\"NE\")\n        return\n    words.sort()\n    for i in range(n):\n        if words[i] != words[a[i]-1]:\n            print(\"NE\")\n            return\n    print(\"DA\")\n    for i in range(n):\n        print(words[a[i]-1][0], end=\"\")\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    jiro = []\n    for i in range(n):\n        jiro.append(list(map(int, input().split())))\n    ciel = []\n    for i in range(m):\n        ciel.append(int(input()))\n    jiro.sort(key=lambda x: x[1], reverse=True)\n    ciel.sort(reverse=True)\n    damage = 0\n    for i in range(m):\n        if ciel[i] >= jiro[0][1]:\n            damage += ciel[i] - jiro[0][1]\n            jiro.pop(0)\n        else:\n            break\n    print(damage)\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    jiro = []\n    for i in range(n):\n        jiro.append(list(map(int, input().split())))\n    ciel = []\n    for i in range(m):\n        ciel.append(int(input()))\n    jiro.sort(key=lambda x: x[1], reverse=True)\n    ciel.sort(reverse=True)\n    damage = 0\n    for i in range(m):\n        if jiro[0][0] == \"ATK\":\n            if ciel[i] >= jiro[0][1]:\n                damage += ciel[i] - jiro[0][1]\n                jiro.pop(0)\n            else:\n                jiro.pop(0)\n        else:\n            if ciel[i] > jiro[0][1]:\n                damage += ciel[i] - jiro[0][1]\n                jiro.pop(0)\n            else:\n                jiro.pop(0)\n    print(damage)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    a, b = map(int, input().split())\n    if a == b:\n        print(1, 1)\n    elif a < b:\n        print(1, (b - a) // (2 * k))\n    else:\n        print((a - b) // (2 * k), 1)\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    a, b = map(int, input().split())\n    if a == b:\n        print(1, 1)\n    elif a < b:\n        print(1, (b - a) // k + 1)\n    else:\n        print((a - b) // k + 1, 1)\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    c = [int(x) for x in input().split()]\n    c = [c[i:i+4] for i in range(0, len(c), 4)]\n    cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if c[i][0] == c[j][0] and c[i][1] == c[j][1] and c[i][2] == c[j][2] and c[i][3] == c[j][3]:\n                    cnt += 1\n    print(cnt)\n\nif __name__ == '__main__':\n    code()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    colors = []\n    for i in range(n):\n        colors.append(list(map(int, input().split())))\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                for l in range(n):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        if colors[i][0] == colors[j][1] == colors[k][2] == colors[l][3] and colors[i][3] == colors[j][2] == colors[k][1] == colors[l][0]:\n                            count += 1\n    print(count)\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    rooms = list(map(int, input().split()))\n    switches = []\n    for i in range(m):\n        switches.append(list(map(int, input().split())))\n    for i in range(m):\n        if switches[i][0] == 1:\n            for j in range(1, len(switches[i])):\n                if rooms[switches[i][j]-1] == 0:\n                    rooms[switches[i][j]-1] = 1\n                else:\n                    rooms[switches[i][j]-1] = 0\n        else:\n            for j in range(1, len(switches[i])):\n                if rooms[switches[i][j]-1] == 0:\n                    rooms[switches[i][j]-1] = 1\n                else:\n                    rooms[switches[i][j]-1] = 0\n    if 0 in rooms:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    rooms = list(map(int, input().split()))\n    switches = []\n    for i in range(m):\n        switches.append(list(map(int, input().split())))\n    for i in range(m):\n        if switches[i][0] == 1:\n            for j in range(1, len(switches[i])):\n                if rooms[switches[i][j]-1] == 0:\n                    rooms[switches[i][j]-1] = 1\n                else:\n                    rooms[switches[i][j]-1] = 0\n        else:\n            for j in range(1, len(switches[i])):\n                if rooms[switches[i][j]-1] == 0:\n                    rooms[switches[i][j]-1] = 1\n                else:\n                    rooms[switches[i][j]-1] = 0\n    if 0 in rooms:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    if n < 2 or n > 10**5:\n        return\n    graph = {}\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        if u not in graph:\n            graph[u] = [v]\n        else:\n            graph[u].append(v)\n        if v not in graph:\n            graph[v] = [u]\n        else:\n            graph[v].append(u)\n    if len(graph) != n:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"NO\"\n    if n == 4:\n        return \"NO\"\n    if n == 5:\n        return \"NO\"\n    if n == 6:\n        return \"YES\"\n    if n == 7:\n        return \"NO\"\n    if n == 8:\n        return \"NO\"\n    if n == 9:\n        return \"NO\"\n    if n == 10:\n        return \"NO\"\n    if n == 11:\n        return \"NO\"\n    if n == 12:\n        return \"NO\"\n    if n == 13:\n        return \"NO\"\n    if n == 14:\n        return \"NO\"\n    if n == 15:\n        return \"NO\"\n    if n == 16:\n        return \"NO\"\n    if n == 17:\n        return \"NO\"\n    if n == 18:\n        return \"NO\"\n    if n == 19:\n        return \"NO\"\n    if n == 20:\n        return \"NO\"\n    if n == 21:\n        return \"NO\"\n    if n == 22:\n        return \"NO\"\n    if n == 23:\n        return \"NO\"\n    if n == 24:\n        return \"NO\"\n    if n == 25:\n        return \"NO\"\n    if n == 26:\n        return \"NO\"\n    if n == 27:\n        return \"NO\"\n    if n == 28:\n        return \"NO\"\n    if n == 29:\n        return \"NO\"\n    if n == 30:\n        return \"NO\"\n    if n == 31:\n        return \"NO\"\n    if n == 32:\n        return \"NO\"\n    if n == 33:\n        return \"NO\"\n    if n == 34:\n        return \"NO\"\n    if n == 35:\n        return \"NO\"\n    if n == 36:\n        return \"NO\"\n    if n == 37:\n        return \"NO\"\n    if n == 38:\n        return \"NO\"\n    if n == 39:\n        return \"NO\"\n    if n == 40:\n        return \"NO\"\n    if n == 41:\n        return \"NO\"\n    if n == 42:\n        return \"NO\"\n    if n == 43:\n        return \"NO\"\n    if n == 44:\n        return \"NO\"\n    if n == 45:\n        return \"NO\"\n    if n == 46:\n        return \"NO\"\n    if n == 47:\n        return \"NO\"\n    if n == 48:\n        return \"NO\"\n    if n == 49:\n        return \"NO\"\n    if n == 50:\n        return \"NO\"\n    if n == 51:\n        return \"NO\"\n    if n == 52:\n        return \"NO\"\n    if n == 53:\n        return \"NO\"\n    if n == 54:\n        return \"NO\"\n    if n == 55:\n        return \"NO\"\n    if n == 56:\n        return \"NO\"\n    if n == 57:\n        return \"NO\"\n    if n == 58:\n        return \"NO\"\n    if n == 59:\n        return \"NO\"\n    if n == 60:\n        return \"NO\"\n    if n == 61:\n        return \"NO\"\n    if n == 62:\n        return \"NO\"\n    if n == 63:\n        return \"NO\"\n    if n == 64:\n        return \"NO\"\n    if n == 65:\n        return \"NO\"\n    if n == 66:\n        return \"NO\"\n    if n == 67:\n        return \"NO\"\n    if n == 68:\n        return \"NO\"\n    if n == 69:\n        return \"NO\"\n    if n == 70",
            "index": 10,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    graph = {}\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        if u not in graph:\n            graph[u] = [v]\n        else:\n            graph[u].append(v)\n        if v not in graph:\n            graph[v] = [u]\n        else:\n            graph[v].append(u)\n    print(graph)\n    for i in range(1, n+1):\n        if len(graph[i]) == 1:\n            start = i\n            break\n    print(start)\n    stack = [start]\n    visited = [start]\n    while stack:\n        current = stack.pop()\n        for i in graph[current]:\n            if i not in visited:\n                stack.append(i)\n                visited.append(i)\n    print(visited)\n    if len(visited) == n:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    D = int(input())\n    n = 1\n    while True:\n        if (n*n-n) == D:\n            print(n,n+1)\n            break\n        elif (n*n-n) > D:\n            print(\"impossible\")\n            break\n        n += 1\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    D = int(input())\n    if D == 0:\n        print(\"impossible\")\n    else:\n        for n in range(0, int(D**0.5)+1):\n            if (n**2 - (n-1)**2) == D:\n                print(n-1, n)\n                break\n            elif (n**2 + (n-1)**2) == D:\n                print(n, n-1)\n                break\n        else:\n            print(\"impossible\")\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = list(map(int, input().split()))\n    min_dev = sum([abs(p[i] - i) for i in range(n)])\n    min_id = 0\n    for i in range(n):\n        dev = sum([abs(p[(i + j) % n] - (i + j) % n) for j in range(n)])\n        if dev < min_dev:\n            min_dev = dev\n            min_id = i\n    print(min_dev, min_id)\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = list(map(int, input().split()))\n    min_dev = sum([abs(p[i] - i) for i in range(n)])\n    min_id = 0\n    for i in range(n):\n        dev = sum([abs(p[(i + j) % n] - (i + j) % n) for j in range(n)])\n        if dev < min_dev:\n            min_dev = dev\n            min_id = i\n    print(min_dev, min_id)\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    d = {}\n    for i in range(n):\n        if s1[i] not in d:\n            d[s1[i]] = 1\n        else:\n            d[s1[i]] += 1\n        if s2[i] not in d:\n            d[s2[i]] = 1\n        else:\n            d[s2[i]] += 1\n    ans = 1\n    for i in d:\n        ans *= d[i]\n    print(ans % 1000000007)\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    d = [0] * k\n    for i in a:\n        d[i % k] += 1\n    res = 0\n    for i in range(k // 2 + 1):\n        if i == 0:\n            res += d[0] // 2\n        elif i == k - i:\n            res += min(d[i], d[k - i])\n        else:\n            res += min(d[i], d[k - i]) * 2\n    print(res)\n    for i in range(k):\n        if d[i] > 0:\n            print(i, end=' ')\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = [0] * k\n    for i in range(n):\n        d[a[i] % k] += 1\n    ans = 0\n    for i in range(k // 2 + 1):\n        if i == 0:\n            ans += d[0] * (d[0] - 1) // 2\n        elif i == k - i:\n            ans += d[i] * (d[i] - 1) // 2\n        else:\n            ans += d[i] * d[k - i]\n    print(ans)\n    for i in range(k):\n        if d[i] != 0:\n            print(i, end=' ')\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}