{
    "0": "Python 3\n\"\"\"\n Lucy is making her road bike ready for the season. All parts have been checked for wear and tear and washed clean and she is ready to put the beauty back together again. There is only one thing troubling her. During the winter she has been to several motivational talks by previous professional cyclists. They have all talked about the importance of correct cadence while cycling. The cadence is the frequency your feet are pedaling at when you are cycling. Lucy is now wondering if she should change her gears setup before she reassembles the bike and goes on her first ride for the year. Bike gears typically consist of a set of different-sized gears on the crank (the thing connected to the pedals) and a set of different-sized gears on the back wheel. These are connected by the chain to drive the bike forward. Can you help her figure out if she can keep her current setup and still change to all gears without it affecting her cadence too much  Specifically she does not want her cadence to be increased by more than $P$% when changing to the next lighter gear. We assume that the bicycle will continue at the same speed immediately after the gear change. \n\n-----Input----- The first line of the input consists of three integers $N$, $M$ and $P$ representing the number of gears on the crank, the numbers of gears on the back wheel, and the maximum cadence change in percentage Lucy will tolerate when changing gears.  Then follows a line with $N$ integers $C_ i$ each representing the number of teeth on each of the gears on the crank.  Then follows a line with $M$ integers $D_ j$ each representing the number of teeth on each of the gears on the back wheel. -----Output----- Output a single line with the text Ride on! if Lucy can change through all the gears from heaviest to lightest in her current setup and Time to change gears! if she cannot. -----Limits-----  - $1 \\leq N, M \\leq 100$  - $0 \\leq P \\leq 1000$  - $3 \\leq C, D \\leq 100000$ -----Examples----- Sample Input: 2 11 15 50 34 11 12 13 14 16 18 20 22 25 28 32 Sample Output: Ride on!\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nLucy is making her road bike ready for the season. All parts have been checked for wear and tear and washed clean and she is ready to put the beauty back together again. There is only one thing troubling her. During the winter she has been to several motivational talks by previous professional cyclists. They have all talked about the importance of correct cadence while cycling. The cadence is the frequency your feet are pedaling at when you are cycling. Lucy is now wondering if she should change her gears setup before she reassembles the bike and goes on her first ride for the year.\n\nBike gears typically consist of a set of different-sized gears on the crank (the thing connected to the pedals) and a set of different-sized gears on the back wheel. These are connected by the chain to drive the bike forward. Can you help her figure out if she can keep her current setup and still change to all gears without it affecting her cadence too much? Specifically she does not want her cadence to be increased by more than $P$% when changing to the next lighter gear. We assume that the bicycle will continue at the same speed immediately after the gear change.\n\n-----Input-----\nThe first line of the input consists of three integers $N$, $M$ and $P$ representing the number of gears on the crank, the numbers of gears on the back wheel, and the maximum cadence change in percentage Lucy will tolerate when changing gears.\n\n Then follows a line with $N$ integers $C_ i$ each representing the number of teeth on each of the gears on the crank.\n\n Then follows a line with $M$ integers $D_ j$ each representing the number of teeth on each of the gears on the back wheel.\n\n\n\n-----Output-----\nOutput a single line with the text Ride on! if Lucy can change through all the gears from heaviest to lightest in her current setup and Time to change gears! if she cannot.\n\n-----Limits-----\n - $1 \\leq N, M \\leq 100$\n - $0 \\leq P \\leq 1000$\n - $3 \\leq C, D \\leq 100000$\n\n-----Examples-----\nSample Input:\n2 11 15\n50 34\n11 12 13 14 16 18 20 22 25 28 32\nSample Output:\nRide on!\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You want to catch the robbers before they leave the state. The state of Calirado can be represented by a rectangular $n$-by-$m$ grid of characters, with the character in each grid cell denoting a terrain type. The robbers begin within the cell marked \u00a0B, indicating the Bank of Denview. They will then travel across the state by moving from grid cell to grid cell in the four cardinal directions (left, right, up, down). (Note that the robbers pass only through grid edges, and not corners.) If the robbers manage to leave the state (by crossing any boundary edge of the grid) they will go into hiding, never to be seen again. You must stop this. To catch the robbers, you can set up barricades. Barricades are placed inside a grid cell, and prevent the robbers from traveling into the cell (from any direction). Each grid square consists of a different type of terrain, with different cost for placing a barricade. You cannot place a barricade on the bank (\u00a0B) or on any cell containing a dot (\u00a0.), though the robbers can travel freely through these cells. Every other cell will contain a lowercase English letter, indicating a terrain type. Find the cheapest way to prevent the robbers from escaping Calirado. \n-----Input----- The first line contains three integers $n$, $m$, and $c$ ($1 \\le n, m \\le 30$, $1 \\le c \\le 26$): the dimensions of the grid representing Calirado, and the number of different terrain types. Then follows $m$ lines of exactly $n$ characters each: the map of Calirado. Each character is either \u2018B\u2019, \u2018.\u2019, or one of the first $c$ lowercase letters of the English alphabet. Calirado is guaranteed to contain exactly one bank. After the grid, there is a line containing $c$ space-separated integers $1 \\leq c_ i \\leq 100000$, the costs of placing a barricade on a grid cell of each terrain type. $c_1$ is the cost for terrain type \u2018a\u2019, $c_2$ is the cost for \u2018b\u2019, and so forth. -----Output----- Print one integer, the minimum total cost of the barricades that you need to place to prevent the robbers from escaping. If there is no way to prevent the robbers from escaping, print -1 instead. In the first example, the minimum cost is to barricade the central three squares on each side of the bank for a total cost of $12$. In the second example, since the bank is on the border, there is no way to prevent the robbers from escaping the state. In the third example, we must prevent the robbers from leaving the bank to the top, bottom, and right, or else we cannot prevent them from leaving the state. To the left, however, it is cheaper to allow passage through the \u2018b\u2019 cell, and then barricade in each of the three directions from there. The total cost is $7 + 5 + 7 + 3(1) = 22$. -----Examples----- Sample Input 1: 5 5 1 aaaaa a...a a.B.a a...a aaaaa 1 Sample Output 1: 12 Sample Input 2: 2 2 1 aB aa 1 Sample Output 2: -1\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe First Universal Bank of Denview has just been robbed! You want to catch the robbers before they leave the state.\n\nThe state of Calirado can be represented by a rectangular $n$-by-$m$ grid of characters, with the character in each grid cell denoting a terrain type. The robbers begin within the cell marked \u2018B\u2019, indicating the Bank of Denview. They will then travel across the state by moving from grid cell to grid cell in the four cardinal directions (left, right, up, down). (Note that the robbers pass only through grid edges, and not corners.) If the robbers manage to leave the state (by crossing any boundary edge of the grid) they will go into hiding, never to be seen again. You must stop this.\n\nTo catch the robbers, you can set up barricades. Barricades are placed inside a grid cell, and prevent the robbers from traveling into the cell (from any direction). Each grid square consists of a different type of terrain, with different cost for placing a barricade. You cannot place a barricade on the bank (\u2018B\u2019) or on any cell containing a dot (\u2018.\u2019), though the robbers can travel freely through these cells. Every other cell will contain a lowercase English letter, indicating a terrain type.\n\nFind the cheapest way to prevent the robbers from escaping Calirado.\n\n-----Input-----\nThe first line contains three integers $n$, $m$, and $c$ ($1 \\le n, m \\le 30$, $1 \\le c \\le 26$): the dimensions of the grid representing Calirado, and the number of different terrain types. Then follows $m$ lines of exactly $n$ characters each: the map of Calirado. Each character is either \u2018B\u2019, \u2018.\u2019, or one of the first $c$ lowercase letters of the English alphabet. Calirado is guaranteed to contain exactly one bank. After the grid, there is a line containing $c$ space-separated integers $1 \\leq c_ i \\leq 100000$, the costs of placing a barricade on a grid cell of each terrain type. $c_1$ is the cost for terrain type \u2018a\u2019, $c_2$ is the cost for \u2018b\u2019, and so forth.\n\n-----Output-----\nPrint one integer, the minimum total cost of the barricades that you need to place to prevent the robbers from escaping. If there is no way to prevent the robbers from escaping, print -1 instead.\n\nIn the first example, the minimum cost is to barricade the central three squares on each side of the bank for a total cost of $12$.\n\nIn the second example, since the bank is on the border, there is no way to prevent the robbers from escaping the state.\n\nIn the third example, we must prevent the robbers from leaving the bank to the top, bottom, and right, or else we cannot prevent them from leaving the state. To the left, however, it is cheaper to allow passage through the \u2018b\u2019 cell, and then barricade in each of the three directions from there. The total cost is $7 + 5 + 7 + 3(1) = 22$.\n\n-----Examples-----\nSample Input 1:\n5 5 1\naaaaa\na...a\na.B.a\na...a\naaaaa\n1\nSample Output 1:\n12\n\nSample Input 2:\n2 2 1\naB\naa\n1\nSample Output 2:\n-1\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given an array of integers. You can permute its integers. You want to do it so that as many as possible integers will become on a place where a smaller integer used to stand. Find the maximal number of such integers. \n-----Input----- On the first line, today\u2019s date. The date consists of two parts, separated by space. The first part is in an integer (the day of the month) $d$, with $1\\leq d\\leq 31$. The second part is the name of the month, abbreviated as JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, or DEC. On the second line, the name of the day on 1 January of the current year, abbreviated as MON, TUE, WED, THU, FRI, SAT, SUN. -----Output----- Output a single line: The four letters TGIF, abbreviating \u201cThank God it\u2019s Friday\u201d if today is certainly Friday. The two words not sure if today might be Friday, depending on if this year has a 29th of February. The emoticon :( if today is certainly not Friday. -----Examples----- Sample Input 1: 10 OCT MON Sample Output 1: :( Sample Input 2: 2 JAN THU Sample Output 2: TGIF\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nFriday is the highlight of B\u00f8rge and \u00c5se\u2019s life. They can meet up with their buddies in the ITU Friday bar and discuss anything they want: the weather, sports, favourite editors, politics, religion, and gossip about celebrities. Life can be good.\n\nUnfortunately, they don\u2019t know which day of the week it is! They\u2019ve woken up in a strange apartment, phones missing, and with little memory of the recent past. Which day is it? Which year is it even?\n\nAfter some searching, they establish today\u2019s date, because the calendar on the wall displays it. Also, \u00c5se has found the remains of an old newspaper from 1 January in her handbag, which has that weekday printed on the front page.\n\nHelp B\u00f8rge and \u00c5se figure out if today is Friday.\n\n-----Input-----\nOn the first line, today\u2019s date. The date consists of two parts, separated by space. The first part is in an integer (the day of the month) $d$, with $1\\leq d\\leq 31$. The second part is the name of the month, abbreviated as JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, or DEC.\n\nOn the second line, the name of the day on 1 January of the current year, abbreviated as MON, TUE, WED, THU, FRI, SAT, SUN.\n\n-----Output-----\nOutput a single line: The four letters TGIF, abbreviating \u201cThank God it\u2019s Friday\u201d if today is certainly Friday. The two words not sure if today might be Friday, depending on if this year has a 29th of February. The emoticon :( if today is certainly not Friday.\n\n-----Examples-----\nSample Input 1:\n10 OCT\nMON\nSample Output 1:\n:(\n\nSample Input 2:\n2 JAN\nTHU\nSample Output 2:\nTGIF\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n There are n types of coins in Byteland. Conveniently, the denomination of the coin type k divides the denomination of the coin type k + 1, the denomination of the coin type 1 equals 1 tugrick. The ratio of the denominations of coin types k + 1 and k equals a_{k}. It is known that for each x there are at most 20 coin types of denomination x. Byteasar has b_{k} coins of type k with him, and he needs to pay exactly m tugricks. It is known that Byteasar never has more than 3 10^5 coins with him. Byteasar want to know how many ways there are to pay exactly m tugricks. Two ways are different if there is an integer k such that the amount of coins of type k differs in these two ways. As all Byteland citizens, Byteasar wants to know the number of ways modulo 10^9 + 7. \n-----Input----- The first line contains single integer n (1 \u2264 n \u2264 3\u00b710^5)\u00a0\u2014 the number of coin types. The second line contains n - 1 integers a_1, a_2, ..., a_{n} - 1 (1 \u2264 a_{k} \u2264 10^9)\u00a0\u2014 the ratios between the coin types denominations. It is guaranteed that for each x there are at most 20 coin types of denomination x. The third line contains n non-negative integers b_1, b_2, ..., b_{n}\u00a0\u2014 the number of coins of each type Byteasar has. It is guaranteed that the sum of these integers doesn't exceed 3\u00b710^5. The fourth line contains single integer m (0 \u2264 m < 10^10000)\u00a0\u2014 the amount in tugricks Byteasar needs to pay. -----Output----- Print single integer\u00a0\u2014 the number of ways to pay exactly m tugricks modulo 10^9 + 7. -----Examples----- Input 1 4 2 Output 1 Input 2 1 4 4 2 Output 3 Input 3 3 3 10 10 10 17 Output 6 -----Note----- In the first example Byteasar has 4 coins of denomination 1, and he has to pay 2 tugricks. There is only one way. In the second example Byteasar has 4 coins of each of two different types of denomination 1, he has to pay 2 tugricks. There are 3 ways: pay one coin of the first type and one coin of the other, pay two coins of the first type, and pay two coins of the second type. In the third example the denominations are equal to 1, 3, 9.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThere are n types of coins in Byteland. Conveniently, the denomination of the coin type k divides the denomination of the coin type k + 1, the denomination of the coin type 1 equals 1 tugrick. The ratio of the denominations of coin types k + 1 and k equals a_{k}. It is known that for each x there are at most 20 coin types of denomination x.\n\nByteasar has b_{k} coins of type k with him, and he needs to pay exactly m tugricks. It is known that Byteasar never has more than 3\u00b710^5 coins with him. Byteasar want to know how many ways there are to pay exactly m tugricks. Two ways are different if there is an integer k such that the amount of coins of type k differs in these two ways. As all Byteland citizens, Byteasar wants to know the number of ways modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 3\u00b710^5)\u00a0\u2014 the number of coin types.\n\nThe second line contains n - 1 integers a_1, a_2, ..., a_{n} - 1 (1 \u2264 a_{k} \u2264 10^9)\u00a0\u2014 the ratios between the coin types denominations. It is guaranteed that for each x there are at most 20 coin types of denomination x.\n\nThe third line contains n non-negative integers b_1, b_2, ..., b_{n}\u00a0\u2014 the number of coins of each type Byteasar has. It is guaranteed that the sum of these integers doesn't exceed 3\u00b710^5.\n\nThe fourth line contains single integer m (0 \u2264 m < 10^10000)\u00a0\u2014 the amount in tugricks Byteasar needs to pay.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the number of ways to pay exactly m tugricks modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n1\n\n4\n2\n\nOutput\n1\n\nInput\n2\n1\n4 4\n2\n\nOutput\n3\n\nInput\n3\n3 3\n10 10 10\n17\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first example Byteasar has 4 coins of denomination 1, and he has to pay 2 tugricks. There is only one way.\n\nIn the second example Byteasar has 4 coins of each of two different types of denomination 1, he has to pay 2 tugricks. There are 3 ways: pay one coin of the first type and one coin of the other, pay two coins of the first type, and pay two coins of the second type.\n\nIn the third example the denominations are equal to 1, 3, 9.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Michael works in a bakery. At the end of his shift, his boss wants the breads sorted in a certain order. She can t seem to decide on which order, though   every day there seems to be a new one   to Michael s despair. Michael has worked there for a while now and has learned a neat trick with his wooden bakery paddle. He can take three breads next to each other on his paddle and throw them up in the air such that when they land, the right-most has moved to the left-most position, and the two other breads have moved one place to the right. In other words, he can rotate to the right a subsequence of breads of length three. Before the end of the shift, his coworkers place the breads in a long line. Michael would like to sort the line of breads using his paddle trick. He can take any three consecutive breads along the line on his paddle, rotate them, and then put them back. Sometimes though, it does not matter how many times he uses his paddle   the line of bread just doesn t seem to be possible to sort the way the boss wants  \n\n-----Input----- The first line of input contains a positive integer $N, (3 \\leq N \\leq 100000)$, denoting the number of breads. Then two lines follow: On the first line, a permutation of the integers $1$ through $N$ describing the order in which the breads are lined up. On the second line, a permutation of the integers $1$ through $N$ describing how Michael\u2019s boss wants the breads sorted. -----Output----- Output \u201cPossible\u201d if Michael can sort the breads with his paddle in the order prescribed by his boss, otherwise \u201cImpossible\u201d. -----Examples----- Sample Input: 4 1 3 4 2 4 3 2 1 Sample Output: Possible\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nMichael works in a bakery. At the end of his shift, his boss wants the breads sorted in a certain order. She can\u2019t seem to decide on which order, though \u2013 every day there seems to be a new one \u2013 to Michael\u2019s despair. Michael has worked there for a while now and has learned a neat trick with his wooden bakery paddle. He can take three breads next to each other on his paddle and throw them up in the air such that when they land, the right-most has moved to the left-most position, and the two other breads have moved one place to the right. In other words, he can rotate to the right a subsequence of breads of length three.\n\nBefore the end of the shift, his coworkers place the breads in a long line. Michael would like to sort the line of breads using his paddle trick. He can take any three consecutive breads along the line on his paddle, rotate them, and then put them back. Sometimes though, it does not matter how many times he uses his paddle \u2013 the line of bread just doesn\u2019t seem to be possible to sort the way the boss wants\u2026\n\n-----Input-----\nThe first line of input contains a positive integer $N, (3 \\leq N \\leq 100000)$, denoting the number of breads. Then two lines follow: On the first line, a permutation of the integers $1$ through $N$ describing the order in which the breads are lined up. On the second line, a permutation of the integers $1$ through $N$ describing how Michael\u2019s boss wants the breads sorted.\n\n-----Output-----\nOutput \u201cPossible\u201d if Michael can sort the breads with his paddle in the order prescribed by his boss, otherwise \u201cImpossible\u201d.\n\n-----Examples-----\nSample Input:\n4\n1 3 4 2\n4 3 2 1\nSample Output:\nPossible\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given a chessboard with n rows and n columns, place n knights on the board such that in the end there are at least n2/10 knights. \n-----Input----- The only line of input contains one integer $n$ ($1 \\le n \\le 10^{3}$)\u00a0\u2014 number of knights in the initial placement. -----Output----- Print $n$ lines. Each line should contain $2$ numbers $x_{i}$ and $y_{i}$ ($-10^{9} \\le x_{i}, \\,\\, y_{i} \\le 10^{9}$)\u00a0\u2014 coordinates of $i$-th knight. For all $i \\ne j$, $(x_{i}, \\,\\, y_{i}) \\ne (x_{j}, \\,\\, y_{j})$ should hold. In other words, all knights should be in different cells. It is guaranteed that the solution exists. -----Examples----- Input 4 Output 1 1 3 1 1 5 4 4 Input 7 Output 2 1 1 2 4 1 5 2 2 6 5 7 6 6 -----Note----- Let's look at second example: $\\left. \\begin{array}{|l|l|l|l|l|l|l|l|l|} \\hline 7 & {} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 6 & {} & {0} & {} & {} & {} & {0} & {} \\\\ \\hline 5 & {} & {} & {} & {2} & {} & {} & {} \\\\ \\hline 4 & {} & {} & {} & {} & {} & {} & {} \\\\ \\hline 3 & {} & {} & {1} & {} & {} & {} & {} \\\\ \\hline 2 & {0} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 1 & {} & {0} & {} & {0} & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} & {4} & {5} & {6} & {7} \\\\ \\hline \\end{array} \\right.$ Green zeroes are initial knights. Cell $(3, \\,\\, 3)$ is under attack of $4$ knights in cells $(1, \\,\\, 2)$, $(2, \\,\\, 1)$, $(4, \\,\\, 1)$ and $(5, \\,\\, 2)$, therefore Ivan will place a knight in this cell. Cell $(4, \\,\\, 5)$ is initially attacked by only $3$ knights in cells $(2, \\,\\, 6)$, $(5, \\,\\, 7)$ and $(6, \\,\\, 6)$. But new knight in cell $(3, \\,\\, 3)$ also attacks cell $(4, \\,\\, 5)$, now it is attacked by $4$ knights and Ivan will place another knight in this cell. There are no more free cells which are attacked by $4$ or more knights, so the process stops. There are $9$ knights in the end, which is not less than $\\lfloor \\frac{7^{2}}{10} \\rfloor = 4$.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nIvan places knights on infinite chessboard. Initially there are $n$ knights. If there is free cell which is under attack of at least $4$ knights then he places new knight in this cell. Ivan repeats this until there are no such free cells. One can prove that this process is finite. One can also prove that position in the end does not depend on the order in which new knights are placed.\n\nIvan asked you to find initial placement of exactly $n$ knights such that in the end there will be at least $\\lfloor \\frac{n^{2}}{10} \\rfloor$ knights.\n\n\n-----Input-----\n\nThe only line of input contains one integer $n$ ($1 \\le n \\le 10^{3}$)\u00a0\u2014 number of knights in the initial placement.\n\n\n-----Output-----\n\nPrint $n$ lines. Each line should contain $2$ numbers $x_{i}$ and $y_{i}$ ($-10^{9} \\le x_{i}, \\,\\, y_{i} \\le 10^{9}$)\u00a0\u2014 coordinates of $i$-th knight. For all $i \\ne j$, $(x_{i}, \\,\\, y_{i}) \\ne (x_{j}, \\,\\, y_{j})$ should hold. In other words, all knights should be in different cells.\n\nIt is guaranteed that the solution exists.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1 1\n3 1\n1 5\n4 4\n\nInput\n7\n\nOutput\n2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n\n\n\n-----Note-----\n\nLet's look at second example:\n\n$\\left. \\begin{array}{|l|l|l|l|l|l|l|l|l|} \\hline 7 & {} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 6 & {} & {0} & {} & {} & {} & {0} & {} \\\\ \\hline 5 & {} & {} & {} & {2} & {} & {} & {} \\\\ \\hline 4 & {} & {} & {} & {} & {} & {} & {} \\\\ \\hline 3 & {} & {} & {1} & {} & {} & {} & {} \\\\ \\hline 2 & {0} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 1 & {} & {0} & {} & {0} & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} & {4} & {5} & {6} & {7} \\\\ \\hline \\end{array} \\right.$\n\nGreen zeroes are initial knights. Cell $(3, \\,\\, 3)$ is under attack of $4$ knights in cells $(1, \\,\\, 2)$, $(2, \\,\\, 1)$, $(4, \\,\\, 1)$ and $(5, \\,\\, 2)$, therefore Ivan will place a knight in this cell. Cell $(4, \\,\\, 5)$ is initially attacked by only $3$ knights in cells $(2, \\,\\, 6)$, $(5, \\,\\, 7)$ and $(6, \\,\\, 6)$. But new knight in cell $(3, \\,\\, 3)$ also attacks cell $(4, \\,\\, 5)$, now it is attacked by $4$ knights and Ivan will place another knight in this cell. There are no more free cells which are attacked by $4$ or more knights, so the process stops. There are $9$ knights in the end, which is not less than $\\lfloor \\frac{7^{2}}{10} \\rfloor = 4$.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n # Christmas is coming, and our protagonist, Bob, is preparing a spectacular present for his long-time best friend Alice. This year, he decides to prepare $n$ boxes of chocolate, numbered from $1$ to $n$. Initially, the $i$-th box contains $a_i$ chocolate pieces. Since Bob is a typical nice guy, he will not send Alice $n$ empty boxes. In other words, at least one of $a_1, a_2, \\ldots, a_n$ is positive. Since Alice dislikes coprime sets, she will be happy only if there exists some integer $k > 1$ such that the number of pieces in each box is divisible by $k$. Note that Alice won't mind if there exists some empty boxes.  Charlie, Alice's boyfriend, also is Bob's second best friend, so he decides to help Bob by rearranging the chocolate pieces. In one second, Charlie can pick up a piece in box $i$ and put it into either box $i-1$ or box $i+1$ (if such boxes exist). Of course, he wants to help his friend as quickly as possible. Therefore, he asks you to calculate the minimum number of seconds he would need to make Alice happy. \n\n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the number of chocolate boxes. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^6$)\u00a0\u2014 the number of chocolate pieces in the $i$-th box. It is guaranteed that at least one of $a_1, a_2, \\ldots, a_n$ is positive. -----Output----- If there is no way for Charlie to make Alice happy, print $-1$. Otherwise, print a single integer $x$\u00a0\u2014 the minimum number of seconds for Charlie to help Bob make Alice happy. -----Examples----- Input 3 4 8 5 Output 9 Input 5 3 10 2 1 5 Output 2 Input 4 0 5 15 10 Output 0 Input 1 1 Output -1 -----Note----- In the first example, Charlie can move all chocolate pieces to the second box. Each box will be divisible by $17$. In the second example, Charlie can move a piece from box $2$ to box $3$ and a piece from box $4$ to box $5$. Each box will be divisible by $3$. In the third example, each box is already divisible by $5$. In the fourth example, since Charlie has no available move, he cannot help Bob make Alice happy.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nThis is the harder version of the problem. In this version, $1 \\le n \\le 10^6$ and $0 \\leq a_i \\leq 10^6$. You can hack this problem if you locked it. But you can hack the previous problem only if you locked both problems\n\nChristmas is coming, and our protagonist, Bob, is preparing a spectacular present for his long-time best friend Alice. This year, he decides to prepare $n$ boxes of chocolate, numbered from $1$ to $n$. Initially, the $i$-th box contains $a_i$ chocolate pieces.\n\nSince Bob is a typical nice guy, he will not send Alice $n$ empty boxes. In other words, at least one of $a_1, a_2, \\ldots, a_n$ is positive. Since Alice dislikes coprime sets, she will be happy only if there exists some integer $k > 1$ such that the number of pieces in each box is divisible by $k$. Note that Alice won't mind if there exists some empty boxes. \n\nCharlie, Alice's boyfriend, also is Bob's second best friend, so he decides to help Bob by rearranging the chocolate pieces. In one second, Charlie can pick up a piece in box $i$ and put it into either box $i-1$ or box $i+1$ (if such boxes exist). Of course, he wants to help his friend as quickly as possible. Therefore, he asks you to calculate the minimum number of seconds he would need to make Alice happy.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the number of chocolate boxes.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 10^6$)\u00a0\u2014 the number of chocolate pieces in the $i$-th box.\n\nIt is guaranteed that at least one of $a_1, a_2, \\ldots, a_n$ is positive.\n\n\n-----Output-----\n\nIf there is no way for Charlie to make Alice happy, print $-1$.\n\nOtherwise, print a single integer $x$\u00a0\u2014 the minimum number of seconds for Charlie to help Bob make Alice happy.\n\n\n-----Examples-----\nInput\n3\n4 8 5\n\nOutput\n9\n\nInput\n5\n3 10 2 1 5\n\nOutput\n2\n\nInput\n4\n0 5 15 10\n\nOutput\n0\n\nInput\n1\n1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example, Charlie can move all chocolate pieces to the second box. Each box will be divisible by $17$.\n\nIn the second example, Charlie can move a piece from box $2$ to box $3$ and a piece from box $4$ to box $5$. Each box will be divisible by $3$.\n\nIn the third example, each box is already divisible by $5$.\n\nIn the fourth example, since Charlie has no available move, he cannot help Bob make Alice happy.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given an integer sequence A of length N and an integer K. You will perform the following operation on this sequence Q times: - Choose a contiguous subsequence of length K, then remove the smallest element among the K elements contained in the chosen subsequence (if there are multiple such elements, choose one of them as you like). Let X and Y be the values of the largest and smallest element removed in the Q operations. You would like X-Y to be as small as possible. Find the smallest possible value of X-Y when the Q operations are performed optimally. \n-----Input----- Input is given from Standard Input in the following format: N K Q A_1 A_2 ... A_N -----Output----- Print the smallest possible value of X-Y. -----Sample Input----- 5 3 2 4 3 1 5 2 -----Sample Output----- 1 In the first operation, whichever contiguous subsequence of length 3 we choose, the minimum element in it is 1. Thus, the first operation removes A_3=1 and now we have A=(4,3,5,2). In the second operation, it is optimal to choose (A_2,A_3,A_4)=(3,5,2) as the contiguous subsequence of length 3 and remove A_4=2. In this case, the largest element removed is 2, and the smallest is 1, so their difference is 2-1=1.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given an integer sequence A of length N and an integer K.\nYou will perform the following operation on this sequence Q times:\n - Choose a contiguous subsequence of length K, then remove the smallest element among the K elements contained in the chosen subsequence (if there are multiple such elements, choose one of them as you like).\nLet X and Y be the values of the largest and smallest element removed in the Q operations. You would like X-Y to be as small as possible.\nFind the smallest possible value of X-Y when the Q operations are performed optimally.\n\n-----Constraints-----\n - 1 \\leq N \\leq 2000\n - 1 \\leq K \\leq N\n - 1 \\leq Q \\leq N-K+1\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K Q\nA_1 A_2 ... A_N\n\n-----Output-----\nPrint the smallest possible value of X-Y.\n\n-----Sample Input-----\n5 3 2\n4 3 1 5 2\n\n-----Sample Output-----\n1\n\nIn the first operation, whichever contiguous subsequence of length 3 we choose, the minimum element in it is 1.\nThus, the first operation removes A_3=1 and now we have A=(4,3,5,2).\nIn the second operation, it is optimal to choose (A_2,A_3,A_4)=(3,5,2) as the contiguous subsequence of length 3 and remove A_4=2.\nIn this case, the largest element removed is 2, and the smallest is 1, so their difference is 2-1=1.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Consider a table of size $n \\times m$, initially fully white. Rows are numbered $1$ through $n$ from top to bottom, columns $1$ through $m$ from left to right. Some square inside the table with odd side length was painted black. Find the center of this square. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 115$) \u2014 the number of rows and the number of columns in the table. The $i$-th of the next $n$ lines contains a string of $m$ characters $s_{i1} s_{i2} \\ldots s_{im}$ ($s_{ij}$ is 'W' for white cells and 'B' for black cells), describing the $i$-th row of the table. -----Output----- Output two integers $r$ and $c$ ($1 \\le r \\le n$, $1 \\le c \\le m$) separated by a space \u2014 the row and column numbers of the center of the black square. -----Examples----- Input 5 6 WWBBBW WWBBBW WWBBBW WWWWWW WWWWWW Output 2 4 Input 3 3 WWW BWW WWW Output 2 1\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nConsider a table of size $n \\times m$, initially fully white. Rows are numbered $1$ through $n$ from top to bottom, columns $1$ through $m$ from left to right. Some square inside the table with odd side length was painted black. Find the center of this square.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 115$) \u2014 the number of rows and the number of columns in the table.\n\nThe $i$-th of the next $n$ lines contains a string of $m$ characters $s_{i1} s_{i2} \\ldots s_{im}$ ($s_{ij}$ is 'W' for white cells and 'B' for black cells), describing the $i$-th row of the table.\n\n\n-----Output-----\n\nOutput two integers $r$ and $c$ ($1 \\le r \\le n$, $1 \\le c \\le m$) separated by a space \u2014 the row and column numbers of the center of the black square.\n\n\n-----Examples-----\nInput\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\nOutput\n2 4\n\nInput\n3 3\nWWW\nBWW\nWWW\n\nOutput\n2 1\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Mikhail the Freelancer dreams of two things: to become a cool programmer and to buy a flat in Moscow. To become a cool programmer, he needs at least p experience points, and a desired flat in Moscow costs q dollars. Mikhail is determined to follow his dreams and registered at a freelance site. He has suggestions to work on n distinct projects. Mikhail has already evaluated that the participation in the i-th project will increase his experience by a_{i} per day and bring b_{i} dollars per day. As freelance work implies flexible working hours, Mikhail is free to stop working on one project at any time and start working on another project. Doing so, he receives the respective share of experience and money. Mikhail is only trying to become a cool programmer, so he is able to work only on one project at any moment of time. Find the real value, equal to the minimum number of days Mikhail needs to make his dream come true. For example, suppose Mikhail is suggested to work on three projects and a_1 = 6, b_1 = 2, a_2 = 1, b_2 = 3, a_3 = 2, b_3 = 6. Also, p = 20 and q = 20. In order to achieve his aims Mikhail has to work for 2.5 days on both first and third projects. Indeed, a_1 2.5 + a_2 0 + a_3 2.5 = 6 2.5 + 1 0 + 2 2.5 = 20 and b_1 2.5 + b_2 0 + b_3 2.5 = 2 2.5 + 3 0 + 6 2.5 = 20. \n-----Input----- The first line of the input contains three integers n, p and q (1 \u2264 n \u2264 100 000, 1 \u2264 p, q \u2264 1 000 000)\u00a0\u2014 the number of projects and the required number of experience and money. Each of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the daily increase in experience and daily income for working on the i-th project. -----Output----- Print a real value\u00a0\u2014 the minimum number of days Mikhail needs to get the required amount of experience and money. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.  Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$. -----Examples----- Input 3 20 20 6 2 1 3 2 6 Output 5.000000000000000 Input 4 1 1 2 3 3 2 2 3 3 2 Output 0.400000000000000 -----Note----- First sample corresponds to the example in the problem statement.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nMikhail the Freelancer dreams of two things: to become a cool programmer and to buy a flat in Moscow. To become a cool programmer, he needs at least p experience points, and a desired flat in Moscow costs q dollars. Mikhail is determined to follow his dreams and registered at a freelance site.\n\nHe has suggestions to work on n distinct projects. Mikhail has already evaluated that the participation in the i-th project will increase his experience by a_{i} per day and bring b_{i} dollars per day. As freelance work implies flexible working hours, Mikhail is free to stop working on one project at any time and start working on another project. Doing so, he receives the respective share of experience and money. Mikhail is only trying to become a cool programmer, so he is able to work only on one project at any moment of time.\n\nFind the real value, equal to the minimum number of days Mikhail needs to make his dream come true.\n\nFor example, suppose Mikhail is suggested to work on three projects and a_1 = 6, b_1 = 2, a_2 = 1, b_2 = 3, a_3 = 2, b_3 = 6. Also, p = 20 and q = 20. In order to achieve his aims Mikhail has to work for 2.5 days on both first and third projects. Indeed, a_1\u00b72.5 + a_2\u00b70 + a_3\u00b72.5 = 6\u00b72.5 + 1\u00b70 + 2\u00b72.5 = 20 and b_1\u00b72.5 + b_2\u00b70 + b_3\u00b72.5 = 2\u00b72.5 + 3\u00b70 + 6\u00b72.5 = 20.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, p and q (1 \u2264 n \u2264 100 000, 1 \u2264 p, q \u2264 1 000 000)\u00a0\u2014 the number of projects and the required number of experience and money.\n\nEach of the next n lines contains two integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the daily increase in experience and daily income for working on the i-th project.\n\n\n-----Output-----\n\nPrint a real value\u00a0\u2014 the minimum number of days Mikhail needs to get the required amount of experience and money. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 20 20\n6 2\n1 3\n2 6\n\nOutput\n5.000000000000000\n\nInput\n4 1 1\n2 3\n3 2\n2 3\n3 2\n\nOutput\n0.400000000000000\n\n\n\n-----Note-----\n\nFirst sample corresponds to the example in the problem statement.\n\"\"\"\ndef code():"
}