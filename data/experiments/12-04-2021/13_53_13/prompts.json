{
    "0": "Python 3\n\"\"\"\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n\n\nReturn:\n\n\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:",
    "1": "Python 3\n\"\"\"\nGiven a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.\n\nNote:\u00a0A leaf is a node with no children.\n\nExample:\n\nGiven the below binary tree and sum = 22,\n\n\n      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n\n\nReturn:\n\n\n[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def pathSum(self, root: TreeNode, sum: int) -> List[List[int]]:",
    "2": "Python 3\n\"\"\"\nThe input given are two series of non-negative integers following Poisson or a uniform distribution.\n  \nYou need to output whether the series follows a Poisson or a uniform distribution?\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nHeidi is a statistician to the core, and she likes to study the evolution of marmot populations in each of V (1 \u2264 V \u2264 100) villages! So it comes that every spring, when Heidi sees the first snowdrops sprout in the meadows around her barn, she impatiently dons her snowshoes and sets out to the Alps, to welcome her friends the marmots to a new season of thrilling adventures.\n\nArriving in a village, Heidi asks each and every marmot she comes across for the number of inhabitants of that village. This year, the marmots decide to play an April Fools' joke on Heidi. Instead of consistently providing the exact number of inhabitants P (10 \u2264 P \u2264 1000) of the village, they respond with a random non-negative integer k, drawn from one of two types of probability distributions:\n\n  Poisson (d'avril) distribution: the probability of getting an answer k is $\\frac{p^{k} e^{-P}}{k !}$ for k = 0, 1, 2, 3, ...,  Uniform distribution: the probability of getting an answer k is $\\frac{1}{2 P + 1}$ for k = 0, 1, 2, ..., 2P. \n\nHeidi collects exactly 250 answers per village. Every village follows either the Poisson or the uniform distribution. Heidi cannot tell marmots apart, so she may query some marmots several times, and each time the marmot will answer with a new number drawn from the village's distribution.\n\nCan you help Heidi to find out whether a village follows a Poisson or a uniform distribution?\n\n\n-----Input-----\n\nThe first line of input will contain the number of villages V (1 \u2264 V \u2264 100). The following V lines each describe one village. The description of each village consists of 250 space-separated integers k, drawn from one of the above distributions.\n\n\n-----Output-----\n\nOutput one line per village, in the same order as provided in the input. The village's line shall state poisson if the village's distribution is of the Poisson type, and uniform if the answer came from a uniform distribution.\n\n\n-----Example-----\nInput\n2\n92 100 99 109 93 105 103 106 101 99 ... (input is truncated)\n28 180 147 53 84 80 180 85 8 16 ... (input is truncated)\nOutput\npoisson\nuniform\n\n\n\n-----Note-----\n\nThe full example input is visually represented below, along with the probability distribution function it was drawn from (the y-axis is labeled by its values multiplied by 250).\n\n[Image]\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nAlex and Lee play a game with a list of numbers. There are an even number of\u00a0elements in the list and each value has a positive integer number.\nThe objective of the game is to end with largest value. The total sum of values is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first. Each turn, a player\u00a0takes value from either the beginning or the end of the list.\u00a0This continues until there are no more values left, at which point the person with the largest value wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\n\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\n\"\"\"\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:",
    "5": "Python 3\n\"\"\"\nAlex and Lee play a game with piles of stones.\u00a0 There are an even number of\u00a0piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most\u00a0stones.\u00a0 The total number of stones is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first.\u00a0 Each turn, a player\u00a0takes the entire pile of stones from either the beginning or the end of the row.\u00a0 This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alex and Lee play optimally, return True\u00a0if and only if Alex wins the game.\n\u00a0\nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n\u00a0\nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n\"\"\"\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:",
    "6": "Python 3\n\"\"\"\nTask\n=======\n\nMake a esolang interpreter for the language Tick. Tick is a descendant of [Ticker].\n\nSyntax/Info\n========\n\nCommands are given in character format. Non-command characters should be ignored. Tick  only has 4 commands.\n\nCommands\n========\n\n`>`: Move data selector right\n\n`<`: Move data selector left(infinite in both directions)\n\n`+`: Increment memory cell by 1. 255+1=0\n\n`*`: Add ascii value of memory cell to the output tape.\n\nExamples\n========\n\n**Hello world!**\n\n```\nn```\n\"\"\"\ndef interpreter(tape):",
    "7": "Python 3\n\"\"\"\nTask\n=======\n\nMake a custom esolang interpreter for the language Tick. Tick is a descendant of [Ticker](https://www.codewars.com/kata/esolang-ticker) but also very different data and command-wise.\n\nSyntax/Info\n========\n\nCommands are given in character format. Non-command characters should be ignored. Tick has an potentially infinite memory as opposed to Ticker(which you have a special command to add a new cell) and only has 4 commands(as opposed to 7). Read about this esolang [here](https://esolangs.org/wiki/Tick).\n\nCommands\n========\n\n`>`: Move data selector right\n\n`<`: Move data selector left(infinite in both directions)\n\n`+`: Increment memory cell by 1. 255+1=0\n\n`*`: Add ascii value of memory cell to the output tape.\n\nExamples\n========\n\n**Hello world!**\n\n```\nn```\n\"\"\"\ndef interpreter(tape):",
    "8": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n can be composed from the first m lowercase English letters exist such that the length of Longest Common Subsequence between S and T is n - 1.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given a string S of length n with each character being one of the first m lowercase English letters. \n\nCalculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1.\n\nRecall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence.\n\n\n-----Input-----\n\nThe first line contains two numbers n and m denoting the length of string S and number of first English lowercase characters forming the character set for strings (1 \u2264 n \u2264 100 000, 2 \u2264 m \u2264 26).\n\nThe second line contains string S.\n\n\n-----Output-----\n\nPrint the only line containing the answer.\n\n\n-----Examples-----\nInput\n3 3\naaa\n\nOutput\n6\n\nInput\n3 3\naab\n\nOutput\n11\n\nInput\n1 2\na\n\nOutput\n1\n\nInput\n10 9\nabacadefgh\n\nOutput\n789\n\n\n\n-----Note-----\n\nFor the first sample, the 6 possible strings T are: aab, aac, aba, aca, baa, caa. \n\nFor the second sample, the 11 possible strings T are: aaa, aac, aba, abb, abc, aca, acb, baa, bab, caa, cab.\n\nFor the third sample, the only possible string T is b.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nNumbers $1, 2, 3, \\dots n$ (each integer from $1$ to $n$ once) are written on a board. In one operation you can erase any two numbers $a$ and $b$ from the board and write one integer $\\frac{a + b}{2}$ rounded up instead.\n\nYou should perform the given operation $n - 1$ times and make the resulting number that will be left on the board as small as possible. \n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe only line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of integers written on the board initially.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, in the first line, print the minimum possible number left on the board after $n - 1$ operations. Each of the next $n - 1$ lines should contain two integers\u00a0\u2014 numbers $a$ and $b$ chosen and erased in each operation.\n\n\n-----Example-----\nInput\n1\n4\n\nOutput\n2\n2 4\n3 3\n3 1\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nNumbers $1, 2, 3, \\dots n$ (each integer from $1$ to $n$ once) are written on a board. In one operation you can erase any two numbers $a$ and $b$ from the board and write one integer $\\frac{a + b}{2}$ rounded up instead.\n\nYou should perform the given operation $n - 1$ times and make the resulting number that will be left on the board as small as possible. \n\nFor example, if $n = 4$, the following course of action is optimal:  choose $a = 4$ and $b = 2$, so the new number is $3$, and the whiteboard contains $[1, 3, 3]$;  choose $a = 3$ and $b = 3$, so the new number is $3$, and the whiteboard contains $[1, 3]$;  choose $a = 1$ and $b = 3$, so the new number is $2$, and the whiteboard contains $[2]$. \n\nIt's easy to see that after $n - 1$ operations, there will be left only one number. Your goal is to minimize it.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases.\n\nThe only line of each test case contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$)\u00a0\u2014 the number of integers written on the board initially.\n\nIt's guaranteed that the total sum of $n$ over test cases doesn't exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each test case, in the first line, print the minimum possible number left on the board after $n - 1$ operations. Each of the next $n - 1$ lines should contain two integers\u00a0\u2014 numbers $a$ and $b$ chosen and erased in each operation.\n\n\n-----Example-----\nInput\n1\n4\n\nOutput\n2\n2 4\n3 3\n3 1\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nWrite a code to search for a number which is having maximum frequency of digit X in given different numbers. \n\n-----Input-----\nFirst Line contains number of test cases T. First Line of each test case contains N. Next line contains N space separated integers A1,A2,A3,....,AN. Where Ai integer indicates ith number. Next Line contains digit X.\n\n-----Output-----\nOutput the number which is having maximum frequency of digit X. If two or more numbers are having same maximum frequency then output the first occurred number among them in A1,A2,A3,....,AN\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30\n- 1 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 10200\n- 0 \u2264 X \u2264 9\n\n-----Example-----\nInput:\n2\n5\n345 1323 165 98 456\n3\n5\n335 876 98 1323 349\n3\n\nOutput:\n1323\n335\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nStuart is obsessed to numbers. He like all type of numbers in fact he is having a great collection of numbers in his room. His collection includes N different large numbers. But today he is searching for a number which is having maximum frequency of digit X. Numbers are large so he can\u2019t do the task on his own. Help him to find a number having maximum frequency of digit X.\n\n-----Input-----\nFirst Line contains number of test cases T. First Line of each test case contains N. Next line contains N space separated integers A1,A2,A3,....,AN. Where Ai integer indicates ith number in Stuart's room. Next Line contains digit X.\n\n-----Output-----\nOutput the number which is having maximum frequency of digit X. If two or more numbers are having same maximum frequency then output the first occurred number among them in A1,A2,A3,....,AN\n\n-----Constraints-----\n- 1 \u2264 T \u2264 30\n- 1 \u2264 N \u2264 100\n- 1 \u2264 Ai \u2264 10200\n- 0 \u2264 X \u2264 9\n\n-----Example-----\nInput:\n2\n5\n345 1323 165 98 456\n3\n5\n335 876 98 1323 349\n3\n\nOutput:\n1323\n335\n\n-----Explanation-----\nExample case 1. 1323 number is having maximum occurrence of digit 3.\nExample case 2. 335 & 1323 are having maximum occurrence of digit 3 so output must be first occurred number in the array i.e. 335.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given an array with some bits. there three possible combinations of bits 10, 11, 0. convert array to string and find if the last charecter should be a one bit charecter or not \n\nExample 1:\n\nInput: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n\n\n\nExample 2:\n\nInput: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\n\n\nNote:\n1 .\nbits[i] is always 0 or 1.\n\n\"\"\"\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:",
    "15": "Python 3\n\"\"\"\nWe have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).  \n\nNow given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.\n\nExample 1:\n\nInput: \nbits = [1, 0, 0]\nOutput: True\nExplanation: \nThe only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\n\n\n\nExample 2:\n\nInput: \nbits = [1, 1, 1, 0]\nOutput: False\nExplanation: \nThe only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\n\n\n\nNote:\n1 .\nbits[i] is always 0 or 1.\n\"\"\"\nclass Solution:\n    def isOneBitCharacter(self, bits: List[int]) -> bool:",
    "16": "Python 3\n\"\"\"\nYou are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction or not.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.\n\n\n-----Output-----\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n\n-----Examples-----\nInput\n2\n6 12 10\n4 3 10\n\nOutput\nFinite\nInfinite\n\nInput\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n\nOutput\nFinite\nFinite\nFinite\nInfinite\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nYou are given several queries. Each query consists of three integers $p$, $q$ and $b$. You need to answer whether the result of $p/q$ in notation with base $b$ is a finite fraction.\n\nA fraction in notation with base $b$ is finite if it contains finite number of numerals after the decimal point. It is also possible that a fraction has zero numerals after the decimal point.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^5$)\u00a0\u2014 the number of queries.\n\nNext $n$ lines contain queries, one per line. Each line contains three integers $p$, $q$, and $b$ ($0 \\le p \\le 10^{18}$, $1 \\le q \\le 10^{18}$, $2 \\le b \\le 10^{18}$). All numbers are given in notation with base $10$.\n\n\n-----Output-----\n\nFor each question, in a separate line, print Finite if the fraction is finite and Infinite otherwise.\n\n\n-----Examples-----\nInput\n2\n6 12 10\n4 3 10\n\nOutput\nFinite\nInfinite\n\nInput\n4\n1 1 2\n9 36 2\n4 12 3\n3 5 4\n\nOutput\nFinite\nFinite\nFinite\nInfinite\n\n\n\n-----Note-----\n\n$\\frac{6}{12} = \\frac{1}{2} = 0,5_{10}$\n\n$\\frac{4}{3} = 1,(3)_{10}$\n\n$\\frac{9}{36} = \\frac{1}{4} = 0,01_2$\n\n$\\frac{4}{12} = \\frac{1}{3} = 0,1_3$\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nA group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\\frac{n \\cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road.\n\nSome spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. It is not guaranteed that x is smaller than y.\n\nGiven n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264 10^9).\n\nEach of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds one needs to spend in order to visit all the cities exactly once.\n\n\n-----Examples-----\nInput\n5 2 3\n1 2\n1 3\n3 4\n5 3\n\nOutput\n9\n\nInput\n5 3 2\n1 2\n1 3\n3 4\n5 3\n\nOutput\n8\n\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nA group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\\frac{n \\cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road.\n\nA spanning tree is a set of roads containing exactly n - 1 roads such that it's possible to travel between any two cities using only these roads.\n\nSome spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. Note that it's not guaranteed that x is smaller than y.\n\nYou would like to travel through all the cities using the shortest path possible. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once.\n\n\n-----Input-----\n\nThe first line of the input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264 10^9).\n\nEach of the next n - 1 lines contains a description of a road in the spanning tree. The i-th of these lines contains two integers u_{i} and v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n)\u00a0\u2014 indices of the cities connected by the i-th road. It is guaranteed that these roads form a spanning tree.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of seconds one needs to spend in order to visit all the cities exactly once.\n\n\n-----Examples-----\nInput\n5 2 3\n1 2\n1 3\n3 4\n5 3\n\nOutput\n9\n\nInput\n5 3 2\n1 2\n1 3\n3 4\n5 3\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first sample, roads of the spanning tree have cost 2, while other roads have cost 3. One example of an optimal path is $5 \\rightarrow 3 \\rightarrow 4 \\rightarrow 1 \\rightarrow 2$.\n\nIn the second sample, we have the same spanning tree, but roads in the spanning tree cost 3, while other roads cost 2. One example of an optimal path is $1 \\rightarrow 4 \\rightarrow 5 \\rightarrow 2 \\rightarrow 3$.\n\"\"\"\ndef code():"
}