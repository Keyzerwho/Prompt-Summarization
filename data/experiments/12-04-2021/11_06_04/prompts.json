{
    "0": "Python 3\n\"\"\"\n Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target. Each number in candidates may only be used once in the combination.\nNote:        All numbers (including target) will be positive integers.        The solution set must not contain duplicate combinations. Example 1: Input: candidates =\u00a0[10,1,2,7,6,1,5], target =\u00a08, A solution set is: [   [1, 7],   [1, 2, 5],   [2, 6],   [1, 1, 6] ] Example 2: Input: candidates =\u00a0[2,5,2,1,2], target =\u00a05, A solution set is: [ \u00a0 [1,2,2], \u00a0 [5] ]\n\"\"\"\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:",
    "1": "Python 3\n\"\"\"\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\u00a0where the candidate numbers sums to target.\n\nEach number in candidates\u00a0may only be used once in the combination.\n\nNote:\n\n\n       All numbers (including target) will be positive integers.\n       The solution set must not contain duplicate combinations.\n\n\nExample 1:\n\n\nInput: candidates =\u00a0[10,1,2,7,6,1,5], target =\u00a08,\nA solution set is:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n\n\nExample 2:\n\n\nInput: candidates =\u00a0[2,5,2,1,2], target =\u00a05,\nA solution set is:\n[\n\u00a0 [1,2,2],\n\u00a0 [5]\n]\n\"\"\"\nclass Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:",
    "2": "Python 3\n\"\"\"\n We have a string S of length N consisting of A, B, and C. You can do the following operation on S zero or more times: - Choose i (1 \\leq i \\leq |S| - 1) such that S_i \\neq S_{i + 1}. Replace S_i with the character (among A, B, and C) that is different from both S_i and S_{i + 1}, and remove S_{i + 1} from S. Find the number of distinct strings that S can be after zero or more operations, and print the count modulo (10^9+7). \n\n-----Input----- Input is given from Standard Input in the following format: N S -----Output----- Print the number of distinct strings that S can be after zero or more operations, modulo (10^9+7). -----Sample Input----- 5 ABAAC -----Sample Output----- 11 For example, the following sequence of operations turns S into ACB:  - First, choose i=2. We replace S_2 with C and remove S_3, turning S into ACAC.  - Then, choose i=3. We replace S_3 with B and remove S_4, turning S into ACB.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWe have a string S of length N consisting of A, B, and C.\nYou can do the following operation on S zero or more times:\n - Choose i (1 \\leq i \\leq |S| - 1) such that S_i \\neq S_{i + 1}. Replace S_i with the character (among A, B, and C) that is different from both S_i and S_{i + 1}, and remove S_{i + 1} from S.\nFind the number of distinct strings that S can be after zero or more operations, and print the count modulo (10^9+7).\n\n-----Constraints-----\n - 1 \\leq N \\leq 10^6\n - S is a string of length N consisting of A, B, and C.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nS\n\n-----Output-----\nPrint the number of distinct strings that S can be after zero or more operations, modulo (10^9+7).\n\n-----Sample Input-----\n5\nABAAC\n\n-----Sample Output-----\n11\n\nFor example, the following sequence of operations turns S into ACB:\n - First, choose i=2. We replace S_2 with C and remove S_3, turning S into ACAC.\n - Then, choose i=3. We replace S_3 with B and remove S_4, turning S into ACB.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a polygon on a plane. The polygon is not necessarily convex. The polygon is tied to a point P which lies outside the polygon. The polygon is switched on. The polygon will make a circle around P. Find the area of the region that will be cleared from snow. \n-----Input----- The first line of the input contains three integers\u00a0\u2014 the number of vertices of the polygon n ($3 \\leq n \\leq 100000$), and coordinates of point P. Each of the next n lines contains two integers\u00a0\u2014 coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line. All the numbers in the input are integers that do not exceed 1 000 000 in their absolute value. -----Output----- Print a single real value number\u00a0\u2014 the area of the region that will be cleared. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.  Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$. -----Examples----- Input 3 0 0 0 1 -1 2 1 2 Output 12.566370614359172464 Input 4 1 -1 0 0 1 2 2 0 1 1 Output 21.991148575128551812 -----Note----- In the first sample snow will be removed from that area:  $0$\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nPeter got a new snow blower as a New Year present. Of course, Peter decided to try it immediately. After reading the instructions he realized that it does not work like regular snow blowing machines. In order to make it work, you need to tie it to some point that it does not cover, and then switch it on. As a result it will go along a circle around this point and will remove all the snow from its path.\n\nFormally, we assume that Peter's machine is a polygon on a plane. Then, after the machine is switched on, it will make a circle around the point to which Peter tied it (this point lies strictly outside the polygon). That is, each of the points lying within or on the border of the polygon will move along the circular trajectory, with the center of the circle at the point to which Peter tied his machine.\n\nPeter decided to tie his car to point P and now he is wondering what is the area of \u200b\u200bthe region that will be cleared from snow. Help him.\n\n\n-----Input-----\n\nThe first line of the input contains three integers\u00a0\u2014 the number of vertices of the polygon n ($3 \\leq n \\leq 100000$), and coordinates of point P.\n\nEach of the next n lines contains two integers\u00a0\u2014 coordinates of the vertices of the polygon in the clockwise or counterclockwise order. It is guaranteed that no three consecutive vertices lie on a common straight line.\n\nAll the numbers in the input are integers that do not exceed 1 000 000 in their absolute value.\n\n\n-----Output-----\n\nPrint a single real value number\u00a0\u2014 the area of the region that will be cleared. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n3 0 0\n0 1\n-1 2\n1 2\n\nOutput\n12.566370614359172464\n\nInput\n4 1 -1\n0 0\n1 2\n2 0\n1 1\n\nOutput\n21.991148575128551812\n\n\n\n-----Note-----\n\nIn the first sample snow will be removed from that area:\n\n $0$\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n A water company is trying to provide water from its pumping station to a mansion. The company owns $n$ water stations, numbered $1 \\ldots n$, which are connected by a variety of pipes. Water can flow through both directions of a pipe, but the total amount of water that can flow through the pipe is bounded by the capacity of the pipe. The water company is constantly improving the pipes, increasing the capacity of various pipes. The water company is conducting $k$ improvements (each of which is permanent after it is executed). An improvement consists of taking a pipe between two locations and increasing its capacity by a fixed amount, or installing a pipe between two locations which are not directly connected by a pipe. After each improvement, the water company wants to know the maximum amount of water the mansion could receive.\n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains three integers, $n$ ($2 \\le n \\le 100$), $p$ ($0 \\le p \\le \\frac{n (n-1)}{2}$), and $k$ ($1 \\le k \\le 10000$), where $n$ is the number of stations, $p$ is the number of initial pipes, and $k$ is the number of improvements. The first station in the list is always the pumping station, and the second is always the mansion. The next $p$ lines will describe the pipes in the initial setup. The lines will each contain three integers, $a$, $b$ ($1 \\le a < b \\le n$) and $c$ ($1 \\le c \\le 1000$), which indicates that stations $a$ and $b$ are connected by a pipe with capacity $c$. No $(a, b)$ pair will appear more than once in this section. The next $k$ lines will describe the improvements. The lines will each contain three integers, $a$, $b$ ($1 \\le a < b \\le n$) and $c$ ($1 \\le c \\le 1000$), which indicates that the pipe connecting stations $a$ and $b$ has its capacity increased by $c$ (if there is currently no pipe between $a$ and $b$, then one is created with capacity $c$). Note that it is possible for an $(a,b)$ pair to be repeated in this section. -----Output----- Output $k+1$ integers, each on its own line, describing the maximum amount of water that can reach the mansion. The first number is the amount of water reaching the mansion in the initial configuration. The next $k$ numbers are the amounts of water reaching the mansion after each improvement. -----Examples----- Sample Input: 3 2 1 1 3 10 2 3 1 2 3 15 Sample Output: 1 10\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nA water company is trying to provide water from its pumping station to a mansion. The company owns $n$ water stations, numbered $1 \\ldots n$, which are connected by a variety of pipes. Water can flow through both directions of a pipe, but the total amount of water that can flow through the pipe is bounded by the capacity of the pipe.\n\nThe water company is constantly improving the pipes, increasing the capacity of various pipes. The water company is conducting $k$ improvements (each of which is permanent after it is executed). An improvement consists of taking a pipe between two locations and increasing its capacity by a fixed amount, or installing a pipe between two locations which are not directly connected by a pipe.\n\nAfter each improvement, the water company wants to know the maximum amount of water the mansion could receive.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input contains three integers, $n$ ($2 \\le n \\le 100$), $p$ ($0 \\le p \\le \\frac{n (n-1)}{2}$), and $k$ ($1 \\le k \\le 10000$), where $n$ is the number of stations, $p$ is the number of initial pipes, and $k$ is the number of improvements. The first station in the list is always the pumping station, and the second is always the mansion.\n\nThe next $p$ lines will describe the pipes in the initial setup. The lines will each contain three integers, $a$, $b$ ($1 \\le a < b \\le n$) and $c$ ($1 \\le c \\le 1000$), which indicates that stations $a$ and $b$ are connected by a pipe with capacity $c$. No $(a, b)$ pair will appear more than once in this section.\n\nThe next $k$ lines will describe the improvements. The lines will each contain three integers, $a$, $b$ ($1 \\le a < b \\le n$) and $c$ ($1 \\le c \\le 1000$), which indicates that the pipe connecting stations $a$ and $b$ has its capacity increased by $c$ (if there is currently no pipe between $a$ and $b$, then one is created with capacity $c$). Note that it is possible for an $(a,b)$ pair to be repeated in this section.\n\n-----Output-----\nOutput $k+1$ integers, each on its own line, describing the maximum amount of water that can reach the mansion. The first number is the amount of water reaching the mansion in the initial configuration. The next $k$ numbers are the amounts of water reaching the mansion after each improvement.\n\n-----Examples-----\nSample Input:\n3 2 1\n1 3 10\n2 3 1\n2 3 15\nSample Output:\n1\n10\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a tree graph. You have to find a way to assign frequencies to nodes such that the total number of frequencies used is maximized. \n-----Input----- The input consists of:  - one line with one integer $n$ ($2 \\leq n \\leq 10000$), the number of nodes in the network;  - $n-1$ lines, each with two space-separated integers $i$ and $j$, with $1 \\leq i,j \\leq n$ signifying that the (one-indexed) network nodes $i$ and $j$ are in range of each other. -----Output----- Output a frequency assignment for each of the $2n$ NICs such that all adjacent nodes can communicate and the number of used frequencies is maximized. You should output $n$ lines, where the $i$th line contains the two frequencies of network node $i$. Valid frequencies are nonnegative integers less than $10^9$. -----Examples----- Sample Input: 2 1 2 Sample Output: 23 42 42 23\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nAs a new employee at the Northwestern Europe Routing Company (NWERC), you do a lot of thinking about wireless network architectures. Lately you learned about a multi-channel mesh network architecture (called Hyacinth) that equips each mesh network node with multiple network interface cards (NICs) to increase the network throughput. You can choose a channel frequency for each NIC. In order to communicate, for every two network nodes that are in range of each other, their NICs must share at least one common frequency. The theoretical throughput is optimal when the total number of used frequencies in the network is maximal. \n\nYour bosses at NWERC want you to figure out a procedure for assigning frequencies to the NICs such that the number of frequencies in use is maximized, subject to the constraint that all pairs of adjacent nodes must be able to communicate. A frequency is considered used if any pair of nodes within range of each other share that frequency. In the mesh network that you will be dealing with, each node is equipped with exactly two NICs (i.e., each node can use at most two frequencies). Since you are new at NWERC, your bosses further restrict the network layouts to make your job easier: the network graph will form a tree.\n\n-----Input-----\nThe input consists of:\n - one line with one integer $n$ ($2 \\leq n \\leq 10000$), the number of nodes in the network;\n - $n-1$ lines, each with two space-separated integers $i$ and $j$, with $1 \\leq i,j \\leq n$ signifying that the (one-indexed) network nodes $i$ and $j$ are in range of each other.\n\n-----Output-----\nOutput a frequency assignment for each of the $2n$ NICs such that all adjacent nodes can communicate and the number of used frequencies is maximized. You should output $n$ lines, where the $i$th line contains the two frequencies of network node $i$. Valid frequencies are nonnegative integers less than $10^9$.\n\n-----Examples-----\nSample Input:\n2\n1 2\nSample Output:\n23 42\n42 23\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given n numbers a_1, a_2, ..., a_{n}. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make [Image] as large as possible, where $1$ denotes the bitwise OR. Find the maximum possible value of [Image] after performing at most k operations optimally. \n-----Input----- The first line contains three integers n, k and x (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10, 2 \u2264 x \u2264 8). The second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9). -----Output----- Output the maximum value of a bitwise OR of sequence elements after performing operations. -----Examples----- Input 3 1 2 1 1 1 Output 3 Input 4 2 3 1 2 4 8 Output 79 -----Note----- For the first sample, any possible choice of doing one operation will result the same three numbers 1, 1, 2 so the result is $1|1|2 = 3$.  For the second sample if we multiply 8 by 3 two times we'll get 72. In this case the numbers will become 1, 2, 4, 72 so the OR value will be 79 and is the largest possible result.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou are given n numbers a_1, a_2, ..., a_{n}. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make [Image] as large as possible, where $1$ denotes the bitwise OR. \n\nFind the maximum possible value of [Image] after performing at most k operations optimally.\n\n\n-----Input-----\n\nThe first line contains three integers n, k and x (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10, 2 \u2264 x \u2264 8).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nOutput the maximum value of a bitwise OR of sequence elements after performing operations.\n\n\n-----Examples-----\nInput\n3 1 2\n1 1 1\n\nOutput\n3\n\nInput\n4 2 3\n1 2 4 8\n\nOutput\n79\n\n\n\n-----Note-----\n\nFor the first sample, any possible choice of doing one operation will result the same three numbers 1, 1, 2 so the result is $1|1|2 = 3$. \n\nFor the second sample if we multiply 8 by 3 two times we'll get 72. In this case the numbers will become 1, 2, 4, 72 so the OR value will be 79 and is the largest possible result.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n \n-----Input----- The first and only line of input contains the integers $A$ and $B$ ($1 \\leq A \\leq B \\leq 100000$) from the task. -----Output----- The first and only line of output must contain any essay that meets the rules from the task. -----Examples----- Sample Input 1: 2 7 Sample Output 1: dobar je ovaj marko marulic Sample Input 2: 26 30 Sample Output 2: nama je profesor reko da to ne treba za lektiru al onda je bila buka i nisam ga cuo pa jel bi mi mogli dat bodove\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nThe impending doom called final examination is approaching this year\u2019s high school seniors: one of the compulsory tasks is going to be writing an essay in their mother tongue. Mirko is under the impression that certain political parties are going to keep their promises, those regarding informatization and digitalization, which is why he thinks that this year\u2019s essays are going to be marked by a computer, instead of a human.\n\nTo test his doubts, Mirko is going to write an essay that doesn\u2019t necessarily make sense at all, but should pass the automatic basic conditions check. The essay passes the check if\n - it contains at least $A$, and at most $B$ words;\n - every word contains at least one, and at most 15 letters;\n - the used vocabulary is large enough, in other words, the essay contains at least $B/2$ different words.\n\nMirko was up late last night watching Big Brother, so he is asking you to write such an essay instead of him. The essay should be output in a single line, using only lowercase letters of the English alphabet and spaces (therefore, without punctuation such as dots, commas and such). The words used can, but need not be, words from the English (or any) language.\n\n-----Input-----\nThe first and only line of input contains the integers $A$ and $B$ ($1 \\leq A \\leq B \\leq 100000$) from the task.\n\n-----Output-----\nThe first and only line of output must contain any essay that meets the rules from the task.\n\n-----Examples-----\nSample Input 1:\n2 7\nSample Output 1:\ndobar je ovaj marko marulic\n\nSample Input 2:\n26 30\nSample Output 2:\nnama je profesor reko da to ne treba za lektiru al onda je bila buka i nisam ga cuo pa jel bi mi mogli dat bodove\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Write a function named `getMinimalReconstructions`, taking a sequence of events as single parameter. Your function must return the minimum number of events such that there is a consistent recollection of this number of events where it is possible to determine for sure who is right, and the minimum number of events such that for any consistent recollection of this number of events, it is possible to determine for sure who is right. \n-----Input----- The first line of input contains a single integer $N$ ($2 \\leq N \\leq 200000$), the number of events. The second line of input contains $N$ integers, $P_1, P_2, \\dots , P_ N$ ($1 \\leq P_ i \\leq N$; all $P_ i$ are distinct), the order of events according to the prosecution. That is, according to the prosecution, the $i^\\text {th}$ event was the event labelled $P_ i$. The third line of input contains $N$ integers, $D_1, D_2, \\dots , D_ N$ ($1 \\leq D_ i \\leq N$; all $D_ i$ are distinct), the order of events according to the defense. That is, according to the defense, the $i^\\text {th}$ event was the event labelled $D_ i$. It is guaranteed that the prosecution and defense do not claim the exact same order of events; that is, there exists some $i$ such that $P_ i \\neq D_ i$. -----Output----- Output two integers on a single line, the minimum values of $k_ p$ and $k_ r$, respectively, as described in the problem statement. -----Examples----- Sample Input: 4 3 2 4 1 1 3 4 2 Sample Output: 2 3\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\n\u201c[There] is a reason why the most successful trial lawyers are often master storytellers, making their cases come to life for their jurors.\u201d \u00ad\u2013G. Christopher Ritter.\n\nA good lawyer can take an incomplete set of facts and turn it into a convincing story.\n\nLast night, a major robbery occurred at a bank, and, luckily, the robber seems to have been successfully arrested. Unfortunately, it is neither clear what the order of events was, nor whether the man they caught is even really the right guy. It is necessary to reconstruct the correct order of events to convince the jury that the accused is guilty beyond reasonable doubt for a conviction to be reached.\n\nIt is known that there are $N$ material events that are relevant to the case. For simplicity, we label the events $1, 2, \\dots , N$. The prosecution claims that these events happened in the order $P_1, P_2, \\dots , P_ N$, while the defense claims that these events instead happened in the order $D_1, D_2, \\dots , D_ N$. It is guaranteed that exactly one of the two is right; in particular, this also means that the prosecution and defense do not claim the exact same order of events; that is, there exists some $i$ such that $P_ i \\neq D_ i$.\n\nDefine a consistent recollection as a subset of the $N$ events, in some order, such that these events happening in this order is consistent with at least one of the two parties\u2019 claims. (That is, at least one of the parties claimed that this subset of events did happen in this order, although it is possible that some other events happened before, after, or in between.) You need to determine\n - the minimum $k_ p$ such that there is some consistent recollection of $k_ p$ events where it is possible to determine for sure who is right, and\n - the minimum $k_ r$ such that for any consistent recollection of $k_ r$ events, it is possible to determine for sure who is right.\n\nBy finding these numbers, you can help the prosecution estimate the minimum amount of evidence they need to make their case, and the minimum amount of evidence they need to make their case foolproof. (Or determine that the man they have is really innocent.) Please help!\n\n-----Input-----\nThe first line of input contains a single integer $N$ ($2 \\leq N \\leq 200000$), the number of events.\n\nThe second line of input contains $N$ integers, $P_1, P_2, \\dots , P_ N$ ($1 \\leq P_ i \\leq N$; all $P_ i$ are distinct), the order of events according to the prosecution. That is, according to the prosecution, the $i^\\text {th}$ event was the event labelled $P_ i$.\n\nThe third line of input contains $N$ integers, $D_1, D_2, \\dots , D_ N$ ($1 \\leq D_ i \\leq N$; all $D_ i$ are distinct), the order of events according to the defense. That is, according to the defense, the $i^\\text {th}$ event was the event labelled $D_ i$.\n\nIt is guaranteed that the prosecution and defense do not claim the exact same order of events; that is, there exists some $i$ such that $P_ i \\neq D_ i$.\n\n-----Output-----\nOutput two integers on a single line, the minimum values of $k_ p$ and $k_ r$, respectively, as described in the problem statement.\n\n-----Examples-----\nSample Input:\n4\n3 2 4 1\n1 3 4 2\nSample Output:\n2 3\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given a network of planets and paths, determine the number of boring pairs of planets before and after the destruction of the paths. #\n-----Input----- The first line of input contains the integer $N$ ($1 \\leq N \\leq 100000$). Each of the following $N - 1$ lines contains three integers $A_ i$, $B_ i$, $Z_ i$ ($1 \\leq A_ i, B_ i \\leq N$, $0 \\leq Z_ i \\leq 1000000000$) that denote that planets $A_ i$ and $B_ i$ are directly connected with a path of curiosity $Z_ i$. The following line of input contains the permutation of the first $N - 1$ integers that denote the order in which the emperor is destroying the paths. If the $i$-th element of the permutation is $j$, then the emperor destroyed the path between planets $A_ j$ and $B_ j$ in the $i$-th step. -----Output----- The output must contain $N$ lines, the $k$-th line containing the number of boring pairs A, $B$ from the task after the emperor destroyed exactly $k - 1$ paths. -----Examples----- Sample Input 1: 2 1 2 0 1 Sample Output 1: 1 0 Sample Input 2: 3 1 2 4 2 3 4 1 2 Sample Output 2: 1 0 0\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA long time ago in a galaxy far, far away, there were $N$ planets. There were also $N - 1$ interplanetary paths that connected all the planets (directly or indirectly). In other words, the network of planets and paths formed a tree. Additionally, each path was enumerated with an integer that denoted the curiosity of the path.\n\nA pair of planets $A$, $B$ is boring if the following holds:\n - $A$ and $B$ are different planets;\n - travelling between planet $A$ and $B$ is possible using one or more interplanetary paths; and\n - the binary XOR of the curiosity of all the paths in that travel is equal to 0\n\nAlas, the times have changed and an evil emperor is ruling the galaxy. He decided to use the Force to destroy all the interplanetary paths in a certain order. Determine the number of boring pairs of planets before the emperor started the destruction and after each destruction.\n\n-----Input-----\nThe first line of input contains the integer $N$ ($1 \\leq N \\leq 100000$). Each of the following $N - 1$ lines contains three integers $A_ i$, $B_ i$, $Z_ i$ ($1 \\leq A_ i, B_ i \\leq N$, $0 \\leq Z_ i \\leq 1000000000$) that denote that planets $A_ i$ and $B_ i$ are directly connected with a path of curiosity $Z_ i$. The following line of input contains the permutation of the first $N - 1$ integers that denote the order in which the emperor is destroying the paths. If the $i$-th element of the permutation is $j$, then the emperor destroyed the path between planets $A_ j$ and $B_ j$ in the $i$-th step.\n\n-----Output-----\nThe output must contain $N$ lines, the $k$-th line containing the number of boring pairs A, $B$ from the task after the emperor destroyed exactly $k - 1$ paths.\n\n-----Examples-----\nSample Input 1:\n2\n1 2 0\n1\nSample Output 1:\n1\n0\n\nSample Input 2:\n3\n1 2 4\n2 3 4\n1 2\nSample Output 2:\n1\n0\n0\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are playing some computer game. One of its levels puts you in a maze consisting of n lines, each of which contains m cells. Each cell either is free or is occupied by an obstacle. The starting cell is in the row r and column c. In one step you can move one square up, left, down or right, if the target cell is not occupied by an obstacle. You can't move beyond the boundaries of the labyrinth. Unfortunately, your keyboard is about to break, so you can move left no more than x times and move right no more than y times. There are no restrictions on the number of moves up and down since the keys used to move up and down are in perfect condition. Now you would like to determine for each cell whether there exists a sequence of moves that will put you from the starting cell to this particular one. How many cells of the board have this property? \n-----Input----- The first line contains two integers n, m (1 \u2264 n, m \u2264 2000)\u00a0\u2014 the number of rows and the number columns in the labyrinth respectively. The second line contains two integers r, c (1 \u2264 r \u2264 n, 1 \u2264 c \u2264 m)\u00a0\u2014 index of the row and index of the column that define the starting cell. The third line contains two integers x, y (0 \u2264 x, y \u2264 10^9)\u00a0\u2014 the maximum allowed number of movements to the left and to the right respectively. The next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle. It is guaranteed, that the starting cell contains no obstacles. -----Output----- Print exactly one integer\u00a0\u2014 the number of cells in the labyrinth, which are reachable from starting cell, including the starting cell itself. -----Examples----- Input 4 5 3 2 1 2 ..... .***. ...** *.... Output 10 Input 4 4 2 2 0 1 .... ..*. .... .... Output 7 -----Note----- Cells, reachable in the corresponding example, are marked with '+'. First example:   +++.. +***. +++** *+++.   Second example:   .++. .+*. .++. .++.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are playing some computer game. One of its levels puts you in a maze consisting of n lines, each of which contains m cells. Each cell either is free or is occupied by an obstacle. The starting cell is in the row r and column c. In one step you can move one square up, left, down or right, if the target cell is not occupied by an obstacle. You can't move beyond the boundaries of the labyrinth.\n\nUnfortunately, your keyboard is about to break, so you can move left no more than x times and move right no more than y times. There are no restrictions on the number of moves up and down since the keys used to move up and down are in perfect condition.\n\nNow you would like to determine for each cell whether there exists a sequence of moves that will put you from the starting cell to this particular one. How many cells of the board have this property?\n\n\n-----Input-----\n\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 2000)\u00a0\u2014 the number of rows and the number columns in the labyrinth respectively.\n\nThe second line contains two integers r, c (1 \u2264 r \u2264 n, 1 \u2264 c \u2264 m)\u00a0\u2014 index of the row and index of the column that define the starting cell.\n\nThe third line contains two integers x, y (0 \u2264 x, y \u2264 10^9)\u00a0\u2014 the maximum allowed number of movements to the left and to the right respectively.\n\nThe next n lines describe the labyrinth. Each of them has length of m and consists only of symbols '.' and '*'. The j-th character of the i-th line corresponds to the cell of labyrinth at row i and column j. Symbol '.' denotes the free cell, while symbol '*' denotes the cell with an obstacle.\n\nIt is guaranteed, that the starting cell contains no obstacles.\n\n\n-----Output-----\n\nPrint exactly one integer\u00a0\u2014 the number of cells in the labyrinth, which are reachable from starting cell, including the starting cell itself.\n\n\n-----Examples-----\nInput\n4 5\n3 2\n1 2\n.....\n.***.\n...**\n*....\n\nOutput\n10\n\nInput\n4 4\n2 2\n0 1\n....\n..*.\n....\n....\n\nOutput\n7\n\n\n\n-----Note-----\n\nCells, reachable in the corresponding example, are marked with '+'.\n\nFirst example:  \n\n+++..\n\n+***.\n\n+++**\n\n*+++.\n\n \n\nSecond example:  \n\n.++.\n\n.+*.\n\n.++.\n\n.++.\n\"\"\"\ndef code():"
}