{
    "0": "Python 3\n\"\"\"\n Given is an integer sequence of length N: A_1, A_2, \\cdots, A_N. An integer sequence X, which is also of length N, will be chosen randomly by independently choosing X_i from a uniform distribution on the integers 1, 2, \\ldots, A_i for each i (1 \\leq i \\leq N). Compute the expected value of the length of the longest increasing subsequence of this sequence X, modulo 1000000007. More formally, under the constraints of the problem, we can prove that the expected value can be represented as a rational number, that is, an irreducible fraction \\frac{P}{Q}, and there uniquely exists an integer R such that R \\times Q \\equiv P \\pmod {1000000007} and 0 \\leq R < 1000000007, so print this integer R. -----Notes----- A subsequence of a sequence X is a sequence obtained by extracting some of the elements of X and arrange them without changing the order. The longest increasing subsequence of a sequence X is the sequence of the greatest length among the strictly increasing subsequences of X. -----Constraints-----  - 1 \\leq N \\leq 6  - 1 \\leq A_i \\leq 10^9  - All values in input are integers.\n-----Input----- Input is given from Standard Input in the following format: N A_1 A_2 \\cdots A_N -----Output----- Print the expected value modulo 1000000007. -----Sample Input----- 3 1 2 3 -----Sample Output----- 2 X becomes one of the following, with probability 1/6 for each:  - X = (1,1,1), for which the length of the longest increasing subsequence is 1;  - X = (1,1,2), for which the length of the longest increasing subsequence is 2;  - X = (1,1,3), for which the length of the longest increasing subsequence is 2;  - X = (1,2,1), for which the length of the longest increasing subsequence is 2;  - X = (1,2,2), for which the length of the longest increasing subsequence is 2;  - X = (1,2,3), for which the length of the longest increasing subsequence is 3. Thus, the expected value of the length of the longest increasing subsequence is (1 + 2 + 2 + 2 + 2 + 3) / 6 \\equiv 2 \\pmod {1000000007}.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nGiven is an integer sequence of length N: A_1, A_2, \\cdots, A_N.\nAn integer sequence X, which is also of length N, will be chosen randomly by independently choosing X_i from a uniform distribution on the integers 1, 2, \\ldots, A_i for each i (1 \\leq i \\leq N).\nCompute the expected value of the length of the longest increasing subsequence of this sequence X, modulo 1000000007.\nMore formally, under the constraints of the problem, we can prove that the expected value can be represented as a rational number, that is, an irreducible fraction \\frac{P}{Q}, and there uniquely exists an integer R such that R \\times Q \\equiv P \\pmod {1000000007} and 0 \\leq R < 1000000007, so print this integer R.\n\n-----Notes-----\nA subsequence of a sequence X is a sequence obtained by extracting some of the elements of X and arrange them without changing the order. The longest increasing subsequence of a sequence X is the sequence of the greatest length among the strictly increasing subsequences of X.\n\n-----Constraints-----\n - 1 \\leq N \\leq 6\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\cdots A_N\n\n-----Output-----\nPrint the expected value modulo 1000000007.\n\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n2\n\nX becomes one of the following, with probability 1/6 for each:\n - X = (1,1,1), for which the length of the longest increasing subsequence is 1;\n - X = (1,1,2), for which the length of the longest increasing subsequence is 2;\n - X = (1,1,3), for which the length of the longest increasing subsequence is 2;\n - X = (1,2,1), for which the length of the longest increasing subsequence is 2;\n - X = (1,2,2), for which the length of the longest increasing subsequence is 2;\n - X = (1,2,3), for which the length of the longest increasing subsequence is 3.\nThus, the expected value of the length of the longest increasing subsequence is (1 + 2 + 2 + 2 + 2 + 3) / 6 \\equiv 2 \\pmod {1000000007}.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n It s Christmas time and JW s $1$-dimensional shop is selling Christmas trees. However, the demand for trees is much higher than the number of trees available. Hence, JW has come up with a special strategy to help decide who gets what tree: a game of Musical Trees! Musical Trees is much like the game Musical Chairs. There s a set of trees lined up in a straight ($1$-dimensional) line. At first, everyone starts by wandering around the store while the music is playing. When the music stops, everyone runs to the nearest tree (the tree the smallest distance away) and whoever reaches a tree first gets to the claim that tree. Since people are lazy, they will only ever try to run to the closest tree to them, and hence multiple people may try to get the same tree. Note this means some trees may be unclaimed if they are closest to no one. Also, like in Musical Chairs, no tree can be claimed by more than one person. The music has just stopped in Musical Trees and as everyone is running to the closest tree, you want to figure out the number of people who won t get any tree.\n-----Input----- The first line consists the number of people $n$ ($1\\le n\\le 100$) and the number of trees $m$ ($1 \\le m \\le 100$). The next line contains $n$ integers $p_1,p_2,\\ldots ,p_ n$, the positions of all the people when the music stops ($1 \\le p_ i \\le 1000$). The last line contains $m$ integers $t_1,t_2,\\ldots ,t_ m$, the positions of all the trees ($1 \\le t_ i \\le 1000$). No two people or two trees will have the same position. Some people may try to cheat though, and will already be at the same position as a tree when the music stops. Note that if a person has more than one closest tree to them, they will always go for the one with the smallest $t_ i$. -----Output----- Output the number of people who won\u2019t get a tree. -----Examples----- Sample Input 1: 2 3 1 4 2 4 5 Sample Output 1: 0 Sample Input 2: 3 2 1 5 10 4 6 Sample Output 2: 1\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIt\u2019s Christmas time and JW\u2019s $1$-dimensional shop is selling Christmas trees. However, the demand for trees is much higher than the number of trees available. Hence, JW has come up with a special strategy to help decide who gets what tree: a game of Musical Trees!\n\nMusical Trees is much like the game Musical Chairs. There\u2019s a set of trees lined up in a straight ($1$-dimensional) line. At first, everyone starts by wandering around the store while the music is playing. When the music stops, everyone runs to the nearest tree (the tree the smallest distance away) and whoever reaches a tree first gets to the claim that tree. Since people are lazy, they will only ever try to run to the closest tree to them, and hence multiple people may try to get the same tree. Note this means some trees may be unclaimed if they are closest to no one. Also, like in Musical Chairs, no tree can be claimed by more than one person.\n\nThe music has just stopped in Musical Trees and as everyone is running to the closest tree, you want to figure out the number of people who won\u2019t get any tree.\n\n-----Input-----\nThe first line consists the number of people $n$ ($1\\le n\\le 100$) and the number of trees $m$ ($1 \\le m \\le 100$). The next line contains $n$ integers $p_1,p_2,\\ldots ,p_ n$, the positions of all the people when the music stops ($1 \\le p_ i \\le 1000$). The last line contains $m$ integers $t_1,t_2,\\ldots ,t_ m$, the positions of all the trees ($1 \\le t_ i \\le 1000$). No two people or two trees will have the same position. Some people may try to cheat though, and will already be at the same position as a tree when the music stops. Note that if a person has more than one closest tree to them, they will always go for the one with the smallest $t_ i$.\n\n-----Output-----\nOutput the number of people who won\u2019t get a tree.\n\n-----Examples-----\nSample Input 1:\n2 3\n1 4\n2 4 5\nSample Output 1:\n0\n\nSample Input 2:\n3 2\n1 5 10\n4 6\nSample Output 2:\n1\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Paul owns a catering company and business is booming. The company has $k$ catering teams, each in charge of one set of catering equipment. Every week, the company accepts $n$ catering requests for various events. For every request, they send a catering team with their equipment to the event location. The team delivers the food, sets up the equipment, and instructs the host on how to use the equipment and serve the food. After the event, the host is responsible for returning the equipment back to Paul s company.  Unfortunately, in some weeks the number of catering teams is less than the number of requests, so some teams may have to be used for more than one event. In these cases, the company cannot wait for the host to return the equipment and must keep the team on-site to move the equipment to another location. The company has an accurate estimate of the cost to move a set of equipment from any location to any other location. Given these costs, Paul wants to prepare an Advance Catering Map to service the requests while minimizing the total moving cost of equipment (including the cost of the first move), even if that means not using all the available teams. Paul needs your help to write a program to accomplish this task. The requests are sorted in ascending order of their event times and they are chosen in such a way that for any $i < j$, there is enough time to transport the equipment used in the $i^{th}$ request to the location of the $j^{th}$ request. \n\n-----Input----- The first line of input contains two integers $n$ ($1 \\le n \\le 100$) and $k$ ($1 \\le k \\le 100$) which are the number of requests and the number of catering teams, respectively. Following that are $n$ lines, where the $i^{th}$ line contains $n-i+1$ integers between $0$ and $1000000$ inclusive. The $j^{th}$ number in the $i^{th}$ line is the cost of moving a set of equipment from location $i$ to location $i+j$. The company is at location $1$ and the $n$ requests are at locations $2$ to $n+1$. -----Output----- Display the minimum moving cost to service all requests. (This amount does not include the cost of moving the equipment back to the catering company.) -----Examples----- Sample Input: 3 2 40 30 40 50 10 50 Sample Output: 80\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nPaul owns a catering company and business is booming. The company has $k$ catering teams, each in charge of one set of catering equipment. Every week, the company accepts $n$ catering requests for various events. For every request, they send a catering team with their equipment to the event location. The team delivers the food, sets up the equipment, and instructs the host on how to use the equipment and serve the food. After the event, the host is responsible for returning the equipment back to Paul\u2019s company. \n\nUnfortunately, in some weeks the number of catering teams is less than the number of requests, so some teams may have to be used for more than one event. In these cases, the company cannot wait for the host to return the equipment and must keep the team on-site to move the equipment to another location. The company has an accurate estimate of the cost to move a set of equipment from any location to any other location. Given these costs, Paul wants to prepare an Advance Catering Map to service the requests while minimizing the total moving cost of equipment (including the cost of the first move), even if that means not using all the available teams. Paul needs your help to write a program to accomplish this task. The requests are sorted in ascending order of their event times and they are chosen in such a way that for any $i < j$, there is enough time to transport the equipment used in the $i^{th}$ request to the location of the $j^{th}$ request.\n\n-----Input-----\nThe first line of input contains two integers $n$ ($1 \\le n \\le 100$) and $k$ ($1 \\le k \\le 100$) which are the number of requests and the number of catering teams, respectively. Following that are $n$ lines, where the $i^{th}$ line contains $n-i+1$ integers between $0$ and $1000000$ inclusive. The $j^{th}$ number in the $i^{th}$ line is the cost of moving a set of equipment from location $i$ to location $i+j$. The company is at location $1$ and the $n$ requests are at locations $2$ to $n+1$.\n\n-----Output-----\nDisplay the minimum moving cost to service all requests. (This amount does not include the cost of moving the equipment back to the catering company.)\n\n-----Examples-----\nSample Input:\n3 2\n40 30 40\n50 10\n50\nSample Output:\n80\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Curse your rival! Every year at the annual Rock Paper Scissors tournament, you have made it to the final match. (Your Rock technique is unmatched, and your Paper cuts to the bone! Your Scissors need a little work, though.) But every year, he defeats you, even though his moves appear entirely random! And he claims to the press that he simply cannot be beaten. What is his secret? Fortunately, you think you have figured it out. This year, just before the tournament, you caught him visiting various shamans around town. Aha! He is using the supernatural against you! You figured two can play at this game. So you went and visited a set of fortune-tellers, who have each used a Tarot deck to predict a sequence that your rival will end up using, sometime during the match. However, your initial excitement has passed, and now you are feeling a little silly. This cannot possibly work, right? In the end it feels like you have paid good money for a fraudulent, random set of predictions. Oh well; you might as well keep an eye out for some of them during the match. But which predictions will you use? In the final match, you and your rival will play $n$ rounds of Rock Paper Scissors. In each round, your rival and you will both choose one of the three options (Rock, Paper, or Scissors). Based on your selections, a winner of the round will be determined (exactly how is irrelevant to this problem). Given the length of the final match and the various predictions, sort them in order of how likely they are to appear sometime during the match as a contiguous sequence of options chosen by your rival, assuming he\n-----Input----- The first line of input contains two integers $n$ ($1\\leq n \\leq 10^6$), the number of rounds in the final match, and $s$ ($1 \\leq s \\leq 10$), the number of sequences. The remaining $s$ lines each describe a prediction, consisting of a string of characters \u2018R\u2019, \u2018P\u2019, and \u2018S\u2019. All predictions have the same length, which is between $1$ and $n$ characters long, inclusive, and no longer than $10^5$. -----Output----- Display all of the predictions, sorted by decreasing likelihood of appearance sometime during the final match. In the case of tied predictions, display them in the same order as in the input. -----Examples----- Sample Input: 3 4 PP RR PS SS Sample Output: PS PP RR SS\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nCurse your rival! Every year at the annual Rock Paper Scissors tournament, you have made it to the final match. (Your Rock technique is unmatched, and your Paper cuts to the bone! Your Scissors need a little work, though.) But every year, he defeats you, even though his moves appear entirely random! And he claims to the press that he simply cannot be beaten. What is his secret?\n\nFortunately, you think you have figured it out. This year, just before the tournament, you caught him visiting various shamans around town. Aha! He is using the supernatural against you! You figured two can play at this game. So you went and visited a set of fortune-tellers, who have each used a Tarot deck to predict a sequence that your rival will end up using, sometime during the match.\n\nHowever, your initial excitement has passed, and now you are feeling a little silly. This cannot possibly work, right? In the end it feels like you have paid good money for a fraudulent, random set of predictions. Oh well; you might as well keep an eye out for some of them during the match. But which predictions will you use?\n\nIn the final match, you and your rival will play $n$ rounds of Rock Paper Scissors. In each round, your rival and you will both choose one of the three options (Rock, Paper, or Scissors). Based on your selections, a winner of the round will be determined (exactly how is irrelevant to this problem).\n\nGiven the length of the final match and the various predictions, sort them in order of how likely they are to appear sometime during the match as a contiguous sequence of options chosen by your rival, assuming he is choosing his symbol in each round independently and uniformly at random.\n\n-----Input-----\nThe first line of input contains two integers $n$ ($1\\leq n \\leq 10^6$), the number of rounds in the final match, and $s$ ($1 \\leq s \\leq 10$), the number of sequences. The remaining $s$ lines each describe a prediction, consisting of a string of characters \u2018R\u2019, \u2018P\u2019, and \u2018S\u2019. All predictions have the same length, which is between $1$ and $n$ characters long, inclusive, and no longer than $10^5$.\n\n-----Output-----\nDisplay all of the predictions, sorted by decreasing likelihood of appearance sometime during the final match. In the case of tied predictions, display them in the same order as in the input.\n\n-----Examples-----\nSample Input:\n3 4\nPP\nRR\nPS\nSS\nSample Output:\nPS\nPP\nRR\nSS\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a directed weighted graph and two vertices $s$, $t$, the goal is to find a subset $U$ of the vertices such that $s \\in U$, $t \\not\\in U$, and the weight of edges from $U$ to $\\overline{U}$ is minimized. \n-----Input----- The first line of input contains four non-negative integers, $2 \\le n \\le 500$, $0 \\le m \\le 10000$, $0 \\le s \\le n-1$ and $0 \\le t \\le n-1$, separated by single spaces, where $n$ is the numbers of nodes in the graph, $m$ is the number of edges, $s$ is the source and $t$ is the sink ($s \\ne t$). Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of three (space-separated) integers $u$, $v$ and $w$ indicating that there is an edge from $u$ to $v$ in the graph with weight $1 \\le w \\le 10^8$. -----Output----- Output should begin with a line containing an integer $k$, giving the size of $U$. Then follow $k$ lines giving the vertices in $U$, one per line. If there are multiple choices for $U$ any one will be accepted. You may assume that there is a cut such that the total weight of edges from $U$ to $\\overline{U}$ is less than $2^{31}$. -----Examples----- Sample Input 1: 4 5 0 3 0 1 10 1 2 1 1 3 1 0 2 1 2 3 10 Sample Output 1: 2 1 0 Sample Input 2: 2 1 0 1 0 1 100000 Sample Output 2: 1 0\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nGiven a directed weighted graph and two vertices $s$, $t$, the goal is to find a subset $U$ of the vertices such that $s \\in U$, $t \\not\\in U$, and the weight of edges from $U$ to $\\overline{U}$ is minimized.\n\n-----Input-----\nThe first line of input contains four non-negative integers, $2 \\le n \\le 500$, $0 \\le m \\le 10000$, $0 \\le s \\le n-1$ and $0 \\le t \\le n-1$, separated by single spaces, where $n$ is the numbers of nodes in the graph, $m$ is the number of edges, $s$ is the source and $t$ is the sink ($s \\ne t$). Nodes are numbered from $0$ to $n-1$. Then follow $m$ lines, each line consisting of three (space-separated) integers $u$, $v$ and $w$ indicating that there is an edge from $u$ to $v$ in the graph with weight $1 \\le w \\le 10^8$.\n\n-----Output-----\nOutput should begin with a line containing an integer $k$, giving the size of $U$. Then follow $k$ lines giving the vertices in $U$, one per line. If there are multiple choices for $U$ any one will be accepted.\n\nYou may assume that there is a cut such that the total weight of edges from $U$ to $\\overline{U}$ is less than $2^{31}$.\n\n-----Examples-----\nSample Input 1:\n4 5 0 3\n0 1 10\n1 2 1\n1 3 1\n0 2 1\n2 3 10\nSample Output 1:\n2\n1\n0\n\nSample Input 2:\n2 1 0 1\n0 1 100000\nSample Output 2:\n1\n0\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given a string, determine if given string is a triplet or not. _____________________________________________________________ Rules: 1. A triplet is a string of three letters. 2. A triplet is on the same line if there is a line going through the centre of each of the three squares. 3. A triplet is on the same line if there is a line going through the centre of each of the three squares. _____________________________________________________________\n-----Input----- The first line contains an integer $N$ ($3 \\le N \\le 100$), the dimension of the grid. Each of the $N$ following lines contains $N$ characters describing the grid \u2013 uppercase letters and the character \u2019.\u2019 which marks an empty square. -----Output----- Output the number of triples on a single line. -----Examples----- Sample Input 1: 4 ...D ..C. .B.. A... Sample Output 1: 4 Sample Input 2: 5 ..T.. A.... .FE.R ....X S.... Sample Output 2: 3\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nMirko and Slavko are playing a new game, \u201cTrojke\u201d (Triplets, in English). First they use a chalk to draw an $N \\times N$ square grid on the road. Then they write letters into some of the squares. No letter is written more than once in the grid.\n\nThe game consists of trying to find three letters on a line as fast as possible. Three letters are considered to be on the same line if there is a line going through the centre of each of the three squares.\n\nAfter a while it gets harder to find new triplets. Mirko and Slavko need a program that counts all the triplets, so that they know if the game is over or they need to search further.\n\n-----Input-----\nThe first line contains an integer $N$ ($3 \\le N \\le 100$), the dimension of the grid.\n\nEach of the $N$ following lines contains $N$ characters describing the grid \u2013 uppercase letters and the character \u2019.\u2019 which marks an empty square.\n\n-----Output-----\nOutput the number of triples on a single line.\n\n-----Examples-----\nSample Input 1:\n4\n...D\n..C.\n.B..\nA...\nSample Output 1:\n4\n\nSample Input 2:\n5\n..T..\nA....\n.FE.R\n....X\nS....\nSample Output 2:\n3\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given an array a of integers. You are also given a function f that takes two integers l and r and returns the sum of absolute differences between consecutive elements of a. You are asked to find the maximum value of f among all possible values of l and r for the given array a. \n-----Input----- The first line contains single integer n (2 \u2264 n \u2264 10^5)\u00a0\u2014 the size of the array a. The second line contains n integers a_1, a_2, ..., a_{n} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the array elements. -----Output----- Print the only integer\u00a0\u2014 the maximum value of f. -----Examples----- Input 5 1 4 2 3 1 Output 3 Input 4 1 5 4 7 Output 6 -----Note----- In the first sample case, the optimal value of f is reached on intervals [1, 2] and [2, 5]. In the second case maximal value of f is reachable only on the whole array.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nSomething happened in Uzhlyandia again... There are riots on the streets... Famous Uzhlyandian superheroes Shean the Sheep and Stas the Giraffe were called in order to save the situation. Upon the arriving, they found that citizens are worried about maximum values of the Main Uzhlyandian Function f, which is defined as follows:$f(l, r) = \\sum_{i = l}^{r - 1}|a [ i ] - a [ i + 1 ]|\\cdot(- 1)^{i - l}$\n\nIn the above formula, 1 \u2264 l < r \u2264 n must hold, where n is the size of the Main Uzhlyandian Array a, and |x| means absolute value of x. But the heroes skipped their math lessons in school, so they asked you for help. Help them calculate the maximum value of f among all possible values of l and r for the given array a.\n\n\n-----Input-----\n\nThe first line contains single integer n (2 \u2264 n \u2264 10^5)\u00a0\u2014 the size of the array a.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the array elements.\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the maximum value of f.\n\n\n-----Examples-----\nInput\n5\n1 4 2 3 1\n\nOutput\n3\nInput\n4\n1 5 4 7\n\nOutput\n6\n\n\n-----Note-----\n\nIn the first sample case, the optimal value of f is reached on intervals [1, 2] and [2, 5].\n\nIn the second case maximal value of f is reachable only on the whole array.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Quido and Hugo are making a chocolate cake. The central ingredient of the cake is a large chocolate bar, lying unwrapped on the kitchen table. The bar is an $M \\times N$ rectangular grid of chocolate blocks. All of the $MN$ blocks are rectangles of identical shape and size. The chocolate bar is of top quality and the friends want to eat part of it, before the rest is used in the cake. OK, says Quido, let s divide the whole bar into two triangular chunks by a straight diagonal cut from its upper-left corner to its lower-right corner. We will then eat all of the blocks which have been cut exactly in half, into two equal-area pieces. You will eat one half and I will eat the other half of each such block. All other blocks, that is, the blocks which are either uncut or cut into two parts of different sizes, will go directly into the cake. Of course, we will make sure the cut is perfectly precise. Let s see how much chocolate we get to eat!\n-----Input----- The input consists of two space-separated integers $M$ and $N$ given on a single line, (where $1 \\leq M, N \\leq 10^{18}$). The numbers $M$ and $N$ denote the number of blocks in one column and in one row, respectively, in the chocolate bar. -----Output----- Print the number of blocks of the chocolate bar which are cut into exactly two pieces of equal area. -----Examples----- Sample Input: 6 10 Sample Output: 2\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nQuido and Hugo are making a chocolate cake. The central ingredient of the cake is a large chocolate bar, lying unwrapped on the kitchen table. The bar is an $M \\times N$ rectangular grid of chocolate blocks. All of the $MN$ blocks are rectangles of identical shape and size. The chocolate bar is of top quality and the friends want to eat part of it, before the rest is used in the cake.\n\n\u201cOK,\u201d says Quido, \u201clet\u2019s divide the whole bar into two triangular chunks by a straight diagonal cut from its upper-left corner to its lower-right corner. We will then eat all of the blocks which have been cut exactly in half, into two equal-area pieces. You will eat one half and I will eat the other half of each such block. All other blocks, that is, the blocks which are either uncut or cut into two parts of different sizes, will go directly into the cake. Of course, we will make sure the cut is perfectly precise.\n\nLet\u2019s see how much chocolate we get to eat!\u201d\n\n-----Input-----\nThe input consists of two space-separated integers $M$ and $N$ given on a single line, (where $1 \\leq M, N \\leq 10^{18}$). The numbers $M$ and $N$ denote the number of blocks in one column and in one row, respectively, in the chocolate bar.\n\n-----Output-----\nPrint the number of blocks of the chocolate bar which are cut into exactly two pieces of equal area.\n\n-----Examples-----\nSample Input:\n6 10\nSample Output:\n2\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n During the research on properties of the greatest common divisor (GCD) of a set of numbers, Ildar, a famous mathematician, introduced a brand new concept of the weakened common divisor (WCD) of a list of pairs of integers. For a given list of pairs of integers $(a_1, b_1)$, $(a_2, b_2)$, ..., $(a_n, b_n)$ their WCD is arbitrary integer greater than $1$, such that it divides at least one element in each pair. WCD may not exist for some lists. For example, if the list looks like $[(12, 15), (25, 18), (10, 24)]$, then their WCD can be equal to $2$, $3$, $5$ or $6$ (each of these numbers is strictly greater than $1$ and divides at least one number in each pair). You're currently pursuing your PhD degree under Ildar's mentorship, and that's why this problem was delegated to you. Your task is to calculate WCD efficiently. \n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 150\\,000$)\u00a0\u2014 the number of pairs. Each of the next $n$ lines contains two integer values $a_i$, $b_i$ ($2 \\le a_i, b_i \\le 2 \\cdot 10^9$). -----Output----- Print a single integer\u00a0\u2014 the WCD of the set of pairs.  If there are multiple possible answers, output any; if there is no answer, print $-1$. -----Examples----- Input 3 17 18 15 24 12 15 Output 6 Input 2 10 16 7 17 Output -1 Input 5 90 108 45 105 75 40 165 175 33 30 Output 5 -----Note----- In the first example the answer is $6$ since it divides $18$ from the first pair, $24$ from the second and $12$ from the third ones. Note that other valid answers will also be accepted. In the second example there are no integers greater than $1$ satisfying the conditions. In the third example one of the possible answers is $5$. Note that, for example, $15$ is also allowed, but it's not necessary to maximize the output.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nDuring the research on properties of the greatest common divisor (GCD) of a set of numbers, Ildar, a famous mathematician, introduced a brand new concept of the weakened common divisor (WCD) of a list of pairs of integers.\n\nFor a given list of pairs of integers $(a_1, b_1)$, $(a_2, b_2)$, ..., $(a_n, b_n)$ their WCD is arbitrary integer greater than $1$, such that it divides at least one element in each pair. WCD may not exist for some lists.\n\nFor example, if the list looks like $[(12, 15), (25, 18), (10, 24)]$, then their WCD can be equal to $2$, $3$, $5$ or $6$ (each of these numbers is strictly greater than $1$ and divides at least one number in each pair).\n\nYou're currently pursuing your PhD degree under Ildar's mentorship, and that's why this problem was delegated to you. Your task is to calculate WCD efficiently.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 150\\,000$)\u00a0\u2014 the number of pairs.\n\nEach of the next $n$ lines contains two integer values $a_i$, $b_i$ ($2 \\le a_i, b_i \\le 2 \\cdot 10^9$).\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the WCD of the set of pairs. \n\nIf there are multiple possible answers, output any; if there is no answer, print $-1$.\n\n\n-----Examples-----\nInput\n3\n17 18\n15 24\n12 15\n\nOutput\n6\nInput\n2\n10 16\n7 17\n\nOutput\n-1\n\nInput\n5\n90 108\n45 105\n75 40\n165 175\n33 30\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example the answer is $6$ since it divides $18$ from the first pair, $24$ from the second and $12$ from the third ones. Note that other valid answers will also be accepted.\n\nIn the second example there are no integers greater than $1$ satisfying the conditions.\n\nIn the third example one of the possible answers is $5$. Note that, for example, $15$ is also allowed, but it's not necessary to maximize the output.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n There is a long electrical wire of length $\\ell $ centimetres between two poles where birds like to sit. After a long day at work you like to watch the birds on the wire from your balcony. Some time ago you noticed that they don t like to sit closer than $d$ centimetres from each other. In addition, they cannot sit closer than 6 centimetres to any of the poles, since there are spikes attached to the pole to keep it clean from faeces that would otherwise damage and weaken it. You start wondering how many more birds can possibly sit on the wire. -----Task----- Given numbers $\\ell $ and $d$, how many additional birds can sit on the wire given the positions of the birds already on the wire  For the purposes of this problem we assume that the birds have zero width. \n-----Input----- The first line contains three space separated integers: the length of the wire $\\ell $, distance $d$ and number of birds $n$ already sitting on the wire. The next $n$ lines contain the positions of the birds in any order. All number are integers, $1\\leq \\ell , d\\leq 1000000000$ and $0\\leq n\\leq 20000$. (If you have objections to the physical plausibility of fitting that many birds on a line hanging between two poles, you may either imagine that the height of the line is 0 cm above ground level, or that the birds are ants instead.) You can assume that the birds already sitting on the wire are at least 6 cm from the poles and at least $d$ centimetres apart from each other. -----Output----- Output one line with one integer \u2013 the maximal number of additional birds that can possibly sit on the wire. -----Examples----- Sample Input: 22 2 2 11 9 Sample Output: 3\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThere is a long electrical wire of length $\\ell $ centimetres between two poles where birds like to sit. After a long day at work you like to watch the birds on the wire from your balcony. Some time ago you noticed that they don\u2019t like to sit closer than $d$ centimetres from each other. In addition, they cannot sit closer than 6 centimetres to any of the poles, since there are spikes attached to the pole to keep it clean from faeces that would otherwise damage and weaken it. You start wondering how many more birds can possibly sit on the wire.\n\n-----Task-----\nGiven numbers $\\ell $ and $d$, how many additional birds can sit on the wire given the positions of the birds already on the wire? For the purposes of this problem we assume that the birds have zero width.\n\n-----Input-----\nThe first line contains three space separated integers: the length of the wire $\\ell $, distance $d$ and number of birds $n$ already sitting on the wire. The next $n$ lines contain the positions of the birds in any order. All number are integers, $1\\leq \\ell , d\\leq 1000000000$ and $0\\leq n\\leq 20000$. (If you have objections to the physical plausibility of fitting that many birds on a line hanging between two poles, you may either imagine that the height of the line is 0 cm above ground level, or that the birds are ants instead.) You can assume that the birds already sitting on the wire are at least 6 cm from the poles and at least $d$ centimetres apart from each other.\n\n-----Output-----\nOutput one line with one integer \u2013 the maximal number of additional birds that can possibly sit on the wire.\n\n-----Examples-----\nSample Input:\n22 2 2\n11\n9\nSample Output:\n3\n\"\"\"\ndef code():"
}