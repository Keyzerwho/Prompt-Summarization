{
    "id": "cmpl-4BTO4Eh8qKWs3uTAKlpFpCqIAECFv",
    "object": "text_completion",
    "created": 1638639920,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(sum(dp) % 1000000007)\n\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    # Take in N and A_1, A_2, ..., A_N\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    # Create a list of lists, where each list is a subsequence of A\n    # The list will be sorted by length, so that the longest subsequence is at the end\n    subsequences = [[A[0]]]\n    for i in range(1, N):\n        if A[i] > subsequences[-1][-1]:\n            subsequences[-1].append(A[i])\n        else:\n            subsequences.append([A[i]])\n\n    # Calculate the expected value\n    expected = 0\n    for i in range(len(subsequences)):\n        expected += len(subsequences[i]) * (len(subsequences[i]) + 1) // 2\n    expected %= 1000000007\n\n    # Print the expected value\n    print(expected)\n\nif __name__ == '__main__':\n    code()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    people = list(map(int, input().split()))\n    trees = list(map(int, input().split()))\n    people.sort()\n    trees.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if people[i] < trees[j]:\n            i += 1\n        else:\n            j += 1\n            count += 1\n    print(n - count)\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    people = list(map(int, input().split()))\n    trees = list(map(int, input().split()))\n    people.sort()\n    trees.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if abs(people[i] - trees[j]) <= abs(people[i] - trees[j + 1]):\n            count += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    print(count)\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = map(int, input().split())\n    costs = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i][j - 1], dp[i - 1][j - 1]) + costs[j - 1][i - 1]\n    print(dp[k][n])\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, k = [int(x) for x in input().split()]\n    costs = [[int(x) for x in input().split()] for i in range(n)]\n    dp = [[0 for i in range(n+1)] for j in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + costs[j-1][i-1]\n    print(dp[k][n])\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, s = [int(x) for x in input().split()]\n    predictions = []\n    for i in range(s):\n        predictions.append(input())\n    predictions.sort(key=lambda x: x.count('R'))\n    predictions.sort(key=lambda x: x.count('P'))\n    predictions.sort(key=lambda x: x.count('S'))\n    for i in predictions:\n        print(i)\n\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, s = [int(x) for x in input().split()]\n    predictions = []\n    for i in range(s):\n        predictions.append(input())\n    predictions.sort(key=lambda x: x.count('R'))\n    predictions.sort(key=lambda x: x.count('P'))\n    predictions.sort(key=lambda x: x.count('S'))\n    for i in predictions:\n        print(i)\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, s, t = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n    visited = [False] * n\n    visited[s] = True\n    stack = [s]\n    while stack:\n        u = stack.pop()\n        for v, w in graph[u]:\n            if not visited[v] and w > 0:\n                visited[v] = True\n                stack.append(v)\n    print(visited.count(True))\n    for i in range(n):\n        if visited[i]:\n            print(i, end=' ')\n\nif __name__ == '__main__':\n    code()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, s, t = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n    visited = [False] * n\n    visited[s] = True\n    queue = [s]\n    while queue:\n        u = queue.pop(0)\n        for v, w in graph[u]:\n            if not visited[v] and w > 0:\n                visited[v] = True\n                queue.append(v)\n    if not visited[t]:\n        print(\"NO\")\n        return\n    flow = [0] * n\n    flow[s] = float(\"inf\")\n    while True:\n        queue = [s]\n        prev = [None] * n\n        while queue:\n            u = queue.pop(0)\n            for v, w in graph[u]:\n                if not visited[v] and w > 0 and flow[u] > flow[v]:\n                    prev[v] = u\n                    flow[v] = flow[u]\n                    if v == t:\n                        break\n                    queue.append(v)\n            if prev[t] is not None:\n                break\n        if prev[t] is None:\n            break\n        v = t\n        min_flow = float(\"inf\")\n        while v != s:\n            u = prev[v]\n            min_flow = min(min_flow, graph[u][v] - flow[u])\n            v = u\n        v = t\n        while v != s:\n            u = prev[v]\n            flow[u] += min_flow\n            flow[v] -= min_flow\n            graph[u][v] -= min_flow\n            graph[v][u] += min_flow\n            v = u\n    print(flow[t])\n    queue = [t]\n    while queue:\n        u = queue.pop(0)\n        if u == s:\n            continue\n        print(u, end=\" \")\n        for v, w in graph[u]:\n            if w > 0:\n                queue.append(v)\n\nif __name__ == \"__main__\":\n    code()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] != '.':\n                if i < n-2 and grid[i][j] == grid[i+1][j] == grid[i+2][j]:\n                    count += 1\n                if j < n-2 and grid[i][j] == grid[i][j+1] == grid[i][j+2]:\n                    count += 1\n    print(count)\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    grid = []\n    for i in range(n):\n        grid.append(input())\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] != '.':\n                if i > 0 and grid[i-1][j] == grid[i][j]:\n                    count += 1\n                if j > 0 and grid[i][j-1] == grid[i][j]:\n                    count += 1\n    print(count)\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    max_sum = 0\n    for i in range(n-1):\n        max_sum = max(max_sum, abs(a[i]-a[i+1]))\n    print(max_sum)\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    max_val = 0\n    for i in range(n):\n        for j in range(i, n):\n            val = 0\n            for k in range(i, j):\n                val += abs(a[k] - a[k + 1]) * (-1) ** (k - i + 1)\n            if val > max_val:\n                max_val = val\n    print(max_val)\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    m, n = map(int, input().split())\n    print(m*n//2)\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    m, n = map(int, input().split())\n    print(m*n//2)\n\ncode()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    pairs.sort(key=lambda x: x[0])\n    pairs.sort(key=lambda x: x[1])\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1)\n            return\n    for i in range(n):\n        if pairs[i][0] > pairs[i][1]:\n            print(-1",
            "index": 16,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, input().split())\n        pairs.append((a, b))\n    pairs.sort(key=lambda x: x[0])\n    for i in range(2, pairs[-1][0] + 1):\n        ok = True\n        for a, b in pairs:\n            if b % i != 0:\n                ok = False\n                break\n        if ok:\n            print(i)\n            return\n    print(-1)\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    ",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    l, d, n = [int(x) for x in input().split()]\n    birds = [int(x) for x in input().split()]\n    birds.sort()\n    if birds[0] > 6:\n        birds.insert(0, 6)\n    if birds[-1] < l - 6:\n        birds.append(l - 6)\n    if birds[0] > d:\n        birds.insert(0, d)\n    if birds[-1] < l - d:\n        birds.append(l - d)\n    for i in range(1, len(birds)):\n        if birds[i] - birds[i - 1] < d:\n            birds.insert(i, birds[i - 1] + d)\n    print(n + len(birds) - 1)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}