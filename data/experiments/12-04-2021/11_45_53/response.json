{
    "id": "cmpl-4BUKDLuj6ZRv0hUmANHfnQ9VfTUnR",
    "object": "text_completion",
    "created": 1638643525,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        s = input()\n        l = len(s)\n        if l == 1:\n            print(s)\n        else:\n            if s[0] == '<':\n                print(s[1:])\n            elif s[0] == '[' and s[l-1] == ']':\n                print(s[1:l-1])\n            elif s[0] == '[' and s[l-1] != ']':\n                print(s[1:])\n            elif s[0] != '<' and s[0] != '[' and s[l-1] == ']':\n                print(s[:l-1])\n            else:\n                print(s)\ncode()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    T = int(input())\n    for i in range(T):\n        s = input()\n        l = len(s)\n        ans = \"\"\n        for j in range(l):\n            if s[j] == '<':\n                if len(ans) > 0:\n                    ans = ans[:-1]\n            elif s[j] == '[':\n                ans = \"\"\n            elif s[j] == ']':\n                ans = ans[::-1]\n            else:\n                ans += s[j]\n        print(ans)\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] <= a[i]:\n                d[i] = max(d[i], d[j] + 1)\n    print(max(d))\n\ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, T = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [1] * T\n    for i in range(1, T):\n        for j in range(i):\n            if a[i] >= a[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    print(max(dp))\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = input()\n    b = input()\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a = input()\n    b = input()\n    if a == b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    s = list(s)\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '#':\n            count += 1\n    if count == 0:\n        print(-1)\n    else:\n        for i in range(len(s)):\n            if s[i] == '#':\n                print(count)\n            else:\n                print(0)\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    if s.count('#') == 0:\n        print(-1)\n        return\n    if s.count('#') == 1:\n        print(1)\n        return\n    if s.count('#') == 2:\n        print(2)\n        return\n    if s.count('#') == 3:\n        print(3)\n        return\n    if s.count('#') == 4:\n        print(4)\n        return\n    if s.count('#') == 5:\n        print(5)\n        return\n    if s.count('#') == 6:\n        print(6)\n        return\n    if s.count('#') == 7:\n        print(7)\n        return\n    if s.count('#') == 8:\n        print(8)\n        return\n    if s.count('#') == 9:\n        print(9)\n        return\n    if s.count('#') == 10:\n        print(10)\n        return\n    if s.count('#') == 11:\n        print(11)\n        return\n    if s.count('#') == 12:\n        print(12)\n        return\n    if s.count('#') == 13:\n        print(13)\n        return\n    if s.count('#') == 14:\n        print(14)\n        return\n    if s.count('#') == 15:\n        print(15)\n        return\n    if s.count('#') == 16:\n        print(16)\n        return\n    if s.count('#') == 17:\n        print(17)\n        return\n    if s.count('#') == 18:\n        print(18)\n        return\n    if s.count('#') == 19:\n        print(19)\n        return\n    if s.count('#') == 20:\n        print(20)\n        return\n    if s.count('#') == 21:\n        print(21)\n        return\n    if s.count('#') == 22:\n        print(22)\n        return\n    if s.count('#') == 23:\n        print(23)\n        return\n    if s.count('#') == 24:\n        print(24)\n        return\n    if s.count('#') == 25:\n        print(25)\n        return\n    if s.count('#') == 26:\n        print(26)\n        return\n    if s.count('#') == 27:\n        print(27)\n        return\n    if s.count('#') == 28:\n        print(28)\n        return\n    if s.count('#') == 29:\n        print(29)\n        return\n    if s.count('#') == 30:\n        print(30)\n        return\n    if s.count('#') == 31:\n        print(31)\n        return\n    if s.count('#') == 32:\n        print(32)\n        return\n    if s.count('#') == 33:\n        print(33)\n        return\n    if s.count('#') == 34:\n        print(34)\n        return\n    if s.count('#') == 35:\n        print(35)\n        return\n    if s.count('#') == 36:\n        print(36)\n        return\n    if s.count('#') == 37:\n        print(37)\n        return\n    if s.count('#') == 38:\n        print(38)\n        return\n    if s.count('#') == 39:\n        print(39)\n        return\n    if s.count('#') == 40:\n        print(40)\n        return\n    if s.count('#') == 41:\n        print(41)\n        return\n    if s.count('#') == 42:\n        print(42)\n        return\n    if s.count('#') == 43:\n        print(43)\n        return\n    if s.count('#') == 44:\n        print(44)\n        return\n    if s.count('#') == 45:\n        print(45)\n        return\n    if s.count('#') == 46:\n        print(46)\n        return\n    if s.count('#') == 47:\n        print(47)\n        return\n    if s.count('#') ==",
            "index": 7,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    t = [int(i) for i in input().split()]\n    t.sort()\n    print(sum(t[:4])+t[4]//2)\n\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    nums = list(map(int, input().split()))\n    nums.sort()\n    print(sum(nums[1:4]))\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    d = {}\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a in d:\n            d[a].append(b)\n        else:\n            d[a] = [b]\n        if b in d:\n            d[b].append(a)\n        else:\n            d[b] = [a]\n    for i in range(1, n+1):\n        if i not in d:\n            d[i] = []\n    for i in range(1, n+1):\n        if len(d[i]) % 2 != 0:\n            print(\"no\")\n            return\n    print(\"yes\")\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    d = {}\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a in d:\n            d[a].append(b)\n        else:\n            d[a] = [b]\n        if b in d:\n            d[b].append(a)\n        else:\n            d[b] = [a]\n    for i in range(1, n+1):\n        if i not in d:\n            d[i] = []\n    for i in range(1, n+1):\n        if len(d[i]) != len(set(d[i])):\n            print(\"no\")\n            return\n    print(\"yes\")\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = input()\n    if n == 0:\n        print(\"Yes\")\n    elif n == 1:\n        print(\"No\")\n    else:\n        if s[0] == \")\" and s[-1] == \"(\":\n            print(\"Yes\")\n        elif s[0] == \"(\" and s[-1] == \")\":\n            print(\"Yes\")\n        elif s[0] == \"(\" and s[-1] == \"(\":\n            print(\"No\")\n        elif s[0] == \")\" and s[-1] == \")\":\n            print(\"No\")\n        else:\n            print(\"Yes\")\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = input()\n    if s.count(\"(\") == s.count(\")\"):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(input()))\n    wolf = []\n    trees = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V':\n                wolf.append([i, j])\n            elif grid[i][j] == 'J':\n                trees.append([i, j])\n    if len(trees) == 0:\n        print(0)\n        return\n    if len(wolf) == 0:\n        print(-1)\n        return\n    if len(wolf) > 1:\n        print(-1)\n        return\n    wolf = wolf[0]\n    trees = sorted(trees, key=lambda x: abs(x[0]-wolf[0]) + abs(x[1]-wolf[1]))\n    min_dist = abs(trees[0][0]-wolf[0]) + abs(trees[0][1]-wolf[1])\n    for i in range(1, len(trees)):\n        if abs(trees[i][0]-wolf[0]) + abs(trees[i][1]-wolf[1]) < min_dist:\n            min_dist = abs(trees[i][0]-wolf[0]) + abs(trees[i][1]-wolf[1])\n    print(min_dist)\n\ncode()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    v, j = [], []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'V':\n                v = [i, j]\n            elif grid[i][j] == 'J':\n                j = [i, j]\n    d = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '+':\n                d[i][j] = abs(i - v[0]) + abs(j - v[1])\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '+':\n                if i > 0 and grid[i - 1][j] == '.':\n                    d[i - 1][j] = max(d[i - 1][j], d[i][j] + 1)\n                if i < n - 1 and grid[i + 1][j] == '.':\n                    d[i + 1][j] = max(d[i + 1][j], d[i][j] + 1)\n                if j > 0 and grid[i][j - 1] == '.':\n                    d[i][j - 1] = max(d[i][j - 1], d[i][j] + 1)\n                if j < m - 1 and grid[i][j + 1] == '.':\n                    d[i][j + 1] = max(d[i][j + 1], d[i][j] + 1)\n    return max([max(i) for i in d])\n\nprint(code())",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    if n == 1:\n        print(-1)\n    else:\n        print(max(a))\n\ncode()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(-1)\n    else:\n        print(max(a))\n\ncode()",
            "index": 17,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    x = [int(x) for x in input().split()]\n    if sum(p) != sum(x):\n        print(\"IMPOSSIBLE\")\n        return\n    if n == 1:\n        print(\"POSSIBLE\")\n        return\n    if n == 2:\n        if p[0] == x[0]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 3:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 4:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 5:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 6:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4] and p[5] == x[5]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 7:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4] and p[5] == x[5] and p[6] == x[6]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 8:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4] and p[5] == x[5] and p[6] == x[6] and p[7] == x[7]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 9:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4] and p[5] == x[5] and p[6] == x[6] and p[7] == x[7] and p[8] == x[8]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 10:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4] and p[5] == x[5] and p[6] == x[6] and p[7] == x[7] and p[8] == x[8] and p[9] == x[9]:\n            print(\"POSSIBLE\")\n            return\n        else:\n            print(\"IMPOSSIBLE\")\n            return\n    if n == 11:\n        if p[0] == x[0] and p[1] == x[1] and p[2] == x[2] and p[3] == x[3] and p[4] == x[4] and p[5] == x[5] and p[6] == x[6] and p[7] == x",
            "index": 18,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    x = [int(x) for x in input().split()]\n    # Create a list of lists of the children of each vertex\n    children = [[] for i in range(n)]\n    for i in range(n):\n        children[p[i]-1].append(i+1)\n    # Create a list of the colors of each vertex\n    colors = [0 for i in range(n)]\n    # Create a list of the weights of each vertex\n    weights = [0 for i in range(n)]\n    # Create a list of the total weight of each vertex\n    total_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each color\n    total_color_weights = [0 for i in range(n)]\n    # Create a list of the total weight of each",
            "index": 19,
            "logprobs": null,
            "finish_reason": "length"
        }
    ]
}