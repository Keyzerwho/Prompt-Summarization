{
    "0": "Python 3\n\"\"\"\nGiven a sequence, which is represented by a binary string $s_1s_2\\ldots s_n$ of length $n$.\n\nLet $f(l,r)$ be the longest contiguous sequence of $1$ in the substring $s_{l}s_{l+1}\\ldots s_{r}$. \n\nFind $\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l,r)$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ $(1 \\leq n \\leq 5 \\cdot 10^5)$.\n\n The next line contains a binary string $s$ of length $n$ $(s_i \\in \\{0,1\\})$ \n\n\n-----Output-----\n\nPrint a single integer: $\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l,r)$. \n\n\n-----Examples-----\nInput\n4\n0110\n\nOutput\n12\n\nInput\n7\n1101001\n\nOutput\n30\n\nInput\n12\n011100011100\n\nOutput\n156\n\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nZookeeper is buying a carton of fruit to feed his pet wabbit. The fruits are a sequence of apples and oranges, which is represented by a binary string $s_1s_2\\ldots s_n$ of length $n$. $1$ represents an apple and $0$ represents an orange.\n\nSince wabbit is allergic to eating oranges, Zookeeper would like to find the longest contiguous sequence of apples. Let $f(l,r)$ be the longest contiguous sequence of apples in the substring $s_{l}s_{l+1}\\ldots s_{r}$. \n\nHelp Zookeeper find $\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l,r)$, or the sum of $f$ across all substrings.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ $(1 \\leq n \\leq 5 \\cdot 10^5)$.\n\n The next line contains a binary string $s$ of length $n$ $(s_i \\in \\{0,1\\})$ \n\n\n-----Output-----\n\nPrint a single integer: $\\sum_{l=1}^{n} \\sum_{r=l}^{n} f(l,r)$. \n\n\n-----Examples-----\nInput\n4\n0110\n\nOutput\n12\n\nInput\n7\n1101001\n\nOutput\n30\n\nInput\n12\n011100011100\n\nOutput\n156\n\n\n\n-----Note-----\n\nIn the first test, there are ten substrings. The list of them (we let $[l,r]$ be the substring $s_l s_{l+1} \\ldots s_r$):  $[1,1]$: 0  $[1,2]$: 01  $[1,3]$: 011  $[1,4]$: 0110  $[2,2]$: 1  $[2,3]$: 11  $[2,4]$: 110  $[3,3]$: 1  $[3,4]$: 10  $[4,4]$: 0 \n\nThe lengths of the longest contiguous sequence of ones in each of these ten substrings are $0,1,2,2,1,2,2,1,1,0$ respectively. Hence, the answer is $0+1+2+2+1+2+2+1+1+0 = 12$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nWrite a function smallest that will find the smallest positive number that is evenly divisible by all of the numbers from 1 to n. n <= 40. \n\nExamples:\nInput:\nsmallest(5)\nOutput:\n60\nExplanation:\n1 to 5 can all divide evenly into 60\n\nInput:\nsmallest(10)\nOutput:\n2520\nExplanation:\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\"\"\"\ndef smallest(n):",
    "3": "Python 3\n\"\"\"\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nTask:\nWrite\n```\nsmallest(n)\n```\nthat will find the smallest positive number that is evenly divisible by all of the numbers from 1 to n (n <= 40). \nE.g\n```python\nsmallest(5) == 60 # 1 to 5 can all divide evenly into 60\nsmallest(10) == 2520\n```\n\"\"\"\ndef smallest(n):",
    "4": "Python 3\n\"\"\"\nYou are provided an array of strings that represent the cage and Chuck's opponents. Your task is to take their heads off!! . Return the same array of strings, but with the heads ('O') removed and replaced with a space (' ').\n\nIf the provided array is empty, or is an empty string, return 'Gym is empty'. If you are given an array of numbers, return 'This isn't the gym!!'.\n\n\"\"\"\ndef head_smash(arr):",
    "5": "Python 3\n\"\"\"\nIt's Friday night, and Chuck is bored. He's already run 1,000 miles, stopping only to eat a family sized bag of Heatwave Doritos and a large fistful of M&Ms. He just can't stop thinking about kicking something! \n\nThere is only one thing for it, Chuck heads down to his local MMA gym and immediately challenges every fighter there to get in the cage and try and take him down... AT THE SAME TIME! \n\nYou are provided an array of strings that represent the cage and Chuck's opponents. Your task, in traditional Chuck style, is to take their heads off!! Throw punches, kicks, headbutts (or more likely - regex or iteration...) but whatever you do, remove their heads. Return the same array of strings, but with the heads ('O') removed and replaced with a space (' ').\n\nIf the provided array is empty, or is an empty string, return 'Gym is empty'. If you are given an array of numbers, return 'This isn't the gym!!'.\n\nFIGHT!!\n\n*Original design of this kata was a much more beautiful thing - the test cases illustrate the idea, and the intended output. I am unable to make the actual output go over multiple lines so for now at least you will have to imagine the beauty!*\n\"\"\"\ndef head_smash(arr):",
    "6": "Python 3\n\"\"\"\nYou are given a number $n$ and a value $m$. For every number from $1$ to $n$ if the number is divisible by $m$, you store tthe last digit of this number. For example, if $n=15$ and $m=5$, numbers divisible by $m$ are $5, 10, 15$. Their last digits are $5, 0, 5$ correspondingly, their sum is $10$.\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of queries.\n\nThe following $q$ lines contain queries, one per line. Each query is given as two integers $n$ and $m$ ($1 \\le n, m \\le 10^{16}$) \u2014 the number of pages in the book and required divisor, respectively.\n\n\n-----Output-----\n\nFor each query print the answer for it \u2014 the sum of digits.\n\n\n-----Example-----\nInput\n7\n1 1\n10 1\n100 3\n1024 14\n998244353 1337\n123 144\n1234312817382646 13\n\nOutput\n1\n45\n153\n294\n3359835\n0\n427262129093995\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nPolycarp is reading a book consisting of $n$ pages numbered from $1$ to $n$. Every time he finishes the page with the number divisible by $m$, he writes down the last digit of this page number. For example, if $n=15$ and $m=5$, pages divisible by $m$ are $5, 10, 15$. Their last digits are $5, 0, 5$ correspondingly, their sum is $10$.\n\nYour task is to calculate the sum of all digits Polycarp has written down.\n\nYou have to answer $q$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) \u2014 the number of queries.\n\nThe following $q$ lines contain queries, one per line. Each query is given as two integers $n$ and $m$ ($1 \\le n, m \\le 10^{16}$) \u2014 the number of pages in the book and required divisor, respectively.\n\n\n-----Output-----\n\nFor each query print the answer for it \u2014 the sum of digits written down by Polycarp.\n\n\n-----Example-----\nInput\n7\n1 1\n10 1\n100 3\n1024 14\n998244353 1337\n123 144\n1234312817382646 13\n\nOutput\n1\n45\n153\n294\n3359835\n0\n427262129093995\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\nGiven an array of integers, return an array, where the first element is the count of positives numbers and the second element is sum of negative numbers. If the input array is empty or null, return an empty array.\n\nExamples:\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\nOutput:\n[10, -65]\n\"\"\"\ndef count_positives_sum_negatives(arr):",
    "9": "Python 3\n\"\"\"\nGiven an array of integers.\n\nReturn an array, where the first element is the count of positives numbers and the second element is sum of negative numbers.\n\nIf the input array is empty or null, return an empty array.\n\n# Example\n\nFor input `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]`, you should return `[10, -65]`.\n\"\"\"\ndef count_positives_sum_negatives(arr):",
    "10": "Python 3\n\"\"\"\nWrite a function which takes a number and returns the corresponding ASCII char for that value.\n\nExample: \nInput:\nget_char(65)\nOutput:\n'A'\n\"\"\"\ndef get_char(c):",
    "11": "Python 3\n\"\"\"\nWrite a function which takes a number and returns the corresponding ASCII char for that value.\n\nExample: \n\n~~~if-not:java,racket\n```\nget_char(65) # => 'A'\n```\n~~~\n~~~if:java\n~~~\n~~~if:racket\n~~~\n\nFor ASCII table, you can refer to http://www.asciitable.com/\n\"\"\"\ndef get_char(c):",
    "12": "Python 3\n\"\"\"\n\nPrint the sum of the given two numbers $X$ and $Y$.\n\n\n-----Input:-----\n- First line will contain the two integers $X$ and $Y$.\n\n-----Output:-----\nFor each testcase, output in a single line the SUM of these two numbers $X$ and $Y$.\n\n-----Constraints-----\n- $1 \\leq X \\leq 100$\n- $1 \\leq Y \\leq 100$\n\n-----Sample Input:-----\n6 70\n\n-----Sample Output:-----\n76\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nChef and Chefina are best friends. Chefina wants to test the Problem Solving skills of chef so she provides Chef 2 integer number  $X$ and $Y$\nThe task of chef is to take the  two numbers $X$ and $Y$ and return their SUM.\nIdentify whether Chef can solve the problem or not? \n\n-----Input:-----\n- First line will contain the two integers $X$ and $Y$.\n\n-----Output:-----\nFor each testcase, output in a single line the SUM of these two numbers $X$ and $Y$.\n\n-----Constraints-----\n- $1 \\leq X \\leq 100$\n- $1 \\leq Y \\leq 100$\n\n-----Sample Input:-----\n6 70\n\n-----Sample Output:-----\n76\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string.\n\nExample:\nInput: string_to_int_list(\"-1,2,3,4,5\")\nOutput: [-1,2,3,4,5]\n\"\"\"\ndef string_to_int_list(s):",
    "15": "Python 3\n\"\"\"\nGiven a string containing a list of integers separated by commas, write the function string_to_int_list(s) that takes said string and returns a new list containing all integers present in the string, preserving the order.\n\nFor example, give the string \"-1,2,3,4,5\", the function string_to_int_list() should return [-1,2,3,4,5]\n\nPlease note that there can be one or more consecutive commas whithout numbers, like so: \"-1,-2,,,,,,3,4,5,,6\"\n\"\"\"\ndef string_to_int_list(s):",
    "16": "Python 3\n\"\"\"\nCheck whether the given number N is divisible by 3 or not. If yes then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n18\n308\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nChef has a number N, Cheffina challenges the chef to check the divisibility of all the permutation of N by 3. If any of the permutations is divisible by 3 then print 1 else print 0.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, two integers $N$. \n\n-----Output:-----\nFor each test case, output in a single line answer 1 or 0.\n\n-----Constraints-----\n- $1 \\leq T \\leq 10^6$\n- $1 \\leq N \\leq 10^6$\n\n-----Sample Input:-----\n2\n18\n308\n\n-----Sample Output:-----\n1\n0\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n# Task\n\nGiven a list of pins knocked down per roll for one player, output the player's total score.\n\n# Rules\n\n## General rules\nRules of bowling in a nutshell:\n\n* A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls.\n\n* The total score is the sum of your scores for the 10 frames\n\n* If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down\n\n* If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball\n\n* If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls\n\n## Rules for 10th frame\nAs the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that:\n\n* if the last frame is a spare, player rolls 1 bonus ball.\n* if the last frame is a strike, player rolls 2 bonus balls.\n\nThese bonus balls on 10th frame are only counted as a bonus to the respective spare or strike.\n\n\"\"\"\ndef bowling_score(rolls):",
    "19": "Python 3\n\"\"\"\n# Task\n\nYour task is to write a function for calculating the score of a 10 pin bowling game. The input for the function is a list of pins knocked down per roll for one player. Output is the player's total score.\n\n# Rules\n\n## General rules\nRules of bowling in a nutshell:\n\n* A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls.\n\n* The total score is the sum of your scores for the 10 frames\n\n* If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down\n\n* If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball\n\n* If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls\n\n## Rules for 10th frame\nAs the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that:\n\n* if the last frame is a spare, player rolls 1 bonus ball.\n* if the last frame is a strike, player rolls 2 bonus balls.\n\nThese bonus balls on 10th frame are only counted as a bonus to the respective spare or strike.\n\n# More information\nhttp://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring\n\n# Input\nYou may assume that the input is always valid. This means:\n\n* input list length is correct\n* number of pins knocked out per roll is valid\n\"\"\"\ndef bowling_score(rolls):"
}