{
    "0": "Python 3\n\"\"\"\n Snuke is buying a lamp. The light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control. The first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1. The second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased. Snuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness. He is planning to change the brightness n-1 times. In the i-th change, the brightness level is changed from a_i to a_{i+1}. The initial brightness level is a_1. Find the number of times Snuke needs to press the buttons when x is set to minimize this number. \n\n-----Input----- Input is given from Standard Input in the following format: n m a_1 a_2 \u2026 a_n -----Output----- Print the minimum number of times Snuke needs to press the buttons. -----Sample Input----- 4 6 1 5 1 4 -----Sample Output----- 5 When the favorite brightness level is set to 1, 2, 3, 4, 5 and 6, Snuke needs to press the buttons 8, 9, 7, 5, 6 and 9 times, respectively. Thus, Snuke should set the favorite brightness level to 4. In this case, the brightness is adjusted as follows:  - In the first change, press the favorite button once, then press the forward button once.  - In the second change, press the forward button twice.  - In the third change, press the favorite button once.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nSnuke is buying a lamp.\nThe light of the lamp can be adjusted to m levels of brightness, represented by integers from 1 through m, by the two buttons on the remote control.\nThe first button is a \"forward\" button. When this button is pressed, the brightness level is increased by 1, except when the brightness level is m, in which case the brightness level becomes 1.\nThe second button is a \"favorite\" button. When this button is pressed, the brightness level becomes the favorite brightness level x, which is set when the lamp is purchased.\nSnuke is thinking of setting the favorite brightness level x so that he can efficiently adjust the brightness.\nHe is planning to change the brightness n-1 times. In the i-th change, the brightness level is changed from a_i to a_{i+1}. The initial brightness level is a_1.\nFind the number of times Snuke needs to press the buttons when x is set to minimize this number.\n\n-----Constraints-----\n - 2 \\leq n,m \\leq 10^5\n - 1 \\leq a_i\\leq m\n - a_i \\neq a_{i+1}\n - n, m and a_i are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn m\na_1 a_2 \u2026 a_n\n\n-----Output-----\nPrint the minimum number of times Snuke needs to press the buttons.\n\n-----Sample Input-----\n4 6\n1 5 1 4\n\n-----Sample Output-----\n5\n\nWhen the favorite brightness level is set to 1, 2, 3, 4, 5 and 6, Snuke needs to press the buttons 8, 9, 7, 5, 6 and 9 times, respectively.\nThus, Snuke should set the favorite brightness level to 4.\nIn this case, the brightness is adjusted as follows:\n - In the first change, press the favorite button once, then press the forward button once.\n - In the second change, press the forward button twice.\n - In the third change, press the favorite button once.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are organising a king of the hill tournament, the Buenos Aires Paddleboarding Competition (BAPC), with $n$ participants. In a king of the hill tournament, one person starts as a  king  and is then challenged by another person, the winning person becomes the new king. This is repeated until all participants have challenged exactly once (except for the starting person). In a paddleboarding match, there are no draws. The person which ends up as king, wins the tournament. Since you are the organiser, you get to choose the starting person and the order in which they challenge the king. Someone is offering you a substantial amount of money in case one of the participants, Henk, ends up winning the tournament. You happen to know, for any two participants $x$ and $y$, which of the two would win if they were to match during the tournament. Consequently, you choose to do the unethical: you will try to rig the game. Can you find a schedule that makes Henk win the tournament  \n-----Input-----  - The first line contains an integer $1 \\leq n \\leq 1000$, the number of participants. The participants are numbered $0, \\dots , n-1$, where Henk is $0$.  - Then $n$ lines follow, where each line has exactly $n$ characters (not counting the newline character). These lines represent the matrix with the information of who beats who, as follows. On line $i$ the $j$th character is (note that $0 \\leq i, j < n$):  - \u20191\u2019 if person $i$ will win against person $j$.  - \u20190\u2019 if person $i$ will lose against person $j$.  - \u2019X\u2019 if $i = j$. -----Output----- Print a sequence of participants, such that the first person starts as king and the consequent participants challenge the king. If there is no way to rig the game such that Henk wins, print \u201cimpossible\u201d. -----Examples----- Sample Input: 3 X10 0X1 10X Sample Output: 1 2 0\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are organising a king of the hill tournament, the Buenos Aires Paddleboarding Competition (BAPC), with $n$ participants. In a king of the hill tournament, one person starts as a \u201cking\u201d and is then challenged by another person, the winning person becomes the new king. This is repeated until all participants have challenged exactly once (except for the starting person). In a paddleboarding match, there are no draws. The person which ends up as king, wins the tournament. Since you are the organiser, you get to choose the starting person and the order in which they challenge the king.\n\nSomeone is offering you a substantial amount of money in case one of the participants, Henk, ends up winning the tournament. You happen to know, for any two participants $x$ and $y$, which of the two would win if they were to match during the tournament. Consequently, you choose to do the unethical: you will try to rig the game. Can you find a schedule that makes Henk win the tournament?\n\n-----Input-----\n - The first line contains an integer $1 \\leq n \\leq 1000$, the number of participants. The participants are numbered $0, \\dots , n-1$, where Henk is $0$.\n - Then $n$ lines follow, where each line has exactly $n$ characters (not counting the newline character). These lines represent the matrix with the information of who beats who, as follows. On line $i$ the $j$th character is (note that $0 \\leq i, j < n$):\n - \u20191\u2019 if person $i$ will win against person $j$.\n - \u20190\u2019 if person $i$ will lose against person $j$.\n - \u2019X\u2019 if $i = j$.\n\n-----Output-----\nPrint a sequence of participants, such that the first person starts as king and the consequent participants challenge the king. If there is no way to rig the game such that Henk wins, print \u201cimpossible\u201d.\n\n-----Examples-----\nSample Input:\n3\nX10\n0X1\n10X\nSample Output:\n1 2 0\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Takahashi throws N dice, each having K sides with all integers from 1 to K. The dice are NOT pairwise distinguishable. For each i=2,3,...,2K, find the following value modulo 998244353: - The number of combinations of N sides shown by the dice such that the sum of no two different sides is i. Note that the dice are NOT distinguishable, that is, two combinations are considered different when there exists an integer k such that the number of dice showing k is different in those two. \n-----Input----- Input is given from Standard Input in the following format: K N -----Output----- Print 2K-1 integers. The t-th of them (1\\leq t\\leq 2K-1) should be the answer for i=t+1. -----Sample Input----- 3 3 -----Sample Output----- 7 7 4 7 7  - For i=2, the combinations (1,2,2),(1,2,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3) satisfy the condition, so the answer is 7.  - For i=3, the combinations (1,1,1),(1,1,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3) satisfy the condition, so the answer is 7.  - For i=4, the combinations (1,1,1),(1,1,2),(2,3,3),(3,3,3) satisfy the condition, so the answer is 4.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nTakahashi throws N dice, each having K sides with all integers from 1 to K. The dice are NOT pairwise distinguishable.\nFor each i=2,3,...,2K, find the following value modulo 998244353:\n - The number of combinations of N sides shown by the dice such that the sum of no two different sides is i.\nNote that the dice are NOT distinguishable, that is, two combinations are considered different when there exists an integer k such that the number of dice showing k is different in those two.\n\n-----Constraints-----\n - 1 \\leq K \\leq 2000\n - 2 \\leq N \\leq 2000\n - K and N are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK N\n\n-----Output-----\nPrint 2K-1 integers. The t-th of them (1\\leq t\\leq 2K-1) should be the answer for i=t+1.\n\n-----Sample Input-----\n3 3\n\n-----Sample Output-----\n7\n7\n4\n7\n7\n\n - For i=2, the combinations (1,2,2),(1,2,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3) satisfy the condition, so the answer is 7.\n - For i=3, the combinations (1,1,1),(1,1,3),(1,3,3),(2,2,2),(2,2,3),(2,3,3),(3,3,3) satisfy the condition, so the answer is 7.\n - For i=4, the combinations (1,1,1),(1,1,2),(2,3,3),(3,3,3) satisfy the condition, so the answer is 4.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given an integer m as a product of integers a_1, a_2, ... a_{n} $(m = \\prod_{i = 1}^{n} a_{i})$. Your task is to find the number of distinct decompositions of number m into the product of n ordered positive integers. \n-----Input----- The first line contains positive integer n (1 \u2264 n \u2264 500). The second line contains space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9). -----Output----- In a single line print a single number k \u2014 the number of distinct decompositions of number m into n ordered multipliers modulo 1000000007 (10^9 + 7). -----Examples----- Input 1 15 Output 1 Input 3 1 1 2 Output 3 Input 2 5 7 Output 4 -----Note----- In the second sample, the get a decomposition of number 2, you need any one number out of three to equal 2, and the rest to equal 1. In the third sample, the possible ways of decomposing into ordered multipliers are [7,5], [5,7], [1,35], [35,1]. A decomposition of positive integer m into n ordered multipliers is a cortege of positive integers b = {b_1, b_2, ... b_{n}} such that $m = \\prod_{i = 1}^{n} b_{i}$. Two decompositions b and c are considered different, if there exists index i such that b_{i} \u2260 c_{i}.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given an integer m as a product of integers a_1, a_2, ... a_{n} $(m = \\prod_{i = 1}^{n} a_{i})$. Your task is to find the number of distinct decompositions of number m into the product of n ordered positive integers.\n\nDecomposition into n products, given in the input, must also be considered in the answer. As the answer can be very large, print it modulo 1000000007 (10^9 + 7).\n\n\n-----Input-----\n\nThe first line contains positive integer n (1 \u2264 n \u2264 500). The second line contains space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIn a single line print a single number k \u2014 the number of distinct decompositions of number m into n ordered multipliers modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n1\n15\n\nOutput\n1\n\nInput\n3\n1 1 2\n\nOutput\n3\n\nInput\n2\n5 7\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the second sample, the get a decomposition of number 2, you need any one number out of three to equal 2, and the rest to equal 1.\n\nIn the third sample, the possible ways of decomposing into ordered multipliers are [7,5], [5,7], [1,35], [35,1].\n\nA decomposition of positive integer m into n ordered multipliers is a cortege of positive integers b = {b_1, b_2, ... b_{n}} such that $m = \\prod_{i = 1}^{n} b_{i}$. Two decompositions b and c are considered different, if there exists index i such that b_{i} \u2260 c_{i}.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a dice with m faces. Each face contains a dot. The probability of getting a dot on a face is $\\frac{1}{m}$. You are supposed to calculate the expected maximum number of dots you could get after tossing the dice n times. \n-----Input----- A single line contains two integers m and n (1 \u2264 m, n \u2264 10^5). -----Output----- Output a single real number corresponding to the expected maximum. The answer will be considered correct if its relative or absolute error doesn't exceed 10 ^{ - 4}. -----Examples----- Input 6 1 Output 3.500000000000 Input 6 3 Output 4.958333333333 Input 2 2 Output 1.750000000000 -----Note----- Consider the third test example. If you've made two tosses:  You can get 1 in the first toss, and 2 in the second. Maximum equals to 2.  You can get 1 in the first toss, and 1 in the second. Maximum equals to 1.  You can get 2 in the first toss, and 1 in the second. Maximum equals to 2.  You can get 2 in the first toss, and 2 in the second. Maximum equals to 2.  The probability of each outcome is 0.25, that is expectation equals to: $(2 + 1 + 2 + 2) \\cdot 0.25 = \\frac{7}{4}$ You can read about expectation using the following link: http://en.wikipedia.org/wiki/Expected_value\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nTwilight Sparkle was playing Ludo with her friends Rainbow Dash, Apple Jack and Flutter Shy. But she kept losing. Having returned to the castle, Twilight Sparkle became interested in the dice that were used in the game.\n\nThe dice has m faces: the first face of the dice contains a dot, the second one contains two dots, and so on, the m-th face contains m dots. Twilight Sparkle is sure that when the dice is tossed, each face appears with probability $\\frac{1}{m}$. Also she knows that each toss is independent from others. Help her to calculate the expected maximum number of dots she could get after tossing the dice n times.\n\n\n-----Input-----\n\nA single line contains two integers m and n (1 \u2264 m, n \u2264 10^5).\n\n\n-----Output-----\n\nOutput a single real number corresponding to the expected maximum. The answer will be considered correct if its relative or absolute error doesn't exceed 10 ^{ - 4}.\n\n\n-----Examples-----\nInput\n6 1\n\nOutput\n3.500000000000\n\nInput\n6 3\n\nOutput\n4.958333333333\n\nInput\n2 2\n\nOutput\n1.750000000000\n\n\n\n-----Note-----\n\nConsider the third test example. If you've made two tosses:  You can get 1 in the first toss, and 2 in the second. Maximum equals to 2.  You can get 1 in the first toss, and 1 in the second. Maximum equals to 1.  You can get 2 in the first toss, and 1 in the second. Maximum equals to 2.  You can get 2 in the first toss, and 2 in the second. Maximum equals to 2. \n\nThe probability of each outcome is 0.25, that is expectation equals to: $(2 + 1 + 2 + 2) \\cdot 0.25 = \\frac{7}{4}$\n\nYou can read about expectation using the following link: http://en.wikipedia.org/wiki/Expected_value\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Sheila is a student and she drives a typical student car: it is old, slow, rusty, and falling apart. Recently, the needle on the speedometer fell off. She glued it back on, but she might have placed it at the wrong angle. Thus, when the speedometer reads $s$, her true speed is $s+c$, where $c$ is an unknown constant (possibly negative). \n\n-----Input----- The first line of input contains two integers $n$ ($1 \\le n \\le 1000$), the number of sections in Sheila\u2019s journey, and $t$ ($1 \\le t \\le 10^6$), the total time. This is followed by $n$ lines, each describing one segment of Sheila\u2019s journey. The $i^{\\text {th}}$ of these lines contains two integers $d_ i$ ($1 \\le d_ i \\le 1000$) and $s_ i$ ($|s_ i| \\le 1000$), the distance and speedometer reading for the $i^{\\text {th}}$ segment of the journey. Time is specified in hours, distance in miles, and speed in miles per hour. -----Output----- Display the constant $c$ in miles per hour. Your answer should have an absolute or relative error of less than $10^{-6}$. -----Examples----- Sample Input: 3 5 4 -1 4 0 10 3 Sample Output: 3.000000000\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nSheila is a student and she drives a typical student car: it is old, slow, rusty, and falling apart. Recently, the needle on the speedometer fell off. She glued it back on, but she might have placed it at the wrong angle. Thus, when the speedometer reads $s$, her true speed is $s+c$, where $c$ is an unknown constant (possibly negative). \n\nSheila made a careful record of a recent journey and wants to use this to compute $c$. The journey consisted of $n$ segments. In the $i^{\\text {th}}$ segment she traveled a distance of $d_ i$ and the speedometer read $s_ i$ for the entire segment. This whole journey took time $t$. Help Sheila by computing $c$.\n\nNote that while Sheila\u2019s speedometer might have negative readings, her true speed was greater than zero for each segment of the journey.\n\n-----Input-----\nThe first line of input contains two integers $n$ ($1 \\le n \\le 1000$), the number of sections in Sheila\u2019s journey, and $t$ ($1 \\le t \\le 10^6$), the total time. This is followed by $n$ lines, each describing one segment of Sheila\u2019s journey. The $i^{\\text {th}}$ of these lines contains two integers $d_ i$ ($1 \\le d_ i \\le 1000$) and $s_ i$ ($|s_ i| \\le 1000$), the distance and speedometer reading for the $i^{\\text {th}}$ segment of the journey. Time is specified in hours, distance in miles, and speed in miles per hour.\n\n-----Output-----\nDisplay the constant $c$ in miles per hour. Your answer should have an absolute or relative error of less than $10^{-6}$.\n\n-----Examples-----\nSample Input:\n3 5\n4 -1\n4 0\n10 3\nSample Output:\n3.000000000\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n BigData Inc. is a corporation that has n data centers indexed from 1 to n that are located all over the world. These data centers provide storage for client data (you can figure out that client data is really big!). Main feature of services offered by BigData Inc. is the access availability guarantee even under the circumstances of any data center having an outage. Such a guarantee is ensured by using the two-way replication. Two-way replication is such an approach for data storage that any piece of data is represented by two identical copies that are stored in two different data centers. For each of m company clients, let us denote indices of two different data centers storing this client data as c_{i}, 1 and c_{i}, 2. In order to keep data centers operational and safe, the software running on data center computers is being updated regularly. Release cycle of BigData Inc. is one day meaning that the new version of software is being deployed to the data center computers each day. Data center software update is a non-trivial long process, that is why there is a special hour-long time frame that is dedicated for data center maintenance. During the maintenance period, data center computers are installing software updates, and thus they may be unavailable. Consider the day to be exactly h hours long. For each data center there is an integer u_{j} (0   u_{j}   h - 1) defining the index of an hour of day, such that during this hour data center j is unavailable due to maintenance. Summing up everything above, the condition u_{c}_{i}, 1   u_{c}_{i}, 2 should hold for each client, or otherwise his data\n-----Input----- The first line of input contains three integers n, m and h (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000, 2 \u2264 h \u2264 100 000), the number of company data centers, number of clients and the day length of day measured in hours.  The second line of input contains n integers u_1, u_2, ..., u_{n} (0 \u2264 u_{j} < h), j-th of these numbers is an index of a maintenance hour for data center j.  Each of the next m lines contains two integers c_{i}, 1 and c_{i}, 2 (1 \u2264 c_{i}, 1, c_{i}, 2 \u2264 n, c_{i}, 1 \u2260 c_{i}, 2), defining the data center indices containing the data of client i. It is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day. -----Output----- In the first line print the minimum possible number of data centers k (1 \u2264 k \u2264 n) that have to be included in an experiment in order to keep the data available for any client. In the second line print k distinct integers x_1, x_2, ..., x_{k} (1 \u2264 x_{i} \u2264 n), the indices of data centers whose maintenance time will be shifted by one hour later. Data center indices may be printed in any order. If there are several possible answers, it is allowed to print any of them. It is guaranteed that at there is at least one valid choice of data centers. -----Examples----- Input 3 3 5 4 4 0 1 3 3 2 3 1 Output 1 3  Input 4 5 4 2 1 0 3 4 3 3 2 1 2 1 4 1 3 Output 4 1 2 3 4  -----Note----- Consider the first sample test. The given answer is the only way to conduct an experiment involving the only data center. In such a scenario the third data center has a maintenance during the hour 1, and no two data centers storing the information of the same client have maintenance at the same hour. On the other hand, for example, if we shift the maintenance time on hour later for the first data center, then the data of clients 1 and 3 will be unavailable during the hour 0.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nBigData Inc. is a corporation that has n data centers indexed from 1 to n that are located all over the world. These data centers provide storage for client data (you can figure out that client data is really big!).\n\nMain feature of services offered by BigData Inc. is the access availability guarantee even under the circumstances of any data center having an outage. Such a guarantee is ensured by using the two-way replication. Two-way replication is such an approach for data storage that any piece of data is represented by two identical copies that are stored in two different data centers.\n\nFor each of m company clients, let us denote indices of two different data centers storing this client data as c_{i}, 1 and c_{i}, 2.\n\nIn order to keep data centers operational and safe, the software running on data center computers is being updated regularly. Release cycle of BigData Inc. is one day meaning that the new version of software is being deployed to the data center computers each day.\n\nData center software update is a non-trivial long process, that is why there is a special hour-long time frame that is dedicated for data center maintenance. During the maintenance period, data center computers are installing software updates, and thus they may be unavailable. Consider the day to be exactly h hours long. For each data center there is an integer u_{j} (0 \u2264 u_{j} \u2264 h - 1) defining the index of an hour of day, such that during this hour data center j is unavailable due to maintenance.\n\nSumming up everything above, the condition u_{c}_{i}, 1 \u2260 u_{c}_{i}, 2 should hold for each client, or otherwise his data may be unaccessible while data centers that store it are under maintenance.\n\nDue to occasional timezone change in different cities all over the world, the maintenance time in some of the data centers may change by one hour sometimes. Company should be prepared for such situation, that is why they decided to conduct an experiment, choosing some non-empty subset of data centers, and shifting the maintenance time for them by an hour later (i.e. if u_{j} = h - 1, then the new maintenance hour would become 0, otherwise it would become u_{j} + 1). Nonetheless, such an experiment should not break the accessibility guarantees, meaning that data of any client should be still available during any hour of a day after the data center maintenance times are changed.\n\nSuch an experiment would provide useful insights, but changing update time is quite an expensive procedure, that is why the company asked you to find out the minimum number of data centers that have to be included in an experiment in order to keep the data accessibility guarantees.\n\n\n-----Input-----\n\nThe first line of input contains three integers n, m and h (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000, 2 \u2264 h \u2264 100 000), the number of company data centers, number of clients and the day length of day measured in hours. \n\nThe second line of input contains n integers u_1, u_2, ..., u_{n} (0 \u2264 u_{j} < h), j-th of these numbers is an index of a maintenance hour for data center j. \n\nEach of the next m lines contains two integers c_{i}, 1 and c_{i}, 2 (1 \u2264 c_{i}, 1, c_{i}, 2 \u2264 n, c_{i}, 1 \u2260 c_{i}, 2), defining the data center indices containing the data of client i.\n\nIt is guaranteed that the given maintenance schedule allows each client to access at least one copy of his data at any moment of day.\n\n\n-----Output-----\n\nIn the first line print the minimum possible number of data centers k (1 \u2264 k \u2264 n) that have to be included in an experiment in order to keep the data available for any client.\n\nIn the second line print k distinct integers x_1, x_2, ..., x_{k} (1 \u2264 x_{i} \u2264 n), the indices of data centers whose maintenance time will be shifted by one hour later. Data center indices may be printed in any order.\n\nIf there are several possible answers, it is allowed to print any of them. It is guaranteed that at there is at least one valid choice of data centers.\n\n\n-----Examples-----\nInput\n3 3 5\n4 4 0\n1 3\n3 2\n3 1\n\nOutput\n1\n3 \nInput\n4 5 4\n2 1 0 3\n4 3\n3 2\n1 2\n1 4\n1 3\n\nOutput\n4\n1 2 3 4 \n\n\n-----Note-----\n\nConsider the first sample test. The given answer is the only way to conduct an experiment involving the only data center. In such a scenario the third data center has a maintenance during the hour 1, and no two data centers storing the information of the same client have maintenance at the same hour.\n\nOn the other hand, for example, if we shift the maintenance time on hour later for the first data center, then the data of clients 1 and 3 will be unavailable during the hour 0.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Two participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you. Both participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers. Determine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not. \n-----Input----- The first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 12$) \u2014 the number of pairs the first participant communicated to the second and vice versa. The second line contains $n$ pairs of integers, each between $1$ and $9$, \u2014 pairs of numbers communicated from first participant to the second. The third line contains $m$ pairs of integers, each between $1$ and $9$, \u2014 pairs of numbers communicated from the second participant to the first. All pairs within each set are distinct (in particular, if there is a pair $(1,2)$, there will be no pair $(2,1)$ within the same set), and no pair contains the same number twice. It is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number. -----Output----- If you can deduce the shared number with certainty, print that number. If you can with certainty deduce that both participants know the shared number, but you do not know it, print $0$. Otherwise print $-1$. -----Examples----- Input 2 2 1 2 3 4 1 5 3 4 Output 1 Input 2 2 1 2 3 4 1 5 6 4 Output 0 Input 2 3 1 2 4 5 1 2 1 3 2 3 Output -1 -----Note----- In the first example the first participant communicated pairs $(1,2)$ and $(3,4)$, and the second communicated $(1,5)$, $(3,4)$. Since we know that the actual pairs they received share exactly one number, it can't be that they both have $(3,4)$. Thus, the first participant has $(1,2)$ and the second has $(1,5)$, and at this point you already know the shared number is $1$. In the second example either the first participant has $(1,2)$ and the second has $(1,5)$, or the first has $(3,4)$ and the second has $(6,4)$. In the first case both of them know the shared number is $1$, in the second case both of them know the shared number is $4$. You don't have enough information to tell $1$ and $4$ apart. In the third case if the first participant was given $(1,2)$, they don't know what the shared number is, since from their perspective the second participant might have been given either $(1,3)$, in which case the shared number is $1$, or $(2,3)$, in which case the shared number is $2$. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is $-1$.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nTwo participants are each given a pair of distinct numbers from 1 to 9 such that there's exactly one number that is present in both pairs. They want to figure out the number that matches by using a communication channel you have access to without revealing it to you.\n\nBoth participants communicated to each other a set of pairs of numbers, that includes the pair given to them. Each pair in the communicated sets comprises two different numbers.\n\nDetermine if you can with certainty deduce the common number, or if you can determine with certainty that both participants know the number but you do not.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 12$) \u2014 the number of pairs the first participant communicated to the second and vice versa.\n\nThe second line contains $n$ pairs of integers, each between $1$ and $9$, \u2014 pairs of numbers communicated from first participant to the second.\n\nThe third line contains $m$ pairs of integers, each between $1$ and $9$, \u2014 pairs of numbers communicated from the second participant to the first.\n\nAll pairs within each set are distinct (in particular, if there is a pair $(1,2)$, there will be no pair $(2,1)$ within the same set), and no pair contains the same number twice.\n\nIt is guaranteed that the two sets do not contradict the statements, in other words, there is pair from the first set and a pair from the second set that share exactly one number.\n\n\n-----Output-----\n\nIf you can deduce the shared number with certainty, print that number.\n\nIf you can with certainty deduce that both participants know the shared number, but you do not know it, print $0$.\n\nOtherwise print $-1$.\n\n\n-----Examples-----\nInput\n2 2\n1 2 3 4\n1 5 3 4\n\nOutput\n1\n\nInput\n2 2\n1 2 3 4\n1 5 6 4\n\nOutput\n0\n\nInput\n2 3\n1 2 4 5\n1 2 1 3 2 3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example the first participant communicated pairs $(1,2)$ and $(3,4)$, and the second communicated $(1,5)$, $(3,4)$. Since we know that the actual pairs they received share exactly one number, it can't be that they both have $(3,4)$. Thus, the first participant has $(1,2)$ and the second has $(1,5)$, and at this point you already know the shared number is $1$.\n\nIn the second example either the first participant has $(1,2)$ and the second has $(1,5)$, or the first has $(3,4)$ and the second has $(6,4)$. In the first case both of them know the shared number is $1$, in the second case both of them know the shared number is $4$. You don't have enough information to tell $1$ and $4$ apart.\n\nIn the third case if the first participant was given $(1,2)$, they don't know what the shared number is, since from their perspective the second participant might have been given either $(1,3)$, in which case the shared number is $1$, or $(2,3)$, in which case the shared number is $2$. While the second participant does know the number with certainty, neither you nor the first participant do, so the output is $-1$.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Write a program to determine how many people will hear about a particular rumor through the grapevine after a certain number of days. \n-----Input----- The first line will contain three integers: $0 < n \\leq 100000$, $0 < m \\leq 100000$, and $0 \\leq d \\leq 10000$, where $n$ is the number of people, $m$ is the number of connections, and $d$ is the number of days that elapse. The next $n$ lines will each consist of a unique string $s$ and an integer $0 \\leq t \\leq 1000$ where $s$ is the name of a person and $t$ is their level of skepticism. In other words, person $s$ must hear the rumor from $t$ distinct other people before $s$ will begin spreading the rumor. This is followed by $m$ lines each consisting of two strings $u$ and $v$ which indicates that person $u$ and person $v$ know each other. Each of these lines represents a unique pair of persons. The final line will contain a single string $r$, the name of the person that the rumor originates from. Note that $r$ is the only person with skepticism $t = 0$. All strings are between $1$ and $20$ characters long and consists only of English lowercase or uppercase letters and digits. -----Output----- Output a single integer: the number of people (not including person $r$) that have heard the rumor after $d$ days. -----Examples----- Sample Input: 3 2 1 Alice 0 Bob 1 Carol 1 Alice Bob Bob Carol Alice Sample Output: 1\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nAccording to Wikipedia, to hear something \u201cthrough the grapevine\u201d is to learn of something informally and unofficially by means of gossip or rumor. In this problem, you are tasked with determining how many people will hear about a particular rumor \u201cthrough the grapevine\u201d after a certain number of days.\n\nRumors are always started by a single person. On any given day, a person who knows the rumor can spread it by telling the people that they know. Upon hearing of the rumor, that person must wait until the following day before they can begin to spread it themselves. Furthermore, some people are skeptical and will only spread the rumor once they\u2019ve heard it from a number of distinct sources. However once a person has heard the rumor from enough people, they will always try to spread the rumor to as many people as possible.\n\n-----Input-----\nThe first line will contain three integers: $0 < n \\leq 100000$, $0 < m \\leq 100000$, and $0 \\leq d \\leq 10000$, where $n$ is the number of people, $m$ is the number of connections, and $d$ is the number of days that elapse.\n\nThe next $n$ lines will each consist of a unique string $s$ and an integer $0 \\leq t \\leq 1000$ where $s$ is the name of a person and $t$ is their level of skepticism. In other words, person $s$ must hear the rumor from $t$ distinct other people before $s$ will begin spreading the rumor.\n\nThis is followed by $m$ lines each consisting of two strings $u$ and $v$ which indicates that person $u$ and person $v$ know each other. Each of these lines represents a unique pair of persons.\n\nThe final line will contain a single string $r$, the name of the person that the rumor originates from. Note that $r$ is the only person with skepticism $t = 0$. All strings are between $1$ and $20$ characters long and consists only of English lowercase or uppercase letters and digits.\n\n-----Output-----\nOutput a single integer: the number of people (not including person $r$) that have heard the rumor after $d$ days.\n\n-----Examples-----\nSample Input:\n3 2 1\nAlice 0\nBob 1\nCarol 1\nAlice Bob\nBob Carol\nAlice\nSample Output:\n1\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a sequence a_1, a_2, ..., a_{n} consisting of different integers. It is required to split this sequence into the maximum number of subsequences such that after sorting integers in each of them in increasing order, the total sequence also will be sorted in increasing order. Sorting integers in a subsequence is a process such that the numbers included in a subsequence are ordered in increasing order, and the numbers which are not included in a subsequence don't change their places. Every element of the sequence must appear in exactly one subsequence. \n-----Input----- The first line contains two integers n and k (1 \u2264 n, k \u2264 100). The second line contains n space-separated integers q_1, q_2, ..., q_{n} (1 \u2264 q_{i} \u2264 n) \u2014 the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format. It is guaranteed that the given sequences q and s are correct permutations. -----Output----- If the situation that is described in the statement is possible, print \"YES\" (without the quotes), otherwise print \"NO\" (without the quotes). -----Examples----- Input 4 1 2 3 4 1 1 2 3 4 Output NO Input 4 1 4 3 1 2 3 4 2 1 Output YES Input 4 3 4 3 1 2 3 4 2 1 Output YES Input 4 2 4 3 1 2 2 1 4 3 Output YES Input 4 1 4 3 1 2 2 1 4 3 Output NO -----Note----- In the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed. In the second sample the described situation is possible, in case if after we toss a coin, we get tails. In the third sample the possible coin tossing sequence is: heads-tails-tails. In the fourth sample the possible coin tossing sequence is: heads-heads.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLittle Petya likes permutations a lot. Recently his mom has presented him permutation q_1, q_2, ..., q_{n} of length n.\n\nA permutation a of length n is a sequence of integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 n), all integers there are distinct. \n\nThere is only one thing Petya likes more than permutations: playing with little Masha. As it turns out, Masha also has a permutation of length n. Petya decided to get the same permutation, whatever the cost may be. For that, he devised a game with the following rules:  Before the beginning of the game Petya writes permutation 1, 2, ..., n on the blackboard. After that Petya makes exactly k moves, which are described below.  During a move Petya tosses a coin. If the coin shows heads, he performs point 1, if the coin shows tails, he performs point 2.  Let's assume that the board contains permutation p_1, p_2, ..., p_{n} at the given moment. Then Petya removes the written permutation p from the board and writes another one instead: p_{q}_1, p_{q}_2, ..., p_{q}_{n}. In other words, Petya applies permutation q (which he has got from his mother) to permutation p.  All actions are similar to point 1, except that Petya writes permutation t on the board, such that: t_{q}_{i} = p_{i} for all i from 1 to n. In other words, Petya applies a permutation that is inverse to q to permutation p. \n\nWe know that after the k-th move the board contained Masha's permutation s_1, s_2, ..., s_{n}. Besides, we know that throughout the game process Masha's permutation never occurred on the board before the k-th move. Note that the game has exactly k moves, that is, throughout the game the coin was tossed exactly k times.\n\nYour task is to determine whether the described situation is possible or else state that Petya was mistaken somewhere. See samples and notes to them for a better understanding.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100). The second line contains n space-separated integers q_1, q_2, ..., q_{n} (1 \u2264 q_{i} \u2264 n) \u2014 the permutation that Petya's got as a present. The third line contains Masha's permutation s, in the similar format.\n\nIt is guaranteed that the given sequences q and s are correct permutations.\n\n\n-----Output-----\n\nIf the situation that is described in the statement is possible, print \"YES\" (without the quotes), otherwise print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n4 1\n2 3 4 1\n1 2 3 4\n\nOutput\nNO\n\nInput\n4 1\n4 3 1 2\n3 4 2 1\n\nOutput\nYES\n\nInput\n4 3\n4 3 1 2\n3 4 2 1\n\nOutput\nYES\n\nInput\n4 2\n4 3 1 2\n2 1 4 3\n\nOutput\nYES\n\nInput\n4 1\n4 3 1 2\n2 1 4 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample Masha's permutation coincides with the permutation that was written on the board before the beginning of the game. Consequently, that violates the condition that Masha's permutation never occurred on the board before k moves were performed.\n\nIn the second sample the described situation is possible, in case if after we toss a coin, we get tails.\n\nIn the third sample the possible coin tossing sequence is: heads-tails-tails.\n\nIn the fourth sample the possible coin tossing sequence is: heads-heads.\n\"\"\"\ndef code():"
}