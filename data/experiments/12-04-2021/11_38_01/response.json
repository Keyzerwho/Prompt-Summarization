{
    "id": "cmpl-4BUCZFmTmeZbvXDxr9LEIDE9LNAjG",
    "object": "text_completion",
    "created": 1638643051,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    ",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    r, c = [int(x) for x in input().split()]\n    grid = []\n    for i in range(r):\n        grid.append(list(input()))\n    # Find the den and the painter\n    den = None\n    painter = None\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == 'D':\n                den = (i, j)\n            elif grid[i][j] == 'S':\n                painter = (i, j)\n    # Flood the grid\n    for i in range(r):\n        for j in range(c):\n            if grid[i][j] == '.':\n                for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                    if 0 <= x < r and 0 <= y < c and grid[x][y] == '*':\n                        grid[i][j] = '*'\n    # Find the shortest path\n    if den == painter:\n        return 0\n    if grid[den[0]][den[1]] == '*':\n        return 'KAKTUS'\n    visited = set()\n    queue = [(painter, 0)]\n    while queue:\n        curr, time = queue.pop(0)\n        if curr == den:\n            return time\n        visited.add(curr)\n        for x, y in [(curr[0]-1, curr[1]), (curr[0]+1, curr[1]), (curr[0], curr[1]-1), (curr[0], curr[1]+1)]:\n            if 0 <= x < r and 0 <= y < c and grid[x][y] != 'X' and (x, y) not in visited:\n                queue.append(((x, y), time+1))\n    return 'KAKTUS'\n\nprint(code())",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    w = []\n    h = []\n    for i in range(n):\n        w.append(int(input()))\n        h.append(int(input()))\n    w.sort()\n    h.sort()\n    if n % 2 == 0:\n        w1 = w[:n//2]\n        w2 = w[n//2:]\n        h1 = h[:n//2]\n        h2 = h[n//2:]\n        w1.reverse()\n        w2.reverse()\n        h1.reverse()\n        h2.reverse()\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(",
            "index": 2,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    w = []\n    h = []\n    for i in range(n):\n        w.append(int(input()))\n        h.append(int(input()))\n    w.sort()\n    h.sort()\n    if n % 2 == 0:\n        w1 = w[:n//2]\n        w2 = w[n//2:]\n        h1 = h[:n//2]\n        h2 = h[n//2:]\n        w1.reverse()\n        w2.reverse()\n        h1.reverse()\n        h2.reverse()\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(0)\n        h1.append(0)\n        h2.append(0)\n        w1.append(0)\n        w2.append(",
            "index": 3,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n, m, k = map(int, input().split())\n    antiques = []\n    for i in range(n):\n        a, p, b, q = map(int, input().split())\n        antiques.append((a, p, b, q))\n    antiques.sort(key=lambda x: x[1])\n    shops = []\n    for i in range(m):\n        shops.append([])\n    for i in range(n):\n        shops[antiques[i][0] - 1].append(antiques[i])\n    for i in range(m):\n        shops[i].sort(key=lambda x: x[3])\n    for i in range(m):\n        if len(shops[i]) > k:\n            shops[i] = shops[i][:k]\n    total = 0\n    for i in range(m):\n        for j in range(len(shops[i])):\n            total += shops[i][j][3]\n    print(total)\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, k = [int(x) for x in input().split()]\n    antiques = []\n    for i in range(n):\n        a, p, b, q = [int(x) for x in input().split()]\n        antiques.append([a, p, b, q])\n    antiques.sort(key=lambda x: x[1])\n    shops = []\n    for i in range(m):\n        shops.append([])\n    for i in range(n):\n        shops[antiques[i][0]-1].append(antiques[i])\n    for i in range(m):\n        shops[i].sort(key=lambda x: x[3])\n    for i in range(m):\n        if len(shops[i]) > k:\n            print(-1)\n            return\n    cost = 0\n    for i in range(m):\n        if len(shops[i]) == 0:\n            continue\n        if len(shops[i]) == 1:\n            cost += shops[i][0][1]\n            continue\n        for j in range(len(shops[i])):\n            if j == 0:\n                cost += shops[i][j][1]\n            else:\n                cost += shops[i][j][3]\n    print(cost)\n\ncode()",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    for i in range(n):\n        if arr[i]**0.5 != int(arr[i]**0.5):\n            print(arr[i])\n            break\ncode()",
            "index": 6,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i]**0.5 != int(a[i]**0.5):\n            print(a[i])\n            break\n\ncode()",
            "index": 7,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    print(input().count('+')+1)\ncode()",
            "index": 8,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    if s.count('-') == 0:\n        print(s.count('+'))\n    else:\n        print(s.count('+') + 1)\n\ncode()",
            "index": 9,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a, b = map(int, input().split())\n    if a == b:\n        print(1)\n    elif a > b:\n        print(-1)\n    else:\n        print(a + (b - a) * (b - a) / (2 * a))\n\ncode()",
            "index": 10,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    a, b = map(int, input().split())\n    if a == b:\n        print(1)\n    elif a > b:\n        print(-1)\n    else:\n        print(a + (b - a) * (b - a) / (2 * a))\n\ncode()",
            "index": 11,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    board = []\n    for i in range(8):\n        board.append(input())\n    if \"R\" in board[0]:\n        if \"k\" in board[0]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n\ncode()",
            "index": 12,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    board = []\n    for i in range(8):\n        board.append(input())\n    if board[0].count(\"R\") == 1 and board[0].count(\"K\") == 1:\n        if board[0].count(\"k\") == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    elif board[7].count(\"R\") == 1 and board[7].count(\"K\") == 1:\n        if board[7].count(\"k\") == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\ncode()",
            "index": 13,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    xb, yb = map(int, input().split())\n    x1, y1, x2, y2 = map(int, input().split())\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if y1 > y2:\n        y1, y2 = y2, y1\n    if xb == x1 or xb == x2 or yb == y1 or yb == y2:\n        print(\"Yes\")\n        return\n    if xb < x1 or xb > x2 or yb < y1 or yb > y2:\n        print(\"No\", xb, yb)\n        return\n    if xb < x1:\n        if yb < y1:\n            if (x2 - xb) * (y2 - yb) < (x2 - x1) * (y2 - y1):\n                print(\"No\", xb, yb)\n                return\n        else:\n            if (x2 - xb) * (yb - y1) < (x2 - x1) * (y1 - yb):\n                print(\"No\", xb, yb)\n                return\n    else:\n        if yb < y1:\n            if (xb - x1) * (y2 - yb) < (x1 - xb) * (y2 - y1):\n                print(\"No\", xb, yb)\n                return\n        else:\n            if (xb - x1) * (yb - y1) < (x1 - xb) * (y1 - yb):\n                print(\"No\", xb, yb)\n                return\n    print(\"Yes\")\n\nif __name__ == '__main__':\n    code()",
            "index": 14,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    xb, yb = map(int, input().split())\n    x1, y1, x2, y2 = map(int, input().split())\n    if x1 <= xb <= x2 and y1 <= yb <= y2:\n        print(\"Yes\")\n    else:\n        if x1 <= xb <= x2:\n            if y1 > yb:\n                print(\"No\", xb, y1)\n            else:\n                print(\"No\", xb, y2)\n        elif y1 <= yb <= y2:\n            if x1 > xb:\n                print(\"No\", x1, yb)\n            else:\n                print(\"No\", x2, yb)\n        else:\n            if x1 > xb:\n                if y1 > yb:\n                    print(\"No\", x1, y1)\n                else:\n                    print(\"No\", x1, y2)\n            else:\n                if y1 > yb:\n                    print(\"No\", x2, y1)\n                else:\n                    print(\"No\", x2, y2)\n\nif __name__ == '__main__':\n    code()",
            "index": 15,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, c, r = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    if grid[r-1][c-1] == '.':\n        grid[r-1][c-1] = '\\\\'\n    elif grid[r-1][c-1] == '/':\n        grid[r-1][c-1] = '.'\n    else:\n        print(\"NO\")\n        return\n    if grid[r-1][c-1] == '.':\n        grid[r-1][c-1] = '/'\n    elif grid[r-1][c-1] == '\\\\':\n        grid[r-1][c-1] = '.'\n    else:\n        print(\"NO\")\n        return\n    if grid[r-1][c-1] == '.':\n        grid[r-1][c-1] = '\\\\'\n    elif grid[r-1][c-1] == '/':\n        grid[r-1][c-1] = '.'\n    else:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    for i in range(n):\n        print(\"\".join(grid[i]))\n\nif __name__ == '__main__':\n    code()",
            "index": 16,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, c, r = map(int, input().split())\n    grid = [list(input()) for _ in range(n)]\n    if grid[r-1][c-1] == '/':\n        grid[r-1][c-1] = '\\\\'\n    elif grid[r-1][c-1] == '\\\\':\n        grid[r-1][c-1] = '/'\n    else:\n        grid[r-1][c-1] = '.'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '.':\n                grid[i][j] = '\\\\'\n            elif grid[i][j] == '\\\\':\n                grid[i][j] = '/'\n            else:\n                grid[i][j] = '.'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '/':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '\\\\'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '\\\\':\n                grid[i][j] = '.'\n            else:\n                grid[i][j] = '/'\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]",
            "index": 17,
            "logprobs": null,
            "finish_reason": "length"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    k = int(input())\n    m = 0\n    for i in range(n):\n        if a[i] > k:\n            break\n        m += 1\n        k -= a[i]\n    print(m)\n\ncode()",
            "index": 18,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    m = int(input())\n    i = 0\n    while i < n and a[i] > m:\n        i += 1\n    print(n - i)\n\ncode()",
            "index": 19,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}