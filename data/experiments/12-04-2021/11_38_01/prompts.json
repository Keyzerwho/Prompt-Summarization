{
    "0": "Python 3\n\"\"\"\n The evil emperor Cactus has in his possession the Magic Keg and has flooded the Enchanted Forest! The Painter and the three little hedgehogs now have to return to the Beaver s den where they will be safe from the water as quickly as possible! The map of the Enchanted Forest consists of R rows and C columns. Empty fields are represented by  .  characters, flooded fields by  *  and rocks by  X . Additionally, the Beaver s den is represented by  D  and the Painter and the three little hedgehogs are shown as  S . Every minute the Painter and the three little hedgehogs can move to one of the four neighbouring fields (up, down, left or right). Every minute the flood expands as well so that all empty fields that have at least one common side with a flooded field become flooded as well. Neither water nor the Painter and the three little hedgehogs can pass through rocks. Naturally, the Painter and the three little hedgehogs cannot pass through flooded fields, and water cannot flood the Beaver s den. Write a program that will, given a map of the Enchanted Forest, output the shortest time needed for the Painter and the three little hedgehogs to safely reach the Beaver s den.\nNote: The Painter and the three little hedgehogs cannot move into a field that is about to be flooded (in the same minute). -----Input----- The first line of input will contain two positive integers, $R$ and $C$, smaller than or equal to $50$. The following $R$ lines will each contain $C$ characters (\u2018.\u2019, \u2018*\u2019, \u2018X\u2019, \u2018D\u2019 or \u2018S\u2019). The map will contain exactly one \u2018D\u2019 character and exactly one \u2018S\u2019 character. -----Output----- Output the shortest possible time needed for the Painter and the three little hedgehogs to safely reach the Beaver\u2019s den. If this is impossible output the word \u201cKAKTUS\u201d on a line by itself. Clarification of the second sample test below: The best they can do is to go along the lower border and then the left border, and get flooded one minute before reaching the den. -----Examples----- Sample Input 1: 3 3 D.* ... .S. Sample Output 1: 3 Sample Input 2: 3 3 D.* ... ..S Sample Output 2: KAKTUS\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe evil emperor Cactus has in his possession the Magic Keg and has flooded the Enchanted Forest! The Painter and the three little hedgehogs now have to return to the Beaver\u2019s den where they will be safe from the water as quickly as possible!\n\nThe map of the Enchanted Forest consists of R rows and C columns. Empty fields are represented by \u2018.\u2019 characters, flooded fields by \u2018*\u2019 and rocks by \u2018X\u2019. Additionally, the Beaver\u2019s den is represented by \u2018D\u2019 and the Painter and the three little hedgehogs are shown as \u2018S\u2019.\n\nEvery minute the Painter and the three little hedgehogs can move to one of the four neighbouring fields (up, down, left or right). Every minute the flood expands as well so that all empty fields that have at least one common side with a flooded field become flooded as well. Neither water nor the Painter and the three little hedgehogs can pass through rocks. Naturally, the Painter and the three little hedgehogs cannot pass through flooded fields, and water cannot flood the Beaver\u2019s den.\n\nWrite a program that will, given a map of the Enchanted Forest, output the shortest time needed for the Painter and the three little hedgehogs to safely reach the Beaver\u2019s den.\n\nNote: The Painter and the three little hedgehogs cannot move into a field that is about to be flooded (in the same minute).\n\n-----Input-----\nThe first line of input will contain two positive integers, $R$ and $C$, smaller than or equal to $50$. The following $R$ lines will each contain $C$ characters (\u2018.\u2019, \u2018*\u2019, \u2018X\u2019, \u2018D\u2019 or \u2018S\u2019). The map will contain exactly one \u2018D\u2019 character and exactly one \u2018S\u2019 character.\n\n-----Output-----\nOutput the shortest possible time needed for the Painter and the three little hedgehogs to safely reach the Beaver\u2019s den. If this is impossible output the word \u201cKAKTUS\u201d on a line by itself.\n\nClarification of the second sample test below: The best they can do is to go along the lower border and then the left border, and get flooded one minute before reaching the den.\n\n-----Examples-----\nSample Input 1:\n3 3\nD.*\n...\n.S.\nSample Output 1:\n3\n\nSample Input 2:\n3 3\nD.*\n...\n..S\nSample Output 2:\nKAKTUS\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Many years have passed, and n friends met at a party again. Technologies have leaped forward since the last meeting, cameras with timer appeared and now it is not obligatory for one of the friends to stand with a camera, and, thus, being absent on the photo. Simply speaking, the process of photographing can be described as follows. Each friend occupies a rectangle of pixels on the photo: the i-th of them in a standing state occupies a w_{i} pixels wide and a h_{i} pixels high rectangle. But also, each person can lie down for the photo, and then he will occupy a h_{i} pixels wide and a w_{i} pixels high rectangle. The total photo will have size W   H, where W is the total width of all the people rectangles, and H is the maximum of the heights. The friends want to determine what minimum area the group photo can they obtain if no more than n / 2 of them can lie on the ground (it would be strange if more than n / 2 gentlemen lie on the ground together, isn't it ..) Help them to achieve this goal.\n-----Input----- The first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of friends. The next n lines have two integers w_{i}, h_{i} (1 \u2264 w_{i}, h_{i} \u2264 1000) each, representing the size of the rectangle, corresponding to the i-th friend. -----Output----- Print a single integer equal to the minimum possible area of the photo containing all friends if no more than n / 2 of them can lie on the ground. -----Examples----- Input 3 10 1 20 2 30 3 Output 180 Input 3 3 1 2 2 4 3 Output 21 Input 1 5 10 Output 50\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nMany years have passed, and n friends met at a party again. Technologies have leaped forward since the last meeting, cameras with timer appeared and now it is not obligatory for one of the friends to stand with a camera, and, thus, being absent on the photo.\n\nSimply speaking, the process of photographing can be described as follows. Each friend occupies a rectangle of pixels on the photo: the i-th of them in a standing state occupies a w_{i} pixels wide and a h_{i} pixels high rectangle. But also, each person can lie down for the photo, and then he will occupy a h_{i} pixels wide and a w_{i} pixels high rectangle.\n\nThe total photo will have size W \u00d7 H, where W is the total width of all the people rectangles, and H is the maximum of the heights. The friends want to determine what minimum area the group photo can they obtain if no more than n / 2 of them can lie on the ground (it would be strange if more than n / 2 gentlemen lie on the ground together, isn't it?..)\n\nHelp them to achieve this goal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of friends.\n\nThe next n lines have two integers w_{i}, h_{i} (1 \u2264 w_{i}, h_{i} \u2264 1000) each, representing the size of the rectangle, corresponding to the i-th friend.\n\n\n-----Output-----\n\nPrint a single integer equal to the minimum possible area of the photo containing all friends if no more than n / 2 of them can lie on the ground.\n\n\n-----Examples-----\nInput\n3\n10 1\n20 2\n30 3\n\nOutput\n180\n\nInput\n3\n3 1\n2 2\n4 3\n\nOutput\n21\n\nInput\n1\n5 10\n\nOutput\n50\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are hosting a fancy party for fancy friends. And, like any fancy party, you need to buy some fancy antiques to put up around the venue (your house). There is a set of $n$ fancy antiques that you need to buy. And there is a set of $m$ fancy antique shops in the city. Because these antiques are extremely rare, each fancy antique can only be found at a single fancy antique shop. However, the fancy antique shops can also sell  knock-off  (duplicate) versions of some of the antiques. And of course, for any fancy antique, there is only a single fancy antique shop in the city that holds a knock-off version of that antique (this is to maintain the rareness of the antiques). The shop that sells the original is not always the same shop that holds the knock-off. It turns out that even though you can tell the difference, most people cannot tell the original version from the knock-off version of any given antique. And, because the shops can get away with it, sometimes the knock-off is more expensive than the original! Since the party is tomorrow, you only have time to visit $k$ shops. You would like to buy one version (either the original or the knock-off) of each of the $n$ antiques. Suppose that there are three shops, and three antiques we would like to buy.  - Antique $\\# 1$ sells for $30$ at shop $\\# 1$. Its knockoff sells for $50$ at shop $\\# 2$.  - Antique $\\# 2$ sells for $70$ at shop $\\# 2$. Its knockoff\n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will consist of three space-separated integers: $n$, $m$, and $k$ ($1 \\le n \\le 100$, $1 \\le k \\le m \\le 40$). The next $n$ lines will each have four space separated integers, $a$, $p$, $b$ and $q$, describing an antique, where:  - $a$ is the index of the shop that sells the original version of the antique ($1 \\le a \\le m$)  - $p$ is the price of the original version of the antique at shop $a$ ($1 \\le p \\le 10^7$)  - $b$ is the index of the shop that sells the knock-off version of the antique ($1 \\le b \\le m$)  - $q$ is the price of the knock-off version of the antique at shop $b$ ($1 \\le q \\le 10^7$) -----Output----- If it is possible to collect all of the antiques while visiting no more than $k$ stores, then output the minimum cost. If it is not possible, output $-1$. -----Examples----- Sample Input: 3 3 2 1 30 2 50 2 70 3 10 3 20 1 80 Sample Output: 60\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are hosting a fancy party for fancy friends. And, like any fancy party, you need to buy some fancy antiques to put up around the venue (your house).\n\nThere is a set of $n$ fancy antiques that you need to buy. And there is a set of $m$ fancy antique shops in the city. Because these antiques are extremely rare, each fancy antique can only be found at a single fancy antique shop. However, the fancy antique shops can also sell \u201cknock-off\u201d (duplicate) versions of some of the antiques. And of course, for any fancy antique, there is only a single fancy antique shop in the city that holds a knock-off version of that antique (this is to maintain the rareness of the antiques). The shop that sells the original is not always the same shop that holds the knock-off.\n\nIt turns out that even though you can tell the difference, most people cannot tell the original version from the knock-off version of any given antique. And, because the shops can get away with it, sometimes the knock-off is more expensive than the original! Since the party is tomorrow, you only have time to visit $k$ shops. You would like to buy one version (either the original or the knock-off) of each of the $n$ antiques.\n\nSuppose that there are three shops, and three antiques we would like to buy.\n - Antique $\\# 1$ sells for $30$ at shop $\\# 1$. Its knockoff sells for $50$ at shop $\\# 2$.\n - Antique $\\# 2$ sells for $70$ at shop $\\# 2$. Its knockoff sells for $10$ at shop $\\# 3$.\n - Antique $\\# 3$ sells for $20$ at shop $\\# 3$. Its knockoff sells for $80$ at shop $\\# 1$.\n\nSuppose you only have time to go to two shops. You can go to shops $1$ and $3$. You can buy the original of antique $1$ with cost $30$ at shop $1$, the original of antique $3$ with cost $20$ at shop $3$, and the knock-off of antique $2$ at shop $3$ with cost $10$. The total cost to buy these items is $60$, which is the minimum possible.\n\nIf you only have time to visit one shop, then it is impossible. You cannot buy a version of all three items by visiting a single shop.\n\nGiven the costs of the antiques/knock-offs at the shops, what is the minimum total cost to buy one version of each antique?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of input will consist of three space-separated integers: $n$, $m$, and $k$ ($1 \\le n \\le 100$, $1 \\le k \\le m \\le 40$). The next $n$ lines will each have four space separated integers, $a$, $p$, $b$ and $q$, describing an antique, where:\n - $a$ is the index of the shop that sells the original version of the antique ($1 \\le a \\le m$)\n - $p$ is the price of the original version of the antique at shop $a$ ($1 \\le p \\le 10^7$)\n - $b$ is the index of the shop that sells the knock-off version of the antique ($1 \\le b \\le m$)\n - $q$ is the price of the knock-off version of the antique at shop $b$ ($1 \\le q \\le 10^7$)\n\n-----Output-----\nIf it is possible to collect all of the antiques while visiting no more than $k$ stores, then output the minimum cost. If it is not possible, output $-1$.\n\n-----Examples-----\nSample Input:\n3 3 2\n1 30 2 50\n2 70 3 10\n3 20 1 80\nSample Output:\n60\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Given an array a_1, a_2, ..., a_{n} of n integers, find the largest number in the array that is not a perfect square. A number x is said to be a perfect square if there exists an integer y such that x = y^2. \n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6)\u00a0\u2014 the elements of the array. It is guaranteed that at least one element of the array is not a perfect square. -----Output----- Print the largest number in the array which is not a perfect square. It is guaranteed that an answer always exists. -----Examples----- Input 2 4 2 Output 2 Input 8 1 2 4 8 16 32 64 576 Output 32 -----Note----- In the first sample case, 4 is a perfect square, so the largest number in the array that is not a perfect square is 2.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nGiven an array a_1, a_2, ..., a_{n} of n integers, find the largest number in the array that is not a perfect square.\n\nA number x is said to be a perfect square if there exists an integer y such that x = y^2.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6)\u00a0\u2014 the elements of the array.\n\nIt is guaranteed that at least one element of the array is not a perfect square.\n\n\n-----Output-----\n\nPrint the largest number in the array which is not a perfect square. It is guaranteed that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n4 2\n\nOutput\n2\n\nInput\n8\n1 2 4 8 16 32 64 576\n\nOutput\n32\n\n\n\n-----Note-----\n\nIn the first sample case, 4 is a perfect square, so the largest number in the array that is not a perfect square is 2.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Polycarpus just has been out of luck lately! As soon as he found a job in the \"Binary Cat\" cafe, the club got burgled. All ice-cream was stolen. On the burglary night Polycarpus kept a careful record of all club visitors. Each time a visitor entered the club, Polycarpus put down character \"+\" in his notes. Similarly, each time a visitor left the club, Polycarpus put character \"-\" in his notes. We know that all cases of going in and out happened consecutively, that is, no two events happened at the same time. Polycarpus doesn't remember whether there was somebody in the club at the moment when his shift begun and at the moment when it ended. Right now the police wonders what minimum number of distinct people Polycarpus could have seen. Assume that he sees anybody coming in or out of the club. Each person could have come in or out an arbitrary number of times.\n-----Input----- The only line of the input contains a sequence of characters \"+\" and \"-\", the characters are written one after another without any separators. The characters are written in the order, in which the corresponding events occurred. The given sequence has length from 1 to 300 characters, inclusive. -----Output----- Print the sought minimum number of people -----Examples----- Input +-+-+ Output 1 Input --- Output 3\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nPolycarpus just has been out of luck lately! As soon as he found a job in the \"Binary Cat\" cafe, the club got burgled. All ice-cream was stolen.\n\nOn the burglary night Polycarpus kept a careful record of all club visitors. Each time a visitor entered the club, Polycarpus put down character \"+\" in his notes. Similarly, each time a visitor left the club, Polycarpus put character \"-\" in his notes. We know that all cases of going in and out happened consecutively, that is, no two events happened at the same time. Polycarpus doesn't remember whether there was somebody in the club at the moment when his shift begun and at the moment when it ended.\n\nRight now the police wonders what minimum number of distinct people Polycarpus could have seen. Assume that he sees anybody coming in or out of the club. Each person could have come in or out an arbitrary number of times.\n\n\n-----Input-----\n\nThe only line of the input contains a sequence of characters \"+\" and \"-\", the characters are written one after another without any separators. The characters are written in the order, in which the corresponding events occurred. The given sequence has length from 1 to 300 characters, inclusive.\n\n\n-----Output-----\n\nPrint the sought minimum number of people\n\n\n-----Examples-----\nInput\n+-+-+\n\nOutput\n1\n\nInput\n---\nOutput\n3\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given a polyline going through points (0, 0)   (x, x)   (2x, 0)   (3x, x)   (4x, 0)   ... - (2kx, 0)   (2kx + x, x)   ....   Find the minimum positive value x such that it is true or determine that there is no such x. \n\n-----Input----- Only one line containing two positive integers a and b (1 \u2264 a, b \u2264 10^9). -----Output----- Output the only line containing the answer. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 9}. If there is no such x then output  - 1 as the answer. -----Examples----- Input 3 1 Output 1.000000000000 Input 1 3 Output -1 Input 4 1 Output 1.250000000000 -----Note----- You can see following graphs for sample 1 and sample 3.  [Image]  [Image]\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere is a polyline going through points (0, 0) \u2013 (x, x) \u2013 (2x, 0) \u2013 (3x, x) \u2013 (4x, 0) \u2013 ... - (2kx, 0) \u2013 (2kx + x, x) \u2013 .... \n\nWe know that the polyline passes through the point (a, b). Find minimum positive value x such that it is true or determine that there is no such x.\n\n\n-----Input-----\n\nOnly one line containing two positive integers a and b (1 \u2264 a, b \u2264 10^9).\n\n\n-----Output-----\n\nOutput the only line containing the answer. Your answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 9}. If there is no such x then output  - 1 as the answer.\n\n\n-----Examples-----\nInput\n3 1\n\nOutput\n1.000000000000\n\nInput\n1 3\n\nOutput\n-1\n\nInput\n4 1\n\nOutput\n1.250000000000\n\n\n\n-----Note-----\n\nYou can see following graphs for sample 1 and sample 3.  [Image]  [Image]\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Chess has been a long time passion of Yraglac. He spents at least an hour per day playing chess matches online or reading chess tactics books. The game is played by two players on an $8 \\times 8$ grid, with each player taking turns to move a piece. In this problem, we will consider a simplified variant of chess consisting of two kinds of pieces: kings and rooks. Kings can move one square in any direction while rooks can move any number of squares up/down or left/right. Pieces can either move to an unoccupied square or to a square occupied by an opponent s piece, which is captured and removed from play. A piece is threatened when an opponent s piece is able to capture the piece in a single move. It is illegal to move one own s king to a position where it is threatened (but it is legal to do so for a rook). A player is considered to be in checkmate when it is their turn, their king is threatened, and all possible moves will result in the king still being threatened. Yraglac is a skilled player and has managed to reach a situation where he has one king and one rook, while his opponent only has one king. Given that it is Yraglac s turn, can he checkmate his opponent in a single move  \n-----Input----- The input consists of a single test case representing a chessboard. It will consist of eight lines with eight characters each, where \u201cR\u201d represents Yraglac\u2019s rook, \u201cK\u201d represents Yraglac\u2019s king, \u201ck\u201d represents the opponent\u2019s king, and \u201c.\u201d represents an empty square. It is guaranteed that Yraglac will have exactly one king and one rook, while his opponent will only have one king. It is also guaranteed that no king will be threatened. -----Output----- Output \u201cYes\u201d if Yraglac can checkmate his opponent in a single move, or \u201cNo\u201d otherwise. -----Explanation of Sample Input----- In the first sample, Yraglac can checkmate his opponent by moving his rook to the bottom right square. In the second sample, there is no single move that will checkmate his opponent. -----Examples----- Sample Input: ........ ........ ........ ........ .....K.k ........ ........ R....... Sample Output: Yes\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nChess has been a long time passion of Yraglac. He spents at least an hour per day playing chess matches online or reading chess tactics books. The game is played by two players on an $8 \\times 8$ grid, with each player taking turns to move a piece.\n\nIn this problem, we will consider a simplified variant of chess consisting of two kinds of pieces: kings and rooks. Kings can move one square in any direction while rooks can move any number of squares up/down or left/right. Pieces can either move to an unoccupied square or to a square occupied by an opponent\u2019s piece, which is captured and removed from play. A piece is threatened when an opponent\u2019s piece is able to capture the piece in a single move. It is illegal to move one own\u2019s king to a position where it is threatened (but it is legal to do so for a rook).\n\nA player is considered to be in checkmate when it is their turn, their king is threatened, and all possible moves will result in the king still being threatened.\n\nYraglac is a skilled player and has managed to reach a situation where he has one king and one rook, while his opponent only has one king. Given that it is Yraglac\u2019s turn, can he checkmate his opponent in a single move?\n\n-----Input-----\nThe input consists of a single test case representing a chessboard. It will consist of eight lines with eight characters each, where \u201cR\u201d represents Yraglac\u2019s rook, \u201cK\u201d represents Yraglac\u2019s king, \u201ck\u201d represents the opponent\u2019s king, and \u201c.\u201d represents an empty square. It is guaranteed that Yraglac will have exactly one king and one rook, while his opponent will only have one king. It is also guaranteed that no king will be threatened.\n\n-----Output-----\nOutput \u201cYes\u201d if Yraglac can checkmate his opponent in a single move, or \u201cNo\u201d otherwise.\n\n-----Explanation of Sample Input-----\nIn the first sample, Yraglac can checkmate his opponent by moving his rook to the bottom right square. In the second sample, there is no single move that will checkmate his opponent.\n\n-----Examples-----\nSample Input:\n........\n........\n........\n........\n.....K.k\n........\n........\nR.......\nSample Output:\nYes\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are playing hide-and-go-seek in a forest with Belle. The forest has one tree at each of the positive integer lattice points. That is, there is a tree at every point $(x,y)$ where $x$ and $y$ are both positive integers. You may consider each tree as a point. A logging company has cut down all of the trees in some axis-aligned rectangle, including those on the boundary of the rectangle. You are standing at $(0,0)$ and Belle is standing at $(x_ b,y_ b)$. You can see Belle if and only if there is no tree blocking your line of sight to Belle. If there is a tree at $(x_ b,y_ b)$, Belle will make it easier for you to find her by standing on the side of the tree facing your location. For example, suppose that Belle is standing at $(2,6)$. If the trees in the rectangle with corners at $(1,1)$ and $(5,4)$ are cut down (blue rectangle in figure), then you can see Belle. However, if the rectangle was at $(3,5)$ and $(5,7)$ (red rectangle in figure), then the tree at $(1,3)$ would be in the way. Given the rectangle and Belle s location, can you see her \n-----Input----- The first line of input contains two integer $x_ b$ and $y_ b$\u00a0($1 \\leq x_ b,y_ b \\leq 10^{12}$), which are the coordinates that Belle is standing on. The second line of input contains four integers $x_1$, $y_1$, $x_2$ and $y_2$\u00a0($1 \\leq x_1 \\leq x_2 \\leq 10^{12}$ and $1 \\leq y_1 \\leq y_2 \\leq 10^{12}$), which specify two opposite corners of the rectangle at $(x_1, y_1)$ and $(x_2, y_2)$. -----Output----- If you can see Belle, display Yes. Otherwise, display No and the coordinates of the closest tree that is blocking your view. -----Examples----- Sample Input 1: 2 6 1 1 5 4 Sample Output 1: Yes Sample Input 2: 2 6 3 5 5 7 Sample Output 2: No 1 3\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are playing hide-and-go-seek in a forest with Belle. The forest has one tree at each of the positive integer lattice points. That is, there is a tree at every point $(x,y)$ where $x$ and $y$ are both positive integers. You may consider each tree as a point. A logging company has cut down all of the trees in some axis-aligned rectangle, including those on the boundary of the rectangle.\n\nYou are standing at $(0,0)$ and Belle is standing at $(x_ b,y_ b)$. You can see Belle if and only if there is no tree blocking your line of sight to Belle. If there is a tree at $(x_ b,y_ b)$, Belle will make it easier for you to find her by standing on the side of the tree facing your location.\n\nFor example, suppose that Belle is standing at $(2,6)$. If the trees in the rectangle with corners at $(1,1)$ and $(5,4)$ are cut down (blue rectangle in figure), then you can see Belle. However, if the rectangle was at $(3,5)$ and $(5,7)$ (red rectangle in figure), then the tree at $(1,3)$ would be in the way.\n\nGiven the rectangle and Belle\u2019s location, can you see her?\n\n-----Input-----\nThe first line of input contains two integer $x_ b$ and $y_ b$\u00a0($1 \\leq x_ b,y_ b \\leq 10^{12}$), which are the coordinates that Belle is standing on.\n\nThe second line of input contains four integers $x_1$, $y_1$, $x_2$ and $y_2$\u00a0($1 \\leq x_1 \\leq x_2 \\leq 10^{12}$ and $1 \\leq y_1 \\leq y_2 \\leq 10^{12}$), which specify two opposite corners of the rectangle at $(x_1, y_1)$ and $(x_2, y_2)$.\n\n-----Output-----\nIf you can see Belle, display Yes.\n\nOtherwise, display No and the coordinates of the closest tree that is blocking your view.\n\n-----Examples-----\nSample Input 1:\n2 6\n1 1 5 4\nSample Output 1:\nYes\n\nSample Input 2:\n2 6\n3 5 5 7\nSample Output 2:\nNo\n1 3\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given a room represented by a grid, and a laser and sensor, find the best place to place a mirror to reflect the laser to the sensor. \n-----Input----- The first line of the input contains three integers: $n$, the size of the room, $c$, the column number of the laser ($1\\leq c\\leq n$), and $r$, the row number of the sensor ($1\\leq r\\leq n$). This is followed by $n$ lines, each containing $n$ characters separated by spaces. The character . represents an empty space, the character \\ represents a mirror oriented NW/SE and the character / represents a mirror oriented NE/SW. You may assume $1\\leq n\\leq 2000$ and $1\\leq r,c\\leq n$. -----Output----- The output should consist of the string YES if the laser can be made to hit the sensor with the addition of at most one mirror, or the string NO otherwise. -----Examples----- Sample Input: 5 2 3 . . . . . . . . . . . . \\ . . . \\ . . . . . . . . Sample Output: NO\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nNathaniel collects rare gems and minerals, and has decided he has to protect his valuable collection from thieves. He is installing an electric eye system, in which he shines a laser into the room with his collection, and the laser will hit a sensor as long as no one steps in a spot that the laser crosses. Unfortunately, he spent most of his money on his collection, so he has only one laser and one sensor, and some mirrors. He has installed the mirrors at various locations in the room, at $45$ degree angles to the walls. At the point you have been called in to help, he has only one more mirror left to install, and he wants to know if there is any way to place it such that the laser will reach the sensor (as long as no one is in its way).\n\nWe will assume that the room is always square, the laser is always in the northern wall pointing south, and the sensor is mounted on the eastern wall, such that the laser must hit it from the west. We will also assume that the interior of the room can be represented by a grid, and that all mirrors (including the one to be added) are placed at the center of grid cells, at $45$ degrees with respect to the grid axis, and that the laser and sensor are at the center of their respective column/row of the grid.\n\n-----Input-----\nThe first line of the input contains three integers: $n$, the size of the room, $c$, the column number of the laser ($1\\leq c\\leq n$), and $r$, the row number of the sensor ($1\\leq r\\leq n$). This is followed by $n$ lines, each containing $n$ characters separated by spaces. The character . represents an empty space, the character \\ represents a mirror oriented NW/SE and the character / represents a mirror oriented NE/SW. You may assume $1\\leq n\\leq 2000$ and $1\\leq r,c\\leq n$.\n\n-----Output-----\nThe output should consist of the string YES if the laser can be made to hit the sensor with the addition of at most one mirror, or the string NO otherwise.\n\n-----Examples-----\nSample Input:\n5 2 3\n. . . . .\n. . . . .\n. . \\ . .\n. \\ . . .\n. . . . .\nSample Output:\nNO\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Find the maximum number of weights you can reveal after asking your friend to give you exactly $k$ weights with the total mass $m$. \n-----Input----- The first line contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of weights. The second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$)\u00a0\u2014 the masses of the weights. -----Output----- Print the maximum number of weights you can learn the masses for after making a single query. -----Examples----- Input 4 1 4 2 2 Output 2 Input 6 1 2 4 4 4 9 Output 2 -----Note----- In the first example we can ask for a subset of two weights with total mass being equal to $4$, and the only option is to get $\\{2, 2\\}$. Another way to obtain the same result is to ask for a subset of two weights with the total mass of $5$ and get $\\{1, 4\\}$. It is easy to see that the two remaining weights have mass of $2$ grams each. In the second example we can ask for a subset of two weights with total mass being $8$, and the only answer is $\\{4, 4\\}$. We can prove it is not possible to learn masses for three weights in one query, but we won't put the proof here.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou have a set of $n$ weights. You know that their masses are $a_1$, $a_2$, ..., $a_n$ grams, but you don't know which of them has which mass. You can't distinguish the weights.\n\nHowever, your friend does know the mass of each weight. You can ask your friend to give you exactly $k$ weights with the total mass $m$ (both parameters $k$ and $m$ are chosen by you), and your friend will point to any valid subset of weights, if it is possible.\n\nYou are allowed to make this query only once. Find the maximum possible number of weights you can reveal after this query.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of weights.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 100$)\u00a0\u2014 the masses of the weights.\n\n\n-----Output-----\n\nPrint the maximum number of weights you can learn the masses for after making a single query.\n\n\n-----Examples-----\nInput\n4\n1 4 2 2\n\nOutput\n2\n\nInput\n6\n1 2 4 4 4 9\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example we can ask for a subset of two weights with total mass being equal to $4$, and the only option is to get $\\{2, 2\\}$.\n\nAnother way to obtain the same result is to ask for a subset of two weights with the total mass of $5$ and get $\\{1, 4\\}$. It is easy to see that the two remaining weights have mass of $2$ grams each.\n\nIn the second example we can ask for a subset of two weights with total mass being $8$, and the only answer is $\\{4, 4\\}$. We can prove it is not possible to learn masses for three weights in one query, but we won't put the proof here.\n\"\"\"\ndef code():"
}