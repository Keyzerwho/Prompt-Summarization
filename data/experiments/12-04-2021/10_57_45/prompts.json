{
    "0": "Python 3\n\"\"\"\n You are given an integer m. Let M = 2^m - 1. You are also given a set of n integers denoted as the set T. The integers will be provided in base 2 as n binary strings of length m. A set of integers S is called \"good\" if the following hold.   If a \u2208 S, then [Image].  If a, b \u2208 S, then a \u2227 b \u2208 S                                                                                                                                                                                       ld;dr: Count the number of good sets S, modulo 10^9 + 7.\n-----Input----- The first line will contain two integers m and n (1 \u2264 m \u2264 1 000, 1 \u2264 n \u2264 min(2^{m}, 50)). The next n lines will contain the elements of T. Each line will contain exactly m zeros and ones. Elements of T will be distinct. -----Output----- Print a single integer, the number of good sets modulo 10^9 + 7.  -----Examples----- Input 5 3 11010 00101 11000 Output 4 Input 30 2 010101010101010010101010101010 110110110110110011011011011011 Output 860616440 -----Note----- An example of a valid set S is {00000, 00101, 00010, 00111, 11000, 11010, 11101, 11111}.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given an integer m.\n\nLet M = 2^{m} - 1.\n\nYou are also given a set of n integers denoted as the set T. The integers will be provided in base 2 as n binary strings of length m.\n\nA set of integers S is called \"good\" if the following hold.   If $a \\in S$, then [Image].  If $a, b \\in S$, then $a \\text{AND} b \\in S$  $T \\subseteq S$  All elements of S are less than or equal to M. \n\nHere, $XOR$ and $\\text{AND}$ refer to the bitwise XOR and bitwise AND operators, respectively.\n\nCount the number of good sets S, modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line will contain two integers m and n (1 \u2264 m \u2264 1 000, 1 \u2264 n \u2264 min(2^{m}, 50)).\n\nThe next n lines will contain the elements of T. Each line will contain exactly m zeros and ones. Elements of T will be distinct.\n\n\n-----Output-----\n\nPrint a single integer, the number of good sets modulo 10^9 + 7. \n\n\n-----Examples-----\nInput\n5 3\n11010\n00101\n11000\n\nOutput\n4\n\nInput\n30 2\n010101010101010010101010101010\n110110110110110011011011011011\n\nOutput\n860616440\n\n\n\n-----Note-----\n\nAn example of a valid set S is {00000, 00101, 00010, 00111, 11000, 11010, 11101, 11111}.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given N and a prime number M. Find the number of the sets of bowls of ramen that satisfy these conditions, disregarding order, modulo M. Since she is in extreme hunger, ordering any number of bowls of ramen is fine. -----Constraints-----  - 2 \\leq N \\leq 3000  - 10^8 \\leq M \\leq 10^9 + 9  - N is an integer.  - M is a prime number. -----Subscores-----  - 600 points will be awarded for passing the test set satisfying N \n-----Input----- Input is given from Standard Input in the following format: N M -----Output----- Print the number of the sets of bowls of ramen that satisfy the conditions, disregarding order, modulo M. -----Sample Input----- 2 1000000007 -----Sample Output----- 2 Let the two kinds of toppings be A and B. Four types of ramen can be ordered: \"no toppings\", \"with A\", \"with B\" and \"with A, B\". There are two sets of ramen that satisfy the conditions:  - The following three ramen: \"with A\", \"with B\", \"with A, B\".  - Four ramen, one for each type.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nIn \"Takahashi-ya\", a ramen restaurant, basically they have one menu: \"ramen\", but N kinds of toppings are also offered. When a customer orders a bowl of ramen, for each kind of topping, he/she can choose whether to put it on top of his/her ramen or not. There is no limit on the number of toppings, and it is allowed to have all kinds of toppings or no topping at all. That is, considering the combination of the toppings, 2^N types of ramen can be ordered.\nAkaki entered Takahashi-ya. She is thinking of ordering some bowls of ramen that satisfy both of the following two conditions:\n - Do not order multiple bowls of ramen with the exactly same set of toppings.\n - Each of the N kinds of toppings is on two or more bowls of ramen ordered.\nYou are given N and a prime number M. Find the number of the sets of bowls of ramen that satisfy these conditions, disregarding order, modulo M. Since she is in extreme hunger, ordering any number of bowls of ramen is fine.\n\n-----Constraints-----\n - 2 \\leq N \\leq 3000\n - 10^8 \\leq M \\leq 10^9 + 9\n - N is an integer.\n - M is a prime number.\n\n-----Subscores-----\n - 600 points will be awarded for passing the test set satisfying N \u2264 50.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\n\n-----Output-----\nPrint the number of the sets of bowls of ramen that satisfy the conditions, disregarding order, modulo M.\n\n-----Sample Input-----\n2 1000000007\n\n-----Sample Output-----\n2\n\nLet the two kinds of toppings be A and B. Four types of ramen can be ordered: \"no toppings\", \"with A\", \"with B\" and \"with A, B\". There are two sets of ramen that satisfy the conditions:\n - The following three ramen: \"with A\", \"with B\", \"with A, B\".\n - Four ramen, one for each type.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Fox Ciel studies number theory. She thinks a non-empty set S contains non-negative integers is perfect if and only if for any $a, b \\in S$ (a can be equal to b), $(a \\text{xor} b) \\in S$. Where operation xor means exclusive or operation (http://en.wikipedia.org/wiki/Exclusive_or). Please calculate the number of perfect sets consisting of integers not greater than k. The answer can be very large, so print it modulo 1000000007 (10^9 + 7). \n-----Input----- The first line contains an integer k (0 \u2264 k \u2264 10^9). -----Output----- Print a single integer \u2014 the number of required sets modulo 1000000007 (10^9 + 7). -----Examples----- Input 1 Output 2 Input 2 Output 3 Input 3 Output 5 Input 4 Output 6 -----Note----- In example 1, there are 2 such sets: {0} and {0, 1}. Note that {1} is not a perfect set since 1 xor 1 = 0 and {1} doesn't contain zero. In example 4, there are 6 such sets: {0}, {0, 1}, {0, 2}, {0, 3}, {0, 4} and {0, 1, 2, 3}.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nFox Ciel studies number theory.\n\nShe thinks a non-empty set S contains non-negative integers is perfect if and only if for any $a, b \\in S$ (a can be equal to b), $(a \\text{xor} b) \\in S$. Where operation xor means exclusive or operation (http://en.wikipedia.org/wiki/Exclusive_or).\n\nPlease calculate the number of perfect sets consisting of integers not greater than k. The answer can be very large, so print it modulo 1000000007 (10^9 + 7).\n\n\n-----Input-----\n\nThe first line contains an integer k (0 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the number of required sets modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n1\n\nOutput\n2\n\nInput\n2\n\nOutput\n3\n\nInput\n3\n\nOutput\n5\n\nInput\n4\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn example 1, there are 2 such sets: {0} and {0, 1}. Note that {1} is not a perfect set since 1 xor 1 = 0 and {1} doesn't contain zero.\n\nIn example 4, there are 6 such sets: {0}, {0, 1}, {0, 2}, {0, 3}, {0, 4} and {0, 1, 2, 3}.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Jimmy is performing in ByteLand today! Anthony the Ant is a huge fan of Jimmy's music, so he can't wait to get to the concert. ByteLand consists of of $N$ intersections and $M$ roads. Every road is bidirectional and connects two distinct intersections. Anthony is currently on intersection $s$ and the concert is being held at intersection $t$. Anthony must get to the concert in $T$ seconds and he can travel at $1$ meter/second. Unfortunately for Anthony, he has a huge fear of spiders and ByteLand is full of spiders. Spiders reside at certain intersections in ByteLand. Anthony will choose a path from $s$ to $t$ that maximizes $D$, the minimum distance between any intersection on the path and any spider, such that the path can be travelled in no more than $T$ seconds. \n-----Input----- The first line contains three integers $N$ ($2\\leq N\\leq 100000$), $M$ ($1\\leq M\\leq \\min (200000, n(n-1)/2)$), and $T$ ($1\\leq T\\leq 10^9$). Each of the next $M$ lines specify the roads. A road is described by three integers $u, v$ ($0\\leq u, v\\leq N-1$ and $u\\neq v$) and $d$ ($1\\leq d\\leq 10000$), which means that a $d$ meters long road connects intersections $u$ and $v$. It is guaranteed that at most one road connect any two intersections, and that there exists a path between any two intersections. The next line contains $s, t$ ($0\\leq s, t\\leq N-1$ and $s\\neq t$, representing Anthony\u2019s current location and the location of the concert. You may assume Anthony can always travel from $s$ to $t$ in no more than $T$ seconds. The last line contains a integer $1\\leq K\\leq N$, denoting the number of intersections occupied by spiders, followed by $K$ integers $0\\leq a_ i\\leq N-1$ denoting the intersections with spiders. -----Output----- Print the maximum $D$ (as defined earlier) for the path Anthony takes. -----Examples----- Sample Input: 4 4 3000 0 1 1 1 3 1 2 0 2018 2 3 42 0 3 1 1 Sample Output: 1\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nJimmy is performing in ByteLand today! Anthony the Ant is a huge fan of Jimmy\u2019s music, so he can\u2019t wait to get to the concert.\n\nByteLand consists of of $N$ intersections and $M$ roads. Every road is bidirectional and connects two distinct intersections. Anthony is currently on intersection $s$ and the concert is being held at intersection $t$. Anthony must get to the concert in $T$ seconds and he can travel at $1$ meter/second.\n\nUnfortunately for Anthony, he has a huge fear of spiders and ByteLand is full of spiders. Spiders reside at certain intersections in ByteLand. Anthony will choose a path from $s$ to $t$ that maximizes $D$, the minimum distance between any intersection on the path and any spider, such that the path can be travelled in no more than $T$ seconds.\n\n-----Input-----\nThe first line contains three integers $N$ ($2\\leq N\\leq 100000$), $M$ ($1\\leq M\\leq \\min (200000, n(n-1)/2)$), and $T$ ($1\\leq T\\leq 10^9$).\n\nEach of the next $M$ lines specify the roads. A road is described by three integers $u, v$ ($0\\leq u, v\\leq N-1$ and $u\\neq v$) and $d$ ($1\\leq d\\leq 10000$), which means that a $d$ meters long road connects intersections $u$ and $v$. It is guaranteed that at most one road connect any two intersections, and that there exists a path between any two intersections.\n\nThe next line contains $s, t$ ($0\\leq s, t\\leq N-1$ and $s\\neq t$, representing Anthony\u2019s current location and the location of the concert. You may assume Anthony can always travel from $s$ to $t$ in no more than $T$ seconds.\n\nThe last line contains a integer $1\\leq K\\leq N$, denoting the number of intersections occupied by spiders, followed by $K$ integers $0\\leq a_ i\\leq N-1$ denoting the intersections with spiders.\n\n-----Output-----\nPrint the maximum $D$ (as defined earlier) for the path Anthony takes.\n\n-----Examples-----\nSample Input:\n4 4 3000\n0 1 1\n1 3 1\n2 0 2018\n2 3 42\n0 3\n1 1\nSample Output:\n1\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a group of $n$ individuals and a set of numbers that describe each individual. Help Lily come up with a proof that shows that everyone in this group is either directly or indirectly connected by numbers, or determine that this is not possible. \n-----Input----- The input consists of:  - One line with an integer $n$ ($2 \\leq n \\leq 2\\cdot 10^5$), the number of individuals in the group. The individuals are numbered from $1$ to $n$.  - $n$ lines, describing the individuals in the group. The $i$th such line starts with an integer $m_ i$ ($1 \\leq m_ i \\leq 2\\cdot 10^5$), the number of numbers that describe individual $i$. The remainder of the line has $m_ i$ distinct integers $d_{i,1},\\ldots ,d_{i,m_ i}$ ($1 \\leq d_{i,j} \\leq 10^9$ for each $j$), the set of numbers that describe individual $i$. It is guaranteed that the sum over all $m_ i$ is at most $2\\cdot 10^5$. -----Output----- Output a proof in the form of $n-1$ lines, each of which contains three integers $p$, $q$ and $r$, where $p$ and $q$ are distinct individuals that are both described by the number $r$. Using only these relations, it must be possible to show that any pair of individuals in the group are connected either directly or indirectly. If no such proof exists, output \u201cimpossible\u201d. If there are multiple proofs, you may output any one of them. -----Examples----- Sample Input: 6 2 17 10 1 5 2 10 22 3 17 22 9 2 17 8 3 9 22 16 Sample Output: impossible\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nLily is fascinated by numbers. She believes the whole world revolves around them, and that everything is connected by numbers. Her friends, Alice, Bob, Charlie and Diane, are not convinced. But she gives them an example:  Alice lives in house number 25 on her street, but that is exactly Bob\u2019s age. Bob is born on June 4th, and Charlie was his parents\u2019 fourth child. Finally, Diane has five fingers on her left hand, which happens to be the same as the number of toes that Bob has on his right foot! \n\nThis shows that her friends are all connected\u2014either directly or indirectly\u2014by numbers. But she still has to convince her family as well as her coworkers.\n\nGiven a group of $n$ individuals, and a set of numbers that describe each individual, help Lily come up with a proof that shows that everyone in this group is either directly or indirectly connected by numbers, or determine that this is not possible.\n\n-----Input-----\nThe input consists of:\n - One line with an integer $n$ ($2 \\leq n \\leq 2\\cdot 10^5$), the number of individuals in the group. The individuals are numbered from $1$ to $n$.\n - $n$ lines, describing the individuals in the group.\n\nThe $i$th such line starts with an integer $m_ i$ ($1 \\leq m_ i \\leq 2\\cdot 10^5$), the number of numbers that describe individual $i$.\n\nThe remainder of the line has $m_ i$ distinct integers $d_{i,1},\\ldots ,d_{i,m_ i}$ ($1 \\leq d_{i,j} \\leq 10^9$ for each $j$), the set of numbers that describe individual $i$.\n\nIt is guaranteed that the sum over all $m_ i$ is at most $2\\cdot 10^5$.\n\n-----Output-----\nOutput a proof in the form of $n-1$ lines, each of which contains three integers $p$, $q$ and $r$, where $p$ and $q$ are distinct individuals that are both described by the number $r$. Using only these relations, it must be possible to show that any pair of individuals in the group are connected either directly or indirectly.\n\nIf no such proof exists, output \u201cimpossible\u201d. If there are multiple proofs, you may output any one of them.\n\n-----Examples-----\nSample Input:\n6\n2 17 10\n1 5\n2 10 22\n3 17 22 9\n2 17 8\n3 9 22 16\nSample Output:\nimpossible\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You have N gemstones labeled 1 through N. You can perform the following operation any number of times (possibly zero). - Select a positive integer x, and smash all the gems labeled with multiples of x. Then, for each i, if the gem labeled i remains without getting smashed, you will receive a_i yen (the currency of Japan). However, a_i may be negative, in which case you will be charged money. By optimally performing the operation, how much yen can you earn? \n-----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the maximum amount of money that can be earned. -----Sample Input----- 6 1 2 -6 4 5 3 -----Sample Output----- 12 It is optimal to smash Gem 3 and 6.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nWe have N gemstones labeled 1 through N.\nYou can perform the following operation any number of times (possibly zero).\n - Select a positive integer x, and smash all the gems labeled with multiples of x.\nThen, for each i, if the gem labeled i remains without getting smashed, you will receive a_i yen (the currency of Japan).\nHowever, a_i may be negative, in which case you will be charged money.\nBy optimally performing the operation, how much yen can you earn?\n\n-----Constraints-----\n - All input values are integers.\n - 1 \\leq N \\leq 100\n - |a_i| \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\n\n-----Output-----\nPrint the maximum amount of money that can be earned.\n\n-----Sample Input-----\n6\n1 2 -6 4 5 3\n\n-----Sample Output-----\n12\n\nIt is optimal to smash Gem 3 and 6.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n For each of next $n$ days Vasya knows $a_i$ number of units of garbage he will produce on the $i$-th day. Each unit of garbage must be disposed of either on the day it was produced or on the next day. Vasya disposes of garbage by putting it inside a bag and dropping the bag into a garbage container. Each bag can contain up to $k$ units of garbage. It is allowed to compose and drop multiple bags into a garbage container in a single day. Being economical, Vasya wants to use as few bags as possible. You are to compute the minimum number of bags Vasya needs to dispose of all of his garbage for the given $n$ days. No garbage should be left after the $n$-th day. 0 <= a_i <= 1000 # \n-----Input----- The first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 2\\cdot10^5, 1 \\le k \\le 10^9$) \u2014 number of days to consider and bag's capacity. The second line contains $n$ space separated integers $a_i$ ($0 \\le a_i \\le 10^9$) \u2014 the number of units of garbage produced on the $i$-th day. -----Output----- Output a single integer \u2014 the minimum number of bags Vasya needs to dispose of all garbage. Each unit of garbage should be disposed on the day it was produced or on the next day. No garbage can be left after the $n$-th day. In a day it is allowed to compose and drop multiple bags. -----Examples----- Input 3 2 3 2 1 Output 3 Input 5 1 1000000000 1000000000 1000000000 1000000000 1000000000 Output 5000000000 Input 3 2 1 0 1 Output 2 Input 4 4 2 8 4 1 Output 4\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nEnough is enough. Too many times it happened that Vasya forgot to dispose of garbage and his apartment stank afterwards. Now he wants to create a garbage disposal plan and stick to it.\n\nFor each of next $n$ days Vasya knows $a_i$ \u2014 number of units of garbage he will produce on the $i$-th day. Each unit of garbage must be disposed of either on the day it was produced or on the next day. Vasya disposes of garbage by putting it inside a bag and dropping the bag into a garbage container. Each bag can contain up to $k$ units of garbage. It is allowed to compose and drop multiple bags into a garbage container in a single day.\n\nBeing economical, Vasya wants to use as few bags as possible. You are to compute the minimum number of bags Vasya needs to dispose of all of his garbage for the given $n$ days. No garbage should be left after the $n$-th day.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 2\\cdot10^5, 1 \\le k \\le 10^9$) \u2014 number of days to consider and bag's capacity. The second line contains $n$ space separated integers $a_i$ ($0 \\le a_i \\le 10^9$) \u2014 the number of units of garbage produced on the $i$-th day.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the minimum number of bags Vasya needs to dispose of all garbage. Each unit of garbage should be disposed on the day it was produced or on the next day. No garbage can be left after the $n$-th day. In a day it is allowed to compose and drop multiple bags.\n\n\n-----Examples-----\nInput\n3 2\n3 2 1\n\nOutput\n3\n\nInput\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\nOutput\n5000000000\n\nInput\n3 2\n1 0 1\n\nOutput\n2\n\nInput\n4 4\n2 8 4 1\n\nOutput\n4\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a number and you have to determine how much weight Wallace the Weightlifting Walrus will have to lift. \n-----Input----- The first line of the input contains the number of plates $n$ ($1 \\leq n \\leq 1000$). Each of the following $n$ lines contains one positive integer less than or equal to $1000$, denoting the weight of each plate. -----Output----- Output one integer, the combined weight closest to $1000$. -----Examples----- Sample Input: 4 900 500 498 4 Sample Output: 1002\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nWallace the Weightlifting Walrus is training for a contest where it will have to lift $1000$ kg. Wallace has some weight plates lying around, possibly of different weights, and its goal is to add some of the plates to a bar so that it can train with a weight as close as possible to $1000$ kg.\n\nIn case there exist two such numbers which are equally close to $1000$ (e.g. $998$ and $1002$), Wallace will pick the greater one (in this case $1002$).\n\nHelp Wallace the Weightlifting Walrus and tell it which weight it will have to lift.\n\n-----Input-----\nThe first line of the input contains the number of plates $n$ ($1 \\leq n \\leq 1000$). Each of the following $n$ lines contains one positive integer less than or equal to $1000$, denoting the weight of each plate.\n\n-----Output-----\nOutput one integer, the combined weight closest to $1000$.\n\n-----Examples-----\nSample Input:\n4\n900\n500\n498\n4\nSample Output:\n1002\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n A monster is attacking the Cyberland! Master Yang, a braver, is going to beat the monster. Yang and the monster each have 3 attributes: hitpoints (HP), offensive power (ATK) and defensive power (DEF). During the battle, every second the monster's HP decrease by max(0, ATK_{Y} - DEF_{M}), while Yang's HP decreases by max(0, ATK_{M} - DEF_{Y}), where index Y denotes Master Yang and index M denotes monster. Both decreases happen simultaneously Once monster's HP   0 and the same time Master Yang's HP > 0, Master Yang wins. Master Yang can buy attributes from the magic shop of Cyberland: h bitcoins per HP, a bitcoins per ATK, and d bitcoins per DEF. Now Master Yang wants to know the minimum number of bitcoins he can spend in order to win.\n-----Input----- The first line contains three integers HP_{Y}, ATK_{Y}, DEF_{Y}, separated by a space, denoting the initial HP, ATK and DEF of Master Yang. The second line contains three integers HP_{M}, ATK_{M}, DEF_{M}, separated by a space, denoting the HP, ATK and DEF of the monster. The third line contains three integers h, a, d, separated by a space, denoting the price of 1\u00a0HP, 1\u00a0ATK and 1\u00a0DEF. All numbers in input are integer and lie between 1 and 100 inclusively. -----Output----- The only output line should contain an integer, denoting the minimum bitcoins Master Yang should spend in order to win. -----Examples----- Input 1 2 1 1 100 1 1 100 100 Output 99 Input 100 100 100 1 1 1 1 1 1 Output 0 -----Note----- For the first sample, prices for ATK and DEF are extremely high. Master Yang can buy 99 HP, then he can beat the monster with 1 HP left. For the second sample, Master Yang is strong enough to beat the monster, so he doesn't need to buy anything.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA monster is attacking the Cyberland!\n\nMaster Yang, a braver, is going to beat the monster. Yang and the monster each have 3 attributes: hitpoints (HP), offensive power (ATK) and defensive power (DEF).\n\nDuring the battle, every second the monster's HP decrease by max(0, ATK_{Y} - DEF_{M}), while Yang's HP decreases by max(0, ATK_{M} - DEF_{Y}), where index Y denotes Master Yang and index M denotes monster. Both decreases happen simultaneously Once monster's HP \u2264 0 and the same time Master Yang's HP > 0, Master Yang wins.\n\nMaster Yang can buy attributes from the magic shop of Cyberland: h bitcoins per HP, a bitcoins per ATK, and d bitcoins per DEF.\n\nNow Master Yang wants to know the minimum number of bitcoins he can spend in order to win.\n\n\n-----Input-----\n\nThe first line contains three integers HP_{Y}, ATK_{Y}, DEF_{Y}, separated by a space, denoting the initial HP, ATK and DEF of Master Yang.\n\nThe second line contains three integers HP_{M}, ATK_{M}, DEF_{M}, separated by a space, denoting the HP, ATK and DEF of the monster.\n\nThe third line contains three integers h, a, d, separated by a space, denoting the price of 1\u00a0HP, 1\u00a0ATK and 1\u00a0DEF.\n\nAll numbers in input are integer and lie between 1 and 100 inclusively.\n\n\n-----Output-----\n\nThe only output line should contain an integer, denoting the minimum bitcoins Master Yang should spend in order to win.\n\n\n-----Examples-----\nInput\n1 2 1\n1 100 1\n1 100 100\n\nOutput\n99\n\nInput\n100 100 100\n1 1 1\n1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nFor the first sample, prices for ATK and DEF are extremely high. Master Yang can buy 99 HP, then he can beat the monster with 1 HP left.\n\nFor the second sample, Master Yang is strong enough to beat the monster, so he doesn't need to buy anything.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a broken clock. You know, that it is supposed to show time in 12- or 24-hours HH:MM format. In 12-hours format hours change from 1 to 12, while in 24-hours it changes from 0 to 23. In both formats minutes change from 0 to 59. You are given a time in format HH:MM that is currently displayed on the broken clock. Your goal is to change minimum number of digits in order to make clocks display the correct time in the given format. For example, if 00:99 is displayed, it is enough to replace the second 9 with 3 in order to get 00:39 that is a correct time in 24-hours format. However, to make 00:99 correct in 12-hours format, one has to change at least two digits. Additionally to the first change one can replace the second 0 with 1 and obtain 01:39.\n-----Input----- The first line of the input contains one integer 12 or 24, that denote 12-hours or 24-hours format respectively. The second line contains the time in format HH:MM, that is currently displayed on the clock. First two characters stand for the hours, while next two show the minutes. -----Output----- The only line of the output should contain the time in format HH:MM that is a correct time in the given format. It should differ from the original in as few positions as possible. If there are many optimal solutions you can print any of them. -----Examples----- Input 24 17:30 Output 17:30 Input 12 17:30 Output 07:30 Input 24 99:99 Output 09:09\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a broken clock. You know, that it is supposed to show time in 12- or 24-hours HH:MM format. In 12-hours format hours change from 1 to 12, while in 24-hours it changes from 0 to 23. In both formats minutes change from 0 to 59.\n\nYou are given a time in format HH:MM that is currently displayed on the broken clock. Your goal is to change minimum number of digits in order to make clocks display the correct time in the given format.\n\nFor example, if 00:99 is displayed, it is enough to replace the second 9 with 3 in order to get 00:39 that is a correct time in 24-hours format. However, to make 00:99 correct in 12-hours format, one has to change at least two digits. Additionally to the first change one can replace the second 0 with 1 and obtain 01:39.\n\n\n-----Input-----\n\nThe first line of the input contains one integer 12 or 24, that denote 12-hours or 24-hours format respectively.\n\nThe second line contains the time in format HH:MM, that is currently displayed on the clock. First two characters stand for the hours, while next two show the minutes.\n\n\n-----Output-----\n\nThe only line of the output should contain the time in format HH:MM that is a correct time in the given format. It should differ from the original in as few positions as possible. If there are many optimal solutions you can print any of them.\n\n\n-----Examples-----\nInput\n24\n17:30\n\nOutput\n17:30\n\nInput\n12\n17:30\n\nOutput\n07:30\n\nInput\n24\n99:99\n\nOutput\n09:09\n\"\"\"\ndef code():"
}