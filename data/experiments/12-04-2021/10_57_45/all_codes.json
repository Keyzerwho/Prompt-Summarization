{
    "0": "\n    m, n = [int(x) for x in input().split()]\n    T = [input() for _ in range(n)]\n    M = 2**m - 1\n    dp = [0]*(M+1)\n    dp[0] = 1\n    for i in range(1, M+1):\n        for t in T:\n            if i&t == t:\n                dp[i] += dp[i-t]\n    print(dp[M]%(10**9+7))\n",
    "1": "\n    m, n = map(int, input().split())\n    T = [input() for _ in range(n)]\n    M = 2**m - 1\n    dp = [0]*(M+1)\n    dp[0] = 1\n    for i in range(M+1):\n        for t in T:\n            if i&t == 0:\n                dp[i|t] += dp[i]\n    print(dp[M]%(10**9+7))\n",
    "2": "\n    n, m = map(int, input().split())\n    print(n*(n-1)//2 % m)\n",
    "3": "\n    n, m = map(int, input().split())\n    if n == 1:\n        print(1)\n    else:\n        print((m - 1) * (m - 2) % m)\n",
    "4": "\n    k = int(input())\n    if k == 0:\n        print(1)\n    else:\n        print(2**(k-1))\n",
    "5": "\n    k = int(input())\n    if k == 0:\n        print(1)\n    elif k == 1:\n        print(2)\n    else:\n        print((k-1)*(k-2) + 2)\n",
    "6": "\n    n, m, t = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    s, t = map(int, input().split())\n    k = int(input())\n    spiders = list(map(int, input().split()))\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    \n    # Get the distances between each road and each spider\n    distances = []\n    for i in range(m):\n        road = roads[i]\n        distances.append([])\n        for j in range(k):\n            spider = spiders[j]\n            distances[i].append(abs(road[0] - spider) + abs(road[1] - spider))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances.append(min(distances[i]))\n    \n    # Get the maximum distance between each road and each spider\n    max_distances = []\n    for i in range(m):\n        max_distances.append(max(distances[i]))\n    \n    # Get the minimum distance between each road and each spider\n    min_distances = []\n    for i in range(m):\n        min_distances",
    "7": "\n    n, m, t = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    s, t = map(int, input().split())\n    k = int(input())\n    spiders = list(map(int, input().split()))\n    # Write your code here\n    # To print results to the standard output you can use print\n    # Example: print \"Hello world!\"\n    ",
    "8": "\n    n = int(input())\n    d = []\n    for i in range(n):\n        d.append(set(map(int, input().split()[1:])))\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(d[i] & d[j]) > 0:\n                print(i+1, j+1, list(d[i] & d[j])[0])\n                return\n    print(\"impossible\")\n",
    "9": "\n    n = int(input())\n    d = []\n    for i in range(n):\n        d.append(set(map(int, input().split()[1:])))\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(d[i] & d[j]) > 0:\n                print(i+1, j+1, list(d[i] & d[j])[0])\n                return\n    print(\"impossible\")\n",
    "10": "\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i]*(i+1)\n    print(ans)",
    "11": "\n    # Get N\n    n = int(input())\n\n    # Get a_i\n    a_i = [int(x) for x in input().split()]\n\n    # Create a list of all multiples of a_i\n    multiples = []\n    for i in range(1, n + 1):\n        for j in range(n):\n            if i * j < n:\n                multiples.append(i * j)\n            else:\n                break\n\n    # Create a list of all a_i that are not multiples of a_i\n    non_multiples = []\n    for i in range(n):\n        if i not in multiples:\n            non_multiples.append(i)\n\n    # Create a list of all a_i that are not multiples of a_i\n    non_multiples_sum = []\n    for i in non_multiples:\n        non_multiples_sum.append(a_i[i])\n\n    # Return the sum of all a_i that are not multiples of a_i\n    return sum(non_multiples_sum)\n\nprint(code())",
    "12": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] > k:\n            res += 1\n            a[i] = a[i] - k\n        if a[i] > 0:\n            if a[i] > k:\n                res += 1\n                a[i] = a[i] - k\n            else:\n                a[i] = 0\n    for i in range(n):\n        if a[i] > 0:\n            res += 1\n    print(res)\n",
    "13": "\n    n, k = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] > k:\n            ans += 1\n            a[i] -= k\n        if a[i] > 0:\n            if a[i] > k:\n                ans += 1\n                a[i] -= k\n            else:\n                ans += 1\n    print(ans)\n",
    "14": "\n    n = int(input())\n    plates = []\n    for i in range(n):\n        plates.append(int(input()))\n    plates.sort()\n    weight = 0\n    for i in range(n):\n        weight += plates[i]\n        if weight > 1000:\n            weight -= plates[i]\n            break\n    print(weight)",
    "15": "\n    n = int(input())\n    plates = []\n    for i in range(n):\n        plates.append(int(input()))\n    plates.sort()\n    weight = 0\n    for i in range(n):\n        if weight + plates[i] <= 1000:\n            weight += plates[i]\n        else:\n            break\n    print(weight)\n",
    "16": "\n    yang = [int(x) for x in input().split()]\n    monster = [int(x) for x in input().split()]\n    price = [int(x) for x in input().split()]\n    hp = yang[0]\n    atk = yang[1]\n    defn = yang[2]\n    mhp = monster[0]\n    matk = monster[1]\n    mdef = monster[2]\n    h = price[0]\n    a = price[1]\n    d = price[2]\n    while hp > 0 and mhp > 0:\n        mhp -= max(0, atk - mdef)\n        hp -= max(0, matk - defn)\n    if hp > 0:\n        print(h*(hp-yang[0])+a*(atk-yang[1])+d*(defn-yang[2]))\n    else:\n        print(0)\n",
    "17": "\n    yang = list(map(int, input().split()))\n    monster = list(map(int, input().split()))\n    price = list(map(int, input().split()))\n    hp = yang[0]\n    atk = yang[1]\n    defn = yang[2]\n    mhp = monster[0]\n    matk = monster[1]\n    mdef = monster[2]\n    hp_price = price[0]\n    atk_price = price[1]\n    def_price = price[2]\n    while True:\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef:\n            hp -= matk\n            mhp -= atk\n        else:\n            mhp -= atk - mdef\n            hp -= matk\n        if hp <= 0:\n            print(hp_price * atk)\n            break\n        if mhp <= 0:\n            print(hp_price * atk - hp_price * atk)\n            break\n        if atk <= mdef",
    "18": "\n    #Getting the input\n    format = int(input())\n    time = input()\n    #Checking the format\n    if format == 12:\n        #Checking the time\n        if time[0] == \"0\":\n            time = time[1] + time[2:]\n        if int(time[0:2]) > 12:\n            time = str(int(time[0:2]) - 12) + time[2:]\n    else:\n        #Checking the time\n        if time[0] == \"0\":\n            time = time[1] + time[2:]\n        if int(time[0:2]) > 23:\n            time = str(int(time[0:2]) - 24) + time[2:]\n    #Printing the result\n    print(time)",
    "19": "\n    format = int(input())\n    time = input()\n    if format == 12:\n        if time[0] == '0':\n            time = time[1] + time[2:]\n        if int(time[0:2]) > 12:\n            time = str(int(time[0:2]) - 12) + time[2:]\n    else:\n        if time[0] == '1' and time[1] == '2':\n            time = '0' + time[2:]\n        if int(time[0:2]) > 23:\n            time = '0' + str(int(time[0:2]) - 24) + time[2:]\n    print(time)\n"
}