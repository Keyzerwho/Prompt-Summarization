{
    "0": "\n    n, k = map(int, input().split())\n    ip = []\n    for i in range(n):\n        ip.append(input())\n    ip.sort()\n    ip_set = set()\n    for i in range(n):\n        ip_set.add(ip[i])\n    if len(ip_set) < k:\n        print(\"-1\")\n    else:\n        print(\"255.255.255.0\")",
    "1": "\n    n, k = [int(x) for x in input().split()]\n    ip = []\n    for i in range(n):\n        ip.append([int(x) for x in input().split('.')])\n    ip.sort()\n    ip_bin = []\n    for i in range(n):\n        ip_bin.append([bin(x)[2:].zfill(8) for x in ip[i]])\n    ip_bin_str = []\n    for i in range(n):\n        ip_bin_str.append(''.join(ip_bin[i]))\n    ip_bin_str.sort()\n    ip_bin_str_count = []\n    for i in range(n):\n        ip_bin_str_count.append(ip_bin_str.count(ip_bin_str[i]))\n    if k > n:\n        print('-1')\n    else:\n        for i in range(n):\n            if ip_bin_str_count[i] == k:\n                print('.'.join([str(int(ip_bin_str[i][x:x+8], 2)) for x in range(0, 32, 8)]))\n                break\n        else:\n            print('-1')\n\nif __name__ == '__main__':\n    code()",
    "2": "\n    n, m = map(int, input().split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(m):\n        b.append(list(map(int, input().split())))\n    a.sort()\n    b.sort()\n    if n == 1 and m == 1:\n        print(\"YES\")\n        return\n    if n == 1:\n        if a[0][0] == b[0][0] and a[0][1] == b[0][1]:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n    if m == 1:\n        if a[0][0] == b[0][0] and a[0][1] == b[0][1]:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n    if a[0][0] == b[0][0] and a[0][1] == b[0][1]:\n        print(\"YES\")\n        return\n    if a[0][0] == b[1][0] and a[0][1] == b[1][1]:\n        print(\"YES\")\n        return\n    if a[1][0] == b[0][0] and a[1][1] == b[0][1]:\n        print(\"YES\")\n        return\n    if a[1][0] == b[1][0] and a[1][1] == b[1][1]:\n        print(\"YES\")\n        return\n    if a[0][0] == b[0][0] and a[1][0] == b[1][0]:\n        print(\"YES\")\n        return\n    if a[0][1] == b[0][1] and a[1][1] == b[1][1]:\n        print(\"YES\")\n        return\n    if a[0][0] == b[1][0] and a[1][0] == b[0][0]:\n        print(\"YES\")\n        return\n    if a[0][1] == b[1][1] and a[1][1] == b[0][1]:\n        print(\"YES\")\n        return\n    print(\"NO\")\n    return\n",
    "3": "\n    n, m = map(int, input().split())\n    x1, y1 = [], []\n    x2, y2 = [], []\n    for i in range(n):\n        x1.append(int(input()))\n        y1.append(int(input()))\n    for i in range(m):\n        x2.append(int(input()))\n        y2.append(int(input()))\n    if n == m == 1:\n        print(\"YES\")\n        return\n    if n == 1:\n        if x1[0] == x2[0] and y1[0] == y2[0]:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n    if m == 1:\n        if x1[0] == x2[0] and y1[0] == y2[0]:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n    for i in range(n):\n        for j in range(m):\n            if x1[i] == x2[j] and y1[i] == y2[j]:\n                print(\"YES\")\n                return\n    print(\"NO\")\n    return\n",
    "4": "\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    n = int(input())\n    roads = []\n    for i in range(n):\n        roads.append(list(map(int, input().split())))\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1, x2, y2)\n    #print(roads)\n    #print(x1, y1",
    "5": "\n    x1, y1 = map(int, input().split())\n    x2, y2 = map(int, input().split())\n    n = int(input())\n    roads = []\n    for i in range(n):\n        roads.append(list(map(int, input().split())))\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1, x2, y2)\n    # print(roads)\n    # print(x1, y1",
    "6": "\n    n = int(input())\n    beauty = 0\n    for i in range(n):\n        beauty += (i+1)^(i+1)\n    print(beauty)\n    for i in range(n):\n        print(i+1, end=\" \")",
    "7": "\n    n = int(input())\n    beauty = 0\n    for i in range(n):\n        beauty += (i ^ (i+1))\n    print(beauty)\n    print(*[i for i in range(n)])\n",
    "8": "\n    pass\n\nif __name__ == \"__main__\":\n    code()",
    "9": "\n    m, u, d = [float(x) for x in input().split()]\n    drinks = []\n    for i in range(d):\n        name, strength, size, price = input().split()\n        strength = float(strength)\n        size = float(size[1:])\n        price = float(price)\n        drinks.append((name, strength, size, price))\n    drinks.sort(key=lambda x: x[3])\n    drinks.sort(key=lambda x: x[1]/x[2], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1]/x[2]/x[3]/x[1], reverse=True)\n    drinks.sort(key=lambda x: x[1]/x[2]/x[3]/x[1]/x[2",
    "10": "\n    s = input()\n    t = input()\n    n = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            n += 1\n    print(n)\n    for i in range(n):\n        print(s[i], t[i])",
    "11": "\n    s = input()\n    t = input()\n    n = 0\n    while s != t:\n        if s.count('a') > t.count('a'):\n            s = s.replace('a', '', 1)\n            t = t.replace('b', '', 1)\n            n += 1\n        elif s.count('a') < t.count('a'):\n            s = s.replace('b', '', 1)\n            t = t.replace('a', '', 1)\n            n += 1\n        else:\n            if s.count('b') > t.count('b'):\n                s = s.replace('b', '', 1)\n                t = t.replace('a', '', 1)\n                n += 1\n            elif s.count('b') < t.count('b'):\n                s = s.replace('a', '', 1)\n                t = t.replace('b', '', 1)\n                n += 1\n            else:\n                s = s.replace('a', '', 1)\n                t = t.replace('b', '', 1)\n                n += 1\n    print(n)\n    for i in range(n):\n        print(s.index('a'), t.index('b'))\n        s = s.replace('a', '', 1)\n        t = t.replace('b', '', 1)\n",
    "12": "\n    n = int(input())\n    if n == 1:\n        print(0)\n        return\n    g = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        g[u-1].append(v-1)\n        g[v-1].append(u-1)\n    visited = [False]*n\n    def dfs(v):\n        visited[v] = True\n        for u in g[v]:\n            if not visited[u]:\n                dfs(u)\n    dfs(0)\n    if not all(visited):\n        print(-1)\n        return\n    cnt = 0\n    for i in range(n):\n        if len(g[i]) % 2 == 1:\n            cnt += 1\n    print(cnt-1 if cnt > 0 else 0)\n",
    "13": "\n    n = int(input())\n    graph = [[] for i in range(n)]\n    for i in range(n-1):\n        u, v = map(int, input().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    visited = [False]*n\n    def dfs(v):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(u)\n    dfs(0)\n    count = 0\n    for i in range(n):\n        if not visited[i]:\n            count += 1\n    if count == 0 or count % 2 == 1:\n        print(-1)\n    else:\n        print(count//2)\n",
    "14": "\n    Q, M, S, L = map(int, input().split())\n    if S > L:\n        print(S)\n    else:\n        print(L)\n\nif __name__ == '__main__':\n    code()",
    "15": "\n    Q, M, S, L = map(int, input().split())\n    if S > L:\n        print(S)\n    else:\n        print(L)\n",
    "16": "\n    n, m = map(int, input().split())\n    gnomes = list(map(int, input().split()))\n    gnomes.sort()\n    for i in range(1, n+1):\n        if i not in gnomes:\n            gnomes.insert(0, i)\n            break\n    print(*gnomes)\n",
    "17": "\n    n, m = map(int, input().split())\n    gnomes = []\n    for i in range(m):\n        gnomes.append(int(input()))\n    gnomes.sort()\n    for i in range(1, n+1):\n        if i not in gnomes:\n            print(i)\n            break",
    "18": "\n    n = int(input())\n    nodes = list(map(int, input().split()))\n    nodes.sort()\n    nodes.append(n+1)\n    result = 0\n    for i in range(n):\n        result += nodes[i+1] - nodes[i]\n    print(result)\n",
    "19": "\n    n = int(input())\n    k = list(map(int, input().split()))\n    k.sort()\n    k.append(1)\n    k.insert(0, 1)\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = d[i - 1] + k[i]\n    print(d[n])\n"
}