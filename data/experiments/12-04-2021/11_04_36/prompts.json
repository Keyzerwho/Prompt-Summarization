{
    "0": "Python 3\n\"\"\"\n You are given a set of IP addresses. Find the subnet mask that will make the IP addresses belong to exactly k distinct networks. \n-----Input----- The first line contains two integers, n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the number of IP addresses and networks. The next n lines contain the IP addresses. It is guaranteed that all IP addresses are distinct. -----Output----- In a single line print the IP address of the subnet mask in the format that is described in the statement, if the required subnet mask exists. Otherwise, print -1. -----Examples----- Input 5 3 0.0.0.1 0.1.1.2 0.0.2.1 0.1.1.0 0.0.2.3 Output 255.255.254.0 Input 5 2 0.0.0.1 0.1.1.2 0.0.2.1 0.1.1.0 0.0.2.3 Output 255.255.0.0 Input 2 1 255.0.0.1 0.0.0.2 Output -1\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe problem uses a simplified TCP/IP address model, please make sure you've read the statement attentively.\n\nPolycarpus has found a job, he is a system administrator. One day he came across n IP addresses. Each IP address is a 32 bit number, represented as a group of four 8-bit numbers (without leading zeroes), separated by dots. For example, the record 0.255.1.123 shows a correct IP address and records 0.256.1.123 and 0.255.1.01 do not. In this problem an arbitrary group of four 8-bit numbers is a correct IP address.\n\nHaving worked as an administrator for some time, Polycarpus learned that if you know the IP address, you can use the subnet mask to get the address of the network that has this IP addess.\n\nThe subnet mask is an IP address that has the following property: if we write this IP address as a 32 bit string, that it is representable as \"11...11000..000\". In other words, the subnet mask first has one or more one bits, and then one or more zero bits (overall there are 32 bits). For example, the IP address 2.0.0.0 is not a correct subnet mask as its 32-bit record looks as 00000010000000000000000000000000.\n\nTo get the network address of the IP address, you need to perform the operation of the bitwise \"and\" of the IP address and the subnet mask. For example, if the subnet mask is 255.192.0.0, and the IP address is 192.168.1.2, then the network address equals 192.128.0.0. In the bitwise \"and\" the result has a bit that equals 1 if and only if both operands have corresponding bits equal to one.\n\nNow Polycarpus wants to find all networks to which his IP addresses belong. Unfortunately, Polycarpus lost subnet mask. Fortunately, Polycarpus remembers that his IP addresses belonged to exactly k distinct networks. Help Polycarpus find the subnet mask, such that his IP addresses will belong to exactly k distinct networks. If there are several such subnet masks, find the one whose bit record contains the least number of ones. If such subnet mask do not exist, say so.\n\n\n-----Input-----\n\nThe first line contains two integers, n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the number of IP addresses and networks. The next n lines contain the IP addresses. It is guaranteed that all IP addresses are distinct.\n\n\n-----Output-----\n\nIn a single line print the IP address of the subnet mask in the format that is described in the statement, if the required subnet mask exists. Otherwise, print -1.\n\n\n-----Examples-----\nInput\n5 3\n0.0.0.1\n0.1.1.2\n0.0.2.1\n0.1.1.0\n0.0.2.3\n\nOutput\n255.255.254.0\nInput\n5 2\n0.0.0.1\n0.1.1.2\n0.0.2.1\n0.1.1.0\n0.0.2.3\n\nOutput\n255.255.0.0\nInput\n2 1\n255.0.0.1\n0.0.0.2\n\nOutput\n-1\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n A supersonic rocket consists of two engines. Each engine is a set of power sources. \n-----Input----- The first line contains two integers $n$, $m$ ($3 \\le n, m \\le 10^5$)\u00a0\u2014 the number of power sources in each engine. Each of the next $n$ lines contains two integers $x_i$ and $y_i$ ($0\\leq x_i, y_i\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th power source in the first engine. Each of the next $m$ lines contains two integers $x_i$ and $y_i$ ($0\\leq x_i, y_i\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th power source in the second engine. It is guaranteed that there are no two or more power sources that are located in the same point in each engine. -----Output----- Print \"YES\" if the supersonic rocket is safe, otherwise \"NO\". You can print each letter in an arbitrary case (upper or lower). -----Examples----- Input 3 4 0 0 0 2 2 0 0 2 2 2 2 0 1 1 Output YES Input 3 4 0 0 0 2 2 0 0 2 2 2 2 0 0 0 Output NO -----Note----- The first sample: [Image] Those near pairs of blue and orange points actually coincide.  First, manipulate the first engine: use the second operation with $\\theta = \\pi$ (to rotate all power sources $180$ degrees). The power sources in the first engine become $(0, 0)$, $(0, -2)$, and $(-2, 0)$. [Image]  Second, manipulate the second engine: use the first operation with $a = b = -2$. The power sources in the second engine become $(-2, 0)$, $(0, 0)$, $(0, -2)$, and $(-1, -1)$. [Image]  You can examine that destroying any point, the power field formed by the two engines are always the solid triangle $(0, 0)$, $(-2, 0)$, $(0, -2)$. In the second sample, no matter how you manipulate the engines, there always exists a power source in the second engine that power field will shrink if you destroy it.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nAfter the war, the supersonic rocket became the most common public transportation.\n\nEach supersonic rocket consists of two \"engines\". Each engine is a set of \"power sources\". The first engine has $n$ power sources, and the second one has $m$ power sources. A power source can be described as a point $(x_i, y_i)$ on a 2-D plane. All points in each engine are different.\n\nYou can manipulate each engine separately. There are two operations that you can do with each engine. You can do each operation as many times as you want. For every power source as a whole in that engine: $(x_i, y_i)$ becomes $(x_i+a, y_i+b)$, $a$ and $b$ can be any real numbers. In other words, all power sources will be shifted. For every power source as a whole in that engine: $(x_i, y_i)$ becomes $(x_i \\cos \\theta - y_i \\sin \\theta, x_i \\sin \\theta + y_i \\cos \\theta)$, $\\theta$ can be any real number. In other words, all power sources will be rotated.\n\nThe engines work as follows: after the two engines are powered, their power sources are being combined (here power sources of different engines may coincide). If two power sources $A(x_a, y_a)$ and $B(x_b, y_b)$ exist, then for all real number $k$ that $0 \\lt k \\lt 1$, a new power source will be created $C_k(kx_a+(1-k)x_b,ky_a+(1-k)y_b)$. Then, this procedure will be repeated again with all new and old power sources. After that, the \"power field\" from all power sources will be generated (can be considered as an infinite set of all power sources occurred).\n\nA supersonic rocket is \"safe\" if and only if after you manipulate the engines, destroying any power source and then power the engine, the power field generated won't be changed (comparing to the situation where no power source erased). Two power fields are considered the same if and only if any power source in one field belongs to the other one as well.\n\nGiven a supersonic rocket, check whether it is safe or not.\n\n\n-----Input-----\n\nThe first line contains two integers $n$, $m$ ($3 \\le n, m \\le 10^5$)\u00a0\u2014 the number of power sources in each engine.\n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($0\\leq x_i, y_i\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th power source in the first engine.\n\nEach of the next $m$ lines contains two integers $x_i$ and $y_i$ ($0\\leq x_i, y_i\\leq 10^8$)\u00a0\u2014 the coordinates of the $i$-th power source in the second engine.\n\nIt is guaranteed that there are no two or more power sources that are located in the same point in each engine.\n\n\n-----Output-----\n\nPrint \"YES\" if the supersonic rocket is safe, otherwise \"NO\".\n\nYou can print each letter in an arbitrary case (upper or lower).\n\n\n-----Examples-----\nInput\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n1 1\n\nOutput\nYES\n\nInput\n3 4\n0 0\n0 2\n2 0\n0 2\n2 2\n2 0\n0 0\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe first sample: [Image] Those near pairs of blue and orange points actually coincide. \n\nFirst, manipulate the first engine: use the second operation with $\\theta = \\pi$ (to rotate all power sources $180$ degrees).\n\nThe power sources in the first engine become $(0, 0)$, $(0, -2)$, and $(-2, 0)$. [Image] \n\nSecond, manipulate the second engine: use the first operation with $a = b = -2$.\n\nThe power sources in the second engine become $(-2, 0)$, $(0, 0)$, $(0, -2)$, and $(-1, -1)$. [Image] \n\nYou can examine that destroying any point, the power field formed by the two engines are always the solid triangle $(0, 0)$, $(-2, 0)$, $(0, -2)$.\n\nIn the second sample, no matter how you manipulate the engines, there always exists a power source in the second engine that power field will shrink if you destroy it.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Crazy Town is a plane on which there are n infinite line roads. Each road is defined by the equation a_{i}x + b_{i}y + c_{i} = 0, where a_{i} and b_{i} are not both equal to the zero. The roads divide the plane into connected regions, possibly of infinite space. Let's call each such region a block. We define an intersection as the point where at least two different roads intersect. Your home is located in one of the blocks. Today you need to get to the University, also located in some block. In one step you can move from one block to another, if the length of their common border is nonzero (in particular, this means that if the blocks are adjacent to one intersection, but have no shared nonzero boundary segment, then it are not allowed to move from one to another one in one step). Determine what is the minimum number of steps you have to perform to get to the block containing the university. It is guaranteed that neither your home nor the university is located on the road.\n-----Input----- The first line contains two space-separated integers x_1, y_1 ( - 10^6 \u2264 x_1, y_1 \u2264 10^6) \u2014 the coordinates of your home. The second line contains two integers separated by a space x_2, y_2 ( - 10^6 \u2264 x_2, y_2 \u2264 10^6) \u2014 the coordinates of the university you are studying at. The third line contains an integer n (1 \u2264 n \u2264 300) \u2014 the number of roads in the city. The following n lines contain 3 space-separated integers ( - 10^6 \u2264 a_{i}, b_{i}, c_{i} \u2264 10^6; |a_{i}| + |b_{i}| > 0) \u2014 the coefficients of the line a_{i}x + b_{i}y + c_{i} = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines). -----Output----- Output the answer to the problem. -----Examples----- Input 1 1 -1 -1 2 0 1 0 1 0 0 Output 2 Input 1 1 -1 -1 3 1 0 0 0 1 0 1 1 -3 Output 2 -----Note----- Pictures to the samples are presented below (A is the point representing the house; B is the point representing the university, different blocks are filled with different colors): [Image]  [Image]\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nCrazy Town is a plane on which there are n infinite line roads. Each road is defined by the equation a_{i}x + b_{i}y + c_{i} = 0, where a_{i} and b_{i} are not both equal to the zero. The roads divide the plane into connected regions, possibly of infinite space. Let's call each such region a block. We define an intersection as the point where at least two different roads intersect.\n\nYour home is located in one of the blocks. Today you need to get to the University, also located in some block. In one step you can move from one block to another, if the length of their common border is nonzero (in particular, this means that if the blocks are adjacent to one intersection, but have no shared nonzero boundary segment, then it are not allowed to move from one to another one in one step).\n\nDetermine what is the minimum number of steps you have to perform to get to the block containing the university. It is guaranteed that neither your home nor the university is located on the road.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers x_1, y_1 ( - 10^6 \u2264 x_1, y_1 \u2264 10^6) \u2014 the coordinates of your home.\n\nThe second line contains two integers separated by a space x_2, y_2 ( - 10^6 \u2264 x_2, y_2 \u2264 10^6) \u2014 the coordinates of the university you are studying at.\n\nThe third line contains an integer n (1 \u2264 n \u2264 300) \u2014 the number of roads in the city. The following n lines contain 3 space-separated integers ( - 10^6 \u2264 a_{i}, b_{i}, c_{i} \u2264 10^6; |a_{i}| + |b_{i}| > 0) \u2014 the coefficients of the line a_{i}x + b_{i}y + c_{i} = 0, defining the i-th road. It is guaranteed that no two roads are the same. In addition, neither your home nor the university lie on the road (i.e. they do not belong to any one of the lines).\n\n\n-----Output-----\n\nOutput the answer to the problem.\n\n\n-----Examples-----\nInput\n1 1\n-1 -1\n2\n0 1 0\n1 0 0\n\nOutput\n2\n\nInput\n1 1\n-1 -1\n3\n1 0 0\n0 1 0\n1 1 -3\n\nOutput\n2\n\n\n\n-----Note-----\n\nPictures to the samples are presented below (A is the point representing the house; B is the point representing the university, different blocks are filled with different colors): [Image]  [Image]\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Little penguin Polo likes permutations. But most of all he likes permutations of integers from 0 to n, inclusive. For permutation p = p_0, p_1, ..., p_{n}, Polo has defined its beauty number $(0 \\oplus p_{0}) +(1 \\oplus p_{1}) + \\cdots +(n \\oplus p_{n})$. Expression $x \\oplus y$ means applying the operation of bitwise excluding \"OR\" to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is represented as \"^\" and in Pascal as \"xor\". Help him find among all permutations of integers from 0 to n the permutation with the maximum beauty.\n-----Input----- The single line contains a positive integer n (1 \u2264 n \u2264 10^6). -----Output----- In the first line print integer m the maximum possible beauty. In the second line print any permutation of integers from 0 to n with the beauty equal to m. If there are several suitable permutations, you are allowed to print any of them. -----Examples----- Input 4 Output 20 0 2 1 4 3\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nLittle penguin Polo likes permutations. But most of all he likes permutations of integers from 0 to n, inclusive.\n\nFor permutation p = p_0, p_1, ..., p_{n}, Polo has defined its beauty \u2014 number $(0 \\oplus p_{0}) +(1 \\oplus p_{1}) + \\cdots +(n \\oplus p_{n})$.\n\nExpression $x \\oplus y$ means applying the operation of bitwise excluding \"OR\" to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is represented as \"^\" and in Pascal \u2014 as \"xor\".\n\nHelp him find among all permutations of integers from 0 to n the permutation with the maximum beauty.\n\n\n-----Input-----\n\nThe single line contains a positive integer n (1 \u2264 n \u2264 10^6).\n\n\n-----Output-----\n\nIn the first line print integer m the maximum possible beauty. In the second line print any permutation of integers from 0 to n with the beauty equal to m.\n\nIf there are several suitable permutations, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n20\n0 2 1 4 3\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n The University of Lagado is organising events for the upcoming Fresher s week and has been told that some of the undergraduates may enjoy a beer tasting. While sourcing a wide variety of drinks for the students to taste, the university realised that in the interests of safety there should be a limit on the alcohol consumption of any student, enforced by a strict limit on the amount any individual is allowed to spend. In common with many popular establishments, the drinks with varying strengths are served in varying amounts: Either a litre, a half litre or a third of a litre to limit possible intoxication. $1\\% $ of a litre at $100\\% $ strength equals one unit of alcohol. The students are looking forward to the event, but in order to make the most of their money and still be bright-eyed and bushy tailed for the first week of morning lectures, they don t wish to get too drunk. How can the students spend all their money and consume in full their self-imposed alcohol limit for the night? ## \n-----Input-----  - One line containing three numbers:  - $m$ ($0.00 \\le m \\le 10.00$), the amount of money they can spend to two decimal places;  - $u$ ($0.0 \\le u \\le 20.0$), the number of units they aim to drink to one decimal place;  - $d$ ($1 \\le d \\le 8$), the number of different drinks available.  - Another $d$ lines, each containing:  - up to $20$ lowercase latin letters (the name of the drink);  - an integer between $0$ and $100$ (its strength as a percentage);  - its size (either \u2018$1/1$\u2019 for a litre, \u2018$1/2$\u2019 for a half or \u2018$1/3$\u2019 for a third);  - a real number to two decimal places; its cost. Name, strength, price and cost will be separated by spaces. -----Output----- If the students\u2019 aims are possible, write one or more lines, each listing the name of the drink purchased followed by the positive integer count of how many drinks of that type were bought. If there are several solutions, output any. Otherwise, output a single line containing the word IMPOSSIBLE. -----Examples----- Sample Input: 10.00 9.0 2 fire 2 1/1 4.00 water 10 1/2 2.00 Sample Output: fire 2 water 1\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThe University of Lagado is organising events for the upcoming Fresher\u2019s week and has been told \u2014 much to the surprise of its staff \u2014 that some of the undergraduates may enjoy a beer tasting. While sourcing a wide variety of drinks for the students to taste, the university realised that in the interests of safety there should be a limit on the alcohol consumption of any student, enforced by a strict limit on the amount any individual is allowed to spend.\n\nIn common with many popular establishments, the drinks with varying strengths are served in varying amounts: Either a litre, a half litre or a third of a litre to limit possible intoxication. $1\\% $ of a litre at $100\\% $ strength equals one unit of alcohol.\n\nThe students are looking forward to the event, but in order to make the most of their money and still be bright-eyed and bushy tailed for the first week of morning lectures, they don\u2019t wish to get too drunk. How can the students spend all their money and consume in full their self-imposed alcohol limit for the night?\n\n-----Input-----\n - One line containing three numbers:\n - $m$ ($0.00 \\le m \\le 10.00$), the amount of money they can spend to two decimal places;\n - $u$ ($0.0 \\le u \\le 20.0$), the number of units they aim to drink to one decimal place;\n - $d$ ($1 \\le d \\le 8$), the number of different drinks available.\n - Another $d$ lines, each containing:\n - up to $20$ lowercase latin letters (the name of the drink);\n - an integer between $0$ and $100$ (its strength as a percentage);\n - its size (either \u2018$1/1$\u2019 for a litre, \u2018$1/2$\u2019 for a half or \u2018$1/3$\u2019 for a third);\n - a real number to two decimal places; its cost.\n\nName, strength, price and cost will be separated by spaces.\n\n-----Output-----\nIf the students\u2019 aims are possible, write one or more lines, each listing the name of the drink purchased followed by the positive integer count of how many drinks of that type were bought. If there are several solutions, output any.\n\nOtherwise, output a single line containing the word IMPOSSIBLE.\n\n-----Examples-----\nSample Input:\n10.00 9.0 2\nfire 2 1/1 4.00\nwater 10 1/2 2.00\nSample Output:\nfire 2\nwater 1\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given two strings s and t. You need to output the minimum number of operations needed to transform s into a string consisting only of a letters and t into a string consisting only of b letters. \n-----Input----- The first line contains a string s (1 \u2264 |s| \u2264 2\u00b710^5). The second line contains a string t (1 \u2264 |t| \u2264 2\u00b710^5). Here |s| and |t| denote the lengths of s and t, respectively. It is guaranteed that at least one of the strings contains at least one a letter and at least one of the strings contains at least one b letter. -----Output----- The first line should contain a single integer n (0 \u2264 n \u2264 5\u00b710^5)\u00a0\u2014 the number of operations. Each of the next n lines should contain two space-separated integers a_{i}, b_{i}\u00a0\u2014 the lengths of prefixes of s and t to swap, respectively. If there are multiple possible solutions, you can print any of them. It's guaranteed that a solution with given constraints exists. -----Examples----- Input bab bb Output 2 1 0 1 3 Input bbbb aaa Output 0 -----Note----- In the first example, you can solve the problem in two operations:  Swap the prefix of the first string with length 1 and the prefix of the second string with length 0. After this swap, you'll have strings ab and bbb.  Swap the prefix of the first string with length 1 and the prefix of the second string with length 3. After this swap, you'll have strings bbbb and a.  In the second example, the strings are already appropriate, so no operations are needed.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere are two strings s and t, consisting only of letters a and b. You can make the following operation several times: choose a prefix of s, a prefix of t and swap them. Prefixes can be empty, also a prefix can coincide with a whole string. \n\nYour task is to find a sequence of operations after which one of the strings consists only of a letters and the other consists only of b letters. The number of operations should be minimized.\n\n\n-----Input-----\n\nThe first line contains a string s (1 \u2264 |s| \u2264 2\u00b710^5).\n\nThe second line contains a string t (1 \u2264 |t| \u2264 2\u00b710^5).\n\nHere |s| and |t| denote the lengths of s and t, respectively. It is guaranteed that at least one of the strings contains at least one a letter and at least one of the strings contains at least one b letter.\n\n\n-----Output-----\n\nThe first line should contain a single integer n (0 \u2264 n \u2264 5\u00b710^5)\u00a0\u2014 the number of operations.\n\nEach of the next n lines should contain two space-separated integers a_{i}, b_{i}\u00a0\u2014 the lengths of prefixes of s and t to swap, respectively.\n\nIf there are multiple possible solutions, you can print any of them. It's guaranteed that a solution with given constraints exists.\n\n\n-----Examples-----\nInput\nbab\nbb\n\nOutput\n2\n1 0\n1 3\n\nInput\nbbbb\naaa\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, you can solve the problem in two operations:  Swap the prefix of the first string with length 1 and the prefix of the second string with length 0. After this swap, you'll have strings ab and bbb.  Swap the prefix of the first string with length 1 and the prefix of the second string with length 3. After this swap, you'll have strings bbbb and a. \n\nIn the second example, the strings are already appropriate, so no operations are needed.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You're given a tree with $n$ vertices. Your task is to determine the maximum possible number of edges that can be removed in such a way that all the remaining connected components will have even size. \n-----Input----- The first line contains an integer $n$ ($1 \\le n \\le 10^5$) denoting the size of the tree.  The next $n - 1$ lines contain two integers $u$, $v$ ($1 \\le u, v \\le n$) each, describing the vertices connected by the $i$-th edge. It's guaranteed that the given edges form a tree. -----Output----- Output a single integer $k$ \u2014 the maximum number of edges that can be removed to leave all connected components with even size, or $-1$ if it is impossible to remove edges in order to satisfy this property. -----Examples----- Input 4 2 4 4 1 3 1 Output 1 Input 3 1 2 1 3 Output -1 Input 10 7 1 8 4 8 10 4 7 6 5 9 3 3 5 2 10 2 5 Output 4 Input 2 1 2 Output 0 -----Note----- In the first example you can remove the edge between vertices $1$ and $4$. The graph after that will have two connected components with two vertices in each. In the second example you can't remove edges in such a way that all components have even number of vertices, so the answer is $-1$.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou're given a tree with $n$ vertices.\n\nYour task is to determine the maximum possible number of edges that can be removed in such a way that all the remaining connected components will have even size.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^5$) denoting the size of the tree. \n\nThe next $n - 1$ lines contain two integers $u$, $v$ ($1 \\le u, v \\le n$) each, describing the vertices connected by the $i$-th edge.\n\nIt's guaranteed that the given edges form a tree.\n\n\n-----Output-----\n\nOutput a single integer $k$ \u2014 the maximum number of edges that can be removed to leave all connected components with even size, or $-1$ if it is impossible to remove edges in order to satisfy this property.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 1\n3 1\n\nOutput\n1\nInput\n3\n1 2\n1 3\n\nOutput\n-1\nInput\n10\n7 1\n8 4\n8 10\n4 7\n6 5\n9 3\n3 5\n2 10\n2 5\n\nOutput\n4\nInput\n2\n1 2\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first example you can remove the edge between vertices $1$ and $4$. The graph after that will have two connected components with two vertices in each.\n\nIn the second example you can't remove edges in such a way that all components have even number of vertices, so the answer is $-1$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You have a set of machines and a set of customers. Each customer can buy one second of CPU time or $Q$ seconds for some integer $Q$. Each time slot a customer purchases must be completed on a single machine, but you get to decide how to allocate the purchased time slots between machines. After coming back from a long vacation, you see that all of your machines are idle and a variety of orders have come in. To keep customers happy, you must decide how to distribute these requests between machines in a way that minimizes the time when the purchased time slots are finally all completed. What is the smallest amount of time in which you can complete all of the purchased time slots \n-----Input----- The input consists of a single line containing four integers $Q$\u00a0($2 \\leq Q \\leq 1000$), which is the time needed to complete the longer batches, $M$\u00a0($1 \\leq M \\leq 1000000$), which is the number of machines owned by your company, $S$\u00a0($0 \\leq S \\leq 1000000$), which is the number of 1-second time slots purchased, and $L$\u00a0($0 \\leq L \\leq 1000000$), which is the number of $Q$-second time slots purchased. -----Output----- Display the smallest amount of time in which you can complete all of the purchased time slots. -----Examples----- Sample Input 1: 2 4 3 6 Sample Output 1: 4 Sample Input 2: 3 4 3 5 Sample Output 2: 6\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nEverybody is into cloud computing these days, so quite a few different business models are being experimented with. You are trying a very simple one: you sell time on your machines in one of two batches called slots. A customer can buy one second of CPU time or $Q$ seconds for some integer $Q$.\n\nEach time slot a customer purchases must be completed on a single machine, but you get to decide how to allocate the purchased time slots between machines.\n\nAfter coming back from a long vacation, you see that all of your machines are idle and a variety of orders have come in. To keep customers happy, you must decide how to distribute these requests between machines in a way that minimizes the time when the purchased time slots are finally all completed.\n\nWhat is the smallest amount of time in which you can complete all of the purchased time slots?\n\n-----Input-----\nThe input consists of a single line containing four integers $Q$\u00a0($2 \\leq Q \\leq 1000$), which is the time needed to complete the longer batches, $M$\u00a0($1 \\leq M \\leq 1000000$), which is the number of machines owned by your company, $S$\u00a0($0 \\leq S \\leq 1000000$), which is the number of 1-second time slots purchased, and $L$\u00a0($0 \\leq L \\leq 1000000$), which is the number of $Q$-second time slots purchased.\n\n-----Output-----\nDisplay the smallest amount of time in which you can complete all of the purchased time slots.\n\n-----Examples-----\nSample Input 1:\n2 4 3 6\nSample Output 1:\n4\n\nSample Input 2:\n3 4 3 5\nSample Output 2:\n6\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You have $n$ gnomes. Each gnome can be uniquely identified by a number $1..n$ written on their hat. Suppose there are $5$ gnomes. The gnomes could line up like so: $1, 3, 4, 2, 5$. Now, an evil magician will remove some of the gnomes from the lineup and wipe your memory of the order of the gnomes. The result is a subsequence, perhaps like so: $1, 4, 2$. He then tells you that if you ordered all permutations of $1..n$ in lexicographical order, the original sequence of gnomes is the first such permutation which contains the remaining subsequence. Your task is to find the original sequence of gnomes.\n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers $n$ and then $m$ ($1 \\le m \\le n \\le 10^5$), where $n$ is the number of gnomes originally, and $m$ is the number of gnomes remaining after the evil magician pulls his trick. Each of the next $m$ lines will contain a single integer $g$ ($1 \\le g \\le n$). These are the remaining gnomes, in order. The values of $g$ are guaranteed to be unique. -----Output----- Output $n$ lines, each containing a single integer, representing the first permutation of gnomes that could contain the remaining gnomes in order. -----Examples----- Sample Input: 5 3 1 4 2 Sample Output: 1 3 4 2 5\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nA family of $n$ gnomes likes to line up for a group picture. Each gnome can be uniquely identified by a number $1..n$ written on their hat.\n\nSuppose there are $5$ gnomes. The gnomes could line up like so: $1, 3, 4, 2, 5$.\n\nNow, an evil magician will remove some of the gnomes from the lineup and wipe your memory of the order of the gnomes. The result is a subsequence, perhaps like so: $1, 4, 2$.\n\nHe then tells you that if you ordered all permutations of $1..n$ in lexicographical order, the original sequence of gnomes is the first such permutation which contains the remaining subsequence. Your task is to find the original sequence of gnomes.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers $n$ and then $m$ ($1 \\le m \\le n \\le 10^5$), where $n$ is the number of gnomes originally, and $m$ is the number of gnomes remaining after the evil magician pulls his trick. Each of the next $m$ lines will contain a single integer $g$ ($1 \\le g \\le n$). These are the remaining gnomes, in order. The values of $g$ are guaranteed to be unique.\n\n-----Output-----\nOutput $n$ lines, each containing a single integer, representing the first permutation of gnomes that could contain the remaining gnomes in order.\n\n-----Examples-----\nSample Input:\n5 3\n1\n4\n2\nSample Output:\n1\n3\n4\n2\n5\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given a number $n$, find the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node $P$. \n-----Input----- The first line contains an integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 number of fragments of Vanessa's mind. The second line contains $n$ integers: $k_1, k_2, \\ldots, k_n$ ($0 \\le k_i \\le 5000$), denoting the nodes where fragments of Vanessa's mind are located: the $i$-th fragment is at the node with a number $k_i!$. -----Output----- Print a single integer, denoting the minimal sum of path from every fragment to the node with the emotion samples (a.k.a. node $P$). As a reminder, if there are multiple fragments at the same node, the distance from that node to $P$ needs to be counted multiple times as well. -----Examples----- Input 3 2 1 4 Output 5 Input 4 3 1 4 4 Output 6 Input 4 3 1 4 1 Output 6 Input 5 3 1 4 1 5 Output 11 -----Note----- Considering the first $24$ nodes of the system, the node network will look as follows (the nodes $1!$, $2!$, $3!$, $4!$ are drawn bold): [Image] For the first example, Ivy will place the emotion samples at the node $1$. From here:   The distance from Vanessa's first fragment to the node $1$ is $1$.  The distance from Vanessa's second fragment to the node $1$ is $0$.  The distance from Vanessa's third fragment to the node $1$ is $4$.  The total length is $5$. For the second example, the assembly node will be $6$. From here:   The distance from Vanessa's first fragment to the node $6$ is $0$.  The distance from Vanessa's second fragment to the node $6$ is $2$.  The distance from Vanessa's third fragment to the node $6$ is $2$.  The distance from Vanessa's fourth fragment to the node $6$ is again $2$.  The total path length is $6$.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\n\u00c6sir - CHAOS \u00c6sir - V.\n\n\"Everything has been planned out. No more hidden concerns. The condition of Cytus is also perfect.\n\nThe time right now...... 00:01:12......\n\nIt's time.\"\n\nThe emotion samples are now sufficient. After almost 3 years, it's time for Ivy to awake her bonded sister, Vanessa.\n\nThe system inside A.R.C.'s Library core can be considered as an undirected graph with infinite number of processing nodes, numbered with all positive integers ($1, 2, 3, \\ldots$). The node with a number $x$ ($x > 1$), is directly connected with a node with number $\\frac{x}{f(x)}$, with $f(x)$ being the lowest prime divisor of $x$.\n\nVanessa's mind is divided into $n$ fragments. Due to more than 500 years of coma, the fragments have been scattered: the $i$-th fragment is now located at the node with a number $k_i!$ (a factorial of $k_i$).\n\nTo maximize the chance of successful awakening, Ivy decides to place the samples in a node $P$, so that the total length of paths from each fragment to $P$ is smallest possible. If there are multiple fragments located at the same node, the path from that node to $P$ needs to be counted multiple times.\n\nIn the world of zeros and ones, such a requirement is very simple for Ivy. Not longer than a second later, she has already figured out such a node.\n\nBut for a mere human like you, is this still possible?\n\nFor simplicity, please answer the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node $P$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 number of fragments of Vanessa's mind.\n\nThe second line contains $n$ integers: $k_1, k_2, \\ldots, k_n$ ($0 \\le k_i \\le 5000$), denoting the nodes where fragments of Vanessa's mind are located: the $i$-th fragment is at the node with a number $k_i!$.\n\n\n-----Output-----\n\nPrint a single integer, denoting the minimal sum of path from every fragment to the node with the emotion samples (a.k.a. node $P$).\n\nAs a reminder, if there are multiple fragments at the same node, the distance from that node to $P$ needs to be counted multiple times as well.\n\n\n-----Examples-----\nInput\n3\n2 1 4\n\nOutput\n5\n\nInput\n4\n3 1 4 4\n\nOutput\n6\n\nInput\n4\n3 1 4 1\n\nOutput\n6\n\nInput\n5\n3 1 4 1 5\n\nOutput\n11\n\n\n\n-----Note-----\n\nConsidering the first $24$ nodes of the system, the node network will look as follows (the nodes $1!$, $2!$, $3!$, $4!$ are drawn bold):\n\n[Image]\n\nFor the first example, Ivy will place the emotion samples at the node $1$. From here:\n\n  The distance from Vanessa's first fragment to the node $1$ is $1$.  The distance from Vanessa's second fragment to the node $1$ is $0$.  The distance from Vanessa's third fragment to the node $1$ is $4$. \n\nThe total length is $5$.\n\nFor the second example, the assembly node will be $6$. From here:\n\n  The distance from Vanessa's first fragment to the node $6$ is $0$.  The distance from Vanessa's second fragment to the node $6$ is $2$.  The distance from Vanessa's third fragment to the node $6$ is $2$.  The distance from Vanessa's fourth fragment to the node $6$ is again $2$. \n\nThe total path length is $6$.\n\"\"\"\ndef code():"
}