{
    "0": "Python 3\n\"\"\"\n A monopole magnet is a magnet that only has one pole, either north or south. They don't actually exist since real magnets have two poles, but this is a programming contest problem, so we don't care. There is an $n\\times m$ grid. Initially, you may place some north magnets and some south magnets into the cells. You are allowed to place as many magnets as you like, even multiple in the same cell. An operation is performed as follows. Choose a north magnet and a south magnet to activate. If they are in the same row or the same column and they occupy different cells, then the north magnet moves one unit closer to the south magnet. Otherwise, if they occupy the same cell or do not share a row or column, then nothing changes. Note that the south magnets are immovable. Each cell of the grid is colored black or white. Let's consider ways to place magnets in the cells so that the following conditions are met.   There is at least one south magnet in every row and every column.  If a cell is colored black, then it is possible for a north magnet to occupy this cell after some sequence of operations from the initial placement.  If a cell is colored white, then it is impossible for a north magnet to occupy this cell after some sequence of operations from the initial placement.  Determine if it is possible to place magnets such that these conditions are met. If it is possible, find the minimum number of north magnets required (there are no requirements on the number of south magnets). \n-----Input----- The first line contains two integers $n$ and $m$ ($1\\le n,m\\le 1000$) \u00a0\u2014 the number of rows and the number of columns, respectively. The next $n$ lines describe the coloring. The $i$-th of these lines contains a string of length $m$, where the $j$-th character denotes the color of the cell in row $i$ and column $j$. The characters \"#\" and \".\" represent black and white, respectively. It is guaranteed, that the string will not contain any other characters. -----Output----- Output a single integer, the minimum possible number of north magnets required. If there is no placement of magnets that satisfies all conditions, print a single integer $-1$. -----Examples----- Input 3 3 .#. ### ##. Output 1 Input 4 2 ## .# .# ## Output -1 Input 4 5 ....# ####. .###. .#... Output 2 Input 2 1 . # Output -1 Input 3 5 ..... ..... ..... Output 0 -----Note----- In the first test, here is an example placement of magnets:  [Image]  In the second test, we can show that no required placement of magnets exists. Here are three example placements that fail to meet the requirements. The first example violates rule $3$ since we can move the north magnet down onto a white square. The second example violates rule $2$ since we cannot move the north magnet to the bottom-left black square by any sequence of operations. The third example violates rule $1$ since there is no south magnet in the first column.  [Image]  In the third test, here is an example placement of magnets. We can show that there is no required placement of magnets with fewer north magnets.  [Image]  In the fourth test, we can show that no required placement of magnets exists. Here are two example placements that fail to meet the requirements. The first example violates rule $1$ since there is no south magnet in the first row. The second example violates rules $1$ and $3$ since there is no south magnet in the second row and we can move the north magnet up one unit onto a white square.  [Image]  In the fifth test, we can put the south magnet in each cell and no north magnets. Because there are no black cells, it will be a correct placement.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nA monopole magnet is a magnet that only has one pole, either north or south. They don't actually exist since real magnets have two poles, but this is a programming contest problem, so we don't care.\n\nThere is an $n\\times m$ grid. Initially, you may place some north magnets and some south magnets into the cells. You are allowed to place as many magnets as you like, even multiple in the same cell.\n\nAn operation is performed as follows. Choose a north magnet and a south magnet to activate. If they are in the same row or the same column and they occupy different cells, then the north magnet moves one unit closer to the south magnet. Otherwise, if they occupy the same cell or do not share a row or column, then nothing changes. Note that the south magnets are immovable.\n\nEach cell of the grid is colored black or white. Let's consider ways to place magnets in the cells so that the following conditions are met.\n\n  There is at least one south magnet in every row and every column.  If a cell is colored black, then it is possible for a north magnet to occupy this cell after some sequence of operations from the initial placement.  If a cell is colored white, then it is impossible for a north magnet to occupy this cell after some sequence of operations from the initial placement. \n\nDetermine if it is possible to place magnets such that these conditions are met. If it is possible, find the minimum number of north magnets required (there are no requirements on the number of south magnets).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1\\le n,m\\le 1000$) \u00a0\u2014 the number of rows and the number of columns, respectively.\n\nThe next $n$ lines describe the coloring. The $i$-th of these lines contains a string of length $m$, where the $j$-th character denotes the color of the cell in row $i$ and column $j$. The characters \"#\" and \".\" represent black and white, respectively. It is guaranteed, that the string will not contain any other characters.\n\n\n-----Output-----\n\nOutput a single integer, the minimum possible number of north magnets required.\n\nIf there is no placement of magnets that satisfies all conditions, print a single integer $-1$.\n\n\n-----Examples-----\nInput\n3 3\n.#.\n###\n##.\n\nOutput\n1\n\nInput\n4 2\n##\n.#\n.#\n##\n\nOutput\n-1\n\nInput\n4 5\n....#\n####.\n.###.\n.#...\n\nOutput\n2\n\nInput\n2 1\n.\n#\n\nOutput\n-1\n\nInput\n3 5\n.....\n.....\n.....\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test, here is an example placement of magnets:\n\n [Image] \n\nIn the second test, we can show that no required placement of magnets exists. Here are three example placements that fail to meet the requirements. The first example violates rule $3$ since we can move the north magnet down onto a white square. The second example violates rule $2$ since we cannot move the north magnet to the bottom-left black square by any sequence of operations. The third example violates rule $1$ since there is no south magnet in the first column.\n\n [Image] \n\nIn the third test, here is an example placement of magnets. We can show that there is no required placement of magnets with fewer north magnets.\n\n [Image] \n\nIn the fourth test, we can show that no required placement of magnets exists. Here are two example placements that fail to meet the requirements. The first example violates rule $1$ since there is no south magnet in the first row. The second example violates rules $1$ and $3$ since there is no south magnet in the second row and we can move the north magnet up one unit onto a white square.\n\n [Image] \n\nIn the fifth test, we can put the south magnet in each cell and no north magnets. Because there are no black cells, it will be a correct placement.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given an array of strings, find the k-th character of each string.\n-----Input----- The first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions. Each of the next q lines describes Nephren's question and contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18). -----Output----- One line containing q characters. The i-th character in it should be the answer for the i-th query. -----Examples----- Input 3 1 1 1 2 1 111111111111 Output Wh. Input 5 0 69 1 194 1 139 0 47 1 66 Output abdef Input 10 4 1825 3 75 3 530 4 1829 4 1651 3 187 4 584 4 255 4 774 2 474 Output Areyoubusy -----Note----- For the first two examples, refer to f_0 and f_1 given in the legend.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWhat are you doing at the end of the world? Are you busy? Will you save us?\n\n\n\n[Image]\n\nNephren is playing a game with little leprechauns.\n\nShe gives them an infinite array of strings, f_{0... \u221e}.\n\nf_0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\n\nShe wants to let more people know about it, so she defines f_{i} =  \"What are you doing while sending \"f_{i} - 1\"? Are you busy? Will you send \"f_{i} - 1\"?\" for all i \u2265 1.\n\nFor example, f_1 is\n\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f_1.\n\nIt can be seen that the characters in f_{i} are letters, question marks, (possibly) quotation marks and spaces.\n\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of f_{n}. The characters are indexed starting from 1. If f_{n} consists of less than k characters, output '.' (without quotes).\n\nCan you answer her queries?\n\n\n-----Input-----\n\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\n\nEach of the next q lines describes Nephren's question and contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18).\n\n\n-----Output-----\n\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 111111111111\n\nOutput\nWh.\nInput\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\nOutput\nabdef\nInput\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\nOutput\nAreyoubusy\n\n\n-----Note-----\n\nFor the first two examples, refer to f_0 and f_1 given in the legend.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a sequence of real numbers. You have to perform n operations on these numbers. Each operation goes as follows: choose indexes i and j (i   j) that haven't been chosen yet; round element a_{i} to the nearest integer that isn't more than a_{i} (assign to a_{i}:   a_{i}  ); round element a_{j} to the nearest integer that isn't less than a_{j} (assign to a_{j}:   a_{j}  ). \n-----Input----- The first line contains integer n (1 \u2264 n \u2264 2000). The next line contains 2n real numbers a_1, a_2, ..., a_2n (0 \u2264 a_{i} \u2264 10000), given with exactly three digits after the decimal point. The numbers are separated by spaces. -----Output----- In a single line print a single real number \u2014 the required difference with exactly three digits after the decimal point. -----Examples----- Input 3 0.000 0.500 0.750 1.000 2.000 3.000 Output 0.250 Input 3 4469.000 6526.000 4864.000 9356.383 7490.000 995.896 Output 0.279 -----Note----- In the first test case you need to perform the operations as follows: (i = 1, j = 4), (i = 2, j = 3), (i = 5, j = 6). In this case, the difference will equal |(0 + 0.5 + 0.75 + 1 + 2 + 3) - (0 + 0 + 1 + 1 + 2 + 3)| = 0.25.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nJeff got 2n real numbers a_1, a_2, ..., a_2n as a birthday present. The boy hates non-integer numbers, so he decided to slightly \"adjust\" the numbers he's got. Namely, Jeff consecutively executes n operations, each of them goes as follows:  choose indexes i and j (i \u2260 j) that haven't been chosen yet;  round element a_{i} to the nearest integer that isn't more than a_{i} (assign to a_{i}: \u230a a_{i}\u00a0\u230b);  round element a_{j} to the nearest integer that isn't less than a_{j} (assign to a_{j}: \u2308 a_{j}\u00a0\u2309). \n\nNevertheless, Jeff doesn't want to hurt the feelings of the person who gave him the sequence. That's why the boy wants to perform the operations so as to make the absolute value of the difference between the sum of elements before performing the operations and the sum of elements after performing the operations as small as possible. Help Jeff find the minimum absolute value of the difference.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains 2n real numbers a_1, a_2, ..., a_2n (0 \u2264 a_{i} \u2264 10000), given with exactly three digits after the decimal point. The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line print a single real number \u2014 the required difference with exactly three digits after the decimal point.\n\n\n-----Examples-----\nInput\n3\n0.000 0.500 0.750 1.000 2.000 3.000\n\nOutput\n0.250\n\nInput\n3\n4469.000 6526.000 4864.000 9356.383 7490.000 995.896\n\nOutput\n0.279\n\n\n\n-----Note-----\n\nIn the first test case you need to perform the operations as follows: (i = 1, j = 4), (i = 2, j = 3), (i = 5, j = 6). In this case, the difference will equal |(0 + 0.5 + 0.75 + 1 + 2 + 3) - (0 + 0 + 1 + 1 + 2 + 3)| = 0.25.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You have to plan out routes for the vehicles. Each route can use any road/railway multiple times. One of the most important aspects to consider is safety in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town n) simultaneously. Under these constraints, what is the minimum number of hours needed for both vehicles to reach town n (the maximum of arrival times of the bus and the train) \n-----Input----- The first line of the input contains two integers n and m (2 \u2264 n \u2264 400, 0 \u2264 m \u2264 n(n - 1) / 2)\u00a0\u2014 the number of towns and the number of railways respectively. Each of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 \u2264 u, v \u2264 n, u \u2260 v). You may assume that there is at most one railway connecting any two towns. -----Output----- Output one integer\u00a0\u2014 the smallest possible time of the later vehicle's arrival in town n. If it's impossible for at least one of the vehicles to reach town n, output  - 1. -----Examples----- Input 4 2 1 3 3 4 Output 2 Input 4 6 1 2 1 3 1 4 2 3 2 4 3 4 Output -1 Input 5 5 4 2 3 5 4 5 5 1 1 2 Output 3 -----Note----- In the first sample, the train can take the route $1 \\rightarrow 3 \\rightarrow 4$ and the bus can take the route $1 \\rightarrow 2 \\rightarrow 4$. Note that they can arrive at town 4 at the same time. In the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there's no way for the bus to reach town 4.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIn Absurdistan, there are n towns (numbered 1 through n) and m bidirectional railways. There is also an absurdly simple road network\u00a0\u2014 for each pair of different towns x and y, there is a bidirectional road between towns x and y if and only if there is no railway between them. Travelling to a different town using one railway or one road always takes exactly one hour.\n\nA train and a bus leave town 1 at the same time. They both have the same destination, town n, and don't make any stops on the way (but they can wait in town n). The train can move only along railways and the bus can move only along roads.\n\nYou've been asked to plan out routes for the vehicles; each route can use any road/railway multiple times. One of the most important aspects to consider is safety\u00a0\u2014 in order to avoid accidents at railway crossings, the train and the bus must not arrive at the same town (except town n) simultaneously.\n\nUnder these constraints, what is the minimum number of hours needed for both vehicles to reach town n (the maximum of arrival times of the bus and the train)? Note, that bus and train are not required to arrive to the town n at the same moment of time, but are allowed to do so.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (2 \u2264 n \u2264 400, 0 \u2264 m \u2264 n(n - 1) / 2)\u00a0\u2014 the number of towns and the number of railways respectively.\n\nEach of the next m lines contains two integers u and v, denoting a railway between towns u and v (1 \u2264 u, v \u2264 n, u \u2260 v).\n\nYou may assume that there is at most one railway connecting any two towns.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the smallest possible time of the later vehicle's arrival in town n. If it's impossible for at least one of the vehicles to reach town n, output  - 1.\n\n\n-----Examples-----\nInput\n4 2\n1 3\n3 4\n\nOutput\n2\n\nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\nOutput\n-1\n\nInput\n5 5\n4 2\n3 5\n4 5\n5 1\n1 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample, the train can take the route $1 \\rightarrow 3 \\rightarrow 4$ and the bus can take the route $1 \\rightarrow 2 \\rightarrow 4$. Note that they can arrive at town 4 at the same time.\n\nIn the second sample, Absurdistan is ruled by railwaymen. There are no roads, so there's no way for the bus to reach town 4.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Snuke has decided to play with N cards and a deque (that is, a double-ended queue). Each card shows an integer from 1 through N, and the deque is initially empty. Snuke will insert the cards at the beginning or the end of the deque one at a time, in order from 1 to N. Then, he will perform the following action N times: take out the card from the beginning or the end of the deque and eat it. Afterwards, we will construct an integer sequence by arranging the integers written on the eaten cards, in the order they are eaten. Among the sequences that can be obtained in this way, find the number of the sequences such that the K-th element is 1. Print the answer modulo 10^{9} + 7.  \n-----Input----- The input is given from Standard Input in the following format: N K -----Output----- Print the answer modulo 10^{9} + 7. -----Sample Input----- 2 1 -----Sample Output----- 1 There is one sequence satisfying the condition: 1,2. One possible way to obtain this sequence is the following:  - Insert both cards, 1 and 2, at the end of the deque.  - Eat the card at the beginning of the deque twice.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nSnuke has decided to play with N cards and a deque (that is, a double-ended queue).\nEach card shows an integer from 1 through N, and the deque is initially empty.\nSnuke will insert the cards at the beginning or the end of the deque one at a time, in order from 1 to N.\nThen, he will perform the following action N times: take out the card from the beginning or the end of the deque and eat it.\nAfterwards, we will construct an integer sequence by arranging the integers written on the eaten cards, in the order they are eaten. Among the sequences that can be obtained in this way, find the number of the sequences such that the K-th element is 1. Print the answer modulo 10^{9} + 7.\n\n-----Constraints-----\n - 1 \u2266 K \u2266 N \u2266 2{,}000\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN K\n\n-----Output-----\nPrint the answer modulo 10^{9} + 7.\n\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n1\n\nThere is one sequence satisfying the condition: 1,2. One possible way to obtain this sequence is the following:\n - Insert both cards, 1 and 2, at the end of the deque.\n - Eat the card at the beginning of the deque twice.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Given the hype rating of each of T ti s songs in the order he wrote them, how many setlists can he make ## \n-----Input----- The first line of input consists of an integer $n$ ($1 \\leq n \\leq 10^6$), the number of songs T\u00f3ti has written. The second line consists of $n$ integers, each in $\\{ 1, 2, 3\\} $, giving the hype ratings of the $n$ songs in the order they were written. -----Output----- Output the number of setlists T\u00f3ti can make. Since this number can be large, print it modulo $10^9 + 7$. -----Examples----- Sample Input: 9 1 1 1 2 2 2 3 3 3 Sample Output: 63\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYour friend T\u00f3ti is an aspiring musician. He has written $n$ songs, each of which has a hype rating of either $1$, $2$, or $3$. A higher hype rating means the song has more energy. T\u00f3ti is planning his first live performance and needs your help. He wants to know how many setlists he can make. A setlist consist of at least three songs, the first song must have hype rating $1$, the last song must have hype rating $3$, and all other songs must have hype rating $2$. T\u00f3ti also wants to play the songs in the same order he wrote them. \n\nGiven the hype rating of each of T\u00f3ti\u2019s songs in the order he wrote them, how many setlists can he make?\n\n-----Input-----\nThe first line of input consists of an integer $n$ ($1 \\leq n \\leq 10^6$), the number of songs T\u00f3ti has written. The second line consists of $n$ integers, each in $\\{ 1, 2, 3\\} $, giving the hype ratings of the $n$ songs in the order they were written.\n\n-----Output-----\nOutput the number of setlists T\u00f3ti can make. Since this number can be large, print it modulo $10^9 + 7$.\n\n-----Examples-----\nSample Input:\n9\n1 1 1 2 2 2 3 3 3\nSample Output:\n63\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Polyominoes are polyforms with the square as its base form. It is a connected shape formed as the union of one or more identical squares in distinct locations on the plane, taken from the regular square tiling, such that every square can be connected to every other square through a sequence of shared edges (i.e., shapes connected only through shared corners of squares are not permitted). \n-----Input----- One line with two positive integers $h, w \\leq 10$. Next follows an $h \\times w$ matrix of characters \u2018.\u2019 or \u2018X\u2019, the \u2018X\u2019s describing a polyomino and \u2018.\u2019 space. -----Output----- A $k$-power with $2 \\leq k \\leq 5$ copies of a smaller polyomino: Output a $h\\times w$ matrix on the same format as the input with the \u2018X\u2019s replaced by the numbers $1$ through $k$ in any order identifying the factor pieces. Furthermore, if multiple solutions exist, any will do. Otherwise, output \u201cNo solution\u201d if no solution exists. -----Examples----- Sample Input 1: 3 7 .XXXXX. .XX..X. XXXX... Sample Output 1: No solution Sample Input 2: 1 3 XXX Sample Output 2: 123\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nA polyomino is a polyform with the square as its base form. It is a connected shape formed as the union of one or more identical squares in distinct locations on the plane, taken from the regular square tiling, such that every square can be connected to every other square through a sequence of shared edges (i.e., shapes connected only through shared corners of squares are not permitted).\n\n The most well-known polyominos are the seven tetrominos made out of four squares (see figure), famous from the Tetris\u00ae game, and of course the single domino consisting of two squares from the game with the same name. Some polyomino can be obtained by gluing several copies of the same smaller polyomino translated (but not rotated or mirrored) to different locations in the plane. We call those polyomino powers.\n\n\n\n-----Input-----\nOne line with two positive integers $h, w \\leq 10$. Next follows an $h \\times w$ matrix of characters \u2018.\u2019 or \u2018X\u2019, the \u2018X\u2019s describing a polyomino and \u2018.\u2019 space.\n\n-----Output-----\nA $k$-power with $2 \\leq k \\leq 5$ copies of a smaller polyomino: Output a $h\\times w$ matrix on the same format as the input with the \u2018X\u2019s replaced by the numbers $1$ through $k$ in any order identifying the factor pieces. Furthermore, if multiple solutions exist, any will do. Otherwise, output \u201cNo solution\u201d if no solution exists.\n\n-----Examples-----\nSample Input 1:\n3 7\n.XXXXX.\n.XX..X.\nXXXX...\nSample Output 1:\nNo solution\n\nSample Input 2:\n1 3\nXXX\nSample Output 2:\n123\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a 2D grid. Each cell contains either an apple, an obstacle, or is empty. You must simulate gravity by moving apples into empty cells. Print out the final configuration of the board after all apples reach their final locations. \n-----Input----- The input begins with a line containing integers $R$ and $C$, designating the number of rows and columns of the grid, such that $1 \\leq R \\leq 50000$ and $1 \\leq C \\leq 10$. The first line is followed by $R$ additional lines, each designating a row of the grid, from top to bottom. Each line has $C$ characters, each of which is either \u2019.\u2019, \u2019a\u2019, or \u2019#\u2019. -----Output----- Output $R$ grid lines displaying the final state. -----Examples----- Sample Input: 3 3 aaa #.. ..# Sample Output: a.. #.a .a#\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou have a 2D rectangular grid. Each grid cell contains either an apple, an obstacle, or is empty. Empty cells are denoted as \u2019.\u2019, apples as \u2019a\u2019, and obstacles as \u2019#\u2019. You are to implement a simulation of gravity, based on the following rules: \n - The obstacles do not move.\n - Whenever there is an empty cell immediately below an apple, the apple moves into the empty cell.\n\nPrint out the final configuration of the board after all apples reach their final locations. Merely iterating the gravity rule, a step at a time, will likely take too long on large datasets.\n\n-----Input-----\nThe input begins with a line containing integers $R$ and $C$, designating the number of rows and columns of the grid, such that $1 \\leq R \\leq 50000$ and $1 \\leq C \\leq 10$. The first line is followed by $R$ additional lines, each designating a row of the grid, from top to bottom. Each line has $C$ characters, each of which is either \u2019.\u2019, \u2019a\u2019, or \u2019#\u2019.\n\n-----Output-----\nOutput $R$ grid lines displaying the final state.\n\n-----Examples-----\nSample Input:\n3 3\naaa\n#..\n..#\nSample Output:\na..\n#.a\n.a#\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Given the Sensei s favorite number, $k$, find the string that the ninja should put on his nametag. \n-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input consists of a single line with a single integer $k$ ($1 \\le k \\le 1000000$), which is the Sensei\u2019s favorite number. There will always be a name that encodes to the Sensei\u2019s number. -----Output----- Output a single line with a string of lower case letters, which is the name that the ninja should put on the nametag to impress the Sensei. -----Examples----- Sample Input 1: 1 Sample Output 1: ab Sample Input 2: 19 Sample Output 2: at\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nWhen ninjas go to conferences they wear fake nametags. One ninja in particular wants to impress his Sensei. His Sensei chooses a new favorite number every day. The pupil wants to put a name on his nametag that encodes his Sensei\u2019s favorite number! This name will consist of only lower case letters. He assigns a value to each letter, based on its position in the alphabet (e.g. $\\texttt{a}=1$, $\\texttt{b}=2$, ..., $\\texttt{z}=26$). Then, he encodes the Sensei\u2019s number by adding up the absolute values of the differences of every consecutive pair of letters. For example, the string $\\texttt{azxb}$ has the value of:\\[ |\\texttt{a} - \\texttt{z}| + |\\texttt{z} - \\texttt{x}| + |\\texttt{x} - \\texttt{b}| = |1 - 26| + |26 - 24| + |24 - 2| = 49 \\]\n\nThe name that the ninja will write on his nametag is the shortest string that encodes to his Sensei\u2019s favorite number. If there\u2019s more than one string of the shortest length, he\u2019ll choose the one that comes first alphabetically. Given the Sensei\u2019s favorite number, $k$, find the string that the ninja should put on his nametag.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each input consists of a single line with a single integer $k$ ($1 \\le k \\le 1000000$), which is the Sensei\u2019s favorite number. There will always be a name that encodes to the Sensei\u2019s number.\n\n-----Output-----\nOutput a single line with a string of lower case letters, which is the name that the ninja should put on the nametag to impress the Sensei.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\nab\n\nSample Input 2:\n19\nSample Output 2:\nat\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n The last stage of Football World Cup is played using the play-off system. There are n teams left in this stage, they are enumerated from 1 to n. Several rounds are held, in each round the remaining teams are sorted in the order of their ids, then the first in this order plays with the second, the third   with the fourth, the fifth   with the sixth, and so on. It is guaranteed that in each round there is even number of teams. The winner of each game advances to the next round, the loser is eliminated from the tournament, there are no draws. In the last round there is the only game with two remaining teams: the round is called the Final, the winner is called the champion, and the tournament is over. Arkady wants his two favorite teams to play in the Final. Unfortunately, the team ids are already determined, and it may happen that it is impossible for teams to meet in the Final, because they are to meet in some earlier stage, if they are strong enough. Determine, in which round the teams with ids a and b can meet.\n-----Input----- The only line contains three integers n, a and b (2 \u2264 n \u2264 256, 1 \u2264 a, b \u2264 n)\u00a0\u2014 the total number of teams, and the ids of the teams that Arkady is interested in.  It is guaranteed that n is such that in each round an even number of team advance, and that a and b are not equal. -----Output----- In the only line print \"Final!\" (without quotes), if teams a and b can meet in the Final. Otherwise, print a single integer\u00a0\u2014 the number of the round in which teams a and b can meet. The round are enumerated from 1. -----Examples----- Input 4 1 2 Output 1 Input 8 2 6 Output Final! Input 8 7 5 Output 2 -----Note----- In the first example teams 1 and 2 meet in the first round. In the second example teams 2 and 6 can only meet in the third round, which is the Final, if they win all their opponents in earlier rounds. In the third example the teams with ids 7 and 5 can meet in the second round, if they win their opponents in the first round.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe last stage of Football World Cup is played using the play-off system.\n\nThere are n teams left in this stage, they are enumerated from 1 to n. Several rounds are held, in each round the remaining teams are sorted in the order of their ids, then the first in this order plays with the second, the third\u00a0\u2014 with the fourth, the fifth\u00a0\u2014 with the sixth, and so on. It is guaranteed that in each round there is even number of teams. The winner of each game advances to the next round, the loser is eliminated from the tournament, there are no draws. In the last round there is the only game with two remaining teams: the round is called the Final, the winner is called the champion, and the tournament is over.\n\nArkady wants his two favorite teams to play in the Final. Unfortunately, the team ids are already determined, and it may happen that it is impossible for teams to meet in the Final, because they are to meet in some earlier stage, if they are strong enough. Determine, in which round the teams with ids a and b can meet.\n\n\n-----Input-----\n\nThe only line contains three integers n, a and b (2 \u2264 n \u2264 256, 1 \u2264 a, b \u2264 n)\u00a0\u2014 the total number of teams, and the ids of the teams that Arkady is interested in. \n\nIt is guaranteed that n is such that in each round an even number of team advance, and that a and b are not equal.\n\n\n-----Output-----\n\nIn the only line print \"Final!\" (without quotes), if teams a and b can meet in the Final.\n\nOtherwise, print a single integer\u00a0\u2014 the number of the round in which teams a and b can meet. The round are enumerated from 1.\n\n\n-----Examples-----\nInput\n4 1 2\n\nOutput\n1\n\nInput\n8 2 6\n\nOutput\nFinal!\n\nInput\n8 7 5\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example teams 1 and 2 meet in the first round.\n\nIn the second example teams 2 and 6 can only meet in the third round, which is the Final, if they win all their opponents in earlier rounds.\n\nIn the third example the teams with ids 7 and 5 can meet in the second round, if they win their opponents in the first round.\n\"\"\"\ndef code():"
}