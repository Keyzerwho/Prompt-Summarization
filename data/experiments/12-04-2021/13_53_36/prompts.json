{
    "0": "Python 3\n\"\"\"\nWe have three stones at points (0, 0), (1,0), and (0,1) on a two-dimensional plane.\nThese three stones are said to form an L when they satisfy the following conditions:\n - Each of the stones is at integer coordinates.\n - Each of the stones is adjacent to another stone.\n - The three stones do not lie on the same line.\nParticularly, the initial arrangement of the stone - (0, 0), (1,0), and (0,1) - forms an L.\nYou can do the following operation any number of times: choose one of the stones and move it to any position. However, after each operation, the stones must form an L.\nYou want to do as few operations as possible to put stones at points (ax, ay), (bx, by), and (cx, cy). How many operations do you need to do this?\nIt is guaranteed that the desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L.\nAssume that the three stones are indistinguishable.\n\n-----Constraints-----\n - 1 \\leq T \\leq 10^3\n - |ax|,|ay|,|bx|,|by|,|cx|,|cy| \\leq 10^9\n - The desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\text{case}_1\n\\vdots\n\\text{case}_T\n\nEach case is in the following format:\nax ay bx by cx cy\n\n-----Output-----\nPrint T values. The i-th value should be the minimum number of operations for \\text{case}_i.\n\n-----Sample Input-----\n1\n3 2 2 2 2 1\n\n-----Sample Output-----\n4\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nWe have three stones at points (0, 0), (1,0), and (0,1) on a two-dimensional plane.\nThese three stones are said to form an L when they satisfy the following conditions:\n - Each of the stones is at integer coordinates.\n - Each of the stones is adjacent to another stone. (That is, for each stone, there is another stone whose distance from that stone is 1.)\n - The three stones do not lie on the same line.\nParticularly, the initial arrangement of the stone - (0, 0), (1,0), and (0,1) - forms an L.\nYou can do the following operation any number of times: choose one of the stones and move it to any position. However, after each operation, the stones must form an L.\nYou want to do as few operations as possible to put stones at points (ax, ay), (bx, by), and (cx, cy). How many operations do you need to do this?\nIt is guaranteed that the desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L. Under this condition, it is always possible to achieve the objective with a finite number of operations.\nYou will be given T cases of this problem. Solve each of them.\n\n-----Notes-----\nWe assume that the three stones are indistinguishable. For example, the stone that is initially at point (0,0) may be at any of the points (ax, ay), (bx, by), and (cx, cy) in the end.\n\n-----Constraints-----\n - 1 \\leq T \\leq 10^3\n - |ax|,|ay|,|bx|,|by|,|cx|,|cy| \\leq 10^9\n - The desired arrangement of stones - (ax, ay), (bx, by), and (cx, cy) - forms an L.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\text{case}_1\n\\vdots\n\\text{case}_T\n\nEach case is in the following format:\nax ay bx by cx cy\n\n-----Output-----\nPrint T values. The i-th value should be the minimum number of operations for \\text{case}_i.\n\n-----Sample Input-----\n1\n3 2 2 2 2 1\n\n-----Sample Output-----\n4\n\nLet us use # to represent a stone.\nYou can move the stones to the specified positions with four operations, as follows:\n....    ....    ....    ..#.    ..##\n#... -> ##.. -> .##. -> .##. -> ..#.\n##..    .#..    .#..    ....    ....\n\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nA cake is sliced with n straight lines. Your task is to calculate the maximum number of pieces the cake can have.\n\n# Example\n\n For `n = 0`, the output should be `1`.\n \n For `n = 1`, the output should be `2`.\n \n For `n = 2`, the output should be `4`.\n \n For `n = 3`, the output should be `7`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 \u2264 n \u2264 10000`\n\n\n - `[output]` an integer\n\n  The maximum number of pieces the sliced cake can have.\n\"\"\"\ndef cake_slice(n):",
    "3": "Python 3\n\"\"\"\n# Task\nA cake is sliced with `n` straight lines. Your task is to calculate the maximum number of pieces the cake can have.\n\n# Example\n\n For `n = 0`, the output should be `1`.\n \n For `n = 1`, the output should be `2`.\n \n For `n = 2`, the output should be `4`.\n \n For `n = 3`, the output should be `7`.\n \n See the following image to understand it:\n \n ![](https://cdn2.scratch.mit.edu/get_image/project/92275349_500x400.png?v=1450672809.79)\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 \u2264 n \u2264 10000`\n\n\n - `[output]` an integer\n\n  The maximum number of pieces the sliced cake can have.\n\"\"\"\ndef cake_slice(n):",
    "4": "Python 3\n\"\"\"\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nTry guessing the statement from this picture:  $3$ \n\nYou are given a non-negative integer $d$. You have to find two non-negative real numbers $a$ and $b$ such that $a + b = d$ and $a \\cdot b = d$.\n\n\n-----Input-----\n\nThe first line contains $t$ ($1 \\le t \\le 10^3$) \u2014 the number of test cases.\n\nEach test case contains one integer $d$ $(0 \\le d \\le 10^3)$.\n\n\n-----Output-----\n\nFor each test print one line.\n\nIf there is an answer for the $i$-th test, print \"Y\", and then the numbers $a$ and $b$.\n\nIf there is no answer for the $i$-th test, print \"N\".\n\nYour answer will be considered correct if $|(a + b) - a \\cdot b| \\le 10^{-6}$ and $|(a + b) - d| \\le 10^{-6}$.\n\n\n-----Example-----\nInput\n7\n69\n0\n1\n4\n5\n999\n1000\n\nOutput\nY 67.985071301 1.014928699\nY 0.000000000 0.000000000\nN\nY 2.000000000 2.000000000\nY 3.618033989 1.381966011\nY 997.998996990 1.001003010\nY 998.998997995 1.001002005\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nGiven the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val|\u00a0and A is an ancestor of B.\n\n\u00a0\nExample 1:\n\nInput: [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def maxAncestorDiff(self, root: TreeNode) -> int:",
    "7": "Python 3\n\"\"\"\nGiven the root of a binary tree, find the maximum value V for which there exists different nodes A and B where V = |A.val - B.val|\u00a0and A is an ancestor of B.\n(A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.)\n\u00a0\nExample 1:\n\nInput: [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\nExplanation: \nWe have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\n\n\u00a0\nNote:\n\nThe number of nodes in the tree is between 2 and 5000.\nEach node will have value between 0 and 100000.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def maxAncestorDiff(self, root: TreeNode) -> int:",
    "8": "Python 3\n\"\"\"\nEvery uppercase letter is Father, The corresponding lowercase letters is the Son. Given a string s, if the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n    \nExamples:\nInput:\nsc(\"Aab\")\nOutput:\n\"Aa\"\n\nInput:\nsc(\"AabBc\")\nOutput:\n\"AabB\"\n\nInput:\nsc(\"AaaaAaab\")\nOutput:\n\"AaaaAaa\"\n\nInput:\nsc(\"aAAAaAAb\")\nOutput:\n\"aAAAaAA\"\n\"\"\"\ndef sc(s):",
    "9": "Python 3\n\"\"\"\nThis is the simple version of Shortest Code series. If you need some challenges, please try the [challenge version](http://www.codewars.com/kata/56f928b19982cc7a14000c9d)\n\n## Task: \n\n  Every uppercase letter is Father, The corresponding lowercase letters is the Son.\n    \n  Give you a string ```s```, If the father and son both exist, keep them. If it is a separate existence, delete them. Return the result.\n    \n  For example: \n    \n   ```sc(\"Aab\")``` should return ```\"Aa\"```\n    \n   ```sc(\"AabBc\")``` should return ```\"AabB\"```\n   \n   ```sc(\"AaaaAaab\")``` should return ```\"AaaaAaa\"```(father can have a lot of son)\n    \n   ```sc(\"aAAAaAAb\")``` should return ```\"aAAAaAA\"```(son also can have a lot of father ;-)\n    \n    \n### Series:\n - [Bug in Apple](http://www.codewars.com/kata/56fe97b3cc08ca00e4000dc9)\n - [Father and Son](http://www.codewars.com/kata/56fe9a0c11086cd842000008)\n - [Jumping Dutch act](http://www.codewars.com/kata/570bcd9715944a2c8e000009)\n - [Planting Trees](http://www.codewars.com/kata/5710443187a36a9cee0005a1)\n - [Give me the equation](http://www.codewars.com/kata/56fe9b65cc08cafbc5000de3)\n - [Find the murderer](http://www.codewars.com/kata/570f3fc5b29c702c5500043e)\n - [Reading a Book](http://www.codewars.com/kata/570ca6a520c69f39dd0016d4)\n - [Eat watermelon](http://www.codewars.com/kata/570df12ce6e9282a7d000947)\n - [Special factor](http://www.codewars.com/kata/570e5d0b93214b1a950015b1)\n - [Guess the Hat](http://www.codewars.com/kata/570ef7a834e61306da00035b)\n - [Symmetric Sort](http://www.codewars.com/kata/5705aeb041e5befba20010ba)\n - [Are they symmetrical?](http://www.codewars.com/kata/5705cc3161944b10fd0004ba)\n - [Max Value](http://www.codewars.com/kata/570771871df89cf59b000742)\n - [Trypophobia](http://www.codewars.com/kata/56fe9ffbc25bf33fff000f7c)\n - [Virus in Apple](http://www.codewars.com/kata/5700af83d1acef83fd000048)\n - [Balance Attraction](http://www.codewars.com/kata/57033601e55d30d3e0000633)\n - [Remove screws I](http://www.codewars.com/kata/5710a50d336aed828100055a)\n - [Remove screws II](http://www.codewars.com/kata/5710a8fd336aed00d9000594)\n - [Regular expression compression](http://www.codewars.com/kata/570bae4b0237999e940016e9)\n - [Collatz Array(Split or merge)](http://www.codewars.com/kata/56fe9d579b7bb6b027000001)\n - [Tidy up the room](http://www.codewars.com/kata/5703ace6e55d30d3e0001029)\n - [Waiting for a Bus](http://www.codewars.com/kata/57070eff924f343280000015)\n\"\"\"\ndef sc(s):",
    "10": "Python 3\n\"\"\"\nLet's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of independent test cases.\n\nEach test case consists of a single line containing two integers $a_{1}$ and $K$ ($1 \\le a_{1} \\le 10^{18}$, $1 \\le K \\le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\nInput\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n519\n528\n544\n564\n588\n628\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nLet's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}).$$\n\nHere $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. For examples refer to notes.\n\nYour task is calculate $a_{K}$ for given $a_{1}$ and $K$.\n\n\n-----Input-----\n\nThe first line contains one integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of independent test cases.\n\nEach test case consists of a single line containing two integers $a_{1}$ and $K$ ($1 \\le a_{1} \\le 10^{18}$, $1 \\le K \\le 10^{16}$) separated by a space.\n\n\n-----Output-----\n\nFor each test case print one integer $a_{K}$ on a separate line.\n\n\n-----Example-----\nInput\n8\n1 4\n487 1\n487 2\n487 3\n487 4\n487 5\n487 6\n487 7\n\nOutput\n42\n487\n519\n528\n544\n564\n588\n628\n\n\n\n-----Note-----\n\n$a_{1} = 487$ \n\n $a_{2} = a_{1} + minDigit(a_{1}) \\cdot maxDigit(a_{1}) = 487 + \\min (4, 8, 7) \\cdot \\max (4, 8, 7) = 487 + 4 \\cdot 8 = 519$ \n\n $a_{3} = a_{2} + minDigit(a_{2}) \\cdot maxDigit(a_{2}) = 519 + \\min (5, 1, 9) \\cdot \\max (5, 1, 9) = 519 + 1 \\cdot 9 = 528$ \n\n $a_{4} = a_{3} + minDigit(a_{3}) \\cdot maxDigit(a_{3}) = 528 + \\min (5, 2, 8) \\cdot \\max (5, 2, 8) = 528 + 2 \\cdot 8 = 544$ \n\n $a_{5} = a_{4} + minDigit(a_{4}) \\cdot maxDigit(a_{4}) = 544 + \\min (5, 4, 4) \\cdot \\max (5, 4, 4) = 544 + 4 \\cdot 5 = 564$ \n\n $a_{6} = a_{5} + minDigit(a_{5}) \\cdot maxDigit(a_{5}) = 564 + \\min (5, 6, 4) \\cdot \\max (5, 6, 4) = 564 + 4 \\cdot 6 = 588$ \n\n $a_{7} = a_{6} + minDigit(a_{6}) \\cdot maxDigit(a_{6}) = 588 + \\min (5, 8, 8) \\cdot \\max (5, 8, 8) = 588 + 5 \\cdot 8 = 628$\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n\nYou are given a sequence. You can multiply some numbers of the sequence p by -1. You want the number of inversions in the sequence to be minimum. Find the minimum number of inversions you can get.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains n integers \u2014 sequence p_1, p_2, ..., p_{n} (|p_{i}| \u2264 10^5). The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem \u2014 the minimum number of inversions you can get.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n0\n\nInput\n9\n-2 0 -1 0 -1 2 1 0 -1\n\nOutput\n6\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nJeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p_1, p_2, ..., p_{n} for his birthday.\n\nJeff hates inversions in sequences. An inversion in sequence a_1, a_2, ..., a_{n} is a pair of indexes i, j (1 \u2264 i < j \u2264 n), such that an inequality a_{i} > a_{j} holds.\n\nJeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 2000). The next line contains n integers \u2014 sequence p_1, p_2, ..., p_{n} (|p_{i}| \u2264 10^5). The numbers are separated by spaces.\n\n\n-----Output-----\n\nIn a single line print the answer to the problem \u2014 the minimum number of inversions Jeff can get.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n0\n\nInput\n9\n-2 0 -1 0 -1 2 1 0 -1\n\nOutput\n6\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nWrite a function get_num() or getNum() that receives an array with potentially unordered prime factors and output: an array with the found integer n at index 0, the amount of total divisors at index 1, followed the smallest factor and the biggest one.\n\nExample:\nInput:\nget_num([2,13,2,5,2,5,3,3])\nOutput:\n[23400, 71, 2, 11700]\nExplanation:\nYou need to find the number, n, to which that prime factorization belongs.\nIt will be:\nn = 2\u00b3.3\u00b2.5\u00b2.13 = 23400\nThe list of divisors for that number (23400) is:\n2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700\nThere is a total amount of 71 divisors. The smallest divisor is 2 and the highest 11700.\nSo the expected output will be: \n[23400, 71, 2, 11700]\n\"\"\"\ndef get_num(arr):",
    "15": "Python 3\n\"\"\"\nYou will be given the prime factors of a number as an array.\nE.g: ```[2,2,2,3,3,5,5,13]```\n\nYou need to find the number, n, to which that prime factorization belongs.\nIt will be:\n```\nn = 2\u00b3.3\u00b2.5\u00b2.13 = 23400\n```\nThen, generate the divisors of this number.\n\nYour function ```get_num() or getNum()``` will receive an array with potentially unordered prime factors and should output: an array with the found integer n at index 0, the amount of total divisors (both prime and compound numbers) at index 1, followed the smallest factor (index 2, and the biggest one (last element)\n\nWe will see the example given above with the only difference that the array of the prime factors is unordered.\n\nThe list of divisors for that number (23400) is:\n```\n2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700 (not considering the integer 23400 itself)\n```\nThere is a total amount of ```71``` divisors. The smallest divisor is ```2``` and the highest ```11700```.\nSo the expected output will be: \n```\nget_num([2,13,2,5,2,5,3,3]) == [23400, 71, 2, 11700]\n```\nEnjoy!\n\"\"\"\ndef get_num(arr):",
    "16": "Python 3\n\"\"\"\nLet x, y, and z, be non-negative integers. d_1 reprsents the absolute difference between x and y, and d_2 represents\nthe absolute difference between y and z. Your goal is to figure out if d_1 and d_2 can become equivlanet after all moves have been expended.\n\nIn each move, you can increment x, y, or z by 1.\n\nYou will be given n, the total number of moves you're allowed, and k, the number of moves that had already\nbeen used.\n\n-----Input-----\n\nThe first line of the input contains a single integer corresponding to number of test cases t (1 \u2264 t \u2264 10^5).\n\nEach of the next t lines will contain four space-separated integers \nn, k, d_1, d_2 (1 \u2264 n \u2264 10^12;\u00a00 \u2264 k \u2264 n;\u00a00 \u2264 d_1, d_2 \u2264 k) \u2014 data for the current test case.\n\n\n-----Output-----\n\nFor each test case, output a single line containing either \"yes\" if it is possible for d_1 and d_2 to be equal,\nor \"no\" otherwise without quotes.\n\n\n-----Examples-----\nInput\n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n\nOutput\nyes\nyes\nyes\nno\nno  \n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are n games in a football tournament. Three teams are participating in it. Currently k games had already been played. \n\nYou are an avid football fan, but recently you missed the whole k games. Fortunately, you remember a guess of your friend for these k games. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be d_1 and that of between second and third team will be d_2.\n\nYou don't want any of team win the tournament, that is each team should have the same number of wins after n games. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament?\n\nNote that outcome of a match can not be a draw, it has to be either win or loss.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer corresponding to number of test cases t (1 \u2264 t \u2264 10^5).\n\nEach of the next t lines will contain four space-separated integers n, k, d_1, d_2 (1 \u2264 n \u2264 10^12;\u00a00 \u2264 k \u2264 n;\u00a00 \u2264 d_1, d_2 \u2264 k) \u2014 data for the current test case.\n\n\n-----Output-----\n\nFor each test case, output a single line containing either \"yes\" if it is possible to have no winner of tournament, or \"no\" otherwise (without quotes).\n\n\n-----Examples-----\nInput\n5\n3 0 0 0\n3 3 0 0\n6 4 1 0\n6 3 3 0\n3 3 3 2\n\nOutput\nyes\nyes\nyes\nno\nno\n\n\n\n-----Note-----\n\nSample 1. There has not been any match up to now (k = 0, d_1 = 0, d_2 = 0). If there will be three matches (1-2, 2-3, 3-1) and each team wins once, then at the end each team will have 1 win.\n\nSample 2. You missed all the games (k = 3). As d_1 = 0 and d_2 = 0, and there is a way to play three games with no winner of tournament (described in the previous sample), the answer is \"yes\".\n\nSample 3. You missed 4 matches, and d_1 = 1, d_2 = 0. These four matches can be: 1-2 (win 2), 1-3 (win 3), 1-2 (win 1), 1-3 (win 1). Currently the first team has 2 wins, the second team has 1 win, the third team has 1 win. Two remaining matches can be: 1-2 (win 2), 1-3 (win 3). In the end all the teams have equal number of wins (2 wins).\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf ```S1``` is ```[1,2,3,4,5]```\nThe qualified subsets are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nIf ```S2``` is ```[1,2,3]```, we have only ```4``` qualified subsets :\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"\ndef f(n):",
    "19": "Python 3\n\"\"\"\nWe have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf our set ```S1``` is equal to ```[1,2,3,4,5]```\nThe subsets that fulfill these property are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nFrom the set ```S2``` equals to```[1,2,3]```, it is obvious that we have only ```4``` subsets and are:\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"\ndef f(n):"
}