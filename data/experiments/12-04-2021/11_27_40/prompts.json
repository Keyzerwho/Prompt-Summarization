{
    "0": "Python 3\n\"\"\"\n You are given a number $n$. Is there a number $m$ that powers itself up to $n$ \n-----Input----- The first and only input line consists of a single integer $n$, the number Neelix saw on his screen. -----Output----- Output the number $x$, where $x^x = n$. Your answer must have an absolute or relative error of at most $10^{-6}$. -----Limits-----  - $1 \\leq n \\leq 10000000000$ -----Examples----- Sample Input: 4 Sample Output: 2.0\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nNeelix has been working on making the Altonian warp bubble power itself up. While waiting for the system checks to complete, he saw a number on his screen and wondered if there is a number that powers itself up to this number.\n\n-----Input-----\nThe first and only input line consists of a single integer $n$, the number Neelix saw on his screen.\n\n-----Output-----\nOutput the number $x$, where $x^x = n$. Your answer must have an absolute or relative error of at most $10^{-6}$.\n\n-----Limits-----\n - $1 \\leq n \\leq 10000000000$\n\n-----Examples-----\nSample Input:\n4\nSample Output:\n2.0\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given a radar which shows you the locations of the seven Dragon Balls on Planet X. You want to waste no time checking the truth of the old legend about wish-granting for yourself! There are $n$ cities in total on the Planet X, numbered from $1$ to $n$. You are currently at city $1$. To travel from one city to another, you can take any of $m$ bidirectional teleport trips, as many times as you like. The $i$-th teleporter costs $t_ i$ coins to use each time, and it can teleport you between cities $a_ i$ and $b_ i$. To collect a Dragon Ball, you simply need to visit the city where it s located, as indicated on your radar. It is possible that multiple Dragon Balls are at the same city; in this case you pick all of them all up at once if you visit that city.\n-----Input----- The first line of input contains two space-separated integers $n$ and $m$ $(1 \\leq n,m \\leq 200000)$, the number of cities and possible teleport trips. Then follow $m$ lines containing three space-separated integers $a_ i$, $b_ i$, and $t_ i$ each $(1 \\le a_ i, b_ i \\le n, 0 \\le t_ i \\le 10000)$, which, as explained above, represent the two cities connected by the teleport trip, and cost to use the teleporter. Then follows one line of seven space-separated integers, representing the city IDs of the seven Dragon Balls showing on the radar. Each ID $c$ satisfies the bound $1 \\leq c \\leq n$. -----Output----- Print the minimum number of coins that you need to spend to collect all seven Dragon Balls shown on the Dragon Ball radar. If there is no way to complete this task, print $-1$ instead. -----Examples----- Sample Input: 10 9 1 2 1 2 3 1 3 4 1 4 5 1 5 6 1 6 7 1 7 8 1 8 9 1 9 10 1 1 2 3 4 5 6 7 Sample Output: 6\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThere is a legendary tale about Dragon Balls on Planet X: if one collects seven Dragon Balls, the Dragon God will show up and help you fulfill your wishes.\n\nOne day, you are surprised to discover that the tale might possibly be true: you found a Dragon Ball radar at a flea market! The radar shows you the locations of the seven Dragon Balls on Planet X. You want to waste no time checking the truth of the old legend about wish-granting for yourself!\n\nThere are $n$ cities in total on the Planet X, numbered from $1$ to $n$. You are currently at city $1$. To travel from one city to another, you can take any of $m$ bidirectional teleport trips, as many times as you like. The $i$-th teleporter costs $t_ i$ coins to use each time, and it can teleport you between cities $a_ i$ and $b_ i$. To collect a Dragon Ball, you simply need to visit the city where it\u2019s located, as indicated on your radar. It is possible that multiple Dragon Balls are at the same city; in this case you pick all of them all up at once if you visit that city.\n\n-----Input-----\nThe first line of input contains two space-separated integers $n$ and $m$ $(1 \\leq n,m \\leq 200000)$, the number of cities and possible teleport trips. Then follow $m$ lines containing three space-separated integers $a_ i$, $b_ i$, and $t_ i$ each $(1 \\le a_ i, b_ i \\le n, 0 \\le t_ i \\le 10000)$, which, as explained above, represent the two cities connected by the teleport trip, and cost to use the teleporter. Then follows one line of seven space-separated integers, representing the city IDs of the seven Dragon Balls showing on the radar. Each ID $c$ satisfies the bound $1 \\leq c \\leq n$.\n\n-----Output-----\nPrint the minimum number of coins that you need to spend to collect all seven Dragon Balls shown on the Dragon Ball radar. If there is no way to complete this task, print $-1$ instead.\n\n-----Examples-----\nSample Input:\n10 9\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n7 8 1\n8 9 1\n9 10 1\n1 2 3 4 5 6 7\nSample Output:\n6\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a number $n$ and a list of weights $w_1,\\dots,w_n$. You need to find a number $r$ such that $r\\cdot w_i\\equiv w_j\\pmod{998244353}$ for all $i,j$. \n-----Input----- The first line contains two integers $n$ and $m$ ($1\\le n\\le 2\\cdot 10^5$, $1\\le m\\le 3000$) \u2014 the number of pictures and the number of visits to the website. The second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$ , Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes. The third line contains $n$ positive integers $w_1,w_2,\\ldots,w_n$ ($w_i \\geq 1$) \u2014 the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed $998244352-m$. -----Output----- The output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$. -----Examples----- Input 2 1 0 1 2 1 Output 332748119 332748119 Input 1 2 1 1 Output 3 Input 3 3 0 1 1 4 3 5 Output 160955686 185138929 974061117 -----Note----- In the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$. So, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$ . Because $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$. In the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$. So, the expected weight is $1+2=3$. Nauuo is very naughty so she didn't give you any hint of the third example.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nThe only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes $n$ pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\n\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\n\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 2\\cdot 10^5$, $1\\le m\\le 3000$) \u2014 the number of pictures and the number of visits to the website.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$ , Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains $n$ positive integers $w_1,w_2,\\ldots,w_n$ ($w_i \\geq 1$) \u2014 the initial weights of the pictures. It is guaranteed that the sum of all the initial weights does not exceed $998244352-m$.\n\n\n-----Output-----\n\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$.\n\n\n-----Examples-----\nInput\n2 1\n0 1\n2 1\n\nOutput\n332748119\n332748119\n\nInput\n1 2\n1\n1\n\nOutput\n3\n\nInput\n3 3\n0 1 1\n4 3 5\n\nOutput\n160955686\n185138929\n974061117\n\n\n\n-----Note-----\n\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\n\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$ .\n\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\n\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\n\nSo, the expected weight is $1+2=3$.\n\nNauuo is very naughty so she didn't give you any hint of the third example.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n The 3rd round of COCI is already here! In order to bet on predict the scores, we have assumed the following:  - If contestant $A$ scored strictly more points than contestant $B$ in each of the first two rounds, then in the third round $A$ will score at least an equal amount of points as $B$. Of course, in each round (including this one, the 3rd one) it is possible to score from 0 to 650 points. On the total ranking list, contestants are sorted descending according to the sum of points from all three rounds. The contestants with an equal sum share the same place and the next contestant gets the realistic following place. For example, contestants with sums equal to 1000, 1000, 900, 900 and 800 points win places 1, 1, 3, 3 and 5, respectively. For each of the $N$ contestants, we know the number of points scored in the first and second round. Given the aforementioned assumption, determine the highest and lowest place each contestant can get on the total ranking list after three rounds of COCI.\n-----Input----- The first line of input contains an integer $N$ ($1 \\leq N \\leq 500000$), the number of contestants. Each of the following $N$ lines contains two integers from the interval $[0, 650]$: the number of points each contestant won in the first and second round. -----Output----- For each contestant, in the order given in the input, output two integers per line: the required highest and lowest place they can get on the total ranking list. -----Examples----- Sample Input: 5 250 180 250 132 220 123 132 194 220 105 Sample Output: 1 3 1 3 3 5 1 5 3 5\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThe 3rd round of COCI is already here! In order to bet on predict the scores, we have assumed the following:\n - If contestant $A$ scored strictly more points than contestant $B$ in each of the first two rounds, then in the third round $A$ will score at least an equal amount of points as $B$.\n\nOf course, in each round (including this one, the 3rd one) it is possible to score from 0 to 650 points. On the total ranking list, contestants are sorted descending according to the sum of points from all three rounds. The contestants with an equal sum share the same place and the next contestant gets the realistic following place. For example, contestants with sums equal to 1000, 1000, 900, 900 and 800 points win places 1, 1, 3, 3 and 5, respectively.\n\nFor each of the $N$ contestants, we know the number of points scored in the first and second round. Given the aforementioned assumption, determine the highest and lowest place each contestant can get on the total ranking list after three rounds of COCI.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\leq N \\leq 500000$), the number of contestants.\n\nEach of the following $N$ lines contains two integers from the interval $[0, 650]$: the number of points each contestant won in the first and second round.\n\n-----Output-----\nFor each contestant, in the order given in the input, output two integers per line: the required highest and lowest place they can get on the total ranking list.\n\n-----Examples-----\nSample Input:\n5\n250 180\n250 132\n220 123\n132 194\n220 105\nSample Output:\n1 3\n1 3\n3 5\n1 5\n3 5\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given $n$ planets and $m$ tons of useful cargo. You need to calculate the minimum mass of fuel to load into the rocket. \n-----Input----- The first line contains a single integer $n$ ($2 \\le n \\le 1000$)\u00a0\u2014 number of planets. The second line contains the only integer $m$ ($1 \\le m \\le 1000$)\u00a0\u2014 weight of the payload. The third line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 1000$), where $a_i$ is the number of tons, which can be lifted off by one ton of fuel. The fourth line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 1000$), where $b_i$ is the number of tons, which can be landed by one ton of fuel.  It is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel. -----Output----- If Natasha can fly to Mars through $(n - 2)$ planets and return to Earth, print the minimum mass of fuel (in tons) that Natasha should take. Otherwise, print a single number $-1$. It is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel. The answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$. Formally, let your answer be $p$, and the jury's answer be $q$. Your answer is considered correct if $\\frac{|p - q|}{\\max{(1, |q|)}} \\le 10^{-6}$. -----Examples----- Input 2 12 11 8 7 5 Output 10.0000000000 Input 3 1 1 4 1 2 5 3 Output -1 Input 6 2 4 6 3 3 5 6 2 6 3 6 5 3 Output 85.4800000000 -----Note----- Let's consider the first example. Initially, the mass of a rocket with fuel is $22$ tons. At take-off from Earth one ton of fuel can lift off $11$ tons of cargo, so to lift off $22$ tons you need to burn $2$ tons of fuel. Remaining weight of the rocket with fuel is $20$ tons. During landing on Mars, one ton of fuel can land $5$ tons of cargo, so for landing $20$ tons you will need to burn $4$ tons of fuel. There will be $16$ tons of the rocket with fuel remaining. While taking off from Mars, one ton of fuel can raise $8$ tons of cargo, so to lift off $16$ tons you will need to burn $2$ tons of fuel. There will be $14$ tons of rocket with fuel after that. During landing on Earth, one ton of fuel can land $7$ tons of cargo, so for landing $14$ tons you will need to burn $2$ tons of fuel. Remaining weight is $12$ tons, that is, a rocket without any fuel. In the second case, the rocket will not be able even to take off from Earth.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nNatasha is going to fly on a rocket to Mars and return to Earth. Also, on the way to Mars, she will land on $n - 2$ intermediate planets. Formally: we number all the planets from $1$ to $n$. $1$ is Earth, $n$ is Mars. Natasha will make exactly $n$ flights: $1 \\to 2 \\to \\ldots n \\to 1$.\n\nFlight from $x$ to $y$ consists of two phases: take-off from planet $x$ and landing to planet $y$. This way, the overall itinerary of the trip will be: the $1$-st planet $\\to$ take-off from the $1$-st planet $\\to$ landing to the $2$-nd planet $\\to$ $2$-nd planet $\\to$ take-off from the $2$-nd planet $\\to$ $\\ldots$ $\\to$ landing to the $n$-th planet $\\to$ the $n$-th planet $\\to$ take-off from the $n$-th planet $\\to$ landing to the $1$-st planet $\\to$ the $1$-st planet.\n\nThe mass of the rocket together with all the useful cargo (but without fuel) is $m$ tons. However, Natasha does not know how much fuel to load into the rocket. Unfortunately, fuel can only be loaded on Earth, so if the rocket runs out of fuel on some other planet, Natasha will not be able to return home. Fuel is needed to take-off from each planet and to land to each planet. It is known that $1$ ton of fuel can lift off $a_i$ tons of rocket from the $i$-th planet or to land $b_i$ tons of rocket onto the $i$-th planet. \n\nFor example, if the weight of rocket is $9$ tons, weight of fuel is $3$ tons and take-off coefficient is $8$ ($a_i = 8$), then $1.5$ tons of fuel will be burnt (since $1.5 \\cdot 8 = 9 + 3$). The new weight of fuel after take-off will be $1.5$ tons. \n\nPlease note, that it is allowed to burn non-integral amount of fuel during take-off or landing, and the amount of initial fuel can be non-integral as well.\n\nHelp Natasha to calculate the minimum mass of fuel to load into the rocket. Note, that the rocket must spend fuel to carry both useful cargo and the fuel itself. However, it doesn't need to carry the fuel which has already been burnt. Assume, that the rocket takes off and lands instantly.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 1000$)\u00a0\u2014 number of planets.\n\nThe second line contains the only integer $m$ ($1 \\le m \\le 1000$)\u00a0\u2014 weight of the payload.\n\nThe third line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 1000$), where $a_i$ is the number of tons, which can be lifted off by one ton of fuel.\n\nThe fourth line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\le b_i \\le 1000$), where $b_i$ is the number of tons, which can be landed by one ton of fuel. \n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel.\n\n\n-----Output-----\n\nIf Natasha can fly to Mars through $(n - 2)$ planets and return to Earth, print the minimum mass of fuel (in tons) that Natasha should take. Otherwise, print a single number $-1$.\n\nIt is guaranteed, that if Natasha can make a flight, then it takes no more than $10^9$ tons of fuel.\n\nThe answer will be considered correct if its absolute or relative error doesn't exceed $10^{-6}$. Formally, let your answer be $p$, and the jury's answer be $q$. Your answer is considered correct if $\\frac{|p - q|}{\\max{(1, |q|)}} \\le 10^{-6}$.\n\n\n-----Examples-----\nInput\n2\n12\n11 8\n7 5\n\nOutput\n10.0000000000\n\nInput\n3\n1\n1 4 1\n2 5 3\n\nOutput\n-1\n\nInput\n6\n2\n4 6 3 3 5 6\n2 6 3 6 5 3\n\nOutput\n85.4800000000\n\n\n\n-----Note-----\n\nLet's consider the first example.\n\nInitially, the mass of a rocket with fuel is $22$ tons. At take-off from Earth one ton of fuel can lift off $11$ tons of cargo, so to lift off $22$ tons you need to burn $2$ tons of fuel. Remaining weight of the rocket with fuel is $20$ tons. During landing on Mars, one ton of fuel can land $5$ tons of cargo, so for landing $20$ tons you will need to burn $4$ tons of fuel. There will be $16$ tons of the rocket with fuel remaining. While taking off from Mars, one ton of fuel can raise $8$ tons of cargo, so to lift off $16$ tons you will need to burn $2$ tons of fuel. There will be $14$ tons of rocket with fuel after that. During landing on Earth, one ton of fuel can land $7$ tons of cargo, so for landing $14$ tons you will need to burn $2$ tons of fuel. Remaining weight is $12$ tons, that is, a rocket without any fuel.\n\nIn the second case, the rocket will not be able even to take off from Earth.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given an array $a$ consisting of one element $1$ ($a = [1]$). In one move, you can do one of the following things:   Increase some (single) element of $a$ by $1$ (choose some $i$ from $1$ to the current length of $a$ and increase $a_i$ by one);  Append the copy of some (single) element of $a$ to the end of the array (choose some $i$ from $1$ to the current length of $a$ and append $a_i$ to the end of the array).  Your task is to find the minimum number of moves required to obtain the array with the sum at least $n$. You have to answer $t$ independent test cases. \n-----Input----- The first line of the input will contain a single integer, n (1 \u2264 n \u2264 100 000). -----Output----- Output a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left. -----Examples----- Input 1 Output 1 Input 2 Output 2 Input 3 Output 2 1 Input 8 Output 4 -----Note----- In the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1. In the second sample, we perform the following steps: Initially we place a single slime in a row by itself. Thus, row is initially 1. Then, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2. In the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1. In the last sample, the steps look as follows:   1  2  2 1  3  3 1  3 2  3 2 1  4\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYour friend recently gave you some slimes for your birthday. You have n slimes all initially with value 1.\n\nYou are going to play a game with these slimes. Initially, you put a single slime by itself in a row. Then, you will add the other n - 1 slimes one by one. When you add a slime, you place it at the right of all already placed slimes. Then, while the last two slimes in the row have the same value v, you combine them together to create a slime with value v + 1.\n\nYou would like to see what the final state of the row is after you've added all n slimes. Please print the values of the slimes in the row from left to right.\n\n\n-----Input-----\n\nThe first line of the input will contain a single integer, n (1 \u2264 n \u2264 100 000).\n\n\n-----Output-----\n\nOutput a single line with k integers, where k is the number of slimes in the row after you've finished the procedure described in the problem statement. The i-th of these numbers should be the value of the i-th slime from the left.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n3\n\nOutput\n2 1\n\nInput\n8\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample, we only have a single slime with value 1. The final state of the board is just a single slime with value 1.\n\nIn the second sample, we perform the following steps:\n\nInitially we place a single slime in a row by itself. Thus, row is initially 1.\n\nThen, we will add another slime. The row is now 1 1. Since two rightmost slimes have the same values, we should replace these slimes with one with value 2. Thus, the final state of the board is 2.\n\nIn the third sample, after adding the first two slimes, our row is 2. After adding one more slime, the row becomes 2 1.\n\nIn the last sample, the steps look as follows:   1  2  2 1  3  3 1  3 2  3 2 1  4\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Given a line segment, find the minimum distance between two points on the line segment. \n-----Input----- The first line of the input contains four integers d, L, v_1, v_2 (1 \u2264 d, L, v_1, v_2 \u2264 10 000, d < L)\u00a0\u2014 Luke's width, the initial position of the second press and the speed of the first and second presses, respectively. -----Output----- Print a single real value\u00a0\u2014 the maximum period of time Luke can stay alive for. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.  Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$. -----Examples----- Input 2 6 2 2 Output 1.00000000000000000000 Input 1 9 1 2 Output 2.66666666666666650000 -----Note----- In the first sample Luke should stay exactly in the middle of the segment, that is at coordinates [2;4], as the presses move with the same speed. In the second sample he needs to occupy the position $[ 2 \\frac{2}{3} ; 3 \\frac{2}{3} ]$. In this case both presses move to his edges at the same time.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLuke Skywalker got locked up in a rubbish shredder between two presses. R2D2 is already working on his rescue, but Luke needs to stay alive as long as possible. For simplicity we will assume that everything happens on a straight line, the presses are initially at coordinates 0 and L, and they move towards each other with speed v_1 and v_2, respectively. Luke has width d and is able to choose any position between the presses. Luke dies as soon as the distance between the presses is less than his width. Your task is to determine for how long Luke can stay alive.\n\n\n-----Input-----\n\nThe first line of the input contains four integers d, L, v_1, v_2 (1 \u2264 d, L, v_1, v_2 \u2264 10 000, d < L)\u00a0\u2014 Luke's width, the initial position of the second press and the speed of the first and second presses, respectively.\n\n\n-----Output-----\n\nPrint a single real value\u00a0\u2014 the maximum period of time Luke can stay alive for. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n2 6 2 2\n\nOutput\n1.00000000000000000000\n\nInput\n1 9 1 2\n\nOutput\n2.66666666666666650000\n\n\n\n-----Note-----\n\nIn the first sample Luke should stay exactly in the middle of the segment, that is at coordinates [2;4], as the presses move with the same speed.\n\nIn the second sample he needs to occupy the position $[ 2 \\frac{2}{3} ; 3 \\frac{2}{3} ]$. In this case both presses move to his edges at the same time.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a list of which pairs of houses are already connected by a network cable. Determine which houses are not yet connected to the internet. \n-----Input----- The first line of input contains two integers $1 \\leq N,M \\leq 200000$, where $N$ is the number of houses and $M$ is the number of network cables already deployed. Then follow $M$ lines, each containing a pair of distinct house numbers $1 \\leq a, b \\leq N$ meaning that house number $a$ and house number $b$ are already connected by a network cable. Each house pair is listed at most once in the input. -----Output----- If all the houses are already connected to the internet, output one line containing the string Connected. Otherwise, output a list of house numbers in increasing order, one per line, representing the houses that are not yet connected to the internet. -----Examples----- Sample Input 1: 6 4 1 2 2 3 3 4 5 6 Sample Output 1: 5 6 Sample Input 2: 2 1 2 1 Sample Output 2: Connected\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nA new town is being built far out in the country, and currently there are $N$ houses. People have already started moving in. However, some of the houses aren\u2019t connected to the internet yet, and naturally residents are outraged.\n\nThe houses are numbered $1$ to $N$. House number $1$ has already been connected to the internet via a long network cable to a neighboring town. The plan is to provide internet to other houses by connecting pairs of houses with separate network cables. A house is connected to the internet if it has a network cable to another house that\u2019s already connected to the internet.\n\nGiven a list of which pairs of houses are already connected by a network cable, determine which houses are not yet connected to the internet.\n\n-----Input-----\nThe first line of input contains two integers $1 \\leq N,M \\leq 200000$, where $N$ is the number of houses and $M$ is the number of network cables already deployed. Then follow $M$ lines, each containing a pair of distinct house numbers $1 \\leq a, b \\leq N$ meaning that house number $a$ and house number $b$ are already connected by a network cable. Each house pair is listed at most once in the input.\n\n-----Output-----\nIf all the houses are already connected to the internet, output one line containing the string Connected. Otherwise, output a list of house numbers in increasing order, one per line, representing the houses that are not yet connected to the internet.\n\n-----Examples-----\nSample Input 1:\n6 4\n1 2\n2 3\n3 4\n5 6\nSample Output 1:\n5\n6\n\nSample Input 2:\n2 1\n2 1\nSample Output 2:\nConnected\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Calculate the number of strings that are prefixes of at least one of the written strings. \n-----Input----- The first line contains two integers $n$ and $k$ ($1 \\leq n \\leq 5 \\cdot 10^5$, $1 \\leq k \\leq 10^9$). The second line contains a string $s$ ($|s| = n$)\u00a0\u2014 the string consisting of letters \"a\" and \"b. The third line contains a string $t$ ($|t| = n$)\u00a0\u2014 the string consisting of letters \"a\" and \"b. It is guaranteed that string $s$ is lexicographically not bigger than $t$. -----Output----- Print one number\u00a0\u2014 maximal value of $c$. -----Examples----- Input 2 4 aa bb Output 6 Input 3 3 aba bba Output 8 Input 4 5 abbb baaa Output 8 -----Note----- In the first example, Nut could write strings \"aa\", \"ab\", \"ba\", \"bb\". These $4$ strings are prefixes of at least one of the written strings, as well as \"a\" and \"b\". Totally, $6$ strings. In the second example, Nut could write strings \"aba\", \"baa\", \"bba\". In the third example, there are only two different strings that Nut could write. If both of them are written, $c=8$.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nRecently, the Fair Nut has written $k$ strings of length $n$, consisting of letters \"a\" and \"b\". He calculated $c$\u00a0\u2014 the number of strings that are prefixes of at least one of the written strings. Every string was counted only one time.\n\nThen, he lost his sheet with strings. He remembers that all written strings were lexicographically not smaller than string $s$ and not bigger than string $t$. He is interested: what is the maximum value of $c$ that he could get.\n\nA string $a$ is lexicographically smaller than a string $b$ if and only if one of the following holds: $a$ is a prefix of $b$, but $a \\ne b$; in the first position where $a$ and $b$ differ, the string $a$ has a letter that appears earlier in the alphabet than the corresponding letter in $b$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\leq n \\leq 5 \\cdot 10^5$, $1 \\leq k \\leq 10^9$).\n\nThe second line contains a string $s$ ($|s| = n$)\u00a0\u2014 the string consisting of letters \"a\" and \"b.\n\nThe third line contains a string $t$ ($|t| = n$)\u00a0\u2014 the string consisting of letters \"a\" and \"b.\n\nIt is guaranteed that string $s$ is lexicographically not bigger than $t$.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 maximal value of $c$.\n\n\n-----Examples-----\nInput\n2 4\naa\nbb\n\nOutput\n6\n\nInput\n3 3\naba\nbba\n\nOutput\n8\n\nInput\n4 5\nabbb\nbaaa\n\nOutput\n8\n\n\n\n-----Note-----\n\nIn the first example, Nut could write strings \"aa\", \"ab\", \"ba\", \"bb\". These $4$ strings are prefixes of at least one of the written strings, as well as \"a\" and \"b\". Totally, $6$ strings.\n\nIn the second example, Nut could write strings \"aba\", \"baa\", \"bba\".\n\nIn the third example, there are only two different strings that Nut could write. If both of them are written, $c=8$.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a set of cards with multi-digit numbers on them. You need to select two cards that add up to a given sum.                                                                                                                                                                                                                                                                           l\n-----Input----- The first line contains two integers, $n$, the number of cards, and $s$, the desired sum. The second line will contain $n$ integers between $1$ and $100000000$ inclusive. You may assume that $1\\leq n\\leq 100000$ and $2\\leq s\\leq 200000000$. -----Output----- The output should be a single line consisting of the string YES if two cards can be chosen such that (in some orientation) they add up to $s$, and the string NO otherwise. -----Examples----- Sample Input: 3 66 15 21 22 Sample Output: NO\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nSimon is a contestant on the new exciting game show, Add \u2019Em Up! In this show, contestants are given a set of cards with multi-digit numbers on them, and need to select two cards that add up to a given sum. However, to make things more interesting, the font that the cards are printed in (see below) means that certain cards will display different numbers if turned upside-down, and it is legal to turn either or both of the cards if necessary to generate the sum. Please help Simon win the game!\n\n-----Input-----\nThe first line contains two integers, $n$, the number of cards, and $s$, the desired sum. The second line will contain $n$ integers between $1$ and $100000000$ inclusive. You may assume that $1\\leq n\\leq 100000$ and $2\\leq s\\leq 200000000$.\n\n-----Output-----\nThe output should be a single line consisting of the string YES if two cards can be chosen such that (in some orientation) they add up to $s$, and the string NO otherwise.\n\n-----Examples-----\nSample Input:\n3 66\n15 21 22\nSample Output:\nNO\n\"\"\"\ndef code():"
}