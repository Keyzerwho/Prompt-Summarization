{
    "0": "Python 3\n\"\"\"\nThe queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally. \n\n## Task:\nWrite a function ```availableMoves(position)``` which returns possibly moves of chess queen. Returned value should be an ```array``` with possible moves sorted alphabetically, exluded starting position.\n\nFor example when input position is ```A1``` return value should be:\n\n```[\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\", \"B1\", \"B2\", \"C1\", \"C3\", \"D1\", \"D4\", \"E1\", \"E5\", \"F1\", \"F6\", \"G1\", \"G7\", \"H1\", \"H8\"]```\n\n```\n     A   B   C   D   E   F   G   H\n   + - + - + - + - + - + - + - + - +\n1  | Q | x | x | x | x | x | x | x |\n   + - + - + - + - + - + - + - + - +\n2  | x | x |   |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n3  | x |   | x |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n4  | x |   |   | x |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n5  | x |   |   |   | x |   |   |   |\n   + - + - + - + - + - + - + - + - +\n6  | x |   |   |   |   | x |   |   |\n   + - + - + - + - + - + - + - + - +\n7  | x |   |   |   |   |   | x |   |\n   + - + - + - + - + - + - + - + - +\n8  | x |   |   |   |   |   |   | x |\n   + - + - + - + - + - + - + - + - +\n   \nQ = queen\nx = available move\n```\n\n## Input:\n- input position can be any type (array, number, string and so on). If input position is not a string then return empty array.\n- valid input position is one letter from ```A``` to ```H``` with number from ```1``` to ```8```, for example ```A1```, ```C8```, ```B3```. If input is invalid (for example ```A10``` or ```H0```) then return empty array.\n\"\"\"\ndef available_moves(position):",
    "1": "Python 3\n\"\"\"\nThe queen can be moved any number of unoccupied squares in a straight line vertically, horizontally, or diagonally, thus combining the moves of the rook and bishop. The queen captures by occupying the square on which an enemy piece sits. (wikipedia: https://en.wikipedia.org/wiki/Queen_(chess)).\n\n## Task:\nWrite a function ```availableMoves(position)``` which returns possibly moves of chess queen. Returned value should be an ```array``` with possible moves sorted alphabetically, exluded starting position.\n\nFor example when input position is ```A1``` return value should be:\n\n```[\"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"A7\", \"A8\", \"B1\", \"B2\", \"C1\", \"C3\", \"D1\", \"D4\", \"E1\", \"E5\", \"F1\", \"F6\", \"G1\", \"G7\", \"H1\", \"H8\"]```\n\n```\n     A   B   C   D   E   F   G   H\n   + - + - + - + - + - + - + - + - +\n1  | Q | x | x | x | x | x | x | x |\n   + - + - + - + - + - + - + - + - +\n2  | x | x |   |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n3  | x |   | x |   |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n4  | x |   |   | x |   |   |   |   |\n   + - + - + - + - + - + - + - + - +\n5  | x |   |   |   | x |   |   |   |\n   + - + - + - + - + - + - + - + - +\n6  | x |   |   |   |   | x |   |   |\n   + - + - + - + - + - + - + - + - +\n7  | x |   |   |   |   |   | x |   |\n   + - + - + - + - + - + - + - + - +\n8  | x |   |   |   |   |   |   | x |\n   + - + - + - + - + - + - + - + - +\n   \nQ = queen\nx = available move\n```\n\n## Input:\n- input position can be any type (array, number, string and so on). If input position is not a string then return empty array.\n- valid input position is one letter from ```A``` to ```H``` with number from ```1``` to ```8```, for example ```A1```, ```C8```, ```B3```. If input is invalid (for example ```A10``` or ```H0```) then return empty array.\n\"\"\"\ndef available_moves(position):",
    "2": "Python 3\n\"\"\"\nYou are given $n$ points on the plane. The polygon formed from all the $n$ points is strictly convex, and there are no three collinear points. The points are numbered from $1$ to $n$, in clockwise order.\n\nFind the maximum possible perimeter for each possible number of points (i.e. $3$ to $n$).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 3\\cdot 10^5$)\u00a0\u2014 the number of points. \n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^8 \\leq x_i, y_i \\leq 10^8$)\u00a0\u2014 the coordinates of point $p_i$.\n\nThe set of points is guaranteed to be convex, all points are distinct, the points are ordered in clockwise order, and there will be no three collinear points.\n\n\n-----Output-----\n\nFor each $i$ ($3\\leq i\\leq n$), output $f(i)$.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 3\n3 0\n1 3\n\nOutput\n12 14 \nInput\n3\n0 0\n0 2\n2 0\n\nOutput\n8 \n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are given $n$ points on the plane. The polygon formed from all the $n$ points is strictly convex, that is, the polygon is convex, and there are no three collinear points (i.e. lying in the same straight line). The points are numbered from $1$ to $n$, in clockwise order.\n\nWe define the distance between two points $p_1 = (x_1, y_1)$ and $p_2 = (x_2, y_2)$ as their Manhattan distance: $$d(p_1, p_2) = |x_1 - x_2| + |y_1 - y_2|.$$\n\nFurthermore, we define the perimeter of a polygon, as the sum of Manhattan distances between all adjacent pairs of points on it; if the points on the polygon are ordered as $p_1, p_2, \\ldots, p_k$ $(k \\geq 3)$, then the perimeter of the polygon is $d(p_1, p_2) + d(p_2, p_3) + \\ldots + d(p_k, p_1)$.\n\nFor some parameter $k$, let's consider all the polygons that can be formed from the given set of points, having any $k$ vertices, such that the polygon is not self-intersecting. For each such polygon, let's consider its perimeter. Over all such perimeters, we define $f(k)$ to be the maximal perimeter.\n\nPlease note, when checking whether a polygon is self-intersecting, that the edges of a polygon are still drawn as straight lines. For instance, in the following pictures:\n\n [Image] \n\nIn the middle polygon, the order of points ($p_1, p_3, p_2, p_4$) is not valid, since it is a self-intersecting polygon. The right polygon (whose edges resemble the Manhattan distance) has the same order and is not self-intersecting, but we consider edges as straight lines. The correct way to draw this polygon is ($p_1, p_2, p_3, p_4$), which is the left polygon.\n\nYour task is to compute $f(3), f(4), \\ldots, f(n)$. In other words, find the maximum possible perimeter for each possible number of points (i.e. $3$ to $n$).\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($3 \\leq n \\leq 3\\cdot 10^5$)\u00a0\u2014 the number of points. \n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^8 \\leq x_i, y_i \\leq 10^8$)\u00a0\u2014 the coordinates of point $p_i$.\n\nThe set of points is guaranteed to be convex, all points are distinct, the points are ordered in clockwise order, and there will be no three collinear points.\n\n\n-----Output-----\n\nFor each $i$ ($3\\leq i\\leq n$), output $f(i)$.\n\n\n-----Examples-----\nInput\n4\n2 4\n4 3\n3 0\n1 3\n\nOutput\n12 14 \nInput\n3\n0 0\n0 2\n2 0\n\nOutput\n8 \n\n\n-----Note-----\n\nIn the first example, for $f(3)$, we consider four possible polygons:   ($p_1, p_2, p_3$), with perimeter $12$.  ($p_1, p_2, p_4$), with perimeter $8$.  ($p_1, p_3, p_4$), with perimeter $12$.  ($p_2, p_3, p_4$), with perimeter $12$. \n\nFor $f(4)$, there is only one option, taking all the given points. Its perimeter $14$.\n\nIn the second example, there is only one possible polygon. Its perimeter is $8$.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nYou are given two integers $d, m$, find the number of arrays $a$, with constraints.\nThe length of $a$ is $n$, $n \\ge 1$  $1 \\le a_1 < a_2 < \\dots < a_n \\le d$  \nDefine an array $b$ of length $n$ as follows: $b_1 = a_1$, $\\forall i > 1, b_i = b_{i - 1} \\oplus a_i$, \nwhere $\\oplus$ is the bitwise exclusive-or. \nAfter constructing an array $b$, the constraint $b_1 < b_2 < \\dots < b_{n - 1} < b_n$ should hold. \nYou need to find the answer modulo $m$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$).\n\nEach of the next $t$ lines contains two integers $d, m$ ($1 \\leq d, m \\leq 10^9$).\n\nNote that $m$ is not necessary the prime!\n\n\n-----Output-----\n\nPrint the number of arrays $a$, modulo $m$.\n\n\n-----Example-----\nInput\n10\n1 1000000000\n2 999999999\n3 99999998\n4 9999997\n5 999996\n6 99995\n7 9994\n8 993\n9 92\n10 1\n\nOutput\n1\n3\n5\n11\n17\n23\n29\n59\n89\n0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nDreamoon likes sequences very much. So he created a problem about the sequence that you can't find in OEIS: \n\nYou are given two integers $d, m$, find the number of arrays $a$, satisfying the following constraints:  The length of $a$ is $n$, $n \\ge 1$  $1 \\le a_1 < a_2 < \\dots < a_n \\le d$  Define an array $b$ of length $n$ as follows: $b_1 = a_1$, $\\forall i > 1, b_i = b_{i - 1} \\oplus a_i$, where $\\oplus$ is the bitwise exclusive-or (xor). After constructing an array $b$, the constraint $b_1 < b_2 < \\dots < b_{n - 1} < b_n$ should hold. \n\nSince the number of possible arrays may be too large, you need to find the answer modulo $m$.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\leq t \\leq 100$) denoting the number of test cases in the input.\n\nEach of the next $t$ lines contains two integers $d, m$ ($1 \\leq d, m \\leq 10^9$).\n\nNote that $m$ is not necessary the prime!\n\n\n-----Output-----\n\nFor each test case, print the number of arrays $a$, satisfying all given constrains, modulo $m$.\n\n\n-----Example-----\nInput\n10\n1 1000000000\n2 999999999\n3 99999998\n4 9999997\n5 999996\n6 99995\n7 9994\n8 993\n9 92\n10 1\n\nOutput\n1\n3\n5\n11\n17\n23\n29\n59\n89\n0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYou are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\nSwap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$. Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are given two binary strings $a$ and $b$ of the same length. You can perform the following two operations on the string $a$:\n\nSwap any two bits at indices $i$ and $j$ respectively ($1 \\le i, j \\le n$), the cost of this operation is $|i - j|$, that is, the absolute difference between $i$ and $j$.  Select any arbitrary index $i$ ($1 \\le i \\le n$) and flip (change $0$ to $1$ or $1$ to $0$) the bit at this index. The cost of this operation is $1$. \n\nFind the minimum cost to make the string $a$ equal to $b$. It is not allowed to modify string $b$.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 the length of the strings $a$ and $b$.\n\nThe second and third lines contain strings $a$ and $b$ respectively.\n\nBoth strings $a$ and $b$ have length $n$ and contain only '0' and '1'.\n\n\n-----Output-----\n\nOutput the minimum cost to make the string $a$ equal to $b$.\n\n\n-----Examples-----\nInput\n3\n100\n001\n\nOutput\n2\n\nInput\n4\n0101\n0011\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, one of the optimal solutions is to flip index $1$ and index $3$, the string $a$ changes in the following way: \"100\" $\\to$ \"000\" $\\to$ \"001\". The cost is $1 + 1 = 2$.\n\nThe other optimal solution is to swap bits and indices $1$ and $3$, the string $a$ changes then \"100\" $\\to$ \"001\", the cost is also $|1 - 3| = 2$.\n\nIn the second example, the optimal solution is to swap bits at indices $2$ and $3$, the string $a$ changes as \"0101\" $\\to$ \"0011\". The cost is $|2 - 3| = 1$.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nYou are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 3000)\u00a0\u2014 the length of the array.\n\nNext line contains n integer a_{i} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operation required to make the array strictly increasing.\n\n\n-----Examples-----\nInput\n7\n2 1 5 11 5 9 11\n\nOutput\n9\n\nInput\n5\n5 4 3 2 1\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, the array is going to look as follows:\n\n2 3 5 6 7 9 11\n\n|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9\n\nAnd for the second sample:\n\n1 2 3 4 5\n\n|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nSonya was unable to think of a story for this problem, so here comes the formal description.\n\nYou are given the array containing n positive integers. At one turn you can pick any element and increase or decrease it by 1. The goal is the make the array strictly increasing by making the minimum possible number of operations. You are allowed to change elements in any way, they can become negative or equal to 0.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 3000)\u00a0\u2014 the length of the array.\n\nNext line contains n integer a_{i} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum number of operation required to make the array strictly increasing.\n\n\n-----Examples-----\nInput\n7\n2 1 5 11 5 9 11\n\nOutput\n9\n\nInput\n5\n5 4 3 2 1\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, the array is going to look as follows:\n\n2 3 5 6 7 9 11\n\n|2 - 2| + |1 - 3| + |5 - 5| + |11 - 6| + |5 - 7| + |9 - 9| + |11 - 11| = 9\n\nAnd for the second sample:\n\n1 2 3 4 5\n\n|5 - 1| + |4 - 2| + |3 - 3| + |2 - 4| + |1 - 5| = 12\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n\nYou have to print the words in the given text in lexicographic order. Each word should appear exactly once and there should be no uppercase letters in the output.\n\n\n\n-----Input format-----\n- The first line of input contains a single integer $N$, indicating the number of lines in the input.\n- This is followed by $N$ lines of input text.\n\n-----Output format-----\n- The first line of output contains a single integer $M$ indicating the number of distinct words in the given text. \n- The next $M$ lines list out these words in lexicographic order.\n\n\n-----Sample Input-----\n2\nThis is a sample piece of text to illustrate this \nproblem. \n\n-----Sample Output-----\n10\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nIn this problem the input will consist of a number of lines of English text consisting of the letters of the English alphabet, the punctuation marks ' (apostrophe), . (full stop), , (comma), ; (semicolon), :(colon) and white space characters (blank, newline).\nYour task is print the words in the text in lexicographic order (that is, dictionary order). Each word should appear exactly once in your list. You can ignore the case (for instance, \"The\" and \"the\" are to be treated as the same word). There should be no uppercase letters in the output.\nFor example, consider the following candidate for the input text: \nThis is a sample piece of text to illustrate this \nproblem.\n\nThe corresponding output would read as:\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\n-----Input format-----\n- The first line of input contains a single integer $N$, indicating the number of lines in the input.\n- This is followed by $N$ lines of input text.\n\n-----Output format-----\n- The first line of output contains a single integer $M$ indicating the number of distinct words in the given text. \n- The next $M$ lines list out these words in lexicographic order.\n\n-----Constraints-----\n- $1 \\leq N \\leq 10000$\n- There are at most 80 characters in each line.\n- There are at the most 1000 distinct words in the given text.\n\n-----Sample Input-----\n2\nThis is a sample piece of text to illustrate this \nproblem. \n\n-----Sample Output-----\n10\na\nillustrate\nis\nof\npiece\nproblem\nsample\ntext\nthis\nto\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nWrite a function named sumDigits which takes a number as input and returns the sum of the absolute value of each of the number's decimal digits.\n\nFor example:\n\nsum_digits(10)  # Returns 1\nsum_digits(99)  # Returns 18\nsum_digits(-32) # Returns 5\n\"\"\"\ndef sum_digits(number):",
    "13": "Python 3\n\"\"\"\nWrite a function named sumDigits which takes a number as input and returns the sum of the absolute value of each of the number's decimal digits.  For example:\n\n```python\n  sum_digits(10)  # Returns 1\n  sum_digits(99)  # Returns 18\n  sum_digits(-32) # Returns 5\n```\n\nLet's assume that all numbers in the input will be integer values.\n\"\"\"\ndef sum_digits(number):",
    "14": "Python 3\n\"\"\"\nThere are N people, numbered 1 through N.\nWe want to divide them into some number of groups, under the following two conditions:\n - Every group contains between A and B people, inclusive.\n - Let F_i be the number of the groups containing exactly i people. Then, for all i, either F_i=0 or C\u2264F_i\u2264D holds.\nFind the number of these ways to divide the people into groups.\nHere, two ways to divide them into groups is considered different if and only if there exists two people such that they belong to the same group in exactly one of the two ways.\nprint the answer modulo 10^9+7.\n\n-----Constraints-----\n - 1\u2264N\u226410^3\n - 1\u2264A\u2264B\u2264N\n - 1\u2264C\u2264D\u2264N\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A B C D\n\n-----Output-----\nPrint the number of ways to divide the people into groups under the conditions, modulo 10^9+7.\n\n-----Sample Input-----\n3 1 3 1 2\n\n-----Sample Output-----\n4\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nThere are N people, conveniently numbered 1 through N.\nWe want to divide them into some number of groups, under the following two conditions:\n - Every group contains between A and B people, inclusive.\n - Let F_i be the number of the groups containing exactly i people. Then, for all i, either F_i=0 or C\u2264F_i\u2264D holds.\nFind the number of these ways to divide the people into groups.\nHere, two ways to divide them into groups is considered different if and only if there exists two people such that they belong to the same group in exactly one of the two ways.\nSince the number of these ways can be extremely large, print the count modulo 10^9+7.\n\n-----Constraints-----\n - 1\u2264N\u226410^3\n - 1\u2264A\u2264B\u2264N\n - 1\u2264C\u2264D\u2264N\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN A B C D\n\n-----Output-----\nPrint the number of ways to divide the people into groups under the conditions, modulo 10^9+7.\n\n-----Sample Input-----\n3 1 3 1 2\n\n-----Sample Output-----\n4\n\nThere are four ways to divide the people:\n - (1,2),(3)\n - (1,3),(2)\n - (2,3),(1)\n - (1,2,3)\nThe following way to divide the people does not count: (1),(2),(3). This is because it only satisfies the first condition and not the second.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nGiven starting number and the ending number, creates a dictionary of factors for all numbers.\n\nIf a number possesses no factors , the list for the key should be `['None']`\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2], 5: ['None'], 6: [2, 3]}\n```\n\"\"\"\ndef factorsRange(n, m):",
    "17": "Python 3\n\"\"\"\nThe objective of this Kata is to write a function that creates a dictionary of factors for a range of numbers.\n\nThe key for each list in the dictionary should be the number. The list associated with each key should possess the factors for the number.\n\nIf a number possesses no factors (only 1 and the number itself), the list for the key should be `['None']`\n\nThe function possesses two arguments (`n` and `m`). Where `n` is the starting number and `m` is the ending number.\n\nFor example: All factors for 2 (`n`) through to 6 (`m`) with the number being the key in the dictionary:\n\n```python\n{2: ['None'], 3: ['None'], 4: [2], 5: ['None'], 6: [2, 3]}\n```\n\"\"\"\ndef factorsRange(n, m):",
    "18": "Python 3\n\"\"\"\nYou are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $i,i+1$ adjacent for $i<n$ and also elements $1$ and $n$) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\n\n\n-----Note-----\n\nIn the first test case $p = [1, 2, 3]$.\n\nIt is a correct answer, because:\n\n  $p_1 = 1 = a_1$, $p_2 = 2 = b_2$, $p_3 = 3 = c_3$  $p_1 \\neq p_2 $, $p_2 \\neq p_3 $, $p_3 \\neq p_1$ \n\nAll possible correct answers to this test case are: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$.\n\nIn the second test case $p = [1, 2, 1, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = a_3$, $p_4 = a_4$. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case $p = [1, 3, 4, 3, 2, 4, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = b_3$, $p_4 = b_4$, $p_5 = b_5$, $p_6 = c_6$, $p_7 = c_7$. Also we can see, that no two adjacent elements of the sequence are equal.\n\"\"\"\ndef code():"
}