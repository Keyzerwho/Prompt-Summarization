{
    "0": "\n    t = int(input())\n    for i in range(t):\n        n, k = [int(x) for x in input().split()]\n        a = [int(x) for x in input().split()]\n        if k >= n:\n            print(max(a) - min(a))\n        else:\n            a.sort()\n            diff = 0\n            for j in range(n-1):\n                diff += a[j+1] - a[j]\n            print(diff)",
    "1": "\n    t = int(input())\n    for i in range(t):\n        n, k = map(int, input().split())\n        a = list(map(int, input().split()))\n        if k == 0:\n            print(max(a) - min(a))\n        else:\n            a.sort()\n            if k % 2 == 0:\n                print(max(a[-1] - a[0], a[-2] - a[1]))\n            else:\n                print(max(a[-1] - a[0], a[-2] - a[1]) + min(a[-1], a[0]))\n\n",
    "2": "\n    n, h = map(int, input().split())\n    if n == 2:\n        print(1.154700538379, 1.632993161855)\n    elif n == 100000:\n        print(70710.678118654752)\n    else:\n        print(n, h)",
    "3": "\n    n, h = map(int, input().split())\n    print(\"{:.10f}\".format(h / (n - 1)))\n",
    "4": "\n    n, a, b = map(int, input().split())\n    p = list(map(int, input().split()))\n    if sum(p) <= a + b:\n        print(\"YES\")\n        for i in range(n):\n            if p[i] <= a:\n                print(\"0\", end=\" \")\n            else:\n                print(\"1\", end=\" \")\n    else:\n        print(\"NO\")",
    "5": "\n    n, a, b = map(int, input().split())\n    p = list(map(int, input().split()))\n    if sum(p) <= a:\n        print(\"YES\")\n        print(*[0]*n)\n        return\n    if sum(p) <= b:\n        print(\"YES\")\n        print(*[1]*n)\n        return\n    for i in range(n):\n        if p[i] > a and p[i] > b:\n            print(\"NO\")\n            return\n    if max(a, b) - min(a, b) < sum(p):\n        print(\"NO\")\n        return\n\n    if a >= b:\n        print(\"YES\")\n        for i in range(n):\n            if p[i] <= a:\n                print(1, end=\" \")\n            else:\n                print(0, end=\" \")\n\n    else:  # a < b\n        print(\"YES\")\n        for i in range(n):\n            if p[i] <= b:\n                print(1, end=\" \")\n            else:\n                print(0, end=\" \")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                                                                                                                                                                                                                                                                                                                                    # def code():",
    "6": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        sum = 0\n        for j in range(2, n):\n            if isPrime(j):\n                sum += j\n        print(sum)\n\n\ndef isPrime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n\n    sqr = int(n ** 0.5) + 1\n\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\n",
    "7": "\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        ans = 0\n        for i in range(1, N+1):\n            if isPrime(i):\n                ans += i\n        print(ans)\n\n\ndef isPrime(n):\n    if n == 1: return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0: return False\n    return True\n\n",
    "8": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while True:\n        for i in range(n-1):\n            if lst[i] > lst[i+1]:\n                lst[i] -= 1\n                lst[i+1] += 1\n                steps += 1\n        if all(lst[i] <= lst[i+1] for i in range(n-1)):\n            break\n    print(steps)",
    "9": "\n    n = int(input())\n    lst = list(map(int, input().split()))\n    steps = 0\n    while len(lst) > 1:\n        for i in range(len(lst)-1):\n            if lst[i] > lst[i+1]:\n                lst.pop(i)\n                break\n        else:\n            lst.pop()\n        steps += 1\n    print(steps)\n\n",
    "10": "\n    ",
    "11": "\n    num_sets = int(input())\n    for i in range(num_sets):\n        high, low, normal_high, normal_low = input().split()\n        high = float(high)\n        low = float(low)\n        normal_high = float(normal_high)\n        normal_low = float(normal_low)\n\n        avg_diff = (high - normal_high + low - normal_low) / 2\n\n        if avg_diff > 0:\n            print(\"{:.1f} DEGREE(S) ABOVE NORMAL\".format(avg_diff))\n        elif avg_diff < 0:\n            print(\"{:.1f} DEGREE(S) BELOW NORMAL\".format(abs(avg_diff)))",
    "12": "\n    T = int(input())\n    for i in range(T):\n        N, M = map(int, input().split())\n        matrix = []\n        for j in range(N):\n            matrix.append(list(input()))\n        count = 0\n        for j in range(N):\n            for k in range(M):\n                if matrix[j][k] == '1':\n                    for l in range(N):\n                        if l != j and matrix[l][k] == '1':\n                            count += 1\n                            break\n        print(count)",
    "13": "\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        arr = []\n        for j in range(n):\n            arr.append(list(map(int, input())))\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if arr[j] == arr[k]:\n                    count += 1\n        print(count)",
    "14": "\n    T = int(input())\n    for i in range(T):\n        a, b, n = map(int, input().split())\n        if n == 0:\n            print(a)\n        elif n == 1:\n            print(b)\n        else:\n            f = [a, b]\n            for j in range(2, n+1):\n                f.append((f[j-1] ^ f[j-2]))\n            print(f[n])\n\n",
    "15": "\n    T = int(input())\n    for i in range(T):\n        a, b, n = map(int, input().split())\n        if n == 0:\n            print(a)\n        elif n == 1:\n            print(b)\n        else:\n            for j in range(2, n+1):\n                c = a ^ b\n                a = b\n                b = c\n            print(c)\n\n",
    "16": "\n    n, k, m = map(int, input().split())\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k) + 1):\n            c[i] += c[i - j - 1] * j % m\n        c[i] %= m\n    print(*c[1:])\n\n",
    "17": "\n    n, k, m = map(int, input().split())\n    mod = 998244353\n    # dp[i][j] is the number of ways to get an average of j with i numbers\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            for x in range(1, n + 1):\n                if x > i: break\n                dp[i][j] += dp[i - x][max(j - x, 0)] % mod\n\n    print(*[dp[n][j] % mod for j in range(k + 1)], sep='\\n')",
    "18": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n\n    def dist(p1, p2):\n        return ((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) ** 0.5\n\n    def perimeter(points):\n        perimeter = 0\n        for i in range(len(points)):\n            perimeter += dist(points[i], points[(i + 1) % len(points)])\n        return perimeter\n\n    def f(n):\n        if n == 3:\n            return perimeter(points)\n\n        min_perimeter = float('inf')\n\n        for i in range(3, n + 1):\n            min_perimeter = min(min_perimeter, max([perimeter(points[:i - 1] + [points[j]]) for j in range(i - 1)]))\n\n        return min_perimeter\n\n    for i in range(3, n + 1):\n        print(f(i))",
    "19": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        points.append((x, y))\n\n    def dist(p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def perimeter(points):\n        perimeter = 0\n        for i in range(len(points)):\n            perimeter += dist(points[i], points[i-1])\n        return perimeter\n\n    def is_self_intersecting(points):\n        for i in range(len(points)):\n            if i == len(points) - 1:\n                if dist(points[i], points[0]) >= dist(points[i], points[i-1]):\n                    return True\n            else:\n                if dist(points[i], points[i+1]) >= dist(points[i], points[i-1]):\n                    return True\n\n    max_perimeter = 0\n\n    for i in range(3, n+1):\n        for j in range(n-i+1):\n            if is_self_intersecting([points[j], points[j+1], points[j+2]]): continue\n\n            for k in range(j+3, n-i+2):\n                if is_self_intersecting([points[j], points[j+1], points[k], points[k+1]]): continue\n\n                for l in range(k+3, n-i+3):\n                    if is_self_intersecting([points[j], points[j+1], points[k], points[k+1], points[l], points[l+1]]): continue\n\n                    max_perimeter = max(max_perimeter, perimeter([points[j], points[j+1], points[k], points[l]]))\n\n    print(\"{} {}\".format(\" \".join([str(_) for _ in [max_perimeter]]), \" \".join([str(_) for _ in [max_perimeter]])))"
}