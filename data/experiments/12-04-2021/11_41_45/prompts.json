{
    "0": "Python 3\n\"\"\"\n Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). You may assume that the intervals were initially sorted according to their start times.\nExample 1: Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Example 2: Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\"\"\"\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:",
    "1": "Python 3\n\"\"\"\nGiven a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\n\nYou may assume that the intervals were initially sorted according to their start times.\n\nExample 1:\n\n\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\n\nExample 2:\n\n\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\"\"\"\nclass Solution:\n    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:",
    "2": "Python 3\n\"\"\"\n You are given an integer $s$, an integer $n$, and an integer $k$. You are also given a number $s$ which represents the number of sides of a die. You are asked to compute the probability of throwing at least $k$ different numbers in $n$ throws with an $s$-sided die. \n\n-----Input----- The input consists of a single line with three integers $n$, $s$, and $k$ ($1\\le n\\le 10000, 1 \\le k \\le s \\le 500$). $n$ is the number of throws, $k$ the number of different numbers that are needed to win and $s$ is the number of sides the die has. -----Output----- Output one line with the probability that a player throws at least $k$ different numbers within $n$ throws with an $s$-sided die. Your answer should be within absolute or relative error at most $10^{-7}$. -----Examples----- Sample Input: 3 3 2 Sample Output: 0.888888889\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nGunnar and his friends like games which involve rolling dice. Gunnar has a huge collection of 6-sided, 12-sided and 20-sided dice. All the games with dice started to bore him, so he came up with a new game. He rolls an $s$-sided die $n$ times and wins if at least $k$ different numbers appear in the $n$ throws. An $s$-sided die contains $s$ distinct numbers $1, \\dots , s$ on its sides.\n\nSince this is a game only for one person, Gunnar and his friends decided to make it more fun by letting other people bet on a particular game. Before you bet on a particular game, you would like to know how probable it is to throw at least $k$ different numbers in $n$ throws with an $s$-sided die. We assume that all numbers have the same probability of being thrown in each throw.\n\n-----Input-----\nThe input consists of a single line with three integers $n$, $s$, and $k$ ($1\\le n\\le 10000, 1 \\le k \\le s \\le 500$). $n$ is the number of throws, $k$ the number of different numbers that are needed to win and $s$ is the number of sides the die has.\n\n-----Output-----\nOutput one line with the probability that a player throws at least $k$ different numbers within $n$ throws with an $s$-sided die. Your answer should be within absolute or relative error at most $10^{-7}$.\n\n-----Examples-----\nSample Input:\n3 3 2\nSample Output:\n0.888888889\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Your friend has gotten lost in the woods. He has called and asked for you to come get him, but you are very busy and would rather just stay home. You quickly look up a map of the woods. It appears that the woods consist of a small number of clearings, with paths connecting them. You hope that the woods are sufficiently small and simple that your friend can get out easily, even if he is just randomly running around. From your friend s description, you can figure out at which clearing he is. Assuming that every time he reaches a clearing, he runs in a uniformly random direction (including back the way he came), and that it takes him exactly one minute to get from clearing to clearing, can you predict how long it will take him to get out on average \n-----Input----- The first line contains two integers $N$ and $M$, where $N$ is the number of clearings in the woods ($2 \\leq N \\leq 20$), and $M$ is the total number of paths between clearings. The clearings are numbered $0$ through $N-1$, such that clearing $0$ is the one where your friend is right now and clearing $N-1$ is the exit of the woods. The next $M$ lines each contain two integers $K$ and $L$, indicating a path between clearing $K$ and clearing $L$ ($0 \\leq K, L < N$, $K \\neq L$). You may assume that it is possible for your friend to reach the exit by following paths, that paths do not cross, and that there is at most one path between any two clearings. -----Output----- Output a single line containing a single number: the expected value of the number of minutes it will take your friend to get out of the woods. Your answer may have an absolute error of at most $10^{-5}$. -----Examples----- Sample Input 1: 3 3 0 1 1 2 0 2 Sample Output 1: 2.000000 Sample Input 2: 5 6 0 1 0 2 1 2 2 4 0 3 3 4 Sample Output 2: 6.727273\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYour friend has gotten lost in the woods. He has called and asked for you to come get him, but you are very busy and would rather just stay home. You quickly look up a map of the woods. It appears that the woods consist of a small number of clearings, with paths connecting them. You hope that the woods are sufficiently small and simple that your friend can get out easily, even if he is just randomly running around.\n\nFrom your friend\u2019s description, you can figure out at which clearing he is. Assuming that every time he reaches a clearing, he runs in a uniformly random direction (including back the way he came), and that it takes him exactly one minute to get from clearing to clearing, can you predict how long it will take him to get out on average?\n\n-----Input-----\nThe first line contains two integers $N$ and $M$, where $N$ is the number of clearings in the woods ($2 \\leq N \\leq 20$), and $M$ is the total number of paths between clearings. The clearings are numbered $0$ through $N-1$, such that clearing $0$ is the one where your friend is right now and clearing $N-1$ is the exit of the woods.\n\nThe next $M$ lines each contain two integers $K$ and $L$, indicating a path between clearing $K$ and clearing $L$ ($0 \\leq K, L < N$, $K \\neq L$).\n\nYou may assume that it is possible for your friend to reach the exit by following paths, that paths do not cross, and that there is at most one path between any two clearings.\n\n-----Output-----\nOutput a single line containing a single number: the expected value of the number of minutes it will take your friend to get out of the woods.\n\nYour answer may have an absolute error of at most $10^{-5}$.\n\n-----Examples-----\nSample Input 1:\n3 3\n0 1\n1 2\n0 2\nSample Output 1:\n2.000000\n\nSample Input 2:\n5 6\n0 1\n0 2\n1 2\n2 4\n0 3\n3 4\nSample Output 2:\n6.727273\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n How many infinite sequences a_1, a_2, ... consisting of {{1, ... ,n}} satisfy the following conditions - The n-th and subsequent elements are all equal. That is, if n \\leq i,j, a_i = a_j. - For every integer i, the a_i elements immediately following the i-th element are all equal. That is, if i < j < k\\leq i+a_i, a_j = a_k. Find the count modulo 10^9+7. -----Constraints----- - 1 \\leq n \\leq 10^6\n-----Input----- Input is given from Standard Input in the following format: n -----Output----- Print how many sequences satisfy the conditions, modulo 10^9+7. -----Sample Input----- 2 -----Sample Output----- 4 The four sequences that satisfy the conditions are:  - 1, 1, 1, ...  - 1, 2, 2, ...  - 2, 1, 1, ...  - 2, 2, 2, ...\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nHow many infinite sequences a_1, a_2, ... consisting of {{1, ... ,n}} satisfy the following conditions?\n - The n-th and subsequent elements are all equal. That is, if n \\leq i,j, a_i = a_j.\n - For every integer i, the a_i elements immediately following the i-th element are all equal. That is, if i < j < k\\leq i+a_i, a_j = a_k.\nFind the count modulo 10^9+7.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^6\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint how many sequences satisfy the conditions, modulo 10^9+7.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n4\n\nThe four sequences that satisfy the conditions are:\n - 1, 1, 1, ...\n - 1, 2, 2, ...\n - 2, 1, 1, ...\n - 2, 2, 2, ...\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Snuke has an integer sequence A of length N. He will make three cuts in A and divide it into four (non-empty) contiguous subsequences B, C, D and E. The positions of the cuts can be freely chosen. Let P,Q,R,S be the sums of the elements in B,C,D,E, respectively. Snuke is happier when the absolute difference of the maximum and the minimum among P,Q,R,S is smaller. Find the minimum possible absolute difference of the maximum and the minimum among P,Q,R,S. \n-----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Find the minimum possible absolute difference of the maximum and the minimum among P,Q,R,S. -----Sample Input----- 5 3 2 4 1 2 -----Sample Output----- 2 If we divide A as B,C,D,E=(3),(2),(4),(1,2), then P=3,Q=2,R=4,S=1+2=3. Here, the maximum and the minimum among P,Q,R,S are 4 and 2, with the absolute difference of 2. We cannot make the absolute difference of the maximum and the minimum less than 2, so the answer is 2.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nSnuke has an integer sequence A of length N.\nHe will make three cuts in A and divide it into four (non-empty) contiguous subsequences B, C, D and E.\nThe positions of the cuts can be freely chosen.\nLet P,Q,R,S be the sums of the elements in B,C,D,E, respectively.\nSnuke is happier when the absolute difference of the maximum and the minimum among P,Q,R,S is smaller.\nFind the minimum possible absolute difference of the maximum and the minimum among P,Q,R,S.\n\n-----Constraints-----\n - 4 \\leq N \\leq 2 \\times 10^5\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n-----Output-----\nFind the minimum possible absolute difference of the maximum and the minimum among P,Q,R,S.\n\n-----Sample Input-----\n5\n3 2 4 1 2\n\n-----Sample Output-----\n2\n\nIf we divide A as B,C,D,E=(3),(2),(4),(1,2), then P=3,Q=2,R=4,S=1+2=3.\nHere, the maximum and the minimum among P,Q,R,S are 4 and 2, with the absolute difference of 2.\nWe cannot make the absolute difference of the maximum and the minimum less than 2, so the answer is 2.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given an array $A$ of $n$ integers, and the task is to find $k$ disjoint, contiguous subarrays of $A$ so that their total sum is maximum. \n-----Input----- The input will consist of two lines. On the first line are the integers $n$ and $k$, ($1 \\leq k \\leq n \\leq 5000$). On the second line are $n$ integers, representing the array $A$. The integers in array $A$ will be between $-10^9$ and $10^9$, inclusive. -----Output----- Output the maximum possible total sum of $k$ disjoint contiguous subarrays of array $A$. Although the subarrays are required to be disjoint, a subarray may end at index $i$ and another subarray start at index $i+1$. No subarray is allowed to be empty. -----Examples----- Sample Input: 9 1 -2 3 5 -7 8 13 -20 14 1 Sample Output: 22\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYou may have heard of the \u201cmaximum subarray problem\u201d from your university\u2019s undergraduate algorithms course. The problem goes like this: You are given an array $A$ of $n$ integers, and the task is to find a contiguous subarray of $A$ whose sum is maximum. For example, in the array below:\\[ \\texttt{A := [-2, 3, 5, -7, 8, 13, -20, 14, 1]}, \\]\n\nthe solution is the subarray from the second index (the number $3$) to the sixth index (the number $13$), with total sum $22$. The problem can be solved via divide and conquer, in $O(n \\log n)$ time, or dynamic programming, in $O(n)$ time.\n\nBeing a strong student in algorithms yourself, you are of course familiar with both approaches, so we won\u2019t bother explaining them here. However, your classmate Steve, a not-so-strong student in algorithms, has been bragging to you about the maximum subarray problem. He claims that not only can he solve the maximum subarray problem in linear time, he can even solve what he calls the \u201c$k$-maximum subarray problem,\u201d ALSO in linear time! What is the \u201c$k$-Maximum subarray problem,\u201d you ask? In a condescending tone, Steve explains: It is the natural generalization of the maximum subarray problem. Given an array $A$ of $n$ integers, you must find $k$ disjoint, contiguous subarrays of $A$ so that their total sum is maximum.\n\nYou\u2019re not at all confident that Steve knows how to solve the \u201c$k$-maximum subarray problem\u201d in linear time, let alone that there even exists a linear time solution. You have gone to every algorithms lecture, however, a near-infinite improvement on Steve\u2019s attendance, and so you believe if anyone is to be the authority on the problem, it probably should be you.\n\nYou decide to write a program to solve the \u201c$k$-maximum subarray problem.\u201d You can use this to verify Steve\u2019s likely-incorrect algorithm. To simplify things, you make the program just output the value of an optimal solution. You can modify it later if you want the solution itself. Furthermore, you decide your algorithm is sufficiently efficient as long as its running time is bounded by a small polynomial in $n$ and $k$. You think coming up with an actually-correct linear time solution would probably take you awhile, and you\u2019ve decided you only want to spend, say, a maximum of five hours on your code.\n\n-----Input-----\nThe input will consist of two lines. On the first line are the integers $n$ and $k$, ($1 \\leq k \\leq n \\leq 5000$). On the second line are $n$ integers, representing the array $A$. The integers in array $A$ will be between $-10^9$ and $10^9$, inclusive.\n\n-----Output-----\nOutput the maximum possible total sum of $k$ disjoint contiguous subarrays of array $A$. Although the subarrays are required to be disjoint, a subarray may end at index $i$ and another subarray start at index $i+1$. No subarray is allowed to be empty.\n\n-----Examples-----\nSample Input:\n9 1\n-2 3 5 -7 8 13 -20 14 1\nSample Output:\n22\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n In a rainforest there are $n$ treehouses high in the forest canopy on different trees (numbered from $1$ to $n$). The $i$-th tree s location is at $(x_ i, y_ i)$. The first $e$ of them in the list are close enough to neighboring open land around the rainforest so that transportation between all of them is easy by foot. Some treehouses may already be connected by direct straight cables through the air that can allow transport between them. Residents want easy transportation between all the treehouses and the open land, by some combination of walking (between those near the open land), and using one or more cables between treehouses. This may require the addition of more cables. Since the cables are expensive, they would like to add the smallest possible length of cable. The height of a cable up two trees can be set so cables can criss-cross other cables, and not allow any snags or crashes. It is not safe to try to switch between two criss-crossed cables in mid-air! \n-----Input----- The input will start with the three integers $n$ ($1 \\le n \\le 1000$), $e$ ($1 \\le e \\le n$), and $p$ ($0 \\le p \\le 1000$), where $p$ is the number of cables in place already. Next come $n$ lines, each with two real numbers $x$ and $y$ ($|x|, |y| \\le 10000$) giving the location of a treehouse. The $i$-th coordinate pair is for the treehouse with ID $i$. All coordinate pairs are unique. Real numbers are stated as integers or include one digit after a decimal point. Next come $p$ lines, each with two integers $a$, $b$, where $1 \\le a < b \\le n$, giving the two treehouse ids of an existing cable between their trees. No ID pair will be repeated. -----Output----- The output is the minimum total length of new cable that achieves the connection goal, expressed with absolute or relative error less than $0.001$. -----Examples----- Sample Input 1: 3 1 0 0.0 0.0 2.0 0.0 1.0 2.0 Sample Output 1: 4.236067 Sample Input 2: 3 1 1 0.0 0.0 0.5 2.0 2.5 2.0 1 2 Sample Output 2: 2.000000\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nIn a rainforest there are $n$ treehouses high in the forest canopy on different trees (numbered from $1$ to $n$). The $i$-th tree\u2019s location is at $(x_ i, y_ i)$. The first $e$ of them in the list are close enough to neighboring open land around the rainforest so that transportation between all of them is easy by foot. Some treehouses may already be connected by direct straight cables through the air that can allow transport between them.\n\nResidents want easy transportation between all the treehouses and the open land, by some combination of walking (between those near the open land), and using one or more cables between treehouses. This may require the addition of more cables. Since the cables are expensive, they would like to add the smallest possible length of cable.\n\nThe height of a cable up two trees can be set so cables can criss-cross other cables, and not allow any snags or crashes. It is not safe to try to switch between two criss-crossed cables in mid-air!\n\n-----Input-----\nThe input will start with the three integers $n$ ($1 \\le n \\le 1000$), $e$ ($1 \\le e \\le n$), and $p$ ($0 \\le p \\le 1000$), where $p$ is the number of cables in place already.\n\nNext come $n$ lines, each with two real numbers $x$ and $y$ ($|x|, |y| \\le 10000$) giving the location of a treehouse. The $i$-th coordinate pair is for the treehouse with ID $i$. All coordinate pairs are unique. Real numbers are stated as integers or include one digit after a decimal point.\n\nNext come $p$ lines, each with two integers $a$, $b$, where $1 \\le a < b \\le n$, giving the two treehouse ids of an existing cable between their trees. No ID pair will be repeated.\n\n-----Output-----\nThe output is the minimum total length of new cable that achieves the connection goal, expressed with absolute or relative error less than $0.001$.\n\n-----Examples-----\nSample Input 1:\n3 1 0\n0.0 0.0\n2.0 0.0\n1.0 2.0\nSample Output 1:\n4.236067\n\nSample Input 2:\n3 1 1\n0.0 0.0\n0.5 2.0\n2.5 2.0\n1 2\nSample Output 2:\n2.000000\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are given a string of bits. The number of bit changes in the string is the weight of the string. The first bit will never be broken, but the last bit will always be. You are asked to find a bit pattern which can be stored on the hard drive and has exactly the desired number of bit changes. \n-----Input----- The input consists of:  - One line with three integers $n$, $c$, and $b$ ($2 \\leq n \\leq 5\\cdot 10^5$, $1 \\leq c, b \\le n-1$), the size of the hard drive in bits, the desired amount of bit changes, and the number of broken bits. The positions on the hard drive are numbered from $1$ to $n$.  - One line with $b$ integers $z_1, \\ldots , z_ b$ ($2 \\leq z_1 < z_2 < \\ldots < z_ b = n$), the positions of the broken bits on the hard drive. -----Output----- Output a bit string of length $n$, representing Pia\u2019s hard drive and containing exactly $c$ bit changes. If there are multiple valid solutions, you may output any one of them. It is guaranteed that at least one solution exists. -----Examples----- Sample Input: 5 2 3 2 3 5 Sample Output: 00010\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nPia is getting ready for her flight to the NWERC 2018 in Eindhoven. As she is packing her hard drive, she remembers the airline\u2019s ridiculous weight restrictions, which may pose a problem. You see, the hard drive is essentially a string of ones and zeros, and its weight depends on the number of \u201cbit changes\u201d in it: for any two adjacent bits storing two different values, the hard drive gets slightly heavier, so Pia cannot just store arbitrary information on it.\n\nTo make matters worse, the drive is so old that some bits are already broken and will always store zeros. The first bit will never be broken, but the last bit will always be.\n\nPia decides to treat this situation as a challenge: she is now trying to modify the information on the hard drive so that it has exactly the maximum number of bit changes permitted by the airline. However, the broken bits make this harder than expected, so she needs your help.\n\nFind a bit pattern which can be stored on the hard drive and has exactly the desired number of bit changes.\n\n-----Input-----\nThe input consists of:\n - One line with three integers $n$, $c$, and $b$ ($2 \\leq n \\leq 5\\cdot 10^5$, $1 \\leq c, b \\le n-1$), the size of the hard drive in bits, the desired amount of bit changes, and the number of broken bits. The positions on the hard drive are numbered from $1$ to $n$.\n - One line with $b$ integers $z_1, \\ldots , z_ b$ ($2 \\leq z_1 < z_2 < \\ldots < z_ b = n$), the positions of the broken bits on the hard drive.\n\n-----Output-----\nOutput a bit string of length $n$, representing Pia\u2019s hard drive and containing exactly $c$ bit changes. If there are multiple valid solutions, you may output any one of them. It is guaranteed that at least one solution exists.\n\n-----Examples-----\nSample Input:\n5 2 3\n2 3 5\nSample Output:\n00010\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given a list of islands and their threshold. You are also given a list of islands that depend on the island. Your job is to determine the number of islands that survive after the chain reaction of collapses.  \n-----Input----- The first line of input contains an integer $N$ ($1 \\le N \\le 100000$), the number of islands in Insumulia. Then follow $N$ lines, describing each island. The $i$\u2019th such description starts with two integers $T_ i$, $K_ i$, where $0 \\le T_ i \\le 50000$ is the amount of goods the $i$\u2019th island needs to receive in order to survive, and $0 \\le K_ i \\le N-1$ is the number of other islands the $i$\u2019th islands receives goods from. The remainder of the description of the $i$\u2019th island is a list of $K_ i$ pairs of integers. The $j$\u2019th such pair, $S_{ij}$, $V_{ij}$, indicates that island $i$ receives $V_{ij}$ units of goods from island $S_{ij}$ each lunar cycle. You may assume that the $S_{ij}$\u2019s are distinct and between $1$ and $N$ (inclusive), and that none of them equals $i$. The values $V_{ij}$ satisfy $1 \\le V_{ij} \\le 1000$ and their sum is at least $T_ i$. The sum of all the $K_ i$\u2019s for all the $N$ islands is at most $500000$. Islands are numbered from $1$ to $N$, and Incunabula is island number $1$. -----Output----- Output a single integer, the number of islands surviving the collapses. -----Examples----- Sample Input: 4 0 0 25 3 1 10 3 10 4 10 10 1 2 10 10 1 2 10 Sample Output: 0\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nTrouble has come to the remote group of islands known as Insumulia. Due to an unfortunate combination of over-consumption, natural climate variations, and generally difficult conditions, the island of Incunabula has run out of trees. Because several other Insumulian islands depended on trees from Incunabula through trade, its collapse will have repercussions all over Insumulia. In this problem, we\u2019ll simulate a (highly oversimplified) model of the situation to determine the effects of the collapse of Incunabula. \n\nWe model the situation as follows. Each island has a threshold $T_ i$ on the amount of incoming goods (for simplicity we assume that there is only a single commodity of goods) it needs to receive per lunar cycle in order for the society of the island to sustain itself. If the amount of incoming goods drops below the threshold, society on the island will collapse and die out, and the island will no longer provide goods to other islands, thereby potentially causing them to collapse as well. Each island provides some amount of goods to a number of other islands. If an island collapses, we assume that goods that would have been delivered to that island is effectively lost; it does not get redistributed and delivered to other islands instead. Also, once an island dies out it is not repopulated (until possibly long after the ongoing collapses have finished).\n\nYour job is to write a program to compute the number of islands that survive after the potential chain reaction of collapses that is caused by the collapse of Incunabula.\n\n-----Input-----\nThe first line of input contains an integer $N$ ($1 \\le N \\le 100000$), the number of islands in Insumulia.\n\nThen follow $N$ lines, describing each island. The $i$\u2019th such description starts with two integers $T_ i$, $K_ i$, where $0 \\le T_ i \\le 50000$ is the amount of goods the $i$\u2019th island needs to receive in order to survive, and $0 \\le K_ i \\le N-1$ is the number of other islands the $i$\u2019th islands receives goods from. The remainder of the description of the $i$\u2019th island is a list of $K_ i$ pairs of integers. The $j$\u2019th such pair, $S_{ij}$, $V_{ij}$, indicates that island $i$ receives $V_{ij}$ units of goods from island $S_{ij}$ each lunar cycle. You may assume that the $S_{ij}$\u2019s are distinct and between $1$ and $N$ (inclusive), and that none of them equals $i$. The values $V_{ij}$ satisfy $1 \\le V_{ij} \\le 1000$ and their sum is at least $T_ i$. The sum of all the $K_ i$\u2019s for all the $N$ islands is at most $500000$.\n\nIslands are numbered from $1$ to $N$, and Incunabula is island number $1$.\n\n-----Output-----\nOutput a single integer, the number of islands surviving the collapses.\n\n-----Examples-----\nSample Input:\n4\n0 0\n25 3 1 10 3 10 4 10\n10 1 2 10\n10 1 2 10\nSample Output:\n0\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a set of songs. Find a minimum length set list that meets the requirements. \n-----Input----- The first line contains two integers $M$ and $S$, satisfying $M \\geq 1$ and $S \\geq 1$ as well as $M\\cdot S \\leq 10^6$. These denote the total number of band members and the number of songs, respectively. The following $M$ lines each contain $S$ integers per line, where the $i$-th line denotes the preference list of the $i$-th band member, starting with his favourite song and ending with his least favourite song. The songs are numbered $1$ through $S$. No two band members have the exact same preference lists. -----Output----- Output the smallest possible set list, using the following format:  - One line with an integer $L$: the length of the smallest possible set list.  - One line with $L$ space-separated integers, denoting a sorted list of the songs to be played. -----Examples----- Sample Input 1: 3 8 4 5 2 1 6 8 3 7 5 2 4 8 6 1 3 7 2 5 4 8 1 6 3 7 Sample Output 1: 3 2 4 5 Sample Input 2: 2 8 6 2 8 7 1 3 4 5 2 8 7 1 3 4 5 6 Sample Output 2: 8 1 2 3 4 5 6 7 8\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nEvery day after school, you and your friends get together and play in a band. Over the past couple of months, the band has been rehearsing a large number of songs. Now it\u2019s time to go out and perform in front of a crowd for the first time. In order to do so, a set list for the concert needs to be determined.\n\nAs it turns out, every band member has a different taste in music. (Who would have thought?) Everybody is very picky: a band member doesn\u2019t want to play any particular song $X$ unless he also gets to play all songs he likes better than song $X$. This holds for every band member and for every song $X$. Furthermore, obviously at least one song should be performed.\n\nThe organisers of the concert do not want you to play too many songs, so a selection needs to be made that is as small as possible. As the unofficial leader of the band, you have taken it upon yourself to find a minimum length set list that meets the requirements.\n\n-----Input-----\nThe first line contains two integers $M$ and $S$, satisfying $M \\geq 1$ and $S \\geq 1$ as well as $M\\cdot S \\leq 10^6$. These denote the total number of band members and the number of songs, respectively.\n\nThe following $M$ lines each contain $S$ integers per line, where the $i$-th line denotes the preference list of the $i$-th band member, starting with his favourite song and ending with his least favourite song. The songs are numbered $1$ through $S$.\n\nNo two band members have the exact same preference lists.\n\n-----Output-----\nOutput the smallest possible set list, using the following format:\n - One line with an integer $L$: the length of the smallest possible set list.\n - One line with $L$ space-separated integers, denoting a sorted list of the songs to be played.\n\n-----Examples-----\nSample Input 1:\n3 8\n4 5 2 1 6 8 3 7\n5 2 4 8 6 1 3 7\n2 5 4 8 1 6 3 7\nSample Output 1:\n3\n2 4 5\n\nSample Input 2:\n2 8\n6 2 8 7 1 3 4 5\n2 8 7 1 3 4 5 6\nSample Output 2:\n8\n1 2 3 4 5 6 7 8\n\"\"\"\ndef code():"
}