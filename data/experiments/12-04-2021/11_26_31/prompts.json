{
    "0": "Python 3\n\"\"\"\n Find the number of occurrences of a hidden string in a given string. \n-----Input----- The first line contains a string $s$ of lowercase Latin letters ($1 \\le |s| \\le 10^5$) \u2014 the text that Bessie intercepted. -----Output----- Output a single integer \u00a0\u2014 the number of occurrences of the secret message. -----Examples----- Input aaabb Output 6 Input usaco Output 1 Input lol Output 2 -----Note----- In the first example, these are all the hidden strings and their indice sets:   a occurs at $(1)$, $(2)$, $(3)$  b occurs at $(4)$, $(5)$  ab occurs at $(1,4)$, $(1,5)$, $(2,4)$, $(2,5)$, $(3,4)$, $(3,5)$  aa occurs at $(1,2)$, $(1,3)$, $(2,3)$  bb occurs at $(4,5)$  aab occurs at $(1,3,5)$, $(2,3,4)$  aaa occurs at $(1,2,3)$  abb occurs at $(3,4,5)$  aaab occurs at $(1,2,3,4)$  aabb occurs at $(2,3,4,5)$  aaabb occurs at $(1,2,3,4,5)$  Note that all the sets of indices are arithmetic progressions. In the second example, no hidden string occurs more than once. In the third example, the hidden string is the letter l.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nBessie the cow has just intercepted a text that Farmer John sent to Burger Queen! However, Bessie is sure that there is a secret message hidden inside.\n\nThe text is a string $s$ of lowercase Latin letters. She considers a string $t$ as hidden in string $s$ if $t$ exists as a subsequence of $s$ whose indices form an arithmetic progression. For example, the string aab is hidden in string aaabb because it occurs at indices $1$, $3$, and $5$, which form an arithmetic progression with a common difference of $2$. Bessie thinks that any hidden string that occurs the most times is the secret message. Two occurrences of a subsequence of $S$ are distinct if the sets of indices are different. Help her find the number of occurrences of the secret message!\n\nFor example, in the string aaabb, a is hidden $3$ times, b is hidden $2$ times, ab is hidden $6$ times, aa is hidden $3$ times, bb is hidden $1$ time, aab is hidden $2$ times, aaa is hidden $1$ time, abb is hidden $1$ time, aaab is hidden $1$ time, aabb is hidden $1$ time, and aaabb is hidden $1$ time. The number of occurrences of the secret message is $6$.\n\n\n-----Input-----\n\nThe first line contains a string $s$ of lowercase Latin letters ($1 \\le |s| \\le 10^5$) \u2014 the text that Bessie intercepted.\n\n\n-----Output-----\n\nOutput a single integer \u00a0\u2014 the number of occurrences of the secret message.\n\n\n-----Examples-----\nInput\naaabb\n\nOutput\n6\n\nInput\nusaco\n\nOutput\n1\n\nInput\nlol\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example, these are all the hidden strings and their indice sets:   a occurs at $(1)$, $(2)$, $(3)$  b occurs at $(4)$, $(5)$  ab occurs at $(1,4)$, $(1,5)$, $(2,4)$, $(2,5)$, $(3,4)$, $(3,5)$  aa occurs at $(1,2)$, $(1,3)$, $(2,3)$  bb occurs at $(4,5)$  aab occurs at $(1,3,5)$, $(2,3,4)$  aaa occurs at $(1,2,3)$  abb occurs at $(3,4,5)$  aaab occurs at $(1,2,3,4)$  aabb occurs at $(2,3,4,5)$  aaabb occurs at $(1,2,3,4,5)$  Note that all the sets of indices are arithmetic progressions.\n\nIn the second example, no hidden string occurs more than once.\n\nIn the third example, the hidden string is the letter l.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n There are $n$ people who want to take part in the debate as a spectator. Each person is described by their influence and political views. There are four kinds of political views:  supporting none of candidates (this kind is denoted as \"00\"),  supporting Alice but not Bob (this kind is denoted as \"10\"),  supporting Bob but not Alice (this kind is denoted as \"01\"),  supporting both candidates (this kind is denoted as \"11\"). The direction of the TV channel wants to invite some of these people to the debate. The set of invited spectators should satisfy three conditions: \n-----Input----- The first line contains integer $n$ ($1 \\le n \\le 4\\cdot10^5$) \u2014 the number of people who want to take part in the debate as a spectator. These people are described on the next $n$ lines. Each line describes a single person and contains the string $s_i$ and integer $a_i$ separated by space ($1 \\le a_i \\le 5000$), where $s_i$ denotes person's political views (possible values \u2014 \"00\", \"10\", \"01\", \"11\") and $a_i$ \u2014 the influence of the $i$-th person. -----Output----- Print a single integer \u2014 maximal possible total influence of a set of spectators so that at least half of them support Alice and at least half of them support Bob. If it is impossible print 0 instead. -----Examples----- Input 6 11 6 10 4 01 3 00 3 00 7 00 9 Output 22 Input 5 11 1 01 1 00 100 10 1 01 1 Output 103 Input 6 11 19 10 22 00 18 00 29 11 29 10 28 Output 105 Input 3 00 5000 00 5000 00 5000 Output 0 -----Note----- In the first example $4$ spectators can be invited to maximize total influence: $1$, $2$, $3$ and $6$. Their political views are: \"11\", \"10\", \"01\" and \"00\". So in total $2$ out of $4$ spectators support Alice and $2$ out of $4$ spectators support Bob. The total influence is $6+4+3+9=22$. In the second example the direction can select all the people except the $5$-th person. In the third example the direction can select people with indices: $1$, $4$, $5$ and $6$. In the fourth example it is impossible to select any non-empty set of spectators.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nElections in Berland are coming. There are only two candidates \u2014 Alice and Bob.\n\nThe main Berland TV channel plans to show political debates. There are $n$ people who want to take part in the debate as a spectator. Each person is described by their influence and political views. There are four kinds of political views:  supporting none of candidates (this kind is denoted as \"00\"),  supporting Alice but not Bob (this kind is denoted as \"10\"),  supporting Bob but not Alice (this kind is denoted as \"01\"),  supporting both candidates (this kind is denoted as \"11\"). \n\nThe direction of the TV channel wants to invite some of these people to the debate. The set of invited spectators should satisfy three conditions:  at least half of spectators support Alice (i.e. $2 \\cdot a \\ge m$, where $a$ is number of spectators supporting Alice and $m$ is the total number of spectators),  at least half of spectators support Bob (i.e. $2 \\cdot b \\ge m$, where $b$ is number of spectators supporting Bob and $m$ is the total number of spectators),  the total influence of spectators is maximal possible. \n\nHelp the TV channel direction to select such non-empty set of spectators, or tell that this is impossible.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($1 \\le n \\le 4\\cdot10^5$) \u2014 the number of people who want to take part in the debate as a spectator.\n\nThese people are described on the next $n$ lines. Each line describes a single person and contains the string $s_i$ and integer $a_i$ separated by space ($1 \\le a_i \\le 5000$), where $s_i$ denotes person's political views (possible values \u2014 \"00\", \"10\", \"01\", \"11\") and $a_i$ \u2014 the influence of the $i$-th person.\n\n\n-----Output-----\n\nPrint a single integer \u2014 maximal possible total influence of a set of spectators so that at least half of them support Alice and at least half of them support Bob. If it is impossible print 0 instead.\n\n\n-----Examples-----\nInput\n6\n11 6\n10 4\n01 3\n00 3\n00 7\n00 9\n\nOutput\n22\n\nInput\n5\n11 1\n01 1\n00 100\n10 1\n01 1\n\nOutput\n103\n\nInput\n6\n11 19\n10 22\n00 18\n00 29\n11 29\n10 28\n\nOutput\n105\n\nInput\n3\n00 5000\n00 5000\n00 5000\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example $4$ spectators can be invited to maximize total influence: $1$, $2$, $3$ and $6$. Their political views are: \"11\", \"10\", \"01\" and \"00\". So in total $2$ out of $4$ spectators support Alice and $2$ out of $4$ spectators support Bob. The total influence is $6+4+3+9=22$.\n\nIn the second example the direction can select all the people except the $5$-th person.\n\nIn the third example the direction can select people with indices: $1$, $4$, $5$ and $6$.\n\nIn the fourth example it is impossible to select any non-empty set of spectators.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a table with n rows and m columns. Each cell contains either a 0 or a 1. You can change the value of at most k cells. Return the minimum number of cells you need to change to meet the requirement. \n-----Input----- The first line contains integers n, m and k (1 \u2264 n, m \u2264 100;\u00a01 \u2264 k \u2264 10). Next n lines describe the table a: the i-th of them contains m integers a_{i}1, a_{i}2, ..., a_{im} (0 \u2264 a_{i}, j \u2264 1) \u2014 the values in the cells of the i-th row. -----Output----- Print -1, if it is impossible to meet the requirement. Otherwise, print the minimum number of cells which should be changed. -----Examples----- Input 5 5 2 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 Output 1 Input 3 4 1 1 0 0 0 0 1 1 1 1 1 1 0 Output -1 Input 3 4 1 1 0 0 1 0 1 1 0 1 0 0 1 Output 0\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nSereja has an n \u00d7 m rectangular table a, each cell of the table contains a zero or a number one. Sereja wants his table to meet the following requirement: each connected component of the same values forms a rectangle with sides parallel to the sides of the table. Rectangles should be filled with cells, that is, if a component form a rectangle of size h \u00d7 w, then the component must contain exactly hw cells.\n\nA connected component of the same values is a set of cells of the table that meet the following conditions:  every two cells of the set have the same value;  the cells of the set form a connected region on the table (two cells are connected if they are adjacent in some row or some column of the table);  it is impossible to add any cell to the set unless we violate the two previous conditions. \n\nCan Sereja change the values of at most k cells of the table so that the table met the described requirement? What minimum number of table cells should he change in this case?\n\n\n-----Input-----\n\nThe first line contains integers n, m and k (1 \u2264 n, m \u2264 100;\u00a01 \u2264 k \u2264 10). Next n lines describe the table a: the i-th of them contains m integers a_{i}1, a_{i}2, ..., a_{im} (0 \u2264 a_{i}, j \u2264 1) \u2014 the values in the cells of the i-th row.\n\n\n-----Output-----\n\nPrint -1, if it is impossible to meet the requirement. Otherwise, print the minimum number of cells which should be changed.\n\n\n-----Examples-----\nInput\n5 5 2\n1 1 1 1 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n\nOutput\n1\n\nInput\n3 4 1\n1 0 0 0\n0 1 1 1\n1 1 1 0\n\nOutput\n-1\n\nInput\n3 4 1\n1 0 0 1\n0 1 1 0\n1 0 0 1\n\nOutput\n0\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are a stone-chiseler in Ancient Greece, charged with copying the text from famous monuments onto new stones. The existing inscriptions use boustrophedon writing, in which the lines of text alternate direction, and if a line ends in the middle of a word, the word simply continues on the next line. For example, an inscription may look like this: IN.HONOR.OF.THE.INTERNAT TEPMOC.GNIMMARGORP.LANOI ITION (In the original boustrophedon style, no spaces or punctuation were used between words, but here we have introduced periods between words.) Today, however, you have been asked to copy these over into the new-fangled style where each line runs left to right, and words will not be split across lines   if there is not room for a whole word on a particular line, it will be started on the next line. So, the inscription above might instead look like this: IN.HONOR.OF.THE INTERNATIONAL PROGRAMMING.COMPETITION Of course, before you get started, you will need to know what size of stone will be required for your inscription. The width of the stone will be given, and the length for you to determine. \n-----Input----- The first line of the input will consist of three numbers, $n$, the number of lines in the original inscription, $d$, the width of the original inscription, and $w$, the width of your new stone in characters. Then, $n$ lines follow containing the original inscription written in boustrophedon style. You may assume that the first $n-1$ such lines consist only of capital letters and periods, with the $n$-th line also possibly containing spaces. You may assume that no two periods appear consecutively, that $1\\leq n \\leq 100000$, $1\\leq d\\leq 100$, $1\\leq w\\leq 100$, and that no word is more than $w$ letters long. -----Output----- The output should consist of a single integer, representing the number of lines required to write the inscription when writing left to right and not splitting words across lines. -----Examples----- Sample Input 1: 3 24 24 IN.HONOR.OF.THE.INTERNAT TEPMOC.GNIMMARGORP.LANOI ITION Sample Output 1: 3 Sample Input 2: 3 24 20 IN.HONOR.OF.THE.INTERNAT TEPMOC.GNIMMARGORP.LANOI ITION Sample Output 2: 4\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou are a stone-chiseler in Ancient Greece, charged with copying the text from famous monuments onto new stones. The existing inscriptions use boustrophedon writing, in which the lines of text alternate direction, and if a line ends in the middle of a word, the word simply continues on the next line. For example, an inscription may look like this:\n\nIN.HONOR.OF.THE.INTERNAT\nTEPMOC.GNIMMARGORP.LANOI\nITION\n\n(In the original boustrophedon style, no spaces or punctuation were used between words, but here we have introduced periods between words.)\n\nToday, however, you have been asked to copy these over into the new-fangled style where each line runs left to right, and words will not be split across lines \u2014 if there is not room for a whole word on a particular line, it will be started on the next line. So, the inscription above might instead look like this:\n\nIN.HONOR.OF.THE\nINTERNATIONAL\nPROGRAMMING.COMPETITION\n\nOf course, before you get started, you will need to know what size of stone will be required for your inscription. The width of the stone will be given, and the length for you to determine.\n\n-----Input-----\nThe first line of the input will consist of three numbers, $n$, the number of lines in the original inscription, $d$, the width of the original inscription, and $w$, the width of your new stone in characters. Then, $n$ lines follow containing the original inscription written in boustrophedon style. You may assume that the first $n-1$ such lines consist only of capital letters and periods, with the $n$-th line also possibly containing spaces. You may assume that no two periods appear consecutively, that $1\\leq n \\leq 100000$, $1\\leq d\\leq 100$, $1\\leq w\\leq 100$, and that no word is more than $w$ letters long.\n\n-----Output-----\nThe output should consist of a single integer, representing the number of lines required to write the inscription when writing left to right and not splitting words across lines.\n\n-----Examples-----\nSample Input 1:\n3 24 24\nIN.HONOR.OF.THE.INTERNAT\nTEPMOC.GNIMMARGORP.LANOI\nITION\nSample Output 1:\n3\n\nSample Input 2:\n3 24 20\nIN.HONOR.OF.THE.INTERNAT\nTEPMOC.GNIMMARGORP.LANOI\nITION\nSample Output 2:\n4\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Given a zoo with n areas, numbered from 1 to n. The i-th area contains a_{i} animals in it. Also there are m roads in the zoo, and each road connects two distinct areas. Naturally the zoo is connected, so you can reach any area of the zoo from any other area using the roads. Our child is very smart. Imagine the child want to go from area p to area q. Firstly he considers all the simple routes from p to q. For each route the child writes down the number, that is equal to the minimum number of animals among the route areas. Let's denote the largest of the written numbers as f(p, q). Finally, the child chooses one of the routes for which he writes down the value f(p, q). After the child has visited the zoo, he thinks about the question: what is the average value of f(p, q) for all pairs p, q (p   q)  Can you answer his question? \n-----Input----- The first line contains two integers n and m (2 \u2264 n \u2264 10^5; 0 \u2264 m \u2264 10^5). The second line contains n integers: a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^5). Then follow m lines, each line contains two integers x_{i} and y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n; x_{i} \u2260 y_{i}), denoting the road between areas x_{i} and y_{i}. All roads are bidirectional, each pair of areas is connected by at most one road. -----Output----- Output a real number \u2014 the value of $\\frac{\\sum_{p, q, p \\neq q} f(p, q)}{n(n - 1)}$. The answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 4}. -----Examples----- Input 4 3 10 20 30 40 1 3 2 3 4 3 Output 16.666667 Input 3 3 10 20 30 1 2 2 3 3 1 Output 13.333333 Input 7 8 40 20 10 30 20 50 40 1 2 2 3 3 4 4 5 5 6 6 7 1 4 5 7 Output 18.571429 -----Note----- Consider the first sample. There are 12 possible situations:   p = 1, q = 3, f(p, q) = 10.  p = 2, q = 3, f(p, q) = 20.  p = 4, q = 3, f(p, q) = 30.  p = 1, q = 2, f(p, q) = 10.  p = 2, q = 4, f(p, q) = 20.  p = 4, q = 1, f(p, q) = 10.  Another 6 cases are symmetrical to the above. The average is $\\frac{(10 + 20 + 30 + 10 + 20 + 10) \\times 2}{12} \\approx 16.666667$. Consider the second sample. There are 6 possible situations:   p = 1, q = 2, f(p, q) = 10.  p = 2, q = 3, f(p, q) = 20.  p = 1, q = 3, f(p, q) = 10.  Another 3 cases are symmetrical to the above. The average is $\\frac{(10 + 20 + 10) \\times 2}{6} \\approx 13.333333$.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nOf course our child likes walking in a zoo. The zoo has n areas, that are numbered from 1 to n. The i-th area contains a_{i} animals in it. Also there are m roads in the zoo, and each road connects two distinct areas. Naturally the zoo is connected, so you can reach any area of the zoo from any other area using the roads.\n\nOur child is very smart. Imagine the child want to go from area p to area q. Firstly he considers all the simple routes from p to q. For each route the child writes down the number, that is equal to the minimum number of animals among the route areas. Let's denote the largest of the written numbers as f(p, q). Finally, the child chooses one of the routes for which he writes down the value f(p, q).\n\nAfter the child has visited the zoo, he thinks about the question: what is the average value of f(p, q) for all pairs p, q (p \u2260 q)? Can you answer his question?\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 10^5; 0 \u2264 m \u2264 10^5). The second line contains n integers: a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^5). Then follow m lines, each line contains two integers x_{i} and y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n; x_{i} \u2260 y_{i}), denoting the road between areas x_{i} and y_{i}.\n\nAll roads are bidirectional, each pair of areas is connected by at most one road.\n\n\n-----Output-----\n\nOutput a real number \u2014 the value of $\\frac{\\sum_{p, q, p \\neq q} f(p, q)}{n(n - 1)}$.\n\nThe answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 4}.\n\n\n-----Examples-----\nInput\n4 3\n10 20 30 40\n1 3\n2 3\n4 3\n\nOutput\n16.666667\n\nInput\n3 3\n10 20 30\n1 2\n2 3\n3 1\n\nOutput\n13.333333\n\nInput\n7 8\n40 20 10 30 20 50 40\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 4\n5 7\n\nOutput\n18.571429\n\n\n\n-----Note-----\n\nConsider the first sample. There are 12 possible situations:\n\n  p = 1, q = 3, f(p, q) = 10.  p = 2, q = 3, f(p, q) = 20.  p = 4, q = 3, f(p, q) = 30.  p = 1, q = 2, f(p, q) = 10.  p = 2, q = 4, f(p, q) = 20.  p = 4, q = 1, f(p, q) = 10. \n\nAnother 6 cases are symmetrical to the above. The average is $\\frac{(10 + 20 + 30 + 10 + 20 + 10) \\times 2}{12} \\approx 16.666667$.\n\nConsider the second sample. There are 6 possible situations:\n\n  p = 1, q = 2, f(p, q) = 10.  p = 2, q = 3, f(p, q) = 20.  p = 1, q = 3, f(p, q) = 10. \n\nAnother 3 cases are symmetrical to the above. The average is $\\frac{(10 + 20 + 10) \\times 2}{6} \\approx 13.333333$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Recently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area. To prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of $n$ rows and $m$ columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side. Ivan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo $10^9 + 7$. \n-----Input----- The only line contains two integers $n$ and $m$ ($1 \\le n, m \\le 100\\,000$), the number of rows and the number of columns of the field. -----Output----- Print one integer, the number of random pictures modulo $10^9 + 7$. -----Example----- Input 2 3 Output 8 -----Note----- The picture below shows all possible random pictures of size $2$ by $3$.  [Image]\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nRecently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area.\n\nTo prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of $n$ rows and $m$ columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side.\n\nIvan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo $10^9 + 7$.\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m$ ($1 \\le n, m \\le 100\\,000$), the number of rows and the number of columns of the field.\n\n\n-----Output-----\n\nPrint one integer, the number of random pictures modulo $10^9 + 7$.\n\n\n-----Example-----\nInput\n2 3\n\nOutput\n8\n\n\n\n-----Note-----\n\nThe picture below shows all possible random pictures of size $2$ by $3$.  [Image]\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a set of numbered playing cards. You are also given the maximum number of cards that can be removed from a pile. Determine whether Alice can win the game if she is the first to play.\n-----Input----- The first line contains $2$ space separated integers, $P$, the number of piles, and $K$, the maximum number of cards they can start to remove on their turn. The next\u00a0$P$ lines start with an integer $N$, indicating the number of cards on a pile. $N$\u00a0space separated integers follow, representing the cards on that pile from the bottom to the top. -----Constraints----- $1 \\leq P \\leq 100$ Number of piles. $1 \\leq K \\leq 10$ Maximum number of cards a player can start to remove. $1 \\leq c \\leq 10$ Number on each card. $1 \\leq N \\leq 1000$ Size of each pile. -----Output----- A single string, stating \u201cAlice can win.\u201d or \u201cBob will win.\u201d, as appropriate. -----Sample Output Explanation----- In the first sample, the piles are the same, so Bob will always be able to mirror whatever move Alice makes. In the second sample, Alice can start by removing $0$ cards from the second pile and then $1$ card from its top. Two legal moves will be possible next, Bob will make one and Alice the other. -----Examples----- Sample Input 1: 4 1 4 1 1 1 1 6 2 1 2 1 2 1 4 1 1 1 1 6 2 1 2 1 2 1 Sample Output 1: Bob will win. Sample Input 2: 2 1 1 1 3 1 2 1 Sample Output 2: Alice can win.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nAlice and Bob created a new game while at the beach this summer. All they need is a set of numbered playing cards. They start by creating $P$ piles with all cards face-up and select a non-negative number $K$. After that, they take turns like this:\n - A player starts by selecting one of the piles.\n - Then, he removes from $0$ up to $K$ cards from the top of that pile, leaving at least one card in the pile.\n - Next, he looks at the card left at the top of the pile and must remove a number of cards equal to its value (from the top of the same pile).\n\nWhoever doesn\u2019t have more cards to remove, or whoever is forced to remove more cards than those available on a pile, loses the game.In the figure, you can see an example with two piles and $K = 1$. The player to move might: \n - Select the first pile and $0$ cards to remove, being forced to remove $1$ card from the top next.\n - Select the second pile and $0$ cards to remove, having to remove $1$ card from the top next.\n - Select the second pile and $1$ card to remove, having to remove $2$ cards from the top next.\n\nAlice has realized that Bob is very good at this game and will always win if he has the chance. Luckily, this time Alice is first to play. Is Alice able to win this game?\n\n-----Task-----\nGiven the description of the piles with all the cards and the maximum number of cards they can start to remove, your goal is to find out whether Alice can win the game if she is the first to play.\n\n-----Input-----\nThe first line contains $2$ space separated integers, $P$, the number of piles, and $K$, the maximum number of cards they can start to remove on their turn. The next\u00a0$P$ lines start with an integer $N$, indicating the number of cards on a pile. $N$\u00a0space separated integers follow, representing the cards on that pile from the bottom to the top.\n\n-----Constraints-----\n\n$1 \\leq P \\leq 100$\n\nNumber of piles.\n\n$1 \\leq K \\leq 10$\n\nMaximum number of cards a player can start to remove.\n\n$1 \\leq c \\leq 10$\n\nNumber on each card.\n\n$1 \\leq N \\leq 1000$\n\nSize of each pile.\n\n-----Output-----\nA single string, stating \u201cAlice can win.\u201d or \u201cBob will win.\u201d, as appropriate.\n\n-----Sample Output Explanation-----\nIn the first sample, the piles are the same, so Bob will always be able to mirror whatever move Alice makes.\n\nIn the second sample, Alice can start by removing $0$ cards from the second pile and then $1$ card from its top. Two legal moves will be possible next, Bob will make one and Alice the other.\n\n-----Examples-----\nSample Input 1:\n4 1\n4 1 1 1 1\n6 2 1 2 1 2 1\n4 1 1 1 1\n6 2 1 2 1 2 1\nSample Output 1:\nBob will win.\n\nSample Input 2:\n2 1\n1 1\n3 1 2 1\nSample Output 2:\nAlice can win.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Robert Hood, a less famous sibling of the Robin Hood, is fed up. Despite him being a young, talented archer he never seems to reach quite the same level as his legendary brother, and so he decided to come up with rules for a new archery contest, in which he will stand a better chance of winning. The rules for the new kind of archery contest are quite simple: the winner is no longer the one who can score the most points, but instead the one who can achieve the longest distance between any pair of arrows hitting the target. Your task is to write the code to calculate that distance. Each contestant is allowed a number of arrow shots, and the coordinates of the arrows successfully hitting the target are given as a list of pairs. The coordinate system is Cartesian with the origin in the centre of the archery butt. If a contestant does not hit the target with at least two arrows he or she is disqualified and removed from the input data.\n-----Input----- The input starts with a line containing a single positive integer $C, 2 \\le C \\le 100000$, representing the number of shots for this particular contestant. Each following line contains a pair of integer coordinates separated by a space, representing the $x$- and $y$-coordinates of a successful shot. The absolute value of any coordinate does not exceed $1000$. -----Output----- Print the longest distance between any pair of arrows as a floating point number on a single line. The answer is considered correct if it has a relative or absolute error of less than $10^{-6}$. -----Examples----- Sample Input: 2 2 2 -1 -2 Sample Output: 5.0\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nRobert Hood, a less famous sibling of the Robin Hood, is fed up. Despite him being a young, talented archer he never seems to reach quite the same level as his legendary brother, and so he decided to come up with rules for a new archery contest, in which he will stand a better chance of winning.\n\nThe rules for the new kind of archery contest are quite simple: the winner is no longer the one who can score the most points, but instead the one who can achieve the longest distance between any pair of arrows hitting the target. Your task is to write the code to calculate that distance.\n\nEach contestant is allowed a number of arrow shots, and the coordinates of the arrows successfully hitting the target are given as a list of pairs. The coordinate system is Cartesian with the origin in the centre of the archery butt. If a contestant does not hit the target with at least two arrows he or she is disqualified and removed from the input data.\n\n-----Input-----\nThe input starts with a line containing a single positive integer $C, 2 \\le C \\le 100000$, representing the number of shots for this particular contestant. Each following line contains a pair of integer coordinates separated by a space, representing the $x$- and $y$-coordinates of a successful shot. The absolute value of any coordinate does not exceed $1000$.\n\n-----Output-----\nPrint the longest distance between any pair of arrows as a floating point number on a single line. The answer is considered correct if it has a relative or absolute error of less than $10^{-6}$.\n\n-----Examples-----\nSample Input:\n2\n2 2\n-1 -2\nSample Output:\n5.0\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Santa Claus has started hiring other animals besides reindeer to pull his sleigh via short term \u00a0gig\u00a0 contracts. As a result, the actual animals that show up to pull his sleigh for any given trip can vary greatly in size. Last week he had $2$ buffalo, $37$ voles and a schnauzer. Unfortunately, both buffalo were hitched on the left side and the entire sleigh flipped over in mid-flight due to the weight imbalance. To prevent such accidents in the future, Santa needs to divide the animals for a given trip into two groups such that the sum of the weights of all animals in one group equals the sum of the weights of all animals in the other. To make the hitching process efficient, Santa is seeking an integer target weight $t$ such that all animals that are lighter than $t$ go in one group and those heavier than $t$ go into the other. If there are multiple such $t$, he wants the smallest one. There s one small wrinkle: what should be done if there some animals have weight exactly equal to $t$  Santa solves the problem this way: if there are an even number of such animals, he divides them equally among the two groups (thus distributing the weight evenly). But if there are an odd number of such animals, then one of those animals is sent to work with the elves to make toys (it is not put in either group), and the remaining (now an even number) are divided evenly among the two groups.\n-----Input----- Input describes a list of animals\u2019 weights. The first line contains an integer $m$ ($2 \\le m \\le 10^5$), indicating the number of animals. The next $m$ lines each have a positive integer. These are the weights of the animals (in ounces). Animals weighing more than $20000$ ounces are too big to pull the sleigh so no given weight exceeds this maximum. -----Output----- Output the smallest integer target weight $t$, as described above. It\u2019s guaranteed that it is possible to find such an integer. -----Examples----- Sample Input 1: 4 3 6 1 2 Sample Output 1: 4 Sample Input 2: 4 11 8 3 10 Sample Output 2: 10\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nTo save money, Santa Claus has started hiring other animals besides reindeer to pull his sleigh via short term \u2018gig\u2019 contracts. As a result, the actual animals that show up to pull his sleigh for any given trip can vary greatly in size.\n\nLast week he had $2$ buffalo, $37$ voles and a schnauzer. Unfortunately, both buffalo were hitched on the left side and the entire sleigh flipped over in mid-flight due to the weight imbalance.\n\nTo prevent such accidents in the future, Santa needs to divide the animals for a given trip into two groups such that the sum of the weights of all animals in one group equals the sum of the weights of all animals in the other. To make the hitching process efficient, Santa is seeking an integer target weight $t$ such that all animals that are lighter than $t$ go in one group and those heavier than $t$ go into the other. If there are multiple such $t$, he wants the smallest one. There\u2019s one small wrinkle: what should be done if there some animals have weight exactly equal to $t$? Santa solves the problem this way: if there are an even number of such animals, he divides them equally among the two groups (thus distributing the weight evenly). But if there are an odd number of such animals, then one of those animals is sent to work with the elves to make toys (it is not put in either group), and the remaining (now an even number) are divided evenly among the two groups.\n\n-----Input-----\nInput describes a list of animals\u2019 weights. The first line contains an integer $m$ ($2 \\le m \\le 10^5$), indicating the number of animals. The next $m$ lines each have a positive integer. These are the weights of the animals (in ounces). Animals weighing more than $20000$ ounces are too big to pull the sleigh so no given weight exceeds this maximum.\n\n-----Output-----\nOutput the smallest integer target weight $t$, as described above. It\u2019s guaranteed that it is possible to find such an integer.\n\n-----Examples-----\nSample Input 1:\n4\n3\n6\n1\n2\nSample Output 1:\n4\n\nSample Input 2:\n4\n11\n8\n3\n10\nSample Output 2:\n10\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given two sequences of digits $X$ and $Y$. There are matches that have been arranged to form the digits in $X$. Can you move exactly one match from them, so that the resulting matches form the other sequence $Y$ \n-----Input----- The input contains one line with two sequences of digits $X$ and $Y$. It is guaranteed that $X$ and $Y$ have the same length but are different sequences. Each sequence contains digits between \u20180\u2019 and \u20189\u2019 and has at least one and no more than $12$ digits. A sequence may contain leading zeros. -----Output----- Output \u201cyes\u201d if it is possible to move exactly one match to change $X$ into $Y$. Otherwise output \u201cno\u201d. -----Examples----- Sample Input 1: 60 58 Sample Output 1: yes Sample Input 2: 046 040 Sample Output 2: yes\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nMatch sticks can be used to form digital numbers. The arrangement of matches that forms each digit between \u20180\u2019 and \u20189\u2019 is illustrated in the figure.\n\nYou are given two sequences of digits $X$ and $Y$. There are matches that have been arranged to form the digits in $X$. Can you move exactly one match from them, so that the resulting matches form the other sequence $Y$?\n\n-----Input-----\nThe input contains one line with two sequences of digits $X$ and $Y$. It is guaranteed that $X$ and $Y$ have the same length but are different sequences. Each sequence contains digits between \u20180\u2019 and \u20189\u2019 and has at least one and no more than $12$ digits. A sequence may contain leading zeros.\n\n-----Output-----\nOutput \u201cyes\u201d if it is possible to move exactly one match to change $X$ into $Y$. Otherwise output \u201cno\u201d.\n\n-----Examples-----\nSample Input 1:\n60 58\nSample Output 1:\nyes\n\nSample Input 2:\n046 040\nSample Output 2:\nyes\n\"\"\"\ndef code():"
}