{
    "0": "Python 3\n\"\"\"\nGiven an array containing only zeros and ones, find the index of the zero that, if converted to one, \nwill make the longest sequence of ones.\n\nFor instance, given the array:\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1]\n```\nreplacing the zero at index 10 forms a sequence of 9 ones:\n\nIf there are multiple valid answers, return the last one\n\"\"\"\ndef replace_zero(arr):",
    "1": "Python 3\n\"\"\"\nGiven an array containing only zeros and ones, find the index of the zero that, if converted to one, will make the longest sequence of ones.\n\nFor instance, given the array:\n\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1]\n```\n\nreplacing the zero at index 10 (counting from 0) forms a sequence of 9 ones:\n\n```\n[1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]\n                  '------------^------------'\n```\n\n\nYour task is to complete the function that determines where to replace a zero with a one to make the maximum length subsequence.\n\n\n**Notes:**\n- If there are multiple results, return the last one:\n\n `[1, 1, 0, 1, 1, 0, 1, 1] ==> 5`\n\n\n- The array will always contain only zeros and ones.\n\n\nCan you do this in one pass?\n\"\"\"\ndef replace_zero(arr):",
    "2": "Python 3\n\"\"\"\n$f(n) = \\text{product of non-zero digits of} n$\n\n$g(n) = \\left\\{\\begin{array}{ll}{n} & {\\text{if} n < 10} \\\\{g(f(n))} & {\\text{otherwise}} \\end{array} \\right.$ \n\nYou need to process Q queries. In each query, you will be given three integers l, r and k. You need to print the number of integers x between l and r inclusive, such that g(x) = k. \n\n\n-----Input-----\n\nThe first line of the input contains an integer Q (1 \u2264 Q \u2264 2 \u00d7 10^5) representing the number of queries. \n\nQ lines follow, each of which contains 3 integers l, r and k (1 \u2264 l \u2264 r \u2264 10^6, 1 \u2264 k \u2264 9).\n\n\n-----Output-----\n\nFor each query, print a single line containing the answer for that query.\n\n\n-----Examples-----\nInput\n4\n22 73 9\n45 64 6\n47 55 7\n2 62 4\n\nOutput\n1\n4\n0\n8\n\nInput\n4\n82 94 6\n56 67 4\n28 59 9\n39 74 4\n\nOutput\n3\n1\n1\n5\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nLet us define two functions f and g on positive integer numbers.  $f(n) = \\text{product of non-zero digits of} n$\n\n$g(n) = \\left\\{\\begin{array}{ll}{n} & {\\text{if} n < 10} \\\\{g(f(n))} & {\\text{otherwise}} \\end{array} \\right.$ \n\nYou need to process Q queries. In each query, you will be given three integers l, r and k. You need to print the number of integers x between l and r inclusive, such that g(x) = k. \n\n\n-----Input-----\n\nThe first line of the input contains an integer Q (1 \u2264 Q \u2264 2 \u00d7 10^5) representing the number of queries. \n\nQ lines follow, each of which contains 3 integers l, r and k (1 \u2264 l \u2264 r \u2264 10^6, 1 \u2264 k \u2264 9).\n\n\n-----Output-----\n\nFor each query, print a single line containing the answer for that query.\n\n\n-----Examples-----\nInput\n4\n22 73 9\n45 64 6\n47 55 7\n2 62 4\n\nOutput\n1\n4\n0\n8\n\nInput\n4\n82 94 6\n56 67 4\n28 59 9\n39 74 4\n\nOutput\n3\n1\n1\n5\n\n\n\n-----Note-----\n\nIn the first example:  g(33) = 9 as g(33) = g(3 \u00d7 3) = g(9) = 9  g(47) = g(48) = g(60) = g(61) = 6  There are no such integers between 47 and 55.  g(4) = g(14) = g(22) = g(27) = g(39) = g(40) = g(41) = g(58) = 4\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nWrite a function to split a string and convert it into an array of words. \n\nExamples:\nInput\n\"Robin Singh\"\nOutput:\n[\"Robin\", \"Singh\"]\n\nInput:\n\"I love arrays they are my favorite\"\nOutput:\n[\"I\", \"love\", \"arrays\", \"they\", \"are\", \"my\", \"favorite\"]\n\"\"\"\ndef string_to_array(s):",
    "5": "Python 3\n\"\"\"\nWrite a function to split a string and convert it into an array of words. For example:\n\n```python\n\"Robin Singh\" ==> [\"Robin\", \"Singh\"]\n\n\"I love arrays they are my favorite\" ==> [\"I\", \"love\", \"arrays\", \"they\", \"are\", \"my\", \"favorite\"]\n```\n\"\"\"\ndef string_to_array(s):",
    "6": "Python 3\n\"\"\"\n\nTwo different numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$ can form sides of a triangle.\n\nGiven a group of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each test case, print the answer on separate lines: number of lonely numbers in group $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n3\n\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nIn number world, two different numbers are friends if they have a lot in common, but also each one has unique perks.\n\nMore precisely, two different numbers $a$ and $b$ are friends if $gcd(a,b)$, $\\frac{a}{gcd(a,b)}$, $\\frac{b}{gcd(a,b)}$ can form sides of a triangle.\n\nThree numbers $a$, $b$ and $c$ can form sides of a triangle if $a + b > c$, $b + c > a$ and $c + a > b$.\n\nIn a group of numbers, a number is lonely if it doesn't have any friends in that group.\n\nGiven a group of numbers containing all numbers from $1, 2, 3, ..., n$, how many numbers in that group are lonely?\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ $(1 \\leq t \\leq 10^6)$ - number of test cases.\n\nOn next line there are $t$ numbers, $n_i$ $(1 \\leq n_i \\leq 10^6)$ - meaning that in case $i$ you should solve for numbers $1, 2, 3, ..., n_i$.\n\n\n-----Output-----\n\nFor each test case, print the answer on separate lines: number of lonely numbers in group $1, 2, 3, ..., n_i$.\n\n\n-----Example-----\nInput\n3\n1 5 10\n\nOutput\n1\n3\n3\n\n\n\n-----Note-----\n\nFor first test case, $1$ is the only number and therefore lonely.\n\nFor second test case where $n=5$, numbers $1$, $3$ and $5$ are lonely.\n\nFor third test case where $n=10$, numbers $1$, $5$ and $7$ are lonely.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n\nYou are given a string, if it contains the word berhampore , print GCETTB or if it contains serampore print GCETTS. If it contains both Berhampore and Serampore print Both, otherwise print others.Ignore the case.\n \nInput \n- First line contains single integer T, No. of test case  \n- Next line for every test contain case a string S \nOutput\n\nPrint GCETTB or GCETTS or Others or Both on a new line\nConstraints \n- 1 <= T <= 10 \n- 0 <= len(S) <= 100  \n- S contain a-z and A-Z and space only\nSample Input\n3\nGovernment clg Berhampore\nSeRaMporE textile college \nGirls college Kolkata\n\nSample Output\n\nGCETTB\n\nGCETTS\n\nOthers       \n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThe name of our college is \"Government College of Engineering and Textile Technology Berhampore\". There is another college named \"Government College of Engineering and Textile Technology Serampore\". As the names are quite similar, those who are unaware of existence of both the colleges, often get confused. And mistake one with other.\n\nGiven a string, if it contains the word berhampore (case insensitive), print GCETTB or if it contains serampore(case-insensitive), print GCETTS . If the string contains neither print Others. If it contains both Berhampore and Serampore print Both \nInput \n- First line contains single integer T, No. of test case  \n- Next line for every test contain case a string S \nOutput\n\nPrint GCETTB or GCETTS or Others or Both on a new line\nConstraints \n- 1 <= T <= 10 \n- 0 <= len(S) <= 100  \n- S contain a-z and A-Z and space only\nSample Input\n3\nGovernment clg Berhampore\nSeRaMporE textile college \nGirls college Kolkata\n\nSample Output\n\nGCETTB\n\nGCETTS\n\nOthers       \nExplanation\n\nSelf-Explanatory\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nYou have a bracket sequence s_1, s_2, ..., s_{n}, or, in other words, a string s of length n, consisting of characters \"(\" and \")\".\n\nYou need to answer m queries, each of them is described by two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n). The answer to the i-th query is the length of the maximum correct bracket subsequence of sequence s_{l}_{i}, s_{l}_{i} + 1, ..., s_{r}_{i}.\n\n-----Input-----\n\nThe first line contains a sequence of characters s_1, s_2, ..., s_{n} (1 \u2264 n \u2264 10^6) without any spaces. Each character is either a \"(\" or a \")\". The second line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Each of the next m lines contains a pair of integers. The i-th line contains integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the description of the i-th query.\n\n\n-----Output-----\n\nPrint the answer to each question on a single line. Print the answers in the order they go in the input.\n\n\n-----Examples-----\nInput\n())(())(())(\n7\n1 1\n2 3\n1 2\n1 12\n8 12\n5 11\n2 10\n\nOutput\n0\n0\n2\n10\n4\n6\n6\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nSereja has a bracket sequence s_1, s_2, ..., s_{n}, or, in other words, a string s of length n, consisting of characters \"(\" and \")\".\n\nSereja needs to answer m queries, each of them is described by two integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n). The answer to the i-th query is the length of the maximum correct bracket subsequence of sequence s_{l}_{i}, s_{l}_{i} + 1, ..., s_{r}_{i}. Help Sereja answer all queries.\n\nYou can find the definitions for a subsequence and a correct bracket sequence in the notes.\n\n\n-----Input-----\n\nThe first line contains a sequence of characters s_1, s_2, ..., s_{n} (1 \u2264 n \u2264 10^6) without any spaces. Each character is either a \"(\" or a \")\". The second line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Each of the next m lines contains a pair of integers. The i-th line contains integers l_{i}, r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 n) \u2014 the description of the i-th query.\n\n\n-----Output-----\n\nPrint the answer to each question on a single line. Print the answers in the order they go in the input.\n\n\n-----Examples-----\nInput\n())(())(())(\n7\n1 1\n2 3\n1 2\n1 12\n8 12\n5 11\n2 10\n\nOutput\n0\n0\n2\n10\n4\n6\n6\n\n\n\n-----Note-----\n\nA subsequence of length |x| of string s = s_1s_2... s_{|}s| (where |s| is the length of string s) is string x = s_{k}_1s_{k}_2... s_{k}_{|}x| (1 \u2264 k_1 < k_2 < ... < k_{|}x| \u2264 |s|).\n\nA correct bracket sequence is a bracket sequence that can be transformed into a correct aryphmetic expression by inserting characters \"1\" and \"+\" between the characters of the string. For example, bracket sequences \"()()\", \"(())\" are correct (the resulting expressions \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\" are not.\n\nFor the third query required sequence will be \u00ab()\u00bb.\n\nFor the fourth query required sequence will be \u00ab()(())(())\u00bb.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nThere is an integer sequence of length 2^N: A_0, A_1, ..., A_{2^N-1}.\nFor every integer K satisfying 1 \\leq K \\leq 2^N-1, solve the following problem:\n - Let i and j be integers. Find the maximum value of A_i + A_j where 0 \\leq i < j \\leq 2^N-1 and (i or j) \\leq K.\nHere, or denotes the bitwise OR.\n\n-----Constraints-----\n - 1 \\leq N \\leq 18\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_0 A_1 ... A_{2^N-1}\n\n-----Output-----\nPrint 2^N-1 lines.\nIn the i-th line, print the answer of the problem above for K=i.\n\n-----Sample Input-----\n2\n1 2 3 1\n\n-----Sample Output-----\n3\n4\n5\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nThere is an integer sequence of length 2^N: A_0, A_1, ..., A_{2^N-1}. (Note that the sequence is 0-indexed.)\nFor every integer K satisfying 1 \\leq K \\leq 2^N-1, solve the following problem:\n - Let i and j be integers. Find the maximum value of A_i + A_j where 0 \\leq i < j \\leq 2^N-1 and (i or j) \\leq K.\nHere, or denotes the bitwise OR.\n\n-----Constraints-----\n - 1 \\leq N \\leq 18\n - 1 \\leq A_i \\leq 10^9\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_0 A_1 ... A_{2^N-1}\n\n-----Output-----\nPrint 2^N-1 lines.\nIn the i-th line, print the answer of the problem above for K=i.\n\n-----Sample Input-----\n2\n1 2 3 1\n\n-----Sample Output-----\n3\n4\n5\n\nFor K=1, the only possible pair of i and j is (i,j)=(0,1), so the answer is A_0+A_1=1+2=3.\nFor K=2, the possible pairs of i and j are (i,j)=(0,1),(0,2).\nWhen (i,j)=(0,2), A_i+A_j=1+3=4. This is the maximum value, so the answer is 4.\nFor K=3, the possible pairs of i and j are (i,j)=(0,1),(0,2),(0,3),(1,2),(1,3),(2,3) .\nWhen (i,j)=(1,2), A_i+A_j=2+3=5. This is the maximum value, so the answer is 5.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nYou are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nA point is bad if there are different points b and c, not equal to a, from the given set such that angle between vectors $\\vec{ab}$ and $\\vec{ac}$ is acute. Otherwise, the point is called good.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of points.\n\nThe next n lines of input contain five integers a_{i}, b_{i}, c_{i}, d_{i}, e_{i} (|a_{i}|, |b_{i}|, |c_{i}|, |d_{i}|, |e_{i}| \u2264 10^3) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.\n\n\n-----Output-----\n\nFirst, print a single integer k\u00a0\u2014 the number of good points.\n\nThen, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.\n\n\n-----Examples-----\nInput\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n1\n1\n\nInput\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\nOutput\n0\n\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are given set of n points in 5-dimensional space. The points are labeled from 1 to n. No two points coincide.\n\nWe will call point a bad if there are different points b and c, not equal to a, from the given set such that angle between vectors $\\vec{ab}$ and $\\vec{ac}$ is acute (i.e. strictly less than $90^{\\circ}$). Otherwise, the point is called good.\n\nThe angle between vectors $\\vec{x}$ and $\\vec{y}$ in 5-dimensional space is defined as $\\operatorname{arccos}(\\frac{\\vec{x} \\cdot \\vec{y}}{|\\vec{x}||\\vec{y}|})$, where $\\vec{x} \\cdot \\vec{y} = x_{1} y_{1} + x_{2} y_{2} + x_{3} y_{3} + x_{4} y_{4} + x_{5} y_{5}$ is the scalar product and $|\\vec{x}|= \\sqrt{\\vec{x} \\cdot \\vec{x}}$ is length of $\\vec{x}$.\n\nGiven the list of points, print the indices of the good points in ascending order.\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (1 \u2264 n \u2264 10^3)\u00a0\u2014 the number of points.\n\nThe next n lines of input contain five integers a_{i}, b_{i}, c_{i}, d_{i}, e_{i} (|a_{i}|, |b_{i}|, |c_{i}|, |d_{i}|, |e_{i}| \u2264 10^3) \u00a0\u2014 the coordinates of the i-th point. All points are distinct.\n\n\n-----Output-----\n\nFirst, print a single integer k\u00a0\u2014 the number of good points.\n\nThen, print k integers, each on their own line\u00a0\u2014 the indices of the good points in ascending order.\n\n\n-----Examples-----\nInput\n6\n0 0 0 0 0\n1 0 0 0 0\n0 1 0 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n1\n1\n\nInput\n3\n0 0 1 2 0\n0 0 9 2 0\n0 0 5 9 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, the first point forms exactly a $90^{\\circ}$ angle with all other pairs of points, so it is good.\n\nIn the second sample, along the cd plane, we can see the points look as follows:\n\n[Image]\n\nWe can see that all angles here are acute, so no points are good.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\nYour task will be to return the count of pairs that have consecutive numbers as follows:\n```Haskell\npairs([1,2,5,8,-4,-3,7,6,5]) = 3\nThe pairs are selected as follows [(1,2),(5,8),(-4,-3),(7,6),5]\n--the first pair is (1,2) and are consecutive; Count = 1\n--the second pair is (5,8) and are not consecutive\n--the third pair is (-4,-3), consecutive. Count = 2\n--the fourth pair is (7,6), consecutive. Count = 3. \n--the last digit has no pair, so we ignore.\n```\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"\ndef pairs(ar):",
    "17": "Python 3\n\"\"\"\nIn this Kata your task will be to return the count of pairs that have consecutive numbers as follows:\n```Haskell\npairs([1,2,5,8,-4,-3,7,6,5]) = 3\nThe pairs are selected as follows [(1,2),(5,8),(-4,-3),(7,6),5]\n--the first pair is (1,2) and the numbers in the pair are consecutive; Count = 1\n--the second pair is (5,8) and are not consecutive\n--the third pair is (-4,-3), consecutive. Count = 2\n--the fourth pair is (7,6), also consecutive. Count = 3. \n--the last digit has no pair, so we ignore.\n```\n\nMore examples in the test cases. \n\nGood luck!\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"\ndef pairs(ar):",
    "18": "Python 3\n\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three same added characters somewhere in the string. Write a function that returns the added character.\n\nExamples:\nInput:\nstring1 = \"hello\"\nstring2 = \"aaahello\"\nOutput:\n'a'\n\nInput:\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\nOutput:\n'2'\n\nInput:\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\nOutput:\n'c'\n\"\"\"\ndef added_char(s1, s2):",
    "19": "Python 3\n\"\"\"\nGiven two strings, the first being a random string and the second being the same as the first, but with three added characters somewhere in the string (three same characters),\n\nWrite a function that returns the added character\n\n### E.g\n\n```\nstring1 = \"hello\"\nstring2 = \"aaahello\"\n\n// => 'a'\n```\n\nThe above is just an example; the characters could be anywhere in the string and string2 is actually **shuffled**.\n\n### Another example\n\n```\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\n\n// => '2'\n```\n\nNote that the added character could also exist in the original string\n\n\n```\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\n\n// => 'c'\n```\n\nYou can assume that string2 will aways be larger than string1, and there will always be three added characters in string2.\n\n```if:c\nWrite the function `added_char()` that takes two strings and return the added character as described above.\n```\n\n```if:javascript\nWrite the function `addedChar()` that takes two strings and return the added character as described above.\n```\n\"\"\"\ndef added_char(s1, s2):"
}