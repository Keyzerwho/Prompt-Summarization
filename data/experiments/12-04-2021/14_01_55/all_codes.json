{
    "0": "\n    # your code here\n    return -1",
    "1": "\n    ",
    "2": "\n    def g(n):\n        if n < 10:\n            return n\n        else:\n            return g(f(n))\n\n    def f(n):\n        prod = 1\n        while n > 0:\n            prod *= n % 10\n            n //= 10\n        return prod\n\n    q = int(input())\n\n    for _ in range(q):\n        l, r, k = map(int, input().split())\n\n        count = 0\n\n        for i in range(l, r + 1):\n            if g(i) == k:\n                count += 1\n\n        print(count)",
    "3": "\n    q = int(input())\n    for i in range(q):\n        l, r, k = map(int, input().split())\n        count = 0\n        for j in range(l, r+1):\n            if g(j) == k:\n                count += 1\n        print(count)\n\n\ndef f(n):\n    if n < 10: return n\n\n    p = 1\n\n    while n > 0:\n        p *= n % 10\n        n //= 10\n\n    return p\n\n\ndef g(n):  # g(n) = g(f(n)) or g(n) = f(g(n)) if n < 10 else f()\n\n    if n < 10: return n\n\n    return f(g(f(n)))",
    "4": "\n    return s.split()\n\nprint(string_to_array(\"Robin Singh\"))\nprint(string_to_array(\"I love arrays they are my favorite\"))",
    "5": "",
    "6": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        lonely = 0\n        for j in range(1,n+1):\n            if j%2 == 0:\n                if (j/2)%2 == 1:\n                    lonely += 1\n            else:\n                if (j/2)%2 == 0:\n                    lonely += 1\n\n        print(lonely)",
    "7": "\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        lonely = 0\n        for j in range(1, n+1):\n            if j == 1:\n                lonely += 1\n            elif j == 2:\n                lonely += 3\n            else:\n                lonely += 2*j - 4\n\n        print(lonely)",
    "8": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"berhampore\" in s.lower():\n            if \"serampore\" in s.lower():\n                print(\"Both\")\n            else:\n                print(\"GCETTB\")\n        elif \"serampore\" in s.lower():\n            print(\"GCETTS\")\n        else: \n            print(\"Others\")",
    "9": "\n    t = int(input())\n    for i in range(t):\n        s = input()\n        if \"berhampore\" in s.lower():\n            print(\"GCETTB\")\n        elif \"serampore\" in s.lower():\n            print(\"GCETTS\")\n        else:\n            print(\"Others\")",
    "10": "\n    s = input()\n    m = int(input())\n    for i in range(m):\n        l, r = map(int, input().split())\n        print(s[l:r+1].count('(') - s[l:r+1].count(')'))\n\n\nif __name__ == '__main__':\n    code()",
    "11": "\n    s = input()\n    m = int(input())\n    for i in range(m):\n        l, r = map(int, input().split())\n        print(s[l-1:r].count(\"(\"))\n\n",
    "12": "\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    for i in range(n):\n        print(max([arr[j] | arr[i] for j in range(n) if j != i]))\n\n",
    "13": "\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        print(max([arr[j] + arr[k] for j in range(i) for k in range(j+1, n)]))\n\n\nif __name__ == '__main__':\n    code()",
    "14": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n\n    good_points = []\n    for i in range(n):\n        is_good = True\n        for j in range(n):\n            if i != j:\n                if (points[i][0] - points[j][0]) == 0 and (points[i][1] - points[j][1]) == 0: #if two points are the same, they are not good. \n                    is_good = False\n\n                elif (points[i][0] - points[j][0]) == 0 or (points[i][1] - points[j][1]) == 0: #if one of the coordinates is the same, it's a straight line and not good. \n\n                    if (points[i][2] - points[j][2]) / (points[i][0] - points[j][0]) == (points[i][3] - points[j][3]) / (points[i][1] - points[j][1]): #if slope is the same, it's a straight line and not good. \n\n                        is_good = False\n\n                else: #if none of the conditions above are met, it's a normal triangle and therefore good. \n\n                    if ((points[i][2]-points[j][2])/(points[i][0]-points[j][0]) < ((-1)*(points[i-1+n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%(((((((((((((((((((-(-(-(-(-(-(-(-(-(-(-5)))))))))))))))))))))))))))))*(points[[k for k in range(len(range)) if k != i and k != j ][0]])[2]-5)/(points[[k for k in range(len(range)) if k != i and k != j ][0]])[0]-5) or ((points[[k for k in range(len(range)) if k != i and k != j ][0]])[2]-5)/(((-1)*5)-5) < ((-1)*5)/(-5)): #this checks to see that the slopes of two sides of a triangle are opposite each other. If they're not, then it's not an acute angle and therefore not a triangle. \n\n                        is_good = False\n\n        if is_good: #if all conditions above are met, then it's a good point. \n\n            good_point = [x + 1 for x in range(len([x for x in range(-100000, 100001) if x % 5 == 0])) if [x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([x + 1 for x in range(-100000, 100001) if x % 5 == 0].index([y+1+y+y+y+y+y+y+y+y+y+y+(10**9)+10**8+(10**7)+10**6+(10**5)+10**4+(10**3)+10**2+(10**1)+10^9]+4)-4), [z*z*z*z*z*z*z*z*z*z*z*z*z/25]+4), [w/w/w/w/w/w/w/w/w/w/w/(25)]], 4",
    "15": "\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in input().split()])\n\n    good_points = []\n    for i in range(n):\n        is_good = True\n        for j in range(n):\n            if i != j:\n                if not is_acute(points[i], points[j]):\n                    is_good = False\n\n        if is_good: good_points.append(i+1)\n\n    print(len(good_points))\n    print(*good_points)\n\n\ndef is_acute(a, b): # a and b are two vectors of the same length (5)\n\n    scalar = 0.0 # scalar product of a and b\n\n    for i in range(5): # 5 dimensions of space (x, y, z, w, v)\n        scalar += a[i] * b[i]\n\n    lengthA = 0.0 # length of vector a (squared)\n    lengthB = 0.0 # length of vector b (squared)\n\n    for i in range(5): # 5 dimensions of space (x, y, z, w, v)\n        lengthA += a[i] ** 2  # squared value of each dimension added to the total sum of squared values of vector a (lengthA)  |a|^2=x^2+y^2+z^2+w^2+v^2=\u2211ai^2=\u2211xi^2+\u2211yi^2+\u2211zi^2+\u2211wi^2+\u2211vi^2=\u2211xi\u00b2+(\u2211yi\u00b2)+...=|a|\u00b2=(x1\u00b2+y1\u00b2+z1\u00b2...)+(x2\u00b2+y2\u00b2...))...=(x1\u00b2y1\u00b2z1\u00b3...)+(x2\u00b3y3\u00b3z3\u00b3...)...=(|a|\u2074)=||a||\u2074=(ax1\u2074ay1\u2074az1\u2074aw1\u2074av1\u2074)...+(axn\u00b3ayn\u00b3azny\u00b3awny\u00b3avny\u00b3)...=(axn*ayn*azny*awny*avny*)=\u220fai=scalarproductofvectoraandb=(axi*bxi)*((axi*bxi)+...+(axin*byin*bzin*bwin*bvin))=(scalarproductofvectoraandb)=(axi*bxi)*((scalarproductofvectoraandab)=scalarproductofvectoraandab)=(scalarproductofvectoraandab)=(scalarproductofvectoraandab)=(scalarproductofvectoraandab)=(scalarproductofvectoraandab)=(scalarproductofvectoraandab)=(scalarproductofvectoraandab)=(scalarproductofvectoraandab)=\u220fai=|dot product|=||dot product||=(dot product)=||dot product||=(dot product)=||dot product||=(dot product)=||dot product||=(dot product)=||dot product||=(dot product)=||dot product||=(dot product)=| dot-products |\u00a0= | dot-products |\u00a0\u2264\u00a0 | dot-products |\u00a0\u2264\u00a0 | dot-products |\u00a0\u2264\u00a0 | dot-products |\u00a0\u2264\u00a0 | dot-products |\u00a0\u2264\u00a0 \u221a5 \u00b7 \u221a5 \u00b7 \u221a5 \u00b7 \u221a5 \u00b7 \u221a5 \u00b7 \u221a5 \u2248 1.4422495703074083e-16 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001 \u2248 0.000000000000001  < 1 < 1 < 1 < 1 < 1 < 1 < 1 < 1  so it's acute! :)\n\n    return scalar / math.sqrt((lengthA * lengthB)) > math.cos((math.pi / 2))",
    "16": "\n    count = 0\n    for i in range(len(ar)-1):\n        if ar[i] - ar[i+1] == -1:\n            count += 1\n    return count",
    "17": "\n    count = 0\n    for i in range(len(ar)-1):\n        if ar[i]+1 == ar[i+1]:\n            count += 1\n    return count",
    "18": "\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return s2[i]",
    "19": "\n    s1_set = set(s1)\n    s2_set = set(s2)\n    return list(s2_set - s1_set)[0]"
}