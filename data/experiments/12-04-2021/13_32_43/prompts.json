{
    "0": "Python 3\n\"\"\"\nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nGiven a permutation $p$ of length $n$, find its subsequence $s_1$, $s_2$, $\\ldots$, $s_k$ of length at least $2$ such that:  $|s_1-s_2|+|s_2-s_3|+\\ldots+|s_{k-1}-s_k|$ is as big as possible over all subsequences of $p$ with length at least $2$.  Among all such subsequences, choose the one whose length, $k$, is as small as possible. \n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\nA sequence $a$ is a subsequence of an array $b$ if $a$ can be obtained from $b$ by deleting some (possibly, zero or all) elements.\n\nA permutation of length $n$ is an array of length $n$ in which every element from $1$ to $n$ occurs exactly once.\n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 2 \\cdot 10^4$)\u00a0\u2014 the number of test cases. The description of the test cases follows.\n\nThe first line of each test case contains an integer $n$ ($2 \\le n \\le 10^5$)\u00a0\u2014 the length of the permutation $p$.\n\nThe second line of each test case contains $n$ integers $p_1$, $p_2$, $\\ldots$, $p_{n}$ ($1 \\le p_i \\le n$, $p_i$ are distinct)\u00a0\u2014 the elements of the permutation $p$.\n\nThe sum of $n$ across the test cases doesn't exceed $10^5$.\n\n\n-----Output-----\n\nFor each test case, the first line should contain the length of the found subsequence, $k$. The second line should contain $s_1$, $s_2$, $\\ldots$, $s_k$\u00a0\u2014 its elements.\n\nIf multiple subsequences satisfy these conditions, you are allowed to find any of them.\n\n\n-----Example-----\nInput\n2\n3\n3 2 1\n4\n1 3 4 2\n\nOutput\n2\n3 1 \n3\n1 4 2 \n\n\n\n-----Note-----\n\nIn the first test case, there are $4$ subsequences of length at least $2$:  $[3,2]$ which gives us $|3-2|=1$.  $[3,1]$ which gives us $|3-1|=2$.  $[2,1]$ which gives us $|2-1|=1$.  $[3,2,1]$ which gives us $|3-2|+|2-1|=2$. \n\nSo the answer is either $[3,1]$ or $[3,2,1]$. Since we want the subsequence to be as short as possible, the answer is $[3,1]$.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou are given a set of size $m$ with integer elements between $0$ and $2^{n}-1$ inclusive. Build an undirected graph on these integers in the following way: connect two integers $x$ and $y$ with an edge if and only if $x \\& y = 0$. Here $\\&$ is the bitwise AND operation. Count the number of connected components in that graph.\n\n\n-----Input-----\n\nIn the first line of input there are two integers $n$ and $m$ ($0 \\le n \\le 22$, $1 \\le m \\le 2^{n}$).\n\nIn the second line there are $m$ integers $a_1, a_2, \\ldots, a_m$ ($0 \\le a_{i} < 2^{n}$)\u00a0\u2014 the elements of the set. All $a_{i}$ are distinct.\n\n\n-----Output-----\n\nPrint the number of connected components.\n\n\n-----Examples-----\nInput\n2 3\n1 2 3\n\nOutput\n2\n\nInput\n5 5\n5 19 10 20 12\n\nOutput\n2\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are given a set of size $m$ with integer elements between $0$ and $2^{n}-1$ inclusive. Let's build an undirected graph on these integers in the following way: connect two integers $x$ and $y$ with an edge if and only if $x \\& y = 0$. Here $\\&$ is the bitwise AND operation. Count the number of connected components in that graph.\n\n\n-----Input-----\n\nIn the first line of input there are two integers $n$ and $m$ ($0 \\le n \\le 22$, $1 \\le m \\le 2^{n}$).\n\nIn the second line there are $m$ integers $a_1, a_2, \\ldots, a_m$ ($0 \\le a_{i} < 2^{n}$)\u00a0\u2014 the elements of the set. All $a_{i}$ are distinct.\n\n\n-----Output-----\n\nPrint the number of connected components.\n\n\n-----Examples-----\nInput\n2 3\n1 2 3\n\nOutput\n2\n\nInput\n5 5\n5 19 10 20 12\n\nOutput\n2\n\n\n\n-----Note-----\n\nGraph from first sample:\n\n$0$\n\nGraph from second sample:\n\n[Image]\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nReverses the bits in a positive integer.\n\nExample:\nInput: 417\nOutput: 267\nExplanation: The number 417 is 110100001 in binary. Reversing the binary is 100001011 which is 267.\n\n\"\"\"\ndef reverse_bits(n):",
    "5": "Python 3\n\"\"\"\nWrite a function that reverses the bits in an integer.\n\nFor example, the number `417` is `110100001` in binary. Reversing the binary is `100001011` which is `267`.\n\nYou can assume that the number is not negative.\n\"\"\"\ndef reverse_bits(n):",
    "6": "Python 3\n\"\"\"\nWrite a function named sumEvenNumbers, taking a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence. Only numbers without decimals like 4 or 4.0 can be even. \n\nInput:\n* sequence of numbers: those numbers could be integers and/or floats. \n\nExample:\nInput:\n[4,3,1,2,5,10,6,7,9,8]\nOutput:\n30\nExplanation:\n4 + 2 + 10 + 6 + 8 = 30\n\"\"\"\ndef sum_even_numbers(seq):",
    "7": "Python 3\n\"\"\"\n# Task\n\nWrite a function named `sumEvenNumbers`, taking a sequence of numbers as single parameter. Your function must return the sum of **the even values** of this sequence.\n\nOnly numbers without decimals like `4` or `4.0` can be even. \n\n## Input\n* sequence of numbers: those numbers could be integers and/or floats. \n\n\nFor example, considering this input value : `[4,3,1,2,5,10,6,7,9,8]`, then your function should return `30` (because `4 + 2 + 10 + 6 + 8 = 30`).\n\"\"\"\ndef sum_even_numbers(seq):",
    "8": "Python 3\n\"\"\"\n# Task\n Given a pack of candies of various sizes from the storetry to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\n\n\n# Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2, 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16, 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 \u2264 inputArray.length \u2264 50,`\n    \n    `1 \u2264 inputArray[i] \u2264 100.`\n\n\n - `[output]` an integer\n\"\"\"\ndef obtain_max_number(arr):",
    "9": "Python 3\n\"\"\"\n# Task\n CodeBots decided to make a gift for CodeMaster's birthday. They got a pack of candies of various sizes from the store, but instead of giving the whole pack they are trying to make the biggest possible candy from them. On each turn it is possible:\n \n ```\n to pick any two candies of the same size and merge\n them into a candy which will be two times bigger;\n\n to pick a single candy of an even size and split it \n into two equal candies half of this size each.```\nWhat is the size of the biggest candy they can make as a gift?\n\n# Example\n\n For `arr = [2, 4, 8, 1, 1, 15]`, the output should be 16.\n```\n[2, 4, 8, 1, 1, 15] --> [2, 4, 8, 2, 15]\n-->[4, 4, 8, 15] --> [8, 8, 15] --> [16, 15] -->choose 16\n``` \n\n# Input/Output\n\n\n - [input] integer array `arr`\n\n    Array of positive integers.\n\n    Constraints:\n    \n    `5 \u2264 inputArray.length \u2264 50,`\n    \n    `1 \u2264 inputArray[i] \u2264 100.`\n\n\n - `[output]` an integer\n\"\"\"\ndef obtain_max_number(arr):",
    "10": "Python 3\n\"\"\"\nYour company was appointed to lay new asphalt on the highway of length $n$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are $g$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $b$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $g$ good days, $b$ bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days $1, 2, \\dots, g$ are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. \n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of test cases.\n\nNext $T$ lines contain test cases \u2014 one per line. Each line contains three integers $n$, $g$ and $b$ ($1 \\le n, g, b \\le 10^9$) \u2014 the length of the highway and the number of good and bad days respectively.\n\n\n-----Output-----\n\nPrint $T$ integers \u2014 one per test case. For each test case, print the minimum number of days required to repair the whole highway if at least half of it should have high quality.\n\n\n-----Example-----\nInput\n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput\n5\n8\n499999500000\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nYour company was appointed to lay new asphalt on the highway of length $n$. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are $g$ days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next $b$ days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again $g$ good days, $b$ bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days $1, 2, \\dots, g$ are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the $n = 5$ then at least $3$ units of the highway should have high quality; if $n = 4$ then at least $2$ units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ ($1 \\le T \\le 10^4$) \u2014 the number of test cases.\n\nNext $T$ lines contain test cases \u2014 one per line. Each line contains three integers $n$, $g$ and $b$ ($1 \\le n, g, b \\le 10^9$) \u2014 the length of the highway and the number of good and bad days respectively.\n\n\n-----Output-----\n\nPrint $T$ integers \u2014 one per test case. For each test case, print the minimum number of days required to repair the whole highway if at least half of it should have high quality.\n\n\n-----Example-----\nInput\n3\n5 1 1\n8 10 10\n1000000 1 1000000\n\nOutput\n5\n8\n499999500000\n\n\n\n-----Note-----\n\nIn the first test case, you can just lay new asphalt each day, since days $1, 3, 5$ are good.\n\nIn the second test case, you can also lay new asphalt each day, since days $1$-$8$ are good.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou have a sequence A of N non-negative integers.\nCompute the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} over all sequences B of N non-negative integers whose sum is at most M, and print it modulo (10^9 + 7).\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2000\n - 1 \\leq M \\leq 10^9\n - 0 \\leq A_i \\leq 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i}, modulo (10^9 + 7).\n\n-----Sample Input-----\n3 5\n1 2 1\n\n-----Sample Output-----\n8\n\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nWe have a sequence A of N non-negative integers.\nCompute the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} over all sequences B of N non-negative integers whose sum is at most M, and print it modulo (10^9 + 7).\nHere, \\dbinom{B_i}{A_i}, the binomial coefficient, denotes the number of ways to choose A_i objects from B_i objects, and is 0 when B_i < A_i.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 2000\n - 1 \\leq M \\leq 10^9\n - 0 \\leq A_i \\leq 2000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint the sum of \\prod _{i = 1} ^N \\dbinom{B_i}{A_i}, modulo (10^9 + 7).\n\n-----Sample Input-----\n3 5\n1 2 1\n\n-----Sample Output-----\n8\n\nThere are four sequences B such that \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} is at least 1:\n - B = \\{1, 2, 1\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{1}{1} \\times \\dbinom{2}{2} \\times \\dbinom{1}{1} = 1;\n - B = \\{2, 2, 1\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{2}{1} \\times \\dbinom{2}{2} \\times \\dbinom{1}{1} = 2;\n - B = \\{1, 3, 1\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{1}{1} \\times \\dbinom{3}{2} \\times \\dbinom{1}{1} = 3;\n - B = \\{1, 2, 2\\}, where \\prod _{i = 1} ^N \\dbinom{B_i}{A_i} = \\dbinom{1}{1} \\times \\dbinom{2}{2} \\times \\dbinom{2}{1} = 2.\nThe sum of these is 1 + 2 + 3 + 2 = 8.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\nGiven two strings a and b return true if a can be constructed from string charecters in b else false\n\nEach letter in the b string can only be used once in your a string.\n\n\nNote:\nYou may assume that both strings contain only lowercase letters.\n\n\n\ncanConstruct(\"a\", \"b\") -> false\ncanConstruct(\"aa\", \"ab\") -> false\ncanConstruct(\"aa\", \"aab\") -> true\n\n\"\"\"\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:",
    "15": "Python 3\n\"\"\"\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \nnote can be constructed from the magazines ; otherwise, it will return false. \n\n\nEach letter in the magazine string can only be used once in your ransom note.\n\n\nNote:\nYou may assume that both strings contain only lowercase letters.\n\n\n\ncanConstruct(\"a\", \"b\") -> false\ncanConstruct(\"aa\", \"ab\") -> false\ncanConstruct(\"aa\", \"aab\") -> true\n\"\"\"\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:",
    "16": "Python 3\n\"\"\"\nGiven a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. Consecutive integers should be treated as a single number and all the numbers should be treaded as positive integer. If no number was given in the string, it should return 0.\n\nExamples:\nInput:\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\nOutput:\n2021\nExplanation:\nThe numbers are 2015 and 6.\n\"\"\"\ndef sum_from_string(string):",
    "17": "Python 3\n\"\"\"\nGiven a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. \n\nNote:\n\n- Consecutive integers should be treated as a single number. eg, `2015` should be treated as a single number `2015`, NOT four numbers\n- All the numbers should be treaded as positive integer. eg, `11-14` should be treated as two numbers `11` and `14`. Same as `3.14`, should be treated as two numbers `3` and `14`\n- If no number was given in the string, it should return `0`\n\n\nExample:\n\n```\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\n```\n\n The numbers are `2015`, `6`\n\nSum is `2021`.\n\"\"\"\ndef sum_from_string(string):",
    "18": "Python 3\n\"\"\"\nGiven lengths $A,B and C$ return YES if they can form a right angled triangle, NO otherwise.\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nChef loves triangles. But the chef is poor at maths. Given three random lengths Chef wants to find if the three sides form a right-angled triangle or not. Can you help Chef in this endeavour?\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, three Integers $A,B and C$\n\n-----Output:-----\nFor each test case, output in a single line \"YES\" if it is possible to form a triangle using the given numbers or \"NO\" if it is not possible to form a triangle.\n\n-----Constraints-----\n- $1 \\leq T \\leq 1000000$\n- $0 \\leq A,B,C \\leq 100$\n\n-----Sample Input:-----\n2\n3 4 5\n1 3 4\n\n-----Sample Output:-----\nYES\nNO\n\n-----EXPLANATION:-----\n3,4,5 forms a right-angled triangle. 1, 3 and 4 does not form a right-angled triangle.\n\"\"\"\ndef code():"
}