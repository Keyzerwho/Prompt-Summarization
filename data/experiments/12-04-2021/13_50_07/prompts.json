{
    "0": "Python 3\n\"\"\"\n\nDecode the given pattern and generate new pattern for number K.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe chef is trying to solve some pattern problems, Chef wants your help to code it. Chef has one number K to form a new pattern. Help the chef to code this pattern problem.\n\n-----Input:-----\n- First-line will contain $T$, the number of test cases. Then the test cases follow. \n- Each test case contains a single line of input, one integer $K$. \n\n-----Output:-----\nFor each test case, output as the pattern.\n\n-----Constraints-----\n- $1 \\leq T \\leq 100$\n- $1 \\leq K \\leq 100$\n\n-----Sample Input:-----\n2\n2\n4\n\n-----Sample Output:-----\n2\n21\n210\n21\n2\n4\n43\n432\n4321\n43210\n4321\n432\n43\n4\n\n-----EXPLANATION:-----\nNo need, else pattern can be decode easily.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nYou need to write a program that, given the sequence a_{i}, build two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree.\n\n\n-----Input-----\n\nThe first line contains a single integer h (2 \u2264 h \u2264 10^5)\u00a0\u2014 the height of the tree.\n\nThe second line contains h + 1 integers\u00a0\u2014 the sequence a_0, a_1, ..., a_{h} (1 \u2264 a_{i} \u2264 2\u00b710^5). The sum of all a_{i} does not exceed 2\u00b710^5. It is guaranteed that there is at least one tree matching this sequence.\n\n\n-----Output-----\n\nIf there is only one tree matching this sequence, print \"perfect\".\n\nOtherwise print \"ambiguous\" in the first line. In the second and in the third line print descriptions of two trees in the following format: in one line print $\\sum_{i = 0}^{h} a_{i}$ integers, the k-th of them should be the parent of vertex k or be equal to zero, if the k-th vertex is the root.\n\nThese treese should be non-isomorphic and should match the given sequence.\n\n\n-----Examples-----\nInput\n2\n1 1 1\n\nOutput\nperfect\n\nInput\n2\n1 2 2\n\nOutput\nambiguous\n0 1 1 3 3\n0 1 1 3 2\n\n\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nSasha is taking part in a programming competition. In one of the problems she should check if some rooted trees are isomorphic or not. She has never seen this problem before, but, being an experienced participant, she guessed that she should match trees to some sequences and then compare these sequences instead of trees. Sasha wants to match each tree with a sequence a_0, a_1, ..., a_{h}, where h is the height of the tree, and a_{i} equals to the number of vertices that are at distance of i edges from root. \n\nUnfortunately, this time Sasha's intuition was wrong, and there could be several trees matching the same sequence. To show it, you need to write a program that, given the sequence a_{i}, builds two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree.\n\nTwo rooted trees are isomorphic, if you can reenumerate the vertices of the first one in such a way, that the index of the root becomes equal the index of the root of the second tree, and these two trees become equal.\n\nThe height of a rooted tree is the maximum number of edges on a path from the root to any other vertex.\n\n\n-----Input-----\n\nThe first line contains a single integer h (2 \u2264 h \u2264 10^5)\u00a0\u2014 the height of the tree.\n\nThe second line contains h + 1 integers\u00a0\u2014 the sequence a_0, a_1, ..., a_{h} (1 \u2264 a_{i} \u2264 2\u00b710^5). The sum of all a_{i} does not exceed 2\u00b710^5. It is guaranteed that there is at least one tree matching this sequence.\n\n\n-----Output-----\n\nIf there is only one tree matching this sequence, print \"perfect\".\n\nOtherwise print \"ambiguous\" in the first line. In the second and in the third line print descriptions of two trees in the following format: in one line print $\\sum_{i = 0}^{h} a_{i}$ integers, the k-th of them should be the parent of vertex k or be equal to zero, if the k-th vertex is the root.\n\nThese treese should be non-isomorphic and should match the given sequence.\n\n\n-----Examples-----\nInput\n2\n1 1 1\n\nOutput\nperfect\n\nInput\n2\n1 2 2\n\nOutput\nambiguous\n0 1 1 3 3\n0 1 1 3 2\n\n\n\n-----Note-----\n\nThe only tree in the first example and the two printed trees from the second example are shown on the picture:\n\n$88$\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\nPerform the following operations on a sequence a_1, a_2, ..., a_{n} of positive integers:  Initially, x = 1 and y = 0. If, after any step, x \u2264 0 or x > n, the program immediately terminates.  The program increases both x and y by a value equal to a_{x} simultaneously.  The program now increases y by a_{x} while decreasing x by a_{x}.  The program executes steps 2 and 3 first step 2, then step 3 repeatedly until it terminates .It may never terminate.\n\nYou are given the sequence a_2, a_3, ..., a_{n}. Suppose for each i (1 \u2264 i \u2264 n - 1) we run the program on the sequence i, a_2, a_3, ..., a_{n}. For each such run output the final value of y if the program terminates or -1 if it does not terminate.\n\n\n-----Input-----\n\nThe first line contains a single integer, n (2 \u2264 n \u2264 2\u00b710^5). The next line contains n - 1 space separated integers, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nOutput n - 1 lines. On the i-th line, print the requested value when the program is run on the sequence i, a_2, a_3, ...a_{n}.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n4\n2 4 1\n\nOutput\n3\n6\n8\n\nInput\n3\n1 2\n\nOutput\n-1\n-1\n\n\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nFarmer John has just given the cows a program to play with! The program contains two integer variables, x and y, and performs the following operations on a sequence a_1, a_2, ..., a_{n} of positive integers:  Initially, x = 1 and y = 0. If, after any step, x \u2264 0 or x > n, the program immediately terminates.  The program increases both x and y by a value equal to a_{x} simultaneously.  The program now increases y by a_{x} while decreasing x by a_{x}.  The program executes steps 2 and 3 (first step 2, then step 3) repeatedly until it terminates (it may never terminate). So, the sequence of executed steps may start with: step 2, step 3, step 2, step 3, step 2 and so on. \n\nThe cows are not very good at arithmetic though, and they want to see how the program works. Please help them!\n\nYou are given the sequence a_2, a_3, ..., a_{n}. Suppose for each i (1 \u2264 i \u2264 n - 1) we run the program on the sequence i, a_2, a_3, ..., a_{n}. For each such run output the final value of y if the program terminates or -1 if it does not terminate.\n\n\n-----Input-----\n\nThe first line contains a single integer, n (2 \u2264 n \u2264 2\u00b710^5). The next line contains n - 1 space separated integers, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nOutput n - 1 lines. On the i-th line, print the requested value when the program is run on the sequence i, a_2, a_3, ...a_{n}.\n\nPlease do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n4\n2 4 1\n\nOutput\n3\n6\n8\n\nInput\n3\n1 2\n\nOutput\n-1\n-1\n\n\n\n-----Note-----\n\nIn the first sample   For i = 1,  x becomes $1 \\rightarrow 2 \\rightarrow 0$ and y becomes 1 + 2 = 3.  For i = 2,  x becomes $1 \\rightarrow 3 \\rightarrow - 1$ and y becomes 2 + 4 = 6.  For i = 3,  x becomes $1 \\rightarrow 4 \\rightarrow 3 \\rightarrow 7$ and y becomes 3 + 1 + 4 = 8.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\nYour task is to create a function that takes a string of two words separated by a space, and returns a spoonerism of those words in a string.\n\nExample:\nInput: \"not picking\"\nOutput: \"pot nicking\"\n\"\"\"\ndef spoonerize(words):",
    "7": "Python 3\n\"\"\"\nA spoonerism is a spoken phrase in which the first letters of two of the words are swapped around, often with amusing results.\n\nIn its most basic form a spoonerism is a two word phrase in which only the first letters of each word are swapped:\n\n```\"not picking\" --> \"pot nicking\"```\n\nYour task is to create a function that takes a string of two words, separated by a space: ```words``` and returns a spoonerism of those words in a string, as in the above example.\n\nNOTE: All input strings will contain only two words.  Spoonerisms can be more complex.  For example, three-word phrases in which the first letters of the first and last words are swapped: ```\"pack of lies\" --> \"lack of pies\"``` or more than one letter from a word is swapped: ```\"flat battery --> \"bat flattery\"```\nYou are NOT expected to account for these, or any other nuances involved in spoonerisms.\n\nOnce you have completed this kata, a slightly more challenging take on the idea can be found here: http://www.codewars.com/kata/56dbed3a13c2f61ae3000bcd\n\"\"\"\ndef spoonerize(words):",
    "8": "Python 3\n\"\"\"\n# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Example\n\n For `n = 152`, the output should be `52`;\n \n For `n = 1001`, the output should be `101`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 \u2264 n \u2264 1000000.`\n\n\n - `[output]` an integer\n\"\"\"\ndef delete_digit(n):",
    "9": "Python 3\n\"\"\"\n# Task\n Given an integer `n`, find the maximal number you can obtain by deleting exactly one digit of the given number.\n\n# Example\n\n For `n = 152`, the output should be `52`;\n \n For `n = 1001`, the output should be `101`.\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n    Constraints: `10 \u2264 n \u2264 1000000.`\n\n\n - `[output]` an integer\n\"\"\"\ndef delete_digit(n):",
    "10": "Python 3\n\"\"\"\n\nGiven an integer N, find the number of 3-uniform hypertrees on N vertices. Two 3-uniform hypertrees are considered different if a hyperedge (u, v, w) exists such that it is present in exactly one of these hypertrees.\n-----Input-----\nThe first line of the input contains an integer T -- the number of test cases (at most 15). Then T lines follow, each contains an integer N (3 \u2264 N \u2264 17).\n\nImportant! Please include all code used in solving this problem in your solution.\n\n-----Output-----\nFor each test case output one line containing the requested number. It's guaranteed that this number won't exceed 263-1.\n\n-----Examples-----\nInput:\n4\n3\n4\n5\n8\n\nOutput:\n1\n6\n25\n93268\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nA hypergraph is a generalization of a graph, where an edge can connect any number of vertices. A k-uniform hypergraph is a hypergraph such that all its hyperedges have size k. For more information, see Wikipedia.\n\nLet's call a particular hypergraph a hypertree if it is connected (that is, you can move from any vertex to any other vertex using only its hyperedges) and removing any of its hyperedges makes the hypergraph disconnected (note that this definition of hypertrees differs from the standard one).\n\nGiven just one integer N, find the number of 3-uniform hypertrees on N vertices. Two 3-uniform hypertrees are considered different if a hyperedge (u, v, w) exists such that it is present in exactly one of these hypertrees (note that the order of vertices in the hyperedge doesn't matter, and neither does the order of hyperedges in the hypertree).\n\n-----Input-----\nThe first line of the input contains an integer T -- the number of test cases (at most 15). Then T lines follow, each contains an integer N (3 \u2264 N \u2264 17).\n\nImportant! Please include all code used in solving this problem in your solution.\n\n-----Output-----\nFor each test case output one line containing the requested number. It's guaranteed that this number won't exceed 263-1.\n\n-----Examples-----\nInput:\n4\n3\n4\n5\n8\n\nOutput:\n1\n6\n25\n93268\n\nExplanation:\nThere is just one 3-uniform hypertree on 3 vertices: {(1,2,3)}. There are six of them on 4 vertices: {(1,2,3), (1,2,4)}, {(1,2,3), (1,3,4)}, {(1,2,3), (2,3,4)}, {(1,2,4), (1,3,4)}, {(1,2,4), (2,3,4)}, {(1,3,4), (2,3,4)}. Two of the 25 possible hypertrees on 5 vertices are {(1,2,3), (3,4,5)} and {(1,2,3), (1,2,4), (1,2,5)}.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou are given a list of strings where each string in format of \"A,B,C,D\". where A,D are strings and B,C are numbers. A string is possibly invalid if:\n\nthe C exceeds 1000, or;\nif two strings have same A and different D and the difference between C is greater than or equal to 60.\n\nreturn list of strings which are possibley invalid in any order\n\nExample 1:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\nExample 2:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]\n\nExample 3:\nInput: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]\n\n\u00a0\nConstraints:\n\ntransactions.length <= 1000\nEach transactions[i] takes the form \"{name},{time},{amount},{city}\"\nEach {name} and {city}\u00a0consist of\u00a0lowercase English letters, and have lengths between 1 and 10.\nEach {time} consist of\u00a0digits, and represent an integer between 0 and 1000.\nEach {amount}\u00a0consist of\u00a0digits, and represent an integer between 0 and 2000.\n\n\"\"\"\nclass Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:",
    "13": "Python 3\n\"\"\"\nA transaction is possibly invalid if:\n\nthe amount exceeds $1000, or;\nif it occurs within (and including) 60 minutes of another transaction with the same name in a different city.\n\nEach transaction string transactions[i]\u00a0consists of\u00a0comma separated values representing\u00a0the name, time (in minutes), amount, and city of the transaction.\nGiven a list of transactions,\u00a0return a list of transactions that are possibly invalid.\u00a0 You may return the answer in any order.\n\u00a0\nExample 1:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\nExample 2:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]\n\nExample 3:\nInput: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]\n\n\u00a0\nConstraints:\n\ntransactions.length <= 1000\nEach transactions[i] takes the form \"{name},{time},{amount},{city}\"\nEach {name} and {city}\u00a0consist of\u00a0lowercase English letters, and have lengths between 1 and 10.\nEach {time} consist of\u00a0digits, and represent an integer between 0 and 1000.\nEach {amount}\u00a0consist of\u00a0digits, and represent an integer between 0 and 2000.\n\"\"\"\nclass Solution:\n    def invalidTransactions(self, transactions: List[str]) -> List[str]:",
    "14": "Python 3\n\"\"\"\nGiven a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\n\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:",
    "15": "Python 3\n\"\"\"\nGiven a binary tree, return the sum of values of its deepest leaves.\n\u00a0\nExample 1:\n\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15\n\n\u00a0\nConstraints:\n\nThe number of nodes in the tree is between\u00a01\u00a0and\u00a010^4.\nThe value of nodes is between\u00a01\u00a0and\u00a0100.\n\"\"\"\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right\nclass Solution:\n    def deepestLeavesSum(self, root: TreeNode) -> int:",
    "16": "Python 3\n\"\"\"\nReverse a linked list from position m to n.\n\nNote:\u00a01 \u2264 m \u2264 n \u2264 length of list.\n\nExample:\n\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:",
    "17": "Python 3\n\"\"\"\nReverse a linked list from position m to n. Do it in one-pass.\n\nNote:\u00a01 \u2264 m \u2264 n \u2264 length of list.\n\nExample:\n\n\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\nOutput: 1->4->3->2->5->NULL\n\"\"\"\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:",
    "18": "Python 3\n\"\"\"\nGiven a year, find the next happy year or the closest year you'll see your best friend. Input Year with in range 1000\u2009 \u2264\u2009 y\u2009 \u2264\u2009 9000.\n\nExamples:\nInput:\nnextHappyYear(7712)\nOutput:\n7801\nExplanation:\nAs the next closest year with only distinct digits is 7801. \n\nInput:\nnextHappyYear(8989)\nOutput:\n9012\nExplanation:\nAs the next closest year with only distinct digits is 9012. \n\nInput:\nnextHappyYear(1001)\nOutput:\n1023\nExplanation:\nAs the next closest year with only distinct digits is 1023.\n\"\"\"\ndef next_happy_year(year):",
    "19": "Python 3\n\"\"\"\n# Scenario \n\n*You're saying good-bye your best friend* , **_See you next happy year_** . \n\n**_Happy Year_** *is the year with only distinct digits* , (e.g) **_2018_**\n\n___\n# Task\n\n**_Given_** a year, **_Find_** **_The next happy year_** or **_The closest year You'll see your best friend_**      ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)\n\n___\n# Notes\n\n* **_Year_** Of Course always **_Positive_** .\n* **_Have no fear_** , *It is guaranteed that the answer exists* . \n* **_It's not necessary_** *that the year passed to the function is Happy one* .   \n* **_Input Year with in range_** *(1000\u2009 \u2264\u2009 y\u2009 \u2264\u2009 9000)*\n\n____\n# Input >> Output Examples:\n\n```\nnextHappyYear (7712) ==> return (7801)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *7801* . \n___\n\n```\nnextHappyYear (8989) ==> return (9012)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *9012* . \n___\n\n```\nnextHappyYear (1001) ==> return (1023)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *1023* .\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef next_happy_year(year):"
}