{
    "0": "Python 3\n\"\"\"\n Benni is playing Digbuild. Benni prefers to dig tunnels in the ground. Benni always digs his tunnels horizontally and parallel to the $x$-axis of the gameworld. They are also always $3$ blocks high and $3$ blocks wide. Benni has just finished digging an $n$ block long tunnel and decided to go get a glass of water. When he sits down again to play some more he notices the tunnels are rather poorly lit. He realizes he has to place some torches on the floor of his tunnel to light the up. Benni is rather insistent on his tunnel not becoming ugly so he has to places the torches strategically. Benni considers his tunnel to be ugly if two blocks sharing a face both hold a torch. In Digbuild you can only place one torch per block. Benni is so against his tunnel being ugly he d rather have them unlit completely (i.e. not placing a torch is not considered ugly). In how many different ways can Benni place the torches such that his tunnel doesn t become ugly Since this number may be rather large you are asked to find the answer $\\mod 10^9 + 7$. \n-----Input----- The first and only line in the input contains the integer $1 \\leq n \\leq 10^{18}$. -----Output----- The only line in the output should contain the number of non-ugly torch arrangements in an $n$ block long tunnel, $\\mod 10^9 + 7$. -----Examples----- Sample Input 1: 1 Sample Output 1: 5 Sample Input 2: 4 Sample Output 2: 227\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nMost of us like playing video games. Benni prefers to play the video game Digbuild. Digbuild is primarily about surviving for as long as possible. In the game almost everything is possible. You can climb mountains, build castles, and fish, just to name a few options. The gameworld consists of large cubes, all the same size, whose corners are always in integral coordinates in three dimensional space. The player can both break these cubes (or blocks) and place blocks next to ones already there. There are also other items in the gameworld, auxiliary to these blocks. A few examples would be beds to sleep on, frames for photographs, and torches to light the world.\n\nBenni isn\u2019t a fan of building. He\u2019d much rather dig tunnels in the ground. Benni always digs his tunnels horizontally and parallel to the $x$-axis of the gameworld. They are also always $3$ blocks high and $3$ blocks wide. Benni has just finished digging an $n$ block long tunnel and decided to go get a glass of water. When he sits down again to play some more he notices the tunnels are rather poorly lit. He realizes he has to place some torches on the floor of his tunnel to light the up. Benni is rather insistent on his tunnel not becoming ugly so he has to places the torches strategically. Benni considers his tunnel to be ugly if two blocks sharing a face both hold a torch.\n\nIn Digbuild you can only place one torch per block. Benni is so against his tunnel being ugly he\u2019d rather have them unlit completely (i.e. not placing a torch is not considered ugly).\n\nIn how many different ways can Benni place the torches such that his tunnel doesn\u2019t become ugly? Since this number may be rather large you are asked to find the answer $\\mod 10^9 + 7$.\n\n-----Input-----\nThe first and only line in the input contains the integer $1 \\leq n \\leq 10^{18}$.\n\n-----Output-----\nThe only line in the output should contain the number of non-ugly torch arrangements in an $n$ block long tunnel, $\\mod 10^9 + 7$.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n5\n\nSample Input 2:\n4\nSample Output 2:\n227\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Given a string t, we will call it unbalanced if and only if the length of t is at least 2, and more than half of the letters in t are the same. For example, both voodoo and melee are unbalanced, while neither noon nor a is. You are given a string s consisting of lowercase letters. Determine if there exists a (contiguous) substring of s that is unbalanced. If the answer is positive, show a position where such a substring occurs in s. \n-----Input----- The input is given from Standard Input in the following format: s -----Output----- If there exists no unbalanced substring of s, print -1 -1. If there exists an unbalanced substring of s, let one such substring be s_a s_{a+1} ... s_{b} (1 \u2266 a < b \u2266 |s|), and print a b. If there exists more than one such substring, any of them will be accepted. -----Sample Input----- needed -----Sample Output----- 2 5 The string s_2 s_3 s_4 s_5 = eede is unbalanced. There are also other unbalanced substrings. For example, the output 2 6 will also be accepted.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nGiven a string t, we will call it unbalanced if and only if the length of t is at least 2, and more than half of the letters in t are the same. For example, both voodoo and melee are unbalanced, while neither noon nor a is.\nYou are given a string s consisting of lowercase letters. Determine if there exists a (contiguous) substring of s that is unbalanced. If the answer is positive, show a position where such a substring occurs in s.\n\n-----Constraints-----\n - 2 \u2266 |s| \u2266 10^5\n - s consists of lowercase letters.\n\n-----Partial Score-----\n - 200 points will be awarded for passing the test set satisfying 2 \u2266 N \u2266 100.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\ns\n\n-----Output-----\nIf there exists no unbalanced substring of s, print -1 -1.\nIf there exists an unbalanced substring of s, let one such substring be s_a s_{a+1} ... s_{b} (1 \u2266 a < b \u2266 |s|), and print a b. If there exists more than one such substring, any of them will be accepted.\n\n-----Sample Input-----\nneeded\n\n-----Sample Output-----\n2 5\n\nThe string s_2 s_3 s_4 s_5 = eede is unbalanced. There are also other unbalanced substrings. For example, the output 2 6 will also be accepted.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate. In the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it. If there are multiple categories with the same number of matches, your program should suggest all of them.\n-----Input----- The first line of input contains the number of categories $1 \\le N \\le 10$. The next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name. This is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words. Every word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words. -----Output----- For each suggested category, output the name of the category on a single line, in lexicographical order. -----Examples----- Sample Input: 4 datastructure 3 query range sum geometry 3 euclid range vertex graph 3 query vertex hamiltonian math 3 hamiltonian sum euclid consider the hamiltonian graph where each vertex corresponds to an linear equation we can solve these using the euclid algorithm now you will receive a query corresponding to a range of vertices your task is to compute the sum of the minimum solution of those vertices Sample Output: datastructure geometry graph math\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nWhen reading programming problems, one can often get some hints regarding the topic of the problem by skimming the problem statement for certain words. If, for example, the word \u201cvertex\u201d or \u201cedge\u201d appears, the problem is almost certainly a graph problem, while the words \u201cwords\u201d or \u201cletters\u201d suggest that the problem is about strings.\n\nYour task is to implement a simple program that attempts to classify a problem according to one of $N$ categories. Each category has an associated set of words, which, if they appear as words in a statement, suggest the problem belongs to this category. When classifying a statement, the program should suggest those categories which have the highest number of occurences of their associated words. Note that words that are part of other words do not count. For example, the word statement should not count as an occurance for the word ate.\n\nIn the above example, we suggested that the category graph may have the associated words vertex and edge and the category string could have the associated words words and letters. Then, if there were $3$ occurances each of the words vertex and edge, the number of matches for the category graph would be $6$. If the statement contained $14$ occurances of words and $4$ of letters, the number of matches for the category string would be $18$. Since there are more matches for the second category, the program should suggest it.\n\nIf there are multiple categories with the same number of matches, your program should suggest all of them.\n\n-----Input-----\nThe first line of input contains the number of categories $1 \\le N \\le 10$.\n\nThe next $N$ lines each contain a description of a category. The description starts with the name of the category \u2013 a single word. Then, an integer $1 \\le W \\le 10$ follows \u2013 the number of words associated with this category. This is followed by those $W$ words, separated by spaces. No two words within a category are the same, and no two categories have the same name.\n\nThis is followed by a number of lines describing the statement of the problem. Each line contains a list of space-separated words.\n\nEvery word in the input will consist solely of at most $30$ lower-case letters a-z. The statement consists of between $1$ and $10000$ words.\n\n-----Output-----\nFor each suggested category, output the name of the category on a single line, in lexicographical order.\n\n-----Examples-----\nSample Input:\n4\ndatastructure 3 query range sum\ngeometry 3 euclid range vertex\ngraph 3 query vertex hamiltonian\nmath 3 hamiltonian sum euclid\nconsider the hamiltonian graph where each vertex corresponds\nto an linear equation we can solve these using the euclid\nalgorithm now you will receive a query corresponding to a\nrange of vertices your task is to compute the sum of the\nminimum solution of those vertices\nSample Output:\ndatastructure\ngeometry\ngraph\nmath\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Polycarp is a beginner programmer. He is studying how to use a command line. Polycarp faced the following problem. There are n files in a directory and he needs to delete some of them. Polycarp wants to run a single delete command with filename pattern as an argument. All the files to be deleted should match the pattern and all other files shouldn't match the pattern. Polycarp doesn't know about an asterisk '*', the only special character he knows is a question mark ' ' which matches any single character. All other characters in the pattern match themselves only. Formally, a pattern matches a filename if and only if they have equal lengths and all characters in the corresponding positions are equal except when the character in the pattern is ' ', in which case the corresponding filename character does not matter. For example, the filename pattern \"a ba \":  matches filenames \"aabaa\", \"abba.\", \"a.ba9\" and \"a.ba.\";  does not match filenames \"aaba\", \"abaab\", \"aabaaa\" and \"aabaa.\".  Help Polycarp find a pattern which matches files to be deleted and only them or report if there is no such pattern. \n-----Input----- The first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 100) \u2014 the total number of files and the number of files to be deleted. The following n lines contain filenames, single filename per line. All filenames are non-empty strings containing only lowercase English letters, digits and dots ('.'). The length of each filename doesn't exceed 100. It is guaranteed that all filenames are distinct. The last line of the input contains m distinct integer numbers in ascending order a_1, a_2, ..., a_{m} (1 \u2264 a_{i} \u2264 n) \u2014 indices of files to be deleted. All files are indexed from 1 to n in order of their appearance in the input. -----Output----- If the required pattern exists, print \"Yes\" in the first line of the output. The second line should contain the required pattern. If there are multiple solutions, print any of them. If the required pattern doesn't exist, print the only line containing \"No\". -----Examples----- Input 3 2 ab ac cd 1 2 Output Yes a? Input 5 3 test tezt test. .est tes. 1 4 5 Output Yes ?es? Input 4 4 a b c dd 1 2 3 4 Output No Input 6 3 .svn .git .... ... .. . 1 2 3 Output Yes .???\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nPolycarp is a beginner programmer. He is studying how to use a command line.\n\nPolycarp faced the following problem. There are n files in a directory and he needs to delete some of them. Polycarp wants to run a single delete command with filename pattern as an argument. All the files to be deleted should match the pattern and all other files shouldn't match the pattern.\n\nPolycarp doesn't know about an asterisk '*', the only special character he knows is a question mark '?' which matches any single character. All other characters in the pattern match themselves only.\n\nFormally, a pattern matches a filename if and only if they have equal lengths and all characters in the corresponding positions are equal except when the character in the pattern is '?', in which case the corresponding filename character does not matter.\n\nFor example, the filename pattern \"a?ba?\":  matches filenames \"aabaa\", \"abba.\", \"a.ba9\" and \"a.ba.\";  does not match filenames \"aaba\", \"abaab\", \"aabaaa\" and \"aabaa.\". \n\nHelp Polycarp find a pattern which matches files to be deleted and only them or report if there is no such pattern.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 100) \u2014 the total number of files and the number of files to be deleted.\n\nThe following n lines contain filenames, single filename per line. All filenames are non-empty strings containing only lowercase English letters, digits and dots ('.'). The length of each filename doesn't exceed 100. It is guaranteed that all filenames are distinct.\n\nThe last line of the input contains m distinct integer numbers in ascending order a_1, a_2, ..., a_{m} (1 \u2264 a_{i} \u2264 n) \u2014 indices of files to be deleted. All files are indexed from 1 to n in order of their appearance in the input.\n\n\n-----Output-----\n\nIf the required pattern exists, print \"Yes\" in the first line of the output. The second line should contain the required pattern. If there are multiple solutions, print any of them.\n\nIf the required pattern doesn't exist, print the only line containing \"No\".\n\n\n-----Examples-----\nInput\n3 2\nab\nac\ncd\n1 2\n\nOutput\nYes\na?\n\nInput\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\nOutput\nYes\n?es?\n\nInput\n4 4\na\nb\nc\ndd\n1 2 3 4\n\nOutput\nNo\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nYes\n.???\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Nauuo is a girl who loves random picture websites. One day she made a random picture website by herself which includes $n$ pictures. When Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight. However, Nauuo discovered that some pictures she does not like were displayed too often. To solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight. Nauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her? The expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n-----Input----- The first line contains two integers $n$ and $m$ ($1\\le n\\le 50$, $1\\le m\\le 50$) \u2014 the number of pictures and the number of visits to the website. The second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$ , Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes. The third line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1\\le w_i\\le50$) \u2014 the initial weights of the pictures. -----Output----- The output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$. -----Examples----- Input 2 1 0 1 2 1 Output 332748119 332748119 Input 1 2 1 1 Output 3 Input 3 3 0 1 1 4 3 5 Output 160955686 185138929 974061117 -----Note----- In the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$. So, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$ . Because $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$. In the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$. So, the expected weight is $1+2=3$. Nauuo is very naughty so she didn't give you any hint of the third example.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nThe only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes $n$ pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\n\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\n\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 50$, $1\\le m\\le 50$) \u2014 the number of pictures and the number of visits to the website.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$ , Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1\\le w_i\\le50$) \u2014 the initial weights of the pictures.\n\n\n-----Output-----\n\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$.\n\n\n-----Examples-----\nInput\n2 1\n0 1\n2 1\n\nOutput\n332748119\n332748119\n\nInput\n1 2\n1\n1\n\nOutput\n3\n\nInput\n3 3\n0 1 1\n4 3 5\n\nOutput\n160955686\n185138929\n974061117\n\n\n\n-----Note-----\n\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\n\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$ .\n\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\n\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\n\nSo, the expected weight is $1+2=3$.\n\nNauuo is very naughty so she didn't give you any hint of the third example.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given an array a, its elements are integers: a[1], a[2], ..., a[n]. Let's introduce notation: $f(a, l, r) = \\sum_{i = l}^{r} a [ i ] ; m(a) = \\operatorname{max}_{1 \\leq l \\leq r \\leq n} f(a, l, r)$ A swap operation is the following sequence of actions:   choose two indexes i, j (i   j);  perform assignments tmp = a[i], a[i] = a[j], a[j] = tmp.  What maximum value of function m(a) can Sereja get if he is allowed to perform at most k swap operations\n-----Input----- The first line contains two integers n and k (1 \u2264 n \u2264 200;\u00a01 \u2264 k \u2264 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 \u2264 a[i] \u2264 1000). -----Output----- In a single line print the maximum value of m(a) that Sereja can get if he is allowed to perform at most k swap operations. -----Examples----- Input 10 2 10 -1 2 2 2 2 2 2 -1 10 Output 32 Input 5 10 -1 -1 -1 -1 -1 Output -1\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nAs usual, Sereja has array a, its elements are integers: a[1], a[2], ..., a[n]. Let's introduce notation:\n\n$f(a, l, r) = \\sum_{i = l}^{r} a [ i ] ; m(a) = \\operatorname{max}_{1 \\leq l \\leq r \\leq n} f(a, l, r)$\n\nA swap operation is the following sequence of actions:\n\n  choose two indexes i, j (i \u2260 j);  perform assignments tmp = a[i], a[i] = a[j], a[j] = tmp. \n\nWhat maximum value of function m(a) can Sereja get if he is allowed to perform at most k swap operations?\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 200;\u00a01 \u2264 k \u2264 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 \u2264 a[i] \u2264 1000).\n\n\n-----Output-----\n\nIn a single line print the maximum value of m(a) that Sereja can get if he is allowed to perform at most k swap operations.\n\n\n-----Examples-----\nInput\n10 2\n10 -1 2 2 2 2 2 2 -1 10\n\nOutput\n32\n\nInput\n5 10\n-1 -1 -1 -1 -1\n\nOutput\n-1\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a list of cities and their distances from each other. You are also given a number of days. Your goal is to find the minimum cost of visiting all cities exactly once. \n-----Input----- The first line of input contains three integers n, m and k (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 10^5, 1 \u2264 k \u2264 10^6).  The i-th of the following m lines contains the description of the i-th flight defined by four integers d_{i}, f_{i}, t_{i} and c_{i} (1 \u2264 d_{i} \u2264 10^6, 0 \u2264 f_{i} \u2264 n, 0 \u2264 t_{i} \u2264 n, 1 \u2264 c_{i} \u2264 10^6, exactly one of f_{i} and t_{i} equals zero), the day of departure (and arrival), the departure city, the arrival city and the ticket cost. -----Output----- Output the only integer that is the minimum cost of gathering all jury members in city 0 for k days and then sending them back to their home cities. If it is impossible to gather everybody in Metropolis for k days and then send them back to their home cities, output \"-1\" (without the quotes). -----Examples----- Input 2 6 5 1 1 0 5000 3 2 0 5500 2 2 0 6000 15 0 2 9000 9 0 1 7000 8 0 2 6500 Output 24500 Input 2 4 5 1 2 0 5000 2 1 0 4500 2 1 0 3000 8 0 1 6000 Output -1 -----Note----- The optimal way to gather everybody in Metropolis in the first sample test is to use flights that take place on days 1, 2, 8 and 9. The only alternative option is to send jury member from second city back home on day 15, that would cost 2500 more. In the second sample it is impossible to send jury member from city 2 back home from Metropolis.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nCountry of Metropolia is holding Olympiad of Metrpolises soon. It mean that all jury members of the olympiad should meet together in Metropolis (the capital of the country) for the problem preparation process.\n\nThere are n + 1 cities consecutively numbered from 0 to n. City 0 is Metropolis that is the meeting point for all jury members. For each city from 1 to n there is exactly one jury member living there. Olympiad preparation is a long and demanding process that requires k days of work. For all of these k days each of the n jury members should be present in Metropolis to be able to work on problems.\n\nYou know the flight schedule in the country (jury members consider themselves important enough to only use flights for transportation). All flights in Metropolia are either going to Metropolis or out of Metropolis. There are no night flights in Metropolia, or in the other words, plane always takes off at the same day it arrives. On his arrival day and departure day jury member is not able to discuss the olympiad. All flights in Megapolia depart and arrive at the same day.\n\nGather everybody for k days in the capital is a hard objective, doing that while spending the minimum possible money is even harder. Nevertheless, your task is to arrange the cheapest way to bring all of the jury members to Metrpolis, so that they can work together for k days and then send them back to their home cities. Cost of the arrangement is defined as a total cost of tickets for all used flights. It is allowed for jury member to stay in Metropolis for more than k days.\n\n\n-----Input-----\n\nThe first line of input contains three integers n, m and k (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 10^5, 1 \u2264 k \u2264 10^6). \n\nThe i-th of the following m lines contains the description of the i-th flight defined by four integers d_{i}, f_{i}, t_{i} and c_{i} (1 \u2264 d_{i} \u2264 10^6, 0 \u2264 f_{i} \u2264 n, 0 \u2264 t_{i} \u2264 n, 1 \u2264 c_{i} \u2264 10^6, exactly one of f_{i} and t_{i} equals zero), the day of departure (and arrival), the departure city, the arrival city and the ticket cost.\n\n\n-----Output-----\n\nOutput the only integer that is the minimum cost of gathering all jury members in city 0 for k days and then sending them back to their home cities.\n\nIf it is impossible to gather everybody in Metropolis for k days and then send them back to their home cities, output \"-1\" (without the quotes).\n\n\n-----Examples-----\nInput\n2 6 5\n1 1 0 5000\n3 2 0 5500\n2 2 0 6000\n15 0 2 9000\n9 0 1 7000\n8 0 2 6500\n\nOutput\n24500\n\nInput\n2 4 5\n1 2 0 5000\n2 1 0 4500\n2 1 0 3000\n8 0 1 6000\n\nOutput\n-1\n\n\n\n-----Note-----\n\nThe optimal way to gather everybody in Metropolis in the first sample test is to use flights that take place on days 1, 2, 8 and 9. The only alternative option is to send jury member from second city back home on day 15, that would cost 2500 more.\n\nIn the second sample it is impossible to send jury member from city 2 back home from Metropolis.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You are part of an elite hacking group who has just invented a new type of malware, called the hoppers. Hoppers can operate in any high-security computer networks; however, they can only propagate themselves in a very limited way. A computer network is a set of hosts $V$ ($|V| = N$) and direct links $E$ ($|E| = M$). Each direct link connects two different hosts, allowing them to communicate in both directions. If a host $u$ is infected with a hopper, then it will propagate itself to all hosts $W$ where $W$ is the set of hosts which are connected to any neighbor of $u$. Formally, $W = \\{ w \\mid \\{ (u,v),(v,w)\\} \\subseteq E \\} $. The newly-infected host $w$ can now proceed to infect other hosts in the same manner. You are trying to infect all hosts in a particular high-security network by compromising a single host. Of course, a compromised host will be infected with a hopper. Though it may be an impossible mission, you realize that you can trick the administrator into installing new direct links between hosts by submitting IT requests. Too many requests may arouse suspicion. Find the minimum number of IT requests you have to submit to ensure that there exists a single host such that if it is infected with a hopper, then it will propagate to the entire network.\n-----Input----- The first line contains two integers $N$ and $M$, where $3 \\le N \\le 5 \\cdot 10^5$ and $2 \\le M \\le 5 \\cdot 10^5$. The next $M$ lines contain two integers $u$ and $v$ ($1 \\le u, v \\le N$), representing a direct link between hosts $u$ and $v$. There is at most one direct link between any pair of hosts, and no host is directly linked to itself. -----Output----- The output contains an integer in a line representing the minimum number of IT requests you must send. -----Explanation----- In the first example, there are $N = 3$ hosts and $M = 2$ direct links $\\{ (1,2),(2,3)\\} $. In this network, there is no way to spread the hopper to all hosts by compromising only a single host, e.g., if we compromise host $1$, then only hosts $1$ and $3$ are infected, etc. We need to submit one IT request to connect $(1,3)$ to achieve our goal. By doing so, if we compromise host $1$, all hosts $1$, $2$, and $3$ are infected. $1 \\rightarrow 3 \\rightarrow 2$ (thus, host $2$ is infected). $1 \\rightarrow 2 \\rightarrow 3$ (thus, host $3$ is infected). -----Examples----- Sample Input 1: 3 2 1 2 2 3 Sample Output 1: 1 Sample Input 2: 5 10 1 2 2 3 3 4 4 5 5 1 1 3 2 4 3 5 4 1 5 2 Sample Output 2: 0\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou are part of an elite hacking group who has just invented a new type of malware, called the hoppers. Hoppers can operate in any high-security computer networks; however, they can only propagate themselves in a very limited way.\n\nA computer network is a set of hosts $V$ ($|V| = N$) and direct links $E$ ($|E| = M$). Each direct link connects two different hosts, allowing them to communicate in both directions. If a host $u$ is infected with a hopper, then it will propagate itself to all hosts $W$ where $W$ is the set of hosts which are connected to any neighbor of $u$. Formally, $W = \\{ w \\mid \\{ (u,v),(v,w)\\} \\subseteq E \\} $. The newly-infected host $w$ can now proceed to infect other hosts in the same manner.\n\nYou are trying to infect all hosts in a particular high-security network by compromising a single host. Of course, a compromised host will be infected with a hopper. Though it may be an impossible mission, you realize that you can trick the administrator into installing new direct links between hosts by submitting IT requests.\n\nToo many requests may arouse suspicion. Find the minimum number of IT requests you have to submit to ensure that there exists a single host such that if it is infected with a hopper, then it will propagate to the entire network.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$, where $3 \\le N \\le 5 \\cdot 10^5$ and $2 \\le M \\le 5 \\cdot 10^5$. The next $M$ lines contain two integers $u$ and $v$ ($1 \\le u, v \\le N$), representing a direct link between hosts $u$ and $v$. There is at most one direct link between any pair of hosts, and no host is directly linked to itself.\n\n-----Output-----\nThe output contains an integer in a line representing the minimum number of IT requests you must send.\n\n-----Explanation-----\nIn the first example, there are $N = 3$ hosts and $M = 2$ direct links $\\{ (1,2),(2,3)\\} $. In this network, there is no way to spread the hopper to all hosts by compromising only a single host, e.g., if we compromise host $1$, then only hosts $1$ and $3$ are infected, etc. We need to submit one IT request to connect $(1,3)$ to achieve our goal. By doing so, if we compromise host $1$, all hosts $1$, $2$, and $3$ are infected. $1 \\rightarrow 3 \\rightarrow 2$ (thus, host $2$ is infected). $1 \\rightarrow 2 \\rightarrow 3$ (thus, host $3$ is infected).\n\n-----Examples-----\nSample Input 1:\n3 2\n1 2\n2 3\nSample Output 1:\n1\n\nSample Input 2:\n5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2\nSample Output 2:\n0\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n User ainta loves to play with cards. He has a cards containing letter \"o\" and b cards containing letter \"x\". He arranges the cards in a row, and calculates the score of the deck by the formula below. At first, the score is 0. For each block of contiguous \"o\"s with length x the score increases by x^2. For each block of contiguous \"x\"s with length y the score decreases by y^2. For example, if a = 6, b = 3 and ainta have arranged the cards in the order, that is described by string \"ooxoooxxo\", the score of the deck equals 2^2 - 1^2 + 3^2 - 2^2 + 1^2 = 9. That is because the deck has 5 blocks in total: \"oo\", \"x\", \"ooo\", \"xx\", \"o\". User ainta likes big numbers, so he wants to maximize the score with the given cards. Help ainta make the score as big as possible. Note, that he has to arrange all his cards.\n-----Input----- The first line contains two space-separated integers a and b (0 \u2264 a, b \u2264 10^5;\u00a0a + b \u2265 1) \u2014 the number of \"o\" cards and the number of \"x\" cards. -----Output----- In the first line print a single integer v \u2014 the maximum score that ainta can obtain. In the second line print a + b characters describing the deck. If the k-th card of the deck contains \"o\", the k-th character must be \"o\". If the k-th card of the deck contains \"x\", the k-th character must be \"x\". The number of \"o\" characters must be equal to a, and the number of \"x \" characters must be equal to b. If there are many ways to maximize v, print any. Please, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier. -----Examples----- Input 2 3 Output -1 xoxox Input 4 0 Output 16 oooo Input 0 4 Output -16 xxxx\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nUser ainta loves to play with cards. He has a cards containing letter \"o\" and b cards containing letter \"x\". He arranges the cards in a row, and calculates the score of the deck by the formula below.  At first, the score is 0.  For each block of contiguous \"o\"s with length x the score increases by x^2.  For each block of contiguous \"x\"s with length y the score decreases by y^2.  \u00a0\n\nFor example, if a = 6, b = 3 and ainta have arranged the cards in the order, that is described by string \"ooxoooxxo\", the score of the deck equals 2^2 - 1^2 + 3^2 - 2^2 + 1^2 = 9. That is because the deck has 5 blocks in total: \"oo\", \"x\", \"ooo\", \"xx\", \"o\".\n\nUser ainta likes big numbers, so he wants to maximize the score with the given cards. Help ainta make the score as big as possible. Note, that he has to arrange all his cards.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers a and b (0 \u2264 a, b \u2264 10^5;\u00a0a + b \u2265 1) \u2014 the number of \"o\" cards and the number of \"x\" cards.\n\n\n-----Output-----\n\nIn the first line print a single integer v \u2014 the maximum score that ainta can obtain.\n\nIn the second line print a + b characters describing the deck. If the k-th card of the deck contains \"o\", the k-th character must be \"o\". If the k-th card of the deck contains \"x\", the k-th character must be \"x\". The number of \"o\" characters must be equal to a, and the number of \"x \" characters must be equal to b. If there are many ways to maximize v, print any.\n\nPlease, do not write the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Examples-----\nInput\n2 3\n\nOutput\n-1\nxoxox\n\nInput\n4 0\n\nOutput\n16\noooo\nInput\n0 4\n\nOutput\n-16\nxxxx\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a rooted tree with n nodes. Each internal node has at least two sons. You need to determine if there's at least one tree following Iahub's restrictions. The required tree must contain n nodes. \n-----Input----- The first line of the input contains integer n (1 \u2264 n \u2264 24). Next line contains n positive integers: the i-th number represents c_{i} (1 \u2264 c_{i} \u2264 n). -----Output----- Output on the first line \"YES\" (without quotes) if there exist at least one tree following Iahub's restrictions, otherwise output \"NO\" (without quotes).  -----Examples----- Input 4 1 1 1 4 Output YES Input 5 1 1 5 2 1 Output NO\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nIahub and Iahubina went to a picnic in a forest full of trees. Less than 5 minutes passed before Iahub remembered of trees from programming. Moreover, he invented a new problem and Iahubina has to solve it, otherwise Iahub won't give her the food. \n\nIahub asks Iahubina: can you build a rooted tree, such that\n\n  each internal node (a node with at least one son) has at least two sons;  node i has c_{i} nodes in its subtree? \n\nIahubina has to guess the tree. Being a smart girl, she realized that it's possible no tree can follow Iahub's restrictions. In this way, Iahub will eat all the food. You need to help Iahubina: determine if there's at least one tree following Iahub's restrictions. The required tree must contain n nodes.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 24). Next line contains n positive integers: the i-th number represents c_{i} (1 \u2264 c_{i} \u2264 n).\n\n\n-----Output-----\n\nOutput on the first line \"YES\" (without quotes) if there exist at least one tree following Iahub's restrictions, otherwise output \"NO\" (without quotes). \n\n\n-----Examples-----\nInput\n4\n1 1 1 4\n\nOutput\nYES\nInput\n5\n1 1 5 2 1\n\nOutput\nNO\n\"\"\"\ndef code():"
}