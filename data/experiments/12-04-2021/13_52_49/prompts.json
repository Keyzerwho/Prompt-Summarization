{
    "0": "Python 3\n\"\"\"\nYou are given a string S consisting of a,b and c. Find the number of strings that can be possibly obtained by repeatedly performing the following operation zero or more times, modulo 998244353:\n - Choose an integer i such that 1\\leq i\\leq |S|-1 and the i-th and (i+1)-th characters in S are different. Replace each of the i-th and (i+1)-th characters in S with the character that differs from both of them.\n\n-----Constraints-----\n - 2 \\leq |S| \\leq 2 \u00d7 10^5\n - S consists of a, b and c.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the number of strings that can be possibly obtained by repeatedly performing the operation, modulo 998244353.\n\n-----Sample Input-----\nabc\n\n-----Sample Output-----\n3\n\n\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nYou are given a string S consisting of a,b and c. Find the number of strings that can be possibly obtained by repeatedly performing the following operation zero or more times, modulo 998244353:\n - Choose an integer i such that 1\\leq i\\leq |S|-1 and the i-th and (i+1)-th characters in S are different. Replace each of the i-th and (i+1)-th characters in S with the character that differs from both of them (among a, b and c).\n\n-----Constraints-----\n - 2 \\leq |S| \\leq 2 \u00d7 10^5\n - S consists of a, b and c.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the number of strings that can be possibly obtained by repeatedly performing the operation, modulo 998244353.\n\n-----Sample Input-----\nabc\n\n-----Sample Output-----\n3\n\nabc, aaa and ccc can be obtained.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\nDetermine if the count of each of the characters in a string can be equal if a single character is removed from that string.\n\nExamples:\nInput:\nsolve('abba')\nOutput:\nfalse\nExplanation:\nIf we remove any character, the count of each character will not be equal.\n\nInput:\nsolve('abbba')\nOutput:\ntrue\nExplanation:\nIf we remove one b, the count of each character becomes 2.\n\nInput:\nsolve('aaaa')\nOutput:\ntrue\nExplanation:\nIf we remove one character, the remaining characters have same count.\n\nInput:\nsolve('wwwf')\nOutput:\ntrue\nExplanation:\nIf we remove f, the remaining letters have same count.\n\"\"\"\ndef solve(s):",
    "3": "Python 3\n\"\"\"\nIn this Kata, we are going to determine if the count of each of the characters in a string can be equal if we remove a single character from that string.\n\nFor example:\n```\nsolve('abba') = false -- if we remove any character, the count of each character will not be equal.\nsolve('abbba') = true -- if we remove one b, the count of each character becomes 2.\nsolve('aaaa') = true -- if we remove one character, the remaining characters have same count.\nsolve('wwwf') = true -- if we remove f, the remaining letters have same count.\n```\nMore examples in the test cases. Empty string is not tested.\n\nGood luck!\n\"\"\"\ndef solve(s):",
    "4": "Python 3\n\"\"\"\nImplement the ToUnderscore() method to translate a camelCase name into an underscore separated name. \n\nExamples:\nInput:\n\"ThisIsAUnitTest\"\nOutput:\n\"This_Is_A_Unit_Test\"\n\nInput:\n\"Calculate15Plus5Equals20\"\nOutput:\n\"Calculate_15_Plus_5_Equals_20\"\n\nInput:\n\"This_Is_Already_Split_Correct\"\nOutput:\n\"This_Is_Already_Split_Correct\"\n\nInput:\n\"ThisIs_Not_SplitCorrect\"\nOutput:\n\"This_Is_Not_Split_Correct\"\n\nInput:\n\"_UnderscoreMarked_Test_Name_\"\nOutput:\n_Underscore_Marked_Test_Name_\"\n\"\"\"\ndef toUnderScore(name):",
    "5": "Python 3\n\"\"\"\nYou wrote all your unit test names in camelCase.\nBut some of your colleagues have troubles reading these long test names.\nSo you make a compromise to switch to underscore separation.\n\nTo make these changes fast you wrote a class to translate a camelCase name\ninto an underscore separated name.\n\nImplement the ToUnderscore() method.\n\nExample:\n\n`\"ThisIsAUnitTest\" => \"This_Is_A_Unit_Test\"`\n\n\n**But of course there are always special cases...**\n\nYou also have some calculation tests. Make sure the results don't get split by underscores.\nSo only add an underscore in front of the first number.\n\nAlso Some people already used underscore names in their tests. You don't want to change them.\nBut if they are not split correct you should adjust them.\n\nSome of your colleagues mark their tests with a leading and trailing underscore.\nDon't remove this.\n\nAnd of course you should handle empty strings to avoid unnecessary errors. Just return an empty string then.\n\nExample:\n\n`\"Calculate15Plus5Equals20\" => \"Calculate_15_Plus_5_Equals_20\"`\n\n`\"This_Is_Already_Split_Correct\" => \"This_Is_Already_Split_Correct\"`\n\n`\"ThisIs_Not_SplitCorrect\" => \"This_Is_Not_Split_Correct\"`\n\n`\"_UnderscoreMarked_Test_Name_\" => _Underscore_Marked_Test_Name_\"`\n\"\"\"\ndef toUnderScore(name):",
    "6": "Python 3\n\"\"\"\n# Task\n Some people start with the same positive amount of money  and the money will be redistributed. \n\n Find out if the given end-state of amounts is possible.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "7": "Python 3\n\"\"\"\n# Task\n You have some people who are betting money, and they all start with the same amount of money (this number>0). \n\n Find out if the given end-state of amounts is possible after the betting is over and money is redistributed.\n\n# Input/Output\n\n\n - `[input]` integer array arr\n\n  the proposed end-state showing final amounts for each player\n\n\n - `[output]` a boolean value\n\n  `true` if this is a possible end-state and `false` otherwise\n  \n# Examples\n\n\n- For `arr = [0, 56, 100]`, the output should be `true`.\n\nThree players start with the same amount of money 52.\n\nAt the end of game, player 1 lose `52`, player2 win `4`, and  player3 win `48`.\n\n\n- For `arr = [0, 0, 0]`, the output should be `false`.\n\nPlayers should start with a positive number of of money.\n\n- For `arr = [11]`, the output should be `true`.\n\nOne player always keep his money at the end of game.\n\n\n- For `arr = [100, 100, 100, 90, 1, 0, 0]`, the output should be `false`.\n\nThese players can not start with the same amount of money.\n\"\"\"\ndef learn_charitable_game(arr):",
    "8": "Python 3\n\"\"\"\nYou are given two integers n and m. Create a matrix numbered from 1 to n\u00b7m in order of rows. \nYou have to find a matrix with n rows and m columns in which all numbers from 1\nto n\u00b7m appear exactly once and adjacent numbers in the original matrix are not\nadjacent in it, or determine that there is no such matrix.\n\n-----Input-----\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5; n\u00b7m \u2264 10^5)\u00a0\u2014 the number of rows and the number of columns in the required matrix.\n\n\n-----Output-----\n\nIf there is no such matrix, output \"NO\" (without quotes). \n\nOtherwise in the first line output \"YES\" (without quotes), and in the next n lines output m integers which form the required matrix.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\nYES\n5 4 7 2 \n3 6 1 8 \n\nInput\n2 1\n\nOutput\nNO\n\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nStudents went into a class to write a test and sat in some way. The teacher thought: \"Probably they sat in this order to copy works of each other. I need to rearrange them in such a way that students that were neighbors are not neighbors in a new seating.\"\n\nThe class can be represented as a matrix with n rows and m columns with a student in each cell. Two students are neighbors if cells in which they sit have a common side.\n\nLet's enumerate students from 1 to n\u00b7m in order of rows. So a student who initially sits in the cell in row i and column j has a number (i - 1)\u00b7m + j. You have to find a matrix with n rows and m columns in which all numbers from 1 to n\u00b7m appear exactly once and adjacent numbers in the original matrix are not adjacent in it, or determine that there is no such matrix.\n\n\n-----Input-----\n\nThe only line contains two integers n and m (1 \u2264 n, m \u2264 10^5; n\u00b7m \u2264 10^5)\u00a0\u2014 the number of rows and the number of columns in the required matrix.\n\n\n-----Output-----\n\nIf there is no such matrix, output \"NO\" (without quotes). \n\nOtherwise in the first line output \"YES\" (without quotes), and in the next n lines output m integers which form the required matrix.\n\n\n-----Examples-----\nInput\n2 4\n\nOutput\nYES\n5 4 7 2 \n3 6 1 8 \n\nInput\n2 1\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first test case the matrix initially looks like this:\n\n1 2 3 4\n\n5 6 7 8\n\n\n\nIt's easy to see that there are no two students that are adjacent in both matrices.\n\nIn the second test case there are only two possible seatings and in both of them students with numbers 1 and 2 are neighbors.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\nMake a program that filters a list of strings and returns a list with only names with exactly 4 letters in it.\n\nEx: Input = [\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"], Output = [\"Ryan\", \"Yous\"]\n\n\n\"\"\"\ndef friend(x):",
    "11": "Python 3\n\"\"\"\nMake a program that filters a list of strings and returns a list with only your friends name in it.\n\nIf a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...\n\nEx: Input = [\"Ryan\", \"Kieran\", \"Jason\", \"Yous\"], Output = [\"Ryan\", \"Yous\"]\n\ni.e.\n\nNote: keep the original order of the names in the output.\n\"\"\"\ndef friend(x):",
    "12": "Python 3\n\"\"\"\nYou are given a graph with $3 \\cdot n$ vertices and $m$ edges. You are to find a matching of $n$ edges, or an independent set of $n$ vertices.\n\nA set of edges is called a matching if no two edges share an endpoint.\n\nA set of vertices is called an independent set if no two vertices are connected with an edge.\n\n-----Input-----\n\nThe first line contains a single integer $T \\ge 1$\u00a0\u2014 the number of graphs you need to process. The description of $T$ graphs follows.\n\nThe first line of description of a single graph contains two integers $n$ and $m$, where $3 \\cdot n$ is the number of vertices, and $m$ is the number of edges in the graph ($1 \\leq n \\leq 10^{5}$, $0 \\leq m \\leq 5 \\cdot 10^{5}$).\n\nEach of the next $m$ lines contains two integers $v_i$ and $u_i$ ($1 \\leq v_i, u_i \\leq 3 \\cdot n$), meaning that there is an edge between vertices $v_i$ and $u_i$.\n\nThere are no self-loops and no multiple edges in the graph.\n\nThe sum of all $n$ over all graphs in a single test does not exceed $10^{5}$, and the sum of all $m$ over all graphs in a single test does not exceed $5 \\cdot 10^{5}$.\n\n\n-----Output-----\n\nPrint your answer for each of the $T$ graphs which has the following output format.\n\nIf you found a matching of size $n$, first print \"Matching\", and then print $n$ integers in newline. The edges are numbered from $1$ to $m$ in the input order.\n\nIf you found an independent set of size $n$, print \"IndSet\", and then print $n$ integers in newline.\n\nPrint \"Impossible\" if there is no matching or independent set.\n\nIf there are several solutions, print any one only.\n\n\n-----Example-----\nInput\n4\n1 2\n1 3\n1 2\n1 2\n1 3\n1 2\n2 5\n1 2\n3 1\n1 4\n5 1\n1 6\n2 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\nOutput\nMatching\n2\nIndSet\n1\nIndSet\n2 4\nMatching\n1 15\n\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nYou are given a graph with $3 \\cdot n$ vertices and $m$ edges. You are to find a matching of $n$ edges, or an independent set of $n$ vertices.\n\nA set of edges is called a matching if no two edges share an endpoint.\n\nA set of vertices is called an independent set if no two vertices are connected with an edge.\n\n\n-----Input-----\n\nThe first line contains a single integer $T \\ge 1$\u00a0\u2014 the number of graphs you need to process. The description of $T$ graphs follows.\n\nThe first line of description of a single graph contains two integers $n$ and $m$, where $3 \\cdot n$ is the number of vertices, and $m$ is the number of edges in the graph ($1 \\leq n \\leq 10^{5}$, $0 \\leq m \\leq 5 \\cdot 10^{5}$).\n\nEach of the next $m$ lines contains two integers $v_i$ and $u_i$ ($1 \\leq v_i, u_i \\leq 3 \\cdot n$), meaning that there is an edge between vertices $v_i$ and $u_i$.\n\nIt is guaranteed that there are no self-loops and no multiple edges in the graph.\n\nIt is guaranteed that the sum of all $n$ over all graphs in a single test does not exceed $10^{5}$, and the sum of all $m$ over all graphs in a single test does not exceed $5 \\cdot 10^{5}$.\n\n\n-----Output-----\n\nPrint your answer for each of the $T$ graphs. Output your answer for a single graph in the following format.\n\nIf you found a matching of size $n$, on the first line print \"Matching\" (without quotes), and on the second line print $n$ integers\u00a0\u2014 the indices of the edges in the matching. The edges are numbered from $1$ to $m$ in the input order.\n\nIf you found an independent set of size $n$, on the first line print \"IndSet\" (without quotes), and on the second line print $n$ integers\u00a0\u2014 the indices of the vertices in the independent set.\n\nIf there is no matching and no independent set of the specified size, print \"Impossible\" (without quotes).\n\nYou can print edges and vertices in any order.\n\nIf there are several solutions, print any. In particular, if there are both a matching of size $n$, and an independent set of size $n$, then you should print exactly one of such matchings or exactly one of such independent sets.\n\n\n-----Example-----\nInput\n4\n1 2\n1 3\n1 2\n1 2\n1 3\n1 2\n2 5\n1 2\n3 1\n1 4\n5 1\n1 6\n2 15\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n5 6\n\nOutput\nMatching\n2\nIndSet\n1\nIndSet\n2 4\nMatching\n1 15\n\n\n\n-----Note-----\n\nThe first two graphs are same, and there are both a matching of size 1 and an independent set of size 1. Any of these matchings and independent sets is a correct answer.\n\nThe third graph does not have a matching of size 2, however, there is an independent set of size 2. Moreover, there is an independent set of size 5: 2 3 4 5 6. However such answer is not correct, because you are asked to find an independent set (or matching) of size exactly $n$.\n\nThe fourth graph does not have an independent set of size 2, but there is a matching of size 2.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n\nYou have to shuffle digits of the given proportion(x : y :: z : w) in order to check that is it possible to make new proportion or not.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\".\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nChef recently learned about ratios and proportions. He wrote some positive integers a, b, c, d on a paper. Chef wants to know whether he can shuffle these numbers so as to make some proportion? Formally, four numbers x, y, z, w are said to make a proportion if ratio of x : y is same as that of z : w.\n\n-----Input-----\nOnly line of the input contains four space separated positive integers - a, b, c, d.\n\n-----Output-----\nPrint \"Possible\" if it is possible to shuffle a, b, c, d to make proportion, otherwise \"Impossible\" (without quotes).\n\n-----Constraints-----\n- 1 \u2264 a, b, c, d  \u2264 1000\n\n-----Example-----\nInput:\n1 2 4 2\n\nOutput:\nPossible\n\n-----Explanation-----\nBy swapping 4 and the second 2, we get 1 2 2 4. Note that 1 2 2 4 make proportion as 1 : 2 = 2 : 4. Hence answer is \"Possible\"\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n# Task\n\nGiven a list of digits, return the smallest number that could be formed from these digits, using the digits only once (ignore duplicates).\n___\n\n# Notes:\n\nOnly positive integers will be passed to the function (> 0 ), no negatives or zeros.\n___\n# Input >> Output Examples \n\n```\nminValue ({1, 3, 1})  ==> return (13)\n```\n## Explanation:\n**_(13)_** *is the minimum number could be formed from* **_{1, 3, 1}_** , *Without duplications*  \n___\n```\nminValue({5, 7, 5, 9, 7})  ==> return (579)\n```\n## Explanation:\n**_(579)_** *is the minimum number could be formed from* **_{5, 7, 5, 9, 7}_** , *Without duplications* \n___\n\n```\nminValue({1, 9, 3, 1, 7, 4, 6, 6, 7}) return  ==> (134679)\n```\n## Explanation:\n**_(134679)_** *is the minimum number could be formed from* **_{1, 9, 3, 1, 7, 4, 6, 6, 7}_** , *Without duplications* \n\n\n\"\"\"\ndef min_value(digits):",
    "17": "Python 3\n\"\"\"\n# Task\n\n**_Given_** a **_list of digits_**, *return the **_smallest number_** that could be formed from these digits, using the digits only once (ignore duplicates).* \n___\n\n# Notes:\n\n* Only **_positive integers_** *will be passed to the function (> 0 ), no negatives or zeros.*\n___\n# Input >> Output Examples \n\n```\nminValue ({1, 3, 1})  ==> return (13)\n```\n## Explanation:\n**_(13)_** *is the minimum number could be formed from* **_{1, 3, 1}_** , *Without duplications*  \n___\n```\nminValue({5, 7, 5, 9, 7})  ==> return (579)\n```\n## Explanation:\n**_(579)_** *is the minimum number could be formed from* **_{5, 7, 5, 9, 7}_** , *Without duplications* \n___\n\n```\nminValue({1, 9, 3, 1, 7, 4, 6, 6, 7}) return  ==> (134679)\n```\n## Explanation:\n**_(134679)_** *is the minimum number could be formed from* **_{1, 9, 3, 1, 7, 4, 6, 6, 7}_** , *Without duplications* \n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"\ndef min_value(digits):",
    "18": "Python 3\n\"\"\"\nYou are given grid of size $a \\times b$ and a coordinate $(x, y)$ within that grid. \nYou need to output the largest area of a rectangle that does not include the coordinate $(x, y)$.\nThe boundaries of the rectangle should be parallel to the sides of the grid.\n\n-----Input-----\n\nIn the first line you are given an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the\nnumber of test cases in the test. In the next lines you are given descriptions\nof $t$ test cases.\n\nEach test case contains a single line which consists of $4$ integers $a, b, x$\nand $y$ ($1 \\le a, b \\le 10^4$; $0 \\le x < a$; $0 \\le y < b$)\u00a0\u2014 the size of the\ngrid and the coordinate. It is guaranteed that $a+b>2$.\n\n\n-----Output-----\n\nPrint $t$ integers\u00a0\u2014 the answers for each test case. \n\n-----Example-----\nInput\n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput\n56\n6\n442\n1\n45\n80\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nScreen resolution of Polycarp's monitor is $a \\times b$ pixels. Unfortunately, there is one dead pixel at his screen. It has coordinates $(x, y)$ ($0 \\le x < a, 0 \\le y < b$). You can consider columns of pixels to be numbered from $0$ to $a-1$, and rows\u00a0\u2014 from $0$ to $b-1$.\n\nPolycarp wants to open a rectangular window of maximal size, which doesn't contain the dead pixel. The boundaries of the window should be parallel to the sides of the screen.\n\nPrint the maximal area (in pixels) of a window that doesn't contain the dead pixel inside itself.\n\n\n-----Input-----\n\nIn the first line you are given an integer $t$ ($1 \\le t \\le 10^4$)\u00a0\u2014 the number of test cases in the test. In the next lines you are given descriptions of $t$ test cases.\n\nEach test case contains a single line which consists of $4$ integers $a, b, x$ and $y$ ($1 \\le a, b \\le 10^4$; $0 \\le x < a$; $0 \\le y < b$)\u00a0\u2014 the resolution of the screen and the coordinates of a dead pixel. It is guaranteed that $a+b>2$ (e.g. $a=b=1$ is impossible).\n\n\n-----Output-----\n\nPrint $t$ integers\u00a0\u2014 the answers for each test case. Each answer should contain an integer equal to the maximal possible area (in pixels) of a rectangular window, that doesn't contain the dead pixel.\n\n\n-----Example-----\nInput\n6\n8 8 0 0\n1 10 0 3\n17 31 10 4\n2 1 0 0\n5 10 3 9\n10 10 4 8\n\nOutput\n56\n6\n442\n1\n45\n80\n\n\n\n-----Note-----\n\nIn the first test case, the screen resolution is $8 \\times 8$, and the upper left pixel is a dead pixel. Here you can see one of two possible layouts of the maximal window. [Image]\n\"\"\"\ndef code():"
}