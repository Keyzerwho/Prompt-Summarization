{
    "0": "Python 3\n\"\"\"\n Artem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. After the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n-----Input----- The first line contains a single integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of elements in the array. The next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the values of the array elements. -----Output----- In a single line print a single integer \u2014 the maximum number of points Artem can get. -----Examples----- Input 5 3 1 5 2 6 Output 11 Input 5 1 2 3 4 5 Output 6 Input 5 1 100 101 100 1 Output 102\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nArtem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. \n\nAfter the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of elements in the array. The next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the values of the array elements.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the maximum number of points Artem can get.\n\n\n-----Examples-----\nInput\n5\n3 1 5 2 6\n\nOutput\n11\n\nInput\n5\n1 2 3 4 5\n\nOutput\n6\n\nInput\n5\n1 100 101 100 1\n\nOutput\n102\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n Two players play a game. Each player can choose one of the following two moves: - When one or more bags contain coins: Choose one bag that contains coin(s) and one dish, then move all coins in the chosen bag onto the chosen dish. (The chosen dish may already have coins on it, or not.) - When no bag contains coins: Choose one dish with coin(s) on it, then remove one or more coins from the chosen dish. The player who first becomes unable to make a move loses. Determine the winner of the game when the two players play optimally. You are given T test cases. Solve each of them.\n-----Input----- Input is given from Standard Input in the following format: T \\mathrm{case}_1 \\vdots \\mathrm{case}_T Each case is in the following format: N a_1 a_2 \\cdots a_N -----Output----- Print T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case. -----Sample Input----- 3 1 10 2 1 2 21 476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162 -----Sample Output----- Second First Second  - In test case 1, Jiro the second wins. Below is one sequence of moves that results in Jiro's win:  - In Taro the first's turn, he can only choose Bag 1 and move the coins onto Dish 1.  - In Jiro the second's turn, he can choose Dish 1 and remove all coins from it, making Taro fail to make a move and lose.  - Note that when there is a bag that contains coin(s), a player can only make a move in which he chooses a bag that contains coin(s) and moves the coin(s) onto a dish.  - Similarly, note that when there is no bag that contains coin(s), a player can only make a move in which he chooses a dish and removes one or more coins.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nWe have N bags numbered 1 through N and N dishes numbered 1 through N.\nBag i contains a_i coins, and each dish has nothing on it initially.\nTaro the first and Jiro the second will play a game against each other.\nThey will alternately take turns, with Taro the first going first.\nIn each player's turn, the player can make one of the following two moves:\n - When one or more bags contain coin(s): Choose one bag that contains coin(s) and one dish, then move all coins in the chosen bag onto the chosen dish. (The chosen dish may already have coins on it, or not.)\n - When no bag contains coins: Choose one dish with coin(s) on it, then remove one or more coins from the chosen dish.\nThe player who first becomes unable to make a move loses. Determine the winner of the game when the two players play optimally.\nYou are given T test cases. Solve each of them.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq T \\leq 10^5\n - 1 \\leq N \\leq 10^{5}\n - 1 \\leq a_i \\leq 10^9\n - In one input file, the sum of N does not exceed 2 \\times 10^5.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nT\n\\mathrm{case}_1\n\\vdots\n\\mathrm{case}_T\n\nEach case is in the following format:\nN\na_1 a_2 \\cdots a_N\n\n-----Output-----\nPrint T lines. The i-th line should contain First if Taro the first wins in the i-th test case, and Second if Jiro the second wins in the test case.\n\n-----Sample Input-----\n3\n1\n10\n2\n1 2\n21\n476523737 103976339 266993 706803678 802362985 892644371 953855359 196462821 817301757 409460796 773943961 488763959 405483423 616934516 710762957 239829390 55474813 818352359 312280585 185800870 255245162\n\n-----Sample Output-----\nSecond\nFirst\nSecond\n\n - In test case 1, Jiro the second wins. Below is one sequence of moves that results in Jiro's win:\n - In Taro the first's turn, he can only choose Bag 1 and move the coins onto Dish 1.\n - In Jiro the second's turn, he can choose Dish 1 and remove all coins from it, making Taro fail to make a move and lose.\n - Note that when there is a bag that contains coin(s), a player can only make a move in which he chooses a bag that contains coin(s) and moves the coin(s) onto a dish.\n - Similarly, note that when there is no bag that contains coin(s), a player can only make a move in which he chooses a dish and removes one or more coins.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Given two rectangles on a plane, find the area of the region that belongs to both of them. \n-----Input----- The first line contains three integers w, h, \u03b1 (1 \u2264 w, h \u2264 10^6;\u00a00 \u2264 \u03b1 \u2264 180). Angle \u03b1 is given in degrees. -----Output----- In a single line print a real number \u2014 the area of the region which belongs to both given rectangles. The answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}. -----Examples----- Input 1 1 45 Output 0.828427125 Input 6 4 30 Output 19.668384925 -----Note----- The second sample has been drawn on the picture above.\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nYou are given two rectangles on a plane. The centers of both rectangles are located in the origin of coordinates (meaning the center of the rectangle's symmetry). The first rectangle's sides are parallel to the coordinate axes: the length of the side that is parallel to the Ox axis, equals w, the length of the side that is parallel to the Oy axis, equals h. The second rectangle can be obtained by rotating the first rectangle relative to the origin of coordinates by angle \u03b1. [Image] \n\nYour task is to find the area of the region which belongs to both given rectangles. This region is shaded in the picture.\n\n\n-----Input-----\n\nThe first line contains three integers w, h, \u03b1 (1 \u2264 w, h \u2264 10^6;\u00a00 \u2264 \u03b1 \u2264 180). Angle \u03b1 is given in degrees.\n\n\n-----Output-----\n\nIn a single line print a real number \u2014 the area of the region which belongs to both given rectangles.\n\nThe answer will be considered correct if its relative or absolute error doesn't exceed 10^{ - 6}.\n\n\n-----Examples-----\nInput\n1 1 45\n\nOutput\n0.828427125\n\nInput\n6 4 30\n\nOutput\n19.668384925\n\n\n\n-----Note-----\n\nThe second sample has been drawn on the picture above.\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n Walter was once a promising chemist. Now he teaches high school students chemistry, and was recently diagnosed with lung cancer. In both desperation and excitement he decides to use his chemistry skills to produce illegal drugs and make quick money for his family. He forms a partnership with one of his old students, Jesse, who has some experience with the drug scene. Now Walter and Jesse are preparing for their first cook (the process of making the drugs). They have a list of items they need for the cook, but they realized they have to be very careful when going to the store. The reason is that it may be suspicious to buy certain pairs of items, like cold medicine and battery acid, in the same trip. They decide to divide the items among themselves, so that each of them can go one trip to the store and buy their share of items without the risk of anyone becoming suspicious. Help them find such a division, or tell them that it is not possible. \n-----Input----- The first line of input contains an integer $N$, $1 \\leq N < 100000$, the number of items they want to buy. The following $N$ lines contain the names of these items, all of which are different. A name consists of at most $20$ lowercase letters from the English alphabet or underscores, and is non-empty. The next line of input contains an integer $M$, $0 \\leq M < 100000$, the number of pairs of items that are considered suspicious when bought together. Then follow $M$ lines, each containing the names of two different items that form a suspicious pair. Each suspicious pair will be listed exactly once. -----Output----- If it is possible for Walter and Jesse to divide the items among themselves, then output two lines. In the first line output the names of the items that Walter should buy. In the second line output the names of the items that Jesse should buy. If there are multiple solutions, output any of them. If this is not possible, output impossible. -----Examples----- Sample Input: 5 battery_acid drain_cleaner antifreeze cold_medicine lantern_fuel 2 cold_medicine battery_acid antifreeze lantern_fuel Sample Output: lantern_fuel drain_cleaner battery_acid antifreeze cold_medicine\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nWalter was once a promising chemist. Now he teaches high school students chemistry, and was recently diagnosed with lung cancer. In both desperation and excitement he decides to use his chemistry skills to produce illegal drugs and make quick money for his family. He forms a partnership with one of his old students, Jesse, who has some experience with the drug scene.\n\nNow Walter and Jesse are preparing for their first \u201ccook\u201d (the process of making the drugs). They have a list of items they need for the cook, but they realized they have to be very careful when going to the store. The reason is that it may be suspicious to buy certain pairs of items, like cold medicine and battery acid, in the same trip.\n\nThey decide to divide the items among themselves, so that each of them can go one trip to the store and buy their share of items without the risk of anyone becoming suspicious. Help them find such a division, or tell them that it is not possible.\n\n-----Input-----\nThe first line of input contains an integer $N$, $1 \\leq N < 100000$, the number of items they want to buy. The following $N$ lines contain the names of these items, all of which are different. A name consists of at most $20$ lowercase letters from the English alphabet or underscores, and is non-empty. The next line of input contains an integer $M$, $0 \\leq M < 100000$, the number of pairs of items that are considered suspicious when bought together. Then follow $M$ lines, each containing the names of two different items that form a suspicious pair. Each suspicious pair will be listed exactly once.\n\n-----Output-----\nIf it is possible for Walter and Jesse to divide the items among themselves, then output two lines. In the first line output the names of the items that Walter should buy. In the second line output the names of the items that Jesse should buy. If there are multiple solutions, output any of them. If this is not possible, output impossible.\n\n-----Examples-----\nSample Input:\n5\nbattery_acid\ndrain_cleaner\nantifreeze\ncold_medicine\nlantern_fuel\n2\ncold_medicine battery_acid\nantifreeze lantern_fuel\nSample Output:\nlantern_fuel drain_cleaner battery_acid\nantifreeze cold_medicine\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given an array $a_{1}, a_{2}, \\ldots, a_{n}$. You can remove at most one subsegment from it. The remaining elements should be pairwise distinct. In other words, at most one time you can choose two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) and delete integers $a_l, a_{l+1}, \\ldots, a_r$ from the array. Remaining elements should be pairwise distinct. Find the minimum size of the subsegment you need to remove to make all remaining elements distinct. \n-----Input----- The first line of the input contains a single integer $n$ ($1 \\le n \\le 2000$)\u00a0\u2014 the number of elements in the given array. The next line contains $n$ spaced integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($1 \\le a_{i} \\le 10^{9}$)\u00a0\u2014 the elements of the array.  -----Output----- Print a single integer\u00a0\u2014 the minimum size of the subsegment you need to remove to make all elements of the array pairwise distinct. If no subsegment needs to be removed, print $0$. -----Examples----- Input 3 1 2 3 Output 0 Input 4 1 1 2 2 Output 2 Input 5 1 4 1 4 9 Output 2 -----Note----- In the first example all the elements are already distinct, therefore no subsegment needs to be removed. In the second example you can remove the subsegment from index $2$ to $3$. In the third example you can remove the subsegments from index $1$ to $2$, or from index $2$ to $3$, or from index $3$ to $4$.\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nYou are given an array $a_{1}, a_{2}, \\ldots, a_{n}$. You can remove at most one subsegment from it. The remaining elements should be pairwise distinct.\n\nIn other words, at most one time you can choose two integers $l$ and $r$ ($1 \\leq l \\leq r \\leq n$) and delete integers $a_l, a_{l+1}, \\ldots, a_r$ from the array. Remaining elements should be pairwise distinct. \n\nFind the minimum size of the subsegment you need to remove to make all remaining elements distinct.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 2000$)\u00a0\u2014 the number of elements in the given array.\n\nThe next line contains $n$ spaced integers $a_{1}, a_{2}, \\ldots, a_{n}$ ($1 \\le a_{i} \\le 10^{9}$)\u00a0\u2014 the elements of the array. \n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum size of the subsegment you need to remove to make all elements of the array pairwise distinct. If no subsegment needs to be removed, print $0$.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n0\n\nInput\n4\n1 1 2 2\n\nOutput\n2\n\nInput\n5\n1 4 1 4 9\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example all the elements are already distinct, therefore no subsegment needs to be removed.\n\nIn the second example you can remove the subsegment from index $2$ to $3$.\n\nIn the third example you can remove the subsegments from index $1$ to $2$, or from index $2$ to $3$, or from index $3$ to $4$.\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n There are $n$ rooms (numbered $0$ to $n - 1$) arranged in a circle, with a snake in each room. The rooms are connected by $n$ conveyor belts, and the $i$-th conveyor belt connects the rooms $i$ and $(i+1) \\bmod n$. In the other words, rooms $0$ and $1$, $1$ and $2$, $\\ldots$, $n-2$ and $n-1$, $n-1$ and $0$ are connected with conveyor belts. The $i$-th conveyor belt is in one of three states:  If it is clockwise, snakes can only go from room $i$ to $(i+1) \\bmod n$.  If it is anticlockwise, snakes can only go from room $(i+1) \\bmod n$ to $i$.  If it is off, snakes can travel in either direction.  [Image]  Above is an example with $4$ rooms, where belts $0$ and $3$ are off, $1$ is clockwise, and $2$ is anticlockwise. Each snake wants to leave its room and come back to it later. A room is returnable if the snake there can leave the room, and later come back to it using the conveyor belts. How many such returnable rooms are there\n-----Input----- Each test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$): the number of test cases. The description of the test cases follows.   The first line of each test case description contains a single integer $n$ ($2 \\le n \\le 300\\,000$): the number of rooms.  The next line of each test case description contains a string $s$ of length $n$, consisting of only '<', '>' and '-'.  If $s_{i} = $ '>', the $i$-th conveyor belt goes clockwise.  If $s_{i} = $ '<', the $i$-th conveyor belt goes anticlockwise.  If $s_{i} = $ '-', the $i$-th conveyor belt is off.  It is guaranteed that the sum of $n$ among all test cases does not exceed $300\\,000$. -----Output----- For each test case, output the number of returnable rooms. -----Example----- Input 4 4 -><- 5 >>>>> 3 <-- 2 <> Output 3 5 3 0 -----Note----- In the first test case, all rooms are returnable except room $2$. The snake in the room $2$ is trapped and cannot exit. This test case corresponds to the picture from the problem statement.  In the second test case, all rooms are returnable by traveling on the series of clockwise belts.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nIn the snake exhibition, there are $n$ rooms (numbered $0$ to $n - 1$) arranged in a circle, with a snake in each room. The rooms are connected by $n$ conveyor belts, and the $i$-th conveyor belt connects the rooms $i$ and $(i+1) \\bmod n$. In the other words, rooms $0$ and $1$, $1$ and $2$, $\\ldots$, $n-2$ and $n-1$, $n-1$ and $0$ are connected with conveyor belts.\n\nThe $i$-th conveyor belt is in one of three states:  If it is clockwise, snakes can only go from room $i$ to $(i+1) \\bmod n$.  If it is anticlockwise, snakes can only go from room $(i+1) \\bmod n$ to $i$.  If it is off, snakes can travel in either direction.  [Image] \n\nAbove is an example with $4$ rooms, where belts $0$ and $3$ are off, $1$ is clockwise, and $2$ is anticlockwise.\n\nEach snake wants to leave its room and come back to it later. A room is returnable if the snake there can leave the room, and later come back to it using the conveyor belts. How many such returnable rooms are there?\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains a single integer $t$ ($1 \\le t \\le 1000$): the number of test cases. The description of the test cases follows. \n\n The first line of each test case description contains a single integer $n$ ($2 \\le n \\le 300\\,000$): the number of rooms.\n\n The next line of each test case description contains a string $s$ of length $n$, consisting of only '<', '>' and '-'.  If $s_{i} = $ '>', the $i$-th conveyor belt goes clockwise.  If $s_{i} = $ '<', the $i$-th conveyor belt goes anticlockwise.  If $s_{i} = $ '-', the $i$-th conveyor belt is off. \n\nIt is guaranteed that the sum of $n$ among all test cases does not exceed $300\\,000$.\n\n\n-----Output-----\n\nFor each test case, output the number of returnable rooms.\n\n\n-----Example-----\nInput\n4\n4\n-><-\n5\n>>>>>\n3\n<--\n2\n<>\n\nOutput\n3\n5\n3\n0\n\n\n\n-----Note-----\n\nIn the first test case, all rooms are returnable except room $2$. The snake in the room $2$ is trapped and cannot exit. This test case corresponds to the picture from the problem statement.\n\n In the second test case, all rooms are returnable by traveling on the series of clockwise belts.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Find the longest common subsequence of two strings, such that it doesn't contain virus as a substring. \n-----Input----- The input contains three strings in three separate lines: s_1, s_2 and virus (1 \u2264 |s_1|, |s_2|, |virus| \u2264 100). Each string consists only of uppercase English letters. -----Output----- Output the longest common subsequence of s_1 and s_2 without virus as a substring. If there are multiple answers, any of them will be accepted.  If there is no valid common subsequence, output 0. -----Examples----- Input AJKEQSLOBSROFGZ OVGURWZLWVLUXTH OZ Output ORZ Input AA A A Output 0\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nIn mathematics, a subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, the sequence BDF is a subsequence of ABCDEF. A substring of a string is a continuous subsequence of the string. For example, BCD is a substring of ABCDEF.\n\nYou are given two strings s_1, s_2 and another string called virus. Your task is to find the longest common subsequence of s_1 and s_2, such that it doesn't contain virus as a substring.\n\n\n-----Input-----\n\nThe input contains three strings in three separate lines: s_1, s_2 and virus (1 \u2264 |s_1|, |s_2|, |virus| \u2264 100). Each string consists only of uppercase English letters.\n\n\n-----Output-----\n\nOutput the longest common subsequence of s_1 and s_2 without virus as a substring. If there are multiple answers, any of them will be accepted. \n\nIf there is no valid common subsequence, output 0.\n\n\n-----Examples-----\nInput\nAJKEQSLOBSROFGZ\nOVGURWZLWVLUXTH\nOZ\n\nOutput\nORZ\n\nInput\nAA\nA\nA\n\nOutput\n0\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who's bugged the code  Each of the n coders on the meeting said: 'I know for sure that either x or y did it!' The head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That's why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects  Note that even if some coder was chosen as a suspect, he can agree with the head's choice if he named the other chosen coder at the meeting.\n-----Input----- The first line contains integers n and p (3 \u2264 n \u2264 3\u00b710^5;\u00a00 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people. Each of the next n lines contains two integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n) \u2014 the numbers of coders named by the i-th coder. It is guaranteed that x_{i} \u2260 i, \u00a0y_{i} \u2260 i, \u00a0x_{i} \u2260 y_{i}. -----Output----- Print a single integer \u2013\u2013 the number of possible two-suspect sets. Note that the order of the suspects doesn't matter, that is, sets (1, 2) \u0438 (2, 1) are considered identical. -----Examples----- Input 4 2 2 3 1 4 1 4 2 1 Output 6 Input 8 6 5 6 5 7 5 8 6 2 2 1 7 3 1 3 1 4 Output 1\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nRecently a serious bug has been found in the FOS code. The head of the F company wants to find the culprit and punish him. For that, he set up an organizational meeting, the issue is: who's bugged the code? Each of the n coders on the meeting said: 'I know for sure that either x or y did it!'\n\nThe head of the company decided to choose two suspects and invite them to his office. Naturally, he should consider the coders' opinions. That's why the head wants to make such a choice that at least p of n coders agreed with it. A coder agrees with the choice of two suspects if at least one of the two people that he named at the meeting was chosen as a suspect. In how many ways can the head of F choose two suspects?\n\nNote that even if some coder was chosen as a suspect, he can agree with the head's choice if he named the other chosen coder at the meeting.\n\n\n-----Input-----\n\nThe first line contains integers n and p (3 \u2264 n \u2264 3\u00b710^5;\u00a00 \u2264 p \u2264 n) \u2014 the number of coders in the F company and the minimum number of agreed people.\n\nEach of the next n lines contains two integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n) \u2014 the numbers of coders named by the i-th coder. It is guaranteed that x_{i} \u2260 i, \u00a0y_{i} \u2260 i, \u00a0x_{i} \u2260 y_{i}.\n\n\n-----Output-----\n\nPrint a single integer \u2013\u2013 the number of possible two-suspect sets. Note that the order of the suspects doesn't matter, that is, sets (1, 2) \u0438 (2, 1) are considered identical.\n\n\n-----Examples-----\nInput\n4 2\n2 3\n1 4\n1 4\n2 1\n\nOutput\n6\n\nInput\n8 6\n5 6\n5 7\n5 8\n6 2\n2 1\n7 3\n1 3\n1 4\n\nOutput\n1\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Nauuo is a girl who loves playing cards. One day she was playing cards but found that the cards were mixed with some empty ones. There are $n$ cards numbered from $1$ to $n$, and they were mixed with another $n$ empty cards. She piled up the $2n$ cards and drew $n$ of them. The $n$ cards in Nauuo's hands are given. The remaining $n$ cards in the pile are also given in the order from top to bottom. In one operation she can choose a card in her hands and play it   put it at the bottom of the pile, then draw the top card from the pile. Nauuo wants to make the $n$ numbered cards piled up in increasing order (the $i$-th card in the pile from top to bottom is the card $i$) as quickly as possible. Can you tell her the minimum number of operations  \n-----Input----- The first line contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) \u2014 the number of numbered cards. The second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($0\\le a_i\\le n$) \u2014 the initial cards in Nauuo's hands. $0$ represents an empty card. The third line contains $n$ integers $b_1,b_2,\\ldots,b_n$ ($0\\le b_i\\le n$) \u2014 the initial cards in the pile, given in order from top to bottom. $0$ represents an empty card. It is guaranteed that each number from $1$ to $n$ appears exactly once, either in $a_{1..n}$ or $b_{1..n}$. -----Output----- The output contains a single integer \u2014 the minimum number of operations to make the $n$ numbered cards piled up in increasing order. -----Examples----- Input 3 0 2 0 3 0 1 Output 2 Input 3 0 2 0 1 0 3 Output 4 Input 11 0 0 0 5 0 0 0 4 0 0 11 9 2 6 0 8 1 7 0 3 0 10 Output 18 -----Note----- Example 1 We can play the card $2$ and draw the card $3$ in the first operation. After that, we have $[0,3,0]$ in hands and the cards in the pile are $[0,1,2]$ from top to bottom. Then, we play the card $3$ in the second operation. The cards in the pile are $[1,2,3]$, in which the cards are piled up in increasing order. Example 2 Play an empty card and draw the card $1$, then play $1$, $2$, $3$ in order.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nNauuo is a girl who loves playing cards.\n\nOne day she was playing cards but found that the cards were mixed with some empty ones.\n\nThere are $n$ cards numbered from $1$ to $n$, and they were mixed with another $n$ empty cards. She piled up the $2n$ cards and drew $n$ of them. The $n$ cards in Nauuo's hands are given. The remaining $n$ cards in the pile are also given in the order from top to bottom.\n\nIn one operation she can choose a card in her hands and play it \u2014 put it at the bottom of the pile, then draw the top card from the pile.\n\nNauuo wants to make the $n$ numbered cards piled up in increasing order (the $i$-th card in the pile from top to bottom is the card $i$) as quickly as possible. Can you tell her the minimum number of operations?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$) \u2014 the number of numbered cards.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($0\\le a_i\\le n$) \u2014 the initial cards in Nauuo's hands. $0$ represents an empty card.\n\nThe third line contains $n$ integers $b_1,b_2,\\ldots,b_n$ ($0\\le b_i\\le n$) \u2014 the initial cards in the pile, given in order from top to bottom. $0$ represents an empty card.\n\nIt is guaranteed that each number from $1$ to $n$ appears exactly once, either in $a_{1..n}$ or $b_{1..n}$.\n\n\n-----Output-----\n\nThe output contains a single integer \u2014 the minimum number of operations to make the $n$ numbered cards piled up in increasing order.\n\n\n-----Examples-----\nInput\n3\n0 2 0\n3 0 1\n\nOutput\n2\nInput\n3\n0 2 0\n1 0 3\n\nOutput\n4\nInput\n11\n0 0 0 5 0 0 0 4 0 0 11\n9 2 6 0 8 1 7 0 3 0 10\n\nOutput\n18\n\n\n-----Note-----\n\nExample 1\n\nWe can play the card $2$ and draw the card $3$ in the first operation. After that, we have $[0,3,0]$ in hands and the cards in the pile are $[0,1,2]$ from top to bottom.\n\nThen, we play the card $3$ in the second operation. The cards in the pile are $[1,2,3]$, in which the cards are piled up in increasing order.\n\nExample 2\n\nPlay an empty card and draw the card $1$, then play $1$, $2$, $3$ in order.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Given a word, determine what it becomes after $X$ blinks.\n-----Input----- The first line of input contains a positive integer $X$ ($1 \\leq X \\leq 1000000000$), the number of times Marin blinked. The second line of input contains the word from the screen, its length being from the interval $[3,1000]$. The word will consist only from small letters of English alphabet. -----Output----- The first and only line of output must contain the original word, before Marin blinked $X$ times. -----Examples----- Sample Input 1: 4 acefdb Sample Output 1: abcdef Sample Input 2: 1000 aaaaaa Sample Output 2: aaaaaa\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLittle Marin spent all his day generating test data for COCI. He simply couldn\u2019t make it work, so he had a nervous breakdown and can\u2019t even see clearly anymore. Every time he blinks while reading, the letters in a word get mixed up so that the letters from the second half of the word (the shorter half, if the length is an odd number) \u201cjump in\u201d between the letters from the first half in the following way:\n - the last letter \u201cjumps in\u201d between the first and the second letter\n - the penultimate letter \u201cjumps in\u201d between the second and the third letter\n - the $k$-th letter from the end \u201cjumps in\u201d between the $k$-th and the $(k+1)$-th letter from the beginning\n\nFor example, the word \u201cabcdef\u201d would become \u201cafbecd\u201d after blinking.\n\nIf Marin blinks again, the same thing happens. After two blinks, the word \u201cabcdef\u201d becomes \u201cadfcbe\u201d.\n\nMarin has decided to write a program to help him determine what\u2019s exactly written on the screen. Unfortunately, after a day\u2019s work, he\u2019s simply too tired and he needs your help. You are given $X$, the number of blinks, and the word Marin sees on the screen. Write a program to solve the mystery for Marin and determine what was actually the word before he blinked $X$ times.\n\n-----Input-----\nThe first line of input contains a positive integer $X$ ($1 \\leq X \\leq 1000000000$), the number of times Marin blinked. The second line of input contains the word from the screen, its length being from the interval $[3,1000]$. The word will consist only from small letters of English alphabet.\n\n-----Output-----\nThe first and only line of output must contain the original word, before Marin blinked $X$ times.\n\n-----Examples-----\nSample Input 1:\n4\nacefdb\nSample Output 1:\nabcdef\n\nSample Input 2:\n1000\naaaaaa\nSample Output 2:\naaaaaa\n\"\"\"\ndef code():"
}