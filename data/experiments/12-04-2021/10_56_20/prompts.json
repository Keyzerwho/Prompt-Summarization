{
    "0": "Python 3\n\"\"\"\n Given a question and a set of potential answers to it, find the answer that is easiest to change into any other answer. \n-----Input----- The first line is the question to be answered. The next line contains one positive integer $1 \\leq N \\leq 100$, giving the number of answer alternatives. The next $N$ lines contain one alternative each. The alternatives are lists of parts, separated by a comma and a space. All answers have the same number of parts, at most 100. All parts are strings of letters a-z and A-Z, digits 0-9 and spaces. Each part doesn\u2019t contain leading or trailing spaces (except the space after a comma that separates 2 parts). The maximal length of a part is 50 characters. -----Output----- Output the alternative that requires the smallest maximum amount of changes to be turned into any other answer. If there are several least incongruous alternatives, output them all in the same order as in the input. -----Examples----- Sample Input: The flag of the empire Angola? 4 Green stripe, black stripe, yellow Red stripe, black stripe, yellow Red stripe, black stripe, white Red stripe, green stripe, yellow Sample Output: Red stripe, black stripe, yellow\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nIn the intergalactic low budget streaming show \u201cFlag quiz!\u201d, contestants need to answer questions along the lines of \u201cWhat are the joint colors, symbols and shapes occurring on the flags of Empire $X$?\u201d. An empire in this context is simply some subset of entities on the same planet, or otherwise related, according to the fantasies of the Supreme Map Maker. For instance, according to the system set by the Supreme Map Maker, \u201cEmpire Earth Meridian 0\u201d are all nations cut by the zeroth meridian on Earth. This is not necessarily the same system used locally on each planet, for instance the zeroth meridian goes through Stockholm in this system. Knowledge of geography, politics or culture can actually be an obstacle on your way to victory in this challenge! \n\nHowever, sometimes (actually, most of the time) you can figure out the answer to a quiz question just by looking at the alternatives. Being a low budget show, the underpaid quiz question authors strive to minimize their effort in coming up with the alternatives for each question. They construct each alternative by making a small number of changes to the correct answer, where a change consists of replacing one part of the correct answer with something else. For example, transforming \u201cgreen, blue, stripes\u201d into \u201cgreen, yellow, stripes\u201d has one single change, while changing the same answer into \u201clife, universe, stripes\u201d has two changes. The question authors never permute the parts, so order matters. In other words, transforming \u201cgreen, blue, stripes\u201d into \u201cstripes, blue, green\u201d has two changes even though they are both technically the same answer. Note that the answers are case sensitive, so \u201cgreen, blue, stripes\u201d and \u201cGreen, Blue, Stripes\u201d need 3 changes.\n\nYour task is to write a program that automatically finds the most likely answers to questions constructed in this way. Define the incongruousity of an alternative as the maximum number of changes needed to transform that alternative into any of the other alternatives. We then seek the alternative(s) with the smallest incongruousity.\n\n-----Task-----\nGiven a question and a set of potential answers to it, find the answer that is easiest to change into any other answer.\n\n-----Input-----\nThe first line is the question to be answered. The next line contains one positive integer $1 \\leq N \\leq 100$, giving the number of answer alternatives. The next $N$ lines contain one alternative each. The alternatives are lists of parts, separated by a comma and a space. All answers have the same number of parts, at most 100. All parts are strings of letters a-z and A-Z, digits 0-9 and spaces. Each part doesn\u2019t contain leading or trailing spaces (except the space after a comma that separates 2 parts). The maximal length of a part is 50 characters.\n\n-----Output-----\nOutput the alternative that requires the smallest maximum amount of changes to be turned into any other answer. If there are several least incongruous alternatives, output them all in the same order as in the input.\n\n-----Examples-----\nSample Input:\nThe flag of the empire Angola?\n4\nGreen stripe, black stripe, yellow\nRed stripe, black stripe, yellow\nRed stripe, black stripe, white\nRed stripe, green stripe, yellow\nSample Output:\nRed stripe, black stripe, yellow\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given a sequence of $n$ integers $a_1, a_2, \\ldots, a_n$. You have to construct two sequences of integers $b$ and $c$ with length $n$ that satisfy: \nfor every $i$ ($1\\leq i\\leq n$) $b_i+c_i=a_i$ \n$b$ is non-decreasing, which means that for every $1<i\\leq n$, $b_i\\geq b_{i-1}$ must hold \n$c$ is non-increasing, which means that for every $1<i\\leq n$, $c_i\\leq c_{i-1}$ must hold \nYou have to minimize $\\max(b_i,c_i)$. In other words, you have to minimize the maximum number in sequences $b$ and $c$. Also there will be $q$ changes, the $i$-th change is described by three integers $l,r,x$. You should add $x$ to $a_l,a_{l+1}, \\ldots, a_r$. \nYou have to find the minimum possible value of $\\max(b_i,c_i)$ for the initial sequence and for sequence after each change. \n-----Input----- The first line contains an integer $n$ ($1\\leq n\\leq 10^5$). The secound line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\leq i\\leq n$, $-10^9\\leq a_i\\leq 10^9$). The third line contains an integer $q$ ($1\\leq q\\leq 10^5$). Each of the next $q$ lines contains three integers $l,r,x$ ($1\\leq l\\leq r\\leq n,-10^9\\leq x\\leq 10^9$), desribing the next change.  -----Output----- Print $q+1$ lines. On the $i$-th ($1 \\leq i \\leq q+1$) line, print the answer to the problem for the sequence after $i-1$ changes. -----Examples----- Input 4 2 -1 7 3 2 2 4 -3 3 4 2 Output 5 5 6 Input 6 -9 -10 -9 -6 -5 4 3 2 6 -9 1 2 -10 4 6 -3 Output 3 3 3 1 Input 1 0 2 1 1 -1 1 1 -1 Output 0 0 -1 -----Note----- In the first test:  The initial sequence $a = (2, -1, 7, 3)$. Two sequences $b=(-3,-3,5,5),c=(5,2,2,-2)$ is a possible choice.  After the first change $a = (2, -4, 4, 0)$. Two sequences $b=(-3,-3,5,5),c=(5,-1,-1,-5)$ is a possible choice.  After the second change $a = (2, -4, 6, 2)$. Two sequences $b=(-4,-4,6,6),c=(6,0,0,-4)$ is a possible choice.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nYou are given a sequence of $n$ integers $a_1, a_2, \\ldots, a_n$.\n\nYou have to construct two sequences of integers $b$ and $c$ with length $n$ that satisfy:  for every $i$ ($1\\leq i\\leq n$) $b_i+c_i=a_i$  $b$ is non-decreasing, which means that for every $1<i\\leq n$, $b_i\\geq b_{i-1}$ must hold  $c$ is non-increasing, which means that for every $1<i\\leq n$, $c_i\\leq c_{i-1}$ must hold \n\nYou have to minimize $\\max(b_i,c_i)$. In other words, you have to minimize the maximum number in sequences $b$ and $c$.\n\nAlso there will be $q$ changes, the $i$-th change is described by three integers $l,r,x$. You should add $x$ to $a_l,a_{l+1}, \\ldots, a_r$. \n\nYou have to find the minimum possible value of $\\max(b_i,c_i)$ for the initial sequence and for sequence after each change.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1\\leq n\\leq 10^5$).\n\nThe secound line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($1\\leq i\\leq n$, $-10^9\\leq a_i\\leq 10^9$).\n\nThe third line contains an integer $q$ ($1\\leq q\\leq 10^5$).\n\nEach of the next $q$ lines contains three integers $l,r,x$ ($1\\leq l\\leq r\\leq n,-10^9\\leq x\\leq 10^9$), desribing the next change. \n\n\n-----Output-----\n\nPrint $q+1$ lines.\n\nOn the $i$-th ($1 \\leq i \\leq q+1$) line, print the answer to the problem for the sequence after $i-1$ changes.\n\n\n-----Examples-----\nInput\n4\n2 -1 7 3\n2\n2 4 -3\n3 4 2\n\nOutput\n5\n5\n6\n\nInput\n6\n-9 -10 -9 -6 -5 4\n3\n2 6 -9\n1 2 -10\n4 6 -3\n\nOutput\n3\n3\n3\n1\n\nInput\n1\n0\n2\n1 1 -1\n1 1 -1\n\nOutput\n0\n0\n-1\n\n\n\n-----Note-----\n\nIn the first test:  The initial sequence $a = (2, -1, 7, 3)$. Two sequences $b=(-3,-3,5,5),c=(5,2,2,-2)$ is a possible choice.  After the first change $a = (2, -4, 4, 0)$. Two sequences $b=(-3,-3,5,5),c=(5,-1,-1,-5)$ is a possible choice.  After the second change $a = (2, -4, 6, 2)$. Two sequences $b=(-4,-4,6,6),c=(6,0,0,-4)$ is a possible choice.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Purple rain falls in the magic kingdom of Linearland which is a straight, thin peninsula. On close observation however, Prof. Nelson Rogers finds that actually it is a mix of Red and Blue drops. In his zeal, he records the location and color of the raindrops in different locations along the peninsula. Looking at the data, Professor Rogers wants to know which part of Linearland had the least purple rain. After some thought, he decides to model this problem as follows. Divide the peninsula into $n$ sections and number them West to East from $1$ to $n$. Then, describe the raindrops as a sequence of R and B, depending on whether the rainfall in each section is primarily red or blue. Finally, find a subsequence of where the difference between the number of R and the number of B is maximized.\n-----Input----- The input consists of a single line containing a string of $n$ characters ($1 \\le n \\le 10^5$), describing the color of the raindrops in sections $1$ to $n$. It is guaranteed that the string consists of uppercase ASCII letters \u2018R\u2019 and \u2018B\u2019 only. -----Output----- Print, on a single line, two space-separated integers that describe the starting and ending positions of the part of Linearland that had the least purple rain. If there are multiple possible answers, print the one that has the Westernmost (smallest-numbered) starting section. If there are multiple answers with the same Westernmost starting section, print the one with the Westernmost ending section. -----Examples----- Sample Input: BBRRBRRBRB Sample Output: 3 7\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nPurple rain falls in the magic kingdom of Linearland which is a straight, thin peninsula. \n\nOn close observation however, Prof. Nelson Rogers finds that actually it is a mix of Red and Blue drops.\n\nIn his zeal, he records the location and color of the raindrops in different locations along the peninsula. Looking at the data, Professor Rogers wants to know which part of Linearland had the \u201cleast\u201d purple rain.\n\nAfter some thought, he decides to model this problem as follows. Divide the peninsula into $n$ sections and number them West to East from $1$ to $n$. Then, describe the raindrops as a sequence of R and B, depending on whether the rainfall in each section is primarily red or blue. Finally, find a subsequence of where the difference between the number of R and the number of B is maximized.\n\n-----Input-----\nThe input consists of a single line containing a string of $n$ characters ($1 \\le n \\le 10^5$), describing the color of the raindrops in sections $1$ to $n$.\n\nIt is guaranteed that the string consists of uppercase ASCII letters \u2018R\u2019 and \u2018B\u2019 only.\n\n-----Output-----\nPrint, on a single line, two space-separated integers that describe the starting and ending positions of the part of Linearland that had the least purple rain.\n\nIf there are multiple possible answers, print the one that has the Westernmost (smallest-numbered) starting section. If there are multiple answers with the same Westernmost starting section, print the one with the Westernmost ending section.\n\n-----Examples-----\nSample Input:\nBBRRBRRBRB\nSample Output:\n3 7\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You invited $n$ guests to dinner! You plan to arrange one or more circles of chairs. Each chair is going to be either occupied by one guest, or be empty. You can make any number of circles. Your guests happen to be a little bit shy, so the $i$-th guest wants to have a least $l_i$ free chairs to the left of his chair, and at least $r_i$ free chairs to the right. The \"left\" and \"right\" directions are chosen assuming all guests are going to be seated towards the center of the circle. Note that when a guest is the only one in his circle, the $l_i$ chairs to his left and $r_i$ chairs to his right may overlap. What is smallest total number of chairs you have to use \n-----Input----- First line contains one integer $n$ \u00a0\u2014 number of guests, ($1 \\leqslant n \\leqslant 10^5$).  Next $n$ lines contain $n$ pairs of space-separated integers $l_i$ and $r_i$ ($0 \\leqslant l_i, r_i \\leqslant 10^9$). -----Output----- Output a single integer\u00a0\u2014 the smallest number of chairs you have to use. -----Examples----- Input 3 1 1 1 1 1 1 Output 6 Input 4 1 2 2 1 3 5 5 3 Output 15 Input 1 5 6 Output 7 -----Note----- In the second sample the only optimal answer is to use two circles: a circle with $5$ chairs accomodating guests $1$ and $2$, and another one with $10$ chairs accomodationg guests $3$ and $4$. In the third sample, you have only one circle with one person. The guest should have at least five free chairs to his left, and at least six free chairs to his right to the next person, which is in this case the guest herself. So, overall number of chairs should be at least 6+1=7.\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nYou invited $n$ guests to dinner! You plan to arrange one or more circles of chairs. Each chair is going to be either occupied by one guest, or be empty. You can make any number of circles. \n\nYour guests happen to be a little bit shy, so the $i$-th guest wants to have a least $l_i$ free chairs to the left of his chair, and at least $r_i$ free chairs to the right. The \"left\" and \"right\" directions are chosen assuming all guests are going to be seated towards the center of the circle. Note that when a guest is the only one in his circle, the $l_i$ chairs to his left and $r_i$ chairs to his right may overlap.\n\nWhat is smallest total number of chairs you have to use?\n\n\n-----Input-----\n\nFirst line contains one integer $n$ \u00a0\u2014 number of guests, ($1 \\leqslant n \\leqslant 10^5$). \n\nNext $n$ lines contain $n$ pairs of space-separated integers $l_i$ and $r_i$ ($0 \\leqslant l_i, r_i \\leqslant 10^9$).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the smallest number of chairs you have to use.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 1\n1 1\n\nOutput\n6\n\nInput\n4\n1 2\n2 1\n3 5\n5 3\n\nOutput\n15\n\nInput\n1\n5 6\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the second sample the only optimal answer is to use two circles: a circle with $5$ chairs accomodating guests $1$ and $2$, and another one with $10$ chairs accomodationg guests $3$ and $4$.\n\nIn the third sample, you have only one circle with one person. The guest should have at least five free chairs to his left, and at least six free chairs to his right to the next person, which is in this case the guest herself. So, overall number of chairs should be at least 6+1=7.\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n You are given a string consisting of characters $A$ and $B$ ( $A$ and $B$ are not brackets). You have to determine how many ways the characters $A$ and $B$ can be replaced by brackets so that the result is a regular bracket-sequence. \n-----Input----- The first line contains an even integer $N$ ($2 \\le N \\le 200$), the length of the string. The second line contains the string. Illegible characters are represented by the \u2018?\u2019 character. -----Output----- Output the number of regular bracket-sequences the string could have read. -----Examples----- Sample Input 1: 6 ()()() Sample Output 1: 1 Sample Input 2: 10 (?([?)]?}? Sample Output 2: 3\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nA regular bracket-sequence is a string of characters consisting only of opening and closing brackets, and satisfying the following conditions:\n - An empty string is a regular bracket-sequence.\n - If $A$ is a regular bracket-sequence, then ($A$), [$A$] and {$A$} are also regular bracket-sequences.\n - If $A$ and $B$ are regular bracket-sequences, then $AB$ is also a regular bracket-sequence.\n\nFor example, the sequences \u201c[({})]\u201d, \u201c[](){}\u201d and \u201c[{}]()[{}]\u201d are regular, but the sequences \u201c[({{([\u201d, \u201c[]({)}\u201d and \u201c[{}])([{}]\u201d are not.\n\nIvica has found a string which looks like it could be a regular bracket-sequence. Some of the characters have become smudged and illegible, and could have been any character.\n\nWrite a program that calculates how many ways the illegible characters in the string can be replaced by brackets so that the result is a regular bracket-sequence. This number can be very large, so output only its last $5$ digits.\n\n-----Input-----\nThe first line contains an even integer $N$ ($2 \\le N \\le 200$), the length of the string. The second line contains the string. Illegible characters are represented by the \u2018?\u2019 character.\n\n-----Output-----\nOutput the number of regular bracket-sequences the string could have read.\n\n-----Examples-----\nSample Input 1:\n6\n()()()\nSample Output 1:\n1\n\nSample Input 2:\n10\n(?([?)]?}?\nSample Output 2:\n3\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n Concentration is a not so popular 2 player card game of both skill and luck. The standard Concentration game is played with one or two 52-card decks, however, for the sake of the problem, we will look at a variation of Concentration. The rules are as follows: \n-----Input----- The first line of input contains one integer $1\\leq N\\leq 10^6$. The second line contains $2N$ integers, with the $i$-th integer being $\\sigma _0(i)$. This line defines $\\sigma _0$. The third line contains $2N$ integers, with the $i$-th integer being $\\sigma _1(i)$. This line defines $\\sigma _1$. -----Output----- Output a single line with $0$ if Anthony wins, $1$ if Matthew wins, or $-1$ if the game ties. -----Examples----- Sample Input 1: 2 0 1 2 3  0 1 2 3  Sample Output 1: 0 Sample Input 2: 2 0 2 1 3  0 2 1 3  Sample Output 2: 1\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nConcentration is a not so popular 2 player card game of both skill and luck. The standard Concentration game is played with one or two 52-card decks, however, for the sake of the problem, we will look at a variation of Concentration.\n\nThe rules are as follows:\n - A card is represented by a single integer. Two cards $i$, $j$ are considered \u201csimilar\u201d if and only if $\\lfloor i/2\\rfloor =\\lfloor j/2\\rfloor $. A deck consisting of $2N$ cards is used for each game. More specifically, a deck of $2N$ cards contains exactly one copy of card $i$ for all $0\\leq i <2N$.\n - All cards are initially facing down on a table in random positions, i.e. neither players know what any cards are. Players take turns making moves. Player 0 goes first, then player 1 goes, then player 0 goes, and so on.\n - During each turn, a player chooses two cards and reveals them. If the two cards are \u201csimilar\u201d, then they are removed from the table and the player gets to keep them, the player is then granted another turn; this can happen infinitely as long as the player always finds two \u201csimilar\u201d cards. If the cards are different, the player\u2019s turn ends.\n - When there are no more cards on the table, the player with more cards wins the game.\n\nAnthony and Matthew like to play this boring game and share an identical play style: whenever they are to choose a card to reveal, if they have knowledge of two \u201csimilar\u201d cards, they will pick one of the two \u201csimilar\u201d cards; otherwise they will pick a random unknown card to reveal.\n\nAnthony and Matthew are both extremely intelligent and have perfect memories, i.e. they remember every card that has been revealed.\n\nBefore the game starts, both Anthony and Matthew make up their minds about in which order they will choose random cards to reveal, in case when they do not have knowledge of two \u201csimilar\u201d cards.\n\nEach player\u2019s choices of revelation can be represented by a permutation of numbers $[0,\\ldots , 2N-1]$. For example, let $\\sigma _0$, a permutation of $[0,\\ldots , 2N-1]$ be the \u201crandom\u201d choices of Anthony. When Anthony is to choose an unknown card, he will choose the smallest $i$ such that $\\sigma _0(i)$ is not revealed, and reveal $\\sigma _0(i)$.\n\nSimilarly, let $\\sigma _1$ be the choices of Matthew.\n\nHaving knowledge of $\\sigma _0$ and $\\sigma _1$, we should be able to perfectly determine the winner (and win lots of money by betting on that player), and it is your job to do exactly that!\n\n-----Input-----\nThe first line of input contains one integer $1\\leq N\\leq 10^6$.\n\nThe second line contains $2N$ integers, with the $i$-th integer being $\\sigma _0(i)$. This line defines $\\sigma _0$.\n\nThe third line contains $2N$ integers, with the $i$-th integer being $\\sigma _1(i)$. This line defines $\\sigma _1$.\n\n-----Output-----\nOutput a single line with $0$ if Anthony wins, $1$ if Matthew wins, or $-1$ if the game ties.\n\n-----Examples-----\nSample Input 1:\n2\n0 1 2 3 \n0 1 2 3 \nSample Output 1:\n0\n\nSample Input 2:\n2\n0 2 1 3 \n0 2 1 3 \nSample Output 2:\n1\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n Limak is an old brown bear. He often plays poker with his friends. Today they went to a casino. There are n players (including Limak himself) and right now all of them have bids on the table. i-th of them has bid with size a_{i} dollars. Each player can double his bid any number of times and triple his bid any number of times. The casino has a great jackpot for making all bids equal. Is it possible that Limak and his friends will win a jackpot? \n-----Input----- First line of input contains an integer n (2 \u2264 n \u2264 10^5), the number of players. The second line contains n integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the bids of players. -----Output----- Print \"Yes\" (without the quotes) if players can make their bids become equal, or \"No\" otherwise. -----Examples----- Input 4 75 150 75 50 Output Yes Input 3 100 150 250 Output No -----Note----- In the first sample test first and third players should double their bids twice, second player should double his bid once and fourth player should both double and triple his bid. It can be shown that in the second sample test there is no way to make all bids equal.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLimak is an old brown bear. He often plays poker with his friends. Today they went to a casino. There are n players (including Limak himself) and right now all of them have bids on the table. i-th of them has bid with size a_{i} dollars.\n\nEach player can double his bid any number of times and triple his bid any number of times. The casino has a great jackpot for making all bids equal. Is it possible that Limak and his friends will win a jackpot?\n\n\n-----Input-----\n\nFirst line of input contains an integer n (2 \u2264 n \u2264 10^5), the number of players.\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the bids of players.\n\n\n-----Output-----\n\nPrint \"Yes\" (without the quotes) if players can make their bids become equal, or \"No\" otherwise.\n\n\n-----Examples-----\nInput\n4\n75 150 75 50\n\nOutput\nYes\n\nInput\n3\n100 150 250\n\nOutput\nNo\n\n\n\n-----Note-----\n\nIn the first sample test first and third players should double their bids twice, second player should double his bid once and fourth player should both double and triple his bid.\n\nIt can be shown that in the second sample test there is no way to make all bids equal.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n Given a sequence of numbers, find the winner of a game of Lieges of Legendre. \n-----Input----- The first line of the input contains two space-separated integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9). The second line contains n integers, a_1, a_2, ... a_{n} (1 \u2264 a_{i} \u2264 10^9) describing the initial state of the game.  -----Output----- Output the name of the winning player, either \"Kevin\" or \"Nicky\" (without quotes). -----Examples----- Input 2 1 3 4 Output Kevin Input 1 2 3 Output Nicky -----Note----- In the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nKevin and Nicky Sun have invented a new game called Lieges of Legendre. In this game, two players take turns modifying the game state with Kevin moving first. Initially, the game is set up so that there are n piles of cows, with the i-th pile containing a_{i} cows. During each player's turn, that player calls upon the power of Sunlight, and uses it to either:\n\n  Remove a single cow from a chosen non-empty pile.  Choose a pile of cows with even size 2\u00b7x (x > 0), and replace it with k piles of x cows each. \n\nThe player who removes the last cow wins. Given n, k, and a sequence a_1, a_2, ..., a_{n}, help Kevin and Nicky find the winner, given that both sides play in optimal way.\n\n\n-----Input-----\n\nThe first line of the input contains two space-separated integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\n\nThe second line contains n integers, a_1, a_2, ... a_{n} (1 \u2264 a_{i} \u2264 10^9) describing the initial state of the game. \n\n\n-----Output-----\n\nOutput the name of the winning player, either \"Kevin\" or \"Nicky\" (without quotes).\n\n\n-----Examples-----\nInput\n2 1\n3 4\n\nOutput\nKevin\n\nInput\n1 2\n3\n\nOutput\nNicky\n\n\n\n-----Note-----\n\nIn the second sample, Nicky can win in the following way: Kevin moves first and is forced to remove a cow, so the pile contains two cows after his move. Next, Nicky replaces this pile of size 2 with two piles of size 1. So the game state is now two piles of size 1. Kevin then removes one of the remaining cows and Nicky wins by removing the other.\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n Arseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That's why some of Arseny's guests can be unknown to him. He decided to fix this issue using the following procedure. At each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends. Arseny doesn't want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it. \n-----Input----- The first line contains two integers n and m (1 \u2264 n \u2264 22; $0 \\leq m \\leq \\frac{n \\cdot(n - 1)}{2}$)\u00a0\u2014 the number of guests at the party (including Arseny) and the number of pairs of people which are friends. Each of the next m lines contains two integers u and v (1 \u2264 u, v \u2264 n; u \u2260 v), which means that people with numbers u and v are friends initially. It's guaranteed that each pair of friends is described not more than once and the graph of friendship is connected. -----Output----- In the first line print the minimum number of steps required to make all pairs of guests friends. In the second line print the ids of guests, who are selected at each step. If there are multiple solutions, you can output any of them. -----Examples----- Input 5 6 1 2 1 3 2 3 2 5 3 4 4 5 Output 2 2 3  Input 4 4 1 2 1 3 1 4 3 4 Output 1 1  -----Note----- In the first test case there is no guest who is friend of all other guests, so at least two steps are required to perform the task. After second guest pairwise introduces all his friends, only pairs of guests (4, 1) and (4, 2) are not friends. Guest 3 or 5 can introduce them. In the second test case guest number 1 is a friend of all guests, so he can pairwise introduce all guests in one step.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nArseny likes to organize parties and invite people to it. However, not only friends come to his parties, but friends of his friends, friends of friends of his friends and so on. That's why some of Arseny's guests can be unknown to him. He decided to fix this issue using the following procedure.\n\nAt each step he selects one of his guests A, who pairwise introduces all of his friends to each other. After this action any two friends of A become friends. This process is run until all pairs of guests are friends.\n\nArseny doesn't want to spend much time doing it, so he wants to finish this process using the minimum number of steps. Help Arseny to do it.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 22; $0 \\leq m \\leq \\frac{n \\cdot(n - 1)}{2}$)\u00a0\u2014 the number of guests at the party (including Arseny) and the number of pairs of people which are friends.\n\nEach of the next m lines contains two integers u and v (1 \u2264 u, v \u2264 n; u \u2260 v), which means that people with numbers u and v are friends initially. It's guaranteed that each pair of friends is described not more than once and the graph of friendship is connected.\n\n\n-----Output-----\n\nIn the first line print the minimum number of steps required to make all pairs of guests friends.\n\nIn the second line print the ids of guests, who are selected at each step.\n\nIf there are multiple solutions, you can output any of them.\n\n\n-----Examples-----\nInput\n5 6\n1 2\n1 3\n2 3\n2 5\n3 4\n4 5\n\nOutput\n2\n2 3 \nInput\n4 4\n1 2\n1 3\n1 4\n3 4\n\nOutput\n1\n1 \n\n\n-----Note-----\n\nIn the first test case there is no guest who is friend of all other guests, so at least two steps are required to perform the task. After second guest pairwise introduces all his friends, only pairs of guests (4, 1) and (4, 2) are not friends. Guest 3 or 5 can introduce them.\n\nIn the second test case guest number 1 is a friend of all guests, so he can pairwise introduce all guests in one step.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n You are given a list of numbers. Find the smallest positive number that cannot be made using each of digits at most once. \n-----Input-----  - One string of at most $1000$ digits, containing the available digits in no particular order. -----Output-----  - One line containing one positive integer: the smallest natural number that it is not possible to assemble from the supplied digits. -----Examples----- Sample Input 1: 7129045863 Sample Output 1: 11 Sample Input 2: 55 Sample Output 2: 1\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nThe technology behind the fridge has changed little over the years. Even so, many of the original owners of the Fred W. Wolf domestic refrigerator of 1913 would be amazed by the size and features of the modern appliances. However, since the 1960s one thing has been common for all fridge owners around the world: fridge magnets.\n\nAn effective, albeit lazy, way to keep a small child entertained is to supply them with a set of magnetic numbers and a large magnetic surface, such as said fridge, to provide the playing field upon which to apply these digits.\n\nFar from a time-wasting exercise, this provides valuable training in the mathematical field of counting: moving the digits around to form \u201c1\u201d, \u201c2\u201d, and so on up to such heights as \u201c10\u201d, \u201c11\u201d, \u201c12\u201d, and even beyond.\n\nThe possibilities are endless! ...Or at least, they would be, if the supply of digits was not limited. Given the full list of what numbers we are in possession of, what is the smallest positive number that cannot be made using each of digits at most once?\n\n-----Input-----\n - One string of at most $1000$ digits, containing the available digits in no particular order.\n\n-----Output-----\n - One line containing one positive integer: the smallest natural number that it is not possible to assemble from the supplied digits.\n\n-----Examples-----\nSample Input 1:\n7129045863\nSample Output 1:\n11\n\nSample Input 2:\n55\nSample Output 2:\n1\n\"\"\"\ndef code():"
}