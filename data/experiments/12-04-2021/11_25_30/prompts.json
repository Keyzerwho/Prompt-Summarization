{
    "0": "Python 3\n\"\"\"\n Given all the numbers of the GCD table G, restore array a. \n-----Input----- The first line contains number n (1 \u2264 n \u2264 500) \u2014 the length of array a. The second line contains n^2 space-separated numbers \u2014 the elements of the GCD table of G for array a.  All the numbers in the table are positive integers, not exceeding 10^9. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a. -----Output----- In the single line print n positive integers \u2014 the elements of array a. If there are multiple possible solutions, you are allowed to print any of them. -----Examples----- Input 4 2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2 Output 4 3 6 2 Input 1 42 Output 42  Input 2 1 1 1 1 Output 1 1\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nThe GCD table G of size n \u00d7 n for an array of positive integers a of length n is defined by formula  $g_{ij} = \\operatorname{gcd}(a_{i}, a_{j})$ \n\nLet us remind you that the greatest common divisor (GCD) of two positive integers x and y is the greatest integer that is divisor of both x and y, it is denoted as $\\operatorname{gcd}(x, y)$. For example, for array a = {4, 3, 6, 2} of length 4 the GCD table will look as follows: [Image] \n\nGiven all the numbers of the GCD table G, restore array a.\n\n\n-----Input-----\n\nThe first line contains number n (1 \u2264 n \u2264 500) \u2014 the length of array a. The second line contains n^2 space-separated numbers \u2014 the elements of the GCD table of G for array a. \n\nAll the numbers in the table are positive integers, not exceeding 10^9. Note that the elements are given in an arbitrary order. It is guaranteed that the set of the input data corresponds to some array a.\n\n\n-----Output-----\n\nIn the single line print n positive integers \u2014 the elements of array a. If there are multiple possible solutions, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n4\n2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2\n\nOutput\n4 3 6 2\nInput\n1\n42\n\nOutput\n42 \nInput\n2\n1 1 1 1\n\nOutput\n1 1\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n A robot is put at the origin in a two-dimensional plane. Initially, the robot is facing in the positive x-axis direction. This robot will be given an instruction sequence s. s consists of the following two kinds of letters, and will be executed in order from front to back. - F : Move in the current direction by distance 1. - T : Turn 90 degrees, either clockwise or counterclockwise. The objective of the robot is to be at coordinates (x, y) after all the instructions are executed. Determine whether this objective is achievable. -----Constraints----- - s consists of F and T. - 1 \\leq |s| \\leq 8 000 - x and y are integers. - |x|, |y| \\leq |s|\n-----Input----- Input is given from Standard Input in the following format: s x y -----Output----- If the objective is achievable, print Yes; if it is not, print No. -----Sample Input----- FTFFTFFF 4 2 -----Sample Output----- Yes The objective can be achieved by, for example, turning counterclockwise in the first T and turning clockwise in the second T.\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nA robot is put at the origin in a two-dimensional plane.\nInitially, the robot is facing in the positive x-axis direction.\nThis robot will be given an instruction sequence s.\ns consists of the following two kinds of letters, and will be executed in order from front to back.\n - F : Move in the current direction by distance 1.\n - T : Turn 90 degrees, either clockwise or counterclockwise.\nThe objective of the robot is to be at coordinates (x, y) after all the instructions are executed.\nDetermine whether this objective is achievable.\n\n-----Constraints-----\n - s consists of F and T.\n - 1 \\leq |s| \\leq 8 000\n - x and y are integers.\n - |x|, |y| \\leq |s|\n\n-----Input-----\nInput is given from Standard Input in the following format:\ns\nx y\n\n-----Output-----\nIf the objective is achievable, print Yes; if it is not, print No.\n\n-----Sample Input-----\nFTFFTFFF\n4 2\n\n-----Sample Output-----\nYes\n\nThe objective can be achieved by, for example, turning counterclockwise in the first T and turning clockwise in the second T.\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n You are given a string s of length n consisting of lowercase and uppercase Latin letters and digits. He wants to rearrange the symbols in s and cut it into the minimum number of parts so that each part is a palindrome and all parts have the same lengths. A palindrome is a string which reads the same backward as forward, such as madam or racecar. Your task is to help Kolya and determine the minimum number of palindromes of equal lengths to cut s into, if it is allowed to rearrange letters in s before cuttings. \n-----Input----- The first line contains an integer n (1 \u2264 n \u2264 4\u00b710^5) \u2014 the length of string s. The second line contains a string s of length n consisting of lowercase and uppercase Latin letters and digits. -----Output----- Print to the first line an integer k \u2014 minimum number of palindromes into which you can cut a given string. Print to the second line k strings \u2014 the palindromes themselves. Separate them by a space. You are allowed to print palindromes in arbitrary order. All of them should have the same length. -----Examples----- Input 6 aabaac Output 2 aba aca  Input 8 0rTrT022 Output 1 02TrrT20  Input 2 aA Output 2 a A\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nKolya has a string s of length n consisting of lowercase and uppercase Latin letters and digits.\n\nHe wants to rearrange the symbols in s and cut it into the minimum number of parts so that each part is a palindrome and all parts have the same lengths. A palindrome is a string which reads the same backward as forward, such as madam or racecar.\n\nYour task is to help Kolya and determine the minimum number of palindromes of equal lengths to cut s into, if it is allowed to rearrange letters in s before cuttings.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 4\u00b710^5) \u2014 the length of string s.\n\nThe second line contains a string s of length n consisting of lowercase and uppercase Latin letters and digits.\n\n\n-----Output-----\n\nPrint to the first line an integer k \u2014 minimum number of palindromes into which you can cut a given string.\n\nPrint to the second line k strings \u2014 the palindromes themselves. Separate them by a space. You are allowed to print palindromes in arbitrary order. All of them should have the same length.\n\n\n-----Examples-----\nInput\n6\naabaac\n\nOutput\n2\naba aca \nInput\n8\n0rTrT022\n\nOutput\n1\n02TrrT20 \nInput\n2\naA\n\nOutput\n2\na A\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You are given a dungeon map and you need to find out if it's possible for the player to reach the exit without being blown up by a creeper. You, the player, can move north, south, east, and west, except where there are obstacles. The player may also stay put. There is one creeper on the map. The player and the creeper take turns simultaneously, subject to the following simple AI: - The creeper will only try to move towards the player, either horizontally or vertically, in a way that reduces the horizontal or vertical distance. - If an obstacle prevents the creeper from moving vertically, it will try to move horizontally, and vice versa. - If it can't move in either direction, it will stay put. - If the creeper can move both horizontally and vertically, it will choose the direction in which it is farther away from the player. In the case of a tie, it will move vertically towards the player. After each such turn, the game checks if the creeper is too close to the player, in which case the creeper will explode and kill the player, even if the player has already reached the exit in that move. Obstacles do not protect the player from explosions. If the player did not explode and reached the exit, the mission is completed.\n-----Input----- The input consists of a single test case. The first line contains three integers $n$ ($1 \\le n \\le 30$), $m$ ($1 \\le m \\le 30$), and $e$ ($1 \\le e \\le \\min (n, m)$). $e$ specifies the creeper\u2019s explosion \u201cradius\u201d - the creeper will explode if both the horizontal and the vertical distance between player and creeper is less than or equal to $e$. The following $n$ lines consist of $m$ characters each and describe the dungeon map using the following characters  - P - the start position of the player  - C - the start position of the creeper  - E - the position of the exit  - X - an obstacle  - . - an empty square that can be entered by both creeper and player There is exactly one of \u2018E\u2019, \u2018P\u2019, and \u2018C\u2018 each in the input. -----Output----- If it is possible to complete the mission and reach the exit without being blown up by the creeper, output the minimum number of moves necessary to escape. A move consists of either the player or the creeper moving, or both. If it is not possible to escape, print \u201cyou're toast\u201d! -----Examples----- Sample Input 1: 20 20 3 .................... ...X................ .X.X....X.....X..... .X.X....X....XX..... .X.X..........X..... .X.X....XXXXXXXXXXX. .XXXXXXX............ .X.................. .X...XXXXX.XXXX.XX.. .X..P............C.. .X.XX.X.XX.XXX..XX.. .X.X................ .X.XXXX....X........ .X.X.......X........ .X.X.......X........ .X.X........X....... .X.X...X....XX...... .X.X...X.....XX..... .X.X...X......XX.... .......X...........E Sample Output 1: 119 Sample Input 2: 5 5 1 E...C ..... XXXX. ..... P.... Sample Output 2: you're toast\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nDuring the COVID-19 quarantine, Theta discovered Minecraft Dungeons which is an offshoot of the popular Minecraft game. In Minecraft Dungeons, players crawl through a dungeon, trying to accomplish a mission without getting killed by various mobs. At the end, a boss battle with the Arch-Illager awaits.\n\nFortunately, the mobs\u2019 AI isn\u2019t particularly strong, so with some planning, it\u2019s possible to avoid the mobs. In this problem, you\u2019re given a dungeon map and you need to find out if it\u2019s possible for the player to reach the exit without being blown up by a creeper.\n\nYou, the player, can move north, south, east, and west, except where there are obstacles. The player may also stay put. There is one creeper on the map. The player and the creeper take turns simultaneously, subject to the following simple AI:\n - The creeper will only try to move towards the player, either horizontally or vertically, in a way that reduces the horizontal or vertical distance.\n - If an obstacle prevents the creeper from moving vertically, it will try to move horizontally, and vice versa.\n - If it can\u2019t move in either direction, it will stay put.\n - If the creeper can move both horizontally and vertically, it will choose the direction in which it is farther away from the player. In the case of a tie, it will move vertically towards the player.\n\nAfter each such turn, the game checks if the creeper is too close to the player, in which case the creeper will explode and kill the player, even if the player has already reached the exit in that move. Obstacles do not protect the player from explosions. If the player did not explode and reached the exit, the mission is completed.\n\n-----Input-----\nThe input consists of a single test case. The first line contains three integers $n$ ($1 \\le n \\le 30$), $m$ ($1 \\le m \\le 30$), and $e$ ($1 \\le e \\le \\min (n, m)$). $e$ specifies the creeper\u2019s explosion \u201cradius\u201d - the creeper will explode if both the horizontal and the vertical distance between player and creeper is less than or equal to $e$.\n\nThe following $n$ lines consist of $m$ characters each and describe the dungeon map using the following characters\n - P - the start position of the player\n - C - the start position of the creeper\n - E - the position of the exit\n - X - an obstacle\n - . - an empty square that can be entered by both creeper and player\n\nThere is exactly one of \u2018E\u2019, \u2018P\u2019, and \u2018C\u2018 each in the input.\n\n-----Output-----\nIf it is possible to complete the mission and reach the exit without being blown up by the creeper, output the minimum number of moves necessary to escape. A move consists of either the player or the creeper moving, or both. If it is not possible to escape, print \u201cyou're toast\u201d!\n\n-----Examples-----\nSample Input 1:\n20 20 3\n....................\n...X................\n.X.X....X.....X.....\n.X.X....X....XX.....\n.X.X..........X.....\n.X.X....XXXXXXXXXXX.\n.XXXXXXX............\n.X..................\n.X...XXXXX.XXXX.XX..\n.X..P............C..\n.X.XX.X.XX.XXX..XX..\n.X.X................\n.X.XXXX....X........\n.X.X.......X........\n.X.X.......X........\n.X.X........X.......\n.X.X...X....XX......\n.X.X...X.....XX.....\n.X.X...X......XX....\n.......X...........E\nSample Output 1:\n119\n\nSample Input 2:\n5 5 1\nE...C\n.....\nXXXX.\n.....\nP....\nSample Output 2:\nyou're toast\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n In C++ division with positive integers always rounds down. Because of this, sometimes when two integers are divided by the same divisor they become equal even though they were originally not equal. For example in C++, $\\verb|5/4|$ and $\\verb|7/4|$ are both equal to 1, but $5 \\neq 7$. Given a list of nonnegative integers and a divisor, how many pairs of distinct entries in the list are there that give the same result when both are divided by the divisor in C++\n-----Input----- The first line of input contains two integers $n$ ($1 \\leq n \\leq 200000$), the number of elements in the list, and $d$ ($1 \\leq d \\leq 10^9$), the divisor. The second line of input contains $n$ integers $a_1, \\ldots , a_ n$ ($0 \\leq a_ i \\leq 10^9$), where $a_ i$ is the $i^\\textrm {th}$ element of the list. -----Output----- Display a single integer indicating the number of distinct pairs of indices $(i,j)$ with $1 \\leq i < j \\leq n$ such that $a_ i / d = a_ j / d$ when using integer division in C++. Note that the numbers in the list are not necessarily distinct (i.e. it is possible that $a_ i = a_ j$ for some indices $i \\neq j$). -----Examples----- Sample Input 1: 5 4 4 5 6 7 8 Sample Output 1: 6 Sample Input 2: 5 1 4 5 6 7 8 Sample Output 2: 0\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nIn C++ division with positive integers always rounds down. Because of this, sometimes when two integers are divided by the same divisor they become equal even though they were originally not equal. For example in C++, $\\verb|5/4|$ and $\\verb|7/4|$ are both equal to 1, but $5 \\neq 7$.\n\nGiven a list of nonnegative integers and a divisor, how many pairs of distinct entries in the list are there that give the same result when both are divided by the divisor in C++?\n\n-----Input-----\nThe first line of input contains two integers $n$ ($1 \\leq n \\leq 200000$), the number of elements in the list, and $d$ ($1 \\leq d \\leq 10^9$), the divisor.\n\nThe second line of input contains $n$ integers $a_1, \\ldots , a_ n$ ($0 \\leq a_ i \\leq 10^9$), where $a_ i$ is the $i^\\textrm {th}$ element of the list.\n\n-----Output-----\nDisplay a single integer indicating the number of distinct pairs of indices $(i,j)$ with $1 \\leq i < j \\leq n$ such that $a_ i / d = a_ j / d$ when using integer division in C++. Note that the numbers in the list are not necessarily distinct (i.e. it is possible that $a_ i = a_ j$ for some indices $i \\neq j$).\n\n-----Examples-----\nSample Input 1:\n5 4\n4 5 6 7 8\nSample Output 1:\n6\n\nSample Input 2:\n5 1\n4 5 6 7 8\nSample Output 2:\n0\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n VisuAlgo (http://visualgo.net) is a website developed by a team of staff and students of School of Computing, National University of Singapore, the host of the 2015 ACM-ICPC Asia Singapore Regional. VisuAlgo visualizes a number of popular data structures and algorithms in the Computer Science curriculum. Currently, it receives approximately 2000 hits/day from CS students and instructors worldwide. One new feature of VisuAlgo is the online quiz. As an example, the above figure shows a question about the classic Single-Source (Single-Destination) Shortest Paths problem in graph theory. The beauty of this online quiz feature is that the question parameters are randomized. The drawn graph G is taken from a collection of hundreds of directed weighted graphs (with their 2-D layouts) in VisuAlgo s internal database. The graph G has $V$ vertices numbered from $[0..V-1]$. The source vertex $s$ and the destination vertex $t$ are selected at random from $[0..V-1]$. However, such randomization of the question parameters may produce either a trivial question (e.g. \n-----Input----- The first line of input contains two non-negative integers $1 \\leq V \\leq 10000$ and $0 \\leq E \\leq 200000$, giving the number of vertices and edges of the drawn graph G. Thereafter follow\u00a0$E$ lines, each describing the directed weighted edges in G by three integers $0 \\leq u, v \\leq V-1$ and $1 \\leq w \\leq 99$ (VisuAlgo limits the edge weight to be at most 2 characters for visual aesthetic purpose), where\u00a0$u$ and\u00a0$v$ are the vertex numbers and\u00a0$w$ is the weight of the directed edge $u \\rightarrow v$. It is guaranteed that G is a simple graph without self-loops or multiple directed edges with the same direction between the same pair of vertices. Finally, there are two integers in the last line of input $0 \\leq s, t \\leq V-1$. -----Output----- Print a line with the number of different shortest paths between $s$ to $t$ in G. Two shortest paths $p_1$ and $p_2$ are considered different if there exists at least one edge in $p_1$ that is not found in $p_2$. It is guaranteed that the answer fits in a 32-bit signed integer data type. -----Examples----- Sample Input 1: 6 10 0 1 26 1 3 29 1 5 9 2 3 25 2 4 43 4 2 3 5 0 13 5 2 33 5 3 18 5 4 58 5 1 Sample Output 1: 1 Sample Input 2: 7 9 0 1 1 0 2 2 1 2 1 2 3 1 2 4 3 3 4 1 4 5 1 4 6 2 5 6 1 0 6 Sample Output 2: 4\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nVisuAlgo (http://visualgo.net) is a website developed by a team of staff and students of School of Computing, National University of Singapore, the host of the 2015 ACM-ICPC Asia Singapore Regional. VisuAlgo visualizes a number of popular data structures and algorithms in the Computer Science curriculum. Currently, it receives approximately 2000 hits/day from CS students and instructors worldwide.\n\nOne new feature of VisuAlgo is the online quiz. As an example, the above figure shows a question about the classic Single-Source (Single-Destination) Shortest Paths problem in graph theory. The beauty of this online quiz feature is that the question parameters are randomized. The drawn graph G is taken from a collection of hundreds of directed weighted graphs (with their 2-D layouts) in VisuAlgo\u2019s internal database. The graph G has $V$ vertices numbered from $[0..V-1]$. The source vertex $s$ and the destination vertex $t$ are selected at random from $[0..V-1]$.\n\nHowever, such randomization of the question parameters may produce either a trivial question (e.g. \u201cNo Answer\u201d when $s$ and $t$ are disconnected, $0$ when $s = t$, simple tracing of a path if there is only a single unique path from $s$ to $t$ as shown in the above figure) or insanely difficult question to be computed manually if there are too many possible shortest paths from $s$ to $t$.\n\nThe developers of VisuAlgo want to calibrate such Shortest Paths question with randomized parameters so that it is possible for a normal Computer Science student to answer the randomly generated question manually within a reasonable amount of time. Please help them.\n\n-----Input-----\nThe first line of input contains two non-negative integers $1 \\leq V \\leq 10000$ and $0 \\leq E \\leq 200000$, giving the number of vertices and edges of the drawn graph G.\n\nThereafter follow\u00a0$E$ lines, each describing the directed weighted edges in G by three integers $0 \\leq u, v \\leq V-1$ and $1 \\leq w \\leq 99$ (VisuAlgo limits the edge weight to be at most 2 characters for visual aesthetic purpose), where\u00a0$u$ and\u00a0$v$ are the vertex numbers and\u00a0$w$ is the weight of the directed edge $u \\rightarrow v$. It is guaranteed that G is a simple graph without self-loops or multiple directed edges with the same direction between the same pair of vertices.\n\nFinally, there are two integers in the last line of input $0 \\leq s, t \\leq V-1$.\n\n-----Output-----\nPrint a line with the number of different shortest paths between $s$ to $t$ in G. Two shortest paths $p_1$ and $p_2$ are considered different if there exists at least one edge in $p_1$ that is not found in $p_2$. It is guaranteed that the answer fits in a 32-bit signed integer data type.\n\n-----Examples-----\nSample Input 1:\n6 10\n0 1 26\n1 3 29\n1 5 9\n2 3 25\n2 4 43\n4 2 3\n5 0 13\n5 2 33\n5 3 18\n5 4 58\n5 1\nSample Output 1:\n1\n\nSample Input 2:\n7 9\n0 1 1\n0 2 2\n1 2 1\n2 3 1\n2 4 3\n3 4 1\n4 5 1\n4 6 2\n5 6 1\n0 6\nSample Output 2:\n4\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given $2$ positive integers $n$ and $k$, such that $(n \\bmod 2) = (k \\bmod 2)$, where $(x \\bmod 2)$ is operation of taking remainder of $x$ by dividing on $2$. Find any string $s$ consisting of $n$ symbols \"0\" or \"1\", such that the length of its minimal unique substring is equal to $k$. \n-----Input----- The first line contains two integers $n$ and $k$, separated by spaces ($1 \\leq k \\leq n \\leq 100\\,000$, $(k \\bmod 2) = (n \\bmod 2)$). -----Output----- Print a string $s$ of length $n$, consisting of symbols \"0\" and \"1\". Minimal length of the unique substring of $s$ should be equal to $k$. You can find any suitable string. It is guaranteed, that there exists at least one such string. -----Examples----- Input 4 4 Output 1111 Input 5 3 Output 01010 Input 7 3 Output 1011011 -----Note----- In the first test, it's easy to see, that the only unique substring of string $s = $\"1111\" is all string $s$, which has length $4$. In the second test a string $s = $\"01010\" has minimal unique substring $t =$\"101\", which has length $3$. In the third test a string $s = $\"1011011\" has minimal unique substring $t =$\"110\", which has length $3$.\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nLet $s$ be some string consisting of symbols \"0\" or \"1\". Let's call a string $t$ a substring of string $s$, if there exists such number $1 \\leq l \\leq |s| - |t| + 1$ that $t = s_l s_{l+1} \\ldots s_{l + |t| - 1}$. Let's call a substring $t$ of string $s$ unique, if there exist only one such $l$. \n\nFor example, let $s = $\"1010111\". A string $t = $\"010\" is an unique substring of $s$, because $l = 2$ is the only one suitable number. But, for example $t = $\"10\" isn't a unique substring of $s$, because $l = 1$ and $l = 3$ are suitable. And for example $t =$\"00\" at all isn't a substring of $s$, because there is no suitable $l$.\n\nToday Vasya solved the following problem at the informatics lesson: given a string consisting of symbols \"0\" and \"1\", the task is to find the length of its minimal unique substring. He has written a solution to this problem and wants to test it. He is asking you to help him.\n\nYou are given $2$ positive integers $n$ and $k$, such that $(n \\bmod 2) = (k \\bmod 2)$, where $(x \\bmod 2)$ is operation of taking remainder of $x$ by dividing on $2$. Find any string $s$ consisting of $n$ symbols \"0\" or \"1\", such that the length of its minimal unique substring is equal to $k$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$, separated by spaces ($1 \\leq k \\leq n \\leq 100\\,000$, $(k \\bmod 2) = (n \\bmod 2)$).\n\n\n-----Output-----\n\nPrint a string $s$ of length $n$, consisting of symbols \"0\" and \"1\". Minimal length of the unique substring of $s$ should be equal to $k$. You can find any suitable string. It is guaranteed, that there exists at least one such string.\n\n\n-----Examples-----\nInput\n4 4\n\nOutput\n1111\nInput\n5 3\n\nOutput\n01010\nInput\n7 3\n\nOutput\n1011011\n\n\n\n-----Note-----\n\nIn the first test, it's easy to see, that the only unique substring of string $s = $\"1111\" is all string $s$, which has length $4$.\n\nIn the second test a string $s = $\"01010\" has minimal unique substring $t =$\"101\", which has length $3$.\n\nIn the third test a string $s = $\"1011011\" has minimal unique substring $t =$\"110\", which has length $3$.\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n A multinational company is asking you to help them genetically modify an apple. In order for the apples to grow faster, to get more of them, to make them bigger and make them look nicer and more symmetrical, the apple s DNA requires an insertion of a certain swine gene. The apple s DNA is represented by a series of characters from the set $\\{ A, C, G, T\\} $. The required swine gene is also comprised of charaters from this set. The apple s DNA should be injected with some characters into some places, so that the resulting sequence contains a swine gene somewhere (in successive locations). To make things a bit more complicated, inserting each of the characters $A, C, G, T$ has its own cost. Help this multinational company in achieving their goal with the lowest possible total cost. As a reward, you get a ton of their apples. \n-----Input----- The first line of input contains a sequence of $N$ ($1 \\le N \\le 10000$) characters which represent the apple\u2019s DNA. The second line of input contains a sequence of $M$ ($1 \\le M \\le 5000$) characters which represent the swine gene that we want to insert into the apple\u2019s DNA. Both the sequences are comprised only of characters from the set $\\{ A, C, G, T\\} $. The third line of input contains four integers from the interval $[0, 1000]$: the cost of inserting one character $A, C, G, T$, in that order. -----Output----- The first and only line of output must contain the minimal total cost. -----Examples----- Sample Input 1: GTA CAT 5 7 1 3 Sample Output 1: 10 Sample Input 2: TATA CACA 3 0 3 0 Sample Output 2: 3\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nA multinational company is asking you to help them genetically modify an apple. In order for the apples to grow faster, to get more of them, to make them bigger and make them look nicer and more symmetrical, the apple\u2019s DNA requires an insertion of a certain swine gene.\n\nThe apple\u2019s DNA is represented by a series of characters from the set $\\{ A, C, G, T\\} $. The required swine gene is also comprised of charaters from this set. The apple\u2019s DNA should be injected with some characters into some places, so that the resulting sequence contains a swine gene somewhere (in successive locations). To make things a bit more complicated, inserting each of the characters $A, C, G, T$ has its own cost.\n\nHelp this multinational company in achieving their goal with the lowest possible total cost. As a reward, you get a ton of their apples.\n\n-----Input-----\nThe first line of input contains a sequence of $N$ ($1 \\le N \\le 10000$) characters which represent the apple\u2019s DNA.\n\nThe second line of input contains a sequence of $M$ ($1 \\le M \\le 5000$) characters which represent the swine gene that we want to insert into the apple\u2019s DNA.\n\nBoth the sequences are comprised only of characters from the set $\\{ A, C, G, T\\} $.\n\nThe third line of input contains four integers from the interval $[0, 1000]$: the cost of inserting one character $A, C, G, T$, in that order.\n\n-----Output-----\nThe first and only line of output must contain the minimal total cost.\n\n-----Examples-----\nSample Input 1:\nGTA\nCAT\n5 7 1 3\nSample Output 1:\n10\n\nSample Input 2:\nTATA\nCACA\n3 0 3 0\nSample Output 2:\n3\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n You are given a list of words. Find the maximum rhyme power of any two words in the list. \n-----Input----- The first line contains an integer $N$ with $2 \\leq N \\leq 10^5$, the number of words. The following $N$ lines each contain a string $S_ i$, where $1 \\leq |S_ i| \\leq 10^6$. The sum of all string lengths $|S_ i|$ is at most $10^6$. -----Output----- An integer, the maximal rhyme power. -----Examples----- Sample Input: 4 spaghetti already confetti serengeti Sample Output: 4\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nRhymes are complicated. The extent to which one word rhymes with another depends on how similar they sound; but if they are too similar then they aren\u2019t considered a rhyme at all. Karim has a huge list of $N$ words and wants to determine the maximally rhyming pair of words. To that end he has introduced the concept of rhyme power:\n\nGiven two words $S$ and $T$, their rhyme power $r(S,T)$ is defined as\n - $0$, if one word is a suffix of the other,\n - the length of their longest common suffix, otherwise.\n\nFor instance, the rhyme power of \u201cfire\u201d and \u201cdesire\u201d is $3$, because their longest common suffix \u201cire\u201d has length $3$. In contrast, the rhyme power of \u201cimpossible\u201d and \u201cpossible\u201d is $0$, because \u201cpossible\u201d is a suffix of \u201cimpossible\u201d.\n\nGiven Karim\u2019s list of $N$ words, your task is to find the maximum value of $r(S, T)$ over all pairs of words.\n\n-----Input-----\nThe first line contains an integer $N$ with $2 \\leq N \\leq 10^5$, the number of words.\n\nThe following $N$ lines each contain a string $S_ i$, where $1 \\leq |S_ i| \\leq 10^6$. The sum of all string lengths $|S_ i|$ is at most $10^6$.\n\n-----Output-----\nAn integer, the maximal rhyme power.\n\n-----Examples-----\nSample Input:\n4\nspaghetti\nalready\nconfetti\nserengeti\nSample Output:\n4\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Calculate the number of ways in which you can shake hands with your friends. \n-----Input----- The input contains one line containing one non-negative integer: $n$, with $0 \\leq n \\leq 5000$. -----Output----- Output a line containing $S_ n$. -----Examples----- Sample Input: 0 Sample Output: 1\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nLast weekend you and your friends went to visit the local farmer\u2019s market at the town square. As you were standing around in a circle talking, you couldn\u2019t help overhearing two of your friends musing over what sounded like an interesting problem: They were considering the number of ways in which you could all shake hands, such that everyone in the circle simultaneously shaked hands with one other person, but where no arms crossed each other.\n\nAfter a few seconds\u2019 thought you decided to join your two friends, to share (with them) the solution to their problem. \u201cIf we are $2n$ persons\u201d, you said, \u201cpick any particular person, and let that person shake hands with somebody. That person will have to leave an even number of people on each side of the person with whom he/she shakes hands. Of the remaining $n-1$ pairs of people, he/she can leave zero on the right and $n-1$ pairs on the left, $1$ on the right and $n-2$ pairs on the left, and so on. The pairs remaining on the right and left can independently choose any of the possible non-crossing handshake patterns, so the count $C_ n$ for $n$ pairs of people is given by:\\[ C_ n = C_{n-1}C_0 + C_{n-2}C_1 + \\ldots + C_1C_{n-2} + C_0C_{n-1}, \\]\n\nwhich, together with the fact that $C_0=C_1=1$, is just the definition of the Catalan numbers.\u201d By consulting your handy combinatorics book, you find out that there is a much more efficient formula for calculating $C_ n$, namely:\\[ C_ n = \\frac{\\binom {2n}{n}}{n+1}. \\]\n\nAfter a collective groan from the group, your particularly cheeky friend Val called out \u201cWell, since we are at the town square, why don\u2019t you try to square your Catalan numbers!\u201d. This was met with much rejoicing, while you started to think about how to square the Catalan sequence\u2026\n\n-----Task-----\nLet $C_ n$ be the $n$th Catalan number as defined above. By regarding the sequence $(C_ n)_{n\\geq 0}$ of Catalan numbers, we can define a sequence $(S_ n)_{n\\geq 0}$, corresponding to \u201csquaring the Catalan sequence\u201d, by considering the Cauchy product, or discrete convolution, of $(C_ n)_{n\\geq 0}$ with itself, i.e.,\\[ S_ n = \\sum _{k=0}^{n}C_ kC_{n-k}. \\]\n\nYour task is to write a program for calculating the number $S_ n$.1\n\n-----Input-----\nThe input contains one line containing one non-negative integer: $n$, with $0 \\leq n \\leq 5000$.\n\n-----Output-----\nOutput a line containing $S_ n$.\n\n-----Examples-----\nSample Input:\n0\nSample Output:\n1\n\"\"\"\ndef code():"
}