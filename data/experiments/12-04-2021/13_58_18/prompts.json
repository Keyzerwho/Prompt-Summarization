{
    "0": "Python 3\n\"\"\"\nGiven a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number.\n\nExamples:\nInput:\nnumber = 'G'\nOutput:\n[\"A + G\", \"B + F\", \"C + E\", \"D + D\"]\nExplanation:\nTranslating this into the decimal numeral system we get: number = 6, so it is [\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"].\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' \u2264 number \u2264 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"\ndef new_numeral_system(number):",
    "1": "Python 3\n\"\"\"\n# Task\n Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - `A for 0, B for 1, and so on`.\n\n The teacher assigned you the following numeral system exercise: given a one-digit `number`, you should find all unordered pairs of one-digit numbers whose values add up to the `number`.\n\n# Example\n\n For `number = 'G'`, the output should be `[\"A + G\", \"B + F\", \"C + E\", \"D + D\"]`\n\n Translating this into the decimal numeral system we get: number = 6, so it is `[\"0 + 6\", \"1 + 5\", \"2 + 4\", \"3 + 3\"]`.\n\n# Input/Output\n\n - `[input]` string(char in C#) `number`\n\n   A character representing a correct one-digit number in the new numeral system.\n\n   Constraints: `'A' \u2264 number \u2264 'Z'.`\n\n - `[output]` a string array\n\n   An array of strings in the format \"letter1 + letter2\", where \"letter1\" and \"letter2\" are correct one-digit numbers in the new numeral system. The strings should be sorted by \"letter1\".\n\n   Note that \"letter1 + letter2\" and \"letter2 + letter1\" are equal pairs and we don't consider them to be different.\n\"\"\"\ndef new_numeral_system(number):",
    "2": "Python 3\n\"\"\"\nImplement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\nExamples:\n\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n\"\"\"\ndef string_hash(s):",
    "3": "Python 3\n\"\"\"\nImplement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\n**Note**: OR, AND, NOT, XOR are bitwise operations.\n\n___\n\n### Examples\n\n```\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n```\n\n___\n\nGive an example why this hashing algorithm is bad?\n\"\"\"\ndef string_hash(s):",
    "4": "Python 3\n\"\"\"\nGiven an 2 dimentional array count number of structures in it.\nStructures are represented by 'X's and empty slots are represented with \".\"s.\n\n\nStructures can only be horizontal or vertical.\nThere are no adjacent structures.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above 2 dimentional array there are 2 structures.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid 2 dimentional array that you will not receive.\n\n\"\"\"\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:",
    "5": "Python 3\n\"\"\"\nGiven an 2D board, count how many battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\n\n\nYou receive a valid board, made of only battleships or empty slots.\nBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\nAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\n\n\nExample:\nX..X\n...X\n...X\n\nIn the above board there are 2 battleships.\n\nInvalid Example:\n...X\nXXXX\n...X\n\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\n\nFollow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?\n\n\"\"\"\nclass Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:",
    "6": "Python 3\n\"\"\"\nYou are given an array consisting of n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step you selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image] \n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after your algorithm finishes.\n\nsummary : \n\n\n\n-----Input-----\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers x_{i} (1 \u2264 x_{i} \u2264 n), the indices of cells for which it is necessary to output their content after your algorithm finishes.\n\n\n-----Output-----\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after your algorithm finishes.\n\n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8, 3, 11, 4, 9, 5, 13, 6, 10, 7].\n\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nDima is a beginner programmer. During his working process, he regularly has to repeat the following operation again and again: to remove every second element from the array. One day he has been bored with easy solutions of this problem, and he has come up with the following extravagant algorithm.\n\nLet's consider that initially array contains n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step Dima selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image] \n\nYou have to write a program that allows you to determine what number will be in the cell with index x (1 \u2264 x \u2264 n) after Dima's algorithm finishes.\n\n\n-----Input-----\n\nThe first line contains two integers n and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array and the number of queries for which it is needed to find the answer.\n\nNext q lines contain integers x_{i} (1 \u2264 x_{i} \u2264 n), the indices of cells for which it is necessary to output their content after Dima's algorithm finishes.\n\n\n-----Output-----\n\nFor each of q queries output one integer number, the value that will appear in the corresponding array cell after Dima's algorithm finishes.\n\n\n-----Examples-----\nInput\n4 3\n2\n3\n4\n\nOutput\n3\n2\n4\n\nInput\n13 4\n10\n5\n4\n8\n\nOutput\n13\n3\n8\n9\n\n\n\n-----Note-----\n\nThe first example is shown in the picture.\n\nIn the second example the final array is [1, 12, 2, 8, 3, 11, 4, 9, 5, 13, 6, 10, 7].\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n## Task:\nCreate a function `isPronic` to check whether the argument is a Pronic Number. Return true if it is & false otherwise.\n\n### Description:\n\n`Pronic Number` -A pronic number, oblong number, rectangular number or heteromecic number, is a number which is the product of two consecutive integers, that is, n(n + 1).\n\n> The first few Pronic Numbers are - 0, 2, 6, 12, 20, 30, 42...\n\n### Explanation:\n    \n      0 = 0 \u00d7 1   // \u2234  0 is a Pronic Number\n      2 = 1 \u00d7 2   // \u2234  2 is a Pronic Number\n      6 = 2 \u00d7 3   // \u2234  6 is a Pronic Number\n     12 = 3 \u00d7 4   // \u2234 12 is a Pronic Number\n     20 = 4 \u00d7 5   // \u2234 20 is a Pronic Number\n     30 = 5 \u00d7 6   // \u2234 30 is a Pronic Number\n     42 = 6 \u00d7 7   // \u2234 42 is a Pronic Number\n\"\"\"\ndef is_pronic(n):",
    "9": "Python 3\n\"\"\"\n## Task:\nYou have to create a function `isPronic` to check whether the argument passed is a Pronic Number and return true if it is & false otherwise.\n\n### Description:\n\n`Pronic Number` -A pronic number, oblong number, rectangular number or heteromecic number, is a number which is the product of two consecutive integers, that is, n(n + 1).\n\n> The first few Pronic Numbers are - 0, 2, 6, 12, 20, 30, 42...\n\n### Explanation:\n    \n      0 = 0 \u00d7 1   // \u2234  0 is a Pronic Number\n      2 = 1 \u00d7 2   // \u2234  2 is a Pronic Number\n      6 = 2 \u00d7 3   // \u2234  6 is a Pronic Number\n     12 = 3 \u00d7 4   // \u2234 12 is a Pronic Number\n     20 = 4 \u00d7 5   // \u2234 20 is a Pronic Number\n     30 = 5 \u00d7 6   // \u2234 30 is a Pronic Number\n     42 = 6 \u00d7 7   // \u2234 42 is a Pronic Number\n\"\"\"\ndef is_pronic(n):",
    "10": "Python 3\n\"\"\"\nThere are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively.\nFor each of these bags, you will paint one of the balls red, and paint the other blue.\nAfterwards, the 2N balls will be classified according to color.\nThen, we will define the following:\n - R_{max}: the maximum integer written on a ball painted in red\n - R_{min}: the minimum integer written on a ball painted in red\n - B_{max}: the maximum integer written on a ball painted in blue\n - B_{min}: the minimum integer written on a ball painted in blue\nFind the minimum possible value of (R_{max} - R_{min}) \\times (B_{max} - B_{min}).\n\n-----Constraints-----\n - 1 \u2264 N \u2264 200,000\n - 1 \u2264 x_i, y_i \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum possible value.\n\n-----Sample Input-----\n3\n1 2\n3 4\n5 6\n\n-----Sample Output-----\n15\n\n\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nThere are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively.\nFor each of these bags, you will paint one of the balls red, and paint the other blue.\nAfterwards, the 2N balls will be classified according to color.\nThen, we will define the following:\n - R_{max}: the maximum integer written on a ball painted in red\n - R_{min}: the minimum integer written on a ball painted in red\n - B_{max}: the maximum integer written on a ball painted in blue\n - B_{min}: the minimum integer written on a ball painted in blue\nFind the minimum possible value of (R_{max} - R_{min}) \\times (B_{max} - B_{min}).\n\n-----Constraints-----\n - 1 \u2264 N \u2264 200,000\n - 1 \u2264 x_i, y_i \u2264 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nx_1 y_1\nx_2 y_2\n:\nx_N y_N\n\n-----Output-----\nPrint the minimum possible value.\n\n-----Sample Input-----\n3\n1 2\n3 4\n5 6\n\n-----Sample Output-----\n15\n\nThe optimal solution is to paint the balls with x_1, x_2, y_3 red, and paint the balls with y_1, y_2, x_3 blue.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "13": "Python 3\n\"\"\"\nKontti language is a finnish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"\ndef kontti(s):",
    "14": "Python 3\n\"\"\"\nYou are given glasses stacked in a pyramid.\nYou need to output how full the j-th glass in the i-th row is when champagne is poured in the first glass at the top.\n\nGlasses poured\u00a0will\u00a0be\u00a0in the range of [0, 10 ^ 9].\ni and j will be in the range of [0, 99].\n\nExample 1:\nInput: poured = 1, query_glass = 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). \nThere will be no excess liquid so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput: poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. \nThe glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\"\"\"\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:",
    "15": "Python 3\n\"\"\"\nWe stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.\u00a0 \nEach glass holds one cup (250ml) of champagne.\n\nThen, some champagne is poured in the first glass at the top.\u00a0 \nWhen the top most glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\u00a0 \nWhen those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\u00a0 (A glass at the bottom row has it's excess champagne fall on the floor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full.\u00a0 \nAfter two cups of champagne are poured, the two glasses on the second row are half full.\u00a0 \nAfter three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\u00a0 \nAfter four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\n\n\n\nNow after pouring some non-negative integer cups of champagne, return how full the j-th glass in the i-th row is (both i and j are 0 indexed.)\n\n\u00a0\n\n\nExample 1:\nInput: poured = 1, query_glass = 1, query_row = 1\nOutput: 0.0\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\n\nExample 2:\nInput: poured = 2, query_glass = 1, query_row = 1\nOutput: 0.5\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\n\n\n\u00a0\n\nNote:\n\n\n       poured\u00a0will\u00a0be\u00a0in the range of [0, 10 ^ 9].\n       query_glass and query_row will be in the range of [0, 99].\n\"\"\"\nclass Solution:\n    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:",
    "16": "Python 3\n\"\"\"\n\nFind the number of questions you will solve on $nth $ day if on first day you solved $a$ problems and after that you solved $d$ problems more than previous day. But after every $k$ days , you increased $d$ by $inc$.\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nKshitij has recently started solving problems on codechef. As he is real problem solving enthusiast, he wants continuous growth in number of problems solved per day.\nHe started with $a$  problems on first day. \nHe solves $d$ problems more than previous day. But after every $k$ days , he increases $d$ by\n$inc$ .\nCan you guess how many questions he will solve on $nth $ day ?\n\n-----Input:-----\n- First line  contains $T$, number of testcases. Then the testcases follow. \n- Each testcase contains of a single line of input,five integers $a, d, k, n, inc$. \n\n-----Output:-----\nFor each testcase, output in a single line number of questions solved on $nth$ day.\n\n-----Constraints-----\n- $1 \\leq T \\leq 15$\n- $1 \\leq a \\leq 99$\n- $1 \\leq d \\leq 100$\n- $1 \\leq n \\leq 10000$\n- $1 \\leq k \\leq n$\n- $0 \\leq inc \\leq 99$\n\n-----Sample Input:-----\n1\n1 4 3 8 2\n\n-----Sample Output:-----\n43\n\n-----EXPLANATION:-----\nThe number of questions solved in first 8 days is :\n$1$ $5$ $9$ $15$ $21$ $27$ $35$ $43$ .\nOn first day he solved 1 problem . Here $d$ is  4 for first 3 days.\nThen after 3 days $d$ increases by 2 (that is 6).\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\nYou are given a sequence of $n$ digits $d_1d_2 \\dots d_{n}$. You need to paint all the digits in two colors so that:  each digit is painted either in the color $1$ or in the color $2$;  if you write in a row from left to right all the digits painted in the color $1$, and then after them all the digits painted in the color $2$, then the resulting sequence of $n$ digits will be non-decreasing. \n\nIt is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions.\n\nFind any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the length of a given sequence of digits.\n\nThe next line contains a sequence of $n$ digits $d_1d_2 \\dots d_{n}$ ($0 \\le d_i \\le 9$). The digits are written in a row without spaces or any other separators. The sequence can start with 0.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines \u2014 the answers to each of the test cases in the input.\n\nIf there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of $n$ digits $t_1t_2 \\dots t_n$ ($1 \\le t_i \\le 2$), where $t_i$ is the color the $i$-th digit is painted in. If there are several feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding output line should contain a single character '-' (the minus sign).\n\n\n-----Example-----\nInput\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\nOutput\n121212211211\n1\n222222222\n21\n-\n\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nYou are given a sequence of $n$ digits $d_1d_2 \\dots d_{n}$. You need to paint all the digits in two colors so that:  each digit is painted either in the color $1$ or in the color $2$;  if you write in a row from left to right all the digits painted in the color $1$, and then after them all the digits painted in the color $2$, then the resulting sequence of $n$ digits will be non-decreasing (that is, each next digit will be greater than or equal to the previous digit). \n\nFor example, for the sequence $d=914$ the only valid coloring is $211$ (paint in the color $1$ two last digits, paint in the color $2$ the first digit). But $122$ is not a valid coloring ($9$ concatenated with $14$ is not a non-decreasing sequence).\n\nIt is allowed that either of the two colors is not used at all. Digits painted in the same color are not required to have consecutive positions.\n\nFind any of the valid ways to paint the given sequence of digits or determine that it is impossible to do.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 10000$) \u2014 the number of test cases in the input.\n\nThe first line of each test case contains an integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the length of a given sequence of digits.\n\nThe next line contains a sequence of $n$ digits $d_1d_2 \\dots d_{n}$ ($0 \\le d_i \\le 9$). The digits are written in a row without spaces or any other separators. The sequence can start with 0.\n\nIt is guaranteed that the sum of the values \u200b\u200bof $n$ for all test cases in the input does not exceed $2\\cdot10^5$.\n\n\n-----Output-----\n\nPrint $t$ lines \u2014 the answers to each of the test cases in the input.\n\nIf there is a solution for a test case, the corresponding output line should contain any of the valid colorings written as a string of $n$ digits $t_1t_2 \\dots t_n$ ($1 \\le t_i \\le 2$), where $t_i$ is the color the $i$-th digit is painted in. If there are several feasible solutions, print any of them.\n\nIf there is no solution, then the corresponding output line should contain a single character '-' (the minus sign).\n\n\n-----Example-----\nInput\n5\n12\n040425524644\n1\n0\n9\n123456789\n2\n98\n3\n987\n\nOutput\n121212211211\n1\n222222222\n21\n-\n\n\n\n-----Note-----\n\nIn the first test case, $d=040425524644$. The output $t=121212211211$ is correct because $0022444$ (painted in $1$) concatenated with $44556$ (painted in $2$) is $002244444556$ which is a sorted sequence of $n$ given digits.\n\"\"\"\ndef code():"
}