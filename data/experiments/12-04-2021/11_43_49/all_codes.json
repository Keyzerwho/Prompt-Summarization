{
    "0": "\n    n = int(input())\n    coins = [1, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000]\n    coins.reverse()\n    m = 0\n    for i in coins:\n        if n >= i:\n            m += n // i\n            n = n % i\n    print(m)",
    "1": "\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        print(int(log(n, 3)))\n",
    "2": "\n    n, k = map(int, input().split())\n    locations = []\n    for i in range(n):\n        locations.append(list(map(int, input().split())))\n    locations.sort(key=lambda x: x[0])\n    total = 0\n    for i in range(n):\n        total += locations[i][0] * locations[i][1]\n    return total\n\nprint(code())",
    "3": "\n    N, K = map(int, input().split())\n    x = [0] * N\n    t = [0] * N\n    for i in range(N):\n        x[i], t[i] = map(int, input().split())\n    x.sort()\n    t.sort()\n    i = 0\n    j = 0\n    s = 0\n    while i < N and j < N:\n        if t[i] <= K:\n            s += 2 * (x[j] - x[i])\n            K -= t[i]\n            i += 1\n            j += 1\n        else:\n            s += 2 * (x[j] - x[i])\n            K = K - K\n            i += 1\n    print(s)\n",
    "4": "\n    C, N, M = map(int, input().split())\n    cows = [int(input()) for _ in range(N)]\n    days = [int(input()) for _ in range(M)]\n    for day in days:\n        print(sum([cows[i]//2 for i in range(N) if cows[i] > C]))\n",
    "5": "\n    C, N, M = map(int, input().split())\n    cows = [int(input()) for _ in range(N)]\n    days = [int(input()) for _ in range(M)]\n    for day in days:\n        print(sum([cows[i] // 2 for i in range(N) if cows[i] > C]))\n",
    "6": "\n    n, m, k1, k2 = map(int, input().split())\n    graph = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v, w, c = map(int, input().split())\n        graph[u].append([v, w, c])\n        graph[v].append([u, w, c])\n    s, t = map(int, input().split())\n    if s == t:\n        print(0)\n        return\n    red = 0\n    blue = 0\n    visited = [False] * (n+1)\n    visited[s] = True\n    q = [[0, s]]\n    while q:\n        time, node = q.pop(0)\n        for i in graph[node]:\n            if not visited[i[0]]:\n                if i[2] == 1:\n                    red += 1\n                elif i[2] == 2:\n                    blue += 1\n                if red == k1 and blue == k2:\n                    print(time + i[1])\n                    return\n                visited[i[0]] = True\n                q.append([time + i[1], i[0]])\n    print(-1)\n",
    "7": "\n    n, m, k1, k2 = map(int, input().split())\n    red = [[] for i in range(n+1)]\n    blue = [[] for i in range(n+1)]\n    white = [[] for i in range(n+1)]\n    for i in range(m):\n        u, v, x, c = map(int, input().split())\n        if c == 1:\n            red[u].append((v, x))\n            red[v].append((u, x))\n        elif c == 2:\n            blue[u].append((v, x))\n            blue[v].append((u, x))\n        else:\n            white[u].append((v, x))\n            white[v].append((u, x))\n    s, t = map(int, input().split())\n    if s == t:\n        print(0)\n        return\n    red_time = 0\n    blue_time = 0\n    white_time = 0\n    red_visited = [False for i in range(n+1)]\n    blue_visited = [False for i in range(n+1)]\n    white_visited = [False for i in range(n+1)]\n    red_visited[s] = True\n    blue_visited[s] = True\n    white_visited[s] = True\n    red_queue = [s]\n    blue_queue = [s]\n    white_queue = [s]\n    while red_queue or blue_queue or white_queue:\n        if red_queue:\n            u = red_queue.pop(0)\n            for v, x in red[u]:\n                if not red_visited[v]:\n                    red_visited[v] = True\n                    red_time += x\n                    red_queue.append(v)\n        if blue_queue:\n            u = blue_queue.pop(0)\n            for v, x in blue[u]:\n                if not blue_visited[v]:\n                    blue_visited[v] = True\n                    blue_time += x\n                    blue_queue.append(v)\n        if white_queue:\n            u = white_queue.pop(0)\n            for v, x in white[u]:\n                if not white_visited[v]:\n                    white_visited[v] = True\n                    white_time += x\n                    white_queue.append(v)\n    if red_visited[t] and blue_visited[t] and white_visited[t]:\n        if red_time == blue_time == white_time:\n            print(red_time)\n        else:\n            print(-1)\n    else:\n        print(-1)\n",
    "8": "\n    # Enter your code here\n    pass\n",
    "9": "\n    A = input()\n    B = input()\n    if len(A) != len(B):\n        return 0\n    if A == B:\n        return 0\n    count = 0\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            count += 1\n    return count\n\nprint(code())",
    "10": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] < a[j] < a[k] or a[i] > a[j] > a[k]:\n                    ans += 1\n    print(ans)\n",
    "11": "\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 1\n        else:\n            d[a[i]] += 1\n    ans = 1\n    for i in d:\n        ans *= d[i]\n    print(ans % (10**9 + 7))\n",
    "12": "\n    n, m = map(int, input().split())\n    if m == 0:\n        print(\"Impossible\")\n        return\n    targets = [0] * n\n    for i in range(m):\n        a, b = map(int, input().split())\n        if a == b:\n            print(\"Impossible\")\n            return\n        if targets[a-1] == 0:\n            targets[a-1] = b\n        elif targets[a-1] != b:\n            print(\"Impossible\")\n            return\n    for i in range(n):\n        if targets[i] == 0:\n            targets[i] = n\n    print(\" \".join(map(str, targets)))\n",
    "13": "\n    n, m = [int(x) for x in input().split()]\n    if m == 0:\n        print(\"Impossible\")\n        return\n    if m == n*(n-1)//2:\n        for i in range(1, n+1):\n            print(i)\n        return\n    print(\"Impossible\")\n",
    "14": "\n    pass\n\nif __name__ == '__main__':\n    code()",
    "15": "\n    l, m = [int(x) for x in input().split()]\n    lawn = []\n    for i in range(m):\n        lawn.append([x for x in input().split(',')])\n    lawn.sort(key=lambda x: int(x[1]))\n    for i in range(m):\n        lawn[i][1] = int(lawn[i][1])\n        lawn[i][2] = int(lawn[i][2])\n        lawn[i][3] = int(lawn[i][3])\n        lawn[i][4] = int(lawn[i][4])\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:\n            lawn[i][2] = 10080 // lawn[i][3]\n    for i in range(m):\n        if lawn[i][4] * lawn[i][2] > 10080:\n            lawn[i][4] = 10080 // lawn[i][2]\n    for i in range(m):\n        if lawn[i][2] * lawn[i][3] > 10080:",
    "16": "\n    n = int(input())\n    c = input().split()\n    a = input().split()\n    c = [int(i) for i in c]\n    a = [int(i) for i in a]\n    c_w = []\n    c_b = []\n    a_w = []\n    a_b = []\n    for i in range(n):\n        if c[i] == \"W\":\n            c_w.append(c[i])\n            a_w.append(a[i])\n        else:\n            c_b.append(c[i])\n            a_b.append(a[i])\n    c_w.sort()\n    c_b.sort()\n    a_w.sort()\n    a_b.sort()\n    c_w = [str(i) for i in c_w]\n    c_b = [str(i) for i in c_b]\n    a_w = [str(i) for i in a_w]\n    a_b = [str(i) for i in a_b]\n    c_w = \" \".join(c_w)\n    c_b = \" \".join(c_b)\n    a_w = \" \".join(a_w)\n    a_b = \" \".join(a_b)\n    print(c_w, a_w, c_b, a_b)",
    "17": "\n    ",
    "18": "\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    x.reverse()\n    count = 0\n    while len(x) > 0:\n        count += 1\n        i = 0\n        while i < len(x):\n            if x[i] >= i + 1:\n                x = x[i+1:]\n                break\n            i += 1\n    print(count)\n",
    "19": "\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    ans = 0\n    for i in range(n):\n        if x[i] == 0:\n            ans += 1\n        else:\n            break\n    for i in range(n):\n        if x[i] == 0:\n            continue\n        else:\n            break\n    for i in range(i, n):\n        if x[i] == x[i-1]:\n            continue\n        else:\n            ans += 1\n    print(ans)\n"
}