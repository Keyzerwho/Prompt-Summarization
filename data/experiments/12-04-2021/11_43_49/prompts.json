{
    "0": "Python 3\n\"\"\"\n You are given a number n and a number m. For every combination of coins you calculate the minimum number of coins that can bring the buyer at least n marks. Among all combinations choose the maximum of the minimum number of coins. This is the number we want. \n-----Input----- The single line contains a single integer n (1 \u2264 n \u2264 10^17). Please, do not use the %lld specifier to read or write 64 bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier. -----Output----- In a single line print an integer: the maximum number of coins the unlucky buyer could have paid with. -----Examples----- Input 1 Output 1 Input 4 Output 2 -----Note----- In the first test case, if a buyer has exactly one coin of at least 3 marks, then, to give Gerald one mark, he will have to give this coin. In this sample, the customer can not have a coin of one mark, as in this case, he will be able to give the money to Gerald without any change. In the second test case, if the buyer had exactly three coins of 3 marks, then, to give Gerald 4 marks, he will have to give two of these coins. The buyer cannot give three coins as he wants to minimize the number of coins that he gives.\n\"\"\"\ndef code():",
    "1": "Python 3\n\"\"\"\nGerald has been selling state secrets at leisure. All the secrets cost the same: n marks. The state which secrets Gerald is selling, has no paper money, only coins. But there are coins of all positive integer denominations that are powers of three: 1 mark, 3 marks, 9 marks, 27 marks and so on. There are no coins of other denominations. Of course, Gerald likes it when he gets money without the change. And all buyers respect him and try to give the desired sum without change, if possible. But this does not always happen.\n\nOne day an unlucky buyer came. He did not have the desired sum without change. Then he took out all his coins and tried to give Gerald a larger than necessary sum with as few coins as possible. What is the maximum number of coins he could get?\n\nThe formal explanation of the previous paragraph: we consider all the possible combinations of coins for which the buyer can not give Gerald the sum of n marks without change. For each such combination calculate the minimum number of coins that can bring the buyer at least n marks. Among all combinations choose the maximum of the minimum number of coins. This is the number we want.\n\n\n-----Input-----\n\nThe single line contains a single integer n (1 \u2264 n \u2264 10^17).\n\nPlease, do not use the %lld specifier to read or write 64 bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nIn a single line print an integer: the maximum number of coins the unlucky buyer could have paid with.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1\n\nInput\n4\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first test case, if a buyer has exactly one coin of at least 3 marks, then, to give Gerald one mark, he will have to give this coin. In this sample, the customer can not have a coin of one mark, as in this case, he will be able to give the money to Gerald without any change.\n\nIn the second test case, if the buyer had exactly three coins of 3 marks, then, to give Gerald 4 marks, he will have to give two of these coins. The buyer cannot give three coins as he wants to minimize the number of coins that he gives.\n\"\"\"\ndef code():",
    "2": "Python 3\n\"\"\"\n You are given a list of locations and the number of letters to be delivered to each location. Find the shortest route that delivers all the letters.\n-----Input----- The first line contains two integers, $N$ and $K$, where $3 \\leq N \\leq 1000$ is the number of delivery addresses on the route, and $1 \\leq K \\leq 10000$ is the carrying capacity of the postal truck. Each of the following $N$ lines will contain two integers $x_ j$ and $t_ j$, the location of a delivery and the number of letters to deliver there, where $-1500 \\leq x_1 < x_2 < \\cdots < x_ N \\leq 1500$ and $1 \\leq t_ j \\leq 800$ for all $j$. All delivery locations are nonzero (that is, none are at the post office). -----Output----- Output the minimum total travel distance needed to deliver all the letters and return to the post office. -----Examples----- Sample Input: 3 100 -10 50 10 175 25 20 Sample Output: 90\n\"\"\"\ndef code():",
    "3": "Python 3\n\"\"\"\nThe postal service is interested in cutting costs as an alternative to raising the postage rates. One way to do this is by minimizing the distance traveled when delivering mail from the post office to all the required locations and returning to the post office. It may be that all the mail to be delivered does not fit on the mail truck at once, in which case the distance traveled by the truck must include travel back to the post office to reload. For simplicity, we assume a one dimensional world with the post office at the origin, and delivery locations each identified by a single coordinate. As an example, suppose a postal truck can carry up to $100$\u00a0letters and that $50$\u00a0letters need to be delivered to location $-10$, that $175$ need to be delivered to location\u00a0$10$, and $20$ delivered to location\u00a0$25$. A maximally efficient plan would be:\n\nDeliver the $50$ letters to location $-10$ (travel $2 \\cdot 10$), the first $100$\u00a0letters to location $10$ (travel $2 \\cdot 10$), the remaining $75$\u00a0letters to location $10$ while on the way to delivering the $20$ to location\u00a0$25$ (travel $2 \\cdot 25$). The total round-trip distance traveled is $90$.\n\n-----Input-----\nThe first line contains two integers, $N$ and $K$, where $3 \\leq N \\leq 1000$ is the number of delivery addresses on the route, and $1 \\leq K \\leq 10000$ is the carrying capacity of the postal truck. Each of the following $N$ lines will contain two integers $x_ j$ and $t_ j$, the location of a delivery and the number of letters to deliver there, where $-1500 \\leq x_1 < x_2 < \\cdots < x_ N \\leq 1500$ and $1 \\leq t_ j \\leq 800$ for all $j$. All delivery locations are nonzero (that is, none are at the post office).\n\n-----Output-----\nOutput the minimum total travel distance needed to deliver all the letters and return to the post office.\n\n-----Examples-----\nSample Input:\n3 100\n-10 50\n10 175\n25 20\nSample Output:\n90\n\"\"\"\ndef code():",
    "4": "Python 3\n\"\"\"\n Baxter Scott owns The Enlightened Dairy Co., a dairy company with magical cows. Early each morning, he brushes his teeth, strolls outside, and finds that the cows have doubled in number. With double the number of cows, he can produce double the quantity of milk. While he is ecstatic that he has so many cows and so much milk, the Dairy Regulator forces him to keep at most $C$ cows on any given farm, which greatly complicates his business. At The Enlightened Dairy Co., Baxter has access to an unlimited number of farms, each with a maximum capacity of $C$ cows. On each farm, cows reproduce at the same rate: they always double in number when the clock strikes midnight. To stay within the Regulator s rules, whenever a farm has strictly more than $C$ cows, Baxter selects half of the cows on that farm and moves them to an entirely new, empty farm. More precisely, if there are $D \\leq C$ cows on a farm, he leaves all $D$ cows on the farm, but if there are $D > C$ cows on a farm, he leaves $\\left\\lceil \\frac{D}{2} \\right\\rceil $ cows on the farm and takes $\\left\\lfloor \\frac{D}{2} \\right\\rfloor $ cows to a new, empty farm. (Here $\\left\\lceil \\ \\right\\rceil $ and $\\left\\lfloor \\ \\right\\rfloor $ denote the ceiling and floor functions, which round up/down to the nearest integer, respectively.) He does this early every morning, before the Regulator could possibly show\n-----Input----- The first line of input contains three space-separated integers, $C$, $N$, and $M$, where $C$ ($1 \\leq C \\leq 1000$) is the maximum number of cows allowed on a farm, $N$ ($0 \\leq N \\leq 1000$) is the number of farms with at least one cow on Day\u00a0$0$, and $M$ ($1 \\leq M \\leq 50$) is the number of different days on which the Regulator visits. The following $N$ lines of input each have a single integer $c_ i$($1 \\leq c_ i \\leq C$), representing the number of cows on the $i$th of the $N$ farms on Day\u00a0$0$. The final $M$ lines each have a single integer $d_ j$ ($0 \\leq d_ j \\leq 50$), representing a day when the Regulator visits. All $d_ j$ are distinct. -----Output----- For each $d_ j$, output one line with a single integer: the number of farms the Regulator will inspect on Day\u00a0$d_ j$. -----Examples----- Sample Input: 1 5 5 1 1 1 1 1 0 1 2 3 4 Sample Output: 5 10 20 40 80\n\"\"\"\ndef code():",
    "5": "Python 3\n\"\"\"\nBaxter Scott owns The Enlightened Dairy Co., a dairy company with magical cows. Early each morning, he brushes his teeth, strolls outside, and finds that the cows have doubled in number. With double the number of cows, he can produce double the quantity of milk. While he is ecstatic that he has so many cows and so much milk, the Dairy Regulator forces him to keep at most $C$ cows on any given farm, which greatly complicates his business.\n\nAt The Enlightened Dairy Co., Baxter has access to an unlimited number of farms, each with a maximum capacity of $C$ cows. On each farm, cows reproduce at the same rate: they always double in number when the clock strikes midnight. To stay within the Regulator\u2019s rules, whenever a farm has strictly more than $C$ cows, Baxter selects half of the cows on that farm and moves them to an entirely new, empty farm. More precisely, if there are $D \\leq C$ cows on a farm, he leaves all $D$ cows on the farm, but if there are $D > C$ cows on a farm, he leaves $\\left\\lceil \\frac{D}{2} \\right\\rceil $ cows on the farm and takes $\\left\\lfloor \\frac{D}{2} \\right\\rfloor $ cows to a new, empty farm. (Here $\\left\\lceil \\ \\right\\rceil $ and $\\left\\lfloor \\ \\right\\rfloor $ denote the ceiling and floor functions, which round up/down to the nearest integer, respectively.) He does this early every morning, before the Regulator could possibly show up, so that he can avoid paying hefty Moo Fees.\n\nThe Regulator needs to know how many farms she will be inspecting when she visits The Enlightened Dairy Co. The Regulator inspects every farm that has at least one cow, and does not inspect any farm with zero cows. Given the number of cows on each farm with at least one cow on Day\u00a0$0$, compute the number of farms that need inspecting on any given day.\n\n-----Input-----\nThe first line of input contains three space-separated integers, $C$, $N$, and $M$, where $C$ ($1 \\leq C \\leq 1000$) is the maximum number of cows allowed on a farm, $N$ ($0 \\leq N \\leq 1000$) is the number of farms with at least one cow on Day\u00a0$0$, and $M$ ($1 \\leq M \\leq 50$) is the number of different days on which the Regulator visits. The following $N$ lines of input each have a single integer $c_ i$($1 \\leq c_ i \\leq C$), representing the number of cows on the $i$th of the $N$ farms on Day\u00a0$0$. The final $M$ lines each have a single integer $d_ j$ ($0 \\leq d_ j \\leq 50$), representing a day when the Regulator visits. All $d_ j$ are distinct.\n\n-----Output-----\nFor each $d_ j$, output one line with a single integer: the number of farms the Regulator will inspect on Day\u00a0$d_ j$.\n\n-----Examples-----\nSample Input:\n1 5 5\n1\n1\n1\n1\n1\n0\n1\n2\n3\n4\nSample Output:\n5\n10\n20\n40\n80\n\"\"\"\ndef code():",
    "6": "Python 3\n\"\"\"\n You have a map of a railway network. You need to find the minimum time it takes to travel from one junction to another, ensuring that you travel via exactly $k_1$ red tracks, exactly $k_2$ blue tracks, and any number of white tracks, in any order.\n-----Input----- The first line contains four space-separated integers: $N$, ($1 \\leq N \\leq 450$); $M$, ($1 \\leq M \\leq 1100$); $k_1$; and $k_2$, ($0 \\leq k_1, k_2 \\leq 800$, $k_1 \\cdot k_2 \\leq 800$). Following are $M$ lines. Each line contains four space-separated integers: $U~ V~ X~ C$, denoting that a track exists between junction $U$ and junction $V$, ($1 \\leq U, V \\leq N$, $U \\neq V$); the train covers this track in $X$ seconds, ($0 \\leq X \\leq 10^9$); and the track is labelled colour $C$, ($0 \\leq C \\leq 2$). A white track is denoted by $C=0$, a red track is denoted by $C=1$, and a blue track is denoted by $C=2$. The last line contains two space-separated integers $S$, ($1 \\leq S \\leq N$), and $T$, ($1 \\leq T \\leq N$), the source and destination of Tima\u2019s journey, respectively. Note: $S$ may be equal to $T$. -----Output----- Print a single integer denoting the total time Tima would take. If it is not possible for Tima to reach her destination using exactly $k_1$ red tracks, $k_2$ blue tracks, and any number of white tracks, output -1. -----Examples----- Sample Input: 4 4 1 1 1 2 1 2 1 3 1 0 2 4 1 1 3 4 1 0 1 4 Sample Output: 2\n\"\"\"\ndef code():",
    "7": "Python 3\n\"\"\"\nThe city of Xentopia has a well-connected railway network. The city has $N$ junctions numbered from $1$ to $N$. There are $M$ pairs of railway tracks that exist between the junctions. Trains can travel in both directions on each track. Each railway track is labelled either red, blue, or white in colour.\n\nTima, a tourist in the city, wants to travel from junction $S$ to junction $T$ in the minimum possible time. She has a map of the railway network that she can use to achieve this goal.\n\nTima, being rather eccentric, has an interesting constraint for her travel: She wants to travel via exactly $k_1$ red tracks, exactly $k_2$ blue tracks, and any number of white tracks, in any order. She is fine with using a railway track more than once.\n\nCan you tell the minimum time Tima will take to go from $S$ to $T$, ensuring that her constraint is not violated?\n\n-----Input-----\nThe first line contains four space-separated integers: $N$, ($1 \\leq N \\leq 450$); $M$, ($1 \\leq M \\leq 1100$); $k_1$; and $k_2$, ($0 \\leq k_1, k_2 \\leq 800$, $k_1 \\cdot k_2 \\leq 800$). Following are $M$ lines. Each line contains four space-separated integers: $U~ V~ X~ C$, denoting that a track exists between junction $U$ and junction $V$, ($1 \\leq U, V \\leq N$, $U \\neq V$); the train covers this track in $X$ seconds, ($0 \\leq X \\leq 10^9$); and the track is labelled colour $C$, ($0 \\leq C \\leq 2$). A white track is denoted by $C=0$, a red track is denoted by $C=1$, and a blue track is denoted by $C=2$.\n\nThe last line contains two space-separated integers $S$, ($1 \\leq S \\leq N$), and $T$, ($1 \\leq T \\leq N$), the source and destination of Tima\u2019s journey, respectively. Note: $S$ may be equal to $T$.\n\n-----Output-----\nPrint a single integer denoting the total time Tima would take. If it is not possible for Tima to reach her destination using exactly $k_1$ red tracks, $k_2$ blue tracks, and any number of white tracks, output -1.\n\n-----Examples-----\nSample Input:\n4 4 1 1\n1 2 1 2\n1 3 1 0\n2 4 1 1\n3 4 1 0\n1 4\nSample Output:\n2\n\"\"\"\ndef code():",
    "8": "Python 3\n\"\"\"\n Ms. Thomas is managing her class of $n$ students. She placed all her students in a line, and gave the $i$-th student from the left a card with the letter $a_ i$ written on it. She would now like to rearrange the students so that the $i$-th student from the left has a card with the letter $b_ i$ written on it. To do this, she will choose some consecutive group of students, and reverse their order. Students will hold on to their original cards during this process. She s now wondering, what is the number of valid ways to do this (It may be impossible, in which case, the answer is zero). With sequences $abba$ and $aabb$, Ms. Thomas can choose the group $a(bba)$. With sequences $caxcab$ and $cacxab$, Ms. Thomas can choose $ca(xc)ab$ or $c(axca)b$. With sequences $a$ and $z$, there are clearly no solutions. \n-----Input----- The input is two lines of lowercase letters, $A$ and $B$. The $i$-th character of $A$ and $B$ represent $a_ i$ and $b_ i$ respectively. It is guaranteed that $A$ and $B$ have the same positive length, and $A$ and $B$ are not identical. The common length is allowed to be as large as $100000$. -----Output----- For each test case, output a single integer, the number of ways Ms. Thomas can reverse some consecutive group of $A$ to form the line specified by string $B$. -----Examples----- Sample Input 1: abba aabb Sample Output 1: 1 Sample Input 2: caxcab cacxab Sample Output 2: 2\n\"\"\"\ndef code():",
    "9": "Python 3\n\"\"\"\nMs. Thomas is managing her class of $n$ students.\n\nShe placed all her students in a line, and gave the $i$-th student from the left a card with the letter $a_ i$ written on it.\n\nShe would now like to rearrange the students so that the $i$-th student from the left has a card with the letter $b_ i$ written on it.\n\nTo do this, she will choose some consecutive group of students, and reverse their order. Students will hold on to their original cards during this process.\n\nShe\u2019s now wondering, what is the number of valid ways to do this? (It may be impossible, in which case, the answer is zero).\n\nWith sequences $abba$ and $aabb$, Ms. Thomas can choose the group $a(bba)$. With sequences $caxcab$ and $cacxab$, Ms. Thomas can choose $ca(xc)ab$ or $c(axca)b$. With sequences $a$ and $z$, there are clearly no solutions.\n\n-----Input-----\nThe input is two lines of lowercase letters, $A$ and $B$. The $i$-th character of $A$ and $B$ represent $a_ i$ and $b_ i$ respectively. It is guaranteed that $A$ and $B$ have the same positive length, and $A$ and $B$ are not identical. The common length is allowed to be as large as $100000$.\n\n-----Output-----\nFor each test case, output a single integer, the number of ways Ms. Thomas can reverse some consecutive group of $A$ to form the line specified by string $B$.\n\n-----Examples-----\nSample Input 1:\nabba\naabb\nSample Output 1:\n1\n\nSample Input 2:\ncaxcab\ncacxab\nSample Output 2:\n2\n\"\"\"\ndef code():",
    "10": "Python 3\n\"\"\"\n You are given an array of numbers. Make sets of 3 numbers. Each should have numbers in ascending or descending order Return the number of such sets that can be formed. a number can be in multiple sets   \n-----Input----- The first line contains an integer $n$ ($3 \\le n \\le 60$), denoting the number of boxes. The second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 60$), where $a_i$ is the label of the $i$-th box. -----Output----- Print the number of distinct piles having the maximum number of boxes that ROBO_Head can have, modulo $10^9 + 7$. -----Examples----- Input 3 2 6 8 Output 2 Input 5 2 3 4 9 12 Output 4 Input 4 5 7 2 9 Output 1 -----Note----- Let's illustrate the box pile as a sequence $b$, with the pile's bottommost box being at the leftmost position. In the first example, there are $2$ distinct piles possible:   $b = [6]$ ($[2, \\mathbf{6}, 8] \\xrightarrow{(1, 3, 2)} [2, 8]$)  $b = [8]$ ($[2, 6, \\mathbf{8}] \\xrightarrow{(1, 2, 3)} [2, 6]$)  In the second example, there are $4$ distinct piles possible:   $b = [9, 12]$ ($[2, 3, 4, \\mathbf{9}, 12] \\xrightarrow{(2, 5, 4)} [2, 3, 4, \\mathbf{12}] \\xrightarrow{(1, 3, 4)} [2, 3, 4]$)  $b = [4, 12]$ ($[2, 3, \\mathbf{4}, 9, 12] \\xrightarrow{(1, 5, 3)} [2, 3, 9, \\mathbf{12}] \\xrightarrow{(2, 3, 4)} [2, 3, 9]$)  $b = [4, 9]$ ($[2, 3, \\mathbf{4}, 9, 12] \\xrightarrow{(1, 5, 3)} [2, 3, \\mathbf{9}, 12] \\xrightarrow{(2, 4, 3)} [2, 3, 12]$)  $b = [9, 4]$ ($[2, 3, 4, \\mathbf{9}, 12] \\xrightarrow{(2, 5, 4)} [2, 3, \\mathbf{4}, 12] \\xrightarrow{(1, 4, 3)} [2, 3, 12]$)  In the third sequence, ROBO can do nothing at all. Therefore, there is only $1$ valid pile, and that pile is empty.\n\"\"\"\ndef code():",
    "11": "Python 3\n\"\"\"\nSIHanatsuka - EMber SIHanatsuka - ATONEMENT\n\nBack in time, the seven-year-old Nora used to play lots of games with her creation ROBO_Head-02, both to have fun and enhance his abilities.\n\nOne day, Nora's adoptive father, Phoenix Wyle, brought Nora $n$ boxes of toys. Before unpacking, Nora decided to make a fun game for ROBO.\n\nShe labelled all $n$ boxes with $n$ distinct integers $a_1, a_2, \\ldots, a_n$ and asked ROBO to do the following action several (possibly zero) times:\n\n  Pick three distinct indices $i$, $j$ and $k$, such that $a_i \\mid a_j$ and $a_i \\mid a_k$. In other words, $a_i$ divides both $a_j$ and $a_k$, that is $a_j \\bmod a_i = 0$, $a_k \\bmod a_i = 0$.  After choosing, Nora will give the $k$-th box to ROBO, and he will place it on top of the box pile at his side. Initially, the pile is empty.  After doing so, the box $k$ becomes unavailable for any further actions. \n\nBeing amused after nine different tries of the game, Nora asked ROBO to calculate the number of possible different piles having the largest amount of boxes in them. Two piles are considered different if there exists a position where those two piles have different boxes.\n\nSince ROBO was still in his infant stages, and Nora was still too young to concentrate for a long time, both fell asleep before finding the final answer. Can you help them?\n\nAs the number of such piles can be very large, you should print the answer modulo $10^9 + 7$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 60$), denoting the number of boxes.\n\nThe second line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 60$), where $a_i$ is the label of the $i$-th box.\n\n\n-----Output-----\n\nPrint the number of distinct piles having the maximum number of boxes that ROBO_Head can have, modulo $10^9 + 7$.\n\n\n-----Examples-----\nInput\n3\n2 6 8\n\nOutput\n2\n\nInput\n5\n2 3 4 9 12\n\nOutput\n4\n\nInput\n4\n5 7 2 9\n\nOutput\n1\n\n\n\n-----Note-----\n\nLet's illustrate the box pile as a sequence $b$, with the pile's bottommost box being at the leftmost position.\n\nIn the first example, there are $2$ distinct piles possible:   $b = [6]$ ($[2, \\mathbf{6}, 8] \\xrightarrow{(1, 3, 2)} [2, 8]$)  $b = [8]$ ($[2, 6, \\mathbf{8}] \\xrightarrow{(1, 2, 3)} [2, 6]$) \n\nIn the second example, there are $4$ distinct piles possible:   $b = [9, 12]$ ($[2, 3, 4, \\mathbf{9}, 12] \\xrightarrow{(2, 5, 4)} [2, 3, 4, \\mathbf{12}] \\xrightarrow{(1, 3, 4)} [2, 3, 4]$)  $b = [4, 12]$ ($[2, 3, \\mathbf{4}, 9, 12] \\xrightarrow{(1, 5, 3)} [2, 3, 9, \\mathbf{12}] \\xrightarrow{(2, 3, 4)} [2, 3, 9]$)  $b = [4, 9]$ ($[2, 3, \\mathbf{4}, 9, 12] \\xrightarrow{(1, 5, 3)} [2, 3, \\mathbf{9}, 12] \\xrightarrow{(2, 4, 3)} [2, 3, 12]$)  $b = [9, 4]$ ($[2, 3, 4, \\mathbf{9}, 12] \\xrightarrow{(2, 5, 4)} [2, 3, \\mathbf{4}, 12] \\xrightarrow{(1, 4, 3)} [2, 3, 12]$) \n\nIn the third sequence, ROBO can do nothing at all. Therefore, there is only $1$ valid pile, and that pile is empty.\n\"\"\"\ndef code():",
    "12": "Python 3\n\"\"\"\n You are given a description of the situation during a paintball game when every player has only one bullet. The description of the game consists of pairs of players who can see each other. If a player can see another player, he can fire at him. Your task is to find a target for each player such that everyone will be hit. \n-----Input----- The first line of input contains two space separated integers $N$ and $M$, satisfying $2\\leq N\\leq 1000$ and $0\\leq M\\leq 5000$, where $N$ is the number of players. Players are numbered $1, 2, \\ldots , N$. $M$ lines follow, each line containing two space separated integers $A$ and $B$ ($1\\leq A < B\\leq N$), denoting that players $A$ and $B$ can see each other. Each pair of players appears at most once in the input. -----Output----- If there is no assignment of targets such that everyone will be hit, output Impossible. Otherwise output $N$ lines. The $i$-th line should contain the number of the target of the $i$-th player. If there is more than one solution, output any one. -----Examples----- Sample Input: 3 3 1 2 2 3 1 3 Sample Output: 2 3 1\n\"\"\"\ndef code():",
    "13": "Python 3\n\"\"\"\nMarek and his schoolmates have just finished their studies at the university. They wanted to celebrate it with a game of paintball. After an hour of playing a very strange thing happened \u2013 everyone had exactly one bullet left. Marek, being a very curious person, wanted to know whether it\u2019s possible that everyone will be hit exactly once provided nobody moves.\n\n-----Task-----\nYou are given a description of the situation during a paintball game when every player has only one bullet. The description of the game consists of pairs of players who can see each other. If a player can see another player, he can fire at him. Your task is to find a target for each player such that everyone will be hit.\n\n-----Input-----\nThe first line of input contains two space separated integers $N$ and $M$, satisfying $2\\leq N\\leq 1000$ and $0\\leq M\\leq 5000$, where $N$ is the number of players. Players are numbered $1, 2, \\ldots , N$. $M$ lines follow, each line containing two space separated integers $A$ and $B$ ($1\\leq A < B\\leq N$), denoting that players $A$ and $B$ can see each other. Each pair of players appears at most once in the input.\n\n-----Output-----\nIf there is no assignment of targets such that everyone will be hit, output Impossible. Otherwise output $N$ lines. The $i$-th line should contain the number of the target of the $i$-th player. If there is more than one solution, output any one.\n\n-----Examples-----\nSample Input:\n3 3\n1 2\n2 3\n1 3\nSample Output:\n2\n3\n1\n\"\"\"\ndef code():",
    "14": "Python 3\n\"\"\"\n You have just bought a new house, and it has a huge, beautiful lawn. A lawn that needs cutting. Several times. Every week. The whole summer.  After pushing the lawnmower around the lawn during the hottest Saturday afternoon in history, you decided that there must be a better way. And then you saw the ads for the new robotic lawnmovers. But which one should you buy  They all have different cutting speeds, cutting times and recharge times, not to mention different prices! According to the advertisement, a robotic lawnmover will spend all its time either cutting the lawn or recharging its battery. Starting from a full battery, it will cut the lawn at a given rate of $c$ square meters per minute for a cutting time of $t$ minutes, after which it has run out of battery. Once out of battery, it will immediately start recharging. After recharging for $r$ minutes the battery is full again and it immediately starts cutting. You decide that in order for your lawn to look sufficiently prim and proper, the lawnmower that you buy must be powerful enough to cut your whole lawn at least once a week on average. Formally, if we start the mower fully charged at the beginning of the week and run it for exactly $T$ weeks, it needs to cut the whole lawn at least $T$ times, for all positive integers $T$. But apart from this, you have no specific requirements, so among the ones that satisfy this requirement, you will simply go for the cheapest option. For the purposes of cutting your lawn, you may make the simplifying assumption that a week is always exactly $10080$ minutes long. \n-----Input----- The first line of input contains two integers $\\ell $ and $m$ ($1 \\le \\ell \\le 10^6$, $1 \\le m \\le 100$), the size of your lawn in square meters, and the number of lawnmowers to consider, respectively. Then follow $m$ lines, each containing a string $n$ and $4$ integers $p$, $c$, $t$, and $r$, separated by commas, describing a lawnmower as follows:  - $n$ is the name of the lawnmower, a string of at most $60$ printable characters (ASCII $32$ to $126$) excluding \u2018,\u2019, neither starting nor ending with a space,  - $1 \\leq p \\leq 100000$ is the price of the lawnmover,  - $1 \\leq c \\leq 100$ is the cutting rate in square meters per minute,  - $1 \\leq t \\leq 10080$ is the cutting time in minutes, and  - $1 \\leq r \\leq 10080$ is the recharge time in minutes. -----Output----- Output the name of the cheapest lawnmower capable of cutting your whole yard at least once a week on average. If several lawnmovers share the same lowest price, output all of their names, in the same order they were given in the input. If there is no such mower, output \u201cno such mower\u201d. -----Examples----- Sample Input: 7000 4 Grass Slayer 2000,9999,10,120,120 Slow-Mowe,999,1,120,240 Eco-cut X2,5499,2,25,35 Mowepower,5499,3,25,35 Sample Output: Eco-cut X2 Mowepower\n\"\"\"\ndef code():",
    "15": "Python 3\n\"\"\"\nYou have just bought a new house, and it has a huge, beautiful lawn. A lawn that needs cutting. Several times. Every week. The whole summer. \n\nAfter pushing the lawnmower around the lawn during the hottest Saturday afternoon in history, you decided that there must be a better way. And then you saw the ads for the new robotic lawnmovers. But which one should you buy? They all have different cutting speeds, cutting times and recharge times, not to mention different prices!\n\nAccording to the advertisement, a robotic lawnmover will spend all its time either cutting the lawn or recharging its battery. Starting from a full battery, it will cut the lawn at a given rate of $c$ square meters per minute for a cutting time of $t$ minutes, after which it has run out of battery. Once out of battery, it will immediately start recharging. After recharging for $r$ minutes the battery is full again and it immediately starts cutting.\n\nYou decide that in order for your lawn to look sufficiently prim and proper, the lawnmower that you buy must be powerful enough to cut your whole lawn at least once a week on average. Formally, if we start the mower fully charged at the beginning of the week and run it for exactly $T$ weeks, it needs to cut the whole lawn at least $T$ times, for all positive integers $T$. But apart from this, you have no specific requirements, so among the ones that satisfy this requirement, you will simply go for the cheapest option. For the purposes of cutting your lawn, you may make the simplifying assumption that a week is always exactly $10080$ minutes long.\n\n-----Input-----\nThe first line of input contains two integers $\\ell $ and $m$ ($1 \\le \\ell \\le 10^6$, $1 \\le m \\le 100$), the size of your lawn in square meters, and the number of lawnmowers to consider, respectively.\n\nThen follow $m$ lines, each containing a string $n$ and $4$ integers $p$, $c$, $t$, and $r$, separated by commas, describing a lawnmower as follows:\n - $n$ is the name of the lawnmower, a string of at most $60$ printable characters (ASCII $32$ to $126$) excluding \u2018,\u2019, neither starting nor ending with a space,\n - $1 \\leq p \\leq 100000$ is the price of the lawnmover,\n - $1 \\leq c \\leq 100$ is the cutting rate in square meters per minute,\n - $1 \\leq t \\leq 10080$ is the cutting time in minutes, and\n - $1 \\leq r \\leq 10080$ is the recharge time in minutes.\n\n-----Output-----\nOutput the name of the cheapest lawnmower capable of cutting your whole yard at least once a week on average. If several lawnmovers share the same lowest price, output all of their names, in the same order they were given in the input. If there is no such mower, output \u201cno such mower\u201d.\n\n-----Examples-----\nSample Input:\n7000 4\nGrass Slayer 2000,9999,10,120,120\nSlow-Mowe,999,1,120,240\nEco-cut X2,5499,2,25,35\nMowepower,5499,3,25,35\nSample Output:\nEco-cut X2\nMowepower\n\"\"\"\ndef code():",
    "16": "Python 3\n\"\"\"\n There are 2N balls, N white and N black, arranged in a row. The integers from 1 through N are written on the white balls, one on each ball, and they are also written on the black balls, one on each ball. The integer written on the i-th ball from the left (1   i   2N) is a_i, and the color of this ball is represented by a letter c_i. c_i = W represents the ball is white; c_i = B represents the ball is black. Takahashi the human wants to achieve the following objective:  - For every pair of integers (i,j) such that 1   i < j   N, the white ball with i written on it is to the left of the white ball with j written on it.  - For every pair of integers (i,j) such that 1   i < j   N, the black ball with i written on it is to the left of the black ball with j written on it. In order to achieve this, he can perform the following operation:  - Swap two adjacent balls. Find the minimum number of operations required to achieve the objective. \n-----Input----- Input is given from Standard Input in the following format: N c_1 a_1 c_2 a_2 : c_{2N} a_{2N} -----Output----- Print the minimum number of operations required to achieve the objective. -----Sample Input----- 3 B 1 W 2 B 3 W 1 W 3 B 2 -----Sample Output----- 4 The objective can be achieved in four operations, for example, as follows:  - Swap the black 3 and white 1.  - Swap the white 1 and white 2.  - Swap the black 3 and white 3.  - Swap the black 3 and black 2.\n\"\"\"\ndef code():",
    "17": "Python 3\n\"\"\"\nThere are 2N balls, N white and N black, arranged in a row. The integers from 1 through N are written on the white balls, one on each ball, and they are also written on the black balls, one on each ball.\nThe integer written on the i-th ball from the left (1 \u2264 i \u2264 2N) is a_i, and the color of this ball is represented by a letter c_i.\nc_i = W represents the ball is white; c_i = B represents the ball is black.\nTakahashi the human wants to achieve the following objective:\n - For every pair of integers (i,j) such that 1 \u2264 i < j \u2264 N, the white ball with i written on it is to the left of the white ball with j written on it.\n - For every pair of integers (i,j) such that 1 \u2264 i < j \u2264 N, the black ball with i written on it is to the left of the black ball with j written on it.\nIn order to achieve this, he can perform the following operation:\n - Swap two adjacent balls.\nFind the minimum number of operations required to achieve the objective.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 2000\n - 1 \u2264 a_i \u2264 N\n - c_i = W or c_i = B.\n - If i \u2260 j, (a_i,c_i) \u2260 (a_j,c_j).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nc_1 a_1\nc_2 a_2\n:\nc_{2N} a_{2N}\n\n-----Output-----\nPrint the minimum number of operations required to achieve the objective.\n\n-----Sample Input-----\n3\nB 1\nW 2\nB 3\nW 1\nW 3\nB 2\n\n-----Sample Output-----\n4\n\nThe objective can be achieved in four operations, for example, as follows:\n - Swap the black 3 and white 1.\n - Swap the white 1 and white 2.\n - Swap the black 3 and white 3.\n - Swap the black 3 and black 2.\n\"\"\"\ndef code():",
    "18": "Python 3\n\"\"\"\n Fox Ciel has n boxes in her room. They have the same size and weight, but they might have different strength. The i-th box can hold at most x_{i} boxes on its top (we'll call x_{i} the strength of the box). Since all the boxes have the same size, Ciel cannot put more than one box directly on the top of some box. For example, imagine Ciel has three boxes: the first has strength 2, the second has strength 1 and the third has strength 1. She cannot put the second and the third box simultaneously directly on the top of the first one. But she can put the second box directly on the top of the first one, and then the third box directly on the top of the second one. We will call such a construction of boxes a pile.[Image] Fox Ciel wants to construct piles from all the boxes. Each pile will contain some boxes from top to bottom, and there cannot be more than x_{i} boxes on the top of i-th box. What is the minimal number of piles she needs to construct?\n-----Input----- The first line contains an integer n (1 \u2264 n \u2264 100). The next line contains n integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} \u2264 100). -----Output----- Output a single integer \u2014 the minimal possible number of piles. -----Examples----- Input 3 0 0 10 Output 2 Input 5 0 1 2 3 4 Output 1 Input 4 0 0 0 0 Output 4 Input 9 0 1 0 2 0 1 1 2 10 Output 3 -----Note----- In example 1, one optimal way is to build 2 piles: the first pile contains boxes 1 and 3 (from top to bottom), the second pile contains only box 2.[Image] In example 2, we can build only 1 pile that contains boxes 1, 2, 3, 4, 5 (from top to bottom).[Image]\n\"\"\"\ndef code():",
    "19": "Python 3\n\"\"\"\nFox Ciel has n boxes in her room. They have the same size and weight, but they might have different strength. The i-th box can hold at most x_{i} boxes on its top (we'll call x_{i} the strength of the box). \n\nSince all the boxes have the same size, Ciel cannot put more than one box directly on the top of some box. For example, imagine Ciel has three boxes: the first has strength 2, the second has strength 1 and the third has strength 1. She cannot put the second and the third box simultaneously directly on the top of the first one. But she can put the second box directly on the top of the first one, and then the third box directly on the top of the second one. We will call such a construction of boxes a pile.[Image]\n\nFox Ciel wants to construct piles from all the boxes. Each pile will contain some boxes from top to bottom, and there cannot be more than x_{i} boxes on the top of i-th box. What is the minimal number of piles she needs to construct?\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100). The next line contains n integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} \u2264 100).\n\n\n-----Output-----\n\nOutput a single integer \u2014 the minimal possible number of piles.\n\n\n-----Examples-----\nInput\n3\n0 0 10\n\nOutput\n2\n\nInput\n5\n0 1 2 3 4\n\nOutput\n1\n\nInput\n4\n0 0 0 0\n\nOutput\n4\n\nInput\n9\n0 1 0 2 0 1 1 2 10\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn example 1, one optimal way is to build 2 piles: the first pile contains boxes 1 and 3 (from top to bottom), the second pile contains only box 2.[Image]\n\nIn example 2, we can build only 1 pile that contains boxes 1, 2, 3, 4, 5 (from top to bottom).[Image]\n\"\"\"\ndef code():"
}