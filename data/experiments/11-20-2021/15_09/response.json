{
    "id": "cmpl-46Sq7dZDO3qE5LHkUVDCvPmhFahlG",
    "object": "text_completion",
    "created": 1637446175,
    "model": "davinci-codex:2021-08-03",
    "choices": [
        {
            "text": "\n    n, m, a, b = map(int, input().split())\n    adj = [[] for i in range(n)]\n    for i in range(m):\n        u, v, c = map(int, input().split())\n        adj[u-1].append((v-1, c))\n        adj[v-1].append((u-1, c))\n    min_cost = [float('inf')]*n\n    min_cost[0] = 0\n    queue = [0]\n    while queue:\n        u = queue.pop(0)\n        for v, c in adj[u]:\n            if min_cost[v] > min_cost[u] + c:\n                min_cost[v] = min_cost[u] + c\n                queue.append(v)\n    for i in range(1, n):\n        print(min_cost[i] if min_cost[i] <= b else -1, end=' ')\n\nif __name__ == '__main__':\n    code()",
            "index": 0,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n, m, a, b = map(int, input().split())\n    roads = []\n    for i in range(m):\n        roads.append(list(map(int, input().split())))\n    p = int(input())\n    ans = [0] * p\n    for i in range(p):\n        ans[i] = float('inf')\n        for j in range(m):\n            if roads[j][2] == a:\n                if roads[j][0] == i + 1:\n                    ans[i] = min(ans[i], roads[j][1] - 1)\n                elif roads[j][1] == i + 1:\n                    ans[i] = min(ans[i], roads[j][0] - 1)\n            elif roads[j][2] == b:\n                if roads[j][0] == i + 1:\n                    ans[i] = min(ans[i], roads[j][1])\n                elif roads[j][1] == i + 1:\n                    ans[i] = min(ans[i], roads[j][0])\n    print(*ans)\n\ncode()",
            "index": 1,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    k = int(input())\n    print(s[k:] + s[:k])\n    \ncode()",
            "index": 2,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    s = input()\n    l = len(s)\n    dp = [[0] * l for i in range(l)]\n    for i in range(l):\n        dp[i][i] = 1\n    for i in range(l - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 1\n    for k in range(2, l):\n        for i in range(l - k):\n            if s[i] == s[i + k]:\n                dp[i][i + k] = dp[i + 1][i + k - 1]\n    ans = 0\n    for i in range(l):\n        for j in range(i, l):\n            ans += dp[i][j]\n    print(ans / (l * (l - 1) / 2))\n\ncode()",
            "index": 3,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = input().split()\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(s[i])\n        elif s[i] == ')':\n            stack.pop()\n        else:\n            stack.append(int(s[i]))\n    print(sum(stack)%1000000007)\n\ncode()",
            "index": 4,
            "logprobs": null,
            "finish_reason": "stop"
        },
        {
            "text": "\n    n = int(input())\n    s = input().split()\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            temp = []\n            while stack[-1] != '(':\n                temp.append(stack.pop())\n            stack.pop()\n            stack.append(temp)\n        else:\n            stack.append(int(i))\n    while len(stack) > 1:\n        temp = []\n        while type(stack[-1]) != list:\n            temp.append(stack.pop())\n        stack.pop()\n        stack.append(temp)\n    return stack[0][0]\n\nprint(code())",
            "index": 5,
            "logprobs": null,
            "finish_reason": "stop"
        }
    ]
}