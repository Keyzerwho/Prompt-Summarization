You are given $n$ different binary words.

You want to order the words such that the first character of a word matches the last character of the previous word.

If you cannot put the words in that order then you can reverse some words so that: the final set of $n$ words 
still contains different words; there is a way to put all words in the order specified.


-----Input-----

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the
number of test cases in the input. Then $t$ test cases follow.

The first line of a test case contains one integer $n$ ($1 \le n \le
2\cdot10^5$) — the number of words in the list. Next $n$ lines contain these
words. The sum of word lengths doesn't exceed $4\cdot10^6$. All words are different.


-----Output-----

Print answer for all of $t$ test cases in the order they appear.

If there is no answer for the test case, print -1. Otherwise, the first line of
the output should contain $k$ ($0 \le k \le n$) — the minimal number of words
in the set which should be reversed. The second line of the output should
contain $k$ distinct integers — the indexes of the words in the set which
should be reversed. Words are numerated from $1$ to $n$ in the order they
appear. If $k=0$ you can skip this line (or you can print an empty line). If
there are many answers you can print any of them.


-----Example-----
Input
4
4
0001
1000
0011
0111
3
010
101
0
2
00000
00001
4
01
001
0001
00001

Output
1
3 
-1
0

2
1 2
