```if:python Create a function `args_count`, that returns the count of passed arguments ``` ```if:kotlin Create a function `argsCount`, that returns the count of passed arguments ``` ```if:ruby Create a method `args_count`, that returns the count of passed arguments ``` ```if:julia Create a method `argscount`, that returns the count of passed arguments ``` ```python args_count(1, 2, 3) -> 3 args_count(1, 2, 3, 10) -> 4 ``
tl;dr: ```if:python Create a function `args_count`, that returns the count of passed arguments ``` ```if:kotlin Create a function `argsCount`, that returns the count of passed arguments ``` ```if:ruby Create a method `args_count`, that returns the count of passed arguments ``` ```if:julia Create a method `argscount`, that returns the count of passed arguments ``` ```python args_count(1, 2, 3) -> 3 args_count(1, 2, 3, 10) -> 4 ``

# A History Lesson Soundex is an interesting phonetic algorithm developed nearly 100 years ago for indexing names as they are pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling. Reference: https://en.wikipedia.org/wiki/Soundex # Preface I first read about Soundex over 30 years ago. At the time it seemed to me almost  like  A.I. that you could just type in somebody's name the way it sounded and there was still a pretty good chance it could match the correct person record. That was about the same year as the first "Terminator" movie so it was easy for me to put 2 and 2 together and conclude that Arnie must have had some kind of futuristic Soundex chip in his titanium skull helping him to locate ```Serah Coner```... or was it ```Sarh Connor```... or maybe ```Sayra Cunnarr```... :-) # Task In this Kata you will encode strings using a Soundex variation called "American Soundex" using the following (case insensitive) steps: * Save the first letter. Remove all occurrences of ```h``` and ```w``` except first letter. * Replace all consonants (include the first letter) with digits as follows:  * ```b```, ```f```, ```p```, ```v``` = 1  * ```c```, ```g```, ```j```, ```k```, ```q```, ```s```, ```x```, ```z``` = 2  * ```d```, ```t``` = 3  * ```l``` = 4  * ```m```, ```n``` = 5  * ```r``` = 6 * Replace all adjacent same digits with one digit. * Remove all occurrences of ```a```, ```e```, ```i```, ```o```, ```u```, ```y``` except first letter. * If first symbol is a digit replace it with letter saved on step 1. * Append 3 zeros if result contains less than 3 digits. Remove all except first letter and 3 digits after it ## Input A space separated string of one or more names. E.g. ```Sarah Connor``` ## Output Space separated string of equivalent Soundex codes (the first character of each code must be uppercase). E.g. ```S600 C560``
tl;dr: # Task Given case insensitive strings, you will encode strings using a Soundex variation called "American Soundex". # Input A space separated string of one or more names. E.g. Sarah Connor # Output Space separated string of equivalent Soundex codes, the first character of each code must be uppercase. E.g. S600 C56

Mike and Ann are sitting in the classroom. The lesson is boring, so they decided to play an interesting game. Fortunately, all they need to play this game is a string $s$ and a number $k$ ($0 \le k < |s|$). At the beginning of the game, players are given a substring of $s$ with left border $l$ and right border $r$, both equal to $k$ (i.e. initially $l=r=k$). Then players start to make moves one by one, according to the following rules: A player chooses $l^{\prime}$ and $r^{\prime}$ so that $l^{\prime} \le l$, $r^{\prime} \ge r$ and $s[l^{\prime}, r^{\prime}]$ is lexicographically less than $s[l, r]$. Then the player changes $l$ and $r$ in this way: $l := l^{\prime}$, $r := r^{\prime}$. Ann moves first. The player, that can't make a move loses. Recall that a substring $s[l, r]$ ($l \le r$) of a string $s$ is a continuous segment of letters from s that starts at position $l$ and ends at position $r$. For example, "ehn" is a substring ($s[3, 5]$) of "aaaehnsvz" and "ahz" is not. Mike and Ann were playing so enthusiastically that they did not notice the teacher approached them. Surprisingly, the teacher didn't scold them, instead of that he said, that he can figure out the winner of the game before it starts, even if he knows only $s$ and $k$. Unfortunately, Mike and Ann are not so keen in the game theory, so they ask you to write a program, that takes $s$ and determines the winner for all possible $k$. 
tl;dr: