Consider a sequence [a_1, a_2, ... , a_{n}]. Define its prefix product sequence $[ a_{1} \operatorname{mod} n,(a_{1} a_{2}) \operatorname{mod} n, \cdots,(a_{1} a_{2} \cdots a_{n}) \operatorname{mod} n ]$. Now given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1]. 
tl;dr: Consider a sequence [a_1, a_2, ... , a_{n}].  Let's define its prefix product sequence as $[ a_{1} \operatorname{mod} n,(a_{1} a_{2}) \operatorname{mod} n, \cdots,(a_{1} a_{2} \cdots a_{n}) \operatorname{mod} n ]$. Now given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1]. 

# Task Your task is to write a function for calculating the score of a 10 pin bowling game. The input for the function is a list of pins knocked down per roll for one player. Output is the player's total score. # Rules ## General rules Rules of bowling in a nutshell: * A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls. * The total score is the sum of your scores for the 10 frames * If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down * If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball * If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls ## Rules for 10th frame As the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that: * if the last frame is a spare, player rolls 1 bonus ball. * if the last frame is a strike, player rolls 2 bonus balls. These bonus balls on 10th frame are only counted as a bonus to the respective spare or strike. # More information http://en.wikipedia.org/wiki/Ten-pin_bowling#Scoring # Input You may assume that the input is always valid. This means: * input list length is correct * number of pins knocked out per roll is vali
tl;dr: # Task Given a list of pins knocked down per roll for one player, output the player's total score. # Rules ## General rules Rules of bowling in a nutshell: * A game consists of 10 frames. In each frame the player rolls 1 or 2 balls, except for the 10th frame, where the player rolls 2 or 3 balls. * The total score is the sum of your scores for the 10 frames * If you knock down fewer than 10 pins with 2 balls, your frame score is the number of pins knocked down * If you knock down all 10 pins with 2 balls (spare), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next ball * If you knock down all 10 pins with 1 ball (strike), you score the amount of pins knocked down plus a bonus - amount of pins knocked down with the next 2 balls ## Rules for 10th frame As the 10th frame is the last one, in case of spare or strike there will be no next balls for the bonus. To account for that: * if the last frame is a spare, player rolls 1 bonus ball. * if the last frame is a strike, player rolls 2 bonus balls. These bonus balls on 10th frame are only counted as a bonus to the respective spare or strike

## A square of squares You like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks! However, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain  Wait! That's it! You just have to check if your number of building blocks is a _perfect square_. ## Task Given an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number): > In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself. The tests will _always_ use some integral number, so don't worry about that in dynamic typed languages. ### 
tl;dr: Given an integral number, determine if it's a square number. 

You have a set of $n$ weights. You know that their masses are $a_1$, $a_2$, ..., $a_n$ grams, but you don't know which of them has which mass. You can't distinguish the weights. However, your friend does know the mass of each weight. You can ask your friend to give you exactly $k$ weights with the total mass $m$ (both parameters $k$ and $m$ are chosen by you), and your friend will point to any valid subset of weights, if it is possible. You are allowed to make this query only once. Find the maximum possible number of weights you can reveal after this query. 
tl;dr: