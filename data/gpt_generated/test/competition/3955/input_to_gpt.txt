# Task **_Given_** a **_list of digits_**, *return the **_smallest number_** that could be formed from these digits, using the digits only once (ignore duplicates).*  ___ 
tl;dr: # Task Given a list of digits, return the smallest number that could be formed from these digits, using the digits only once (ignore duplicates). ___ 

There are n cards of different colours placed in a line, each of them can be either red, green or blue cards. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour. 
tl;dr: You are given n cards of 3 different colours placed in a line. Count the minimum number of cards to withdraw from the line so that no two adjacent cards have the same colour. 

=====Problem Statement===== A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string s, which is the company name in lowercase letters, your task is to find the top three most common characters in the string. Print the three most common characters along with their occurrence count. Sort in descending order of occurrence count. If the occurrence count is the same, sort the characters in alphabetical order. For example, according to the conditions described above, GOOGLE would have it's logo with the letters G, O, E.  
tl;dr: =====Problem Statement===== Given a string s in lowercase, your task is to find the top three most common characters in the string and their occurance count. Sort in descending order of occurrence count, and then by alphabetical order to break ties. For example, GOOGLE would output G 2 O 2 E 1 

You are given n numbers a_1, a_2, ..., a_{n}. You can perform at most k operations. For each operation you can multiply one of the numbers by x. We want to make [Image] as large as possible, where $1$ denotes the bitwise OR.  Find the maximum possible value of [Image] after performing at most k operations optimally. 
tl;dr: