 You have n rangers, each of which has his own strength. Also you have your favourite number x. Each ranger can fight with a white walker only if the strength of the white walker equals his strength. You however think that your rangers are weak and need to improve. You now think that if you take the bitwise XOR of strengths of some of rangers with your favourite number x, you might get soldiers of high strength. So, you decided to do the following operation k times:   Arrange all the rangers in a straight line in the order of increasing strengths. Take the bitwise XOR (is written as $\oplus$) of the strength of each alternate ranger with x and update it's strength. Suppose, you have 5 rangers with strengths [9, 7, 11, 15, 5] and you perform the operation 1 time with x = 2. You first arranges them in the order of their strengths, [5, 7, 9, 11, 15]. Then you do the following:   The strength of first ranger is updated to $5 \oplus 2$, i.e. 7. The strength of second ranger remains the same, i.e. 7. The strength of third ranger is updated to $9 \oplus 2$, i.e. 11. The strength of fourth ranger remains the same, i.e. 11. The strength of fifth ranger is updated to $15 \oplus 2$, i.e. 13. The new strengths of the 5 rangers are [7, 7, 11, 11, 13] Now, you wants to know the maximum and minimum strength of the rangers after performing the above operations
-----Input----- First line consists of three integers n, k, x (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^5, 0 ≤ x ≤ 10^3) — number of rangers Jon has, the number of times Jon will carry out the operation and Jon's favourite number respectively. Second line consists of n integers representing the strengths of the rangers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^3). -----Output----- Output two integers, the maximum and the minimum strength of the rangers after performing the operation k times. -----Examples----- Input 5 1 2 9 7 11 15 5 Output 13 7 Input 2 100000 569 605 986 Output 986 605