Given an integer N, Chef wants to find the smallest positive integer M such that the bitwise XOR of M and M+1 is N. If no such M exists output -1. 
tl;dr: Find the smallest positive integer M such that the bitwise XOR of M and M+1 is equal to given integer N. If no such M exists output -1. 

Make a program that filters a list of strings and returns a list with only your friends name in it. If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not... Ex: Input = ["Ryan", "Kieran", "Jason", "Yous"], Output = ["Ryan", "Yous"] i.e. 
tl;dr: Make a program that filters a list of strings and returns a list with only names with exactly 4 letters in it. Ex: Input = ["Ryan", "Kieran", "Jason", "Yous"], Output = ["Ryan", "Yous"

Chef and his friends are playing the game AMONG US. They all have chosen their names as numbers. There are N people in Chef s group including him, and each swears that he is not the imposter. However, it turns out there were N+1 people in the game. Now all that Chef needs to know is the name of the imposter, which is a number. Also remember that numbers can be duplicate. Can you help out Chef in finding the imposter  Input :  First line contains the value of N. Second line contains the N numbers that Chef s friends used as their names. Third line contains the N+1 numbers that people in the game have used as their names. Output :  Print the extra number in new line. Constraints :  1   Numbers used as names   1,000 1   N   1,000,000 Sample Input :  3 4 2 5 4 2 3 5 Sample Output :  
tl;dr: Given two unordered lists of Size N and N+1 find and return the additional element in the second list. Input :  First line contains the value of N. Second line contains list of size N. Third line contains list of size N+1. Output :  Print the extra number in new line. Constraints :  1   Elements   1,000 1   N   1,000,000 Sample Input :  3 4 2 5 4 2 3 5 Sample Output :  

Kuro and Shiro are playing with a board composed of n squares lining up in a row. The squares are numbered 1 to n from left to right, and Square s has a mark on it. First, for each square, Kuro paints it black or white with equal probability, independently from other squares. Then, he puts on Square s a stone of the same color as the square. Kuro and Shiro will play a game using this board and infinitely many black stones and white stones. In this game, Kuro and Shiro alternately put a stone as follows, with Kuro going first:  - Choose an empty square adjacent to a square with a stone on it. Let us say Square i is chosen.  - Put on Square i a stone of the same color as the square.  - If there are squares other than Square i that contain a stone of the same color as the stone just placed, among such squares, let Square j be the one nearest to Square i. Change the color of every stone between Square i and Square j to the color of Square i. The game ends when the board has no empty square. Kuro plays optimally to maximize the number of black stones at the end of the game, while Shiro plays optimally to maximize the number of white stones at the end of the game. For each of the cases s=1,\dots,n, find the expected value, modulo 998244353, of the number of black stones at the end of the game. -----Notes----- When the expected value in question is represented as an irreducible fraction p/q, there uniquely exists an integer r such that rq=p ~(\text{mod } 998244353) and 0 \leq r \lt 998244353, which we ask you to find. -----Constraints-----  - 1 \leq n \leq 2\times 10^5 
tl;dr: