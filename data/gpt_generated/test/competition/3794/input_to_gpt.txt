You're playing a game called Osu! Here's a simplified version of it. There are n clicks in a game. For each click there are two outcomes: correct or bad. Let us denote correct as "O", bad as "X", then the whole play can be encoded as a sequence of n characters "O" and "X". Using the play sequence you can calculate the score for the play as follows: for every maximal consecutive "O"s block, add the square of its length (the number of characters "O") to the score. For example, if your play can be encoded as "OOXOOOXXOO", then there's three maximal consecutive "O"s block "OO", "OOO", "OO", so your score will be 2^2 + 3^2 + 2^2 = 17. If there are no correct clicks in a play then the score for the play equals to 0. You know that the probability to click the i-th (1   i   n) click correctly is p_{i}. In other words, the i-th character in the play sequence has p_{i} probability to be "O", 1 - p_{i} to be "X". You task is to calculate the expected score for your play. 
tl;dr: There are n clicks in a game. For each click there are two outcomes: correct or bad. Let us denote correct as "O", bad as "X", then the whole play can be encoded as a sequence of n characters "O" and "X". Calculate the score for the play as follows: for every maximal consecutive "O"s block, add the square of its length to the score. If there are no correct clicks in a play then the score for the play equals to 0. You know that the probability to click the i-th (1   i   n) click correctly is p_{i}. In other words, the i-th character in the play sequence has p_{i} probability to be "O", 1 - p_{i} to be "X". You task is to calculate the expected score for your play. 

## Task Find the sum of the first `n` elements in the Recam n Sequence. Input range: ```python 1000 tests 0 <= n <= 2,500,000 ``` ___ ## Sequence The sequence is formed using the next formula: * We start with `0` * At each step `i`, we subtract `i` from the previous number * If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence * Otherwise the `i`th element of the sequence will be previous number plus `i` The beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:   0) `0` <- we start with `0`   1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`   2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`   3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`   4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it ___ ## 
tl;dr: Find the sum of the first n elements in the Recam n Sequence. 0 <= n <= 2,500,000. The Recam n sequence is formed using the next formula: * We start with `0` * At each step `i`, we subtract `i` from the previous number * If the result is not negative, and not yet present in the sequence, it becomes the `i`th element of the sequence * Otherwise the `i`th element of the sequence will be previous number plus `i` The beginning of the sequence is `[0, 1, 3, 6, 2, ...]` because:   0) `0` <- we start with `0`   1) `1` <- `0 - 1` is negative, hence we choose `0 + 1`   2) `3` <- `1 - 2` is negative, hence we choose `1 + 2`   3) `6` <-`3 - 3` is not negative, but we already have a `0` in the sequence, hence we choose `3 + 3`   4) `2` <- `6 - 4` is positive, and is not present in the sequence yet, so we go for it 

You are given an array of $n$ integers. You need to split all integers into two groups so that the GCD of all integers in the first group is equal to one and the GCD of all integers in the second group is equal to one. The GCD of a group of integers is the largest non-negative integer that divides all the integers in the group. Both groups have to be non-empty. 
tl;dr: