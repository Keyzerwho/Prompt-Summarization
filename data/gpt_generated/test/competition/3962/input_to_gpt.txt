## A square of squares You like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks! However, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain  Wait! That's it! You just have to check if your number of building blocks is a _perfect square_. ## Task Given an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number): > In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself. The tests will _always_ use some integral number, so don't worry about that in dynamic typed languages. ### 
tl;dr: Given an integral number, determine if it's a square number. 

You are given a sequence a = \{a_1, ..., a_N\} with all zeros, and a sequence b = \{b_1, ..., b_N\} consisting of 0 and 1. The length of both is N. You can perform Q kinds of operations. The i-th operation is as follows:  - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1. Minimize the hamming distance between a and b, that is, the number of i such that a_i \neq b_i, by performing some of the Q operations. -----Constraints-----  - 1 \leq N \leq 200,000  - b consists of 0 and 1.  - 1 \leq Q \leq 200,000  - 1 \leq l_i \leq r_i \leq N  - If i \neq j, either l_i \neq l_j or r_i \neq r_j. 
tl;dr: You are given a sequence a = \{a_1, ..., a_N\} with all zeros, and a sequence b = \{b_1, ..., b_N\} consisting of 0 and 1. The length of both is N. You can perform Q kinds of operations. The i-th operation is as follows:  - Replace each of a_{l_i}, a_{l_i + 1}, ..., a_{r_i} with 1. Minimize the hamming distance between a and b. -----Constraints-----  - 1 \leq N \leq 200,000  - b consists of 0 and 1.  - 1 \leq Q \leq 200,000  - 1 \leq l_i \leq r_i \leq N  - If i \neq j, either l_i \neq l_j or r_i \neq r_j. 

A transaction is possibly invalid if: the amount exceeds $1000, or; if it occurs within (and including) 60 minutes of another transaction with the same name in a different city. Each transaction string transactions[i] consists of comma separated values representing the name, time (in minutes), amount, and city of the transaction. Given a list of transactions, return a list of transactions that are possibly invalid.  You may return the answer in any order.   
tl;dr: You are given a list of strings where each string in format of "A,B,C,D". where A,D are strings and B,C are numbers. A string is possibly invalid if: the C exceeds 1000, or; if two strings have same A and different D and the difference between C is greater than or equal to 60. return list of strings which are possibley invalid in any order 

You invited $n$ guests to dinner! You plan to arrange one or more circles of chairs. Each chair is going to be either occupied by one guest, or be empty. You can make any number of circles.  Your guests happen to be a little bit shy, so the $i$-th guest wants to have a least $l_i$ free chairs to the left of his chair, and at least $r_i$ free chairs to the right. The "left" and "right" directions are chosen assuming all guests are going to be seated towards the center of the circle. Note that when a guest is the only one in his circle, the $l_i$ chairs to his left and $r_i$ chairs to his right may overlap. What is smallest total number of chairs you have to use  
tl;dr: