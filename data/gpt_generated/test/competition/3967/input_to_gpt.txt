To almost all of us solving sets of linear equations is quite obviously the most exciting bit of linear algebra.  Benny does not agree though and wants to write a quick program to solve his homework problems for him.  Unfortunately Benny's lack of interest in linear algebra means he has no real clue on how to go about this.  Fortunately, you can help him! Write a method ```solve``` that accepts a list of linear equations that your method will have to solve.  The output should be a map (a `Map` object in JavaScript) with a value for each variable in the equations.  If the system does not have a unique solution (has infinitely many solutions or is unsolvable), return ```null``` (`None` in python). 
tl;dr: The input given are lists of linear equations. You need to write a method ```solve``` that accepts the input and outputs a dictionary with a value for each variable in the equations.  If the system does not have a unique solution, return ```null```. 

You are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1   i < j   N. 
tl;dr: You are given a sequence a1, a2, ..., aN. Find the smallest possible value of ai + aj, where 1   i < j   N. 

## Task: You have to create a function `isPronic` to check whether the argument passed is a Pronic Number and return true if it is & false otherwise. ### Description: `Pronic Number` -A pronic number, oblong number, rectangular number or heteromecic number, is a number which is the product of two consecutive integers, that is, n(n + 1). > The first few Pronic Numbers are - 0, 2, 6, 12, 20, 30, 42... ### Explanation:            0 = 0   1   //    0 is a Pronic Number       2 = 1   2   //    2 is a Pronic Number       6 = 2   3   //    6 is a Pronic Number      12 = 3   4   //   12 is a Pronic Number      20 = 4   5   //   20 is a Pronic Number      30 = 5   6   //   30 is a Pronic Number      42 = 6   7   //   42 is a Pronic Numbe
tl;dr: ## Task: Create a function `isPronic` to check whether the argument is a Pronic Number. Return true if it is & false otherwise. ### Description: `Pronic Number` -A pronic number, oblong number, rectangular number or heteromecic number, is a number which is the product of two consecutive integers, that is, n(n + 1). > The first few Pronic Numbers are - 0, 2, 6, 12, 20, 30, 42... ### Explanation:            0 = 0   1   //    0 is a Pronic Number       2 = 1   2   //    2 is a Pronic Number       6 = 2   3   //    6 is a Pronic Number      12 = 3   4   //   12 is a Pronic Number      20 = 4   5   //   20 is a Pronic Number      30 = 5   6   //   30 is a Pronic Number      42 = 6   7   //   42 is a Pronic Numbe

Vladimir wants to modernize partitions in his office. To make the office more comfortable he decided to remove a partition and plant several bamboos in a row. He thinks it would be nice if there are n bamboos in a row, and the i-th from the left is a_{i} meters high.  Vladimir has just planted n bamboos in a row, each of which has height 0 meters right now, but they grow 1 meter each day. In order to make the partition nice Vladimir can cut each bamboo once at any height (no greater that the height of the bamboo), and then the bamboo will stop growing. Vladimir wants to check the bamboos each d days (i.e. d days after he planted, then after 2d days and so on), and cut the bamboos that reached the required height. Vladimir wants the total length of bamboo parts he will cut off to be no greater than k meters. What is the maximum value d he can choose so that he can achieve what he wants without cutting off more than k meters of bamboo  
tl;dr: