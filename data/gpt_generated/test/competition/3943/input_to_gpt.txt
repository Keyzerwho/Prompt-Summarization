# Task  "AL-AHLY" and "Zamalek" are the best teams in Egypt, but "AL-AHLY" always wins the matches between them. "Zamalek" managers want to know what is the best match they've played so far.    The best match is the match they lost with the minimum goal difference. If there is more than one match with the same difference, choose the one "Zamalek" scored more goals in.    Given the information about all matches they played, return the `index` of the best match (`0-based`). If more than one valid result, return the smallest index. # 
tl;dr: # Task  The best match is the match "Zamalek" lost with the minimum goal difference. If there is more than one match with the same difference, choose the one "Zamalek" scored more goals in.    Given the information about all matches "AL-AHLY" and "Zamalek" played, return the `index` of the best match (`0-based`). If more than one valid result, return the smallest index. # 

Create a function that takes a string and returns that string with the first half lowercased and the last half uppercased. eg: foobar == fooBAR If it is an odd number then 'round' it up to find which letters to uppercase. See example below.     sillycase("brian")       //         --^-- midpoint       //         bri    first half (lower-cased)       //            AN second half (upper-cased
tl;dr: Create a function that takes a string and returns that string with the first half lowercased and the last half uppercased. If it is an odd number then 'round' it up to find which letters to uppercase.  

User ainta loves to play with cards. He has a cards containing letter "o" and b cards containing letter "x". He arranges the cards in a row, and calculates the score of the deck by the formula below.  At first, the score is 0.  For each block of contiguous "o"s with length x the score increases by x^2.  For each block of contiguous "x"s with length y the score decreases by y^2.    For example, if a = 6, b = 3 and ainta have arranged the cards in the order, that is described by string "ooxoooxxo", the score of the deck equals 2^2 - 1^2 + 3^2 - 2^2 + 1^2 = 9. That is because the deck has 5 blocks in total: "oo", "x", "ooo", "xx", "o". User ainta likes big numbers, so he wants to maximize the score with the given cards. Help ainta make the score as big as possible. Note, that he has to arrange all his cards. 
tl;dr: