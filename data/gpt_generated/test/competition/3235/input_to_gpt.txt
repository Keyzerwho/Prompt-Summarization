Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value  If there is a tie, return all the values with the highest frequency in any order. 
tl;dr: You are given root of a tree. Find the most frequent subtree sum value if the  subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). If there is a tie, return all the values with the highest frequency. 

Master Shifu is training Po to become The Dragon Warrior and as a final assignment he must obtain maximum deliciousness from dumplings. There are  $N$ plates of dumplings in front of him with deliciousness $A_1, A_2, \ldots, A_N$, Po can choose any number of continuous plates of  dumplings. The total deliciousness is the sum of deliciousness of all the  chosen dumplings. What is the minimum number of plates he must choose so that total deliciousness is maximum possible  
tl;dr: You are given N values with weight attached to each value. You need to find minimum number of continuous values to be chosen such that total weight is maximum possible. 

Find the first character that repeats in a String and return that character.  ```python first_dup('tweet') => 't' first_dup('like') => None ``` *This is not the same as finding the character that repeats first.* *In that case, an input of 'tweet' would yield 'e'.
tl;dr: Find the first character that repeats in a String and return that character.  

You are developing a new app intended to simplify expense-sharing among groups of friends. This app will allow them to keep track of who encountered an expense and how it should be shared with others through the form of IOUs. For instance, if Alice pays for a meal shared with Bob and Carol, and Bob s and Carol s shares were $\$ 5$ and $\$ 10$, respectively, then Bob would issue an IOU for $\$ 5$ to Alice and Carol would issue an IOU for $\$ 10$ to Alice. Your app will maintain a ledger of who owes whom. Note that cycles can occur: For instance, if Bob initially owes Alice $\$ 10$ and later pays a $\$ 5$ expense on behalf of Alice, Alice would issue an IOU for $\$ 5$ to Bob. This IOU would then cancel out, or reduce, the IOU Alice holds from Bob from $\$ 10$ to $\$ 5$. It s also possible for cycles to involve more than $2$ people. Your app will be given a list of IOUs issued and settle them as much as possible by considering all cycles and reducing each debt in a cycle by the minimum amount of debt occurring in the cycle. After all cycles are considered and canceled, your app should output who owes whom how much. If there are multiple ways in which cancelation can occur, you may choose any of them as long as there are no cycles left at the end. However, you may not introduce IOUs between friends that never gave an IOU to each other, e.g., if Alice owes Bob money, and Bob owes the same amount to Carol, you cannot remove Bob from the picture and declare that Alice now owes Carol. 
tl;dr: