Write a function named `first_non_repeating_letter` that takes a string input, and returns the first character that is not repeated anywhere in the string. For example, if given the input `'stress'`, the function should return `'t'`, since the letter *t* only occurs once in the string, and occurs first in the string. As an added challenge, upper- and lowercase letters are considered the **same character**, but the function should return the correct case for the initial letter.  For example, the input `'sTreSS'` should return `'T'`. If a string contains *all repeating characters*, it should return an empty string (`""`) or `None` -- see sample tests
tl;dr: Write a function named first_non_repeating_letter that takes a string input, and returns the first character that is not repeated anywhere in the string. Uppercase and lowercase letters are considered the same character. If a string contains all repeating characters, it should return an empty string "" or None. 

You received a whatsup message from an unknown number. Could it be from that girl/boy with a foreign accent you met yesterday evening  Write a simple regex to check if the string contains the word hallo in different languages. These are the languages of the possible people you met the night before: * hello - english * ciao - italian * salut - french * hallo - german * hola - spanish * ahoj - czech republic * czesc - polish By the way, how cool is the czech republic hallo!! PS. you can assume the input is a string. PPS. to keep this a beginner exercise you don't need to check if the greeting is a subset of word ('Hallowen' can pass the test) PS. regex should be case insensitive to pass the test
tl;dr: Write a simple regex to check if the string contains the word hello in different languages. Regex should be case insensitive to pass the tests

A few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends. There are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs $(i + j) \operatorname{mod}(n + 1)$ and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school. 
tl;dr: