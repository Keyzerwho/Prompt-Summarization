This is a follow up from my kata The old switcheroo Write ```python def encode(str) ``` that takes in a string ```str``` and replaces all the letters with their respective positions in the English alphabet. ```python encode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd encode('codewars') == '315452311819' encode('abc-#@5') == '123-#@5' ``` String are case sensitive
tl;dr: Write a function encode that takes in a string str and replaces all the letters with their respective positions in the English alphabet. String are case sensitive. 

You'll be given a string, and have to return the total of all the unicode characters as an int. Should be able to handle any characters sent at it.  examples: uniTotal("a") == 97 uniTotal("aaa") == 29
tl;dr: You'll be given a string, and have to return the total of all the unicode characters as an int. examples: uniTotal("a") == 97 uniTotal("aaa") == 29

Little penguin Polo likes permutations. But most of all he likes permutations of integers from 0 to n, inclusive. For permutation p = p_0, p_1, ..., p_{n}, Polo has defined its beauty   number $(0 \oplus p_{0}) +(1 \oplus p_{1}) + \cdots +(n \oplus p_{n})$. Expression $x \oplus y$ means applying the operation of bitwise excluding "OR" to numbers x and y. This operation exists in all modern programming languages, for example, in language C++ and Java it is represented as "^" and in Pascal   as "xor". Help him find among all permutations of integers from 0 to n the permutation with the maximum beauty. 
tl;dr: