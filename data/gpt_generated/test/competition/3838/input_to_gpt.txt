A category page displays a set number of products per page, with pagination at the bottom allowing the user to move from page to page. Given that you know the page you are on, how many products are in the category in total, and how many products are on any given page, how would you output a simple string showing which products you are viewing.. examples In a category of 30 products with 10 products per page, on page 1 you would see  'Showing 1 to 10 of 30 Products.' In a category of 26 products with 10 products per page, on page 3 you would see 'Showing 21 to 26 of 26 Products.' In a category of 8 products with 10 products per page, on page 1 you would see 'Showing 1 to 8 of 8 Products.
tl;dr: Given that you know the page you are on, how many products are in the category in total, and how many products are on any given page, output a simple string showing which products you are viewing. 

In the computer world, use restricted resource you have to generate maximum benefit is what we always want to pursue. For now, suppose you are a dominator of m 0s and n 1s respectively. On the other hand, there is an array with strings consisting of only 0s and 1s. Now your task is to find the maximum number of strings that you can form with given m 0s and n 1s. Each 0 and 1 can be used at most once. 
tl;dr: You are given numbers m and n. You are given an array of strings of only 0's and 1's. Return the maximum number of strings that can be formed by using less than (m+1) 0's and (n+1) 1's in total. 

Task: Make a function that converts a word to pig latin. The rules of pig latin are: ``` If the word has more than 3 letters:   1. Take the first letter of a word and move it to the end   2. Add -ay to the word Otherwise leave the word alone. ``` 
tl;dr: Task: Make a function that converts a word to pig latin. The rules of pig latin are: If the word has more than 3 letters:   1. Take the first letter of a word and move it to the end   2. Add -ay to the word Otherwise leave the word alone. 

Little Petya likes permutations a lot. Recently his mom has presented him permutation q_1, q_2, ..., q_{n} of length n. A permutation a of length n is a sequence of integers a_1, a_2, ..., a_{n} (1   a_{i}   n), all integers there are distinct.  There is only one thing Petya likes more than permutations: playing with little Masha. As it turns out, Masha also has a permutation of length n. Petya decided to get the same permutation, whatever the cost may be. For that, he devised a game with the following rules:  Before the beginning of the game Petya writes permutation 1, 2, ..., n on the blackboard. After that Petya makes exactly k moves, which are described below.  During a move Petya tosses a coin. If the coin shows heads, he performs point 1, if the coin shows tails, he performs point 2.  Let's assume that the board contains permutation p_1, p_2, ..., p_{n} at the given moment. Then Petya removes the written permutation p from the board and writes another one instead: p_{q}_1, p_{q}_2, ..., p_{q}_{n}. In other words, Petya applies permutation q (which he has got from his mother) to permutation p.  All actions are similar to point 1, except that Petya writes permutation t on the board, such that: t_{q}_{i} = p_{i} for all i from 1 to n. In other words, Petya applies a permutation that is inverse to q to permutation p.  We know that after the k-th move the board contained Masha's permutation s_1, s_2, ..., s_{n}. Besides, we know that throughout the game process Masha's permutation never occurred on the board before the k-th move. Note that the game has exactly k moves, that is, throughout the game the coin was tossed exactly k times. Your task is to determine whether the described situation is possible or else state that Petya was mistaken somewhere. See samples and notes to them for a better understanding. 
tl;dr: