Kate likes to count words in text blocks. By words she means continuous sequences of English alphabetic characters (from a to z ). Here are examples: `Hello there, little user5453 374 ())$. I d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains "words" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']` Kate doesn't like some of words and doesn't count them. Words to be excluded are "a", "the", "on", "at", "of", "upon", "in" and "as", case-insensitive. Today Kate's too lazy and have decided to teach her computer to count "words" for her. 
tl;dr: Kate count words which means continuous sequences of English alphabetic characters. Here are examples: `Hello there, little user5453 374 ())$. I d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains "words" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']` Kate doesn't count "a", "the", "on", "at", "of", "upon", "in" and "as". Kate has decided to teach her computer to count "words" for her. 

Implement a function which takes a string, and returns its hash value. Algorithm steps: * `a` := sum of the ascii values of the input characters * `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...) * `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits) * `d` := `c` XOR (32 * (`total_number_of_spaces` + 1)) * return `d` **Note**: OR, AND, NOT, XOR are bitwise operations. ___ ### 
tl;dr: Implement a function which takes a string, and returns its hash value. Algorithm steps: * `a` := sum of the ascii values of the input characters * `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...) * `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits) * `d` := `c` XOR (32 * (`total_number_of_spaces` + 1)) * return `d` 

There are 2N balls, N white and N black, arranged in a row. The integers from 1 through N are written on the white balls, one on each ball, and they are also written on the black balls, one on each ball. The integer written on the i-th ball from the left (1   i   2N) is a_i, and the color of this ball is represented by a letter c_i. c_i = W represents the ball is white; c_i = B represents the ball is black. Takahashi the human wants to achieve the following objective:  - For every pair of integers (i,j) such that 1   i < j   N, the white ball with i written on it is to the left of the white ball with j written on it.  - For every pair of integers (i,j) such that 1   i < j   N, the black ball with i written on it is to the left of the black ball with j written on it. In order to achieve this, he can perform the following operation:  - Swap two adjacent balls. Find the minimum number of operations required to achieve the objective. -----Constraints-----  - 1   N   2000  - 1   a_i   N  - c_i = W or c_i = B.  - If i   j, (a_i,c_i)   (a_j,c_j). 
tl;dr: