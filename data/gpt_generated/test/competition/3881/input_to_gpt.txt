# Description "It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home.  So we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount. # Task Your job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons." Your job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.  In the first case (look below) the most candies are given to second kid (i.e second place in list/array), 8. Because of that we will give the first kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will have 8 candies.So we end up handing out 3 + 2 + 4 = 9. ```python candies ([5,8,6,4]) # return 9 candies ([1,2,4,6]) # return 11 candies ([1,6]) # return 5 candies ([]) # return -1 candies ([6]) # return -1 (because only one kid) ``` ```cs CandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9 CandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11 CandyProblem.GetMissingCandies(new [] { }) // return -1 CandyProblem.GetMissingCandies(new [] {1, 6}) // return 5 ``` ```haskell  candies [5,8,6,4] -- return 9 candies [1,2,4,6] -- return 11 candies [] -- return -1 candies [1,6] -- return 5 ``
tl;dr: # Task Given a list/array representing how much candy each child in our group has made out with, give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.  ```python candies ([5,8,6,4]) # return 9 candies ([1,2,4,6]) # return 11 candies ([1,6]) # return 5 candies ([]) # return -1 candies ([6]) # return -1 (because only one kid) ``` ```cs CandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9 CandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11 CandyProblem.GetMissingCandies(new [] { }) // return -1 CandyProblem.GetMissingCandies(new [] {1, 6}) // return 5 ``` ```haskell  candies [5,8,6,4] -- return 9 candies [1,2,4,6] -- return 11 candies [] -- return -1 candies [1,6] -- return 5 ``

*This kata is inspired by [Project Euler Problem #387](https://projecteuler.net/problem=387)* --- A [Harshad number](https://en.wikipedia.org/wiki/Harshad_number) (or Niven number) is a number that is divisible by the sum of its digits. A *right truncatable Harshad number* is any Harshad number that, when recursively right-truncated, results in a Harshad number at each truncation. By definition, 1-digit numbers are **not** right truncatable Harshad numbers. For example `201` (which is a Harshad number) yields `20`, then `2` when right-truncated, which are all Harshad numbers. Thus `201` is a *right truncatable Harshad number*. ## Your task Given a range of numbers (`(a, b)`, both included), return the list of right truncatable Harshad numbers in this range. ```if-not:javascript 
tl;dr: A [Harshad number] is a number that is divisible by the sum of its digits. A *right truncatable Harshad number* is any Harshad number that, when recursively right-truncated, results in a Harshad number at each truncation. By definition, 1-digit numbers are **not** right truncatable Harshad numbers. For example `201` (which is a Harshad number) yields `20`, then `2` when right-truncated, which are all Harshad numbers. Thus `201` is a *right truncatable Harshad number*. ## Your task Given a range of numbers , return the list of right truncatable Harshad numbers in this range. ## 

You are the principal of the Cake school in chefland and today is your birthday. You want to treat each of the children with a small cupcake which is made by you. But there is a problem, You don't know how many students are present today. The students have gathered of the morning assembly in $R$ rows and $C$ columns. Now you have to calculate how many cakes you have to make such that each child gets a cupcake.  
tl;dr: You are given $R$ rows and $C$ columns of a matrix. Calculate the total number in the matrix.  

Limak is a little polar bear. Polar bears hate long strings and thus they like to compress them. You should also know that Limak is so young that he knows only first six letters of the English alphabet: 'a', 'b', 'c', 'd', 'e' and 'f'. You are given a set of q possible operations. Limak can perform them in any order, any operation may be applied any number of times. The i-th operation is described by a string a_{i} of length two and a string b_{i} of length one. No two of q possible operations have the same string a_{i}. When Limak has a string s he can perform the i-th operation on s if the first two letters of s match a two-letter string a_{i}. Performing the i-th operation removes first two letters of s and inserts there a string b_{i}. See the notes section for further clarification. You may note that performing an operation decreases the length of a string s exactly by 1. Also, for some sets of operations there may be a string that cannot be compressed any further, because the first two letters don't match any a_{i}. Limak wants to start with a string of length n and perform n - 1 operations to finally get a one-letter string "a". In how many ways can he choose the starting string to be able to get "a"  Remember that Limak can use only letters he knows. 
tl;dr: