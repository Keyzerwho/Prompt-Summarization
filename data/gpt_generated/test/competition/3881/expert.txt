 Given a set of operations, find the number of ways to choose a string of length n to be able to get a one-letter string "a".
-----Input----- The first line contains two integers n and q (2 ≤ n ≤ 6, 1 ≤ q ≤ 36) — the length of the initial string and the number of available operations. The next q lines describe the possible operations. The i-th of them contains two strings a_{i} and b_{i} (|a_{i}| = 2, |b_{i}| = 1). It's guaranteed that a_{i} ≠ a_{j} for i ≠ j and that all a_{i} and b_{i} consist of only first six lowercase English letters. -----Output----- Print the number of strings of length n that Limak will be able to transform to string "a" by applying only operations given in the input. -----Examples----- Input 3 5 ab a cc c ca a ee c ff d Output 4 Input 2 8 af e dc d cc f bc b da b eb a bb b ff c Output 1 Input 6 2 bb a ba a Output 0 -----Note----- In the first sample, we count initial strings of length 3 from which Limak can get a required string "a". There are 4 such strings: "abb", "cab", "cca", "eea". The first one Limak can compress using operation 1 two times (changing "ab" to a single "a"). The first operation would change "abb" to "ab" and the second operation would change "ab" to "a". Other three strings may be compressed as follows:   "cab" $\rightarrow$ "ab" $\rightarrow$ "a"  "cca" $\rightarrow$ "ca" $\rightarrow$ "a"  "eea" $\rightarrow$ "ca" $\rightarrow$ "a"  In the second sample, the only correct initial string is "eb" because it can be immediately compressed to "a".