An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements. For example: ```Haskell solve([1,21,4,7,5]) = [21,7,5] because 21, 7 and 5 are greater than elments to their right.  solve([5,4,3,2,1]) = [5,4,3,2,1] Notice that the last element is always included. ``` More examples in the test cases. Good luck
tl;dr: An element in an array is dominant if it is greater than all elements to its right. You will be given an array and your task will be to return a list of all dominant elements.  For example: 

Given an array of numbers, return the difference between the largest and smallest values.  For example: `[23, 3, 19, 21, 16]` should return `20` (i.e., `23 - 3`). `[1, 434, 555, 34, 112]` should return `554` (i.e., `555 - 1`). The array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow
tl;dr: Given an array of numbers, return the difference between the largest and smallest values. The array will contain a minimum of two elements. Input data range guarantees that `max-min` will cause no integer overflow. 

A dragon symbolizes wisdom, power and wealth. On Lunar New Year's Day, people model a dragon with bamboo strips and clothes, raise them with rods, and hold the rods high and low to resemble a flying dragon. A performer holding the rod low is represented by a 1, while one holding it high is represented by a 2. Thus, the line of performers can be represented by a sequence a_1, a_2, ..., a_{n}. Little Tommy is among them. He would like to choose an interval [l, r] (1   l   r   n), then reverse a_{l}, a_{l} + 1, ..., a_{r} so that the length of the longest non-decreasing subsequence of the new sequence is maximum. A non-decreasing subsequence is a sequence of indices p_1, p_2, ..., p_{k}, such that p_1 < p_2 < ... < p_{k} and a_{p}_1   a_{p}_2   ...   a_{p}_{k}. The length of the subsequence is k. 
tl;dr: