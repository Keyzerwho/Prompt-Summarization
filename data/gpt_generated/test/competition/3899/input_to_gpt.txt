We have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. We also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). AtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 
tl;dr: You have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. You also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). You are going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 

You have an array A of size N containing only positive numbers. You have to output the maximum possible value of A[i]%A[j] where 1<=i,j<=N.  
tl;dr: Find maximum possible value of A[i]%A[j] where 1<=i,j<=N for a given array A of size N containing positive numbers.  

To almost all of us solving sets of linear equations is quite obviously the most exciting bit of linear algebra.  Benny does not agree though and wants to write a quick program to solve his homework problems for him.  Unfortunately Benny's lack of interest in linear algebra means he has no real clue on how to go about this.  Fortunately, you can help him! Write a method ```solve``` that accepts a list of linear equations that your method will have to solve.  The output should be a map (a `Map` object in JavaScript) with a value for each variable in the equations.  If the system does not have a unique solution (has infinitely many solutions or is unsolvable), return ```null``` (`None` in python). 
tl;dr: The input given are lists of linear equations. You need to write a method ```solve``` that accepts the input and outputs a dictionary with a value for each variable in the equations.  If the system does not have a unique solution, return ```null```. 

You need to execute several tasks, each associated with number of processors it needs, and the compute power it will consume. You have sufficient number of analog computers, each with enough processors for any task. Each computer can execute up to one task at a time, and no more than two tasks total. The first task can be any, the second task on each computer must use strictly less power than the first. You will assign between 1 and 2 tasks to each computer. You will then first execute the first task on each computer, wait for all of them to complete, and then execute the second task on each computer that has two tasks assigned. If the average compute power per utilized processor (the sum of all consumed powers for all tasks presently running divided by the number of utilized processors) across all computers exceeds some unknown threshold during the execution of the first tasks, the entire system will blow up. There is no restriction on the second tasks execution. Find the lowest threshold for which it is possible. Due to the specifics of the task, you need to print the answer multiplied by 1000 and rounded up. 
tl;dr: