You have $n$ gifts and you want to give all of them to children. Of course, you don't want to offend anyone, so all gifts should be equal between each other. The $i$-th gift consists of $a_i$ candies and $b_i$ oranges. During one move, you can choose some gift $1 \le i \le n$ and do one of the following operations:   eat exactly one candy from this gift (decrease $a_i$ by one);  eat exactly one orange from this gift (decrease $b_i$ by one);  eat exactly one candy and exactly one orange from this gift (decrease both $a_i$ and $b_i$ by one).  Of course, you can not eat a candy or orange if it's not present in the gift (so neither $a_i$ nor $b_i$ can become less than zero). As said above, all gifts should be equal. This means that after some sequence of moves the following two conditions should be satisfied: $a_1 = a_2 = \dots = a_n$ and $b_1 = b_2 = \dots = b_n$ (and $a_i$ equals $b_i$ is not necessary). Your task is to find the minimum number of moves required to equalize all the given gifts. You have to answer $t$ independent test cases. 
tl;dr: You are given 2 integer arrays of length $n$, array $x$ and array $y$. For each array, you want to make all its values equivalent such that $x_1$ = $x_2$ = $x_3$ = ... = $x_n$ and $y_1$ = $y_2$ = $y_3$ = ... = $y_n$ in the least number of moves possible. In one move, you can decrement the value of an element by 1 at $x_i$ or $y_i$, or at both $x_i$ and $y_i$ The value of an element can not go below 0. You have to answer $t$ independent test cases. 

Given a binary tree, return the sum of values of its deepest leaves.   
tl;dr: Given a binary tree, return the sum of values of its deepest leaves.   

A has a string consisting of some number of lowercase English letters 'a'. He gives it to his friend B who appends some number of letters 'b' to the end of this string. Since both A and B like the characters 'a' and 'b', they have made sure that at this point, at least one 'a' and one 'b' exist in the string. B now gives this string to C and he appends some number of letters 'c' to the end of the string. However, since C is a good friend of A and B, the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. It is also possible that the number of letters 'c' equals both to the number of letters 'a' and to the number of letters 'b' at the same time. You have a string in your hands, and you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print "YES", otherwise print "NO" (without the quotes). 
tl;dr: