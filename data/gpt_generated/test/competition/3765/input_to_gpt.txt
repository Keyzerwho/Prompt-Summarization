You are installing a billboard and want it to have the largest height.  The billboard will have two steel supports, one on each side.  Each steel support must be an equal height. You have a collection of rods which can be welded together.  For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6. Return the largest possible height of your billboard installation.  If you cannot support the billboard, return 0.   
tl;dr: You are given an array of integers. You need to add these integers without repetition and generate two largest possible numbers of equal value. For example, if you have numbers 1, 2, and 3, you can add them together to make a sum of value 6. Return the largest possible sum.  If you cannot make two sums of equal value, return 0.   

In mathematics, a matrix (plural matrices) is a rectangular array of numbers. Matrices have many applications in programming, from performing transformations in 2D space to machine learning.  One of the most useful operations to perform on matrices is matrix multiplication, which takes a pair of matrices and produces another matrix   known as the dot product. Multiplying matrices is very different to multiplying real numbers, and follows its own set of rules.  Unlike multiplying real numbers, multiplying matrices is non-commutative: in other words, multiplying matrix ```a``` by matrix ```b``` will not give the same result as multiplying matrix ```b``` by matrix ```a```. Additionally, not all pairs of matrix can be multiplied. For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```. There are many introductions to matrix multiplication online, including at Khan Academy, and in the classic MIT lecture series by Herbert Gross.  To complete this kata, write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java. Each matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix. For example, the following matrix: ```|1 2|``````|3 4|``` Would be represented as: ```[[1, 2], [3, 4]]``` It can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points
tl;dr: For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```. Write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java. Each matrix will be represented by a two-dimensional list. Each inner list will contain one or more numbers, representing a row in the matrix. For example, the following matrix: ```|1 2|``````|3 4|``` Would be represented as: ```[[1, 2], [3, 4]]``

In one of the games Arkady is fond of the game process happens on a rectangular field. In the game process Arkady can buy extensions for his field, each extension enlarges one of the field sizes in a particular number of times. Formally, there are n extensions, the i-th of them multiplies the width or the length (by Arkady's choice) by a_{i}. Each extension can't be used more than once, the extensions can be used in any order. Now Arkady's field has size h   w. He wants to enlarge it so that it is possible to place a rectangle of size a   b on it (along the width or along the length, with sides parallel to the field sides). Find the minimum number of extensions needed to reach Arkady's goal. 
tl;dr: