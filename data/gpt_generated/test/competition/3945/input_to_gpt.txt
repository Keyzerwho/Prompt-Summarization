An AI has infected a text with a character!!  This text is now **fully mutated** to this character. If the text or the character are empty, return an empty string.   There will never be a case when both are empty as nothing is going on!! **
tl;dr: Given a text and a character, fully mutate the text to the character. If the text or the character are empty, return an empty string.   # 

Your task is to write a function that does just what the title suggests (so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number `n` of smallest elements to return. Also: * the number of elements to be returned cannot be higher than the array/list/vector length; * elements can be duplicated; * in case of duplicates, just return them according to the original order (see third example for more clarity). Same examples and more in the test cases: ```python first_n_smallest([1,2,3,4,5],3) == [1,2,3] first_n_smallest([5,4,3,2,1],3) == [3,2,1] first_n_smallest([1,2,3,4,1],3) == [1,2,1] first_n_smallest([1,2,3,-4,0],3) == [1,-4,0] first_n_smallest([1,2,3,4,5],0) == [] ``` [Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077) also available
tl;dr: Your task is to write a function that does just what the title suggests with an array/list/vector of integers and the expected number n of smallest elements to return. 

Dora loves adventures quite a lot. During some journey she encountered an amazing city, which is formed by $n$ streets along the Eastern direction and $m$ streets across the Southern direction. Naturally, this city has $nm$ intersections. At any intersection of $i$-th Eastern street and $j$-th Southern street there is a monumental skyscraper. Dora instantly became curious and decided to explore the heights of the city buildings. When Dora passes through the intersection of the $i$-th Eastern and $j$-th Southern street she examines those two streets. After Dora learns the heights of all the skyscrapers on those two streets she wonders: how one should reassign heights to the skyscrapers on those two streets, so that the maximum height would be as small as possible and the result of comparing the heights of any two skyscrapers on one street wouldn't change. Formally, on every of $nm$ intersections Dora solves an independent problem. She sees $n + m - 1$ skyscrapers and for each of them she knows its real height. Moreover, any two heights can be compared to get a result "greater", "smaller" or "equal". Now Dora wants to select some integer $x$ and assign every skyscraper a height from $1$ to $x$. When assigning heights, Dora wants to preserve the relative order of the skyscrapers in both streets. That is, the result of any comparison of heights of two skyscrapers in the current Eastern street shouldn't change and the result of any comparison of heights of two skyscrapers in current Southern street shouldn't change as well. Note that skyscrapers located on the Southern street are not compared with skyscrapers located on the Eastern street only. However, the skyscraper located at the streets intersection can be compared with both Southern and Eastern skyscrapers. For every intersection Dora wants to independently calculate the minimum possible $x$. For example, if the intersection and the two streets corresponding to it look as follows: [Image]  Then it is optimal to replace the heights of the skyscrapers as follows (note that all comparisons "less", "equal", "greater" inside the Eastern street and inside the Southern street are preserved) [Image]  The largest used number is $5$, hence the answer for this intersection would be $5$. Help Dora to compute the answers for each intersection. 
tl;dr: