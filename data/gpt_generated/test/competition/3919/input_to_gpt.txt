You have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water. You can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them.  Calculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times. Some examples:   if you have four barrels, each containing $5$ liters of water, and $k = 1$, you may pour $5$ liters from the second barrel into the fourth, so the amounts of water in the barrels are $[5, 0, 5, 10]$, and the difference between the maximum and the minimum is $10$;  if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still $0$.  
tl;dr: You have $n$ barrels lined up in a row, numbered from left to right from one. Initially, the $i$-th barrel contains $a_i$ liters of water. You can pour water from one barrel to another. In one act of pouring, you can choose two different barrels $x$ and $y$ (the $x$-th barrel shouldn't be empty) and pour any possible amount of water from barrel $x$ to barrel $y$ (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them.  Calculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most $k$ times. 

Given an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0. For 
tl;dr: Given an D-dimension array, where each axis is of length N, your goal is to find the sum of every index in the array starting from 0. 

There is a string S of length N consisting of characters 0 and 1. You will perform the following operation for each i = 1, 2, ..., m:  - Arbitrarily permute the characters within the substring of S starting at the l_i-th character from the left and extending through the r_i-th character. Here, the sequence l_i is non-decreasing. How many values are possible for S after the M operations, modulo 1000000007(= 10^9+7)  -----Constraints-----  - 2 N 3000  - 1 M 3000  - S consists of characters 0 and 1.  - The length of S equals N.  - 1 l_i < r_i N  - l_i   l_{i+1} 
tl;dr: