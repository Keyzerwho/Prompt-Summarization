# Task **_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That ,  # Conditions : * **_N_**  is *divisible by divisor* * **_N_**  is *less than or equal to bound*  * **_N_**  is *greater than 0*. ___ 
tl;dr: # Task Given two positive values: divisor and bound. Write a function maxMultiple(divisor, bound) to find the largest integer that is divisible by divisor and less than or equal to bound but greater than 0. It's guaranteed that a divisor is found. # 

Arkady needs your help again! This time he decided to build his own high-speed Internet exchange point. It should consist of n nodes connected with minimum possible number of wires into one network (a wire directly connects two nodes). Exactly k of the nodes should be exit-nodes, that means that each of them should be connected to exactly one other node of the network, while all other nodes should be connected to at least two nodes in order to increase the system stability. Arkady wants to make the system as fast as possible, so he wants to minimize the maximum distance between two exit-nodes. The distance between two nodes is the number of wires a package needs to go through between those two nodes. Help Arkady to find such a way to build the network that the distance between the two most distant exit-nodes is as small as possible. 
tl;dr: You want to build your own high-speed Internet exchange point. It should consist of n nodes connected with minimum possible number of wires into one network. Exactly k of the nodes should be exit-nodes, that means that each of them should be connected to exactly one other node of the network, while all other nodes should be connected to at least two nodes in order to increase the system stability. Find the Minimum Spanning Tree between two exit-nodes. 

You are given two arrays A and B, each of size n. The error, E, between these two arrays is defined $E = \sum_{i = 1}^{n}(a_{i} - b_{i})^{2}$. You have to perform exactly k_1 operations on array A and exactly k_2 operations on array B. In one operation, you have to choose one element of the array and increase or decrease it by 1. Output the minimum possible value of error after k_1 operations on array A and k_2 operations on array B have been performed. 
tl;dr: