Mr. E Ven only likes even length words. Please create a translator so that he doesn't have to hear those pesky odd length words. For some reason he also hates punctuation, he likes his sentences to flow. Your translator should take in a string and output it with all odd length words having an extra letter (the last letter in the word). It should also remove all punctuation (., !) as well as any underscores (_). "How did we end up here  We go " translated becomes->  "Howw didd we endd up here We go
tl;dr: Your translator should take in a string and output it with all odd length words having an extra letter that is the last letter in the word. It should also remove all punctuation as well as any underscores. 

You're playing a game called Osu! Here's a simplified version of it. There are n clicks in a game. For each click there are two outcomes: correct or bad. Let us denote correct as "O", bad as "X", then the whole play can be encoded as a sequence of n characters "O" and "X". Using the play sequence you can calculate the score for the play as follows: for every maximal consecutive "O"s block, add the square of its length (the number of characters "O") to the score. For example, if your play can be encoded as "OOXOOOXXOO", then there's three maximal consecutive "O"s block "OO", "OOO", "OO", so your score will be 2^2 + 3^2 + 2^2 = 17. If there are no correct clicks in a play then the score for the play equals to 0. You know that the probability to click the i-th (1   i   n) click correctly is p_{i}. In other words, the i-th character in the play sequence has p_{i} probability to be "O", 1 - p_{i} to be "X". You task is to calculate the expected score for your play. 
tl;dr: There are n clicks in a game. For each click there are two outcomes: correct or bad. Let us denote correct as "O", bad as "X", then the whole play can be encoded as a sequence of n characters "O" and "X". Calculate the score for the play as follows: for every maximal consecutive "O"s block, add the square of its length to the score. If there are no correct clicks in a play then the score for the play equals to 0. You know that the probability to click the i-th (1   i   n) click correctly is p_{i}. In other words, the i-th character in the play sequence has p_{i} probability to be "O", 1 - p_{i} to be "X". You task is to calculate the expected score for your play. 

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3,9,20,null,null,15,7],     3    / \   9  20     /  \    15   7 return its zigzag level order traversal as: [   [3],   [20,9],   [15,7] 
tl;dr: Given a binary tree, return the zigzag level order traversal of its nodes' values. For example: Given binary tree [3,9,20,null,null,15,7],     3    / \   9  20     /  \    15   7 return its zigzag level order traversal as: [   [3],   [20,9],   [15,7] 

Emuskald is a well-known illusionist. One of his trademark tricks involves a set of magical boxes. The essence of the trick is in packing the boxes inside other boxes. From the top view each magical box looks like a square with side length equal to 2^{k} (k is an integer, k   0) units. A magical box v can be put inside a magical box u, if side length of v is strictly less than the side length of u. In particular, Emuskald can put 4 boxes of side length 2^{k} - 1 into one box of side length 2^{k}, or as in the following figure:  [Image]  Emuskald is about to go on tour performing around the world, and needs to pack his magical boxes for the trip. He has decided that the best way to pack them would be inside another magical box, but magical boxes are quite expensive to make. Help him find the smallest magical box that can fit all his boxes. 
tl;dr: