Polycarp analyzes the prices of the new berPhone. At his disposal are the prices for $n$ last days: $a_1, a_2, \dots, a_n$, where $a_i$ is the price of berPhone on the day $i$. Polycarp considers the price on the day $i$ to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if $n=6$ and $a=[3, 9, 4, 6, 7, 5]$, then the number of days with a bad price is $3$   these are days $2$ ($a_2=9$), $4$ ($a_4=6$) and $5$ ($a_5=7$). Print the number of days with a bad price. You have to answer $t$ independent data sets. 
tl;dr: you are given a list of of integers for every index print the index if there is a smaller value after that index 

You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, we will compute a_i + b_j and write it on a sheet of paper. That is, we will write N^2 integers in total. Compute the XOR of these N^2 integers. Definition of XOR The XOR of integers c_1, c_2, ..., c_m is defined as follows:  - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even. For example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 
tl;dr: You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, Compute a_i + b_j. Compute the XOR of these N^2 integers. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 

You are given a string S of length n with each character being one of the first m lowercase English letters.  Calculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1. Recall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence. 
tl;dr: You are given a string S of length n with each character being one of the first m lowercase English letters.  Calculate how many different strings T of length n can be composed from the first m lowercase English letters exist such that the length of Longest Common Subsequence between S and T is n - 1. 

You are hosting a fancy party for fancy friends. And, like any fancy party, you need to buy some fancy antiques to put up around the venue (your house). There is a set of $n$ fancy antiques that you need to buy. And there is a set of $m$ fancy antique shops in the city. Because these antiques are extremely rare, each fancy antique can only be found at a single fancy antique shop. However, the fancy antique shops can also sell  knock-off  (duplicate) versions of some of the antiques. And of course, for any fancy antique, there is only a single fancy antique shop in the city that holds a knock-off version of that antique (this is to maintain the rareness of the antiques). The shop that sells the original is not always the same shop that holds the knock-off. It turns out that even though you can tell the difference, most people cannot tell the original version from the knock-off version of any given antique. And, because the shops can get away with it, sometimes the knock-off is more expensive than the original! Since the party is tomorrow, you only have time to visit $k$ shops. You would like to buy one version (either the original or the knock-off) of each of the $n$ antiques. Suppose that there are three shops, and three antiques we would like to buy.  - Antique $\# 1$ sells for $30$ at shop $\# 1$. Its knockoff sells for $50$ at shop $\# 2$.  - Antique $\# 2$ sells for $70$ at shop $\# 2$. Its knockoff sells for $10$ at shop $\# 3$.  - Antique $\# 3$ sells for $20$ at shop $\# 3$. Its knockoff sells for $80$ at shop $\# 1$. Suppose you only have time to go to two shops. You can go to shops $1$ and $3$. You can buy the original of antique $1$ with cost $30$ at shop $1$, the original of antique $3$ with cost $20$ at shop $3$, and the knock-off of antique $2$ at shop $3$ with cost $10$. The total cost to buy these items is $60$, which is the minimum possible. If you only have time to visit one shop, then it is impossible. You cannot buy a version of all three items by visiting a single shop. Given the costs of the antiques/knock-offs at the shops, what is the minimum total cost to buy one version of each antique  
tl;dr: