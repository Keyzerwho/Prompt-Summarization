 ```if:python Complete the function `get_issuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if-not:python Complete the function `getIssuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if:typescript Where `Issuer` is defined with the following enum type. ~~~typescript enum Issuer {   VISA = 'VISA',   AMEX = 'AMEX',   Mastercard = 'Mastercard',   Discover = 'Discover',   Unknown = 'Unknown', } ~~~ ``` ```markdown | Card Type  | Begins With          | Number Length | |------------|----------------------|---------------| | AMEX       | 34 or 37           | 15          | | Discover   | 6011             | 16          | | Mastercard | 51, 52, 53, 54 or 55 | 16           | | VISA      | 4             | 13 or 16      | ``` ```if:c,cpp **C/C++ note:** The return value in C is not
-----Input----- The input consists of $2$ lines of $10$ entries each describing the partially filled plates. The first line describes the top row (burgers and slop), the second line describes the bottom row (sushi and drumstick). On each line, the first $2$ entries describe Salamander’s plate, the next $2$ Yeti’s, then Golem’s, Imp’s, and finally Kraken’s. Each entry is either the underscore character _ describing an empty slot or a positive integer number $a$ ($0 < a \le 200$) if it is already known. Entries are separated by single spaces. You may assume that each arrangement has at least one possible solution (that is, the partial information is not inconsistent). -----Output----- Output the number $n$ of distinct solutions for the puzzle given in the input! If there are infinitely many solutions, output “many”! Note that although any given entries are guaranteed to be less than $200$, inferred entries must be positive integers, but they are not subject to a maximum. -----Examples----- Sample Input 1: _ 90 22 _ 6 _ _ _ _ 81 _ 40 _ _ _ 12 60 _ 90 _ Sample Output 1: 1 Sample Input 2: 85 55 _ 99 51 _ _ _ _ _ _ _ _ _ _ _ _ 85 63 153 Sample Output 2: 1 Sample Input 3: 160 _ _ 136 _ _ _ _ _ 170 _ _ _ _ 120 _ _ 144 _ _ Sample Output 3: 8640