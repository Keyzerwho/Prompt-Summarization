Given a credit card number we can determine who the issuer/vendor is with a few basic knowns. ```if:python Complete the function `get_issuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if-not:python Complete the function `getIssuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if:typescript Where `Issuer` is defined with the following enum type. ~~~typescript enum Issuer {   VISA = 'VISA',   AMEX = 'AMEX',   Mastercard = 'Mastercard',   Discover = 'Discover',   Unknown = 'Unknown', } ~~~ ``` ```markdown | Card Type  | Begins With          | Number Length | |------------|----------------------|---------------| | AMEX       | 34 or 37             | 15            | | Discover   | 6011                 | 16            | | Mastercard | 51, 52, 53, 54 or 55 | 16            | | VISA       | 4                    | 13 or 16      | ``` ```if:c,cpp **C/C++ note:** The return value in C is not freed. ``` ## 
tl;dr: ```if:python Complete the function `get_issuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if-not:python Complete the function `getIssuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if:typescript Where `Issuer` is defined with the following enum type. ~~~typescript enum Issuer {   VISA = 'VISA',   AMEX = 'AMEX',   Mastercard = 'Mastercard',   Discover = 'Discover',   Unknown = 'Unknown', } ~~~ ``` ```markdown | Card Type  | Begins With          | Number Length | |------------|----------------------|---------------| | AMEX       | 34 or 37             | 15            | | Discover   | 6011                 | 16            | | Mastercard | 51, 52, 53, 54 or 55 | 16            | | VISA       | 4                    | 13 or 16      | ``` ```if:c,cpp **C/C++ note:** The return value in C is not freed. ``` ## 

# Definition  A number is a **_Special Number_** *if it s digits only consist 0, 1, 2, 3, 4 or 5* **_Given_** a number *determine if it special number or not* .   # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ 
tl;dr: # Task A number is a special number if its digits only consist 0, 1, 2, 3, 4 or 5. Given a positive number determine if it is a special number or not.  # 

Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one. 
tl;dr: 

Hongcow is ruler of the world. As ruler of the world, he wants to make it easier for people to travel by road within their own countries. The world can be modeled as an undirected graph with n nodes and m edges. k of the nodes are home to the governments of the k countries that make up the world. There is at most one edge connecting any two nodes and no edge connects a node to itself. Furthermore, for any two nodes corresponding to governments, there is no path between those two nodes. Any graph that satisfies all of these conditions is stable. Hongcow wants to add as many edges as possible to the graph while keeping it stable. Determine the maximum number of edges Hongcow can add. 
tl;dr: