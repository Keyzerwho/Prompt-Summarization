Your task is to write a function that does just what the title suggests (so, fair warning, be aware that you are not getting out of it just throwing a lame bas sorting method there) with an array/list/vector of integers and the expected number `n` of smallest elements to return. Also: * the number of elements to be returned cannot be higher than the array/list/vector length; * elements can be duplicated; * in case of duplicates, just return them according to the original order (see third example for more clarity). Same examples and more in the test cases: ```python first_n_smallest([1,2,3,4,5],3) == [1,2,3] first_n_smallest([5,4,3,2,1],3) == [3,2,1] first_n_smallest([1,2,3,4,1],3) == [1,2,1] first_n_smallest([1,2,3,-4,0],3) == [1,-4,0] first_n_smallest([1,2,3,4,5],0) == [] ``` [Performance version by FArekkusu](https://www.codewars.com/kata/5aeed69804a92621a7000077) also available
tl;dr: Your task is to write a function that does just what the title suggests with an array/list/vector of integers and the expected number n of smallest elements to return. 

Once N boys and M girls attended a party. You are given a matrix A of N rows and M columns where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0. Note that it is not necessary that if a boy x likes girl y, then girl y should like boy x. You know that if there are two different boys x and y, who both like girl z, then there will be a collision. Can you calculate the number of different collisions at this party  Note that order of boys in the collision doesn't matter. 
tl;dr: Calculate the number of different collisions if a matrix N x M of N boys and M girls are given where Aij is 1 if the i-th boy likes the j-th girl, otherwise it will be 0 and collison occurs when two boys like the same girl.  

There are n people and k keys on a straight line. Every person wants to get to the office which is located on the line as well. To do that, he needs to reach some point with a key, take the key and then go to the office. Once a key is taken by somebody, it couldn't be taken by anybody else. You are to determine the minimum time needed for all n people to get to the office with keys. Assume that people move a unit distance per 1 second. If two people reach a key at the same time, only one of them can take the key. A person can pass through a point with a key without taking it. 
tl;dr: