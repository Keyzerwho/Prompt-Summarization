# Fourier transformations are hard. Fouriest transformations are harder. This Kata is based on the SMBC Comic on fourier transformations. A fourier transformation on a number is one that converts the number to a base in which it has more `4`s ( `10` in base `6` is `14`, which has `1` four as opposed to none, hence, fourier in base `6` ). A number's fouriest transformation converts it to the base in which it has the most `4`s.   For example: `35353` is the fouriest in base `6`: `431401`. This kata requires you to create a method `fouriest` that takes a number and makes it the fouriest, telling us in which base this happened, as follows: ```python fouriest(number) -> "{number} is the fouriest ({fouriest_representation}) in base {base}" ``` ## Important notes * For this kata we don't care about digits greater than `9` ( only `0` to `9` ), so we will represent all digits greater than `9` as `'x'`: `10` in base `11` is `'x'`, `119` in base `20` is `'5x'`, `118` in base `20` is also `'5x'` * When a number has several fouriest representations, we want the one with the LOWEST base ```if:haskell,javascript * Numbers below `9` will not be tested ``` ```if:javascript * A `BigNumber` library has been provided; documentation is [here](https://mikemcl.github.io/bignumber.js/) ``` ## 
tl;dr: Create a method `fouriest` that takes a number and makes it the fouriest, telling us in which base this happened. 

Given 2 strings, your job is to find out if there is a substring that appears in both strings. You will return true if you find a substring that appears in both strings, or false if you do not. We only care about substrings that are longer than one letter long. #
tl;dr: Given 2 strings, if there is a substring that appears in both strings, return true. Otherwise, return false. We only count substrings that are > 1 in length. Lowercase and uppercase letters are the same. #

Takahashi and Aoki are going to together construct a sequence of integers. First, Takahashi will provide a sequence of integers a, satisfying all of the following conditions:  - The length of a is N.  - Each element in a is an integer between 1 and K, inclusive.  - a is a palindrome, that is, reversing the order of elements in a will result in the same sequence as the original. Then, Aoki will perform the following operation an arbitrary number of times:  - Move the first element in a to the end of a. How many sequences a can be obtained after this procedure, modulo 10^9+7  -----Constraints-----  - 1 N 10^9  - 1 K 10^9 
tl;dr: