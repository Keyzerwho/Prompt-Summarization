I'm sure you're familiar with factorials   that is, the product of an integer and all the integers below it.  For example, `5! = 120`, as `5 * 4 * 3 * 2 * 1 = 120` Your challenge is to create a function that takes any number and returns the number that it is a factorial of. So, if your function receives `120`, it should return `"5!"` (as a string). Of course, not every number is a factorial of another. In this case, your function would return `"None"` (as a string). ### 
tl;dr: Create a function that takes any number and returns the number that it is a factorial of. If the number is not a factorial of another, returns "None".  

Sasha is taking part in a programming competition. In one of the problems she should check if some rooted trees are isomorphic or not. She has never seen this problem before, but, being an experienced participant, she guessed that she should match trees to some sequences and then compare these sequences instead of trees. Sasha wants to match each tree with a sequence a_0, a_1, ..., a_{h}, where h is the height of the tree, and a_{i} equals to the number of vertices that are at distance of i edges from root.  Unfortunately, this time Sasha's intuition was wrong, and there could be several trees matching the same sequence. To show it, you need to write a program that, given the sequence a_{i}, builds two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree. Two rooted trees are isomorphic, if you can reenumerate the vertices of the first one in such a way, that the index of the root becomes equal the index of the root of the second tree, and these two trees become equal. The height of a rooted tree is the maximum number of edges on a path from the root to any other vertex. 
tl;dr: You need to write a program that, given the sequence a_{i}, build two non-isomorphic rooted trees that match that sequence, or determines that there is only one such tree. 

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.   
tl;dr: Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.   

You are given two integers $a$ and $b$. Moreover, you are given a sequence $s_0, s_1, \dots, s_{n}$. All values in $s$ are integers $1$ or $-1$. It's known that sequence is $k$-periodic and $k$ divides $n+1$. In other words, for each $k \leq i \leq n$ it's satisfied that $s_{i} = s_{i - k}$. Find out the non-negative remainder of division of $\sum \limits_{i=0}^{n} s_{i} a^{n - i} b^{i}$ by $10^{9} + 9$. Note that the modulo is unusual! 
tl;dr: