We have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. We also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). AtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 
tl;dr: You have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. You also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). You are going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 

There are n games in a football tournament. Three teams are participating in it. Currently k games had already been played.  You are an avid football fan, but recently you missed the whole k games. Fortunately, you remember a guess of your friend for these k games. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be d_1 and that of between second and third team will be d_2. You don't want any of team win the tournament, that is each team should have the same number of wins after n games. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament  Note that outcome of a match can not be a draw, it has to be either win or loss. 
tl;dr: Let x, y, and z, be non-negative integers. d_1 reprsents the absolute difference between x and y, and d_2 represents the absolute difference between y and z. Your goal is to figure out if d_1 and d_2 can become equivlanet after all moves have been expended. In each move, you can increment x, y, or z by 1. You will be given n, the total number of moves you're allowed, and k, the number of moves that had already been used. 

There is a pond with a rectangular shape. The pond is divided into a grid with H rows and W columns of squares. We will denote the square at the i-th row from the top and j-th column from the left by (i,\ j). Some of the squares in the pond contains a lotus leaf floating on the water. On one of those leaves, S, there is a frog trying to get to another leaf T. The state of square (i,\ j) is given to you by a character a_{ij}, as follows:  - . : A square without a leaf.  - o : A square with a leaf floating on the water.  - S : A square with the leaf S.  - T : A square with the leaf T. The frog will repeatedly perform the following action to get to the leaf T: "jump to a leaf that is in the same row or the same column as the leaf where the frog is currently located." Snuke is trying to remove some of the leaves, other than S and T, so that the frog cannot get to the leaf T. Determine whether this objective is achievable. If it is achievable, find the minimum necessary number of leaves to remove. -----Constraints-----  - 2   H, W   100  - a_{ij} is ., o, S or T.  - There is exactly one S among a_{ij}.  - There is exactly one T among a_{ij}. 
tl;dr: