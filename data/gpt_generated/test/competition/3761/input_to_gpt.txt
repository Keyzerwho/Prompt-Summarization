You are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$. Let's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$. For each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$. 
tl;dr: You are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$. Let's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$. For each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$. 

Given a credit card number we can determine who the issuer/vendor is with a few basic knowns. ```if:python Complete the function `get_issuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if-not:python Complete the function `getIssuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if:typescript Where `Issuer` is defined with the following enum type. ~~~typescript enum Issuer {   VISA = 'VISA',   AMEX = 'AMEX',   Mastercard = 'Mastercard',   Discover = 'Discover',   Unknown = 'Unknown', } ~~~ ``` ```markdown | Card Type  | Begins With          | Number Length | |------------|----------------------|---------------| | AMEX       | 34 or 37             | 15            | | Discover   | 6011                 | 16            | | Mastercard | 51, 52, 53, 54 or 55 | 16            | | VISA       | 4                    | 13 or 16      | ``` ```if:c,cpp **C/C++ note:** The return value in C is not freed. ``` ## 
tl;dr: ```if:python Complete the function `get_issuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if-not:python Complete the function `getIssuer()` that will determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`. ``` ```if:typescript Where `Issuer` is defined with the following enum type. ~~~typescript enum Issuer {   VISA = 'VISA',   AMEX = 'AMEX',   Mastercard = 'Mastercard',   Discover = 'Discover',   Unknown = 'Unknown', } ~~~ ``` ```markdown | Card Type  | Begins With          | Number Length | |------------|----------------------|---------------| | AMEX       | 34 or 37             | 15            | | Discover   | 6011                 | 16            | | Mastercard | 51, 52, 53, 54 or 55 | 16            | | VISA       | 4                    | 13 or 16      | ``` ```if:c,cpp **C/C++ note:** The return value in C is not freed. ``` ## 

**This Kata is intended as a small challenge for my students** All Star Code Challenge #16 Create a function called noRepeat() that takes a string argument and returns a single letter string of the **first** not repeated character in the entire string. ``` haskell noRepeat "aabbccdde" `shouldBe` 'e' noRepeat "wxyz"      `shouldBe` 'w' noRepeat "testing"   `shouldBe` 'e' ``` 
tl;dr: Create a function called noRepeat() that takes a string argument and returns a single letter string of the first not repeated character in the entire string. 

A robot is put at the origin in a two-dimensional plane. Initially, the robot is facing in the positive x-axis direction. This robot will be given an instruction sequence s. s consists of the following two kinds of letters, and will be executed in order from front to back.  - F : Move in the current direction by distance 1.  - T : Turn 90 degrees, either clockwise or counterclockwise. The objective of the robot is to be at coordinates (x, y) after all the instructions are executed. Determine whether this objective is achievable. -----Constraints-----  - s consists of F and T.  - 1 \leq |s| \leq 8 000  - x and y are integers.  - |x|, |y| \leq |s| 
tl;dr: