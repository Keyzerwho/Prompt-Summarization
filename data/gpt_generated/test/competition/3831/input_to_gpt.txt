Little Petya likes points a lot. Recently his mom has presented him n points lying on the line OX. Now Petya is wondering in how many ways he can choose three distinct points so that the distance between the two farthest of them doesn't exceed d. Note that the order of the points inside the group of three chosen points doesn't matter. 
tl;dr: Given a list of n points in one-dimensional space, find the number of ways to select 3 points such that the distance between any two is not greater than d. 

```if-not:rust Your task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak. ``` ```if:rust Your task is to write a function `to_leet_speak` that converts a regular english sentence to Leetspeak. ``` More about LeetSpeak You can read at wiki -> https://en.wikipedia.org/wiki/Leet Consider only uppercase letters (no lowercase letters, no numbers) and spaces. For example: ```if-not:rust ~~~ toLeetSpeak("LEET") returns "1337" ~~~ ``` ```if:rust ~~~ to_leet_speak("LEET") returns "1337" ~~~ ``` In this kata we use a simple LeetSpeak dialect. Use this alphabet: ``` {   A : '@',   B : '8',   C : '(',   D : 'D',   E : '3',   F : 'F',   G : '6',   H : '#',   I : '!',   J : 'J',   K : 'K',   L : '1',   M : 'M',   N : 'N',   O : '0',   P : 'P',   Q : 'Q',   R : 'R',   S : '$',   T : '7',   U : 'U',   V : 'V',   W : 'W',   X : 'X',   Y : 'Y',   Z : '2' } ``
tl;dr: Your task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak. Consider only uppercase letters and spaces. 

Mayor of city S just hates trees and lawns. They take so much space and there could be a road on the place they occupy! The Mayor thinks that one of the main city streets could be considerably widened on account of lawn nobody needs anyway. Moreover, that might help reduce the car jams which happen from time to time on the street. The street is split into n equal length parts from left to right, the i-th part is characterized by two integers: width of road s_{i} and width of lawn g_{i}. [Image]  For each of n parts the Mayor should decide the size of lawn to demolish. For the i-th part he can reduce lawn width by integer x_{i} (0   x_{i}   g_{i}). After it new road width of the i-th part will be equal to s'_{i} = s_{i} + x_{i} and new lawn width will be equal to g'_{i} = g_{i} - x_{i}. On the one hand, the Mayor wants to demolish as much lawn as possible (and replace it with road). On the other hand, he does not want to create a rapid widening or narrowing of the road, which would lead to car accidents. To avoid that, the Mayor decided that width of the road for consecutive parts should differ by at most 1, i.e. for each i (1   i < n) the inequation |s'_{i} + 1 - s'_{i}|   1 should hold. Initially this condition might not be true. You need to find the the total width of lawns the Mayor will destroy according to his plan. 
tl;dr: