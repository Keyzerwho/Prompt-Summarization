A group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\frac{n \cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road. A spanning tree is a set of roads containing exactly n - 1 roads such that it's possible to travel between any two cities using only these roads. Some spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. Note that it's not guaranteed that x is smaller than y. You would like to travel through all the cities using the shortest path possible. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once. 
tl;dr: A group of n cities is connected by a network of roads. There is an undirected road between every pair of cities, so there are $\frac{n \cdot(n - 1)}{2}$ roads in total. It takes exactly y seconds to traverse any single road. Some spanning tree of the initial network was chosen. For every road in this tree the time one needs to traverse this road was changed from y to x seconds. It is not guaranteed that x is smaller than y. Given n, x, y and a description of the spanning tree that was chosen, find the cost of the shortest path that starts in any city, ends in any city and visits all cities exactly once. 

=====Problem Statement===== A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string s, which is the company name in lowercase letters, your task is to find the top three most common characters in the string. Print the three most common characters along with their occurrence count. Sort in descending order of occurrence count. If the occurrence count is the same, sort the characters in alphabetical order. For example, according to the conditions described above, GOOGLE would have it's logo with the letters G, O, E.  
tl;dr: =====Problem Statement===== Given a string s in lowercase, your task is to find the top three most common characters in the string and their occurance count. Sort in descending order of occurrence count, and then by alphabetical order to break ties. For example, GOOGLE would output G 2 O 2 E 1 

The goal of this Kata is to return the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.   
tl;dr: Return the greatest distance of index positions between matching number values in an array or 0 if there are no matching values.   

The impending doom called final examination is approaching this year s high school seniors: one of the compulsory tasks is going to be writing an essay in their mother tongue. Mirko is under the impression that certain political parties are going to keep their promises, those regarding informatization and digitalization, which is why he thinks that this year s essays are going to be marked by a computer, instead of a human. To test his doubts, Mirko is going to write an essay that doesn t necessarily make sense at all, but should pass the automatic basic conditions check. The essay passes the check if  - it contains at least $A$, and at most $B$ words;  - every word contains at least one, and at most 15 letters;  - the used vocabulary is large enough, in other words, the essay contains at least $B/2$ different words. Mirko was up late last night watching Big Brother, so he is asking you to write such an essay instead of him. The essay should be output in a single line, using only lowercase letters of the English alphabet and spaces (therefore, without punctuation such as dots, commas and such). The words used can, but need not be, words from the English (or any) language. 
tl;dr: