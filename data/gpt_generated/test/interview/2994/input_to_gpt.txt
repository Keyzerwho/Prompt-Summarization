Complete the function that takes an array of words. You must concatenate the `n`th letter from each word to construct a new word which should be returned as a string, where `n` is the position of the word in the list. For example: ``` ["yoda", "best", "has"]  -->  "yes"   ^        ^        ^   n=0     n=1     n=2 ``` **
tl;dr: Given an array of words, you must concatenate the nth letter from each word to construct a new word which should be returned as a string, where n is the position of the word in the list. 

The USA Construction Operation (USACO) recently ordered Farmer John to arrange a row of $n$ haybale piles on the farm. The $i$-th pile contains $a_i$ haybales.  However, Farmer John has just left for vacation, leaving Bessie all on her own. Every day, Bessie the naughty cow can choose to move one haybale in any pile to an adjacent pile. Formally, in one day she can choose any two indices $i$ and $j$ ($1 \le i, j \le n$) such that $|i-j|=1$ and $a_i>0$ and apply $a_i = a_i - 1$, $a_j = a_j + 1$. She may also decide to not do anything on some days because she is lazy. Bessie wants to maximize the number of haybales in pile $1$ (i.e. to maximize $a_1$), and she only has $d$ days to do so before Farmer John returns. Help her find the maximum number of haybales that may be in pile $1$ if she acts optimally! 
tl;dr: You are given a list of $n$ integers and $d$ days. On each day you must increment an element and decrement an adjacent positive element. Find the maximum value possible for element in first postion after $d$ days. 

You have a 2D rectangular grid. Each grid cell contains either an apple, an obstacle, or is empty. Empty cells are denoted as  . , apples as  a , and obstacles as  # . You are to implement a simulation of gravity, based on the following rules:   - The obstacles do not move.  - Whenever there is an empty cell immediately below an apple, the apple moves into the empty cell. Print out the final configuration of the board after all apples reach their final locations. Merely iterating the gravity rule, a step at a time, will likely take too long on large datasets. 
tl;dr: