Chef is very organised in whatever he does and likes to maintain statistics of his work. Chef has expertise in web development and hence is a regular contributor on a forum. Chef sometimes makes multiple contributions in a single day.. Each day chef makes at least 1 contribution he is assigned a shade of green. The greater the number of contribution in a single day the darker shade of green he gets assigned and vice versa. Your job is to find out the number of days chef is assigned a same shade of green and print the number of times chef is assigned a unique shade of green. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum. The next line contains N spaced integers the number of contributions chef has made if he has made any. -----OUTPUT----- The output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green. -----CONSTRAINTS----- 1 <= T <= 25 5 <= N <= 50 1 <= Ai <= 50 -----EXAMPLE
tl;dr: Find the frequency of the unique values in a given array of size N. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum. The next line contains N spaced integers the number of contributions chef has made if he has made any. -----OUTPUT----- The output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green. -----CONSTRAINTS----- 1 <= T <= 25 5 <= N <= 50 1 <= Ai <= 50 -----EXAMPLE

On a broken calculator that has a number showing on its display, we can perform two operations: Double: Multiply the number on the display by 2, or; Decrement: Subtract 1 from the number on the display. Initially, the calculator is displaying the number X. Return the minimum number of operations needed to display the number Y.   
tl;dr: You are given two numbers X and Y. In one step, you can either double the value of X, or decrement X by 1. Return the minimum number of steps required before the value of X equals Y.   

To almost all of us solving sets of linear equations is quite obviously the most exciting bit of linear algebra.  Benny does not agree though and wants to write a quick program to solve his homework problems for him.  Unfortunately Benny's lack of interest in linear algebra means he has no real clue on how to go about this.  Fortunately, you can help him! Write a method ```solve``` that accepts a list of linear equations that your method will have to solve.  The output should be a map (a `Map` object in JavaScript) with a value for each variable in the equations.  If the system does not have a unique solution (has infinitely many solutions or is unsolvable), return ```null``` (`None` in python). 
tl;dr: The input given are lists of linear equations. You need to write a method ```solve``` that accepts the input and outputs a dictionary with a value for each variable in the equations.  If the system does not have a unique solution, return ```null```. 

Sheila is a student and she drives a typical student car: it is old, slow, rusty, and falling apart. Recently, the needle on the speedometer fell off. She glued it back on, but she might have placed it at the wrong angle. Thus, when the speedometer reads $s$, her true speed is $s+c$, where $c$ is an unknown constant (possibly negative).  Sheila made a careful record of a recent journey and wants to use this to compute $c$. The journey consisted of $n$ segments. In the $i^{\text {th}}$ segment she traveled a distance of $d_ i$ and the speedometer read $s_ i$ for the entire segment. This whole journey took time $t$. Help Sheila by computing $c$. Note that while Sheila s speedometer might have negative readings, her true speed was greater than zero for each segment of the journey. 
tl;dr: