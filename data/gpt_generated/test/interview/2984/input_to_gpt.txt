The factorial of a number, `n!`, is defined for whole numbers as the product of all integers from `1` to `n`.  For example, `5!` is `5 * 4 * 3 * 2 * 1 = 120` Most factorial implementations use a recursive function to determine the value of `factorial(n)`. However, this blows up the stack for large values of `n` - most systems cannot handle stack depths much greater than 2000 levels. Write an implementation to calculate the factorial of arbitrarily large numbers, *without recursion.* # Rules * `n < 0` should return `nil`/  `None` * `n = 0` should return `1` * `n > 0` should return `n!` # Note Codewars limits the amount of data it will send back and forth, which may introduce a false ceiling for how high of a value of `n` it will accept. All tests use values less than this limit
tl;dr: The factorial of a number, `n!`, is defined for whole numbers as the product of all integers from `1` to `n`.  Write an implementation to calculate the factorial of arbitrarily large numbers, without recursion. # Rules * `n < 0` should return `nil`/  `None` * `n = 0` should return `1` * `n > 0` should return `n!

Little Petya likes points a lot. Recently his mom has presented him n points lying on the line OX. Now Petya is wondering in how many ways he can choose three distinct points so that the distance between the two farthest of them doesn't exceed d. Note that the order of the points inside the group of three chosen points doesn't matter. 
tl;dr: Given a list of n points in one-dimensional space, find the number of ways to select 3 points such that the distance between any two is not greater than d. 

Punctual City is well known for the punctuality of its citizens and its public transportation system. It is particularly famous for its train system. It is always on time, and never too late (or even too early). Statistics about train boarding is regularly collected to keep things running smoothly. A train has cars numbered $1$ to $N$ (from front to back), each of length $L$ meters. Each car has exactly one door for boarding located at the center ($L/2$ meters from each end of the car). There are no gaps between cars. When the train stops at the boarding platform, each passenger waiting for the train walks to the door of the car which is closest to them, taking the higher numbered car in the case of a tie. Given the location of the passengers relative to the train, help the city by reporting the longest distance that any passenger has to walk and the maximum number of passengers boarding any single car. 
tl;dr: