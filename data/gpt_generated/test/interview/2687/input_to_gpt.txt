Genos recently installed the game Zuma on his phone. In Zuma there exists a line of n gemstones, the i-th of which has color c_{i}. The goal of the game is to destroy all the gemstones in the line as quickly as possible. In one second, Genos is able to choose exactly one continuous substring of colored gemstones that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again. What is the minimum number of seconds needed to destroy the entire line  Let us remind, that the string (or substring) is called palindrome, if it reads same backwards or forward. In our case this means the color of the first gemstone is equal to the color of the last one, the color of the second gemstone is equal to the color of the next to last and so on. 
tl;dr: You are given a line of n gemstones, the i-th of which has color c_{i}. The goal is to destroy all the gemstones in the line. In one second, exactly one continuous substring of colored gemstones is chosen that is a palindrome and remove it from the line. After the substring is removed, the remaining gemstones shift to form a solid line again.  What is the minimum number of seconds needed to destroy the entire line  

Sandu, a teacher in Chefland introduced his students to a new sequence i.e. 0,1,0,1,2,0,1,2,3,0,1,2,3,4........ The Sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$ Students being curious about the sequence asks the Nth element of the sequence. Help Sandu to answer the Students 
tl;dr: 0,1,0,1,2,0,1,2,3,0,1,2,3,4........ The sequence starts from 0 and increases by one till $i$(initially i equals to 1), then repeat itself with $i$ changed to $i+1$. Find the Nth term of the sequence. 

# Description "It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home.  So we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount. # Task Your job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons." Your job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.  In the first case (look below) the most candies are given to second kid (i.e second place in list/array), 8. Because of that we will give the first kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will have 8 candies.So we end up handing out 3 + 2 + 4 = 9. ```python candies ([5,8,6,4]) # return 9 candies ([1,2,4,6]) # return 11 candies ([1,6]) # return 5 candies ([]) # return -1 candies ([6]) # return -1 (because only one kid) ``` ```cs CandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9 CandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11 CandyProblem.GetMissingCandies(new [] { }) // return -1 CandyProblem.GetMissingCandies(new [] {1, 6}) // return 5 ``` ```haskell  candies [5,8,6,4] -- return 9 candies [1,2,4,6] -- return 11 candies [] -- return -1 candies [1,6] -- return 5 ``
tl;dr: # Task Given a list/array representing how much candy each child in our group has made out with, give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.  ```python candies ([5,8,6,4]) # return 9 candies ([1,2,4,6]) # return 11 candies ([1,6]) # return 5 candies ([]) # return -1 candies ([6]) # return -1 (because only one kid) ``` ```cs CandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9 CandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11 CandyProblem.GetMissingCandies(new [] { }) // return -1 CandyProblem.GetMissingCandies(new [] {1, 6}) // return 5 ``` ```haskell  candies [5,8,6,4] -- return 9 candies [1,2,4,6] -- return 11 candies [] -- return -1 candies [1,6] -- return 5 ``

Knights' tournaments were quite popular in the Middle Ages. A lot of boys were dreaming of becoming a knight, while a lot of girls were dreaming of marrying a knight on a white horse. In this problem we consider one of these tournaments.  Let's us call a tournament binary, if it runs according to the scheme described below: - Exactly N knights take part in the tournament, N=2K for some integer K > 0. 		 - Each knight has a unique skill called strength, described as an integer from the interval [1, N]. 		 - Initially, all the knights are standing in a line, waiting for a battle. Since all their strengths are unique, each initial configuration can be described as a permutation of numbers from 1 to N. 		 - There are exactly K rounds in the tournament, 2K - i + 1 knights take part in the i'th round. The K'th round is called the final. 		 - The i'th round runs in the following way: for each positive integer j   2K - i happens a battle between a knight on the 2 j'th position and a knight on the 2 j+1'th position. The strongest of two continues his tournament, taking the j'th position on the next round, while the weakest of two is forced to leave. 		 - The only knight, who has won K rounds, is the winner. The only knight, who has won K - 1 rounds, but lost the final, is the runner-up.    	 As you can see from the scheme, the winner is always the same, an initial configuration doesn't change anything. So, your task is to determine chances of each knight to appear in the final. Formally, for each knight you need to count the number of initial configurations, which will lead him to the final. Since the number can be extremly huge, you are asked to do all the calculations under modulo 109 + 9. 
tl;dr: