#Permutation  position In this kata you will have to permutate through a string of lowercase letters, each permutation will start at ```a``` and you must calculate how many iterations it takes to reach the current permutation. ##examples ``` input: 'a' result: 1 input: 'c' result: 3 input: 'z' result: 26 input: 'foo' result: 3759 input: 'aba' result: 27 input: 'abb' result: 28 ``
tl;dr: You will have to permutate through a string of lowercase letters, each permutation will start at a and you must calculate how many iterations it takes to reach the current permutation. 

Jzzhu has picked n apples from his big apple tree. All the apples are numbered from 1 to n. Now he wants to sell them to an apple store.  Jzzhu will pack his apples into groups and then sell them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Of course, each apple can be part of at most one group. Jzzhu wonders how to get the maximum possible number of groups. Can you help him  
tl;dr: You have n apples numbered from 1 to n. You have to group them. Each group must contain two apples, and the greatest common divisor of numbers of the apples in each group must be greater than 1. Each apple can be part of at most one group. Get the maximum possible number of groups. 

Given an array containing only zeros and ones, find the index of the zero that, if converted to one, will make the longest sequence of ones. For instance, given the array: ``` [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1] ``` replacing the zero at index 10 (counting from 0) forms a sequence of 9 ones: ``` [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1]                   '------------^------------' ``` Your task is to complete the function that determines where to replace a zero with a one to make the maximum length subsequence. **
tl;dr: Given an array containing only zeros and ones, find the index of the zero that, if converted to one,  will make the longest sequence of ones. For instance, given the array: ``` [1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1] ``` replacing the zero at index 10 forms a sequence of 9 ones: If there are multiple valid answers, return the last on

Mirko was bored at his chemistry class, so he played Bomb Switcher on his cell phone. Unfortunately, he was spotted and was given a ridiculously heavy assignment for homework. For a given valid math expression with brackets, he must find all different expressions that can be obtained by removing valid pairs of brackets from the original expression. Two expressions are different if there is a character at which they differ. For example, given $(2+(2*2)+2)$, one can get $(2+2*2+2)$, $2+(2*2)+2$, and $2+2*2+2$. $(2+2*2)+2$ and $2+(2*2+2)$ can t be reached, since we would have to remove pairs of brackets that are not valid. More than one pairs of brackets can surround the same part of the expression. 
tl;dr: