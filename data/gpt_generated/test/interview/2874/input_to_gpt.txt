We have a set of consecutive numbers from ```1``` to ```n```. We want to count all the subsets that do not contain consecutive numbers. E.g. If our set ```S1``` is equal to ```[1,2,3,4,5]``` The subsets that fulfill these property are: ``` [1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5] ``` A total of      ```12   ``` subsets. From the set ```S2``` equals to```[1,2,3]```, it is obvious that we have only ```4``` subsets and are: ``` [1],[2],[3],[1,3] ``` Make a code that may give the amount of all these subsets for any integer       ```n >= 2       ```. Features of the random tests: ``` number of tests = 100  10 <= n <= 120 ``
tl;dr: We have a set of consecutive numbers from ```1``` to ```n```. We want to count all the subsets that do not contain consecutive numbers. E.g. If ```S1``` is ```[1,2,3,4,5]``` The qualified subsets are: ``` [1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5] ``` A total of      ```12   ``` subsets. If ```S2``` is ```[1,2,3]```, we have only ```4``` qualified subsets : ``` [1],[2],[3],[1,3] ``` Make a code that may give the amount of all these subsets for any integer       ```n >= 2       ```. Features of the random tests: ``` number of tests = 100  10 <= n <= 120 ``

Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between). For example: Given binary tree [3,9,20,null,null,15,7],     3    / \   9  20     /  \    15   7 return its zigzag level order traversal as: [   [3],   [20,9],   [15,7] 
tl;dr: Given a binary tree, return the zigzag level order traversal of its nodes' values. For example: Given binary tree [3,9,20,null,null,15,7],     3    / \   9  20     /  \    15   7 return its zigzag level order traversal as: [   [3],   [20,9],   [15,7] 

**This Kata is intended as a small challenge for my students** All Star Code Challenge #16 Create a function called noRepeat() that takes a string argument and returns a single letter string of the **first** not repeated character in the entire string. ``` haskell noRepeat "aabbccdde" `shouldBe` 'e' noRepeat "wxyz"      `shouldBe` 'w' noRepeat "testing"   `shouldBe` 'e' ``` 
tl;dr: Create a function called noRepeat() that takes a string argument and returns a single letter string of the first not repeated character in the entire string. 

It s Christmas time and JW s $1$-dimensional shop is selling Christmas trees. However, the demand for trees is much higher than the number of trees available. Hence, JW has come up with a special strategy to help decide who gets what tree: a game of Musical Trees! Musical Trees is much like the game Musical Chairs. There s a set of trees lined up in a straight ($1$-dimensional) line. At first, everyone starts by wandering around the store while the music is playing. When the music stops, everyone runs to the nearest tree (the tree the smallest distance away) and whoever reaches a tree first gets to the claim that tree. Since people are lazy, they will only ever try to run to the closest tree to them, and hence multiple people may try to get the same tree. Note this means some trees may be unclaimed if they are closest to no one. Also, like in Musical Chairs, no tree can be claimed by more than one person. The music has just stopped in Musical Trees and as everyone is running to the closest tree, you want to figure out the number of people who won t get any tree. 
tl;dr: