Bob is preparing to pass IQ test. The most frequent task in this test is `to find out which one of the given numbers differs from the others`. Bob observed that one number usually differs from the others in **evenness**. Help Bob   to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number. `!` Keep in mind that your task is to help Bob solve a `real IQ test`, which means indexes of the elements start from `1 (not 0)` ##
tl;dr: Write a function that among the given numbers finds one that is different in evenness, and return a position of this number. 

The statement of this problem is the same as the statement of problem C2. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd. You are given a regular polygon with $2 \cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon. Your task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square. You can rotate $2n$-gon and/or the square. 
tl;dr: You are given a regular polygon with $2 \cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon. Your task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square. You can rotate $2n$-gon and/or the square. 

You've got array A, consisting of n integers and a positive integer k. Array A is indexed by integers from 1 to n. You need to permute the array elements so that value $\sum_{i = 1}^{n - k}|A [ i ] - A [ i + k ]|$ became minimal possible. In particular, it is allowed not to change order of elements at all. 
tl;dr: You've got array A, consisting of n integers and a positive integer k. You need to permute the array elements so that value $\sum_{i = 1}^{n - k}|A [ i ] - A [ i + k ]|$ became as minimal as possible. It is not allowed to change order of elements at all. 

Rhymes are complicated. The extent to which one word rhymes with another depends on how similar they sound; but if they are too similar then they aren t considered a rhyme at all. Karim has a huge list of $N$ words and wants to determine the maximally rhyming pair of words. To that end he has introduced the concept of rhyme power: Given two words $S$ and $T$, their rhyme power $r(S,T)$ is defined as  - $0$, if one word is a suffix of the other,  - the length of their longest common suffix, otherwise. For instance, the rhyme power of  fire  and  desire  is $3$, because their longest common suffix  ire  has length $3$. In contrast, the rhyme power of  impossible  and  possible  is $0$, because  possible  is a suffix of  impossible . Given Karim s list of $N$ words, your task is to find the maximum value of $r(S, T)$ over all pairs of words. 
tl;dr: