=====Problem Statement===== You are asked to ensure that the first and last names of people begin with a capital letter in their passports. For example, alison heck should be capitalised correctly as Alison Heck.  alison heck => Alison Heck Given a full name, your task is to capitalize the name appropriately. 
tl;dr: =====Problem Statement===== Given an alphanumeric string, capitalize each word For example: alison heck => Alison Heck 

Toad Rash has a binary string $s$. A binary string consists only of zeros and ones. Let $n$ be the length of $s$. Rash needs to find the number of such pairs of integers $l$, $r$ that $1 \leq l \leq r \leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \leq x, k \leq n$, $l \leq x < x + 2k \leq r$, and $s_x = s_{x+k} = s_{x+2k}$. Find this number of pairs for Rash. 
tl;dr: Given a binary string $s$ consisting of zeros and ones of length $n$. Find the number of such pairs of integers $l$, $r$ that $1 \leq l \leq r \leq n$ and there is at least one pair of integers $x$, $k$ such that $1 \leq x, k \leq n$, $l \leq x < x + 2k \leq r$, and $s_x = s_{x+k} = s_{x+2k}$. 

You are given a string S of length n with each character being one of the first m lowercase English letters.  Calculate how many different strings T of length n composed from the first m lowercase English letters exist such that the length of LCS (longest common subsequence) between S and T is n - 1. Recall that LCS of two strings S and T is the longest string C such that C both in S and T as a subsequence. 
tl;dr: You are given a string S of length n with each character being one of the first m lowercase English letters.  Calculate how many different strings T of length n can be composed from the first m lowercase English letters exist such that the length of Longest Common Subsequence between S and T is n - 1. 

Whitespace is an esoteric programming language (esolang) created in 2003 by Edwin Brady and Chris Morris. Many elements of Whitespace are familiar, including the fact that it is imperative and stack-based, but it has one main distinguishing feature: the only significant characters in a Whitespace source code file are [Tab] (ASCII $9$), [Newline] (ASCII $10$), and [Space] (ASCII $32$). This, of course, has the intentionally humorous result that all source code files using only these characters appear completely blank in most text editors, which can be problematic if you have a boss who keeps looking over your shoulder for evidence of productivity. (A Whitespace source code file can, in fact, include other characters, but these are simply ignored, so we will not consider that possibility here.) For this problem, you will work with a simplified version of Whitespace that we call Whitespace Lite, affectionately known as Litespace. Let $W$ denote the $3$-character set $\{ $[Tab], [Newline], [Space]$\} $. A Litespace program is a sequence of instructions, each of which consists of two or more characters from $W$. There is a stack available that holds signed integers; when a Litespace program begins, the stack is initially empty. In the list of instructions, given below, only one instruction (the last) is specifically intended to produce output, but most other instructions produce output if an error condition is encountered. Litespace Instruction Set:  - [Space][Space]<integer>   Push the specified integer onto the stack.  - [Space][Newline][Space]   Make a copy of the topmost stack element and push this copy onto the stack. If the stack is empty, print  Invalid copy operation  on a line by itself.  - [Space][Newline][Tab]   Swap the two topmost stack elements. If the stack contains fewer than two elements, print  Invalid swap operation  on a line by itself and leave the stack unchanged.  - [Space][Newline][Newline]   Remove and discard the topmost stack element. If the stack is empty, print  Invalid remove operation  on a line by itself.  - [Tab][Space][Space][Space]   Remove the two topmost stack elements and push their sum onto the stack. If the stack contains fewer than two elements, print  Invalid addition operation  on a line by itself and leave the stack unchanged.  - [Tab][Space][Space][Tab]   Remove the two topmost stack elements and push their difference onto the stack (the topmost element subtracted from the second topmost element). If the stack contains fewer than two elements, print  Invalid subtraction operation  on a line by itself and leave the stack unchanged.  - [Tab][Space][Space][Newline]   Remove the two topmost stack elements and push their product onto the stack. If the stack contains fewer than two elements, print  Invalid multiplication operation  on a line by itself and leave the stack unchanged.  - [Tab][Space][Tab][Space]   Remove the two topmost stack elements and push their quotient onto the stack (the second topmost element divided by the topmost element); this is integer division, so discard any fractional part of the quotient. If the stack contains fewer than two elements, print  Invalid division operation  on a line by itself and leave the stack unchanged. If the stack contains two or more elements, the topmost of which is $0$, print  Division by zero  on a line by itself and leave the stack unchanged.  - [Tab][Newline][Space][Tab]   Remove the integer on the top of the stack and print it on a line by itself (in the usual base-$10$ representation). If the stack is empty, print  Invalid print operation  on a line by itself. In the first instruction above, an integer to be pushed onto the stack is in binary form, encoded as two or more characters from the set $\{ $[Space], [Tab]$\} $ followed by a [Newline] character. The first character encodes the sign of the integer ([Space] $=$ positive, [Tab] $=$ negative), and the following [Space] and [Tab] characters encode the bits in the binary representation of the absolute value (magnitude) of the integer, with the convention that [Space] $= 0$, [Tab] $= 1$. The first bit after the sign bit is most significant, and there are no leading zeros. For example, since $13$ in binary is $1101$, the encoding of $-13$ is [Tab][Tab][Tab][Space][Tab][Newline]  Note that there are two encodings of $0$, one for $+0$ and one for $-0$. These are interchangeable. However, in the last instruction above, if the value to be printed is zero, print  0 , not  -0 . Given a Litespace program, produce the program s output. For compactness, the program will be given as a string of characters from the set $\{ $ T ,  N ,  S $\} $, where  T  denotes [Tab],  N  denotes [Newline], and  S  denotes [Space]. 
tl;dr: