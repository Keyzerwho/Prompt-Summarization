Given a string of words, you need to find the highest scoring word. Each letter of a word scores points according to its position in the alphabet: `a = 1, b = 2, c = 3` etc. You need to return the highest scoring word as a string. If two words score the same, return the word that appears earliest in the original string. All letters will be lowercase and all inputs will be valid
tl;dr: Given a string of lowercase words, You need to return the highest scoring word as a string. If two words score the same, return the word that appears earliest in the original string

Igor the analyst has adopted n little bunnies. As we all know, bunnies love carrots. Thus, Igor has bought a carrot to be shared between his bunnies. Igor wants to treat all the bunnies equally, and thus he wants to cut the carrot into n pieces of equal area.  Formally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. Igor wants to make n - 1 cuts parallel to the base to cut the carrot into n pieces. He wants to make sure that all n pieces have the same area. Can you help Igor determine where to cut the carrot so that each piece have equal area   [Image] Illustration to the first example.  
tl;dr: You have n bunnies. You have bought a carrot to be shared between these bunnies. You want to treat all the bunnies equally, and thus want to cut the carrot into n pieces of equal area.  Formally, the carrot can be viewed as an isosceles triangle with base length equal to 1 and height equal to h. You want to make n - 1 cuts parallel to the base to cut the carrot into n pieces. Make sure that all n pieces have the same area. 

You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, we will compute a_i + b_j and write it on a sheet of paper. That is, we will write N^2 integers in total. Compute the XOR of these N^2 integers. Definition of XOR The XOR of integers c_1, c_2, ..., c_m is defined as follows:  - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even. For example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 
tl;dr: You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, Compute a_i + b_j. Compute the XOR of these N^2 integers. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 

In Omkar's last class of math, he learned about the least common multiple, or $LCM$. $LCM(a, b)$ is the smallest positive integer $x$ which is divisible by both $a$ and $b$. Omkar, having a laudably curious mind, immediately thought of a problem involving the $LCM$ operation: given an integer $n$, find positive integers $a$ and $b$ such that $a + b = n$ and $LCM(a, b)$ is the minimum value possible. Can you help Omkar solve his ludicrously challenging math problem  
tl;dr: