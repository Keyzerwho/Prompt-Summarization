Consider a sequence [a_1, a_2, ... , a_{n}]. Define its prefix product sequence $[ a_{1} \operatorname{mod} n,(a_{1} a_{2}) \operatorname{mod} n, \cdots,(a_{1} a_{2} \cdots a_{n}) \operatorname{mod} n ]$. Now given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1]. 
tl;dr: Consider a sequence [a_1, a_2, ... , a_{n}].  Let's define its prefix product sequence as $[ a_{1} \operatorname{mod} n,(a_{1} a_{2}) \operatorname{mod} n, \cdots,(a_{1} a_{2} \cdots a_{n}) \operatorname{mod} n ]$. Now given n, find a permutation of [1, 2, ..., n], such that its prefix product sequence is a permutation of [0, 1, ..., n - 1]. 

Give me Chocolate Anushka wants to buy chocolates.there are many chocolates in front of her, tagged with their prices. Anushka has only a certain amount to spend, and she wants to maximize the number of chocolates she buys with this money. Given a list of prices and an amount to spend, what is the maximum number of chocolates Anushka can buy   For example,  if prices =[1,2,3,4] and Anushka has k=7 to spend, she can buy items [1,2,3] for 6 , or [3,4] for 7 units of currency. she would choose the first group of 3 items. Input Format The first line contains two integers, n and k , the number of priced chocolates and the amount Anushka has to spend. The next line contains n space-separated integers prices[i] Constraints 1<= n <= 105 1<= k <= 109 1<= prices[i] <= 109 A chocolate can't be bought multiple times. Output Format An integer that denotes the maximum number of chocolates Anushka can buy for her. Sample Input 7 50 1 12 5 111 200 1000 10 Sample Output 4 Explanation she can buy only 4 chocolatess at most. These chocolates have the following prices: 1, 12, 5, 10
tl;dr: You are given an array of size n and a limiting number k. Find the maximum count of numbers from array whose sum is not greater than k. Input Format The first line contains two integers, n and k , the number of elements in array and a limiting number. The next line contains n space-separated integers array[i] Constraints 1<= n <= 105 1<= k <= 109 1<= array[i] <= 109 A number can't be repeated multiple times. Output Format An integer that denotes the maximum count of array numbers whose sum can't be greater than k. Sample Input 7 50 1 12 5 111 200 1000 10 Sample Output 

Given a string of words, you need to find the highest scoring word. Each letter of a word scores points according to its position in the alphabet: `a = 1, b = 2, c = 3` etc. You need to return the highest scoring word as a string. If two words score the same, return the word that appears earliest in the original string. All letters will be lowercase and all inputs will be valid
tl;dr: Given a string of lowercase words, You need to return the highest scoring word as a string. If two words score the same, return the word that appears earliest in the original string

Particle colliders are difficult to build and experiments are costly to run. Before running any real experiments it is better to do a simulation to test out the ideas first. You are required to write a very simple simulator for this problem. There are only three particles in this system, and all particles are confined to an infinite plane so that they can be modelled as circles. Their locations are specified only by the $x_ i$ and $y_ i$ coordinates of their centers ($1 \leq i \leq 3$). All three particles have the same radius $r$, and are initially stationary. We are given a vector $(x_ v, y_ v)$ specifying the direction particle $1$ will move when the experiment starts. When particle $i$ hits particle $j$, particle $j$ will start moving in the direction perpendicular to the tangent at the point of the contact, away from particle $i$. Particle $i$ will cease to exist and be converted to radiation. A moving particle that does not hit another will continue moving indefinitely. There are a number of possible scenarios your simulator should identify:  - particle $1$ hits particle $2$, which in turns hits particle $3$;  - particle $1$ hits particle $3$, which in turns hits particle $2$;  - particle $1$ hits particle $2$, which moves indefinitely;  - particle $1$ hits particle $3$, which moves indefinitely;  - particle $1$ moves indefinitely. 
tl;dr: