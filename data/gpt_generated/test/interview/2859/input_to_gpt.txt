You like playing chess tournaments online. In your last tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point (since there is not a "previous game"). The outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game. After the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug. Compute the maximum score you can get by cheating in the optimal way. 
tl;dr: In your tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost. When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point. The outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game. After the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug. Compute the maximum score you can get by cheating in the optimal way. 

Polycarp has $n$ different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: "0001", "11", "0" and "0011100". Polycarp wants to offer his set of $n$ binary words to play a game "words". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: "0101", "1", "10", "00", "00001". Word reversal is the operation of reversing the order of the characters. For example, the word "0111" after the reversal becomes "1110", the word "11010" after the reversal becomes "01011". Probably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that:  the final set of $n$ words still contains different words (i.e. all words are unique);  there is a way to put all words of the final set of words in the order so that the final sequence of $n$ words is consistent with the game rules.  Polycarp wants to reverse minimal number of words. Please, help him. 
tl;dr: You are given $n$ different binary words. You want to order the words such that the first character of a word matches the last character of the previous word. If you cannot put the words in that order then you can reverse some words so that: the final set of $n$ words  still contains different words; there is a way to put all words in the order specified. 

Particle colliders are difficult to build and experiments are costly to run. Before running any real experiments it is better to do a simulation to test out the ideas first. You are required to write a very simple simulator for this problem. There are only three particles in this system, and all particles are confined to an infinite plane so that they can be modelled as circles. Their locations are specified only by the $x_ i$ and $y_ i$ coordinates of their centers ($1 \leq i \leq 3$). All three particles have the same radius $r$, and are initially stationary. We are given a vector $(x_ v, y_ v)$ specifying the direction particle $1$ will move when the experiment starts. When particle $i$ hits particle $j$, particle $j$ will start moving in the direction perpendicular to the tangent at the point of the contact, away from particle $i$. Particle $i$ will cease to exist and be converted to radiation. A moving particle that does not hit another will continue moving indefinitely. There are a number of possible scenarios your simulator should identify:  - particle $1$ hits particle $2$, which in turns hits particle $3$;  - particle $1$ hits particle $3$, which in turns hits particle $2$;  - particle $1$ hits particle $2$, which moves indefinitely;  - particle $1$ hits particle $3$, which moves indefinitely;  - particle $1$ moves indefinitely. 
tl;dr: