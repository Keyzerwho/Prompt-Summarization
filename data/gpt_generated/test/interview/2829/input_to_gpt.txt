Check if given chord is minor or major. _____________________________________________________________ Rules: 1. Basic minor/major chord have three elements. 2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4. 3. Chord is major when interval between first and second element equals 4 and between second and third -> 3. 4. In minor/major chord interval between first and third element equals... 7. _______________________________________________________________ There is a preloaded list of the 12 notes of a chromatic scale built on C. This means that there are (almost) all allowed note' s names in music. notes =  ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B'] Note that e. g. 'C#' - 'C' = 1, 'C' - 'C#' = 1, 'Db' - 'C' = 1 and 'B' - 'C' = 1.  
tl;dr: Given a string, determine if given string is minor or major or not a chord. _____________________________________________________________ Rules: 1. Basic chord have three elements. 2. Chord is minor when interval between first and second element equals 3 and between second and third -> 4. 3. Chord is major when interval between first and second element equals 4 and between second and third -> 3. 4. In minor/major chord interval between first and third element equals... 7. _______________________________________________________________ notes =  ['C', ['C#', 'Db'], 'D', ['D#', 'Eb'], 'E', 'F', ['F#', 'Gb'], 'G', ['G#', 'Ab'], 'A', ['A#', 'Bb'], 'B'] 

Polycarp has $n$ different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: "0001", "11", "0" and "0011100". Polycarp wants to offer his set of $n$ binary words to play a game "words". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: "0101", "1", "10", "00", "00001". Word reversal is the operation of reversing the order of the characters. For example, the word "0111" after the reversal becomes "1110", the word "11010" after the reversal becomes "01011". Probably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that:  the final set of $n$ words still contains different words (i.e. all words are unique);  there is a way to put all words of the final set of words in the order so that the final sequence of $n$ words is consistent with the game rules.  Polycarp wants to reverse minimal number of words. Please, help him. 
tl;dr: You are given $n$ different binary words. You want to order the words such that the first character of a word matches the last character of the previous word. If you cannot put the words in that order then you can reverse some words so that: the final set of $n$ words  still contains different words; there is a way to put all words in the order specified. 

Morse Code is an assignment of sequences of dots and dashes to alphabet characters. You are to create a Morse-like code that yields the shortest total length to a given message, and return that total length. A dot symbol has length $1$. A dash symbol has length $3$. The gap between symbols within a character encoding has length $1$. The gap between character encodings has length $3$. Spaces, punctuation, and alphabetic case are ignored, so the text:The quick brown dog jumps over the lazy fox. is encoded as though it were justTHEQUICKBROWNDOGJUMPSOVERTHELAZYFOX For example, with input ICPC, the answer is $17$: Encode the C s with a single dot, the I with a dash, and the P with two dots, for an encoding of  $\bullet $ $\bullet \bullet $ $\bullet $ which has length$(3)+3+(1)+3+(1+1+1)+3+(1) = 17$.  
tl;dr: