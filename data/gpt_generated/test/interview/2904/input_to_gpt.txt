Theatre Square in the capital city of Berland has a rectangular shape with the size n   m meters. On the occasion of the city's anniversary, a decision was taken to pave the Square with square granite flagstones. Each flagstone is of the size a   a. What is the least number of flagstones needed to pave the Square  It's allowed to cover the surface larger than the Theatre Square, but the Square has to be covered. It's not allowed to break the flagstones. The sides of flagstones should be parallel to the sides of the Square. Input The input contains three positive integer numbers in the first line: n,  m and a (1    n, m, a   10^9). Output Print the needed number of flagstones in new line. 
tl;dr: Given n, m and a, calculate the number of squares of side length a required to completely cover a rectangle of length m and breadth n. Input The input contains three positive integer numbers in the first line: n,  m and a (1    n, m, a   10^9). Output Print the needed squares. 

This is a follow up from my kata The old switcheroo Write ```python def encode(str) ``` that takes in a string ```str``` and replaces all the letters with their respective positions in the English alphabet. ```python encode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd encode('codewars') == '315452311819' encode('abc-#@5') == '123-#@5' ``` String are case sensitive
tl;dr: Write a function encode that takes in a string str and replaces all the letters with their respective positions in the English alphabet. String are case sensitive. 

Given that  ``` f0 = '0' f1 = '01' f2 = '010' = f1 + f0 f3 = '01001' = f2 + f1 ``` You will be given a number and your task is to return the `nth` fibonacci string. For example: ``` solve(2) = '010' solve(3) = '01001' ``` More examples in test cases. Good luck! If you like sequence Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3
tl;dr: You will be given a number and your task is to return the nth fibonacci string. 

At some point or another, most computer science students have written a standard Sudoku solving program. This is yet another  put numbers in a grid  puzzle. Numbers are placed in the grid so that each outlined region contains the numbers $1$ to $n$, where $n$ is the number of squares in the region. The same number can never touch itself, not even diagonally. Incomplete Grid Solution Grid For this problem, you will write a program that takes as input an incomplete puzzle grid and outputs the puzzle solution grid. 
tl;dr: