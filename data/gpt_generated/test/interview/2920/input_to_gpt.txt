# Task **_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That ,  # Conditions : * **_N_**  is *divisible by divisor* * **_N_**  is *less than or equal to bound*  * **_N_**  is *greater than 0*. ___ 
tl;dr: # Task Given two positive values: divisor and bound. Write a function maxMultiple(divisor, bound) to find the largest integer that is divisible by divisor and less than or equal to bound but greater than 0. It's guaranteed that a divisor is found. # 

You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, we will compute a_i + b_j and write it on a sheet of paper. That is, we will write N^2 integers in total. Compute the XOR of these N^2 integers. Definition of XOR The XOR of integers c_1, c_2, ..., c_m is defined as follows:  - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even. For example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 
tl;dr: You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, Compute a_i + b_j. Compute the XOR of these N^2 integers. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 

You have recently made a grid traversing robot that can find its way from the top left corner of a grid to the bottom right corner. However, you had forgotten all your AI programming skills, so you only programmed your robot to go rightwards and downwards (that s after all where the goal is). You have placed your robot on a grid with some obstacles, and you sit and observe. However, after a while you get tired of observing it getting stuck, and ask yourself  How many paths are there from the start position to the goal position  , and  If there are none, could the robot have made it to the goal if it could walk upwards and leftwards   So you decide to write a program that, given a grid of size $n \times n$ with some obstacles marked on it where the robot cannot walk, counts the different ways the robot could go from the top left corner $s$ to the bottom right $t$, and if none, tests if it were possible if it could walk up and left as well. However, your program does not handle very large numbers, so the answer should be given modulo $2^{31} - 1$. 
tl;dr: