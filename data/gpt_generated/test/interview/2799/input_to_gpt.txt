# Task  Consider the following algorithm for constructing 26 strings S(1) .. S(26): ``` S(1) = "a"; For i in [2, 3, ..., 26]: S(i) = S(i - 1) + character(i) + S(i - 1).```  For example: ``` S(1) = "a" S(2) = S(1) + "b" + S(1) = "a" + "b" + "a" = "aba" S(3) = S(2) + "c" + S(2) = "aba" + "c" +"aba" = "abacaba" ... S(26) = S(25) + "z" + S(25)``` Finally, we got a long string S(26). Your task is to find the `k`th symbol (indexing from 1) in the string S(26). All strings consist of lowercase letters only. # Input / Output  - `[input]` integer `k`   1   k < 2^(26)  - `[output]` a string(char in C#)   the `k`th symbol of S(26
tl;dr: # Task  Consider the following algorithm for constructing strings S(1) .. S(26): ``` S(1) = "a"; For i in [2, 3, ..., 26]: S(i) = S(i - 1) + character(i) + S(i - 1).``` Your task is to find the `k`th symbol (indexing from 1) in the string S(26). # Input / Output  - `[input]` integer `k`   1   k < 2^(26)  - `[output]` a string(char in C#)   the `k`th symbol of S(26

# A History Lesson Soundex is an interesting phonetic algorithm developed nearly 100 years ago for indexing names as they are pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling. Reference: https://en.wikipedia.org/wiki/Soundex # Preface I first read about Soundex over 30 years ago. At the time it seemed to me almost  like  A.I. that you could just type in somebody's name the way it sounded and there was still a pretty good chance it could match the correct person record. That was about the same year as the first "Terminator" movie so it was easy for me to put 2 and 2 together and conclude that Arnie must have had some kind of futuristic Soundex chip in his titanium skull helping him to locate ```Serah Coner```... or was it ```Sarh Connor```... or maybe ```Sayra Cunnarr```... :-) # Task In this Kata you will encode strings using a Soundex variation called "American Soundex" using the following (case insensitive) steps: * Save the first letter. Remove all occurrences of ```h``` and ```w``` except first letter. * Replace all consonants (include the first letter) with digits as follows:  * ```b```, ```f```, ```p```, ```v``` = 1  * ```c```, ```g```, ```j```, ```k```, ```q```, ```s```, ```x```, ```z``` = 2  * ```d```, ```t``` = 3  * ```l``` = 4  * ```m```, ```n``` = 5  * ```r``` = 6 * Replace all adjacent same digits with one digit. * Remove all occurrences of ```a```, ```e```, ```i```, ```o```, ```u```, ```y``` except first letter. * If first symbol is a digit replace it with letter saved on step 1. * Append 3 zeros if result contains less than 3 digits. Remove all except first letter and 3 digits after it ## Input A space separated string of one or more names. E.g. ```Sarah Connor``` ## Output Space separated string of equivalent Soundex codes (the first character of each code must be uppercase). E.g. ```S600 C560``
tl;dr: # Task Given case insensitive strings, you will encode strings using a Soundex variation called "American Soundex". # Input A space separated string of one or more names. E.g. Sarah Connor # Output Space separated string of equivalent Soundex codes, the first character of each code must be uppercase. E.g. S600 C56

First Orchard is a cooperative game for children 2 years and up. In this simple game, the players pick colored fruits from trees in an orchard and place them into a basket. To make the game more interesting, a raven tries to reach the orchard to steal the fruits. If the players are successful in moving all fruits into the basket before the raven can get to the orchard, they ll win. If the raven gets there first, the players lose! Your task is to determine the probability with which the players will win! The game is played as follows. There are $4$ trees in the orchard, each bearing a different type of fruit: red apples, green apples, blue plums, and yellow pears. The raven tries to reach the orchard through a pathway containing one or more steps. At each turn, the players roll a six-sided die. Four of the faces show a color (red, green, yellow, blue), the fifth face shows a fruit basket, and the sixth face shows a raven. All six faces can appear with equal probability.  - Red, Green, Yellow, Blue. In these cases, a fruit with the corresponding color is placed into the basket, provided the tree corresponding to this color still has any fruits left to pick. Otherwise, the players move on to the next turn.  - Fruit Basket. If the players roll the  basket  face, they will pick a fruit from the tree that has the largest number of fruits left. If there are multiple such trees with the same number of fruits, any of the trees can be chosen.  - Raven. If the  raven  face appears on the die, then the raven moves one step closer towards the orchard. The game is over if either the players have picked all fruits, or if the raven reaches the orchard, whichever happens first. If the raven reaches the orchard before the players have placed all fruits into the basket, the players lose. 
tl;dr: