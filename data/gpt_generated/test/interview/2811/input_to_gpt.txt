The name of our college is "Government College of Engineering and Textile Technology Berhampore". There is another college named "Government College of Engineering and Textile Technology Serampore". As the names are quite similar, those who are unaware of existence of both the colleges, often get confused. And mistake one with other. Given a string, if it contains the word berhampore (case insensitive), print GCETTB or if it contains serampore(case-insensitive), print GCETTS . If the string contains neither print Others. If it contains both Berhampore and Serampore print Both  Input  - First line contains single integer T, No. of test case   - Next line for every test contain case a string S  Output Print GCETTB or GCETTS or Others or Both on a new line Constraints  - 1 <= T <= 10  - 0 <= len(S) <= 100   - S contain a-z and A-Z and space only Sample Input 3 Government clg Berhampore SeRaMporE textile college  Girls college Kolkata Sample Output GCETTB GCETTS Others        Explanation Self-Explanator
tl;dr: You are given a string, if it contains the word berhampore , print GCETTB or if it contains serampore print GCETTS. If it contains both Berhampore and Serampore print Both, otherwise print others.Ignore the case.   Input  - First line contains single integer T, No. of test case   - Next line for every test contain case a string S  Output Print GCETTB or GCETTS or Others or Both on a new line Constraints  - 1 <= T <= 10  - 0 <= len(S) <= 100   - S contain a-z and A-Z and space only Sample Input 3 Government clg Berhampore SeRaMporE textile college  Girls college Kolkata Sample Output GCETTB GCETTS Others      

For a vector $\vec{v} = (x, y)$, define $|v| = \sqrt{x^2 + y^2}$. Allen had a bit too much to drink at the bar, which is at the origin. There are $n$ vectors $\vec{v_1}, \vec{v_2}, \cdots, \vec{v_n}$. Allen will make $n$ moves. As Allen's sense of direction is impaired, during the $i$-th move he will either move in the direction $\vec{v_i}$ or $-\vec{v_i}$. In other words, if his position is currently $p = (x, y)$, he will either move to $p + \vec{v_i}$ or $p - \vec{v_i}$. Allen doesn't want to wander too far from home (which happens to also be the bar). You need to help him figure out a sequence of moves (a sequence of signs for the vectors) such that his final position $p$ satisfies $|p| \le 1.5 \cdot 10^6$ so that he can stay safe. 
tl;dr: You are at the origin. You will make $n$ moves. There are $n$ vectors $\vec{v_1}, \vec{v_2}, \cdots, \vec{v_n}$. During the $i$-th move you will either move in the direction $\vec{v_i}$ or $-\vec{v_i}$. Figure out a sequence of moves such that your final position $p$ satisfies $|p| \le 1.5 \cdot 10^6$. 

Jon and Joe have received equal marks in the school examination.  But, they won't reconcile in peace when equated with each other.  To prove his might, Jon challenges Joe to write a program to find all possible number combos that sum to a given number.  While unsure whether he would be able to accomplish this feat or not, Joe accpets the challenge.  Being Joe's friend, your task is to help him out. # Task Create a function `combos`, that accepts a single positive integer `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`. 
tl;dr: Your need to create a function `combos` that accepts `num` (30 > `num` > 0) and returns an array of arrays of positive integers that sum to `num`. For an optimal solution, the following operation should complete within 6000ms

You are given a rooted tree with $n$ nodes. The nodes are numbered $1..n$. The root is node $1$, and $m$ of the nodes are colored red, the rest are black. You would like to choose a subset of nodes such that there is no node in your subset which is an ancestor of any other node in your subset. For example, if A is the parent of B and B is the parent of C, then you could have at most one of A, B or C in your subset. In addition, you would like exactly $k$ of your chosen nodes to be red. If exactly $m$ of the nodes are red, then for all $k=0..m$, figure out how many ways you can choose subsets with $k$ red nodes, and no node is an ancestor of any other node. 
tl;dr: