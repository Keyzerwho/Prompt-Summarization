Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. 
tl;dr: Delete all nodes that have duplicate numbers in a given sorted linked list, leaving only distinct numbers from the original list. 

A simple string contains a large repetition of letters within it. This problem is related to string handling and manipulation.  An original message is sent from planet Earth to planet Cybertron in form of a string. However, the letter position and string size is not important. The number of time each letter has occurred in the string is important. So the original string which is sent to Cybertron is encrypted in the new string which comprises the letters followed by each time it has occurred in the original string. Eg- original message is- abcdabf. Then the encrypted string is- a2b2c1d1f1 
tl;dr: You have find out the frequency of letters in a given string and print it as the new string which comprises of the letter followed by its frequency.For example string is- abcdabf. Then the new string is- a2b2c1d1f1 

To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size). Each replacement operation has 3 parameters: a starting index i, a source word x and a target word y.  The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y.  If not, we do nothing. For example, if we have S = "abcd" and we have some replacement operation i = 2, x = "cd", y = "ffff", then because "cd" starts at position 2 in the original string S, we will replace it with "ffff". Using another example on S = "abcd", if we have both the replacement operation i = 0, x = "ab", y = "eee", as well as another replacement operation i = 2, x = "ec", y = "ffff", this second operation does nothing because in the original string S[2] = 'c', which doesn't match x[0] = 'e'. All these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, S = "abc", indexes = [0, 1], sources = ["ab","bc"] is not a valid test case. 
tl;dr: You are given following inputs: original string S, starting index i, source word x and target word y.  If x starts at position i in S, you need to replace that occurrence of x with y. Consider: 0 <= indexes.length = sources.length = targets.length <= 100 0 < indexes[i] < S.length <= 1000 All characters in given inputs are lowercase letters. 

Ash like soup very much! So, on the Raksha Bandhan day, his sister gave him a soup maker as a gift. Soup maker in the ith hour will make volume  Vi liters of soup and pours it in a bowl. Each hour, the Volume of soup in every bowl is reduced due to evaporation. More precisely, when the temperature on a given hour is Ti, the Volume of soup in every bowl will reduce its volume by Ti. If this would reduce the volume of soup to or below zero, Bowl gets empty. All bowls are independent of each other. Note that the Volume of soup in every bowl made in an hour i already lose part of its volume at the same hour. In an extreme case, this may mean that there is no soup left in the bowl at the end of a particular hour. You are given the initial volumes of soup in bowls and the temperature on each hour. Determine the total volume of soup evaporated in each hour. Input The first line contains a single integer N (1   N   10^5)   the number of hours. The second line contains N integers V 1, V 2,  , V N (0   V i   10^9), where V i is the initial volume of soup made in an hour i. The third line contains N integers T 1, T 2,  , T N (0   T i   10^9), where T i is the temperature in an hour i. Output Output a single line with N integers, where the i-th integer represents the total volume of soup melted in an hour i. 
tl;dr: