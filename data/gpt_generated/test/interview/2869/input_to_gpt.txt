Bike loves looking for the second maximum element in the sequence. The second maximum element in the sequence of distinct numbers x_1, x_2, ..., x_{k} (k > 1) is such maximum element x_{j}, that the following inequality holds: $x_{j} \neq \operatorname{max}_{i = 1}^{k} x_{i}$. The lucky number of the sequence of distinct positive integers x_1, x_2, ..., x_{k} (k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence. You've got a sequence of distinct positive integers s_1, s_2, ..., s_{n} (n > 1). Let's denote sequence s_{l}, s_{l} + 1, ..., s_{r} as s[l..r] (1   l < r   n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r]. Note that as all numbers in sequence s are distinct, all the given definitions make sence. 
tl;dr: The lucky number of the sequence of distinct positive integers x_1, x_2, ..., x_{k} (k > 1) is the number that is equal to the bitwise excluding OR of the maximum element of the sequence and the second maximum element of the sequence. You've got a sequence of distinct positive integers s_1, s_2, ..., s_{n} (n > 1). Let's denote sequence s_{l}, s_{l} + 1, ..., s_{r} as s[l..r] (1   l < r   n). Your task is to find the maximum number among all lucky numbers of sequences s[l..r]. All numbers in sequence s are distinct. 

Your work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped. The bits are numbered from the least significant bit (index 1). 
tl;dr: Your work is to write a method that takes a value and an index, and returns the value with the bit at given index flipped. The bits are numbered from the least significant bit. The index number can be out of number's range. 

The only difference between easy and hard versions is constraints. The BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day. The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately. How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \le d \le n$) days in a row  In other words, you want to buy the minimum number of TV shows so that there is some segment of $d$ consecutive days in which all episodes belong to the purchased shows. 
tl;dr: The BerTV channel every day broadcasts one episode of one of the $k$ TV shows. You know the schedule for the next $n$ days: a sequence of integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le k$), where $a_i$ is the show, the episode of which will be shown in $i$-th day. The subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately. How many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows $d$ ($1 \le d \le n$) days in a row  

Using roman numerals the numbers $1, 2, 3, 4, 5, 6, 7, 8, 9$ are written as  I ,  II ,  III ,  IV ,  V ,  VI ,  VII ,  VIII ,  IX . The numbers $10, 20, 30, 40, 50, 60, 70, 80, 90$ are written as  X ,  XX ,  XXX ,  XL ,  L ,  LX ,  LXX ,  LXXX ,  XC . Any number smaller than $100$ can be written by converting tens and ones separately and concatenating the results. So, for example, the number $48$ would be written as XLVIII, XL for $40$ and VIII for $8$. Given a number written in roman numerals, rearrange its characters so that you create the smallest possible number, written in roman numerals. 
tl;dr: