Jeff's friends know full well that the boy likes to get sequences and arrays for his birthday. Thus, Jeff got sequence p_1, p_2, ..., p_{n} for his birthday. Jeff hates inversions in sequences. An inversion in sequence a_1, a_2, ..., a_{n} is a pair of indexes i, j (1   i < j   n), such that an inequality a_{i} > a_{j} holds. Jeff can multiply some numbers of the sequence p by -1. At that, he wants the number of inversions in the sequence to be minimum. Help Jeff and find the minimum number of inversions he manages to get. 
tl;dr: You are given a sequence. You can multiply some numbers of the sequence p by -1. You want the number of inversions in the sequence to be minimum. Find the minimum number of inversions you can get. 

Task: Make a function that converts a word to pig latin. The rules of pig latin are: ``` If the word has more than 3 letters:   1. Take the first letter of a word and move it to the end   2. Add -ay to the word Otherwise leave the word alone. ``` 
tl;dr: Task: Make a function that converts a word to pig latin. The rules of pig latin are: If the word has more than 3 letters:   1. Take the first letter of a word and move it to the end   2. Add -ay to the word Otherwise leave the word alone. 

# Task  Your Informatics teacher at school likes coming up with new ways to help you understand the material. When you started studying numeral systems, he introduced his own numeral system, which he's convinced will help clarify things. His numeral system has base 26, and its digits are represented by English capital letters - `A for 0, B for 1, and so on`.  The teacher assigned you the following numeral system exercise: given a one-digit `number`, you should find all unordered pairs of one-digit numbers whose values add up to the `number`. # 
tl;dr: Given a one-digit number, you should find all unordered pairs of one-digit numbers whose values add up to the number. 

The postal service is interested in cutting costs as an alternative to raising the postage rates. One way to do this is by minimizing the distance traveled when delivering mail from the post office to all the required locations and returning to the post office. It may be that all the mail to be delivered does not fit on the mail truck at once, in which case the distance traveled by the truck must include travel back to the post office to reload. For simplicity, we assume a one dimensional world with the post office at the origin, and delivery locations each identified by a single coordinate. As an example, suppose a postal truck can carry up to $100$ letters and that $50$ letters need to be delivered to location $-10$, that $175$ need to be delivered to location $10$, and $20$ delivered to location $25$. A maximally efficient plan would be: Deliver the $50$ letters to location $-10$ (travel $2 \cdot 10$), the first $100$ letters to location $10$ (travel $2 \cdot 10$), the remaining $75$ letters to location $10$ while on the way to delivering the $20$ to location $25$ (travel $2 \cdot 25$). The total round-trip distance traveled is $90$. 
tl;dr: