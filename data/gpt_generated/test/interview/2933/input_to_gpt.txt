The factorial of a number, `n!`, is defined for whole numbers as the product of all integers from `1` to `n`.  For example, `5!` is `5 * 4 * 3 * 2 * 1 = 120` Most factorial implementations use a recursive function to determine the value of `factorial(n)`. However, this blows up the stack for large values of `n` - most systems cannot handle stack depths much greater than 2000 levels. Write an implementation to calculate the factorial of arbitrarily large numbers, *without recursion.* # Rules * `n < 0` should return `nil`/  `None` * `n = 0` should return `1` * `n > 0` should return `n!` # Note Codewars limits the amount of data it will send back and forth, which may introduce a false ceiling for how high of a value of `n` it will accept. All tests use values less than this limit
tl;dr: The factorial of a number, `n!`, is defined for whole numbers as the product of all integers from `1` to `n`.  Write an implementation to calculate the factorial of arbitrarily large numbers, without recursion. # Rules * `n < 0` should return `nil`/  `None` * `n = 0` should return `1` * `n > 0` should return `n!

Given an array of unique integers salary where salary[i] is the salary of the employee i. Return the average salary of employees excluding the minimum and maximum salary.   
tl;dr: You are given an array of unique salaries. Return the average of salaries excluding the minimum and maximum salary.   

There are $n$ athletes in front of you. Athletes are numbered from $1$ to $n$ from left to right. You know the strength of each athlete   the athlete number $i$ has the strength $s_i$. You want to split all athletes into two teams. Each team must have at least one athlete, and each athlete must be exactly in one team. You want the strongest athlete from the first team to differ as little as possible from the weakest athlete from the second team. Formally, you want to split the athletes into two teams $A$ and $B$ so that the value $|\max(A) - \min(B)|$ is as small as possible, where $\max(A)$ is the maximum strength of an athlete from team $A$, and $\min(B)$ is the minimum strength of an athlete from team $B$. For example, if $n=5$ and the strength of the athletes is $s=[3, 1, 2, 6, 4]$, then one of the possible split into teams is:   first team: $A = [1, 2, 4]$,  second team: $B = [3, 6]$.  In this case, the value $|\max(A) - \min(B)|$ will be equal to $|4-3|=1$. This example illustrates one of the ways of optimal split into two teams. Print the minimum value $|\max(A) - \min(B)|$. 
tl;dr: You are given a list of $n$ integers. You want to split the integers into two lists. You want the largest integer in the first list $A$ to differ as little as possible from the smallest integer in the second list $B$. 

Wallace the Weightlifting Walrus is training for a contest where it will have to lift $1000$ kg. Wallace has some weight plates lying around, possibly of different weights, and its goal is to add some of the plates to a bar so that it can train with a weight as close as possible to $1000$ kg. In case there exist two such numbers which are equally close to $1000$ (e.g. $998$ and $1002$), Wallace will pick the greater one (in this case $1002$). Help Wallace the Weightlifting Walrus and tell it which weight it will have to lift. 
tl;dr: