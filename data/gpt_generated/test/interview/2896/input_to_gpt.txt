To almost all of us solving sets of linear equations is quite obviously the most exciting bit of linear algebra.  Benny does not agree though and wants to write a quick program to solve his homework problems for him.  Unfortunately Benny's lack of interest in linear algebra means he has no real clue on how to go about this.  Fortunately, you can help him! Write a method ```solve``` that accepts a list of linear equations that your method will have to solve.  The output should be a map (a `Map` object in JavaScript) with a value for each variable in the equations.  If the system does not have a unique solution (has infinitely many solutions or is unsolvable), return ```null``` (`None` in python). 
tl;dr: The input given are lists of linear equations. You need to write a method ```solve``` that accepts the input and outputs a dictionary with a value for each variable in the equations.  If the system does not have a unique solution, return ```null```. 

Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles. 
tl;dr: Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles. 

The life goes up and down, just like nice sequences. Sequence t_1, t_2, ..., t_{n} is called nice if the following two conditions are satisfied:   t_{i} < t_{i} + 1 for each odd i < n;  t_{i} > t_{i} + 1 for each even i < n.  For example, sequences (2, 8), (1, 5, 1) and (2, 5, 1, 100, 99, 120) are nice, while (1, 1), (1, 2, 3) and (2, 5, 3, 2) are not. Bear Limak has a sequence of positive integers t_1, t_2, ..., t_{n}. This sequence is not nice now and Limak wants to fix it by a single swap. He is going to choose two indices i < j and swap elements t_{i} and t_{j} in order to get a nice sequence. Count the number of ways to do so. Two ways are considered different if indices of elements chosen for a swap are different. 
tl;dr: Sequence t_1, t_2, ..., t_{n} is called nice if the following two conditions are satisfied:   t_{i} < t_{i} + 1 for each odd i < n;  t_{i} > t_{i} + 1 for each even i < n.  You have a sequence of positive integers t_1, t_2, ..., t_{n}. This sequence is not nice now and you want to fix it by a single swap. Count the number of ways to do so. Two ways are considered different if indices of elements chosen for a swap are different. 

Some viruses replicate by replacing a piece of DNA in a living cell with a piece of DNA that the virus carries with it. This makes the cell start to produce viruses identical to the original one that infected the cell. A group of biologists is interested in knowing how much DNA a certain virus inserts into the host genome. To find this out they have sequenced the full genome of a healthy cell as well as that of an identical cell infected by a virus. The genome turned out to be pretty big, so now they need your help in the data processing step. Given the DNA sequence before and after the virus infection, determine the length of the smallest single, consecutive piece of DNA that can have been inserted into the first sequence to turn it into the second one. A single, consecutive piece of DNA might also have been removed from the same position in the sequence as DNA was inserted. Small changes in the DNA can have large effects, so the virus might insert only a few bases, or even nothing at all. 
tl;dr: