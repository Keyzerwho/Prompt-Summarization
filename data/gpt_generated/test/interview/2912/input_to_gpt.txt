In this Kata you need to write the method SharedBits that returns true if 2 integers share at least two '1' bits. For simplicity assume that all numbers are positive For example int seven = 7;    //0111 int ten = 10;     //1010 int fifteen = 15; //1111 SharedBits(seven, ten);     //false SharedBits(seven, fifteen); //true SharedBits(ten, fifteen);   //true - seven and ten share only a single '1' (at index 3) - seven and fifteen share 3 bits (at indexes 1, 2, and 3) - ten and fifteen  share 2 bits (at indexes 0 and 2) 
tl;dr: You need to write the method that returns true if 2 integers share at least two '1' bits. Assume that all numbers are positive For example int seven = 7;    //0111 int ten = 10;     //1010 int fifteen = 15; //1111 SharedBits(seven, ten);     //false SharedBits(seven, fifteen); //true SharedBits(ten, fifteen);   //true - seven and ten share only a single '1' (at index 3) - seven and fifteen share 3 bits (at indexes 1, 2, and 3) - ten and fifteen  share 2 bits (at indexes 0 and 2

There are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively. For each of these bags, you will paint one of the balls red, and paint the other blue. Afterwards, the 2N balls will be classified according to color. Then, we will define the following:  - R_{max}: the maximum integer written on a ball painted in red  - R_{min}: the minimum integer written on a ball painted in red  - B_{max}: the maximum integer written on a ball painted in blue  - B_{min}: the minimum integer written on a ball painted in blue Find the minimum possible value of (R_{max} - R_{min}) \times (B_{max} - B_{min}). -----Constraints-----  - 1   N   200,000  - 1   x_i, y_i   10^9 
tl;dr: There are N bags, each containing two white balls. The i-th box contains two balls with integers x_i and y_i written on them, respectively. For each of these bags, you will paint one of the balls red, and paint the other blue. Afterwards, the 2N balls will be classified according to color. Then, we will define the following:  - R_{max}: the maximum integer written on a ball painted in red  - R_{min}: the minimum integer written on a ball painted in red  - B_{max}: the maximum integer written on a ball painted in blue  - B_{min}: the minimum integer written on a ball painted in blue Find the minimum possible value of (R_{max} - R_{min}) \times (B_{max} - B_{min}). -----Constraints-----  - 1   N   200,000  - 1   x_i, y_i   10^9 

# Task **_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That ,  # Conditions : * **_N_**  is *divisible by divisor* * **_N_**  is *less than or equal to bound*  * **_N_**  is *greater than 0*. ___ 
tl;dr: # Task Given two positive values: divisor and bound. Write a function maxMultiple(divisor, bound) to find the largest integer that is divisible by divisor and less than or equal to bound but greater than 0. It's guaranteed that a divisor is found. # 

You are given a collection of $N$ non-empty strings, denoted by $S_1, S_2, \ldots , S_ n$. Then you are given $N$-$1$ operations which you execute in the order they are given. The $i^{th}$ operation is has the following format:  $a$$b$  ($1$-based indexing, without the quotes), which means that you have to make the following changes:  - $S_ a = S_ a + S_ b$, i.e. concatenate $a^{th}$ string and $b^{th}$ string and store the result in $a^{th}$ string,  - $S_ b$ = "", i.e. make the $b^{th}$ string empty, after doing the previous step. You are ensured that after the $i^{th}$ operation, there will be no future operation that will be accessing $S_ b$. Given these operations to join strings, print the last string that will remain at the end of this process. 
tl;dr: