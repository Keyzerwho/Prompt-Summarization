Mr. E Ven only likes even length words. Please create a translator so that he doesn't have to hear those pesky odd length words. For some reason he also hates punctuation, he likes his sentences to flow. Your translator should take in a string and output it with all odd length words having an extra letter (the last letter in the word). It should also remove all punctuation (., !) as well as any underscores (_). "How did we end up here  We go " translated becomes->  "Howw didd we endd up here We go
tl;dr: Your translator should take in a string and output it with all odd length words having an extra letter that is the last letter in the word. It should also remove all punctuation as well as any underscores. 

We have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. We also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). AtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 
tl;dr: You have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. You also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). You are going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 

Your friend has gotten lost in the woods. He has called and asked for you to come get him, but you are very busy and would rather just stay home. You quickly look up a map of the woods. It appears that the woods consist of a small number of clearings, with paths connecting them. You hope that the woods are sufficiently small and simple that your friend can get out easily, even if he is just randomly running around. From your friend s description, you can figure out at which clearing he is. Assuming that every time he reaches a clearing, he runs in a uniformly random direction (including back the way he came), and that it takes him exactly one minute to get from clearing to clearing, can you predict how long it will take him to get out on average  
tl;dr: