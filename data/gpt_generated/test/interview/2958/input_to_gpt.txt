# Description "It's the end of trick-or-treating and we have a list/array representing how much candy each child in our group has made out with. We don't want the kids to start arguing, and using our parental intuition we know trouble is brewing as many of the children in the group have received different amounts of candy from each home.  So we want each child to have the same amount of candies, only we can't exactly take any candy away from the kids, that would be even worse. Instead we decide to give each child extra candy until they all have the same amount. # Task Your job is to find out how much candy each child has, and give them each additional candy until they too have as much as the child(ren) with the most candy. You also want to keep a total of how much candy you've handed out because reasons." Your job is to give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.  In the first case (look below) the most candies are given to second kid (i.e second place in list/array), 8. Because of that we will give the first kid 3 so he can have 8 and the third kid 2 and the fourth kid 4, so all kids will have 8 candies.So we end up handing out 3 + 2 + 4 = 9. ```python candies ([5,8,6,4]) # return 9 candies ([1,2,4,6]) # return 11 candies ([1,6]) # return 5 candies ([]) # return -1 candies ([6]) # return -1 (because only one kid) ``` ```cs CandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9 CandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11 CandyProblem.GetMissingCandies(new [] { }) // return -1 CandyProblem.GetMissingCandies(new [] {1, 6}) // return 5 ``` ```haskell  candies [5,8,6,4] -- return 9 candies [1,2,4,6] -- return 11 candies [] -- return -1 candies [1,6] -- return 5 ``
tl;dr: # Task Given a list/array representing how much candy each child in our group has made out with, give all the kids the same amount of candies as the kid with the most candies and then return the total number candies that have been given out. If there are no kids, or only one, return -1.  ```python candies ([5,8,6,4]) # return 9 candies ([1,2,4,6]) # return 11 candies ([1,6]) # return 5 candies ([]) # return -1 candies ([6]) # return -1 (because only one kid) ``` ```cs CandyProblem.GetMissingCandies(new [] {5, 6, 8, 4}) // return 9 CandyProblem.GetMissingCandies(new [] {1, 2, 4, 6}) // return 11 CandyProblem.GetMissingCandies(new [] { }) // return -1 CandyProblem.GetMissingCandies(new [] {1, 6}) // return 5 ``` ```haskell  candies [5,8,6,4] -- return 9 candies [1,2,4,6] -- return 11 candies [] -- return -1 candies [1,6] -- return 5 ``

You are given n pairs of numbers where the first number is always smaller than the second number. Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.  Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order. 
tl;dr: You are given n pairs of numbers where the first number is always smaller than the second number in a pair. A chain if formed when a pair (c, d) can follow another pair (a, b) if and only if b < c. Find the length of longest chain which can be formed.  

Given two strings representing two complex numbers. You need to return a string representing their multiplication. Note i2 = -1 according to the definition. 
tl;dr: Write program to return a string representing the multiplication of given two  strings of complex numbers. 

Anthony and Cora are playing Dominion, their favorite card game. In Dominion, there are $T$ different card types, and each player has a set of cards (known as a deck). A deck $D$ is said to have $C$ combos if $C$ is the largest integer such that for $C$ different card types in the game, $D$ contains at least two cards of that type. Anthony currently has $N$ cards and he wants to trade cards with Cora such that he ll have a deck with exactly $K$ combos. For each card type $i$ ($1\leq i\leq T$), Anthony can choose to perform at most one transaction. There are two types of transaction:  - Buy up to two cards of $i^{th}$ type from Cora at $a_ i$ coins each  - Sell all his cards of $i^{th}$ type for $b_ i$ coins each Anthony wants to maximize his profit while obtaining a complete deck. Anthony is willing to spend coins in order to obtain a complete deck if necessary, but of course he wants to minimize his spending in that case. Note that he doesn t care about keeping the rest of his cards which don t contribute to the complete deck. Anthony has hired you to help him calculate how much money he can make if he chooses the optimal strategy for obtaining enough combos. If he has to spend money, output a negative number. 
tl;dr: