Complete the function that determines the score of a hand in the card game [Blackjack](https://en.wikipedia.org/wiki/Blackjack) (aka 21). The function receives an array of strings that represent each card in the hand (`"2"`, `"3",` ..., `"10"`, `"J"`, `"Q"`, `"K"` or `"A"`) and should return the score of the hand (integer). ~~~if:c 
tl;dr: Complete the function that determines the score of a hand in the card game Blackjack and return the highest score of the cards that is less than or equal to 21. If there is no score less than or equal to 21 return the smallest score more than 21. Number cards count as their face value. Jack, Queen and King count as 10. An Ace can be counted as either 1 or 11. 

For a vector $\vec{v} = (x, y)$, define $|v| = \sqrt{x^2 + y^2}$. Allen had a bit too much to drink at the bar, which is at the origin. There are $n$ vectors $\vec{v_1}, \vec{v_2}, \cdots, \vec{v_n}$. Allen will make $n$ moves. As Allen's sense of direction is impaired, during the $i$-th move he will either move in the direction $\vec{v_i}$ or $-\vec{v_i}$. In other words, if his position is currently $p = (x, y)$, he will either move to $p + \vec{v_i}$ or $p - \vec{v_i}$. Allen doesn't want to wander too far from home (which happens to also be the bar). You need to help him figure out a sequence of moves (a sequence of signs for the vectors) such that his final position $p$ satisfies $|p| \le 1.5 \cdot 10^6$ so that he can stay safe. 
tl;dr: You are at the origin. You will make $n$ moves. There are $n$ vectors $\vec{v_1}, \vec{v_2}, \cdots, \vec{v_n}$. During the $i$-th move you will either move in the direction $\vec{v_i}$ or $-\vec{v_i}$. Figure out a sequence of moves such that your final position $p$ satisfies $|p| \le 1.5 \cdot 10^6$. 

Being a responsible young adult, you have decided to start planning for retirement. Doing some back-of-the-envelope calculations, you figured out you need at least $M$ euros to retire comfortably. You are currently broke, but fortunately a generous gazillionaire friend has offered to lend you an arbitrary amount of money (as much as you need), without interest, to invest in the stock market. After making some profit you will then return the original sum to your friend, leaving you with the remainder. Available to you are $n$ investment opportunities, the $i$-th of which costs $c_ i$ euros. You also used your computer science skills to predict that the $i$-th investment will earn you $p_ i$ euros per day. What is the minimum number of days you need before you can pay back your friend and retire  You can only invest once in each investment opportunity, but you can invest in as many different investment opportunities as you like. For example, consider the first sample. If you buy only the second investment (which costs $15$ euros) you will earn $p_2 = 10$ euros per day. After two days you will have earned $20$ euros, exactly enough to pay off your friend (from whom you borrowed $15$ euros) and retire with the remaining profit ($5$ euros). There is no way to make a net amount of $5$ euros in a single day, so two days is the fastest possible. 
tl;dr: