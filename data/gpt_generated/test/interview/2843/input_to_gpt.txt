In this kata you will create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out. ### 
tl;dr: Create a function that takes a list of non-negative integers and strings and returns a new list with the strings filtered out. 

$n$ boys and $m$ girls came to the party. Each boy presented each girl some integer number of sweets (possibly zero). All boys are numbered with integers from $1$ to $n$ and all girls are numbered with integers from $1$ to $m$. For all $1 \leq i \leq n$ the minimal number of sweets, which $i$-th boy presented to some girl is equal to $b_i$ and for all $1 \leq j \leq m$ the maximal number of sweets, which $j$-th girl received from some boy is equal to $g_j$. More formally, let $a_{i,j}$ be the number of sweets which the $i$-th boy give to the $j$-th girl. Then $b_i$ is equal exactly to the minimum among values $a_{i,1}, a_{i,2}, \ldots, a_{i,m}$ and $g_j$ is equal exactly to the maximum among values $b_{1,j}, b_{2,j}, \ldots, b_{n,j}$. You are interested in the minimum total number of sweets that boys could present, so you need to minimize the sum of $a_{i,j}$ for all $(i,j)$ such that $1 \leq i \leq n$ and $1 \leq j \leq m$. You are given the numbers $b_1, \ldots, b_n$ and $g_1, \ldots, g_m$, determine this number.  
tl;dr: $n$ boys and $m$ girls came to the party. Each boy presented each girl some integer number of sweets possibly zero. All boys are numbered with integers from $1$ to $n$ and all girls are numbered with integers from $1$ to $m$. For all $1 \leq i \leq n$ the minimal number of sweets, which $i$-th boy presented to some girl is equal to $b_i$ and for all $1 \leq j \leq m$ the maximal number of sweets, which $j$-th girl received from some boy is equal to $g_j$. Let $a_{i,j}$ be the number of sweets which the $i$-th boy gives to the $j$-th girl. You are interested in the minimum total number of sweets that boys could present. You are given the numbers $b_1, \ldots, b_n$ and $g_1, \ldots, g_m$, determine this number.  

Chef is very organised in whatever he does and likes to maintain statistics of his work. Chef has expertise in web development and hence is a regular contributor on a forum. Chef sometimes makes multiple contributions in a single day.. Each day chef makes at least 1 contribution he is assigned a shade of green. The greater the number of contribution in a single day the darker shade of green he gets assigned and vice versa. Your job is to find out the number of days chef is assigned a same shade of green and print the number of times chef is assigned a unique shade of green. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum. The next line contains N spaced integers the number of contributions chef has made if he has made any. -----OUTPUT----- The output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green. -----CONSTRAINTS----- 1 <= T <= 25 5 <= N <= 50 1 <= Ai <= 50 -----EXAMPLE
tl;dr: Find the frequency of the unique values in a given array of size N. -----INPUT----- The first line of input contains an integer T denoting the number of test cases. T test cases follow. The first line of each test case contains an integer N denoting the number of days chef has contributed towards the forum. The next line contains N spaced integers the number of contributions chef has made if he has made any. -----OUTPUT----- The output will contain numbers on separate lines that show the number of individual green shades chef has earned in ascending order of intensity of the shades of green. -----CONSTRAINTS----- 1 <= T <= 25 5 <= N <= 50 1 <= Ai <= 50 -----EXAMPLE

You are given $W$, a set of $N$ words that are anagrams of each other. There are no duplicate letters in any word. A set of words $S \subseteq W$ is called  swap-free  if there is no way to turn a word $x \in S$ into another word $y \in S$ by swapping only a single pair of (not necessarily adjacent) letters in $x$. Find the size of the largest swap-free set $S$ chosen from the given set $W$. 
tl;dr: