Kate likes to count words in text blocks. By words she means continuous sequences of English alphabetic characters (from a to z ). Here are examples: `Hello there, little user5453 374 ())$. I d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains "words" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']` Kate doesn't like some of words and doesn't count them. Words to be excluded are "a", "the", "on", "at", "of", "upon", "in" and "as", case-insensitive. Today Kate's too lazy and have decided to teach her computer to count "words" for her. 
tl;dr: Kate count words which means continuous sequences of English alphabetic characters. Here are examples: `Hello there, little user5453 374 ())$. I d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains "words" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']` Kate doesn't count "a", "the", "on", "at", "of", "upon", "in" and "as". Kate has decided to teach her computer to count "words" for her. 

=====Problem Statement===== A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string s, which is the company name in lowercase letters, your task is to find the top three most common characters in the string. Print the three most common characters along with their occurrence count. Sort in descending order of occurrence count. If the occurrence count is the same, sort the characters in alphabetical order. For example, according to the conditions described above, GOOGLE would have it's logo with the letters G, O, E.  
tl;dr: =====Problem Statement===== Given a string s in lowercase, your task is to find the top three most common characters in the string and their occurance count. Sort in descending order of occurrence count, and then by alphabetical order to break ties. For example, GOOGLE would output G 2 O 2 E 1 

Mr. E Ven only likes even length words. Please create a translator so that he doesn't have to hear those pesky odd length words. For some reason he also hates punctuation, he likes his sentences to flow. Your translator should take in a string and output it with all odd length words having an extra letter (the last letter in the word). It should also remove all punctuation (., !) as well as any underscores (_). "How did we end up here  We go " translated becomes->  "Howw didd we endd up here We go
tl;dr: Your translator should take in a string and output it with all odd length words having an extra letter that is the last letter in the word. It should also remove all punctuation as well as any underscores. 

Ruben and Albert are what you can call abnormally smart. They are also both very fond of mathematically inspired games. Their only problem is that most games are too easy for them, and they end up beating everyone who dares challenge them. Because of that, they re now mostly playing against each other. To make things interesting, they had a professor design a new game for them. This new game was interesting at first. Nowadays, however, Albert often complains that it is impossible for him to win a particular round. After long discussions, they ve now decided to take this a step further, and actually figure out who d win if they both played optimally. They need you to write a computer program that does this for them. A state in the game consists of one or more $x\times y\times z$ cuboids. A (legal) move is choosing a cuboid, then a value for each of the three axes (basically choosing three planes), and then cutting the cuboid along these (thus removing a $1\times y\times z$, $x\times 1\times z$ and a $x\times y\times 1$, all overlapping, cuboid). In effect you ve created between $0$ and $8$ (inclusive) smaller cuboids. All three planes cut from the cuboid need to be on the cuboid (you can t cut away a hypothetical cuboid on the outside of the real one). An example might be in order. You ve chosen a $3\times 5\times 4$ cuboid, and are about to cut it. You now need to choose the three planes. This means you need an $x$ between $1$ and $3$, a $y$ between $1$ and $5$ and a $z$ between $1$ and $4$. Say you choose $2$, $1$ and $3$, respectively. The first cut would alone cut the cuboid into two $1\times 5\times 4$ cuboids, the second into a single $3\times 4\times 4$ cuboid, while the third would alone cut the cuboid into a $3\times 5\times 1$ and a $3\times 5\times 2$ cuboid. Put together these cuts produces $4$ new smaller cuboids, of sizes $1\times 4\times 1$,$1\times 4\times 1$,$1\times 4\times 2$ and $1\times 4\times 2$. Note that cutting a cuboid with an axis of size $1$ would remove it altogether. The players take turns making a move. The winner is the player that removes the last cuboid. 
tl;dr: