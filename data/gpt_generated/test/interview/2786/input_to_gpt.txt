In this Kata you need to write the method SharedBits that returns true if 2 integers share at least two '1' bits. For simplicity assume that all numbers are positive For example int seven = 7;    //0111 int ten = 10;     //1010 int fifteen = 15; //1111 SharedBits(seven, ten);     //false SharedBits(seven, fifteen); //true SharedBits(ten, fifteen);   //true - seven and ten share only a single '1' (at index 3) - seven and fifteen share 3 bits (at indexes 1, 2, and 3) - ten and fifteen  share 2 bits (at indexes 0 and 2) 
tl;dr: You need to write the method that returns true if 2 integers share at least two '1' bits. Assume that all numbers are positive For example int seven = 7;    //0111 int ten = 10;     //1010 int fifteen = 15; //1111 SharedBits(seven, ten);     //false SharedBits(seven, fifteen); //true SharedBits(ten, fifteen);   //true - seven and ten share only a single '1' (at index 3) - seven and fifteen share 3 bits (at indexes 1, 2, and 3) - ten and fifteen  share 2 bits (at indexes 0 and 2

This is now a little serie :) Funny Dots You will get two Integer n (width) and m (height) and your task is to draw following pattern. Each line is seperated with '\n'. Both integers are equal or greater than 1. No need to check for invalid parameters. e.g.:                                           +---+---+---+             +---+                         | o | o | o | dot(1,1) => | o |          dot(3,2) =>    +---+---+---+                         +---+                         | o | o | o |                                           +---+---+---+  Serie: ASCII Fun ASCII Fun #1: X-Shape ASCII Fun #2: Funny Dots ASCII Fun #3: Puzzle Tiles ASCII Fun #4: Build a pyrami
tl;dr: You will be given two integers and your task is to draw following pattern. 

You are given a graph consisting of $n$ vertices and $m$ edges. It is not guaranteed that the given graph is connected. Some edges are already directed and you can't change their direction. Other edges are undirected and you have to choose some direction for all these edges. You have to direct undirected edges in such a way that the resulting graph is directed and acyclic (i.e. the graph with all edges directed and having no directed cycles). Note that you have to direct all undirected edges. You have to answer $t$ independent test cases. 
tl;dr: You are given a graph which might have undirected edges. You need to direct undirected edges in such a way that the resulting graph is directed and acyclic. 

A regular bracket-sequence is a string of characters consisting only of opening and closing brackets, and satisfying the following conditions:  - An empty string is a regular bracket-sequence.  - If $A$ is a regular bracket-sequence, then ($A$), [$A$] and {$A$} are also regular bracket-sequences.  - If $A$ and $B$ are regular bracket-sequences, then $AB$ is also a regular bracket-sequence. For example, the sequences  [({})] ,  [](){}  and  [{}]()[{}]  are regular, but the sequences  [({{([ ,  []({)}  and  [{}])([{}]  are not. Ivica has found a string which looks like it could be a regular bracket-sequence. Some of the characters have become smudged and illegible, and could have been any character. Write a program that calculates how many ways the illegible characters in the string can be replaced by brackets so that the result is a regular bracket-sequence. This number can be very large, so output only its last $5$ digits. 
tl;dr: