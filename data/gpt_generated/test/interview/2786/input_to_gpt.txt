Dima is a beginner programmer. During his working process, he regularly has to repeat the following operation again and again: to remove every second element from the array. One day he has been bored with easy solutions of this problem, and he has come up with the following extravagant algorithm. Let's consider that initially array contains n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step Dima selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image]  You have to write a program that allows you to determine what number will be in the cell with index x (1   x   n) after Dima's algorithm finishes. 
tl;dr: You are given an array consisting of n numbers from 1 to n and the number i is located in the cell with the index 2i - 1 (Indices are numbered starting from one) and other cells of the array are empty. Each step you selects a non-empty array cell with the maximum index and moves the number written in it to the nearest empty cell to the left of the selected one. The process continues until all n numbers will appear in the first n cells of the array. For example if n = 4, the array is changing as follows: [Image]  You have to write a program that allows you to determine what number will be in the cell with index x (1   x   n) after your algorithm finishes. summary :  

Given an array of unique integers salary where salary[i] is the salary of the employee i. Return the average salary of employees excluding the minimum and maximum salary.   
tl;dr: You are given an array of unique salaries. Return the average of salaries excluding the minimum and maximum salary.   

A regular bracket-sequence is a string of characters consisting only of opening and closing brackets, and satisfying the following conditions:  - An empty string is a regular bracket-sequence.  - If $A$ is a regular bracket-sequence, then ($A$), [$A$] and {$A$} are also regular bracket-sequences.  - If $A$ and $B$ are regular bracket-sequences, then $AB$ is also a regular bracket-sequence. For example, the sequences  [({})] ,  [](){}  and  [{}]()[{}]  are regular, but the sequences  [({{([ ,  []({)}  and  [{}])([{}]  are not. Ivica has found a string which looks like it could be a regular bracket-sequence. Some of the characters have become smudged and illegible, and could have been any character. Write a program that calculates how many ways the illegible characters in the string can be replaced by brackets so that the result is a regular bracket-sequence. This number can be very large, so output only its last $5$ digits. 
tl;dr: