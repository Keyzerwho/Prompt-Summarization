A subsequence of a string S is a string that can be obtained by deleting zero or more characters from S without changing the order of the remaining characters. For example, arc, artistic and (an empty string) are all subsequences of artistic; abc and ci are not. You are given a string A consisting of lowercase English letters. Find the shortest string among the strings consisting of lowercase English letters that are not subsequences of A. If there are more than one such string, find the lexicographically smallest one among them. -----Constraints-----  - 1 \leq |A| \leq 2 \times 10^5  - A consists of lowercase English letters. 
tl;dr: You are given a string A consisting of lowercase English letters. Find the shortest string among the strings consisting of lowercase English letters that are not subsequences of A. If there are more than one such string, find the lexicographically smallest one among them. -----Constraints-----  - 1 \leq |A| \leq 2 \times 10^5  - A consists of lowercase English letters. 

You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, we will compute a_i + b_j and write it on a sheet of paper. That is, we will write N^2 integers in total. Compute the XOR of these N^2 integers. Definition of XOR The XOR of integers c_1, c_2, ..., c_m is defined as follows:  - Let the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even. For example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 
tl;dr: You are given two integer sequences, each of length N: a_1, ..., a_N and b_1, ..., b_N. There are N^2 ways to choose two integers i and j such that 1 \leq i, j \leq N. For each of these N^2 pairs, Compute a_i + b_j. Compute the XOR of these N^2 integers. -----Constraints-----  - All input values are integers.  - 1 \leq N \leq 200,000  - 0 \leq a_i, b_i < 2^{28} 

Solve a given equation and return the value of x in the form of string "x=#value". The equation contains only '+', '-' operation, the variable x and its coefficient. If there is no solution for the equation, return "No solution". If there are infinite solutions for the equation, return "Infinite solutions". If there is exactly one solution for the equation, we ensure that the value of x is an integer. 
tl;dr: Solve a given equation and return the value of x in the form of string "x=#value". For the equation, if there is no solution, return "No solution" or if infinite solutions, return "Infinite solutions" or if exactly one solution for the equation, ensure that the value of x is an integer. 

Mirko and Slavko s favourite pastime is competing against each other in mathematical games. This time they took a heap of $N$ pebbles and settled on the following rules:  - Mirko is the first to play, then Slavko, then Mirko again, then Slavko and so on;  - Mirko can take any number of pebbles (between $1$ and $N$, inclusive) from the heap during his first move;  - In each of the following turns the current player must take at least $1$ pebble and is allowed to take at most double the amount of pebbles taken during the previous turn by the other player; naturally, one cannot take more pebbles than the remaining amount in the heap;  - The player who takes the last pebble is the winner. Both Mirko and Slavko play optimally (if it is possible for one player to beat the other, that player will always win). We need to find the minimum number of pebbles that Mirko must take during his first turn such that he is guaranteed to win the game. 
tl;dr: