You have an array A of size N containing only positive numbers. You have to output the maximum possible value of A[i]%A[j] where 1<=i,j<=N.  
tl;dr: Find maximum possible value of A[i]%A[j] where 1<=i,j<=N for a given array A of size N containing positive numbers.  

We have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. We also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). AtCoDeer the deer is going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 
tl;dr: You have a permutation of the integers from 1 through N, p_1, p_2, .., p_N. You also have M pairs of two integers between 1 and N (inclusive), represented as (x_1,y_1), (x_2,y_2), .., (x_M,y_M). You are going to perform the following operation on p as many times as desired so that the number of i (1   i   N) such that p_i = i is maximized:  - Choose j such that 1   j   M, and swap p_{x_j} and p_{y_j}. Find the maximum possible number of i such that p_i = i after operations. -----Constraints-----  - 2   N   10^5  - 1   M   10^5  - p is a permutation of integers from 1 through N.  - 1   x_j,y_j   N  - x_j   y_j  - If i   j, \{x_i,y_i\}   \{x_j,y_j\}.  - All values in input are integers. 

You will be given the prime factors of a number as an array. E.g: ```[2,2,2,3,3,5,5,13]``` You need to find the number, n, to which that prime factorization belongs. It will be: ``` n = 2 .3 .5 .13 = 23400 ``` Then, generate the divisors of this number. Your function ```get_num() or getNum()``` will receive an array with potentially unordered prime factors and should output: an array with the found integer n at index 0, the amount of total divisors (both prime and compound numbers) at index 1, followed the smallest factor (index 2, and the biggest one (last element) We will see the example given above with the only difference that the array of the prime factors is unordered. The list of divisors for that number (23400) is: ``` 2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 15, 18, 20, 24, 25, 26, 30, 36, 39, 40, 45, 50, 52, 60, 65, 72, 75, 78, 90, 100, 104, 117, 120, 130, 150, 156, 180, 195, 200, 225, 234, 260, 300, 312, 325, 360, 390, 450, 468, 520, 585, 600, 650, 780, 900, 936, 975, 1170, 1300, 1560, 1800, 1950, 2340, 2600, 2925, 3900, 4680, 5850, 7800, 11700 (not considering the integer 23400 itself) ``` There is a total amount of ```71``` divisors. The smallest divisor is ```2``` and the highest ```11700```. So the expected output will be:  ``` get_num([2,13,2,5,2,5,3,3]) == [23400, 71, 2, 11700] ``` Enjoy
tl;dr: Write a function get_num() or getNum() that receives an array with potentially unordered prime factors and output: an array with the found integer n at index 0, the amount of total divisors at index 1, followed the smallest factor and the biggest one. 

Vanya wants to pass n exams and get the academic scholarship. He will get the scholarship if the average grade mark for all the exams is at least avg. The exam grade cannot exceed r. Vanya has passed the exams and got grade a_{i} for the i-th exam. To increase the grade for the i-th exam by 1 point, Vanya must write b_{i} essays. He can raise the exam grade multiple times. What is the minimum number of essays that Vanya needs to write to get scholarship  
tl;dr: