You are given a graph of $n$ nodes and $m$ bidirectional edges.
The cost for each edge is either $a$ or $b$.
The graph is fully-connected, so you can travel between any pair of nodes using the edges. 

For each node $p = 1, 2, \dots, n$, you need to remove some edges so that:
It will be possible to travel between each pair of nodes using the remaining edges only, and
the sum of times required to pass each remaining road will be the minimum possible.
You should output the minimum time required to travel between node $1$ and node $p$.


-----Input-----

The first line of the input contains four integers $n$, $m$, $a$ and $b$ ($2 \leq n \leq 70$, $n - 1 \leq m \leq 200$, $1 \leq a < b \leq 10^7$) â€” the number of nodes and edges in the graph, and two possible travel times. Each of the following lines contains three integers $u, v, c$ ($1 \leq u, v \leq n$, $u \neq v$, $c \in \{a, b\}$) denoting an edge between the nodes $u$ and $v$, which has cost $c$.

You can assume that the graph is connected and has no loops or multiedges.


-----Output-----

Output a single line containing $n$ integers. The $p$-th of them should denote the minimum possible post required to travel from $1$ to $p$ after the selected edges are abandoned. Note that for each $p$ you can abandon a different set of edges.


-----Examples-----
Input
5 5 20 25
1 2 25
2 3 25
3 4 20
4 5 20
5 1 20

Output
0 25 60 40 20

Input
6 7 13 22
1 2 13
2 3 13
1 4 22
3 4 13
4 5 13
5 6 13
6 1 13

Output
0 13 26 39 26 13