You have $n$ nodes in a graph, numbered from $v_1$ to $v_n$. Each node has a certain value — initially the $i$-th node has a value of $i$.

The node values will be revised $q$ times. For the $j$-th revision, node $v_i$ will have a value of $n+i$ and have the highest value amongst every node. 
The node $v_i$ will have this value for the only the $j$-th revision,
it will have value $i$ on the next revision unless that node's value is revisied again.

Some nodes dislike with each other which causes conflicts. Formally, if two nodes $a$ and $b$ dislike with each other and $a$ has a higher value than $b$ then $a$ conflicts with $b$.
A dangerous triple is a triple of three nodes $a$, $b$, $c$ such that $a$ conflicts with $b$ and $b$ conflicts with $c$.

You need to find the number of dangerous triples before the revisions and after each revision.

-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n \le 100\,000$, $0
\le m \le 100\,000$) — the number of nodes and the number of nodes that dislike each other. Each of the following $m$ lines
contains two integers $a_i$, $b_i$ ($1 \le a_i, b_i \le n$, $a_i \neq b_i$)
denoting that nodes $a_i$ and $b_i$ dislike each other (that is, $a_i$
dislikes $b_i$ and $b_i$ dislikes $a_i$). Each such relationship will be
mentioned exactly once.

The next line contains an integer $q$ ($0 \le q \le 100\,000$) — the number of 
revisions. The $i$-th of the following $q$ lines contains a single
integer $v_i$ ($1 \le v_i \le n$) denoting that at the end of the $i$-th day,
node $v_i$ will have the highest value. 


-----Output-----

Output $q + 1$ integers. The $i$-th of them should contain the number of dangerous triples on the $i$-th revision.


-----Examples-----
Input
4 5
1 2
2 4
1 3
3 4
2 3
2
2
3

Output
4
3
2

Input
3 3
1 2
2 3
1 3
5
1
2
2
1
3

Output
1
1
1
1
1
1
