 You are given two entities A and B and their positions are represented by integer coordinates on a horizantal line. the first position $x$ and a second position $y$. The Entity A moves in the positive direction by $a$, and the entity b moves to the negative direction by $b$. For example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, entities will be at position $2$ and $7$. At the $2$-nd second, both A and B will be at position $4$. Will the two entities be at the same position at the same moment  If so, how long will it take  Let's find a moment in time (in seconds) after which the entities will be at the same point. 
-----Input----- Test data starts with the number $0 \le N \le 100$ of code fragments in the repository. Then follows, for each code fragment, one line containing the file name that the fragment was fetched from and the contents of the fragment on subsequent lines. File names will neither contain whitespace nor be guaranteed to be unique. The name is at most 254 characters long. Each fragment is terminated by ***END*** on a line by its own. This line is not considered being part of the fragment. After the fragments in the repository have all been listed, comes the actual code snippet to find matches for. This snippet is also terminated by ***END*** on a line by its own. Lines are guaranteed to be no longer than $254$ characters. No code fragment will be longer than $10000$ lines. Any code and file name lines will only contain the ASCII characters 32-126. The total size of the input file will not exceed $10^6$ characters. -----Output----- Output the number of matching consecutive lines (empty lines not counted) in a longest match from the repository, followed by a space-separated list of the file names of each fragments containing a match of this length, given in the order that the matching fragments were presented in the repository description. If no fragments match, write the number 0 on a line of its own. -----Examples----- Sample Input: 2 HelloWorld.c int Main() {     printf("Hello %d\n",i); } ***END*** Add.c int Main() {   for (int i=0; i<10; i++)     sum += i;   printf("SUM %d", sum); } ***END*** int Main() {   printf("Hello %d\n",i);   printf("THE END\n"); } ***END*** Sample Output: 2 HelloWorld.c