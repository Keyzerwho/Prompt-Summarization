 You are given an image containing gold patches and exposed paper patches. You need to find where the sheet was folded. 
-----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will begin with a line with two integers, $n$ and $m$ ($2 \le n, m \le 25$), where $n$ is the number of rows, and $m$ is the number of columns of the image. Each of the next $n$ lines will contain exactly $m$ characters, all of which will be either ‘#’ or ‘.’. This represents a crudely collected digital image of the sheet of gold leaf. There is guaranteed to be at least one ‘.’, and there is guaranteed to be a solution. -----Output----- Output a single line with four integers, indicating the places where the fold hits the edges of the paper. Output them in this order:     r1 c1 r2 c2 where $(r1,c1)$ and $(r2,c2)$ are row/column coordinates ($r$=row, $c$=column). The top left character of the image is $(1,1)$ and the bottom right is $(n,m)$. If the fold is horizontal or diagonal, list the left coordinates before the right. If the fold is vertical, list the top coordinates before the bottom. If the fold is horizontal, use the coordinates above the fold. If the fold is vertical, use the coordinates to the left of the fold. If the fold is diagonal, use the coordinates of the edge pixels that the fold goes through. If more than one fold is possible, choose the one with the smallest first coordinate, then the smallest second coordinate, then third, then fourth. -----Examples----- Sample Input 1: 8 10 #.#..##..# ####..#### ###.##.... ...#..#### ....##.... .#.##..##. ########## ########## Sample Output 1: 3 1 3 10 Sample Input 2: 5 20 ###########.#.#.#.#. ###########...#.###. ##########..##.#..## ###########..#.#.##. ###########.###...#. Sample Output 2: 1 15 5 15