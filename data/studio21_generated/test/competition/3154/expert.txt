 You are given a toy list. You need to make an assignment of toys such that no kid cries. 
-----Input----- The first line of input contains two integers $n$ and $m$ ($1 \leq n,m \leq 1000$), the number of kids and the number of toys. The kids are numbered from $1$ to $n$ and the toys from $1$ to $m$. Then follows a line containing two integers $d$ and $e$ ($1 \leq d \leq 10^9$ and $0 \leq e \leq 10^6$), the total duration of yesterday’s playtime in microseconds and the number of events Tom recorded yesterday. Then follow $e$ lines giving the events Tom recorded yesterday. Each event is described by a line containing three integers $s$, $k$ and $t$ ($0 \le s < d$, $1 \le k \le n$, and $0 \le t \le m$), indicating that kid $k$ started playing with toy $t$ at time $s$ (in microseconds since the start of yesterday’s playtime). If $t = 0$ then kid $k$ stopped playing with any toy at time $s$. The events are given in non-decreasing order of time (i.e., the values of $s$ are non-decreasing). All toy changes for all kids prior to playtime ending have been recorded by Tom (in particular if one kid $k_1$ steals a toy from some other kid $k_2$, there is also an event indicating $k_2$’s change of toy at the same microsecond, even if $k_2$ stops playing with any toy). At the start of the playtime, no kid is playing with any toy (but they can start playing with a toy at time $0$). At time $d$ all kids still playing with toys stopped playing with them but Tom did not record these events. Kids do not switch toys more than once per microsecond. -----Output----- If there is an assignment of toys to kids such that no kid will start crying today, output $n$ distinct integers, the $i^{\text {th}}$ of which is the toy that kid $i$ should play with. If there are multiple possible solutions, output any one of them. Otherwise, if there is no such assignment, output “impossible”. -----Examples----- Sample Input 1: 2 3 6 7 0 1 1 0 2 2 1 1 3 2 1 2 2 2 1 3 2 3 4 2 1 Sample Output 1: 1 2 Sample Input 2: 2 1 20 3 0 1 1 10 1 0 10 2 1 Sample Output 2: impossible