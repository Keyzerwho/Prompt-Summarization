 Write a program that can search through text for substrings that could have been generated by a given CFG. 
-----Input----- For this problem, $V$ is the set of English uppercase alphabet letters and $\Sigma $ is the set of English lowercase alphabet letters. Input begins with a description of $R$, the rules of the CFG. The first line contains an integer $1 \leq n \leq 30$, indicating the number of rules to follow. The next $n$ lines each describe one rule, in the format [A-Z]Â -> [a-zA-Z]$^*$ That is, an uppercase letter, a single space, an arrow, a single space, and a string of zero or more uppercase or lowercase letters. Rule productions are at most 10 characters long. The start variable $S$ is the head of the first rule given. Following the rules are at most 100 lines of text to search, each of length at most 50 characters. Each line of input consists of only English lowercase letters and spaces. Input ends at end of file. -----Output----- For each line to search, print a line giving the longest non-empty substring that the grammar can generate. If there is a tie for the longest, give the substring that appears earliest on the line. If there is no matching substring, print NONE in capital letters. -----Examples----- Sample Input: 5 S -> aSa S -> bSb S -> a S -> b S ->  where are the abaaba palindromes on this line none on this line how about this aaaaaaabbbbbbbbbbbbbbbbba even a single a or b is a palindrome Sample Output: abaaba NONE abbbbbbbbbbbbbbbbba a