 You are given a list of $n$ locations ($1 \leq i \leq n$) and a list of $p_ i$ points ($1 \leq p_i \leq n$). You should find the maximum total number of points that can be obtained from the tasks. 
-----Input----- The input consists of one case. The first line of input contains two positive integers $n$ and $T$ ($T \leq 1440$). Each of the next $n$ lines contains three integers $p_ i$ ($1 \leq p_ i \leq 100$), $t_ i$ ($1 \leq t_ i \leq 1440$), and $d_ i$ ($-1 \leq d_ i \leq 1440$). If $d_ i = -1$ then there is no deadline for task $i$. Finally, the last $n+2$ lines each contains $n+2$ nonnegative integers. The entry in the $i$th row and $j$th column is the number of minutes ($\leq 1440$) it takes to travel from location $i$ to location $j$. The indices of the starting and ending locations are $n+1$ and $n+2$, respectively. It is guaranteed that the time to travel from a location to itself is $0$, but the time to travel between two locations in different directions may not be the same (e.g. uphill instead of downhill). -----Output----- Print the maximum total number of points that can be obtained on the first line. In the second line, print a set of indices of the tasks that need to be performed to achieve this maximum. The list of tasks should be sorted by the indices of the tasks (not by the order in which they are performed). The indices should be separated by a single space. If there are multiple sets of tasks that can achieve the maximum, print the one that is lexicographically smallest. That is, if two sets of tasks achieve the same maximum, the index of the first task in the set should be as small as possible. If there is a tie, the index of the second task in the set should be as small as possible, and so on. If the maximum number of points that can be obtained is $0$, output a blank line for the indices of the tasks to be performed. If there is no way of travelling from the starting location to the ending location within $T$ minutes, print $0$. -----Examples----- Sample Input: 3 352 93 82 444 92 76 436 99 62 -1 0 70 66 71 97 76 0 87 66 74 62 90 0 60 94 60 68 68 0 69 83 78 83 73 0 Sample Output: 99 3