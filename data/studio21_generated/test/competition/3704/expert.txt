 You are given two lists (one containing IPv4 addresses, the other containing subnets).  Output a single number -1 if some IPv4 address matches both source whitelist and blacklist. 
-----Input----- The first line of the input contains single integer $n$ ($1 \le n \le 2\cdot10^5$) — total number of IPv4 subnets in the input. The following $n$ lines contain IPv4 subnets. Each line starts with either '-' or '+' sign, which indicates if the subnet belongs to the blacklist or to the whitelist correspondingly. It is followed, without any spaces, by the IPv4 subnet in $a.b.c.d$ or $a.b.c.d/x$ format ($0 \le x \le 32$). The blacklist always contains at least one subnet. All of the IPv4 subnets given in the input are valid. Integer numbers do not start with extra leading zeroes. The provided IPv4 subnets can intersect arbitrarily. -----Output----- Output -1, if there is an IPv4 address that matches both the whitelist and the blacklist. Otherwise output $t$ — the length of the optimised blacklist, followed by $t$ subnets, with each subnet on a new line. Subnets may be printed in arbitrary order. All addresses matching the source blacklist must match the optimised blacklist. All addresses matching the source whitelist must not match the optimised blacklist. You can print a subnet $a.b.c.d/32$ in any of two ways: as $a.b.c.d/32$ or as $a.b.c.d$. If there is more than one solution, output any. -----Examples----- Input 1 -149.154.167.99 Output 1 0.0.0.0/0 Input 4 -149.154.167.99 +149.154.167.100/30 +149.154.167.128/25 -149.154.167.120/29 Output 2 149.154.167.99 149.154.167.120/29 Input 5 -127.0.0.4/31 +127.0.0.8 +127.0.0.0/30 -195.82.146.208/29 -127.0.0.6/31 Output 2 195.0.0.0/8 127.0.0.4/30 Input 2 +127.0.0.1/32 -127.0.0.1 Output -1