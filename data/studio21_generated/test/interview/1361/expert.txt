 You are given two numbers X and Y. In one step, you can either double the value of X, or decrement X by 1. Return the minimum number of steps required before the value of X equals Y. 
-----Input----- The first line contains a single integer n (3 ≤ n ≤ 100) — the number of holds. The next line contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 1000), where a_{i} is the height where the hold number i hangs. The sequence a_{i} is increasing (i.e. each element except for the first one is strictly larger than the previous one). -----Output----- Print a single number — the minimum difficulty of the track after removing a single hold. -----Examples----- Input 3 1 4 6 Output 5 Input 5 1 2 3 4 5 Output 2 Input 5 1 2 3 7 8 Output 4 -----Note----- In the first sample you can remove only the second hold, then the sequence looks like (1, 6), the maximum difference of the neighboring elements equals 5. In the second test after removing every hold the difficulty equals 2. In the third test you can obtain sequences (1, 3, 7, 8), (1, 2, 7, 8), (1, 2, 3, 8), for which the difficulty is 4, 5 and 5, respectively. Thus, after removing the second element we obtain the optimal answer — 4.