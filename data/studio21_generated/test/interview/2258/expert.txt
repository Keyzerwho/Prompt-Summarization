 You are given an array of integers. You need to find a list of pairs that swaps the values in an non-decreasing order. 
-----Input----- The first line of the input contains a single integer $n$ ($1 \le n \le 1000$) — the length of the array. Next line contains $n$ integers $a_1,a_2,...,a_n$ $(1 \le a_i \le 10^9)$  — elements of the array. -----Output----- Print -1 if no such list exists. Otherwise in the first line you should print a single integer $m$ ($0 \le m \le \dfrac{n(n-1)}{2}$) — number of pairs in the list. The $i$-th of the following $m$ lines should contain two integers $u_i, v_i$ ($1 \le u_i < v_i\le n$). If there are multiple possible answers, you may find any of them. -----Examples----- Input 3 3 1 2 Output 2 1 3 1 2 Input 4 1 8 1 6 Output 2 2 4 2 3 Input 5 1 1 1 2 2 Output 0 -----Note----- In the first sample test case the array will change in this order $[3,1,2] \rightarrow [2,1,3] \rightarrow [1,2,3]$. In the second sample test case it will be $[1,8,1,6] \rightarrow [1,6,1,8] \rightarrow [1,1,6,8]$. In the third sample test case the array is already sorted.