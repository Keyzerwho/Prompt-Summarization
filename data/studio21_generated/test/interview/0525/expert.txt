 Given a positive integer n, you are given an array of integers. You can take two numbers from the array, delete both of them from the array and put the sum of the two numbers in their place. After doing this operation n times, the array will become empty. What is the minimum number of times you need to apply the above operation to the array to make it empty 
-----Input----- Each test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 100$). Description of the test cases follows. The first line of each test case contains an integer $n$ ($1 \leq n \leq 2 \cdot 10^5$) — the length of the password. The second line of each test case contains $n$ integers $a_{1},a_{2},\dots,a_{n}$ ($1 \leq a_{i} \leq 10^9$) — the initial contents of your password. The sum of $n$ over all test cases will not exceed $2 \cdot 10^5$. -----Output----- For each password, print one integer: the shortest possible length of the password after some number of operations. -----Example----- Input 2 4 2 1 3 1 2 420 420 Output 1 2 -----Note----- In the first test case, you can do the following to achieve a length of $1$: Pick $i=2$ to get $[2, 4, 1]$ Pick $i=1$ to get $[6, 1]$ Pick $i=1$ to get $[7]$ In the second test case, you can't perform any operations because there is no valid $i$ that satisfies the requirements mentioned above.