 Given well-bracketed sequence, return alternating depth and maximum number of symbols between any pair of matched brackets of the type ( and ), including both the outer brackets. 
-----Input format----- The input consists of two lines.  The first line is a single integer N, the length of the bracket sequence. Positions in the sequence are numbered 1,2,…,N. The second line is a sequence of N space-separated integers that encode the bracket expression as follows: 1 denotes an opening bracket (, 2 denotes a closing bracket ), 3 denotes an opening bracket [ and 4 denotes a closing bracket ].  Nothing other than 1, 2, 3 or 4 appears in the second line of input and the corresponding expression is guaranteed to be well-bracketed. -----Output format----- Your program should print 3 space-separated integers in a line, denoting the three quantities asked for in the following order: alternating depth, length of the maximum sequence between matching () brackets and length of the maximum sequence between matching [] brackets.   -----Testdata----- You may assume that 2 ≤ N ≤ 105.  In 30% of the test cases, 2 ≤ N ≤ 103. - Subtask 1 (30 marks) - Subtask 2 (70 marks) -----Sample Input----- 14 1 1 3 4 2 2 3 3 3 1 2 4 4 4 -----Sample Output----- 2 6 8