 You are given n positive integers s[i] , where 1<=i<=n.  You need to find an n subarray having the maximum possible value. 
-----Input:----- - First line will contain $T$, number of testcases. Then the testcases follow.  - The first line of each testcase contains an integer $N$, denoting number of elements in the given array. - The second line contains $N$ space-separated integers $S1$, $S2$, â€¦, $SN$ denoting the value of stone in each shop.  -----Output:----- For each testcase, output the maximum value of stones possible, the starting index and ending index of the chosen subarray (0-based indexing). If there are multiple subarrays with same value, print the one with greater starting index. If there are multiple answer subarrays with same starting index, print the one with greater ending index. (The answer will fit in 64 bit binary number). -----Constraints----- - $1 \leq T \leq 10$ - $1 \leq N \leq 10^5$ - $-100 \leq S[i] \leq 100$ -----Subtasks----- - 30 points : $1 \leq N \leq 10^3$ - 70 points : $1 \leq N \leq 10^5$ -----Sample Input:----- 1 3 1 2 3 -----Sample Output:----- 6 1 2 -----EXPLANATION:----- If Ripul collects all the all the three gems, total value will be 6 (1 * 2 * 3). If Ripul collects last two gems, total value will be 6 (1 * 2 * 3). So, he picks the subarray with greater starting index.