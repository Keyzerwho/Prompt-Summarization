 You are given a function that takes 2 arguments. Translate it into the form that accepts a single argument. 
Example Given this function: ```python def add(x, y, z):   return x + y + z ``` We can call in a normal way: ```python add(1, 2, 3) # => 6 ``` But we can create a curried version of `add(a, b, c)`function: ```python curriedAdd = lambda a: (lambda b: (lambda c: add(a,b,c))) curriedAdd(1)(2)(3) # => 6 ``` ## Partial application > Is the process of fixing a number of arguments to a function, producing another function of smaller arity. Partial application takes a function: ``` f: X × Y → R ``` and a fixed value `x` for the first argument to produce a new function ``` f': Y → R ``` `f'` does the same as `f`, but only has to fill in the second parameter which is why its arity is one less than the arity of `f`. One says that the first argument is bound to `x`. ### Example ```python partialAdd = lambda a: (lambda *args: add(a,*args)) partialAdd(1)(2, 3) # => 6 ``` ------------- Your work is to implement a generic `curryPartial()` function allows either currying or partial application. For example: ```python curriedAdd = curryPartial(add) curriedAdd(1)(2)(3) # => 6 partialAdd = curryPartial(add, 1) partialAdd(2, 3) # => 6 ``` We want the function be very flexible. All these examples should produce the same result: ```python curryPartial(add)(1)(2)(3) # =>6  curryPartial(add, 1)(2)(3) # =>6  curryPartial(add, 1)(2, 3) # =>6  curryPartial(add, 1, 2)(3) # =>6  curryPartial(add, 1, 2, 3) # =>6  curryPartial(add)(1, 2, 3) # =>6  curryPartial(add)(1, 2)(3) # =>6  curryPartial(add)()(1, 2, 3) # =>6  curryPartial(add)()(1)()()(2)(3) # =>6  curryPartial(add)()(1)()()(2)(3, 4, 5, 6) # =>6  curryPartial(add, 1)(2, 3, 4, 5) # =>6  ``` And also all of these: ```python curryPartial(curryPartial(curryPartial(add, 1), 2), 3) # =>6 curryPartial(curryPartial(add, 1, 2), 3) # =>6 curryPartial(curryPartial(add, 1), 2, 3) # =>6 curryPartial(curryPartial(add, 1), 2)(3) # =>6 curryPartial(curryPartial(add, 1)(2), 3) # =>6 curryPartial(curryPartial(curryPartial(add, 1)), 2, 3) # =>6 ```