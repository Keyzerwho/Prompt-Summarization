 You are given an array of integers. You need to find the number of moves required to transform that array into an array of only odd integers.
-----Input----- The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases in the input. Then $t$ test cases follow. The first line of a test case contains $n$ ($1 \le n \le 2\cdot10^5$) — the number of integers in the sequence $a$. The second line contains positive integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^9$). The sum of $n$ for all test cases in the input doesn't exceed $2\cdot10^5$. -----Output----- For $t$ test cases print the answers in the order of test cases in the input. The answer for the test case is the minimal number of moves needed to make all numbers in the test case odd (i.e. not divisible by $2$). -----Example----- Input 4 6 40 6 40 3 20 1 1 1024 4 2 4 8 16 3 3 1 7 Output 4 10 4 0 -----Note----- In the first test case of the example, the optimal sequence of moves can be as follows:   before making moves $a=[40, 6, 40, 3, 20, 1]$;  choose $c=6$;  now $a=[40, 3, 40, 3, 20, 1]$;  choose $c=40$;  now $a=[20, 3, 20, 3, 20, 1]$;  choose $c=20$;  now $a=[10, 3, 10, 3, 10, 1]$;  choose $c=10$;  now $a=[5, 3, 5, 3, 5, 1]$ — all numbers are odd.  Thus, all numbers became odd after $4$ moves. In $3$ or fewer moves, you cannot make them all odd.